
CANSAT_MAINBOARD_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08013ad8  08013ad8  00023ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014010  08014010  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08014010  08014010  00024010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014018  08014018  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014018  08014018  00024018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801401c  0801401c  0002401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08014020  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb0  20000350  0801436c  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  0801436c  00031f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000292bb  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059c6  00000000  00000000  0005967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  0005f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019f5  00000000  00000000  000611f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c63  00000000  00000000  00062be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d50b  00000000  00000000  00089848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7ee9  00000000  00000000  000b6d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a4b8  00000000  00000000  0019ec3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001a90f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013abc 	.word	0x08013abc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08013abc 	.word	0x08013abc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f00f ffc6 	bl	8010fea <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105e:	4b40      	ldr	r3, [pc, #256]	; (8001160 <MX_ADC1_Init+0x120>)
 8001060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001064:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <MX_ADC1_Init+0x120>)
 8001068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <MX_ADC1_Init+0x120>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <MX_ADC1_Init+0x120>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <MX_ADC1_Init+0x120>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001080:	4b37      	ldr	r3, [pc, #220]	; (8001160 <MX_ADC1_Init+0x120>)
 8001082:	2201      	movs	r2, #1
 8001084:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <MX_ADC1_Init+0x120>)
 8001088:	2204      	movs	r2, #4
 800108a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108c:	4b34      	ldr	r3, [pc, #208]	; (8001160 <MX_ADC1_Init+0x120>)
 800108e:	2200      	movs	r2, #0
 8001090:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <MX_ADC1_Init+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001098:	4b31      	ldr	r3, [pc, #196]	; (8001160 <MX_ADC1_Init+0x120>)
 800109a:	2203      	movs	r2, #3
 800109c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <MX_ADC1_Init+0x120>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <MX_ADC1_Init+0x120>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <MX_ADC1_Init+0x120>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_ADC1_Init+0x120>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_ADC1_Init+0x120>)
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <MX_ADC1_Init+0x120>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	4825      	ldr	r0, [pc, #148]	; (8001160 <MX_ADC1_Init+0x120>)
 80010ca:	f001 fedf 	bl	8002e8c <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d4:	f000 fb26 	bl	8001724 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	481f      	ldr	r0, [pc, #124]	; (8001160 <MX_ADC1_Init+0x120>)
 80010e4:	f003 f8a4 	bl	8004230 <HAL_ADCEx_MultiModeConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ee:	f000 fb19 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_ADC1_Init+0x124>)
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2306      	movs	r3, #6
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010fa:	2307      	movs	r3, #7
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fe:	237f      	movs	r3, #127	; 0x7f
 8001100:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001102:	2304      	movs	r3, #4
 8001104:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <MX_ADC1_Init+0x120>)
 8001110:	f002 fb2c 	bl	800376c <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800111a:	f000 fb03 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC1_Init+0x128>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001122:	230c      	movs	r3, #12
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_ADC1_Init+0x120>)
 800112c:	f002 fb1e 	bl	800376c <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001136:	f000 faf5 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_ADC1_Init+0x12c>)
 800113c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800113e:	2312      	movs	r3, #18
 8001140:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_ADC1_Init+0x120>)
 8001148:	f002 fb10 	bl	800376c <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001152:	f000 fae7 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3730      	adds	r7, #48	; 0x30
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000036c 	.word	0x2000036c
 8001164:	cb840000 	.word	0xcb840000
 8001168:	08600004 	.word	0x08600004
 800116c:	0c900008 	.word	0x0c900008

08001170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09a      	sub	sp, #104	; 0x68
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2244      	movs	r2, #68	; 0x44
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00f ff2a 	bl	8010fea <memset>
  if(adcHandle->Instance==ADC1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d13c      	bne.n	800121a <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 fb11 	bl	80077d8 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011bc:	f000 fab2 	bl	8001724 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a11      	ldr	r2, [pc, #68]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80011f0:	2306      	movs	r3, #6
 80011f2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f003 fd05 	bl	8004c14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2012      	movs	r0, #18
 8001210:	f003 f98d 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001214:	2012      	movs	r0, #18
 8001216:	f003 f9a4 	bl	8004562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3768      	adds	r7, #104	; 0x68
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001238:	d142      	bne.n	80012c0 <HAL_ADC_ConvCpltCallback+0x98>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f998 	bl	8000574 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	a123      	add	r1, pc, #140	; (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800124a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124e:	f7ff fb25 	bl	800089c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fced 	bl	8000c38 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <HAL_ADC_ConvCpltCallback+0xc4>)
 8001262:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		vcurr=(float) 0;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f97f 	bl	8000574 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	; (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fb0e 	bl	800089c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7ff f826 	bl	80002dc <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_ADC_ConvCpltCallback+0xc4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f97b 	bl	8000598 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fcbf 	bl	8000c38 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_ADC_ConvCpltCallback+0xcc>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	4909      	ldr	r1, [pc, #36]	; (80012e8 <HAL_ADC_ConvCpltCallback+0xc0>)
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_ADC_ConvCpltCallback+0xd0>)
 80012c6:	f001 ff65 	bl	8003194 <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	20000670 	.word	0x20000670
 80012ec:	2000067c 	.word	0x2000067c
 80012f0:	20000678 	.word	0x20000678
 80012f4:	20000680 	.word	0x20000680
 80012f8:	2000036c 	.word	0x2000036c

080012fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_DMA_Init+0x60>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <MX_DMA_Init+0x60>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6493      	str	r3, [r2, #72]	; 0x48
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_DMA_Init+0x60>)
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_DMA_Init+0x60>)
 800131c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <MX_DMA_Init+0x60>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6493      	str	r3, [r2, #72]	; 0x48
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_DMA_Init+0x60>)
 8001328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	200b      	movs	r0, #11
 8001338:	f003 f8f9 	bl	800452e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800133c:	200b      	movs	r0, #11
 800133e:	f003 f910 	bl	8004562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	200c      	movs	r0, #12
 8001348:	f003 f8f1 	bl	800452e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800134c:	200c      	movs	r0, #12
 800134e:	f003 f908 	bl	8004562 <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000

08001360 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <MX_GPIO_Init+0xe8>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a33      	ldr	r2, [pc, #204]	; (8001448 <MX_GPIO_Init+0xe8>)
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <MX_GPIO_Init+0xe8>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <MX_GPIO_Init+0xe8>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a2d      	ldr	r2, [pc, #180]	; (8001448 <MX_GPIO_Init+0xe8>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <MX_GPIO_Init+0xe8>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <MX_GPIO_Init+0xe8>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a27      	ldr	r2, [pc, #156]	; (8001448 <MX_GPIO_Init+0xe8>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b25      	ldr	r3, [pc, #148]	; (8001448 <MX_GPIO_Init+0xe8>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_GPIO_Init+0xe8>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_GPIO_Init+0xe8>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_GPIO_Init+0xe8>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2110      	movs	r1, #16
 80013da:	481c      	ldr	r0, [pc, #112]	; (800144c <MX_GPIO_Init+0xec>)
 80013dc:	f003 fd9c 	bl	8004f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDSTATE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013e6:	481a      	ldr	r0, [pc, #104]	; (8001450 <MX_GPIO_Init+0xf0>)
 80013e8:	f003 fd96 	bl	8004f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80013ec:	2310      	movs	r3, #16
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4812      	ldr	r0, [pc, #72]	; (800144c <MX_GPIO_Init+0xec>)
 8001404:	f003 fc06 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SD_DETECT_Pin;
 8001408:	2306      	movs	r3, #6
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_GPIO_Init+0xf0>)
 800141e:	f003 fbf9 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEDSTATE_Pin|PWEN_Pin;
 8001422:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_GPIO_Init+0xf0>)
 800143c:	f003 fbea 	bl	8004c14 <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	48000800 	.word	0x48000800
 8001450:	48000400 	.word	0x48000400

08001454 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_I2C3_Init+0x74>)
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <MX_I2C3_Init+0x78>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <MX_I2C3_Init+0x7c>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_I2C3_Init+0x74>)
 800146c:	2201      	movs	r2, #1
 800146e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C3_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C3_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800148e:	480e      	ldr	r0, [pc, #56]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001490:	f003 fd5a 	bl	8004f48 <HAL_I2C_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800149a:	f000 f943 	bl	8001724 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800149e:	2100      	movs	r1, #0
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <MX_I2C3_Init+0x74>)
 80014a2:	f003 fdec 	bl	800507e <HAL_I2CEx_ConfigAnalogFilter>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014ac:	f000 f93a 	bl	8001724 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_I2C3_Init+0x74>)
 80014b4:	f003 fe2e 	bl	8005114 <HAL_I2CEx_ConfigDigitalFilter>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014be:	f000 f931 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200003d8 	.word	0x200003d8
 80014cc:	40007800 	.word	0x40007800
 80014d0:	0010061a 	.word	0x0010061a

080014d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b09c      	sub	sp, #112	; 0x70
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	2244      	movs	r2, #68	; 0x44
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00f fd78 	bl	8010fea <memset>
  if(i2cHandle->Instance==I2C3)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <HAL_I2C_MspInit+0xe4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d155      	bne.n	80015b0 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001508:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800150a:	2300      	movs	r3, #0
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	4618      	mov	r0, r3
 8001514:	f006 f960 	bl	80077d8 <HAL_RCCEx_PeriphCLKConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800151e:	f000 f901 	bl	8001724 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a25      	ldr	r2, [pc, #148]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001556:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001558:	2312      	movs	r3, #18
 800155a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001564:	2302      	movs	r3, #2
 8001566:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001572:	f003 fb4f 	bl	8004c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800157a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001588:	2308      	movs	r3, #8
 800158a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001590:	4619      	mov	r1, r3
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <HAL_I2C_MspInit+0xec>)
 8001594:	f003 fb3e 	bl	8004c14 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 800159e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015a2:	6593      	str	r3, [r2, #88]	; 0x58
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_I2C_MspInit+0xe8>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3770      	adds	r7, #112	; 0x70
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40007800 	.word	0x40007800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	48000800 	.word	0x48000800

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ca:	f001 f98c 	bl	80028e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ce:	f000 f85d 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d2:	f7ff fec5 	bl	8001360 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d6:	f7ff fe91 	bl	80012fc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80015da:	f000 ff33 	bl	8002444 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80015de:	f000 ff7b 	bl	80024d8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80015e2:	f7ff fd2d 	bl	8001040 <MX_ADC1_Init>
  MX_SPI1_Init();
 80015e6:	f000 fc69 	bl	8001ebc <MX_SPI1_Init>
  MX_USB_Device_Init();
 80015ea:	f00d f863 	bl	800e6b4 <MX_USB_Device_Init>
  MX_I2C3_Init();
 80015ee:	f7ff ff31 	bl	8001454 <MX_I2C3_Init>
  MX_TIM3_Init();
 80015f2:	f000 fe57 	bl	80022a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80015f6:	2203      	movs	r2, #3
 80015f8:	491a      	ldr	r1, [pc, #104]	; (8001664 <main+0xa0>)
 80015fa:	481b      	ldr	r0, [pc, #108]	; (8001668 <main+0xa4>)
 80015fc:	f001 fdca 	bl	8003194 <HAL_ADC_Start_DMA>

  	HAL_UART_Abort(&huart1);
 8001600:	481a      	ldr	r0, [pc, #104]	; (800166c <main+0xa8>)
 8001602:	f007 fc11 	bl	8008e28 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	4919      	ldr	r1, [pc, #100]	; (8001670 <main+0xac>)
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <main+0xa8>)
 800160c:	f007 fbc0 	bl	8008d90 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8001610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001614:	2131      	movs	r1, #49	; 0x31
 8001616:	4817      	ldr	r0, [pc, #92]	; (8001674 <main+0xb0>)
 8001618:	f00f fce7 	bl	8010fea <memset>
  	memset(flashwrite,'\0',256);
 800161c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001620:	2100      	movs	r1, #0
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <main+0xb4>)
 8001624:	f00f fce1 	bl	8010fea <memset>

  	HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	; 0x64
 800162a:	f001 f9cd 	bl	80029c8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  nmea_parse(&myData, DataBuffer);
 800162e:	4913      	ldr	r1, [pc, #76]	; (800167c <main+0xb8>)
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <main+0xbc>)
 8001632:	f000 fb93 	bl	8001d5c <nmea_parse>
	  int taillefin=0;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
	  taillefin = snprintf((uint8_t *)usbbuffer,64,"v=%0.3f",myData.speed);
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <main+0xbc>)
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ffaa 	bl	8000598 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	e9cd 2300 	strd	r2, r3, [sp]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <main+0xc0>)
 800164e:	2140      	movs	r1, #64	; 0x40
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <main+0xc4>)
 8001652:	f00f fc33 	bl	8010ebc <sniprintf>
 8001656:	6078      	str	r0, [r7, #4]
	  CDC_Transmit_FS((uint8_t *)usbbuffer,taillefin);
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	480b      	ldr	r0, [pc, #44]	; (8001688 <main+0xc4>)
 800165c:	f00d f8e8 	bl	800e830 <CDC_Transmit_FS>
  {
 8001660:	e7e5      	b.n	800162e <main+0x6a>
 8001662:	bf00      	nop
 8001664:	20000670 	.word	0x20000670
 8001668:	2000036c 	.word	0x2000036c
 800166c:	20000a8c 	.word	0x20000a8c
 8001670:	20000430 	.word	0x20000430
 8001674:	20000784 	.word	0x20000784
 8001678:	20000684 	.word	0x20000684
 800167c:	20000470 	.word	0x20000470
 8001680:	20000888 	.word	0x20000888
 8001684:	08013ad8 	.word	0x08013ad8
 8001688:	200008c8 	.word	0x200008c8

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	2238      	movs	r2, #56	; 0x38
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00f fca5 	bl	8010fea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016b2:	f005 faaf 	bl	8006c14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80016d0:	230c      	movs	r3, #12
 80016d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80016d8:	2304      	movs	r3, #4
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 fb49 	bl	8006d7c <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016f0:	f000 f818 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016f8:	2301      	movs	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f005 fe47 	bl	80073a0 <HAL_RCC_ClockConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001718:	f000 f804 	bl	8001724 <Error_Handler>
  }
}
 800171c:	bf00      	nop
 800171e:	3750      	adds	r7, #80	; 0x50
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>

0800172e <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7fe fdc2 	bl	80002c0 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	2b04      	cmp	r3, #4
 8001740:	d801      	bhi.n	8001746 <gps_checksum+0x18>
 8001742:	2300      	movs	r3, #0
 8001744:	e038      	b.n	80017b8 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7fe fdba 	bl	80002c0 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	3b04      	subs	r3, #4
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7fe fdb1 	bl	80002c0 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	3b03      	subs	r3, #3
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e00a      	b.n	800178a <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	4053      	eors	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	3301      	adds	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7fe fd98 	bl	80002c0 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	1f5a      	subs	r2, r3, #5
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	429a      	cmp	r2, r3
 8001798:	d8ec      	bhi.n	8001774 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	2210      	movs	r2, #16
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00e fc48 	bl	8010038 <strtol>
 80017a8:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d101      	bne.n	80017b6 <gps_checksum+0x88>
        return 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <gps_checksum+0x8a>
    }
    else{
        return 0;
 80017b6:	2300      	movs	r3, #0
    }
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b0b7      	sub	sp, #220	; 0xdc
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	2264      	movs	r2, #100	; 0x64
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00f fc06 	bl	8010fea <memset>
    char *marker = strtok(inputString, ",");
 80017de:	49c2      	ldr	r1, [pc, #776]	; (8001ae8 <nmea_GPGGA+0x328>)
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f00f fc1d 	bl	8011020 <strtok>
 80017e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80017ea:	e027      	b.n	800183c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80017ec:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80017f0:	f7fe fd66 	bl	80002c0 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80017fc:	1c63      	adds	r3, r4, #1
 80017fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001802:	4610      	mov	r0, r2
 8001804:	f00d fc60 	bl	800f0c8 <malloc>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	00a3      	lsls	r3, r4, #2
 800180e:	33d8      	adds	r3, #216	; 0xd8
 8001810:	443b      	add	r3, r7
 8001812:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800181a:	3b01      	subs	r3, #1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	33d8      	adds	r3, #216	; 0xd8
 8001820:	443b      	add	r3, r7
 8001822:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001826:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800182a:	4618      	mov	r0, r3
 800182c:	f00f fcf1 	bl	8011212 <strcpy>
        marker = strtok(NULL, ",");
 8001830:	49ad      	ldr	r1, [pc, #692]	; (8001ae8 <nmea_GPGGA+0x328>)
 8001832:	2000      	movs	r0, #0
 8001834:	f00f fbf4 	bl	8011020 <strtok>
 8001838:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800183c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1d3      	bne.n	80017ec <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	332c      	adds	r3, #44	; 0x2c
 8001858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f00f fcd8 	bl	8011212 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001862:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001866:	2b53      	cmp	r3, #83	; 0x53
 8001868:	d004      	beq.n	8001874 <nmea_GPGGA+0xb4>
 800186a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800186e:	2b4e      	cmp	r3, #78	; 0x4e
 8001870:	f040 8159 	bne.w	8001b26 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800187a:	e010      	b.n	800189e <nmea_GPGGA+0xde>
 800187c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001882:	4413      	add	r3, r2
 8001884:	7819      	ldrb	r1, [r3, #0]
 8001886:	f107 021c 	add.w	r2, r7, #28
 800188a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800188e:	4413      	add	r3, r2
 8001890:	460a      	mov	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001898:	3301      	adds	r3, #1
 800189a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800189e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	ddea      	ble.n	800187c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018ac:	e011      	b.n	80018d2 <nmea_GPGGA+0x112>
 80018ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018b4:	3302      	adds	r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	7819      	ldrb	r1, [r3, #0]
 80018ba:	f107 0214 	add.w	r2, r7, #20
 80018be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018c2:	4413      	add	r3, r2
 80018c4:	460a      	mov	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018cc:	3301      	adds	r3, #1
 80018ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	dde9      	ble.n	80018ae <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	220a      	movs	r2, #10
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00e fba8 	bl	8010038 <strtol>
 80018e8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00e fab6 	bl	800fe64 <strtof>
 80018f8:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80018fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001908:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800190c:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001aec <nmea_GPGGA+0x32c>
 8001910:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	ee17 0a90 	vmov	r0, s15
 800191c:	f7fe fe3c 	bl	8000598 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800192e:	e010      	b.n	8001952 <nmea_GPGGA+0x192>
 8001930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001936:	4413      	add	r3, r2
 8001938:	7819      	ldrb	r1, [r3, #0]
 800193a:	f107 0210 	add.w	r2, r7, #16
 800193e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001942:	4413      	add	r3, r2
 8001944:	460a      	mov	r2, r1
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800194c:	3301      	adds	r3, #1
 800194e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001956:	2b02      	cmp	r3, #2
 8001958:	ddea      	ble.n	8001930 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001960:	e011      	b.n	8001986 <nmea_GPGGA+0x1c6>
 8001962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001968:	3303      	adds	r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	7819      	ldrb	r1, [r3, #0]
 800196e:	f107 0208 	add.w	r2, r7, #8
 8001972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001976:	4413      	add	r3, r2
 8001978:	460a      	mov	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001980:	3301      	adds	r3, #1
 8001982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800198a:	2b05      	cmp	r3, #5
 800198c:	dde9      	ble.n	8001962 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	220a      	movs	r2, #10
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f00e fb4e 	bl	8010038 <strtol>
 800199c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f00e fa5c 	bl	800fe64 <strtof>
 80019ac:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80019b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80019c0:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001aec <nmea_GPGGA+0x32c>
 80019c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fde2 	bl	8000598 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80019e8:	f7ff f896 	bl	8000b18 <__aeabi_dcmpeq>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d176      	bne.n	8001ae0 <nmea_GPGGA+0x320>
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80019fe:	f7ff f88b 	bl	8000b18 <__aeabi_dcmpeq>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d16b      	bne.n	8001ae0 <nmea_GPGGA+0x320>
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <nmea_GPGGA+0x330>)
 8001a0e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a12:	f7ff f88b 	bl	8000b2c <__aeabi_dcmplt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d061      	beq.n	8001ae0 <nmea_GPGGA+0x320>
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <nmea_GPGGA+0x334>)
 8001a22:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001a26:	f7ff f881 	bl	8000b2c <__aeabi_dcmplt>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d057      	beq.n	8001ae0 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001a40:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a48:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001a52:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00e fa03 	bl	800fe64 <strtof>
 8001a5e:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001a62:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001a66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d102      	bne.n	8001a76 <nmea_GPGGA+0x2b6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	e001      	b.n	8001a7a <nmea_GPGGA+0x2ba>
 8001a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a80:	220a      	movs	r2, #10
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00e fad7 	bl	8010038 <strtol>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a92:	220a      	movs	r2, #10
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00e face 	bl	8010038 <strtol>
 8001a9c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bfcc      	ite	gt
 8001aa8:	2301      	movgt	r3, #1
 8001aaa:	2300      	movle	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00e f9d3 	bl	800fe64 <strtof>
 8001abe:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001ac2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001ac6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ace:	d102      	bne.n	8001ad6 <nmea_GPGGA+0x316>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	e001      	b.n	8001ada <nmea_GPGGA+0x31a>
 8001ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001ade:	e022      	b.n	8001b26 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ae6:	e016      	b.n	8001b16 <nmea_GPGGA+0x356>
 8001ae8:	08013ae0 	.word	0x08013ae0
 8001aec:	42700000 	.word	0x42700000
 8001af0:	40568000 	.word	0x40568000
 8001af4:	40668000 	.word	0x40668000
 8001af8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	33d8      	adds	r3, #216	; 0xd8
 8001b00:	443b      	add	r3, r7
 8001b02:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00d fae6 	bl	800f0d8 <free>
 8001b0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbea      	blt.n	8001af8 <nmea_GPGGA+0x338>
            return 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e019      	b.n	8001b5a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b2c:	e00e      	b.n	8001b4c <nmea_GPGGA+0x38c>
 8001b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	33d8      	adds	r3, #216	; 0xd8
 8001b36:	443b      	add	r3, r7
 8001b38:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f00d facb 	bl	800f0d8 <free>
 8001b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b46:	3301      	adds	r3, #1
 8001b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbea      	blt.n	8001b2e <nmea_GPGGA+0x36e>
    return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	37dc      	adds	r7, #220	; 0xdc
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop

08001b64 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b0a3      	sub	sp, #140	; 0x8c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2264      	movs	r2, #100	; 0x64
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00f fa34 	bl	8010fea <memset>
    char *marker = strtok(inputString, ",");
 8001b82:	493b      	ldr	r1, [pc, #236]	; (8001c70 <nmea_GPGSA+0x10c>)
 8001b84:	6838      	ldr	r0, [r7, #0]
 8001b86:	f00f fa4b 	bl	8011020 <strtok>
 8001b8a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001b8e:	e027      	b.n	8001be0 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001b90:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001b94:	f7fe fb94 	bl	80002c0 <strlen>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001ba0:	1c63      	adds	r3, r4, #1
 8001ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f00d fa8e 	bl	800f0c8 <malloc>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	00a3      	lsls	r3, r4, #2
 8001bb2:	3388      	adds	r3, #136	; 0x88
 8001bb4:	443b      	add	r3, r7
 8001bb6:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	3388      	adds	r3, #136	; 0x88
 8001bc4:	443b      	add	r3, r7
 8001bc6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001bca:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00f fb1f 	bl	8011212 <strcpy>
        marker = strtok(NULL, ",");
 8001bd4:	4926      	ldr	r1, [pc, #152]	; (8001c70 <nmea_GPGSA+0x10c>)
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f00f fa22 	bl	8011020 <strtok>
 8001bdc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1d3      	bne.n	8001b90 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	220a      	movs	r2, #10
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00e fa22 	bl	8010038 <strtol>
 8001bf4:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	bfcc      	ite	gt
 8001bfc:	2301      	movgt	r3, #1
 8001bfe:	2300      	movle	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c10:	e00e      	b.n	8001c30 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	3388      	adds	r3, #136	; 0x88
 8001c18:	443b      	add	r3, r7
 8001c1a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c26:	3301      	adds	r3, #1
 8001c28:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c32:	2b0e      	cmp	r3, #14
 8001c34:	dded      	ble.n	8001c12 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	677b      	str	r3, [r7, #116]	; 0x74
 8001c40:	e00b      	b.n	8001c5a <nmea_GPGSA+0xf6>
 8001c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	3388      	adds	r3, #136	; 0x88
 8001c48:	443b      	add	r3, r7
 8001c4a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f00d fa42 	bl	800f0d8 <free>
 8001c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c56:	3301      	adds	r3, #1
 8001c58:	677b      	str	r3, [r7, #116]	; 0x74
 8001c5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbee      	blt.n	8001c42 <nmea_GPGSA+0xde>
    return 1;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	378c      	adds	r7, #140	; 0x8c
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	08013ae0 	.word	0x08013ae0
 8001c74:	00000000 	.word	0x00000000

08001c78 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b0a1      	sub	sp, #132	; 0x84
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	2264      	movs	r2, #100	; 0x64
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f00f f9ab 	bl	8010fea <memset>
    char *marker = strtok(inputString, ",");
 8001c94:	4930      	ldr	r1, [pc, #192]	; (8001d58 <nmea_GNRMC+0xe0>)
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f00f f9c2 	bl	8011020 <strtok>
 8001c9c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001c9e:	e021      	b.n	8001ce4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001ca0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001ca2:	f7fe fb0d 	bl	80002c0 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001cac:	1c63      	adds	r3, r4, #1
 8001cae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f00d fa09 	bl	800f0c8 <malloc>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	00a3      	lsls	r3, r4, #2
 8001cbc:	3380      	adds	r3, #128	; 0x80
 8001cbe:	443b      	add	r3, r7
 8001cc0:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3380      	adds	r3, #128	; 0x80
 8001ccc:	443b      	add	r3, r7
 8001cce:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001cd2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00f fa9c 	bl	8011212 <strcpy>
        marker = strtok(NULL, ",");
 8001cda:	491f      	ldr	r1, [pc, #124]	; (8001d58 <nmea_GNRMC+0xe0>)
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f00f f99f 	bl	8011020 <strtok>
 8001ce2:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1da      	bne.n	8001ca0 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00e f8b8 	bl	800fe64 <strtof>
 8001cf4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001cf8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001cfa:	f7fe fc4d 	bl	8000598 <__aeabi_f2d>
 8001cfe:	a314      	add	r3, pc, #80	; (adr r3, 8001d50 <nmea_GNRMC+0xd8>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fdca 	bl	800089c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff92 	bl	8000c38 <__aeabi_d2f>
 8001d14:	4602      	mov	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d1e:	e00b      	b.n	8001d38 <nmea_GNRMC+0xc0>
 8001d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	3380      	adds	r3, #128	; 0x80
 8001d26:	443b      	add	r3, r7
 8001d28:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f00d f9d3 	bl	800f0d8 <free>
 8001d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d34:	3301      	adds	r3, #1
 8001d36:	677b      	str	r3, [r7, #116]	; 0x74
 8001d38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbef      	blt.n	8001d20 <nmea_GNRMC+0xa8>
    return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3784      	adds	r7, #132	; 0x84
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	f3af 8000 	nop.w
 8001d50:	be76c8b4 	.word	0xbe76c8b4
 8001d54:	3fff1a9f 	.word	0x3fff1a9f
 8001d58:	08013ae0 	.word	0x08013ae0

08001d5c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001d66:	223c      	movs	r2, #60	; 0x3c
 8001d68:	2100      	movs	r1, #0
 8001d6a:	484e      	ldr	r0, [pc, #312]	; (8001ea4 <nmea_parse+0x148>)
 8001d6c:	f00f f93d 	bl	8010fea <memset>
    char * token = strtok(buffer, "$");
 8001d70:	494d      	ldr	r1, [pc, #308]	; (8001ea8 <nmea_parse+0x14c>)
 8001d72:	6838      	ldr	r0, [r7, #0]
 8001d74:	f00f f954 	bl	8011020 <strtok>
 8001d78:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001d7e:	e01d      	b.n	8001dbc <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001d80:	6978      	ldr	r0, [r7, #20]
 8001d82:	f7fe fa9d 	bl	80002c0 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	693c      	ldr	r4, [r7, #16]
 8001d8c:	1c63      	adds	r3, r4, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	4610      	mov	r0, r2
 8001d92:	f00d f999 	bl	800f0c8 <malloc>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <nmea_parse+0x148>)
 8001d9c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	4a3f      	ldr	r2, [pc, #252]	; (8001ea4 <nmea_parse+0x148>)
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	6979      	ldr	r1, [r7, #20]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00f fa30 	bl	8011212 <strcpy>
        token = strtok(NULL, "$");
 8001db2:	493d      	ldr	r1, [pc, #244]	; (8001ea8 <nmea_parse+0x14c>)
 8001db4:	2000      	movs	r0, #0
 8001db6:	f00f f933 	bl	8011020 <strtok>
 8001dba:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1de      	bne.n	8001d80 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e052      	b.n	8001e6e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001dc8:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <nmea_parse+0x148>)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	4936      	ldr	r1, [pc, #216]	; (8001eac <nmea_parse+0x150>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00f f980 	bl	80110d8 <strstr>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d044      	beq.n	8001e68 <nmea_parse+0x10c>
 8001dde:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <nmea_parse+0x148>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fca1 	bl	800172e <gps_checksum>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03a      	beq.n	8001e68 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001df2:	4a2c      	ldr	r2, [pc, #176]	; (8001ea4 <nmea_parse+0x148>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	492d      	ldr	r1, [pc, #180]	; (8001eb0 <nmea_parse+0x154>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00f f96b 	bl	80110d8 <strstr>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <nmea_parse+0x148>)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	4619      	mov	r1, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff30 	bl	8001c78 <nmea_GNRMC>
 8001e18:	e026      	b.n	8001e68 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8001e1a:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <nmea_parse+0x148>)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	4924      	ldr	r1, [pc, #144]	; (8001eb4 <nmea_parse+0x158>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00f f957 	bl	80110d8 <strstr>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <nmea_parse+0x148>)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fe92 	bl	8001b64 <nmea_GPGSA>
 8001e40:	e012      	b.n	8001e68 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <nmea_parse+0x148>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <nmea_parse+0x15c>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f00f f943 	bl	80110d8 <strstr>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <nmea_parse+0x148>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fcac 	bl	80017c0 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dba8      	blt.n	8001dc8 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	e009      	b.n	8001e90 <nmea_parse+0x134>
 8001e7c:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <nmea_parse+0x148>)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00d f927 	bl	800f0d8 <free>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf1      	blt.n	8001e7c <nmea_parse+0x120>


}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000908 	.word	0x20000908
 8001ea8:	08013ae4 	.word	0x08013ae4
 8001eac:	08013ae8 	.word	0x08013ae8
 8001eb0:	08013aec 	.word	0x08013aec
 8001eb4:	08013af4 	.word	0x08013af4
 8001eb8:	08013afc 	.word	0x08013afc

08001ebc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ec2:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <MX_SPI1_Init+0x78>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ed6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001eda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001f16:	2208      	movs	r2, #8
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_SPI1_Init+0x74>)
 8001f1c:	f005 fe4c 	bl	8007bb8 <HAL_SPI_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f26:	f7ff fbfd 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000944 	.word	0x20000944
 8001f34:	40013000 	.word	0x40013000

08001f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d130      	bne.n	8001fbc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f64:	6613      	str	r3, [r2, #96]	; 0x60
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f8a:	23e0      	movs	r3, #224	; 0xe0
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa8:	f002 fe34 	bl	8004c14 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2023      	movs	r0, #35	; 0x23
 8001fb2:	f002 fabc 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fb6:	2023      	movs	r0, #35	; 0x23
 8001fb8:	f002 fad3 	bl	8004562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40013000 	.word	0x40013000
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_MspInit+0x44>)
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_MspInit+0x44>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_MspInit+0x44>)
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_MspInit+0x44>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_MspInit+0x44>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_MspInit+0x44>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002002:	f004 feab 	bl	8006d5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler+0x4>

0800201a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler+0x4>

08002026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler+0x4>

08002032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002060:	f000 fc94 	bl	800298c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <DMA1_Channel1_IRQHandler+0x10>)
 800206e:	f002 fc76 	bl	800495e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000b20 	.word	0x20000b20

0800207c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <DMA1_Channel2_IRQHandler+0x10>)
 8002082:	f002 fc6c 	bl	800495e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000b80 	.word	0x20000b80

08002090 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <ADC1_2_IRQHandler+0x10>)
 8002096:	f001 f931 	bl	80032fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000036c 	.word	0x2000036c

080020a4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <USB_LP_IRQHandler+0x10>)
 80020aa:	f003 f96f 	bl	800538c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200018b8 	.word	0x200018b8

080020b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <SPI1_IRQHandler+0x10>)
 80020be:	f005 fe27 	bl	8007d10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000944 	.word	0x20000944

080020cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <USART1_IRQHandler+0x10>)
 80020d2:	f006 ffb7 	bl	8009044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000a8c 	.word	0x20000a8c

080020e0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <LPUART1_IRQHandler+0x10>)
 80020e6:	f006 ffad 	bl	8009044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200009f8 	.word	0x200009f8

080020f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_kill>:

int _kill(int pid, int sig)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800210e:	f00f f853 	bl	80111b8 <__errno>
 8002112:	4603      	mov	r3, r0
 8002114:	2216      	movs	r2, #22
 8002116:	601a      	str	r2, [r3, #0]
  return -1;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_exit>:

void _exit (int status)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ffe7 	bl	8002104 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002136:	e7fe      	b.n	8002136 <_exit+0x12>

08002138 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e00a      	b.n	8002160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214a:	f3af 8000 	nop.w
 800214e:	4601      	mov	r1, r0
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	60ba      	str	r2, [r7, #8]
 8002156:	b2ca      	uxtb	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf0      	blt.n	800214a <_read+0x12>
  }

  return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e009      	b.n	8002198 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	dbf1      	blt.n	8002184 <_write+0x12>
  }
  return len;
 80021a0:	687b      	ldr	r3, [r7, #4]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_close>:

int _close(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d2:	605a      	str	r2, [r3, #4]
  return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <_isatty>:

int _isatty(int file)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <_sbrk+0x5c>)
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <_sbrk+0x60>)
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <_sbrk+0x64>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <_sbrk+0x68>)
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	429a      	cmp	r2, r3
 8002242:	d207      	bcs.n	8002254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002244:	f00e ffb8 	bl	80111b8 <__errno>
 8002248:	4603      	mov	r3, r0
 800224a:	220c      	movs	r2, #12
 800224c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	e009      	b.n	8002268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <_sbrk+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <_sbrk+0x64>)
 8002264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20008000 	.word	0x20008000
 8002274:	00000400 	.word	0x00000400
 8002278:	200009a8 	.word	0x200009a8
 800227c:	20001f00 	.word	0x20001f00

08002280 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <SystemInit+0x20>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <SystemInit+0x20>)
 800228c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	; 0x38
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c4:	463b      	mov	r3, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	615a      	str	r2, [r3, #20]
 80022d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <MX_TIM3_Init+0xe8>)
 80022d8:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <MX_TIM3_Init+0xec>)
 80022da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <MX_TIM3_Init+0xe8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <MX_TIM3_Init+0xe8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <MX_TIM3_Init+0xe8>)
 80022ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_TIM3_Init+0xe8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <MX_TIM3_Init+0xe8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022fc:	4823      	ldr	r0, [pc, #140]	; (800238c <MX_TIM3_Init+0xe8>)
 80022fe:	f005 fe1a 	bl	8007f36 <HAL_TIM_Base_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002308:	f7ff fa0c 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002316:	4619      	mov	r1, r3
 8002318:	481c      	ldr	r0, [pc, #112]	; (800238c <MX_TIM3_Init+0xe8>)
 800231a:	f005 ff3f 	bl	800819c <HAL_TIM_ConfigClockSource>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002324:	f7ff f9fe 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002328:	4818      	ldr	r0, [pc, #96]	; (800238c <MX_TIM3_Init+0xe8>)
 800232a:	f005 fe5b 	bl	8007fe4 <HAL_TIM_OC_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002334:	f7ff f9f6 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4811      	ldr	r0, [pc, #68]	; (800238c <MX_TIM3_Init+0xe8>)
 8002348:	f006 fc50 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002352:	f7ff f9e7 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002356:	2300      	movs	r3, #0
 8002358:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <MX_TIM3_Init+0xe8>)
 800236e:	f005 fe9b 	bl	80080a8 <HAL_TIM_OC_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002378:	f7ff f9d4 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <MX_TIM3_Init+0xe8>)
 800237e:	f000 f829 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 8002382:	bf00      	nop
 8002384:	3738      	adds	r7, #56	; 0x38
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200009ac 	.word	0x200009ac
 8002390:	40000400 	.word	0x40000400

08002394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_TIM_Base_MspInit+0x38>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10b      	bne.n	80023be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_TIM_Base_MspInit+0x3c>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_TIM_Base_MspInit+0x3c>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6593      	str	r3, [r2, #88]	; 0x58
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_TIM_Base_MspInit+0x3c>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40000400 	.word	0x40000400
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <HAL_TIM_MspPostInit+0x64>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11b      	bne.n	800242e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_TIM_MspPostInit+0x68>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_TIM_MspPostInit+0x68>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_TIM_MspPostInit+0x68>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800240e:	2340      	movs	r3, #64	; 0x40
 8002410:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800241e:	2302      	movs	r3, #2
 8002420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_TIM_MspPostInit+0x6c>)
 800242a:	f002 fbf3 	bl	8004c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40000400 	.word	0x40000400
 800243c:	40021000 	.word	0x40021000
 8002440:	48000800 	.word	0x48000800

08002444 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 800244a:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <MX_LPUART1_UART_Init+0x90>)
 800244c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002486:	4812      	ldr	r0, [pc, #72]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 8002488:	f006 fc32 	bl	8008cf0 <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002492:	f7ff f947 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002496:	2100      	movs	r1, #0
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 800249a:	f008 f881 	bl	800a5a0 <HAL_UARTEx_SetTxFifoThreshold>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80024a4:	f7ff f93e 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a8:	2100      	movs	r1, #0
 80024aa:	4809      	ldr	r0, [pc, #36]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 80024ac:	f008 f8b6 	bl	800a61c <HAL_UARTEx_SetRxFifoThreshold>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80024b6:	f7ff f935 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_LPUART1_UART_Init+0x8c>)
 80024bc:	f008 f837 	bl	800a52e <HAL_UARTEx_DisableFifoMode>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80024c6:	f7ff f92d 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200009f8 	.word	0x200009f8
 80024d4:	40008000 	.word	0x40008000

080024d8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024dc:	4b22      	ldr	r3, [pc, #136]	; (8002568 <MX_USART1_UART_Init+0x90>)
 80024de:	4a23      	ldr	r2, [pc, #140]	; (800256c <MX_USART1_UART_Init+0x94>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <MX_USART1_UART_Init+0x90>)
 80024e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <MX_USART1_UART_Init+0x90>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <MX_USART1_UART_Init+0x90>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <MX_USART1_UART_Init+0x90>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_USART1_UART_Init+0x90>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <MX_USART1_UART_Init+0x90>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_USART1_UART_Init+0x90>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_USART1_UART_Init+0x90>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_USART1_UART_Init+0x90>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <MX_USART1_UART_Init+0x90>)
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002520:	4811      	ldr	r0, [pc, #68]	; (8002568 <MX_USART1_UART_Init+0x90>)
 8002522:	f006 fbe5 	bl	8008cf0 <HAL_UART_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800252c:	f7ff f8fa 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002530:	2100      	movs	r1, #0
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <MX_USART1_UART_Init+0x90>)
 8002534:	f008 f834 	bl	800a5a0 <HAL_UARTEx_SetTxFifoThreshold>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800253e:	f7ff f8f1 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002542:	2100      	movs	r1, #0
 8002544:	4808      	ldr	r0, [pc, #32]	; (8002568 <MX_USART1_UART_Init+0x90>)
 8002546:	f008 f869 	bl	800a61c <HAL_UARTEx_SetRxFifoThreshold>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002550:	f7ff f8e8 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_USART1_UART_Init+0x90>)
 8002556:	f007 ffea 	bl	800a52e <HAL_UARTEx_DisableFifoMode>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002560:	f7ff f8e0 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000a8c 	.word	0x20000a8c
 800256c:	40013800 	.word	0x40013800

08002570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b09e      	sub	sp, #120	; 0x78
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	f107 0320 	add.w	r3, r7, #32
 800258c:	2244      	movs	r2, #68	; 0x44
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f00e fd2a 	bl	8010fea <memset>
  if(uartHandle->Instance==LPUART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7d      	ldr	r2, [pc, #500]	; (8002790 <HAL_UART_MspInit+0x220>)
 800259c:	4293      	cmp	r3, r2
 800259e:	f040 8086 	bne.w	80026ae <HAL_UART_MspInit+0x13e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025a2:	2320      	movs	r3, #32
 80025a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	4618      	mov	r0, r3
 80025b0:	f005 f912 	bl	80077d8 <HAL_RCCEx_PeriphCLKConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025ba:	f7ff f8b3 	bl	8001724 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025be:	4b75      	ldr	r3, [pc, #468]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	4a74      	ldr	r2, [pc, #464]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80025ca:	4b72      	ldr	r3, [pc, #456]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	4a6e      	ldr	r2, [pc, #440]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e2:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ee:	4b69      	ldr	r3, [pc, #420]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	4a68      	ldr	r2, [pc, #416]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fa:	4b66      	ldr	r3, [pc, #408]	; (8002794 <HAL_UART_MspInit+0x224>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = LPUART1_RX_TRANSMITTER_Pin;
 8002606:	2308      	movs	r3, #8
 8002608:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002616:	230c      	movs	r3, #12
 8002618:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(LPUART1_RX_TRANSMITTER_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800261e:	4619      	mov	r1, r3
 8002620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002624:	f002 faf6 	bl	8004c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LPUART1_TX_TRANSMITTER_Pin;
 8002628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800262c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800263a:	2308      	movs	r3, #8
 800263c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(LPUART1_TX_TRANSMITTER_GPIO_Port, &GPIO_InitStruct);
 800263e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002642:	4619      	mov	r1, r3
 8002644:	4854      	ldr	r0, [pc, #336]	; (8002798 <HAL_UART_MspInit+0x228>)
 8002646:	f002 fae5 	bl	8004c14 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_UART_MspInit+0x22c>)
 800264c:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <HAL_UART_MspInit+0x230>)
 800264e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002650:	4b52      	ldr	r3, [pc, #328]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002652:	2223      	movs	r2, #35	; 0x23
 8002654:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002656:	4b51      	ldr	r3, [pc, #324]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002658:	2210      	movs	r2, #16
 800265a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_UART_MspInit+0x22c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002662:	4b4e      	ldr	r3, [pc, #312]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002668:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_UART_MspInit+0x22c>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266e:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002674:	4b49      	ldr	r3, [pc, #292]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <HAL_UART_MspInit+0x22c>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002680:	4846      	ldr	r0, [pc, #280]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002682:	f001 ff89 	bl	8004598 <HAL_DMA_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 800268c:	f7ff f84a 	bl	8001724 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a42      	ldr	r2, [pc, #264]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002694:	67da      	str	r2, [r3, #124]	; 0x7c
 8002696:	4a41      	ldr	r2, [pc, #260]	; (800279c <HAL_UART_MspInit+0x22c>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	205b      	movs	r0, #91	; 0x5b
 80026a2:	f001 ff44 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80026a6:	205b      	movs	r0, #91	; 0x5b
 80026a8:	f001 ff5b 	bl	8004562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026ac:	e06c      	b.n	8002788 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a3c      	ldr	r2, [pc, #240]	; (80027a4 <HAL_UART_MspInit+0x234>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d167      	bne.n	8002788 <HAL_UART_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026b8:	2301      	movs	r3, #1
 80026ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c0:	f107 0320 	add.w	r3, r7, #32
 80026c4:	4618      	mov	r0, r3
 80026c6:	f005 f887 	bl	80077d8 <HAL_RCCEx_PeriphCLKConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_MspInit+0x164>
      Error_Handler();
 80026d0:	f7ff f828 	bl	8001724 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_UART_MspInit+0x224>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	4a2e      	ldr	r2, [pc, #184]	; (8002794 <HAL_UART_MspInit+0x224>)
 80026da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026de:	6613      	str	r3, [r2, #96]	; 0x60
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <HAL_UART_MspInit+0x224>)
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <HAL_UART_MspInit+0x224>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a28      	ldr	r2, [pc, #160]	; (8002794 <HAL_UART_MspInit+0x224>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_UART_MspInit+0x224>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002704:	23c0      	movs	r3, #192	; 0xc0
 8002706:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002714:	2307      	movs	r3, #7
 8002716:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800271c:	4619      	mov	r1, r3
 800271e:	481e      	ldr	r0, [pc, #120]	; (8002798 <HAL_UART_MspInit+0x228>)
 8002720:	f002 fa78 	bl	8004c14 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_UART_MspInit+0x238>)
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_UART_MspInit+0x23c>)
 8002728:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_UART_MspInit+0x238>)
 800272c:	2218      	movs	r2, #24
 800272e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_UART_MspInit+0x238>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_UART_MspInit+0x238>)
 8002738:	2200      	movs	r2, #0
 800273a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_UART_MspInit+0x238>)
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_UART_MspInit+0x238>)
 8002744:	2200      	movs	r2, #0
 8002746:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_UART_MspInit+0x238>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_UART_MspInit+0x238>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_UART_MspInit+0x238>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800275a:	4813      	ldr	r0, [pc, #76]	; (80027a8 <HAL_UART_MspInit+0x238>)
 800275c:	f001 ff1c 	bl	8004598 <HAL_DMA_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8002766:	f7fe ffdd 	bl	8001724 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <HAL_UART_MspInit+0x238>)
 800276e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <HAL_UART_MspInit+0x238>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2025      	movs	r0, #37	; 0x25
 800277e:	f001 fed6 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002782:	2025      	movs	r0, #37	; 0x25
 8002784:	f001 feed 	bl	8004562 <HAL_NVIC_EnableIRQ>
}
 8002788:	bf00      	nop
 800278a:	3778      	adds	r7, #120	; 0x78
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40008000 	.word	0x40008000
 8002794:	40021000 	.word	0x40021000
 8002798:	48000400 	.word	0x48000400
 800279c:	20000b20 	.word	0x20000b20
 80027a0:	40020008 	.word	0x40020008
 80027a4:	40013800 	.word	0x40013800
 80027a8:	20000b80 	.word	0x20000b80
 80027ac:	4002001c 	.word	0x4002001c

080027b0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80027b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_UART_RxCpltCallback+0xcc>)
 80027ba:	881a      	ldrh	r2, [r3, #0]
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_UART_RxCpltCallback+0xd0>)
 80027be:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80027c0:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <HAL_UART_RxCpltCallback+0xd0>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80027c8:	d922      	bls.n	8002810 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_UART_RxCpltCallback+0xd0>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80027d2:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_UART_RxCpltCallback+0xd0>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_UART_RxCpltCallback+0xd4>)
 80027dc:	4413      	add	r3, r2
 80027de:	89fa      	ldrh	r2, [r7, #14]
 80027e0:	4929      	ldr	r1, [pc, #164]	; (8002888 <HAL_UART_RxCpltCallback+0xd8>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f00e fd1d 	bl	8011222 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_UART_RxCpltCallback+0xd0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	4a25      	ldr	r2, [pc, #148]	; (8002888 <HAL_UART_RxCpltCallback+0xd8>)
 80027f2:	1899      	adds	r1, r3, r2
 80027f4:	89fb      	ldrh	r3, [r7, #14]
 80027f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80027fa:	461a      	mov	r2, r3
 80027fc:	4821      	ldr	r0, [pc, #132]	; (8002884 <HAL_UART_RxCpltCallback+0xd4>)
 80027fe:	f00e fd10 	bl	8011222 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002808:	b29a      	uxth	r2, r3
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_UART_RxCpltCallback+0xcc>)
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	e01e      	b.n	800284e <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_UART_RxCpltCallback+0xd0>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_UART_RxCpltCallback+0xd4>)
 8002818:	441a      	add	r2, r3
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_UART_RxCpltCallback+0xd8>)
 800281c:	4610      	mov	r0, r2
 800281e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002822:	4602      	mov	r2, r0
 8002824:	4619      	mov	r1, r3
 8002826:	f8d1 c000 	ldr.w	ip, [r1]
 800282a:	684e      	ldr	r6, [r1, #4]
 800282c:	688d      	ldr	r5, [r1, #8]
 800282e:	68c9      	ldr	r1, [r1, #12]
 8002830:	f8c2 c000 	str.w	ip, [r2]
 8002834:	6056      	str	r6, [r2, #4]
 8002836:	6095      	str	r5, [r2, #8]
 8002838:	60d1      	str	r1, [r2, #12]
 800283a:	3310      	adds	r3, #16
 800283c:	3010      	adds	r0, #16
 800283e:	42a3      	cmp	r3, r4
 8002840:	d1ef      	bne.n	8002822 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_UART_RxCpltCallback+0xd0>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	3340      	adds	r3, #64	; 0x40
 8002848:	b29a      	uxth	r2, r3
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_UART_RxCpltCallback+0xcc>)
 800284c:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	490d      	ldr	r1, [pc, #52]	; (8002888 <HAL_UART_RxCpltCallback+0xd8>)
 8002852:	480e      	ldr	r0, [pc, #56]	; (800288c <HAL_UART_RxCpltCallback+0xdc>)
 8002854:	f006 fa9c 	bl	8008d90 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_UART_RxCpltCallback+0xe0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_UART_RxCpltCallback+0xe0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	4907      	ldr	r1, [pc, #28]	; (8002888 <HAL_UART_RxCpltCallback+0xd8>)
 800286c:	4807      	ldr	r0, [pc, #28]	; (800288c <HAL_UART_RxCpltCallback+0xdc>)
 800286e:	f006 fa8f 	bl	8008d90 <HAL_UART_Receive_DMA>
}//l'appel de cette fonction réactive l'intérruption.
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287a:	bf00      	nop
 800287c:	2000042e 	.word	0x2000042e
 8002880:	2000042c 	.word	0x2000042c
 8002884:	20000470 	.word	0x20000470
 8002888:	20000430 	.word	0x20000430
 800288c:	20000a8c 	.word	0x20000a8c
 8002890:	20000b80 	.word	0x20000b80

08002894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002896:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002898:	f7ff fcf2 	bl	8002280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800289e:	490d      	ldr	r1, [pc, #52]	; (80028d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <LoopForever+0xe>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028a4:	e002      	b.n	80028ac <LoopCopyDataInit>

080028a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028aa:	3304      	adds	r3, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b0:	d3f9      	bcc.n	80028a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80028b4:	4c0a      	ldr	r4, [pc, #40]	; (80028e0 <LoopForever+0x16>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b8:	e001      	b.n	80028be <LoopFillZerobss>

080028ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028bc:	3204      	adds	r2, #4

080028be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c0:	d3fb      	bcc.n	80028ba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80028c2:	f00e fc7f 	bl	80111c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028c6:	f7fe fe7d 	bl	80015c4 <main>

080028ca <LoopForever>:

LoopForever:
    b LoopForever
 80028ca:	e7fe      	b.n	80028ca <LoopForever>
  ldr   r0, =_estack
 80028cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d4:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80028d8:	08014020 	.word	0x08014020
  ldr r2, =_sbss
 80028dc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80028e0:	20001f00 	.word	0x20001f00

080028e4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028e4:	e7fe      	b.n	80028e4 <COMP1_2_3_IRQHandler>

080028e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f0:	2003      	movs	r0, #3
 80028f2:	f001 fe11 	bl	8004518 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f6:	200f      	movs	r0, #15
 80028f8:	f000 f80e 	bl	8002918 <HAL_InitTick>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	e001      	b.n	800290c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002908:	f7ff fb60 	bl	8001fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800290c:	79fb      	ldrb	r3, [r7, #7]

}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_InitTick+0x68>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d022      	beq.n	8002972 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_InitTick+0x6c>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_InitTick+0x68>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002938:	fbb1 f3f3 	udiv	r3, r1, r3
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fe1c 	bl	800457e <HAL_SYSTICK_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	d809      	bhi.n	8002966 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002952:	2200      	movs	r2, #0
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	f04f 30ff 	mov.w	r0, #4294967295
 800295a:	f001 fde8 	bl	800452e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_InitTick+0x70>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e007      	b.n	8002976 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	e004      	b.n	8002976 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e001      	b.n	8002976 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000008 	.word	0x20000008
 8002984:	20000000 	.word	0x20000000
 8002988:	20000004 	.word	0x20000004

0800298c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_IncTick+0x1c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_IncTick+0x20>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4413      	add	r3, r2
 800299a:	4a03      	ldr	r2, [pc, #12]	; (80029a8 <HAL_IncTick+0x1c>)
 800299c:	6013      	str	r3, [r2, #0]
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	20000be0 	.word	0x20000be0
 80029ac:	20000008 	.word	0x20000008

080029b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return uwTick;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_GetTick+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000be0 	.word	0x20000be0

080029c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff ffee 	bl	80029b0 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d004      	beq.n	80029ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_Delay+0x40>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4413      	add	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ec:	bf00      	nop
 80029ee:	f7ff ffdf 	bl	80029b0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d8f7      	bhi.n	80029ee <HAL_Delay+0x26>
  {
  }
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000008 	.word	0x20000008

08002a0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <LL_ADC_SetOffset+0x44>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	03fff000 	.word	0x03fff000

08002abc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	461a      	mov	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3360      	adds	r3, #96	; 0x60
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b48:	bf00      	nop
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3360      	adds	r3, #96	; 0x60
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	615a      	str	r2, [r3, #20]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3330      	adds	r3, #48	; 0x30
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	4413      	add	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	211f      	movs	r1, #31
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	f003 011f 	and.w	r1, r3, #31
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3314      	adds	r3, #20
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0e5b      	lsrs	r3, r3, #25
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	0d1b      	lsrs	r3, r3, #20
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2107      	movs	r1, #7
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	401a      	ands	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	0d1b      	lsrs	r3, r3, #20
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0318 	and.w	r3, r3, #24
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cd0:	40d9      	lsrs	r1, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	0007ffff 	.word	0x0007ffff

08002cf4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 031f 	and.w	r3, r3, #31
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6093      	str	r3, [r2, #8]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d64:	d101      	bne.n	8002d6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db4:	d101      	bne.n	8002dba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <LL_ADC_IsEnabled+0x18>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <LL_ADC_IsEnabled+0x1a>
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e2a:	f043 0204 	orr.w	r2, r3, #4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d101      	bne.n	8002e56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b089      	sub	sp, #36	; 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e167      	b.n	8003176 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fe f95b 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff3f 	bl	8002d50 <LL_ADC_IsDeepPowerDownEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff25 	bl	8002d2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ff5a 	bl	8002da0 <LL_ADC_IsInternalRegulatorEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d115      	bne.n	8002f1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff3e 	bl	8002d78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002efc:	4ba0      	ldr	r3, [pc, #640]	; (8003180 <HAL_ADC_Init+0x2f4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	4aa0      	ldr	r2, [pc, #640]	; (8003184 <HAL_ADC_Init+0x2f8>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff3c 	bl	8002da0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff75 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8002f54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 8100 	bne.w	8003164 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 80fc 	bne.w	8003164 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f74:	f043 0202 	orr.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff35 	bl	8002df0 <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f90:	f7ff ff2e 	bl	8002df0 <LL_ADC_IsEnabled>
 8002f94:	4604      	mov	r4, r0
 8002f96:	487c      	ldr	r0, [pc, #496]	; (8003188 <HAL_ADC_Init+0x2fc>)
 8002f98:	f7ff ff2a 	bl	8002df0 <LL_ADC_IsEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4323      	orrs	r3, r4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4878      	ldr	r0, [pc, #480]	; (800318c <HAL_ADC_Init+0x300>)
 8002fac:	f7ff fd2e 	bl	8002a0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7f5b      	ldrb	r3, [r3, #29]
 8002fb4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fc0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fc6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d106      	bne.n	8002fec <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	045b      	lsls	r3, r3, #17
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	4b60      	ldr	r3, [pc, #384]	; (8003190 <HAL_ADC_Init+0x304>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	430b      	orrs	r3, r1
 800301a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff14 	bl	8002e64 <LL_ADC_INJ_IsConversionOngoing>
 800303c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d16d      	bne.n	8003120 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d16a      	bne.n	8003120 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800304e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003056:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003066:	f023 0302 	bic.w	r3, r3, #2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	430b      	orrs	r3, r1
 8003072:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d017      	beq.n	80030ac <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800308a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003094:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6911      	ldr	r1, [r2, #16]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80030aa:	e013      	b.n	80030d4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d118      	bne.n	8003110 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003100:	430a      	orrs	r2, r1
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	611a      	str	r2, [r3, #16]
 800310e:	e007      	b.n	8003120 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10c      	bne.n	8003142 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f023 010f 	bic.w	r1, r3, #15
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	1e5a      	subs	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
 8003140:	e007      	b.n	8003152 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 020f 	bic.w	r2, r2, #15
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	65da      	str	r2, [r3, #92]	; 0x5c
 8003162:	e007      	b.n	8003174 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f043 0210 	orr.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003174:	7ffb      	ldrb	r3, [r7, #31]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	20000000 	.word	0x20000000
 8003184:	053e2d63 	.word	0x053e2d63
 8003188:	50000100 	.word	0x50000100
 800318c:	50000300 	.word	0x50000300
 8003190:	fff04007 	.word	0xfff04007

08003194 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031a0:	4851      	ldr	r0, [pc, #324]	; (80032e8 <HAL_ADC_Start_DMA+0x154>)
 80031a2:	f7ff fda7 	bl	8002cf4 <LL_ADC_GetMultimode>
 80031a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe46 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 808f 	bne.w	80032d8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_Start_DMA+0x34>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e08a      	b.n	80032de <HAL_ADC_Start_DMA+0x14a>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d002      	beq.n	80031e2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b09      	cmp	r3, #9
 80031e0:	d173      	bne.n	80032ca <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 feb2 	bl	8003f4c <ADC_Enable>
 80031e8:	4603      	mov	r3, r0
 80031ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d166      	bne.n	80032c0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_ADC_Start_DMA+0x158>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d002      	beq.n	8003216 <HAL_ADC_Start_DMA+0x82>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	e001      	b.n	800321a <HAL_ADC_Start_DMA+0x86>
 8003216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	4293      	cmp	r3, r2
 8003220:	d002      	beq.n	8003228 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003244:	f023 0206 	bic.w	r2, r3, #6
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	661a      	str	r2, [r3, #96]	; 0x60
 800324c:	e002      	b.n	8003254 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <HAL_ADC_Start_DMA+0x15c>)
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <HAL_ADC_Start_DMA+0x160>)
 8003262:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <HAL_ADC_Start_DMA+0x164>)
 800326a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	221c      	movs	r2, #28
 8003272:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0210 	orr.w	r2, r2, #16
 800328a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3340      	adds	r3, #64	; 0x40
 80032a6:	4619      	mov	r1, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f001 fa1c 	bl	80046e8 <HAL_DMA_Start_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fdac 	bl	8002e16 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032be:	e00d      	b.n	80032dc <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80032c8:	e008      	b.n	80032dc <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80032d6:	e001      	b.n	80032dc <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	50000300 	.word	0x50000300
 80032ec:	50000100 	.word	0x50000100
 80032f0:	08004059 	.word	0x08004059
 80032f4:	08004131 	.word	0x08004131
 80032f8:	0800414d 	.word	0x0800414d

080032fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003318:	4883      	ldr	r0, [pc, #524]	; (8003528 <HAL_ADC_IRQHandler+0x22c>)
 800331a:	f7ff fceb 	bl	8002cf4 <LL_ADC_GetMultimode>
 800331e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d017      	beq.n	800335a <HAL_ADC_IRQHandler+0x5e>
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 ff65 	bl	800421c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2202      	movs	r2, #2
 8003358:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <HAL_ADC_IRQHandler+0x72>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8085 	beq.w	8003484 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d07f      	beq.n	8003484 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fc05 	bl	8002bb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d064      	beq.n	8003476 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5e      	ldr	r2, [pc, #376]	; (800352c <HAL_ADC_IRQHandler+0x230>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d002      	beq.n	80033bc <HAL_ADC_IRQHandler+0xc0>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	e001      	b.n	80033c0 <HAL_ADC_IRQHandler+0xc4>
 80033bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d008      	beq.n	80033da <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d002      	beq.n	80033da <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	d104      	bne.n	80033e4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	e00d      	b.n	8003400 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a50      	ldr	r2, [pc, #320]	; (800352c <HAL_ADC_IRQHandler+0x230>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d002      	beq.n	80033f4 <HAL_ADC_IRQHandler+0xf8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	e001      	b.n	80033f8 <HAL_ADC_IRQHandler+0xfc>
 80033f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d135      	bne.n	8003476 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d12e      	bne.n	8003476 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fd0e 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11a      	bne.n	800345e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 020c 	bic.w	r2, r2, #12
 8003436:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d112      	bne.n	8003476 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	; 0x5c
 800345c:	e00b      	b.n	8003476 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fed6 	bl	8001228 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	220c      	movs	r2, #12
 8003482:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_ADC_IRQHandler+0x19c>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 809e 	beq.w	80035e0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8098 	beq.w	80035e0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fbae 	bl	8002c2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fb69 	bl	8002bb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <HAL_ADC_IRQHandler+0x230>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d002      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x1f4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e001      	b.n	80034f4 <HAL_ADC_IRQHandler+0x1f8>
 80034f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d008      	beq.n	800350e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b06      	cmp	r3, #6
 8003506:	d002      	beq.n	800350e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b07      	cmp	r3, #7
 800350c:	d104      	bne.n	8003518 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	e011      	b.n	800353c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_ADC_IRQHandler+0x230>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d006      	beq.n	8003530 <HAL_ADC_IRQHandler+0x234>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e005      	b.n	8003534 <HAL_ADC_IRQHandler+0x238>
 8003528:	50000300 	.word	0x50000300
 800352c:	50000100 	.word	0x50000100
 8003530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003534:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d047      	beq.n	80035d2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_ADC_IRQHandler+0x260>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03f      	beq.n	80035d2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	d13a      	bne.n	80035d2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d133      	bne.n	80035d2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d12e      	bne.n	80035d2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fc73 	bl	8002e64 <LL_ADC_INJ_IsConversionOngoing>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11a      	bne.n	80035ba <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003592:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d112      	bne.n	80035d2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80035b8:	e00b      	b.n	80035d2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fdfa 	bl	80041cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2260      	movs	r2, #96	; 0x60
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d011      	beq.n	800360e <HAL_ADC_IRQHandler+0x312>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f89f 	bl	8003744 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d012      	beq.n	800363e <HAL_ADC_IRQHandler+0x342>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fde0 	bl	80041f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <HAL_ADC_IRQHandler+0x372>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fdd2 	bl	8004208 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d036      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x3ea>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d031      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800368a:	2301      	movs	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	e014      	b.n	80036ba <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003696:	4825      	ldr	r0, [pc, #148]	; (800372c <HAL_ADC_IRQHandler+0x430>)
 8003698:	f7ff fb3a 	bl	8002d10 <LL_ADC_GetMultiDMATransfer>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80036a2:	2301      	movs	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
 80036a6:	e008      	b.n	80036ba <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80036b6:	2301      	movs	r3, #1
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10e      	bne.n	80036de <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	f043 0202 	orr.w	r2, r3, #2
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f83d 	bl	8003758 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2210      	movs	r2, #16
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <HAL_ADC_IRQHandler+0x426>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	f043 0208 	orr.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fd5f 	bl	80041e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003722:	bf00      	nop
 8003724:	3728      	adds	r7, #40	; 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	50000300 	.word	0x50000300

08003730 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0b6      	sub	sp, #216	; 0xd8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_ADC_ConfigChannel+0x22>
 800378a:	2302      	movs	r3, #2
 800378c:	e3c8      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x7b4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fb4f 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 83ad 	bne.w	8003f02 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f7ff fa0e 	bl	8002bd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fb3d 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 80037c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fb49 	bl	8002e64 <LL_ADC_INJ_IsConversionOngoing>
 80037d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 81d9 	bne.w	8003b92 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f040 81d4 	bne.w	8003b92 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037f2:	d10f      	bne.n	8003814 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2200      	movs	r2, #0
 80037fe:	4619      	mov	r1, r3
 8003800:	f7ff fa28 	bl	8002c54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff f9bc 	bl	8002b8a <LL_ADC_SetSamplingTimeCommonConfig>
 8003812:	e00e      	b.n	8003832 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6819      	ldr	r1, [r3, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	461a      	mov	r2, r3
 8003822:	f7ff fa17 	bl	8002c54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f9ac 	bl	8002b8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	08db      	lsrs	r3, r3, #3
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d022      	beq.n	800389a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6919      	ldr	r1, [r3, #16]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003864:	f7ff f906 	bl	8002a74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6919      	ldr	r1, [r3, #16]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	461a      	mov	r2, r3
 8003876:	f7ff f952 	bl	8002b1e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x124>
 800388a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388e:	e000      	b.n	8003892 <HAL_ADC_ConfigChannel+0x126>
 8003890:	2300      	movs	r3, #0
 8003892:	461a      	mov	r2, r3
 8003894:	f7ff f95e 	bl	8002b54 <LL_ADC_SetOffsetSaturation>
 8003898:	e17b      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f90b 	bl	8002abc <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x15a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f900 	bl	8002abc <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	0e9b      	lsrs	r3, r3, #26
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	e01e      	b.n	8003904 <HAL_ADC_ConfigChannel+0x198>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f8f5 	bl	8002abc <LL_ADC_GetOffsetChannel>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80038f4:	2320      	movs	r3, #32
 80038f6:	e004      	b.n	8003902 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80038f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <HAL_ADC_ConfigChannel+0x1b0>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e9b      	lsrs	r3, r3, #26
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	e018      	b.n	800394e <HAL_ADC_ConfigChannel+0x1e2>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e004      	b.n	800394e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003944:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800394e:	429a      	cmp	r2, r3
 8003950:	d106      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f8c4 	bl	8002ae8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f8a8 	bl	8002abc <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_ADC_ConfigChannel+0x220>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f89d 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	f003 021f 	and.w	r2, r3, #31
 800398a:	e01e      	b.n	80039ca <HAL_ADC_ConfigChannel+0x25e>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f892 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003998:	4603      	mov	r3, r0
 800399a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80039ba:	2320      	movs	r3, #32
 80039bc:	e004      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80039be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x276>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	e018      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x2a8>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e004      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003a0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d106      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff f861 	bl	8002ae8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff f845 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x2e6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2102      	movs	r1, #2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f83a 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	0e9b      	lsrs	r3, r3, #26
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	e01e      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x324>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2102      	movs	r1, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f82f 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	e004      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003a84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x33c>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	e016      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x36a>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e004      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d106      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff f800 	bl	8002ae8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2103      	movs	r1, #3
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe ffe4 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x3a8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2103      	movs	r1, #3
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe ffd9 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	0e9b      	lsrs	r3, r3, #26
 8003b0e:	f003 021f 	and.w	r2, r3, #31
 8003b12:	e017      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x3d8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2103      	movs	r1, #3
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe ffce 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003b20:	4603      	mov	r3, r0
 8003b22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003b36:	2320      	movs	r3, #32
 8003b38:	e003      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b3c:	fab3 f383 	clz	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x3f0>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	e011      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x414>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e003      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d106      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2103      	movs	r1, #3
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe ffab 	bl	8002ae8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff f92a 	bl	8002df0 <LL_ADC_IsEnabled>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 8140 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f7ff f87b 	bl	8002cac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	4a8f      	ldr	r2, [pc, #572]	; (8003df8 <HAL_ADC_ConfigChannel+0x68c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	f040 8131 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x47e>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	0e9b      	lsrs	r3, r3, #26
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2b09      	cmp	r3, #9
 8003be0:	bf94      	ite	ls
 8003be2:	2301      	movls	r3, #1
 8003be4:	2300      	movhi	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	e019      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x4b2>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bfa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003c02:	2320      	movs	r3, #32
 8003c04:	e003      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	bf94      	ite	ls
 8003c18:	2301      	movls	r3, #1
 8003c1a:	2300      	movhi	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d079      	beq.n	8003d16 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x4d2>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	0e9b      	lsrs	r3, r3, #26
 8003c34:	3301      	adds	r3, #1
 8003c36:	069b      	lsls	r3, r3, #26
 8003c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3c:	e015      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x4fe>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003c56:	2320      	movs	r3, #32
 8003c58:	e003      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	069b      	lsls	r3, r3, #26
 8003c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x51e>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0e9b      	lsrs	r3, r3, #26
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	e017      	b.n	8003cba <HAL_ADC_ConfigChannel+0x54e>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	e003      	b.n	8003cae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	ea42 0103 	orr.w	r1, r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x574>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	0e9b      	lsrs	r3, r3, #26
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f003 021f 	and.w	r2, r3, #31
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	051b      	lsls	r3, r3, #20
 8003cde:	e018      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x5a6>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	e003      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	3301      	adds	r3, #1
 8003d06:	f003 021f 	and.w	r2, r3, #31
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d12:	430b      	orrs	r3, r1
 8003d14:	e081      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x5c6>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0e9b      	lsrs	r3, r3, #26
 8003d28:	3301      	adds	r3, #1
 8003d2a:	069b      	lsls	r3, r3, #26
 8003d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d30:	e015      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x5f2>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003d4a:	2320      	movs	r3, #32
 8003d4c:	e003      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	069b      	lsls	r3, r3, #26
 8003d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x612>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	0e9b      	lsrs	r3, r3, #26
 8003d70:	3301      	adds	r3, #1
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	e017      	b.n	8003dae <HAL_ADC_ConfigChannel+0x642>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	61fb      	str	r3, [r7, #28]
  return result;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003d96:	2320      	movs	r3, #32
 8003d98:	e003      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	ea42 0103 	orr.w	r1, r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x66e>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f003 021f 	and.w	r2, r3, #31
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	3b1e      	subs	r3, #30
 8003dd2:	051b      	lsls	r3, r3, #20
 8003dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	e01e      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x6ac>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	613b      	str	r3, [r7, #16]
  return result;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003df2:	2320      	movs	r3, #32
 8003df4:	e006      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x698>
 8003df6:	bf00      	nop
 8003df8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	f003 021f 	and.w	r2, r3, #31
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b1e      	subs	r3, #30
 8003e12:	051b      	lsls	r3, r3, #20
 8003e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f7fe ff18 	bl	8002c54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d071      	beq.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e30:	483e      	ldr	r0, [pc, #248]	; (8003f2c <HAL_ADC_ConfigChannel+0x7c0>)
 8003e32:	f7fe fe11 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 8003e36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x6e2>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d127      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d121      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e62:	d157      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	482f      	ldr	r0, [pc, #188]	; (8003f2c <HAL_ADC_ConfigChannel+0x7c0>)
 8003e70:	f7fe fddf 	bl	8002a32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <HAL_ADC_ConfigChannel+0x7d0>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	099b      	lsrs	r3, r3, #6
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e8e:	e002      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f9      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e9c:	e03a      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d113      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <HAL_ADC_ConfigChannel+0x7d8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02a      	beq.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4818      	ldr	r0, [pc, #96]	; (8003f2c <HAL_ADC_ConfigChannel+0x7c0>)
 8003eca:	f7fe fdb2 	bl	8002a32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ece:	e021      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d11c      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <HAL_ADC_ConfigChannel+0x7d8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d011      	beq.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef8:	4619      	mov	r1, r3
 8003efa:	480c      	ldr	r0, [pc, #48]	; (8003f2c <HAL_ADC_ConfigChannel+0x7c0>)
 8003efc:	f7fe fd99 	bl	8002a32 <LL_ADC_SetCommonPathInternalCh>
 8003f00:	e008      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f1c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	37d8      	adds	r7, #216	; 0xd8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	80080000 	.word	0x80080000
 8003f2c:	50000300 	.word	0x50000300
 8003f30:	c3210000 	.word	0xc3210000
 8003f34:	90c00010 	.word	0x90c00010
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	053e2d63 	.word	0x053e2d63
 8003f40:	c7520000 	.word	0xc7520000
 8003f44:	50000100 	.word	0x50000100
 8003f48:	cb840000 	.word	0xcb840000

08003f4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe ff47 	bl	8002df0 <LL_ADC_IsEnabled>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d169      	bne.n	800403c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <ADC_Enable+0xfc>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	f043 0210 	orr.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e055      	b.n	800403e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe ff16 	bl	8002dc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f9c:	482b      	ldr	r0, [pc, #172]	; (800404c <ADC_Enable+0x100>)
 8003f9e:	f7fe fd5b 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 8003fa2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fac:	4b28      	ldr	r3, [pc, #160]	; (8004050 <ADC_Enable+0x104>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	4a28      	ldr	r2, [pc, #160]	; (8004054 <ADC_Enable+0x108>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fc6:	e002      	b.n	8003fce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f9      	bne.n	8003fc8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fd4:	f7fe fcec 	bl	80029b0 <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fda:	e028      	b.n	800402e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe ff05 	bl	8002df0 <LL_ADC_IsEnabled>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fee9 	bl	8002dc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ff6:	f7fe fcdb 	bl	80029b0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d914      	bls.n	800402e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d00d      	beq.n	800402e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e007      	b.n	800403e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d1cf      	bne.n	8003fdc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	8000003f 	.word	0x8000003f
 800404c:	50000300 	.word	0x50000300
 8004050:	20000000 	.word	0x20000000
 8004054:	053e2d63 	.word	0x053e2d63

08004058 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800406e:	2b00      	cmp	r3, #0
 8004070:	d14b      	bne.n	800410a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004076:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d021      	beq.n	80040d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fd8d 	bl	8002bb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d032      	beq.n	8004102 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d12b      	bne.n	8004102 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11f      	bne.n	8004102 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80040ce:	e018      	b.n	8004102 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d111      	bne.n	8004102 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	f043 0201 	orr.w	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7fd f890 	bl	8001228 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004108:	e00e      	b.n	8004128 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff fb1e 	bl	8003758 <HAL_ADC_ErrorCallback>
}
 800411c:	e004      	b.n	8004128 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f7ff faf6 	bl	8003730 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416a:	f043 0204 	orr.w	r2, r3, #4
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff faf0 	bl	8003758 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <LL_ADC_IsEnabled>:
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <LL_ADC_IsEnabled+0x18>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <LL_ADC_IsEnabled+0x1a>
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d101      	bne.n	80041be <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b0a1      	sub	sp, #132	; 0x84
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800424a:	2302      	movs	r3, #2
 800424c:	e08b      	b.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004256:	2300      	movs	r3, #0
 8004258:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800425a:	2300      	movs	r3, #0
 800425c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004266:	d102      	bne.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004268:	4b41      	ldr	r3, [pc, #260]	; (8004370 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	e001      	b.n	8004272 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e06a      	b.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff87 	bl	80041a6 <LL_ADC_REG_IsConversionOngoing>
 8004298:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ff81 	bl	80041a6 <LL_ADC_REG_IsConversionOngoing>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d14c      	bne.n	8004344 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80042aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d149      	bne.n	8004344 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042b0:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80042b2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d028      	beq.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ce:	035b      	lsls	r3, r3, #13
 80042d0:	430b      	orrs	r3, r1
 80042d2:	431a      	orrs	r2, r3
 80042d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042dc:	f7ff ff50 	bl	8004180 <LL_ADC_IsEnabled>
 80042e0:	4604      	mov	r4, r0
 80042e2:	4823      	ldr	r0, [pc, #140]	; (8004370 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80042e4:	f7ff ff4c 	bl	8004180 <LL_ADC_IsEnabled>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4323      	orrs	r3, r4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d133      	bne.n	8004358 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80042f8:	f023 030f 	bic.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	6811      	ldr	r1, [r2, #0]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	6892      	ldr	r2, [r2, #8]
 8004304:	430a      	orrs	r2, r1
 8004306:	431a      	orrs	r2, r3
 8004308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800430c:	e024      	b.n	8004358 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800430e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004318:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800431a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800431e:	f7ff ff2f 	bl	8004180 <LL_ADC_IsEnabled>
 8004322:	4604      	mov	r4, r0
 8004324:	4812      	ldr	r0, [pc, #72]	; (8004370 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004326:	f7ff ff2b 	bl	8004180 <LL_ADC_IsEnabled>
 800432a:	4603      	mov	r3, r0
 800432c:	4323      	orrs	r3, r4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d112      	bne.n	8004358 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800433a:	f023 030f 	bic.w	r3, r3, #15
 800433e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004340:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004342:	e009      	b.n	8004358 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004356:	e000      	b.n	800435a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004358:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004362:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004366:	4618      	mov	r0, r3
 8004368:	3784      	adds	r7, #132	; 0x84
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}
 800436e:	bf00      	nop
 8004370:	50000100 	.word	0x50000100
 8004374:	50000300 	.word	0x50000300

08004378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004394:	4013      	ands	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60d3      	str	r3, [r2, #12]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <__NVIC_GetPriorityGrouping+0x18>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	f003 0307 	and.w	r3, r3, #7
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	db0b      	blt.n	8004406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	f003 021f 	and.w	r2, r3, #31
 80043f4:	4907      	ldr	r1, [pc, #28]	; (8004414 <__NVIC_EnableIRQ+0x38>)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2001      	movs	r0, #1
 80043fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000e100 	.word	0xe000e100

08004418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004428:	2b00      	cmp	r3, #0
 800442a:	db0a      	blt.n	8004442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	490c      	ldr	r1, [pc, #48]	; (8004464 <__NVIC_SetPriority+0x4c>)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	440b      	add	r3, r1
 800443c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004440:	e00a      	b.n	8004458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4908      	ldr	r1, [pc, #32]	; (8004468 <__NVIC_SetPriority+0x50>)
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	3b04      	subs	r3, #4
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	440b      	add	r3, r1
 8004456:	761a      	strb	r2, [r3, #24]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000e100 	.word	0xe000e100
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f1c3 0307 	rsb	r3, r3, #7
 8004486:	2b04      	cmp	r3, #4
 8004488:	bf28      	it	cs
 800448a:	2304      	movcs	r3, #4
 800448c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3304      	adds	r3, #4
 8004492:	2b06      	cmp	r3, #6
 8004494:	d902      	bls.n	800449c <NVIC_EncodePriority+0x30>
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3b03      	subs	r3, #3
 800449a:	e000      	b.n	800449e <NVIC_EncodePriority+0x32>
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	401a      	ands	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b4:	f04f 31ff 	mov.w	r1, #4294967295
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	43d9      	mvns	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c4:	4313      	orrs	r3, r2
         );
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3724      	adds	r7, #36	; 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3b01      	subs	r3, #1
 80044e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e4:	d301      	bcc.n	80044ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044e6:	2301      	movs	r3, #1
 80044e8:	e00f      	b.n	800450a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ea:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <SysTick_Config+0x40>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044f2:	210f      	movs	r1, #15
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	f7ff ff8e 	bl	8004418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <SysTick_Config+0x40>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004502:	4b04      	ldr	r3, [pc, #16]	; (8004514 <SysTick_Config+0x40>)
 8004504:	2207      	movs	r2, #7
 8004506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	e000e010 	.word	0xe000e010

08004518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff29 	bl	8004378 <__NVIC_SetPriorityGrouping>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	4603      	mov	r3, r0
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800453c:	f7ff ff40 	bl	80043c0 <__NVIC_GetPriorityGrouping>
 8004540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	6978      	ldr	r0, [r7, #20]
 8004548:	f7ff ff90 	bl	800446c <NVIC_EncodePriority>
 800454c:	4602      	mov	r2, r0
 800454e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff5f 	bl	8004418 <__NVIC_SetPriority>
}
 800455a:	bf00      	nop
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	4603      	mov	r3, r0
 800456a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800456c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff ff33 	bl	80043dc <__NVIC_EnableIRQ>
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ffa4 	bl	80044d4 <SysTick_Config>
 800458c:	4603      	mov	r3, r0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e08d      	b.n	80046c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <HAL_DMA_Init+0x138>)
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d80f      	bhi.n	80045d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b45      	ldr	r3, [pc, #276]	; (80046d4 <HAL_DMA_Init+0x13c>)
 80045be:	4413      	add	r3, r2
 80045c0:	4a45      	ldr	r2, [pc, #276]	; (80046d8 <HAL_DMA_Init+0x140>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	091b      	lsrs	r3, r3, #4
 80045c8:	009a      	lsls	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a42      	ldr	r2, [pc, #264]	; (80046dc <HAL_DMA_Init+0x144>)
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
 80045d4:	e00e      	b.n	80045f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <HAL_DMA_Init+0x148>)
 80045de:	4413      	add	r3, r2
 80045e0:	4a3d      	ldr	r2, [pc, #244]	; (80046d8 <HAL_DMA_Init+0x140>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	009a      	lsls	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a3c      	ldr	r2, [pc, #240]	; (80046e4 <HAL_DMA_Init+0x14c>)
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa82 	bl	8004b50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004654:	d102      	bne.n	800465c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004670:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <HAL_DMA_Init+0x104>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b04      	cmp	r3, #4
 8004680:	d80c      	bhi.n	800469c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 faa2 	bl	8004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	e008      	b.n	80046ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40020407 	.word	0x40020407
 80046d4:	bffdfff8 	.word	0xbffdfff8
 80046d8:	cccccccd 	.word	0xcccccccd
 80046dc:	40020000 	.word	0x40020000
 80046e0:	bffdfbf8 	.word	0xbffdfbf8
 80046e4:	40020400 	.word	0x40020400

080046e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_DMA_Start_IT+0x20>
 8004704:	2302      	movs	r3, #2
 8004706:	e066      	b.n	80047d6 <HAL_DMA_Start_IT+0xee>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d155      	bne.n	80047c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f9c7 	bl	8004ad4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 020e 	orr.w	r2, r2, #14
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e00f      	b.n	8004780 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0204 	bic.w	r2, r2, #4
 800476e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 020a 	orr.w	r2, r2, #10
 800477e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e005      	b.n	80047d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
 80047d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d005      	beq.n	8004802 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2204      	movs	r2, #4
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e037      	b.n	8004872 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 020e 	bic.w	r2, r2, #14
 8004810:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004820:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f003 021f 	and.w	r2, r3, #31
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2101      	movs	r1, #1
 8004840:	fa01 f202 	lsl.w	r2, r1, r2
 8004844:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800484e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00c      	beq.n	8004872 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004866:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004870:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d00d      	beq.n	80048c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2204      	movs	r2, #4
 80048ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	e047      	b.n	8004954 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 020e 	bic.w	r2, r2, #14
 80048d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	f003 021f 	and.w	r2, r3, #31
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f202 	lsl.w	r2, r1, r2
 8004906:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004910:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004928:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004932:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
    }
  }
  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2204      	movs	r2, #4
 8004980:	409a      	lsls	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d026      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x7a>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d021      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f003 021f 	and.w	r2, r3, #31
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2104      	movs	r1, #4
 80049c0:	fa01 f202 	lsl.w	r2, r1, r2
 80049c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d071      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049d6:	e06c      	b.n	8004ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2202      	movs	r2, #2
 80049e2:	409a      	lsls	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02e      	beq.n	8004a4a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d029      	beq.n	8004a4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 020a 	bic.w	r2, r2, #10
 8004a12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	2102      	movs	r1, #2
 8004a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d038      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a48:	e033      	b.n	8004ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2208      	movs	r2, #8
 8004a54:	409a      	lsls	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02a      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d025      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 020e 	bic.w	r2, r2, #14
 8004a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f202 	lsl.w	r2, r1, r2
 8004a8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
}
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	f003 021f 	and.w	r2, r3, #31
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d108      	bne.n	8004b34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b32:	e007      	b.n	8004b44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d802      	bhi.n	8004b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b64:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e001      	b.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b6c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	3b08      	subs	r3, #8
 8004b7a:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	009a      	lsls	r2, r3, #2
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	4413      	add	r3, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a0b      	ldr	r2, [pc, #44]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40020407 	.word	0x40020407
 8004bbc:	40020800 	.word	0x40020800
 8004bc0:	40020820 	.word	0x40020820
 8004bc4:	cccccccd 	.word	0xcccccccd
 8004bc8:	40020880 	.word	0x40020880

08004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	461a      	mov	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	1000823f 	.word	0x1000823f
 8004c10:	40020940 	.word	0x40020940

08004c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c22:	e15a      	b.n	8004eda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	4013      	ands	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 814c 	beq.w	8004ed4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d005      	beq.n	8004c54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d130      	bne.n	8004cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	2203      	movs	r2, #3
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	f003 0201 	and.w	r2, r3, #1
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d017      	beq.n	8004cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	2203      	movs	r2, #3
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d123      	bne.n	8004d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	08da      	lsrs	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3208      	adds	r2, #8
 8004d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	220f      	movs	r2, #15
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	08da      	lsrs	r2, r3, #3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3208      	adds	r2, #8
 8004d40:	6939      	ldr	r1, [r7, #16]
 8004d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	2203      	movs	r2, #3
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0203 	and.w	r2, r3, #3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80a6 	beq.w	8004ed4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d88:	4b5b      	ldr	r3, [pc, #364]	; (8004ef8 <HAL_GPIO_Init+0x2e4>)
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	4a5a      	ldr	r2, [pc, #360]	; (8004ef8 <HAL_GPIO_Init+0x2e4>)
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	6613      	str	r3, [r2, #96]	; 0x60
 8004d94:	4b58      	ldr	r3, [pc, #352]	; (8004ef8 <HAL_GPIO_Init+0x2e4>)
 8004d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004da0:	4a56      	ldr	r2, [pc, #344]	; (8004efc <HAL_GPIO_Init+0x2e8>)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	3302      	adds	r3, #2
 8004da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	220f      	movs	r2, #15
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dca:	d01f      	beq.n	8004e0c <HAL_GPIO_Init+0x1f8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a4c      	ldr	r2, [pc, #304]	; (8004f00 <HAL_GPIO_Init+0x2ec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d019      	beq.n	8004e08 <HAL_GPIO_Init+0x1f4>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a4b      	ldr	r2, [pc, #300]	; (8004f04 <HAL_GPIO_Init+0x2f0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <HAL_GPIO_Init+0x1f0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a4a      	ldr	r2, [pc, #296]	; (8004f08 <HAL_GPIO_Init+0x2f4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00d      	beq.n	8004e00 <HAL_GPIO_Init+0x1ec>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a49      	ldr	r2, [pc, #292]	; (8004f0c <HAL_GPIO_Init+0x2f8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <HAL_GPIO_Init+0x1e8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a48      	ldr	r2, [pc, #288]	; (8004f10 <HAL_GPIO_Init+0x2fc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_GPIO_Init+0x1e4>
 8004df4:	2305      	movs	r3, #5
 8004df6:	e00a      	b.n	8004e0e <HAL_GPIO_Init+0x1fa>
 8004df8:	2306      	movs	r3, #6
 8004dfa:	e008      	b.n	8004e0e <HAL_GPIO_Init+0x1fa>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	e006      	b.n	8004e0e <HAL_GPIO_Init+0x1fa>
 8004e00:	2303      	movs	r3, #3
 8004e02:	e004      	b.n	8004e0e <HAL_GPIO_Init+0x1fa>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e002      	b.n	8004e0e <HAL_GPIO_Init+0x1fa>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_GPIO_Init+0x1fa>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	f002 0203 	and.w	r2, r2, #3
 8004e14:	0092      	lsls	r2, r2, #2
 8004e16:	4093      	lsls	r3, r2
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e1e:	4937      	ldr	r1, [pc, #220]	; (8004efc <HAL_GPIO_Init+0x2e8>)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	3302      	adds	r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e2c:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e50:	4a30      	ldr	r2, [pc, #192]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4013      	ands	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e7a:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e80:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ece:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <HAL_GPIO_Init+0x300>)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f ae9d 	bne.w	8004c24 <HAL_GPIO_Init+0x10>
  }
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40010000 	.word	0x40010000
 8004f00:	48000400 	.word	0x48000400
 8004f04:	48000800 	.word	0x48000800
 8004f08:	48000c00 	.word	0x48000c00
 8004f0c:	48001000 	.word	0x48001000
 8004f10:	48001400 	.word	0x48001400
 8004f14:	40010400 	.word	0x40010400

08004f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
 8004f24:	4613      	mov	r3, r2
 8004f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f28:	787b      	ldrb	r3, [r7, #1]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f2e:	887a      	ldrh	r2, [r7, #2]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f34:	e002      	b.n	8004f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f36:	887a      	ldrh	r2, [r7, #2]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e08d      	b.n	8005076 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fab0 	bl	80014d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	; 0x24
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d107      	bne.n	8004fc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	e006      	b.n	8004fd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d108      	bne.n	8004fea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	e007      	b.n	8004ffa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800501c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b20      	cmp	r3, #32
 8005092:	d138      	bne.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800509e:	2302      	movs	r3, #2
 80050a0:	e032      	b.n	8005108 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2224      	movs	r2, #36	; 0x24
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b20      	cmp	r3, #32
 8005128:	d139      	bne.n	800519e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005134:	2302      	movs	r3, #2
 8005136:	e033      	b.n	80051a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005166:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0c0      	b.n	8005340 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f009 fc74 	bl	800eac0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2203      	movs	r2, #3
 80051dc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f005 fabc 	bl	800a762 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
 80051ee:	e03e      	b.n	800526e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051f0:	7bfa      	ldrb	r2, [r7, #15]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3311      	adds	r3, #17
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005204:	7bfa      	ldrb	r2, [r7, #15]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	3310      	adds	r3, #16
 8005214:	7bfa      	ldrb	r2, [r7, #15]
 8005216:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005218:	7bfa      	ldrb	r2, [r7, #15]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3313      	adds	r3, #19
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800522c:	7bfa      	ldrb	r2, [r7, #15]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	3320      	adds	r3, #32
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005240:	7bfa      	ldrb	r2, [r7, #15]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	3324      	adds	r3, #36	; 0x24
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	3301      	adds	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	791b      	ldrb	r3, [r3, #4]
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3bb      	bcc.n	80051f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	e044      	b.n	8005308 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800527e:	7bfa      	ldrb	r2, [r7, #15]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	440b      	add	r3, r1
 80052a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052a6:	7bfa      	ldrb	r2, [r7, #15]
 80052a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052aa:	7bfa      	ldrb	r2, [r7, #15]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	440b      	add	r3, r1
 80052ce:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	440b      	add	r3, r1
 80052e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	440b      	add	r3, r1
 80052fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	3301      	adds	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	429a      	cmp	r2, r3
 8005310:	d3b5      	bcc.n	800527e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800531e:	f005 fa3b 	bl	800a798 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	7a9b      	ldrb	r3, [r3, #10]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d102      	bne.n	800533e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 fc41 	bl	8006bc0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_PCD_Start+0x16>
 800535a:	2302      	movs	r3, #2
 800535c:	e012      	b.n	8005384 <HAL_PCD_Start+0x3c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f005 f9e2 	bl	800a734 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f007 fca2 	bl	800ccbe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f007 fca7 	bl	800ccec <USB_ReadInterrupts>
 800539e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fb04 	bl	80059b8 <PCD_EP_ISR_Handler>

    return;
 80053b0:	e110      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d013      	beq.n	80053e4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	b292      	uxth	r2, r2
 80053d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f009 fc04 	bl	800ebe2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80053da:	2100      	movs	r1, #0
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f8fc 	bl	80055da <HAL_PCD_SetAddress>

    return;
 80053e2:	e0f7      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005400:	b292      	uxth	r2, r2
 8005402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005406:	e0e5      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800541a:	b29a      	uxth	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005424:	b292      	uxth	r2, r2
 8005426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800542a:	e0d3      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d034      	beq.n	80054a0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800543e:	b29a      	uxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0204 	bic.w	r2, r2, #4
 8005448:	b292      	uxth	r2, r2
 800544a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005456:	b29a      	uxth	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0208 	bic.w	r2, r2, #8
 8005460:	b292      	uxth	r2, r2
 8005462:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800546c:	2b01      	cmp	r3, #1
 800546e:	d107      	bne.n	8005480 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005478:	2100      	movs	r1, #0
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f009 fda4 	bl	800efc8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f009 fbe7 	bl	800ec54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800548e:	b29a      	uxth	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005498:	b292      	uxth	r2, r2
 800549a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800549e:	e099      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d027      	beq.n	80054fa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0208 	orr.w	r2, r2, #8
 80054bc:	b292      	uxth	r2, r2
 80054be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d4:	b292      	uxth	r2, r2
 80054d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0204 	orr.w	r2, r2, #4
 80054ec:	b292      	uxth	r2, r2
 80054ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f009 fb94 	bl	800ec20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80054f8:	e06c      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005500:	2b00      	cmp	r3, #0
 8005502:	d040      	beq.n	8005586 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800550c:	b29a      	uxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005516:	b292      	uxth	r2, r2
 8005518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d12b      	bne.n	800557e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800552e:	b29a      	uxth	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0204 	orr.w	r2, r2, #4
 8005538:	b292      	uxth	r2, r2
 800553a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005546:	b29a      	uxth	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0208 	orr.w	r2, r2, #8
 8005550:	b292      	uxth	r2, r2
 8005552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005566:	b29b      	uxth	r3, r3
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005574:	2101      	movs	r1, #1
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f009 fd26 	bl	800efc8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800557c:	e02a      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f009 fb4e 	bl	800ec20 <HAL_PCD_SuspendCallback>
    return;
 8005584:	e026      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00f      	beq.n	80055b0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005598:	b29a      	uxth	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055a2:	b292      	uxth	r2, r2
 80055a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f009 fb0c 	bl	800ebc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80055ae:	e011      	b.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055cc:	b292      	uxth	r2, r2
 80055ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80055d2:	bf00      	nop
  }
}
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_PCD_SetAddress+0x1a>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e012      	b.n	800561a <HAL_PCD_SetAddress+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f007 fb43 	bl	800cc96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	4608      	mov	r0, r1
 800562c:	4611      	mov	r1, r2
 800562e:	461a      	mov	r2, r3
 8005630:	4603      	mov	r3, r0
 8005632:	70fb      	strb	r3, [r7, #3]
 8005634:	460b      	mov	r3, r1
 8005636:	803b      	strh	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005644:	2b00      	cmp	r3, #0
 8005646:	da0e      	bge.n	8005666 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	f003 0207 	and.w	r2, r3, #7
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	3310      	adds	r3, #16
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4413      	add	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	705a      	strb	r2, [r3, #1]
 8005664:	e00e      	b.n	8005684 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	f003 0207 	and.w	r2, r3, #7
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4413      	add	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	b2da      	uxtb	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005690:	883a      	ldrh	r2, [r7, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	78ba      	ldrb	r2, [r7, #2]
 800569a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800569c:	78bb      	ldrb	r3, [r7, #2]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d102      	bne.n	80056a8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_PCD_EP_Open+0x94>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e00e      	b.n	80056d4 <HAL_PCD_EP_Open+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f005 f885 	bl	800a7d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80056d2:	7afb      	ldrb	r3, [r7, #11]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da0e      	bge.n	800570e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	f003 0207 	and.w	r2, r3, #7
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	3310      	adds	r3, #16
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	705a      	strb	r2, [r3, #1]
 800570c:	e00e      	b.n	800572c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	f003 0207 	and.w	r2, r3, #7
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4413      	add	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	b2da      	uxtb	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_PCD_EP_Close+0x6a>
 8005742:	2302      	movs	r3, #2
 8005744:	e00e      	b.n	8005764 <HAL_PCD_EP_Close+0x88>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	f005 fc01 	bl	800af5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	460b      	mov	r3, r1
 800577a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800577c:	7afb      	ldrb	r3, [r7, #11]
 800577e:	f003 0207 	and.w	r2, r3, #7
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2200      	movs	r2, #0
 80057a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2200      	movs	r2, #0
 80057aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ac:	7afb      	ldrb	r3, [r7, #11]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	4618      	mov	r0, r3
 80057c0:	f005 fdb9 	bl	800b336 <USB_EPStartXfer>

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	f003 0207 	and.w	r2, r3, #7
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	440b      	add	r3, r1
 80057ec:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80057f0:	681b      	ldr	r3, [r3, #0]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	460b      	mov	r3, r1
 800580c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	f003 0207 	and.w	r2, r3, #7
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	3310      	adds	r3, #16
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2201      	movs	r2, #1
 8005848:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	b2da      	uxtb	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	4618      	mov	r0, r3
 800585e:	f005 fd6a 	bl	800b336 <USB_EPStartXfer>

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	7912      	ldrb	r2, [r2, #4]
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e03e      	b.n	8005908 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800588a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800588e:	2b00      	cmp	r3, #0
 8005890:	da0e      	bge.n	80058b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	f003 0207 	and.w	r2, r3, #7
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	3310      	adds	r3, #16
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4413      	add	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	705a      	strb	r2, [r3, #1]
 80058ae:	e00c      	b.n	80058ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_PCD_EP_SetStall+0x7e>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e00e      	b.n	8005908 <HAL_PCD_EP_SetStall+0x9c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68f9      	ldr	r1, [r7, #12]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f007 f8cd 	bl	800ca98 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	7912      	ldrb	r2, [r2, #4]
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e040      	b.n	80059b0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800592e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005932:	2b00      	cmp	r3, #0
 8005934:	da0e      	bge.n	8005954 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 0207 	and.w	r2, r3, #7
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	3310      	adds	r3, #16
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	705a      	strb	r2, [r3, #1]
 8005952:	e00e      	b.n	8005972 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	f003 0207 	and.w	r2, r3, #7
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	b2da      	uxtb	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_PCD_EP_ClrStall+0x82>
 800598e:	2302      	movs	r3, #2
 8005990:	e00e      	b.n	80059b0 <HAL_PCD_EP_ClrStall+0xa0>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f007 f8ca 	bl	800cb3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b096      	sub	sp, #88	; 0x58
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059c0:	e3ae      	b.n	8006120 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80059ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80059dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f040 8170 	bne.w	8005cc6 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80059e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d14d      	bne.n	8005a8e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	81fb      	strh	r3, [r7, #14]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3310      	adds	r3, #16
 8005a1a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a42:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	441a      	add	r2, r3
 8005a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a50:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a52:	2100      	movs	r1, #0
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f009 f89c 	bl	800eb92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7b1b      	ldrb	r3, [r3, #12]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 835d 	beq.w	8006120 <PCD_EP_ISR_Handler+0x768>
 8005a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 8358 	bne.w	8006120 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	7b1b      	ldrb	r3, [r3, #12]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	b292      	uxth	r2, r2
 8005a82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	731a      	strb	r2, [r3, #12]
 8005a8c:	e348      	b.n	8006120 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a94:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005aa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d032      	beq.n	8005b12 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4413      	add	r3, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f007 f952 	bl	800cd90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005af8:	4013      	ands	r3, r2
 8005afa:	823b      	strh	r3, [r7, #16]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	8a3a      	ldrh	r2, [r7, #16]
 8005b02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b06:	b292      	uxth	r2, r2
 8005b08:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f009 f814 	bl	800eb38 <HAL_PCD_SetupStageCallback>
 8005b10:	e306      	b.n	8006120 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b12:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f280 8302 	bge.w	8006120 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b28:	4013      	ands	r3, r2
 8005b2a:	83fb      	strh	r3, [r7, #30]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	8bfa      	ldrh	r2, [r7, #30]
 8005b32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b36:	b292      	uxth	r2, r2
 8005b38:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b60:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d019      	beq.n	8005b9e <PCD_EP_ISR_Handler+0x1e6>
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d015      	beq.n	8005b9e <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b78:	6959      	ldr	r1, [r3, #20]
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b80:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f007 f904 	bl	800cd90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	441a      	add	r2, r3
 8005b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b94:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b96:	2100      	movs	r1, #0
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f008 ffdf 	bl	800eb5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005ba8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 82b5 	bne.w	8006120 <PCD_EP_ISR_Handler+0x768>
 8005bb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bc2:	f000 82ad 	beq.w	8006120 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	4413      	add	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005bfc:	d91d      	bls.n	8005c3a <PCD_EP_ISR_Handler+0x282>
 8005bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	647b      	str	r3, [r7, #68]	; 0x44
 8005c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <PCD_EP_ISR_Handler+0x260>
 8005c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c14:	3b01      	subs	r3, #1
 8005c16:	647b      	str	r3, [r7, #68]	; 0x44
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e026      	b.n	8005c88 <PCD_EP_ISR_Handler+0x2d0>
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <PCD_EP_ISR_Handler+0x2a0>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e017      	b.n	8005c88 <PCD_EP_ISR_Handler+0x2d0>
 8005c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <PCD_EP_ISR_Handler+0x2ba>
 8005c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6e:	3301      	adds	r3, #1
 8005c70:	647b      	str	r3, [r7, #68]	; 0x44
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c98:	827b      	strh	r3, [r7, #18]
 8005c9a:	8a7b      	ldrh	r3, [r7, #18]
 8005c9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ca0:	827b      	strh	r3, [r7, #18]
 8005ca2:	8a7b      	ldrh	r3, [r7, #18]
 8005ca4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ca8:	827b      	strh	r3, [r7, #18]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	8a7b      	ldrh	r3, [r7, #18]
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]
 8005cc4:	e22c      	b.n	8006120 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005cda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f280 80f6 	bge.w	8005ed0 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d16:	b292      	uxth	r2, r2
 8005d18:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d1a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d32:	7b1b      	ldrb	r3, [r3, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d123      	bne.n	8005d80 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005d60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 808e 	beq.w	8005e86 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d70:	6959      	ldr	r1, [r3, #20]
 8005d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d74:	88da      	ldrh	r2, [r3, #6]
 8005d76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d7a:	f007 f809 	bl	800cd90 <USB_ReadPMA>
 8005d7e:	e082      	b.n	8005e86 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d82:	78db      	ldrb	r3, [r3, #3]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d10a      	bne.n	8005d9e <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f9d3 	bl	800613c <HAL_PCD_EP_DB_Receive>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005d9c:	e073      	b.n	8005e86 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d022      	beq.n	8005e42 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4413      	add	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02c      	beq.n	8005e86 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e32:	6959      	ldr	r1, [r3, #20]
 8005e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e36:	891a      	ldrh	r2, [r3, #8]
 8005e38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e3c:	f006 ffa8 	bl	800cd90 <USB_ReadPMA>
 8005e40:	e021      	b.n	8005e86 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7c:	895a      	ldrh	r2, [r3, #10]
 8005e7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e82:	f006 ff85 	bl	800cd90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e8e:	441a      	add	r2, r3
 8005e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e9c:	441a      	add	r2, r3
 8005e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <PCD_EP_ISR_Handler+0x4fe>
 8005eaa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d206      	bcs.n	8005ec4 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f008 fe4d 	bl	800eb5c <HAL_PCD_DataOutStageCallback>
 8005ec2:	e005      	b.n	8005ed0 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f005 fa33 	bl	800b336 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ed0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8121 	beq.w	8006120 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8005ede:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	3310      	adds	r3, #16
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	f040 80a2 	bne.w	800607c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8005f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f40:	7b1b      	ldrb	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8093 	beq.w	800606e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d046      	beq.n	8005fe2 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d126      	bne.n	8005faa <PCD_EP_ISR_Handler+0x5f2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	4413      	add	r3, r2
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	00da      	lsls	r2, r3, #3
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	e061      	b.n	800606e <PCD_EP_ISR_Handler+0x6b6>
 8005faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d15d      	bne.n	800606e <PCD_EP_ISR_Handler+0x6b6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	4413      	add	r3, r2
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	00da      	lsls	r2, r3, #3
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	2200      	movs	r2, #0
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e045      	b.n	800606e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d126      	bne.n	800603e <PCD_EP_ISR_Handler+0x686>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	4413      	add	r3, r2
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
 8006008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	00da      	lsls	r2, r3, #3
 800600e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006010:	4413      	add	r3, r2
 8006012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006016:	633b      	str	r3, [r7, #48]	; 0x30
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006022:	b29a      	uxth	r2, r3
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006036:	b29a      	uxth	r2, r3
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e017      	b.n	800606e <PCD_EP_ISR_Handler+0x6b6>
 800603e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d113      	bne.n	800606e <PCD_EP_ISR_Handler+0x6b6>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604e:	b29b      	uxth	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	4413      	add	r3, r2
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	00da      	lsls	r2, r3, #3
 800605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006060:	4413      	add	r3, r2
 8006062:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	2200      	movs	r2, #0
 800606c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800606e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f008 fd8c 	bl	800eb92 <HAL_PCD_DataInStageCallback>
 800607a:	e051      	b.n	8006120 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800607c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d144      	bne.n	8006112 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	4413      	add	r3, r2
 80060a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80060b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d907      	bls.n	80060cc <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80060bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c8:	619a      	str	r2, [r3, #24]
 80060ca:	e002      	b.n	80060d2 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80060cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ce:	2200      	movs	r2, #0
 80060d0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80060d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f008 fd56 	bl	800eb92 <HAL_PCD_DataInStageCallback>
 80060e6:	e01b      	b.n	8006120 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80060e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060f0:	441a      	add	r2, r3
 80060f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80060f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060fe:	441a      	add	r2, r3
 8006100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006102:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800610a:	4618      	mov	r0, r3
 800610c:	f005 f913 	bl	800b336 <USB_EPStartXfer>
 8006110:	e006      	b.n	8006120 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006112:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006116:	461a      	mov	r2, r3
 8006118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f917 	bl	800634e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006128:	b29b      	uxth	r3, r3
 800612a:	b21b      	sxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	f6ff ac48 	blt.w	80059c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3758      	adds	r7, #88	; 0x58
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d07c      	beq.n	800624e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4413      	add	r3, r2
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	4413      	add	r3, r2
 800616e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006178:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	699a      	ldr	r2, [r3, #24]
 800617e:	8b7b      	ldrh	r3, [r7, #26]
 8006180:	429a      	cmp	r2, r3
 8006182:	d306      	bcc.n	8006192 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	8b7b      	ldrh	r3, [r7, #26]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	619a      	str	r2, [r3, #24]
 8006190:	e002      	b.n	8006198 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d123      	bne.n	80061e8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	833b      	strh	r3, [r7, #24]
 80061bc:	8b3b      	ldrh	r3, [r7, #24]
 80061be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061c2:	833b      	strh	r3, [r7, #24]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	8b3b      	ldrh	r3, [r7, #24]
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01f      	beq.n	8006232 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	82fb      	strh	r3, [r7, #22]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	8afb      	ldrh	r3, [r7, #22]
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006232:	8b7b      	ldrh	r3, [r7, #26]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8085 	beq.w	8006344 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6959      	ldr	r1, [r3, #20]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	891a      	ldrh	r2, [r3, #8]
 8006246:	8b7b      	ldrh	r3, [r7, #26]
 8006248:	f006 fda2 	bl	800cd90 <USB_ReadPMA>
 800624c:	e07a      	b.n	8006344 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4413      	add	r3, r2
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	4413      	add	r3, r2
 8006268:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006272:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	8b7b      	ldrh	r3, [r7, #26]
 800627a:	429a      	cmp	r2, r3
 800627c:	d306      	bcc.n	800628c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	8b7b      	ldrh	r3, [r7, #26]
 8006284:	1ad2      	subs	r2, r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	619a      	str	r2, [r3, #24]
 800628a:	e002      	b.n	8006292 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2200      	movs	r2, #0
 8006290:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d123      	bne.n	80062e2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b4:	83fb      	strh	r3, [r7, #30]
 80062b6:	8bfb      	ldrh	r3, [r7, #30]
 80062b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062bc:	83fb      	strh	r3, [r7, #30]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8bfb      	ldrh	r3, [r7, #30]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11f      	bne.n	800632c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	83bb      	strh	r3, [r7, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	8bbb      	ldrh	r3, [r7, #28]
 8006318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006328:	b29b      	uxth	r3, r3
 800632a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800632c:	8b7b      	ldrh	r3, [r7, #26]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6959      	ldr	r1, [r3, #20]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	895a      	ldrh	r2, [r3, #10]
 800633e:	8b7b      	ldrh	r3, [r7, #26]
 8006340:	f006 fd26 	bl	800cd90 <USB_ReadPMA>
    }
  }

  return count;
 8006344:	8b7b      	ldrh	r3, [r7, #26]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b0a4      	sub	sp, #144	; 0x90
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	4613      	mov	r3, r2
 800635a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 81db 	beq.w	800671e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4413      	add	r3, r2
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	4413      	add	r3, r2
 8006382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800638c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	699a      	ldr	r2, [r3, #24]
 8006394:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006398:	429a      	cmp	r2, r3
 800639a:	d907      	bls.n	80063ac <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063a4:	1ad2      	subs	r2, r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	619a      	str	r2, [r3, #24]
 80063aa:	e002      	b.n	80063b2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2200      	movs	r2, #0
 80063b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 80b9 	bne.w	800652e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d126      	bne.n	8006412 <HAL_PCD_EP_DB_Transmit+0xc4>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	4413      	add	r3, r2
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	00da      	lsls	r2, r3, #3
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640a:	b29a      	uxth	r2, r3
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	e01a      	b.n	8006448 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d116      	bne.n	8006448 <HAL_PCD_EP_DB_Transmit+0xfa>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	4413      	add	r3, r2
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00da      	lsls	r2, r3, #3
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	4413      	add	r3, r2
 800643c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	2200      	movs	r2, #0
 8006446:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d126      	bne.n	80064a4 <HAL_PCD_EP_DB_Transmit+0x156>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	00da      	lsls	r2, r3, #3
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006488:	b29a      	uxth	r2, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e017      	b.n	80064d4 <HAL_PCD_EP_DB_Transmit+0x186>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d113      	bne.n	80064d4 <HAL_PCD_EP_DB_Transmit+0x186>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	4413      	add	r3, r2
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	00da      	lsls	r2, r3, #3
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	4413      	add	r3, r2
 80064c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064cc:	623b      	str	r3, [r7, #32]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	2200      	movs	r2, #0
 80064d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f008 fb59 	bl	800eb92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 82fa 	beq.w	8006ae0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	82fb      	strh	r3, [r7, #22]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	8afb      	ldrh	r3, [r7, #22]
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
 800652c:	e2d8      	b.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d021      	beq.n	800657c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006582:	2b01      	cmp	r3, #1
 8006584:	f040 82ac 	bne.w	8006ae0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006590:	441a      	add	r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800659e:	441a      	add	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d30b      	bcc.n	80065c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065c0:	1ad2      	subs	r2, r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	621a      	str	r2, [r3, #32]
 80065c6:	e017      	b.n	80065f8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d108      	bne.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80065d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065e0:	e00a      	b.n	80065f8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2200      	movs	r2, #0
 80065f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d165      	bne.n	80066cc <HAL_PCD_EP_DB_Transmit+0x37e>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	4413      	add	r3, r2
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	00da      	lsls	r2, r3, #3
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	4413      	add	r3, r2
 8006622:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006626:	63bb      	str	r3, [r7, #56]	; 0x38
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006632:	b29a      	uxth	r2, r3
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800663c:	2b3e      	cmp	r3, #62	; 0x3e
 800663e:	d91d      	bls.n	800667c <HAL_PCD_EP_DB_Transmit+0x32e>
 8006640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	64bb      	str	r3, [r7, #72]	; 0x48
 8006648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <HAL_PCD_EP_DB_Transmit+0x30c>
 8006654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006656:	3b01      	subs	r3, #1
 8006658:	64bb      	str	r3, [r7, #72]	; 0x48
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29a      	uxth	r2, r3
 8006660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006662:	b29b      	uxth	r3, r3
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	b29b      	uxth	r3, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	b29b      	uxth	r3, r3
 800666c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006674:	b29a      	uxth	r2, r3
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	e044      	b.n	8006706 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800667c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <HAL_PCD_EP_DB_Transmit+0x34c>
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006692:	b29a      	uxth	r2, r3
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e035      	b.n	8006706 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800669a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_PCD_EP_DB_Transmit+0x366>
 80066ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b0:	3301      	adds	r3, #1
 80066b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066bc:	b29b      	uxth	r3, r3
 80066be:	029b      	lsls	r3, r3, #10
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	4313      	orrs	r3, r2
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	e01c      	b.n	8006706 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d118      	bne.n	8006706 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e8:	4413      	add	r3, r2
 80066ea:	647b      	str	r3, [r7, #68]	; 0x44
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	00da      	lsls	r2, r3, #3
 80066f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f4:	4413      	add	r3, r2
 80066f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066fa:	643b      	str	r3, [r7, #64]	; 0x40
 80066fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006700:	b29a      	uxth	r2, r3
 8006702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006704:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6959      	ldr	r1, [r3, #20]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	891a      	ldrh	r2, [r3, #8]
 8006712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006716:	b29b      	uxth	r3, r3
 8006718:	f006 faf8 	bl	800cd0c <USB_WritePMA>
 800671c:	e1e0      	b.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	4413      	add	r3, r2
 8006738:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006742:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800674e:	429a      	cmp	r2, r3
 8006750:	d307      	bcc.n	8006762 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	619a      	str	r2, [r3, #24]
 8006760:	e002      	b.n	8006768 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 80c0 	bne.w	80068f2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d126      	bne.n	80067c8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800678e:	4413      	add	r3, r2
 8006790:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	00da      	lsls	r2, r3, #3
 8006798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800679a:	4413      	add	r3, r2
 800679c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	e01a      	b.n	80067fe <HAL_PCD_EP_DB_Transmit+0x4b0>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d116      	bne.n	80067fe <HAL_PCD_EP_DB_Transmit+0x4b0>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	667b      	str	r3, [r7, #100]	; 0x64
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067de:	b29b      	uxth	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e4:	4413      	add	r3, r2
 80067e6:	667b      	str	r3, [r7, #100]	; 0x64
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	00da      	lsls	r2, r3, #3
 80067ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f0:	4413      	add	r3, r2
 80067f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067f6:	663b      	str	r3, [r7, #96]	; 0x60
 80067f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067fa:	2200      	movs	r2, #0
 80067fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	677b      	str	r3, [r7, #116]	; 0x74
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d12b      	bne.n	8006864 <HAL_PCD_EP_DB_Transmit+0x516>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006820:	4413      	add	r3, r2
 8006822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	00da      	lsls	r2, r3, #3
 800682a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682c:	4413      	add	r3, r2
 800682e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006842:	b29a      	uxth	r2, r3
 8006844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685a:	b29a      	uxth	r2, r3
 800685c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e017      	b.n	8006894 <HAL_PCD_EP_DB_Transmit+0x546>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d113      	bne.n	8006894 <HAL_PCD_EP_DB_Transmit+0x546>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006874:	b29b      	uxth	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687a:	4413      	add	r3, r2
 800687c:	677b      	str	r3, [r7, #116]	; 0x74
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	00da      	lsls	r2, r3, #3
 8006884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006886:	4413      	add	r3, r2
 8006888:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800688c:	673b      	str	r3, [r7, #112]	; 0x70
 800688e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006890:	2200      	movs	r2, #0
 8006892:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f008 f979 	bl	800eb92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 811a 	bne.w	8006ae0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	441a      	add	r2, r3
 80068d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80068dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	8013      	strh	r3, [r2, #0]
 80068f0:	e0f6      	b.n	8006ae0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d121      	bne.n	8006940 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800692c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693c:	b29b      	uxth	r3, r3
 800693e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006946:	2b01      	cmp	r3, #1
 8006948:	f040 80ca 	bne.w	8006ae0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	695a      	ldr	r2, [r3, #20]
 8006950:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006954:	441a      	add	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006962:	441a      	add	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	429a      	cmp	r2, r3
 8006972:	d30b      	bcc.n	800698c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	621a      	str	r2, [r3, #32]
 800698a:	e017      	b.n	80069bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d108      	bne.n	80069a6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069a4:	e00a      	b.n	80069bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2200      	movs	r2, #0
 80069b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	657b      	str	r3, [r7, #84]	; 0x54
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d165      	bne.n	8006a96 <HAL_PCD_EP_DB_Transmit+0x748>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d8:	b29b      	uxth	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069de:	4413      	add	r3, r2
 80069e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	00da      	lsls	r2, r3, #3
 80069e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ea:	4413      	add	r3, r2
 80069ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a06:	2b3e      	cmp	r3, #62	; 0x3e
 8006a08:	d91d      	bls.n	8006a46 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a20:	3b01      	subs	r3, #1
 8006a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	029b      	lsls	r3, r3, #10
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	4313      	orrs	r3, r2
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	e041      	b.n	8006aca <HAL_PCD_EP_DB_Transmit+0x77c>
 8006a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <HAL_PCD_EP_DB_Transmit+0x716>
 8006a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e032      	b.n	8006aca <HAL_PCD_EP_DB_Transmit+0x77c>
 8006a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_PCD_EP_DB_Transmit+0x730>
 8006a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a92:	801a      	strh	r2, [r3, #0]
 8006a94:	e019      	b.n	8006aca <HAL_PCD_EP_DB_Transmit+0x77c>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d115      	bne.n	8006aca <HAL_PCD_EP_DB_Transmit+0x77c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aac:	4413      	add	r3, r2
 8006aae:	657b      	str	r3, [r7, #84]	; 0x54
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	00da      	lsls	r2, r3, #3
 8006ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab8:	4413      	add	r3, r2
 8006aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006abe:	653b      	str	r3, [r7, #80]	; 0x50
 8006ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6959      	ldr	r1, [r3, #20]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	895a      	ldrh	r2, [r3, #10]
 8006ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f006 f916 	bl	800cd0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afa:	82bb      	strh	r3, [r7, #20]
 8006afc:	8abb      	ldrh	r3, [r7, #20]
 8006afe:	f083 0310 	eor.w	r3, r3, #16
 8006b02:	82bb      	strh	r3, [r7, #20]
 8006b04:	8abb      	ldrh	r3, [r7, #20]
 8006b06:	f083 0320 	eor.w	r3, r3, #32
 8006b0a:	82bb      	strh	r3, [r7, #20]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	8abb      	ldrh	r3, [r7, #20]
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3790      	adds	r7, #144	; 0x90
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b087      	sub	sp, #28
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	817b      	strh	r3, [r7, #10]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b4c:	897b      	ldrh	r3, [r7, #10]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b58:	897b      	ldrh	r3, [r7, #10]
 8006b5a:	f003 0207 	and.w	r2, r3, #7
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	3310      	adds	r3, #16
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e009      	b.n	8006b84 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b70:	897a      	ldrh	r2, [r7, #10]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b84:	893b      	ldrh	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d107      	bne.n	8006b9a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	80da      	strh	r2, [r3, #6]
 8006b98:	e00b      	b.n	8006bb2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0c1b      	lsrs	r3, r3, #16
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f043 0302 	orr.w	r3, r3, #2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d141      	bne.n	8006ca6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c22:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2e:	d131      	bne.n	8006c94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c30:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c36:	4a46      	ldr	r2, [pc, #280]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c40:	4b43      	ldr	r3, [pc, #268]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c48:	4a41      	ldr	r2, [pc, #260]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c50:	4b40      	ldr	r3, [pc, #256]	; (8006d54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2232      	movs	r2, #50	; 0x32
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	4a3f      	ldr	r2, [pc, #252]	; (8006d58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	0c9b      	lsrs	r3, r3, #18
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c66:	e002      	b.n	8006c6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c6e:	4b38      	ldr	r3, [pc, #224]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7a:	d102      	bne.n	8006c82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f2      	bne.n	8006c68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c82:	4b33      	ldr	r3, [pc, #204]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8e:	d158      	bne.n	8006d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e057      	b.n	8006d44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c94:	4b2e      	ldr	r3, [pc, #184]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c9a:	4a2d      	ldr	r2, [pc, #180]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ca4:	e04d      	b.n	8006d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d141      	bne.n	8006d32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cae:	4b28      	ldr	r3, [pc, #160]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cba:	d131      	bne.n	8006d20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cbc:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc2:	4a23      	ldr	r2, [pc, #140]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ccc:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cd4:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cdc:	4b1d      	ldr	r3, [pc, #116]	; (8006d54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2232      	movs	r2, #50	; 0x32
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	4a1c      	ldr	r2, [pc, #112]	; (8006d58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	0c9b      	lsrs	r3, r3, #18
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cf2:	e002      	b.n	8006cfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cfa:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d06:	d102      	bne.n	8006d0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f2      	bne.n	8006cf4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1a:	d112      	bne.n	8006d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e011      	b.n	8006d44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d26:	4a0a      	ldr	r2, [pc, #40]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006d30:	e007      	b.n	8006d42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d32:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d3a:	4a05      	ldr	r2, [pc, #20]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	40007000 	.word	0x40007000
 8006d54:	20000000 	.word	0x20000000
 8006d58:	431bde83 	.word	0x431bde83

08006d5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d6a:	6093      	str	r3, [r2, #8]
}
 8006d6c:	bf00      	nop
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40007000 	.word	0x40007000

08006d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e2fe      	b.n	800738c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d075      	beq.n	8006e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d9a:	4b97      	ldr	r3, [pc, #604]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 030c 	and.w	r3, r3, #12
 8006da2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006da4:	4b94      	ldr	r3, [pc, #592]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b0c      	cmp	r3, #12
 8006db2:	d102      	bne.n	8006dba <HAL_RCC_OscConfig+0x3e>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d002      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x44>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d10b      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc0:	4b8d      	ldr	r3, [pc, #564]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d05b      	beq.n	8006e84 <HAL_RCC_OscConfig+0x108>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d157      	bne.n	8006e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e2d9      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de0:	d106      	bne.n	8006df0 <HAL_RCC_OscConfig+0x74>
 8006de2:	4b85      	ldr	r3, [pc, #532]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a84      	ldr	r2, [pc, #528]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	e01d      	b.n	8006e2c <HAL_RCC_OscConfig+0xb0>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006df8:	d10c      	bne.n	8006e14 <HAL_RCC_OscConfig+0x98>
 8006dfa:	4b7f      	ldr	r3, [pc, #508]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a7e      	ldr	r2, [pc, #504]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4b7c      	ldr	r3, [pc, #496]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a7b      	ldr	r2, [pc, #492]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e00b      	b.n	8006e2c <HAL_RCC_OscConfig+0xb0>
 8006e14:	4b78      	ldr	r3, [pc, #480]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a77      	ldr	r2, [pc, #476]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	4b75      	ldr	r3, [pc, #468]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a74      	ldr	r2, [pc, #464]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d013      	beq.n	8006e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fb fdbc 	bl	80029b0 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e3c:	f7fb fdb8 	bl	80029b0 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b64      	cmp	r3, #100	; 0x64
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e29e      	b.n	800738c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e4e:	4b6a      	ldr	r3, [pc, #424]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0xc0>
 8006e5a:	e014      	b.n	8006e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fb fda8 	bl	80029b0 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e64:	f7fb fda4 	bl	80029b0 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b64      	cmp	r3, #100	; 0x64
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e28a      	b.n	800738c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e76:	4b60      	ldr	r3, [pc, #384]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <HAL_RCC_OscConfig+0xe8>
 8006e82:	e000      	b.n	8006e86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d075      	beq.n	8006f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e92:	4b59      	ldr	r3, [pc, #356]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e9c:	4b56      	ldr	r3, [pc, #344]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b0c      	cmp	r3, #12
 8006eaa:	d102      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x136>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d002      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x13c>
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d11f      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eb8:	4b4f      	ldr	r3, [pc, #316]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x154>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e25d      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed0:	4b49      	ldr	r3, [pc, #292]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	061b      	lsls	r3, r3, #24
 8006ede:	4946      	ldr	r1, [pc, #280]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ee4:	4b45      	ldr	r3, [pc, #276]	; (8006ffc <HAL_RCC_OscConfig+0x280>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fb fd15 	bl	8002918 <HAL_InitTick>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d043      	beq.n	8006f7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e249      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d023      	beq.n	8006f48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f00:	4b3d      	ldr	r3, [pc, #244]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a3c      	ldr	r2, [pc, #240]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fb fd50 	bl	80029b0 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f14:	f7fb fd4c 	bl	80029b0 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e232      	b.n	800738c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f26:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f32:	4b31      	ldr	r3, [pc, #196]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	061b      	lsls	r3, r3, #24
 8006f40:	492d      	ldr	r1, [pc, #180]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	604b      	str	r3, [r1, #4]
 8006f46:	e01a      	b.n	8006f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f48:	4b2b      	ldr	r3, [pc, #172]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f54:	f7fb fd2c 	bl	80029b0 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5c:	f7fb fd28 	bl	80029b0 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e20e      	b.n	800738c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f6e:	4b22      	ldr	r3, [pc, #136]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0x1e0>
 8006f7a:	e000      	b.n	8006f7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d041      	beq.n	800700e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01c      	beq.n	8006fcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f92:	4b19      	ldr	r3, [pc, #100]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f98:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa2:	f7fb fd05 	bl	80029b0 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006faa:	f7fb fd01 	bl	80029b0 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1e7      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0ef      	beq.n	8006faa <HAL_RCC_OscConfig+0x22e>
 8006fca:	e020      	b.n	800700e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd2:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <HAL_RCC_OscConfig+0x27c>)
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fdc:	f7fb fce8 	bl	80029b0 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fe2:	e00d      	b.n	8007000 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe4:	f7fb fce4 	bl	80029b0 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d906      	bls.n	8007000 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e1ca      	b.n	800738c <HAL_RCC_OscConfig+0x610>
 8006ff6:	bf00      	nop
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007000:	4b8c      	ldr	r3, [pc, #560]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1ea      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 80a6 	beq.w	8007168 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800701c:	2300      	movs	r3, #0
 800701e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007020:	4b84      	ldr	r3, [pc, #528]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_OscConfig+0x2b4>
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <HAL_RCC_OscConfig+0x2b6>
 8007030:	2300      	movs	r3, #0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007036:	4b7f      	ldr	r3, [pc, #508]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703a:	4a7e      	ldr	r2, [pc, #504]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 800703c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007040:	6593      	str	r3, [r2, #88]	; 0x58
 8007042:	4b7c      	ldr	r3, [pc, #496]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800704e:	2301      	movs	r3, #1
 8007050:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007052:	4b79      	ldr	r3, [pc, #484]	; (8007238 <HAL_RCC_OscConfig+0x4bc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d118      	bne.n	8007090 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800705e:	4b76      	ldr	r3, [pc, #472]	; (8007238 <HAL_RCC_OscConfig+0x4bc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a75      	ldr	r2, [pc, #468]	; (8007238 <HAL_RCC_OscConfig+0x4bc>)
 8007064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800706a:	f7fb fca1 	bl	80029b0 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007072:	f7fb fc9d 	bl	80029b0 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e183      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007084:	4b6c      	ldr	r3, [pc, #432]	; (8007238 <HAL_RCC_OscConfig+0x4bc>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0f0      	beq.n	8007072 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d108      	bne.n	80070aa <HAL_RCC_OscConfig+0x32e>
 8007098:	4b66      	ldr	r3, [pc, #408]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 800709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709e:	4a65      	ldr	r2, [pc, #404]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070a8:	e024      	b.n	80070f4 <HAL_RCC_OscConfig+0x378>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d110      	bne.n	80070d4 <HAL_RCC_OscConfig+0x358>
 80070b2:	4b60      	ldr	r3, [pc, #384]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b8:	4a5e      	ldr	r2, [pc, #376]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070ba:	f043 0304 	orr.w	r3, r3, #4
 80070be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070c2:	4b5c      	ldr	r3, [pc, #368]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c8:	4a5a      	ldr	r2, [pc, #360]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d2:	e00f      	b.n	80070f4 <HAL_RCC_OscConfig+0x378>
 80070d4:	4b57      	ldr	r3, [pc, #348]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070da:	4a56      	ldr	r2, [pc, #344]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070e4:	4b53      	ldr	r3, [pc, #332]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ea:	4a52      	ldr	r2, [pc, #328]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80070ec:	f023 0304 	bic.w	r3, r3, #4
 80070f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d016      	beq.n	800712a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fc:	f7fb fc58 	bl	80029b0 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007102:	e00a      	b.n	800711a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fb fc54 	bl	80029b0 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e138      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800711a:	4b46      	ldr	r3, [pc, #280]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0ed      	beq.n	8007104 <HAL_RCC_OscConfig+0x388>
 8007128:	e015      	b.n	8007156 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712a:	f7fb fc41 	bl	80029b0 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007130:	e00a      	b.n	8007148 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007132:	f7fb fc3d 	bl	80029b0 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e121      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007148:	4b3a      	ldr	r3, [pc, #232]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1ed      	bne.n	8007132 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007156:	7ffb      	ldrb	r3, [r7, #31]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d105      	bne.n	8007168 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715c:	4b35      	ldr	r3, [pc, #212]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	4a34      	ldr	r2, [pc, #208]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007166:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d03c      	beq.n	80071ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01c      	beq.n	80071b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800717c:	4b2d      	ldr	r3, [pc, #180]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 800717e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007182:	4a2c      	ldr	r2, [pc, #176]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718c:	f7fb fc10 	bl	80029b0 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007194:	f7fb fc0c 	bl	80029b0 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e0f2      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071a6:	4b23      	ldr	r3, [pc, #140]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80071a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0ef      	beq.n	8007194 <HAL_RCC_OscConfig+0x418>
 80071b4:	e01b      	b.n	80071ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071b6:	4b1f      	ldr	r3, [pc, #124]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80071b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071bc:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c6:	f7fb fbf3 	bl	80029b0 <HAL_GetTick>
 80071ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ce:	f7fb fbef 	bl	80029b0 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e0d5      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071e0:	4b14      	ldr	r3, [pc, #80]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80071e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1ef      	bne.n	80071ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80c9 	beq.w	800738a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071f8:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 030c 	and.w	r3, r3, #12
 8007200:	2b0c      	cmp	r3, #12
 8007202:	f000 8083 	beq.w	800730c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d15e      	bne.n	80072cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a08      	ldr	r2, [pc, #32]	; (8007234 <HAL_RCC_OscConfig+0x4b8>)
 8007214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721a:	f7fb fbc9 	bl	80029b0 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007220:	e00c      	b.n	800723c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007222:	f7fb fbc5 	bl	80029b0 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d905      	bls.n	800723c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e0ab      	b.n	800738c <HAL_RCC_OscConfig+0x610>
 8007234:	40021000 	.word	0x40021000
 8007238:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800723c:	4b55      	ldr	r3, [pc, #340]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1ec      	bne.n	8007222 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007248:	4b52      	ldr	r3, [pc, #328]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	4b52      	ldr	r3, [pc, #328]	; (8007398 <HAL_RCC_OscConfig+0x61c>)
 800724e:	4013      	ands	r3, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6a11      	ldr	r1, [r2, #32]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007258:	3a01      	subs	r2, #1
 800725a:	0112      	lsls	r2, r2, #4
 800725c:	4311      	orrs	r1, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007262:	0212      	lsls	r2, r2, #8
 8007264:	4311      	orrs	r1, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800726a:	0852      	lsrs	r2, r2, #1
 800726c:	3a01      	subs	r2, #1
 800726e:	0552      	lsls	r2, r2, #21
 8007270:	4311      	orrs	r1, r2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007276:	0852      	lsrs	r2, r2, #1
 8007278:	3a01      	subs	r2, #1
 800727a:	0652      	lsls	r2, r2, #25
 800727c:	4311      	orrs	r1, r2
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007282:	06d2      	lsls	r2, r2, #27
 8007284:	430a      	orrs	r2, r1
 8007286:	4943      	ldr	r1, [pc, #268]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 8007288:	4313      	orrs	r3, r2
 800728a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800728c:	4b41      	ldr	r3, [pc, #260]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a40      	ldr	r2, [pc, #256]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 8007292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007296:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007298:	4b3e      	ldr	r3, [pc, #248]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	4a3d      	ldr	r2, [pc, #244]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 800729e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fb fb84 	bl	80029b0 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ac:	f7fb fb80 	bl	80029b0 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e066      	b.n	800738c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072be:	4b35      	ldr	r3, [pc, #212]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0x530>
 80072ca:	e05e      	b.n	800738a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072cc:	4b31      	ldr	r3, [pc, #196]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a30      	ldr	r2, [pc, #192]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 80072d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fb fb6a 	bl	80029b0 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e0:	f7fb fb66 	bl	80029b0 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e04c      	b.n	800738c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072f2:	4b28      	ldr	r3, [pc, #160]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80072fe:	4b25      	ldr	r3, [pc, #148]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	4924      	ldr	r1, [pc, #144]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 8007304:	4b25      	ldr	r3, [pc, #148]	; (800739c <HAL_RCC_OscConfig+0x620>)
 8007306:	4013      	ands	r3, r2
 8007308:	60cb      	str	r3, [r1, #12]
 800730a:	e03e      	b.n	800738a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e039      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <HAL_RCC_OscConfig+0x618>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f003 0203 	and.w	r2, r3, #3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	429a      	cmp	r2, r3
 800732a:	d12c      	bne.n	8007386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	3b01      	subs	r3, #1
 8007338:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733a:	429a      	cmp	r2, r3
 800733c:	d123      	bne.n	8007386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800734a:	429a      	cmp	r2, r3
 800734c:	d11b      	bne.n	8007386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800735a:	429a      	cmp	r2, r3
 800735c:	d113      	bne.n	8007386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	3b01      	subs	r3, #1
 800736c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800736e:	429a      	cmp	r2, r3
 8007370:	d109      	bne.n	8007386 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	3b01      	subs	r3, #1
 8007380:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007382:	429a      	cmp	r2, r3
 8007384:	d001      	beq.n	800738a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40021000 	.word	0x40021000
 8007398:	019f800c 	.word	0x019f800c
 800739c:	feeefffc 	.word	0xfeeefffc

080073a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e11e      	b.n	80075f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073b8:	4b91      	ldr	r3, [pc, #580]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d910      	bls.n	80073e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073c6:	4b8e      	ldr	r3, [pc, #568]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f023 020f 	bic.w	r2, r3, #15
 80073ce:	498c      	ldr	r1, [pc, #560]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073d6:	4b8a      	ldr	r3, [pc, #552]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d001      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e106      	b.n	80075f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d073      	beq.n	80074dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d129      	bne.n	8007450 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073fc:	4b81      	ldr	r3, [pc, #516]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e0f4      	b.n	80075f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800740c:	f000 f99e 	bl	800774c <RCC_GetSysClockFreqFromPLLSource>
 8007410:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	4a7c      	ldr	r2, [pc, #496]	; (8007608 <HAL_RCC_ClockConfig+0x268>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d93f      	bls.n	800749a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800741a:	4b7a      	ldr	r3, [pc, #488]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800742e:	2b00      	cmp	r3, #0
 8007430:	d033      	beq.n	800749a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007436:	2b00      	cmp	r3, #0
 8007438:	d12f      	bne.n	800749a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800743a:	4b72      	ldr	r3, [pc, #456]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007442:	4a70      	ldr	r2, [pc, #448]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	e024      	b.n	800749a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d107      	bne.n	8007468 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007458:	4b6a      	ldr	r3, [pc, #424]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d109      	bne.n	8007478 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0c6      	b.n	80075f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007468:	4b66      	ldr	r3, [pc, #408]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e0be      	b.n	80075f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007478:	f000 f8ce 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 800747c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4a61      	ldr	r2, [pc, #388]	; (8007608 <HAL_RCC_ClockConfig+0x268>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d909      	bls.n	800749a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007486:	4b5f      	ldr	r3, [pc, #380]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800748e:	4a5d      	ldr	r2, [pc, #372]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 8007490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007494:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007496:	2380      	movs	r3, #128	; 0x80
 8007498:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800749a:	4b5a      	ldr	r3, [pc, #360]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f023 0203 	bic.w	r2, r3, #3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4957      	ldr	r1, [pc, #348]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ac:	f7fb fa80 	bl	80029b0 <HAL_GetTick>
 80074b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074b2:	e00a      	b.n	80074ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074b4:	f7fb fa7c 	bl	80029b0 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e095      	b.n	80075f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ca:	4b4e      	ldr	r3, [pc, #312]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 020c 	and.w	r2, r3, #12
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	429a      	cmp	r2, r3
 80074da:	d1eb      	bne.n	80074b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d023      	beq.n	8007530 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074f4:	4b43      	ldr	r3, [pc, #268]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a42      	ldr	r2, [pc, #264]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80074fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80074fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800750c:	4b3d      	ldr	r3, [pc, #244]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007514:	4a3b      	ldr	r2, [pc, #236]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 8007516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800751a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800751c:	4b39      	ldr	r3, [pc, #228]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4936      	ldr	r1, [pc, #216]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800752a:	4313      	orrs	r3, r2
 800752c:	608b      	str	r3, [r1, #8]
 800752e:	e008      	b.n	8007542 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d105      	bne.n	8007542 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007536:	4b33      	ldr	r3, [pc, #204]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	4a32      	ldr	r2, [pc, #200]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800753c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007540:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007542:	4b2f      	ldr	r3, [pc, #188]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d21d      	bcs.n	800758c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007550:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f023 020f 	bic.w	r2, r3, #15
 8007558:	4929      	ldr	r1, [pc, #164]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	4313      	orrs	r3, r2
 800755e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007560:	f7fb fa26 	bl	80029b0 <HAL_GetTick>
 8007564:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007566:	e00a      	b.n	800757e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007568:	f7fb fa22 	bl	80029b0 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	f241 3288 	movw	r2, #5000	; 0x1388
 8007576:	4293      	cmp	r3, r2
 8007578:	d901      	bls.n	800757e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e03b      	b.n	80075f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	4b20      	ldr	r3, [pc, #128]	; (8007600 <HAL_RCC_ClockConfig+0x260>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d1ed      	bne.n	8007568 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d008      	beq.n	80075aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007598:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4917      	ldr	r1, [pc, #92]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0308 	and.w	r3, r3, #8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	490f      	ldr	r1, [pc, #60]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075ca:	f000 f825 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 80075ce:	4602      	mov	r2, r0
 80075d0:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <HAL_RCC_ClockConfig+0x264>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	091b      	lsrs	r3, r3, #4
 80075d6:	f003 030f 	and.w	r3, r3, #15
 80075da:	490c      	ldr	r1, [pc, #48]	; (800760c <HAL_RCC_ClockConfig+0x26c>)
 80075dc:	5ccb      	ldrb	r3, [r1, r3]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	4a0a      	ldr	r2, [pc, #40]	; (8007610 <HAL_RCC_ClockConfig+0x270>)
 80075e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80075ea:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <HAL_RCC_ClockConfig+0x274>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb f992 	bl	8002918 <HAL_InitTick>
 80075f4:	4603      	mov	r3, r0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40022000 	.word	0x40022000
 8007604:	40021000 	.word	0x40021000
 8007608:	04c4b400 	.word	0x04c4b400
 800760c:	08013b4c 	.word	0x08013b4c
 8007610:	20000000 	.word	0x20000000
 8007614:	20000004 	.word	0x20000004

08007618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800761e:	4b2c      	ldr	r3, [pc, #176]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 030c 	and.w	r3, r3, #12
 8007626:	2b04      	cmp	r3, #4
 8007628:	d102      	bne.n	8007630 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800762a:	4b2a      	ldr	r3, [pc, #168]	; (80076d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	e047      	b.n	80076c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007630:	4b27      	ldr	r3, [pc, #156]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 030c 	and.w	r3, r3, #12
 8007638:	2b08      	cmp	r3, #8
 800763a:	d102      	bne.n	8007642 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800763c:	4b26      	ldr	r3, [pc, #152]	; (80076d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	e03e      	b.n	80076c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007642:	4b23      	ldr	r3, [pc, #140]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 030c 	and.w	r3, r3, #12
 800764a:	2b0c      	cmp	r3, #12
 800764c:	d136      	bne.n	80076bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800764e:	4b20      	ldr	r3, [pc, #128]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007658:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	3301      	adds	r3, #1
 8007664:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d10c      	bne.n	8007686 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800766c:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	fbb2 f3f3 	udiv	r3, r2, r3
 8007674:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007676:	68d2      	ldr	r2, [r2, #12]
 8007678:	0a12      	lsrs	r2, r2, #8
 800767a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800767e:	fb02 f303 	mul.w	r3, r2, r3
 8007682:	617b      	str	r3, [r7, #20]
      break;
 8007684:	e00c      	b.n	80076a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007686:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	fbb2 f3f3 	udiv	r3, r2, r3
 800768e:	4a10      	ldr	r2, [pc, #64]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007690:	68d2      	ldr	r2, [r2, #12]
 8007692:	0a12      	lsrs	r2, r2, #8
 8007694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]
      break;
 800769e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	0e5b      	lsrs	r3, r3, #25
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	3301      	adds	r3, #1
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	e001      	b.n	80076c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80076c0:	693b      	ldr	r3, [r7, #16]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	40021000 	.word	0x40021000
 80076d4:	00f42400 	.word	0x00f42400
 80076d8:	007a1200 	.word	0x007a1200

080076dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076e0:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80076e2:	681b      	ldr	r3, [r3, #0]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000000 	.word	0x20000000

080076f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80076f8:	f7ff fff0 	bl	80076dc <HAL_RCC_GetHCLKFreq>
 80076fc:	4602      	mov	r2, r0
 80076fe:	4b06      	ldr	r3, [pc, #24]	; (8007718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	4904      	ldr	r1, [pc, #16]	; (800771c <HAL_RCC_GetPCLK1Freq+0x28>)
 800770a:	5ccb      	ldrb	r3, [r1, r3]
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40021000 	.word	0x40021000
 800771c:	08013b5c 	.word	0x08013b5c

08007720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007724:	f7ff ffda 	bl	80076dc <HAL_RCC_GetHCLKFreq>
 8007728:	4602      	mov	r2, r0
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	0adb      	lsrs	r3, r3, #11
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	4904      	ldr	r1, [pc, #16]	; (8007748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007736:	5ccb      	ldrb	r3, [r1, r3]
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007740:	4618      	mov	r0, r3
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40021000 	.word	0x40021000
 8007748:	08013b5c 	.word	0x08013b5c

0800774c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007752:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800775c:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	091b      	lsrs	r3, r3, #4
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b03      	cmp	r3, #3
 800776e:	d10c      	bne.n	800778a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007770:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	fbb2 f3f3 	udiv	r3, r2, r3
 8007778:	4a14      	ldr	r2, [pc, #80]	; (80077cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800777a:	68d2      	ldr	r2, [r2, #12]
 800777c:	0a12      	lsrs	r2, r2, #8
 800777e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007782:	fb02 f303 	mul.w	r3, r2, r3
 8007786:	617b      	str	r3, [r7, #20]
    break;
 8007788:	e00c      	b.n	80077a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800778a:	4a12      	ldr	r2, [pc, #72]	; (80077d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007792:	4a0e      	ldr	r2, [pc, #56]	; (80077cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007794:	68d2      	ldr	r2, [r2, #12]
 8007796:	0a12      	lsrs	r2, r2, #8
 8007798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800779c:	fb02 f303 	mul.w	r3, r2, r3
 80077a0:	617b      	str	r3, [r7, #20]
    break;
 80077a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077a4:	4b09      	ldr	r3, [pc, #36]	; (80077cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	0e5b      	lsrs	r3, r3, #25
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	3301      	adds	r3, #1
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80077be:	687b      	ldr	r3, [r7, #4]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	40021000 	.word	0x40021000
 80077d0:	007a1200 	.word	0x007a1200
 80077d4:	00f42400 	.word	0x00f42400

080077d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077e0:	2300      	movs	r3, #0
 80077e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077e4:	2300      	movs	r3, #0
 80077e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8098 	beq.w	8007926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077f6:	2300      	movs	r3, #0
 80077f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077fa:	4b43      	ldr	r3, [pc, #268]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10d      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007806:	4b40      	ldr	r3, [pc, #256]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	4a3f      	ldr	r2, [pc, #252]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007810:	6593      	str	r3, [r2, #88]	; 0x58
 8007812:	4b3d      	ldr	r3, [pc, #244]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800781e:	2301      	movs	r3, #1
 8007820:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007822:	4b3a      	ldr	r3, [pc, #232]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a39      	ldr	r2, [pc, #228]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800782e:	f7fb f8bf 	bl	80029b0 <HAL_GetTick>
 8007832:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007834:	e009      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007836:	f7fb f8bb 	bl	80029b0 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d902      	bls.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	74fb      	strb	r3, [r7, #19]
        break;
 8007848:	e005      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800784a:	4b30      	ldr	r3, [pc, #192]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0ef      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007856:	7cfb      	ldrb	r3, [r7, #19]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d159      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800785c:	4b2a      	ldr	r3, [pc, #168]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800785e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007866:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01e      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	429a      	cmp	r2, r3
 8007876:	d019      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007878:	4b23      	ldr	r3, [pc, #140]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007884:	4b20      	ldr	r3, [pc, #128]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788a:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800788c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007894:	4b1c      	ldr	r3, [pc, #112]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789a:	4a1b      	ldr	r2, [pc, #108]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800789c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078a4:	4a18      	ldr	r2, [pc, #96]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d016      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b6:	f7fb f87b 	bl	80029b0 <HAL_GetTick>
 80078ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078bc:	e00b      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078be:	f7fb f877 	bl	80029b0 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d902      	bls.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	74fb      	strb	r3, [r7, #19]
            break;
 80078d4:	e006      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0ec      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80078e4:	7cfb      	ldrb	r3, [r7, #19]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	4903      	ldr	r1, [pc, #12]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007900:	e008      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007902:	7cfb      	ldrb	r3, [r7, #19]
 8007904:	74bb      	strb	r3, [r7, #18]
 8007906:	e005      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007908:	40021000 	.word	0x40021000
 800790c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	7cfb      	ldrb	r3, [r7, #19]
 8007912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007914:	7c7b      	ldrb	r3, [r7, #17]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d105      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800791a:	4ba6      	ldr	r3, [pc, #664]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	4aa5      	ldr	r2, [pc, #660]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007932:	4ba0      	ldr	r3, [pc, #640]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	f023 0203 	bic.w	r2, r3, #3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	499c      	ldr	r1, [pc, #624]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007954:	4b97      	ldr	r3, [pc, #604]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	f023 020c 	bic.w	r2, r3, #12
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	4994      	ldr	r1, [pc, #592]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007976:	4b8f      	ldr	r3, [pc, #572]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	498b      	ldr	r1, [pc, #556]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007998:	4b86      	ldr	r3, [pc, #536]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800799a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	4983      	ldr	r1, [pc, #524]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079ba:	4b7e      	ldr	r3, [pc, #504]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	497a      	ldr	r1, [pc, #488]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079dc:	4b75      	ldr	r3, [pc, #468]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	4972      	ldr	r1, [pc, #456]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079fe:	4b6d      	ldr	r3, [pc, #436]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	4969      	ldr	r1, [pc, #420]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a20:	4b64      	ldr	r3, [pc, #400]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	4961      	ldr	r1, [pc, #388]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a42:	4b5c      	ldr	r3, [pc, #368]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	4958      	ldr	r1, [pc, #352]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d015      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a64:	4b53      	ldr	r3, [pc, #332]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	4950      	ldr	r1, [pc, #320]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a82:	d105      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a84:	4b4b      	ldr	r3, [pc, #300]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a4a      	ldr	r2, [pc, #296]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d015      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a9c:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	4942      	ldr	r1, [pc, #264]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aba:	d105      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007abc:	4b3d      	ldr	r3, [pc, #244]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	4a3c      	ldr	r2, [pc, #240]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ac6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d015      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ad4:	4b37      	ldr	r3, [pc, #220]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ada:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	4934      	ldr	r1, [pc, #208]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007af2:	d105      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007af4:	4b2f      	ldr	r3, [pc, #188]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	4a2e      	ldr	r2, [pc, #184]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007afe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d015      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b0c:	4b29      	ldr	r3, [pc, #164]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1a:	4926      	ldr	r1, [pc, #152]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b2a:	d105      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b2c:	4b21      	ldr	r3, [pc, #132]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	4a20      	ldr	r2, [pc, #128]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d015      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b44:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	4918      	ldr	r1, [pc, #96]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b62:	d105      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b64:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	4a12      	ldr	r2, [pc, #72]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d015      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	490a      	ldr	r1, [pc, #40]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b9a:	d105      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4a04      	ldr	r2, [pc, #16]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ba6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ba8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40021000 	.word	0x40021000

08007bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e09d      	b.n	8007d06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d108      	bne.n	8007be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bda:	d009      	beq.n	8007bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	61da      	str	r2, [r3, #28]
 8007be2:	e005      	b.n	8007bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa f994 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c30:	d902      	bls.n	8007c38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	e002      	b.n	8007c3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c46:	d007      	beq.n	8007c58 <HAL_SPI_Init+0xa0>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c50:	d002      	beq.n	8007c58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	ea42 0103 	orr.w	r1, r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	f003 0204 	and.w	r2, r3, #4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007cd4:	ea42 0103 	orr.w	r1, r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10e      	bne.n	8007d50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d009      	beq.n	8007d50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d004      	beq.n	8007d50 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
    return;
 8007d4e:	e0ce      	b.n	8007eee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <HAL_SPI_IRQHandler+0x5e>
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
    return;
 8007d6c:	e0bf      	b.n	8007eee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <HAL_SPI_IRQHandler+0x7e>
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80b0 	beq.w	8007eee <HAL_SPI_IRQHandler+0x1de>
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80aa 	beq.w	8007eee <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d023      	beq.n	8007dec <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d011      	beq.n	8007dd4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db4:	f043 0204 	orr.w	r2, r3, #4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	e00b      	b.n	8007dec <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	693b      	ldr	r3, [r7, #16]
        return;
 8007dea:	e080      	b.n	8007eee <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d014      	beq.n	8007e20 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	f043 0201 	orr.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00c      	beq.n	8007e44 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2e:	f043 0208 	orr.w	r2, r3, #8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d04f      	beq.n	8007eec <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d104      	bne.n	8007e78 <HAL_SPI_IRQHandler+0x168>
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d034      	beq.n	8007ee2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0203 	bic.w	r2, r2, #3
 8007e86:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d011      	beq.n	8007eb4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e94:	4a17      	ldr	r2, [pc, #92]	; (8007ef4 <HAL_SPI_IRQHandler+0x1e4>)
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fc fcf7 	bl	8004890 <HAL_DMA_Abort_IT>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <HAL_SPI_IRQHandler+0x1e4>)
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fc fce1 	bl	8004890 <HAL_DMA_Abort_IT>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ee0:	e003      	b.n	8007eea <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f808 	bl	8007ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ee8:	e000      	b.n	8007eec <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007eea:	bf00      	nop
    return;
 8007eec:	bf00      	nop
  }
}
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	08007f0d 	.word	0x08007f0d

08007ef8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7ff ffe5 	bl	8007ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e049      	b.n	8007fdc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7fa fa19 	bl	8002394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3304      	adds	r3, #4
 8007f72:	4619      	mov	r1, r3
 8007f74:	4610      	mov	r0, r2
 8007f76:	f000 fa0b 	bl	8008390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e049      	b.n	800808a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f841 	bl	8008092 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3304      	adds	r3, #4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f000 f9b4 	bl	8008390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e066      	b.n	8008194 <HAL_TIM_OC_ConfigChannel+0xec>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b14      	cmp	r3, #20
 80080d2:	d857      	bhi.n	8008184 <HAL_TIM_OC_ConfigChannel+0xdc>
 80080d4:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	08008131 	.word	0x08008131
 80080e0:	08008185 	.word	0x08008185
 80080e4:	08008185 	.word	0x08008185
 80080e8:	08008185 	.word	0x08008185
 80080ec:	0800813f 	.word	0x0800813f
 80080f0:	08008185 	.word	0x08008185
 80080f4:	08008185 	.word	0x08008185
 80080f8:	08008185 	.word	0x08008185
 80080fc:	0800814d 	.word	0x0800814d
 8008100:	08008185 	.word	0x08008185
 8008104:	08008185 	.word	0x08008185
 8008108:	08008185 	.word	0x08008185
 800810c:	0800815b 	.word	0x0800815b
 8008110:	08008185 	.word	0x08008185
 8008114:	08008185 	.word	0x08008185
 8008118:	08008185 	.word	0x08008185
 800811c:	08008169 	.word	0x08008169
 8008120:	08008185 	.word	0x08008185
 8008124:	08008185 	.word	0x08008185
 8008128:	08008185 	.word	0x08008185
 800812c:	08008177 	.word	0x08008177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f9c6 	bl	80084c8 <TIM_OC1_SetConfig>
      break;
 800813c:	e025      	b.n	800818a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fa4f 	bl	80085e8 <TIM_OC2_SetConfig>
      break;
 800814a:	e01e      	b.n	800818a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fad2 	bl	80086fc <TIM_OC3_SetConfig>
      break;
 8008158:	e017      	b.n	800818a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68b9      	ldr	r1, [r7, #8]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fb53 	bl	800880c <TIM_OC4_SetConfig>
      break;
 8008166:	e010      	b.n	800818a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fbd6 	bl	8008920 <TIM_OC5_SetConfig>
      break;
 8008174:	e009      	b.n	800818a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fc33 	bl	80089e8 <TIM_OC6_SetConfig>
      break;
 8008182:	e002      	b.n	800818a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	75fb      	strb	r3, [r7, #23]
      break;
 8008188:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_ConfigClockSource+0x1c>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e0de      	b.n	8008376 <HAL_TIM_ConfigClockSource+0x1da>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80081d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a63      	ldr	r2, [pc, #396]	; (8008380 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	f000 80a9 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 80081f8:	4a61      	ldr	r2, [pc, #388]	; (8008380 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	f200 80ae 	bhi.w	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008200:	4a60      	ldr	r2, [pc, #384]	; (8008384 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	f000 80a1 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008208:	4a5e      	ldr	r2, [pc, #376]	; (8008384 <HAL_TIM_ConfigClockSource+0x1e8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	f200 80a6 	bhi.w	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008210:	4a5d      	ldr	r2, [pc, #372]	; (8008388 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008212:	4293      	cmp	r3, r2
 8008214:	f000 8099 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008218:	4a5b      	ldr	r2, [pc, #364]	; (8008388 <HAL_TIM_ConfigClockSource+0x1ec>)
 800821a:	4293      	cmp	r3, r2
 800821c:	f200 809e 	bhi.w	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008220:	4a5a      	ldr	r2, [pc, #360]	; (800838c <HAL_TIM_ConfigClockSource+0x1f0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	f000 8091 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008228:	4a58      	ldr	r2, [pc, #352]	; (800838c <HAL_TIM_ConfigClockSource+0x1f0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	f200 8096 	bhi.w	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008230:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008234:	f000 8089 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008238:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800823c:	f200 808e 	bhi.w	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008244:	d03e      	beq.n	80082c4 <HAL_TIM_ConfigClockSource+0x128>
 8008246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800824a:	f200 8087 	bhi.w	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008252:	f000 8086 	beq.w	8008362 <HAL_TIM_ConfigClockSource+0x1c6>
 8008256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800825a:	d87f      	bhi.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 800825c:	2b70      	cmp	r3, #112	; 0x70
 800825e:	d01a      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0xfa>
 8008260:	2b70      	cmp	r3, #112	; 0x70
 8008262:	d87b      	bhi.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008264:	2b60      	cmp	r3, #96	; 0x60
 8008266:	d050      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x16e>
 8008268:	2b60      	cmp	r3, #96	; 0x60
 800826a:	d877      	bhi.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 800826c:	2b50      	cmp	r3, #80	; 0x50
 800826e:	d03c      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x14e>
 8008270:	2b50      	cmp	r3, #80	; 0x50
 8008272:	d873      	bhi.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d058      	beq.n	800832a <HAL_TIM_ConfigClockSource+0x18e>
 8008278:	2b40      	cmp	r3, #64	; 0x40
 800827a:	d86f      	bhi.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 800827c:	2b30      	cmp	r3, #48	; 0x30
 800827e:	d064      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008280:	2b30      	cmp	r3, #48	; 0x30
 8008282:	d86b      	bhi.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 8008284:	2b20      	cmp	r3, #32
 8008286:	d060      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008288:	2b20      	cmp	r3, #32
 800828a:	d867      	bhi.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d05c      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008290:	2b10      	cmp	r3, #16
 8008292:	d05a      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x1ae>
 8008294:	e062      	b.n	800835c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082a6:	f000 fc81 	bl	8008bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	609a      	str	r2, [r3, #8]
      break;
 80082c2:	e04f      	b.n	8008364 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082d4:	f000 fc6a 	bl	8008bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082e6:	609a      	str	r2, [r3, #8]
      break;
 80082e8:	e03c      	b.n	8008364 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082f6:	461a      	mov	r2, r3
 80082f8:	f000 fbdc 	bl	8008ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2150      	movs	r1, #80	; 0x50
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fc35 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 8008308:	e02c      	b.n	8008364 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008316:	461a      	mov	r2, r3
 8008318:	f000 fbfb 	bl	8008b12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2160      	movs	r1, #96	; 0x60
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fc25 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 8008328:	e01c      	b.n	8008364 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008336:	461a      	mov	r2, r3
 8008338:	f000 fbbc 	bl	8008ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2140      	movs	r1, #64	; 0x40
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fc15 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 8008348:	e00c      	b.n	8008364 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f000 fc0c 	bl	8008b72 <TIM_ITRx_SetConfig>
      break;
 800835a:	e003      	b.n	8008364 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
      break;
 8008360:	e000      	b.n	8008364 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	00100070 	.word	0x00100070
 8008384:	00100040 	.word	0x00100040
 8008388:	00100030 	.word	0x00100030
 800838c:	00100020 	.word	0x00100020

08008390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a42      	ldr	r2, [pc, #264]	; (80084ac <TIM_Base_SetConfig+0x11c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a3f      	ldr	r2, [pc, #252]	; (80084b0 <TIM_Base_SetConfig+0x120>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a3e      	ldr	r2, [pc, #248]	; (80084b4 <TIM_Base_SetConfig+0x124>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x38>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a3d      	ldr	r2, [pc, #244]	; (80084b8 <TIM_Base_SetConfig+0x128>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a33      	ldr	r2, [pc, #204]	; (80084ac <TIM_Base_SetConfig+0x11c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01b      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e8:	d017      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a30      	ldr	r2, [pc, #192]	; (80084b0 <TIM_Base_SetConfig+0x120>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2f      	ldr	r2, [pc, #188]	; (80084b4 <TIM_Base_SetConfig+0x124>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <TIM_Base_SetConfig+0x128>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2d      	ldr	r2, [pc, #180]	; (80084bc <TIM_Base_SetConfig+0x12c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2c      	ldr	r2, [pc, #176]	; (80084c0 <TIM_Base_SetConfig+0x130>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_Base_SetConfig+0x8a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2b      	ldr	r2, [pc, #172]	; (80084c4 <TIM_Base_SetConfig+0x134>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d108      	bne.n	800842c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a16      	ldr	r2, [pc, #88]	; (80084ac <TIM_Base_SetConfig+0x11c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <TIM_Base_SetConfig+0x128>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <TIM_Base_SetConfig+0x12c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <TIM_Base_SetConfig+0x130>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0xe8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a14      	ldr	r2, [pc, #80]	; (80084c4 <TIM_Base_SetConfig+0x134>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d103      	bne.n	8008480 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b01      	cmp	r3, #1
 8008490:	d105      	bne.n	800849e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	f023 0201 	bic.w	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	611a      	str	r2, [r3, #16]
  }
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40012c00 	.word	0x40012c00
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40013400 	.word	0x40013400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800

080084c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	f023 0201 	bic.w	r2, r3, #1
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 0302 	bic.w	r3, r3, #2
 8008514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a2c      	ldr	r2, [pc, #176]	; (80085d4 <TIM_OC1_SetConfig+0x10c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00f      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a2b      	ldr	r2, [pc, #172]	; (80085d8 <TIM_OC1_SetConfig+0x110>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00b      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a2a      	ldr	r2, [pc, #168]	; (80085dc <TIM_OC1_SetConfig+0x114>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d007      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a29      	ldr	r2, [pc, #164]	; (80085e0 <TIM_OC1_SetConfig+0x118>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d003      	beq.n	8008548 <TIM_OC1_SetConfig+0x80>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a28      	ldr	r2, [pc, #160]	; (80085e4 <TIM_OC1_SetConfig+0x11c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10c      	bne.n	8008562 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 0308 	bic.w	r3, r3, #8
 800854e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0304 	bic.w	r3, r3, #4
 8008560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1b      	ldr	r2, [pc, #108]	; (80085d4 <TIM_OC1_SetConfig+0x10c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00f      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1a      	ldr	r2, [pc, #104]	; (80085d8 <TIM_OC1_SetConfig+0x110>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00b      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a19      	ldr	r2, [pc, #100]	; (80085dc <TIM_OC1_SetConfig+0x114>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d007      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a18      	ldr	r2, [pc, #96]	; (80085e0 <TIM_OC1_SetConfig+0x118>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d003      	beq.n	800858a <TIM_OC1_SetConfig+0xc2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <TIM_OC1_SetConfig+0x11c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d111      	bne.n	80085ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	621a      	str	r2, [r3, #32]
}
 80085c8:	bf00      	nop
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40014400 	.word	0x40014400
 80085e4:	40014800 	.word	0x40014800

080085e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	f023 0210 	bic.w	r2, r3, #16
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	4313      	orrs	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f023 0320 	bic.w	r3, r3, #32
 8008636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a28      	ldr	r2, [pc, #160]	; (80086e8 <TIM_OC2_SetConfig+0x100>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_OC2_SetConfig+0x6c>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a27      	ldr	r2, [pc, #156]	; (80086ec <TIM_OC2_SetConfig+0x104>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d10d      	bne.n	8008670 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800865a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	011b      	lsls	r3, r3, #4
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800866e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a1d      	ldr	r2, [pc, #116]	; (80086e8 <TIM_OC2_SetConfig+0x100>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00f      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1c      	ldr	r2, [pc, #112]	; (80086ec <TIM_OC2_SetConfig+0x104>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00b      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1b      	ldr	r2, [pc, #108]	; (80086f0 <TIM_OC2_SetConfig+0x108>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <TIM_OC2_SetConfig+0x10c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_OC2_SetConfig+0xb0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a19      	ldr	r2, [pc, #100]	; (80086f8 <TIM_OC2_SetConfig+0x110>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d113      	bne.n	80086c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800869e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	621a      	str	r2, [r3, #32]
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	40012c00 	.word	0x40012c00
 80086ec:	40013400 	.word	0x40013400
 80086f0:	40014000 	.word	0x40014000
 80086f4:	40014400 	.word	0x40014400
 80086f8:	40014800 	.word	0x40014800

080086fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a27      	ldr	r2, [pc, #156]	; (80087f8 <TIM_OC3_SetConfig+0xfc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d003      	beq.n	8008766 <TIM_OC3_SetConfig+0x6a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a26      	ldr	r2, [pc, #152]	; (80087fc <TIM_OC3_SetConfig+0x100>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d10d      	bne.n	8008782 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800876c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1c      	ldr	r2, [pc, #112]	; (80087f8 <TIM_OC3_SetConfig+0xfc>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00f      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <TIM_OC3_SetConfig+0x100>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00b      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a1a      	ldr	r2, [pc, #104]	; (8008800 <TIM_OC3_SetConfig+0x104>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a19      	ldr	r2, [pc, #100]	; (8008804 <TIM_OC3_SetConfig+0x108>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_OC3_SetConfig+0xae>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a18      	ldr	r2, [pc, #96]	; (8008808 <TIM_OC3_SetConfig+0x10c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d113      	bne.n	80087d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	621a      	str	r2, [r3, #32]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40013400 	.word	0x40013400
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800

0800880c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800885a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	031b      	lsls	r3, r3, #12
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a28      	ldr	r2, [pc, #160]	; (800890c <TIM_OC4_SetConfig+0x100>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_OC4_SetConfig+0x6c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a27      	ldr	r2, [pc, #156]	; (8008910 <TIM_OC4_SetConfig+0x104>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d10d      	bne.n	8008894 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800887e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	031b      	lsls	r3, r3, #12
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a1d      	ldr	r2, [pc, #116]	; (800890c <TIM_OC4_SetConfig+0x100>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00f      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a1c      	ldr	r2, [pc, #112]	; (8008910 <TIM_OC4_SetConfig+0x104>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00b      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a1b      	ldr	r2, [pc, #108]	; (8008914 <TIM_OC4_SetConfig+0x108>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d007      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a1a      	ldr	r2, [pc, #104]	; (8008918 <TIM_OC4_SetConfig+0x10c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC4_SetConfig+0xb0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a19      	ldr	r2, [pc, #100]	; (800891c <TIM_OC4_SetConfig+0x110>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d113      	bne.n	80088e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	019b      	lsls	r3, r3, #6
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	019b      	lsls	r3, r3, #6
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40012c00 	.word	0x40012c00
 8008910:	40013400 	.word	0x40013400
 8008914:	40014000 	.word	0x40014000
 8008918:	40014400 	.word	0x40014400
 800891c:	40014800 	.word	0x40014800

08008920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	041b      	lsls	r3, r3, #16
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <TIM_OC5_SetConfig+0xb4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00f      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <TIM_OC5_SetConfig+0xb8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00b      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a15      	ldr	r2, [pc, #84]	; (80089dc <TIM_OC5_SetConfig+0xbc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d007      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a14      	ldr	r2, [pc, #80]	; (80089e0 <TIM_OC5_SetConfig+0xc0>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d003      	beq.n	800899a <TIM_OC5_SetConfig+0x7a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a13      	ldr	r2, [pc, #76]	; (80089e4 <TIM_OC5_SetConfig+0xc4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d109      	bne.n	80089ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	621a      	str	r2, [r3, #32]
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40013400 	.word	0x40013400
 80089dc:	40014000 	.word	0x40014000
 80089e0:	40014400 	.word	0x40014400
 80089e4:	40014800 	.word	0x40014800

080089e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	051b      	lsls	r3, r3, #20
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <TIM_OC6_SetConfig+0xb8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00f      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <TIM_OC6_SetConfig+0xbc>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00b      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <TIM_OC6_SetConfig+0xc0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d007      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a15      	ldr	r2, [pc, #84]	; (8008aac <TIM_OC6_SetConfig+0xc4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d003      	beq.n	8008a64 <TIM_OC6_SetConfig+0x7c>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a14      	ldr	r2, [pc, #80]	; (8008ab0 <TIM_OC6_SetConfig+0xc8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d109      	bne.n	8008a78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	029b      	lsls	r3, r3, #10
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	621a      	str	r2, [r3, #32]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	40012c00 	.word	0x40012c00
 8008aa4:	40013400 	.word	0x40013400
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	40014400 	.word	0x40014400
 8008ab0:	40014800 	.word	0x40014800

08008ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f023 0201 	bic.w	r2, r3, #1
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f023 030a 	bic.w	r3, r3, #10
 8008af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b087      	sub	sp, #28
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	f023 0210 	bic.w	r2, r3, #16
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	031b      	lsls	r3, r3, #12
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	621a      	str	r2, [r3, #32]
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f043 0307 	orr.w	r3, r3, #7
 8008b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	609a      	str	r2, [r3, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	021a      	lsls	r2, r3, #8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	609a      	str	r2, [r3, #8]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e065      	b.n	8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a2c      	ldr	r2, [pc, #176]	; (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d004      	beq.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a2b      	ldr	r2, [pc, #172]	; (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1b      	ldr	r2, [pc, #108]	; (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7a:	d013      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a12      	ldr	r2, [pc, #72]	; (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a13      	ldr	r2, [pc, #76]	; (8008cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d10c      	bne.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	40012c00 	.word	0x40012c00
 8008ce0:	40013400 	.word	0x40013400
 8008ce4:	40000400 	.word	0x40000400
 8008ce8:	40000800 	.word	0x40000800
 8008cec:	40014000 	.word	0x40014000

08008cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e042      	b.n	8008d88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d106      	bne.n	8008d1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7f9 fc2b 	bl	8002570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2224      	movs	r2, #36	; 0x24
 8008d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 ff9c 	bl	8009c78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fccd 	bl	80096e0 <UART_SetConfig>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e01b      	b.n	8008d88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f042 0201 	orr.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f001 f81b 	bl	8009dbc <UART_CheckIdleState>
 8008d86:	4603      	mov	r3, r0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	; 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d137      	bne.n	8008e18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_UART_Receive_DMA+0x24>
 8008dae:	88fb      	ldrh	r3, [r7, #6]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e030      	b.n	8008e1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a18      	ldr	r2, [pc, #96]	; (8008e24 <HAL_UART_Receive_DMA+0x94>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d01f      	beq.n	8008e08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d018      	beq.n	8008e08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	613b      	str	r3, [r7, #16]
   return(result);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	623b      	str	r3, [r7, #32]
 8008df6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	69f9      	ldr	r1, [r7, #28]
 8008dfa:	6a3a      	ldr	r2, [r7, #32]
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e6      	bne.n	8008dd6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e08:	88fb      	ldrh	r3, [r7, #6]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f001 f8ec 	bl	8009fec <UART_Start_Receive_DMA>
 8008e14:	4603      	mov	r3, r0
 8008e16:	e000      	b.n	8008e1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e18:	2302      	movs	r3, #2
  }
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3728      	adds	r7, #40	; 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	40008000 	.word	0x40008000

08008e28 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b0a0      	sub	sp, #128	; 0x80
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e40:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8008e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e50:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e6      	bne.n	8008e30 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e74:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8008e78:	f023 0301 	bic.w	r3, r3, #1
 8008e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e86:	657a      	str	r2, [r7, #84]	; 0x54
 8008e88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e3      	bne.n	8008e62 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d118      	bne.n	8008ed4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	f023 0310 	bic.w	r3, r3, #16
 8008eb6:	677b      	str	r3, [r7, #116]	; 0x74
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ec2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e6      	bne.n	8008ea2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ede:	2b80      	cmp	r3, #128	; 0x80
 8008ee0:	d137      	bne.n	8008f52 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ef8:	673b      	str	r3, [r7, #112]	; 0x70
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3308      	adds	r3, #8
 8008f00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e5      	bne.n	8008ee2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d019      	beq.n	8008f52 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f22:	2200      	movs	r2, #0
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fb fc57 	bl	80047de <HAL_DMA_Abort>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00d      	beq.n	8008f52 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fb fdbe 	bl	8004abc <HAL_DMA_GetError>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d105      	bne.n	8008f52 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2210      	movs	r2, #16
 8008f4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e073      	b.n	800903a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5c:	2b40      	cmp	r3, #64	; 0x40
 8008f5e:	d13b      	bne.n	8008fd8 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3308      	adds	r3, #8
 8008f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f80:	61ba      	str	r2, [r7, #24]
 8008f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f84:	6979      	ldr	r1, [r7, #20]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	e841 2300 	strex	r3, r2, [r1]
 8008f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e5      	bne.n	8008f60 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d01c      	beq.n	8008fd8 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fb fc15 	bl	80047de <HAL_DMA_Abort>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00e      	beq.n	8008fd8 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fb fd7b 	bl	8004abc <HAL_DMA_GetError>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d105      	bne.n	8008fd8 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2210      	movs	r2, #16
 8008fd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e030      	b.n	800903a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	220f      	movs	r2, #15
 8008fee:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d107      	bne.n	800900a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	699a      	ldr	r2, [r3, #24]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f042 0210 	orr.w	r2, r2, #16
 8009008:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	699a      	ldr	r2, [r3, #24]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0208 	orr.w	r2, r2, #8
 8009018:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3780      	adds	r7, #128	; 0x80
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b0ba      	sub	sp, #232	; 0xe8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800906a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800906e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009072:	4013      	ands	r3, r2
 8009074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d11b      	bne.n	80090b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009084:	f003 0320 	and.w	r3, r3, #32
 8009088:	2b00      	cmp	r3, #0
 800908a:	d015      	beq.n	80090b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800908c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800909c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 82e3 	beq.w	8009674 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
      }
      return;
 80090b6:	e2dd      	b.n	8009674 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8123 	beq.w	8009308 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80090c6:	4b8d      	ldr	r3, [pc, #564]	; (80092fc <HAL_UART_IRQHandler+0x2b8>)
 80090c8:	4013      	ands	r3, r2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d106      	bne.n	80090dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80090d2:	4b8b      	ldr	r3, [pc, #556]	; (8009300 <HAL_UART_IRQHandler+0x2bc>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 8116 	beq.w	8009308 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d011      	beq.n	800910c <HAL_UART_IRQHandler+0xc8>
 80090e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00b      	beq.n	800910c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2201      	movs	r2, #1
 80090fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009102:	f043 0201 	orr.w	r2, r3, #1
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800910c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d011      	beq.n	800913c <HAL_UART_IRQHandler+0xf8>
 8009118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2202      	movs	r2, #2
 800912a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009132:	f043 0204 	orr.w	r2, r3, #4
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800913c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d011      	beq.n	800916c <HAL_UART_IRQHandler+0x128>
 8009148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2204      	movs	r2, #4
 800915a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009162:	f043 0202 	orr.w	r2, r3, #2
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800916c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b00      	cmp	r3, #0
 8009176:	d017      	beq.n	80091a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b00      	cmp	r3, #0
 8009182:	d105      	bne.n	8009190 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009184:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009188:	4b5c      	ldr	r3, [pc, #368]	; (80092fc <HAL_UART_IRQHandler+0x2b8>)
 800918a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00b      	beq.n	80091a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2208      	movs	r2, #8
 8009196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919e:	f043 0208 	orr.w	r2, r3, #8
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d012      	beq.n	80091da <HAL_UART_IRQHandler+0x196>
 80091b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d0:	f043 0220 	orr.w	r2, r3, #32
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 8249 	beq.w	8009678 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d013      	beq.n	800921a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d105      	bne.n	800920a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922e:	2b40      	cmp	r3, #64	; 0x40
 8009230:	d005      	beq.n	800923e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009236:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800923a:	2b00      	cmp	r3, #0
 800923c:	d054      	beq.n	80092e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 ffbb 	bl	800a1ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924e:	2b40      	cmp	r3, #64	; 0x40
 8009250:	d146      	bne.n	80092e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800926c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3308      	adds	r3, #8
 800927a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800927e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800928a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1d9      	bne.n	8009252 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d017      	beq.n	80092d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ae:	4a15      	ldr	r2, [pc, #84]	; (8009304 <HAL_UART_IRQHandler+0x2c0>)
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fb fae9 	bl	8004890 <HAL_DMA_Abort_IT>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d019      	beq.n	80092f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80092d2:	4610      	mov	r0, r2
 80092d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d6:	e00f      	b.n	80092f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9eb 	bl	80096b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092de:	e00b      	b.n	80092f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f9e7 	bl	80096b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e6:	e007      	b.n	80092f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f9e3 	bl	80096b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80092f6:	e1bf      	b.n	8009678 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f8:	bf00      	nop
    return;
 80092fa:	e1bd      	b.n	8009678 <HAL_UART_IRQHandler+0x634>
 80092fc:	10000001 	.word	0x10000001
 8009300:	04000120 	.word	0x04000120
 8009304:	0800a471 	.word	0x0800a471

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930c:	2b01      	cmp	r3, #1
 800930e:	f040 8153 	bne.w	80095b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009316:	f003 0310 	and.w	r3, r3, #16
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 814c 	beq.w	80095b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 8145 	beq.w	80095b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2210      	movs	r2, #16
 8009334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009340:	2b40      	cmp	r3, #64	; 0x40
 8009342:	f040 80bb 	bne.w	80094bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 818f 	beq.w	800967c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009368:	429a      	cmp	r2, r3
 800936a:	f080 8187 	bcs.w	800967c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009374:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	f040 8087 	bne.w	800949a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80093c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80093ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1da      	bne.n	800938c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093e8:	f023 0301 	bic.w	r3, r3, #1
 80093ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3308      	adds	r3, #8
 80093f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800940c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e1      	bne.n	80093d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3308      	adds	r3, #8
 8009418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800943c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e3      	bne.n	8009412 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2220      	movs	r2, #32
 800944e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009468:	f023 0310 	bic.w	r3, r3, #16
 800946c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800947a:	65bb      	str	r3, [r7, #88]	; 0x58
 800947c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e4      	bne.n	8009458 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009494:	4618      	mov	r0, r3
 8009496:	f7fb f9a2 	bl	80047de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2202      	movs	r2, #2
 800949e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f907 	bl	80096c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094ba:	e0df      	b.n	800967c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 80d1 	beq.w	8009680 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80094de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 80cc 	beq.w	8009680 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800950a:	647b      	str	r3, [r7, #68]	; 0x44
 800950c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e4      	bne.n	80094e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	623b      	str	r3, [r7, #32]
   return(result);
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3308      	adds	r3, #8
 8009542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009546:	633a      	str	r2, [r7, #48]	; 0x30
 8009548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800954c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800954e:	e841 2300 	strex	r3, r2, [r1]
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1e1      	bne.n	800951e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	60fb      	str	r3, [r7, #12]
   return(result);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0310 	bic.w	r3, r3, #16
 8009582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009590:	61fb      	str	r3, [r7, #28]
 8009592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	69b9      	ldr	r1, [r7, #24]
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	617b      	str	r3, [r7, #20]
   return(result);
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e4      	bne.n	800956e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f889 	bl	80096c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095b6:	e063      	b.n	8009680 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00e      	beq.n	80095e2 <HAL_UART_IRQHandler+0x59e>
 80095c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d008      	beq.n	80095e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80095d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 ff89 	bl	800a4f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095e0:	e051      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d014      	beq.n	8009618 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d008      	beq.n	8009618 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800960a:	2b00      	cmp	r3, #0
 800960c:	d03a      	beq.n	8009684 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	4798      	blx	r3
    }
    return;
 8009616:	e035      	b.n	8009684 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800961c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d009      	beq.n	8009638 <HAL_UART_IRQHandler+0x5f4>
 8009624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 ff33 	bl	800a49c <UART_EndTransmit_IT>
    return;
 8009636:	e026      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d009      	beq.n	8009658 <HAL_UART_IRQHandler+0x614>
 8009644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d003      	beq.n	8009658 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 ff62 	bl	800a51a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009656:	e016      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d010      	beq.n	8009686 <HAL_UART_IRQHandler+0x642>
 8009664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009668:	2b00      	cmp	r3, #0
 800966a:	da0c      	bge.n	8009686 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 ff4a 	bl	800a506 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009672:	e008      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
      return;
 8009674:	bf00      	nop
 8009676:	e006      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
    return;
 8009678:	bf00      	nop
 800967a:	e004      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
      return;
 800967c:	bf00      	nop
 800967e:	e002      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
      return;
 8009680:	bf00      	nop
 8009682:	e000      	b.n	8009686 <HAL_UART_IRQHandler+0x642>
    return;
 8009684:	bf00      	nop
  }
}
 8009686:	37e8      	adds	r7, #232	; 0xe8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096e4:	b08c      	sub	sp, #48	; 0x30
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	431a      	orrs	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	431a      	orrs	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	4313      	orrs	r3, r2
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4bab      	ldr	r3, [pc, #684]	; (80099bc <UART_SetConfig+0x2dc>)
 8009710:	4013      	ands	r3, r2
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009718:	430b      	orrs	r3, r1
 800971a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4aa0      	ldr	r2, [pc, #640]	; (80099c0 <UART_SetConfig+0x2e0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d004      	beq.n	800974c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009748:	4313      	orrs	r3, r2
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009756:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	6812      	ldr	r2, [r2, #0]
 800975e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009760:	430b      	orrs	r3, r1
 8009762:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976a:	f023 010f 	bic.w	r1, r3, #15
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a91      	ldr	r2, [pc, #580]	; (80099c4 <UART_SetConfig+0x2e4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d125      	bne.n	80097d0 <UART_SetConfig+0xf0>
 8009784:	4b90      	ldr	r3, [pc, #576]	; (80099c8 <UART_SetConfig+0x2e8>)
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	2b03      	cmp	r3, #3
 8009790:	d81a      	bhi.n	80097c8 <UART_SetConfig+0xe8>
 8009792:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <UART_SetConfig+0xb8>)
 8009794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097b9 	.word	0x080097b9
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097c1 	.word	0x080097c1
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ae:	e0d6      	b.n	800995e <UART_SetConfig+0x27e>
 80097b0:	2302      	movs	r3, #2
 80097b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097b6:	e0d2      	b.n	800995e <UART_SetConfig+0x27e>
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097be:	e0ce      	b.n	800995e <UART_SetConfig+0x27e>
 80097c0:	2308      	movs	r3, #8
 80097c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c6:	e0ca      	b.n	800995e <UART_SetConfig+0x27e>
 80097c8:	2310      	movs	r3, #16
 80097ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ce:	e0c6      	b.n	800995e <UART_SetConfig+0x27e>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a7d      	ldr	r2, [pc, #500]	; (80099cc <UART_SetConfig+0x2ec>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d138      	bne.n	800984c <UART_SetConfig+0x16c>
 80097da:	4b7b      	ldr	r3, [pc, #492]	; (80099c8 <UART_SetConfig+0x2e8>)
 80097dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e0:	f003 030c 	and.w	r3, r3, #12
 80097e4:	2b0c      	cmp	r3, #12
 80097e6:	d82d      	bhi.n	8009844 <UART_SetConfig+0x164>
 80097e8:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <UART_SetConfig+0x110>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009825 	.word	0x08009825
 80097f4:	08009845 	.word	0x08009845
 80097f8:	08009845 	.word	0x08009845
 80097fc:	08009845 	.word	0x08009845
 8009800:	08009835 	.word	0x08009835
 8009804:	08009845 	.word	0x08009845
 8009808:	08009845 	.word	0x08009845
 800980c:	08009845 	.word	0x08009845
 8009810:	0800982d 	.word	0x0800982d
 8009814:	08009845 	.word	0x08009845
 8009818:	08009845 	.word	0x08009845
 800981c:	08009845 	.word	0x08009845
 8009820:	0800983d 	.word	0x0800983d
 8009824:	2300      	movs	r3, #0
 8009826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800982a:	e098      	b.n	800995e <UART_SetConfig+0x27e>
 800982c:	2302      	movs	r3, #2
 800982e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009832:	e094      	b.n	800995e <UART_SetConfig+0x27e>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800983a:	e090      	b.n	800995e <UART_SetConfig+0x27e>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009842:	e08c      	b.n	800995e <UART_SetConfig+0x27e>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800984a:	e088      	b.n	800995e <UART_SetConfig+0x27e>
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a5f      	ldr	r2, [pc, #380]	; (80099d0 <UART_SetConfig+0x2f0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d125      	bne.n	80098a2 <UART_SetConfig+0x1c2>
 8009856:	4b5c      	ldr	r3, [pc, #368]	; (80099c8 <UART_SetConfig+0x2e8>)
 8009858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800985c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009860:	2b30      	cmp	r3, #48	; 0x30
 8009862:	d016      	beq.n	8009892 <UART_SetConfig+0x1b2>
 8009864:	2b30      	cmp	r3, #48	; 0x30
 8009866:	d818      	bhi.n	800989a <UART_SetConfig+0x1ba>
 8009868:	2b20      	cmp	r3, #32
 800986a:	d00a      	beq.n	8009882 <UART_SetConfig+0x1a2>
 800986c:	2b20      	cmp	r3, #32
 800986e:	d814      	bhi.n	800989a <UART_SetConfig+0x1ba>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <UART_SetConfig+0x19a>
 8009874:	2b10      	cmp	r3, #16
 8009876:	d008      	beq.n	800988a <UART_SetConfig+0x1aa>
 8009878:	e00f      	b.n	800989a <UART_SetConfig+0x1ba>
 800987a:	2300      	movs	r3, #0
 800987c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009880:	e06d      	b.n	800995e <UART_SetConfig+0x27e>
 8009882:	2302      	movs	r3, #2
 8009884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009888:	e069      	b.n	800995e <UART_SetConfig+0x27e>
 800988a:	2304      	movs	r3, #4
 800988c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009890:	e065      	b.n	800995e <UART_SetConfig+0x27e>
 8009892:	2308      	movs	r3, #8
 8009894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009898:	e061      	b.n	800995e <UART_SetConfig+0x27e>
 800989a:	2310      	movs	r3, #16
 800989c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098a0:	e05d      	b.n	800995e <UART_SetConfig+0x27e>
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a4b      	ldr	r2, [pc, #300]	; (80099d4 <UART_SetConfig+0x2f4>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d125      	bne.n	80098f8 <UART_SetConfig+0x218>
 80098ac:	4b46      	ldr	r3, [pc, #280]	; (80099c8 <UART_SetConfig+0x2e8>)
 80098ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80098b6:	2bc0      	cmp	r3, #192	; 0xc0
 80098b8:	d016      	beq.n	80098e8 <UART_SetConfig+0x208>
 80098ba:	2bc0      	cmp	r3, #192	; 0xc0
 80098bc:	d818      	bhi.n	80098f0 <UART_SetConfig+0x210>
 80098be:	2b80      	cmp	r3, #128	; 0x80
 80098c0:	d00a      	beq.n	80098d8 <UART_SetConfig+0x1f8>
 80098c2:	2b80      	cmp	r3, #128	; 0x80
 80098c4:	d814      	bhi.n	80098f0 <UART_SetConfig+0x210>
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <UART_SetConfig+0x1f0>
 80098ca:	2b40      	cmp	r3, #64	; 0x40
 80098cc:	d008      	beq.n	80098e0 <UART_SetConfig+0x200>
 80098ce:	e00f      	b.n	80098f0 <UART_SetConfig+0x210>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098d6:	e042      	b.n	800995e <UART_SetConfig+0x27e>
 80098d8:	2302      	movs	r3, #2
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098de:	e03e      	b.n	800995e <UART_SetConfig+0x27e>
 80098e0:	2304      	movs	r3, #4
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098e6:	e03a      	b.n	800995e <UART_SetConfig+0x27e>
 80098e8:	2308      	movs	r3, #8
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ee:	e036      	b.n	800995e <UART_SetConfig+0x27e>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098f6:	e032      	b.n	800995e <UART_SetConfig+0x27e>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a30      	ldr	r2, [pc, #192]	; (80099c0 <UART_SetConfig+0x2e0>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d12a      	bne.n	8009958 <UART_SetConfig+0x278>
 8009902:	4b31      	ldr	r3, [pc, #196]	; (80099c8 <UART_SetConfig+0x2e8>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800990c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009910:	d01a      	beq.n	8009948 <UART_SetConfig+0x268>
 8009912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009916:	d81b      	bhi.n	8009950 <UART_SetConfig+0x270>
 8009918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800991c:	d00c      	beq.n	8009938 <UART_SetConfig+0x258>
 800991e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009922:	d815      	bhi.n	8009950 <UART_SetConfig+0x270>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <UART_SetConfig+0x250>
 8009928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800992c:	d008      	beq.n	8009940 <UART_SetConfig+0x260>
 800992e:	e00f      	b.n	8009950 <UART_SetConfig+0x270>
 8009930:	2300      	movs	r3, #0
 8009932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009936:	e012      	b.n	800995e <UART_SetConfig+0x27e>
 8009938:	2302      	movs	r3, #2
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800993e:	e00e      	b.n	800995e <UART_SetConfig+0x27e>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009946:	e00a      	b.n	800995e <UART_SetConfig+0x27e>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800994e:	e006      	b.n	800995e <UART_SetConfig+0x27e>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009956:	e002      	b.n	800995e <UART_SetConfig+0x27e>
 8009958:	2310      	movs	r3, #16
 800995a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a17      	ldr	r2, [pc, #92]	; (80099c0 <UART_SetConfig+0x2e0>)
 8009964:	4293      	cmp	r3, r2
 8009966:	f040 80a8 	bne.w	8009aba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800996a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800996e:	2b08      	cmp	r3, #8
 8009970:	d834      	bhi.n	80099dc <UART_SetConfig+0x2fc>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x298>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	0800999d 	.word	0x0800999d
 800997c:	080099dd 	.word	0x080099dd
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099dd 	.word	0x080099dd
 8009988:	080099ab 	.word	0x080099ab
 800998c:	080099dd 	.word	0x080099dd
 8009990:	080099dd 	.word	0x080099dd
 8009994:	080099dd 	.word	0x080099dd
 8009998:	080099b3 	.word	0x080099b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800999c:	f7fd feaa 	bl	80076f4 <HAL_RCC_GetPCLK1Freq>
 80099a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099a2:	e021      	b.n	80099e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099a4:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <UART_SetConfig+0x2f8>)
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099a8:	e01e      	b.n	80099e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099aa:	f7fd fe35 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 80099ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099b0:	e01a      	b.n	80099e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099b8:	e016      	b.n	80099e8 <UART_SetConfig+0x308>
 80099ba:	bf00      	nop
 80099bc:	cfff69f3 	.word	0xcfff69f3
 80099c0:	40008000 	.word	0x40008000
 80099c4:	40013800 	.word	0x40013800
 80099c8:	40021000 	.word	0x40021000
 80099cc:	40004400 	.word	0x40004400
 80099d0:	40004800 	.word	0x40004800
 80099d4:	40004c00 	.word	0x40004c00
 80099d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80099e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 812a 	beq.w	8009c44 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	4a9e      	ldr	r2, [pc, #632]	; (8009c70 <UART_SetConfig+0x590>)
 80099f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099fa:	461a      	mov	r2, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a02:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	4413      	add	r3, r2
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d305      	bcc.n	8009a20 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d903      	bls.n	8009a28 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a26:	e10d      	b.n	8009c44 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	60bb      	str	r3, [r7, #8]
 8009a2e:	60fa      	str	r2, [r7, #12]
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	4a8e      	ldr	r2, [pc, #568]	; (8009c70 <UART_SetConfig+0x590>)
 8009a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	607a      	str	r2, [r7, #4]
 8009a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a4a:	f7f7 f945 	bl	8000cd8 <__aeabi_uldivmod>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4610      	mov	r0, r2
 8009a54:	4619      	mov	r1, r3
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	f04f 0300 	mov.w	r3, #0
 8009a5e:	020b      	lsls	r3, r1, #8
 8009a60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a64:	0202      	lsls	r2, r0, #8
 8009a66:	6979      	ldr	r1, [r7, #20]
 8009a68:	6849      	ldr	r1, [r1, #4]
 8009a6a:	0849      	lsrs	r1, r1, #1
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4605      	mov	r5, r0
 8009a72:	eb12 0804 	adds.w	r8, r2, r4
 8009a76:	eb43 0905 	adc.w	r9, r3, r5
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	469a      	mov	sl, r3
 8009a82:	4693      	mov	fp, r2
 8009a84:	4652      	mov	r2, sl
 8009a86:	465b      	mov	r3, fp
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f7f7 f924 	bl	8000cd8 <__aeabi_uldivmod>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4613      	mov	r3, r2
 8009a96:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a9e:	d308      	bcc.n	8009ab2 <UART_SetConfig+0x3d2>
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aa6:	d204      	bcs.n	8009ab2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6a3a      	ldr	r2, [r7, #32]
 8009aae:	60da      	str	r2, [r3, #12]
 8009ab0:	e0c8      	b.n	8009c44 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ab8:	e0c4      	b.n	8009c44 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac2:	d167      	bne.n	8009b94 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d828      	bhi.n	8009b1e <UART_SetConfig+0x43e>
 8009acc:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <UART_SetConfig+0x3f4>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	08009b1f 	.word	0x08009b1f
 8009ae4:	08009b0f 	.word	0x08009b0f
 8009ae8:	08009b1f 	.word	0x08009b1f
 8009aec:	08009b1f 	.word	0x08009b1f
 8009af0:	08009b1f 	.word	0x08009b1f
 8009af4:	08009b17 	.word	0x08009b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009af8:	f7fd fdfc 	bl	80076f4 <HAL_RCC_GetPCLK1Freq>
 8009afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009afe:	e014      	b.n	8009b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b00:	f7fd fe0e 	bl	8007720 <HAL_RCC_GetPCLK2Freq>
 8009b04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b06:	e010      	b.n	8009b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b08:	4b5a      	ldr	r3, [pc, #360]	; (8009c74 <UART_SetConfig+0x594>)
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b0c:	e00d      	b.n	8009b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0e:	f7fd fd83 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 8009b12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b14:	e009      	b.n	8009b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b1c:	e005      	b.n	8009b2a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 8089 	beq.w	8009c44 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	4a4e      	ldr	r2, [pc, #312]	; (8009c70 <UART_SetConfig+0x590>)
 8009b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b44:	005a      	lsls	r2, r3, #1
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	085b      	lsrs	r3, r3, #1
 8009b4c:	441a      	add	r2, r3
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2b0f      	cmp	r3, #15
 8009b5c:	d916      	bls.n	8009b8c <UART_SetConfig+0x4ac>
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b64:	d212      	bcs.n	8009b8c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f023 030f 	bic.w	r3, r3, #15
 8009b6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	085b      	lsrs	r3, r3, #1
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	f003 0307 	and.w	r3, r3, #7
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	8bfb      	ldrh	r3, [r7, #30]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	8bfa      	ldrh	r2, [r7, #30]
 8009b88:	60da      	str	r2, [r3, #12]
 8009b8a:	e05b      	b.n	8009c44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b92:	e057      	b.n	8009c44 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	d828      	bhi.n	8009bee <UART_SetConfig+0x50e>
 8009b9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <UART_SetConfig+0x4c4>)
 8009b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba2:	bf00      	nop
 8009ba4:	08009bc9 	.word	0x08009bc9
 8009ba8:	08009bd1 	.word	0x08009bd1
 8009bac:	08009bd9 	.word	0x08009bd9
 8009bb0:	08009bef 	.word	0x08009bef
 8009bb4:	08009bdf 	.word	0x08009bdf
 8009bb8:	08009bef 	.word	0x08009bef
 8009bbc:	08009bef 	.word	0x08009bef
 8009bc0:	08009bef 	.word	0x08009bef
 8009bc4:	08009be7 	.word	0x08009be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bc8:	f7fd fd94 	bl	80076f4 <HAL_RCC_GetPCLK1Freq>
 8009bcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bce:	e014      	b.n	8009bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bd0:	f7fd fda6 	bl	8007720 <HAL_RCC_GetPCLK2Freq>
 8009bd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bd6:	e010      	b.n	8009bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bd8:	4b26      	ldr	r3, [pc, #152]	; (8009c74 <UART_SetConfig+0x594>)
 8009bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bdc:	e00d      	b.n	8009bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bde:	f7fd fd1b 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 8009be2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009be4:	e009      	b.n	8009bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bec:	e005      	b.n	8009bfa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009bf8:	bf00      	nop
    }

    if (pclk != 0U)
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d021      	beq.n	8009c44 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	4a1a      	ldr	r2, [pc, #104]	; (8009c70 <UART_SetConfig+0x590>)
 8009c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	085b      	lsrs	r3, r3, #1
 8009c18:	441a      	add	r2, r3
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	2b0f      	cmp	r3, #15
 8009c28:	d909      	bls.n	8009c3e <UART_SetConfig+0x55e>
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c30:	d205      	bcs.n	8009c3e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60da      	str	r2, [r3, #12]
 8009c3c:	e002      	b.n	8009c44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2200      	movs	r2, #0
 8009c58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009c60:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3730      	adds	r7, #48	; 0x30
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c6e:	bf00      	nop
 8009c70:	08013b64 	.word	0x08013b64
 8009c74:	00f42400 	.word	0x00f42400

08009c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	f003 0308 	and.w	r3, r3, #8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00a      	beq.n	8009ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	f003 0304 	and.w	r3, r3, #4
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01a      	beq.n	8009d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d76:	d10a      	bne.n	8009d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	605a      	str	r2, [r3, #4]
  }
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b098      	sub	sp, #96	; 0x60
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dcc:	f7f8 fdf0 	bl	80029b0 <HAL_GetTick>
 8009dd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d12f      	bne.n	8009e40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de8:	2200      	movs	r2, #0
 8009dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f88e 	bl	8009f10 <UART_WaitOnFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d022      	beq.n	8009e40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	e853 3f00 	ldrex	r3, [r3]
 8009e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e18:	647b      	str	r3, [r7, #68]	; 0x44
 8009e1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e6      	bne.n	8009dfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e063      	b.n	8009f08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0304 	and.w	r3, r3, #4
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	d149      	bne.n	8009ee2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e56:	2200      	movs	r2, #0
 8009e58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f857 	bl	8009f10 <UART_WaitOnFlagUntilTimeout>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d03c      	beq.n	8009ee2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	e853 3f00 	ldrex	r3, [r3]
 8009e74:	623b      	str	r3, [r7, #32]
   return(result);
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e86:	633b      	str	r3, [r7, #48]	; 0x30
 8009e88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e8e:	e841 2300 	strex	r3, r2, [r1]
 8009e92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e6      	bne.n	8009e68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eba:	61fa      	str	r2, [r7, #28]
 8009ebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	69b9      	ldr	r1, [r7, #24]
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e5      	bne.n	8009e9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e012      	b.n	8009f08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3758      	adds	r7, #88	; 0x58
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f20:	e04f      	b.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d04b      	beq.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f2a:	f7f8 fd41 	bl	80029b0 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d302      	bcc.n	8009f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e04e      	b.n	8009fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d037      	beq.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	2b80      	cmp	r3, #128	; 0x80
 8009f56:	d034      	beq.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b40      	cmp	r3, #64	; 0x40
 8009f5c:	d031      	beq.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d110      	bne.n	8009f8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2208      	movs	r2, #8
 8009f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 f920 	bl	800a1ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e029      	b.n	8009fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f9c:	d111      	bne.n	8009fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 f906 	bl	800a1ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e00f      	b.n	8009fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	bf0c      	ite	eq
 8009fd2:	2301      	moveq	r3, #1
 8009fd4:	2300      	movne	r3, #0
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	461a      	mov	r2, r3
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d0a0      	beq.n	8009f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
	...

08009fec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b096      	sub	sp, #88	; 0x58
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	88fa      	ldrh	r2, [r7, #6]
 800a004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2222      	movs	r2, #34	; 0x22
 800a014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d02d      	beq.n	800a07e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a028:	4a40      	ldr	r2, [pc, #256]	; (800a12c <UART_Start_Receive_DMA+0x140>)
 800a02a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a032:	4a3f      	ldr	r2, [pc, #252]	; (800a130 <UART_Start_Receive_DMA+0x144>)
 800a034:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a03c:	4a3d      	ldr	r2, [pc, #244]	; (800a134 <UART_Start_Receive_DMA+0x148>)
 800a03e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a046:	2200      	movs	r2, #0
 800a048:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3324      	adds	r3, #36	; 0x24
 800a056:	4619      	mov	r1, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05c:	461a      	mov	r2, r3
 800a05e:	88fb      	ldrh	r3, [r7, #6]
 800a060:	f7fa fb42 	bl	80046e8 <HAL_DMA_Start_IT>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2210      	movs	r2, #16
 800a06e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2220      	movs	r2, #32
 800a076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e051      	b.n	800a122 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d018      	beq.n	800a0b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a09a:	657b      	str	r3, [r7, #84]	; 0x54
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e6      	bne.n	800a086 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	f043 0301 	orr.w	r3, r3, #1
 800a0ce:	653b      	str	r3, [r7, #80]	; 0x50
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0d8:	637a      	str	r2, [r7, #52]	; 0x34
 800a0da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e5      	bne.n	800a0b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3308      	adds	r3, #8
 800a10a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a10c:	623a      	str	r2, [r7, #32]
 800a10e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	69f9      	ldr	r1, [r7, #28]
 800a112:	6a3a      	ldr	r2, [r7, #32]
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	61bb      	str	r3, [r7, #24]
   return(result);
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e5      	bne.n	800a0ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3758      	adds	r7, #88	; 0x58
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	0800a287 	.word	0x0800a287
 800a130:	0800a3b3 	.word	0x0800a3b3
 800a134:	0800a3f1 	.word	0x0800a3f1

0800a138 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b08f      	sub	sp, #60	; 0x3c
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a154:	637b      	str	r3, [r7, #52]	; 0x34
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a160:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e6      	bne.n	800a140 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	e853 3f00 	ldrex	r3, [r3]
 800a180:	60bb      	str	r3, [r7, #8]
   return(result);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a188:	633b      	str	r3, [r7, #48]	; 0x30
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	3308      	adds	r3, #8
 800a190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a192:	61ba      	str	r2, [r7, #24]
 800a194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	6979      	ldr	r1, [r7, #20]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e5      	bne.n	800a172 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a1ae:	bf00      	nop
 800a1b0:	373c      	adds	r7, #60	; 0x3c
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b095      	sub	sp, #84	; 0x54
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e0:	643b      	str	r3, [r7, #64]	; 0x40
 800a1e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1e8:	e841 2300 	strex	r3, r2, [r1]
 800a1ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1e6      	bne.n	800a1c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3308      	adds	r3, #8
 800a1fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	61fb      	str	r3, [r7, #28]
   return(result);
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a20a:	f023 0301 	bic.w	r3, r3, #1
 800a20e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a21a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a21e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e3      	bne.n	800a1f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d118      	bne.n	800a266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	60bb      	str	r3, [r7, #8]
   return(result);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	f023 0310 	bic.w	r3, r3, #16
 800a248:	647b      	str	r3, [r7, #68]	; 0x44
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a252:	61bb      	str	r3, [r7, #24]
 800a254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6979      	ldr	r1, [r7, #20]
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	613b      	str	r3, [r7, #16]
   return(result);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e6      	bne.n	800a234 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a27a:	bf00      	nop
 800a27c:	3754      	adds	r7, #84	; 0x54
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b09c      	sub	sp, #112	; 0x70
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a292:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d171      	bne.n	800a386 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2be:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2d0:	e841 2300 	strex	r3, r2, [r1]
 800a2d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e6      	bne.n	800a2aa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ee:	f023 0301 	bic.w	r3, r3, #1
 800a2f2:	667b      	str	r3, [r7, #100]	; 0x64
 800a2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2fc:	647a      	str	r2, [r7, #68]	; 0x44
 800a2fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e5      	bne.n	800a2dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3308      	adds	r3, #8
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	623b      	str	r3, [r7, #32]
   return(result);
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a326:	663b      	str	r3, [r7, #96]	; 0x60
 800a328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3308      	adds	r3, #8
 800a32e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a330:	633a      	str	r2, [r7, #48]	; 0x30
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a338:	e841 2300 	strex	r3, r2, [r1]
 800a33c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e5      	bne.n	800a310 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a346:	2220      	movs	r2, #32
 800a348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a350:	2b01      	cmp	r3, #1
 800a352:	d118      	bne.n	800a386 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	60fb      	str	r3, [r7, #12]
   return(result);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f023 0310 	bic.w	r3, r3, #16
 800a368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a372:	61fb      	str	r3, [r7, #28]
 800a374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a376:	69b9      	ldr	r1, [r7, #24]
 800a378:	69fa      	ldr	r2, [r7, #28]
 800a37a:	e841 2300 	strex	r3, r2, [r1]
 800a37e:	617b      	str	r3, [r7, #20]
   return(result);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1e6      	bne.n	800a354 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a388:	2200      	movs	r2, #0
 800a38a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a390:	2b01      	cmp	r3, #1
 800a392:	d107      	bne.n	800a3a4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a39a:	4619      	mov	r1, r3
 800a39c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a39e:	f7ff f993 	bl	80096c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3a2:	e002      	b.n	800a3aa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a3a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3a6:	f7f8 fa03 	bl	80027b0 <HAL_UART_RxCpltCallback>
}
 800a3aa:	bf00      	nop
 800a3ac:	3770      	adds	r7, #112	; 0x70
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d109      	bne.n	800a3e2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3d4:	085b      	lsrs	r3, r3, #1
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	4619      	mov	r1, r3
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7ff f974 	bl	80096c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3e0:	e002      	b.n	800a3e8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7ff f95c 	bl	80096a0 <HAL_UART_RxHalfCpltCallback>
}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a404:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a40c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a418:	2b80      	cmp	r3, #128	; 0x80
 800a41a:	d109      	bne.n	800a430 <UART_DMAError+0x40>
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	2b21      	cmp	r3, #33	; 0x21
 800a420:	d106      	bne.n	800a430 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2200      	movs	r2, #0
 800a426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a42a:	6978      	ldr	r0, [r7, #20]
 800a42c:	f7ff fe84 	bl	800a138 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43a:	2b40      	cmp	r3, #64	; 0x40
 800a43c:	d109      	bne.n	800a452 <UART_DMAError+0x62>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b22      	cmp	r3, #34	; 0x22
 800a442:	d106      	bne.n	800a452 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2200      	movs	r2, #0
 800a448:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a44c:	6978      	ldr	r0, [r7, #20]
 800a44e:	f7ff feb4 	bl	800a1ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a458:	f043 0210 	orr.w	r2, r3, #16
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a462:	6978      	ldr	r0, [r7, #20]
 800a464:	f7ff f926 	bl	80096b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a468:	bf00      	nop
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff f910 	bl	80096b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a494:	bf00      	nop
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4b8:	61fb      	str	r3, [r7, #28]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	61bb      	str	r3, [r7, #24]
 800a4c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	6979      	ldr	r1, [r7, #20]
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e6      	bne.n	800a4a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2220      	movs	r2, #32
 800a4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff f8d1 	bl	800968c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ea:	bf00      	nop
 800a4ec:	3720      	adds	r7, #32
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a522:	bf00      	nop
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a52e:	b480      	push	{r7}
 800a530:	b085      	sub	sp, #20
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_UARTEx_DisableFifoMode+0x16>
 800a540:	2302      	movs	r3, #2
 800a542:	e027      	b.n	800a594 <HAL_UARTEx_DisableFifoMode+0x66>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2224      	movs	r2, #36	; 0x24
 800a550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0201 	bic.w	r2, r2, #1
 800a56a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a572:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2220      	movs	r2, #32
 800a586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e02d      	b.n	800a614 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2224      	movs	r2, #36	; 0x24
 800a5c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0201 	bic.w	r2, r2, #1
 800a5de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f84f 	bl	800a698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a630:	2302      	movs	r3, #2
 800a632:	e02d      	b.n	800a690 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2224      	movs	r2, #36	; 0x24
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 0201 	bic.w	r2, r2, #1
 800a65a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f811 	bl	800a698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2220      	movs	r2, #32
 800a682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d108      	bne.n	800a6ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6b8:	e031      	b.n	800a71e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6ba:	2308      	movs	r3, #8
 800a6bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6be:	2308      	movs	r3, #8
 800a6c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	0e5b      	lsrs	r3, r3, #25
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 0307 	and.w	r3, r3, #7
 800a6d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	0f5b      	lsrs	r3, r3, #29
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	7b3a      	ldrb	r2, [r7, #12]
 800a6e6:	4911      	ldr	r1, [pc, #68]	; (800a72c <UARTEx_SetNbDataToProcess+0x94>)
 800a6e8:	5c8a      	ldrb	r2, [r1, r2]
 800a6ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ee:	7b3a      	ldrb	r2, [r7, #12]
 800a6f0:	490f      	ldr	r1, [pc, #60]	; (800a730 <UARTEx_SetNbDataToProcess+0x98>)
 800a6f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	7b7a      	ldrb	r2, [r7, #13]
 800a704:	4909      	ldr	r1, [pc, #36]	; (800a72c <UARTEx_SetNbDataToProcess+0x94>)
 800a706:	5c8a      	ldrb	r2, [r1, r2]
 800a708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a70c:	7b7a      	ldrb	r2, [r7, #13]
 800a70e:	4908      	ldr	r1, [pc, #32]	; (800a730 <UARTEx_SetNbDataToProcess+0x98>)
 800a710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a712:	fb93 f3f2 	sdiv	r3, r3, r2
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	08013b7c 	.word	0x08013b7c
 800a730:	08013b84 	.word	0x08013b84

0800a734 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a744:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a748:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a762:	b480      	push	{r7}
 800a764:	b085      	sub	sp, #20
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a76a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a76e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a776:	b29a      	uxth	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	43db      	mvns	r3, r3
 800a77e:	b29b      	uxth	r3, r3
 800a780:	4013      	ands	r3, r2
 800a782:	b29a      	uxth	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	1d3b      	adds	r3, r7, #4
 800a7a2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b09d      	sub	sp, #116	; 0x74
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	78db      	ldrb	r3, [r3, #3]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d81f      	bhi.n	800a846 <USB_ActivateEndpoint+0x72>
 800a806:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <USB_ActivateEndpoint+0x38>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a839 	.word	0x0800a839
 800a814:	0800a84f 	.word	0x0800a84f
 800a818:	0800a82b 	.word	0x0800a82b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a81c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a824:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a828:	e012      	b.n	800a850 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a82a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a82e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a832:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a836:	e00b      	b.n	800a850 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a838:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a83c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a840:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a844:	e004      	b.n	800a850 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a84c:	e000      	b.n	800a850 <USB_ActivateEndpoint+0x7c>
      break;
 800a84e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	441a      	add	r2, r3
 800a85a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a85e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86e:	b29b      	uxth	r3, r3
 800a870:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	b21b      	sxth	r3, r3
 800a882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a88a:	b21a      	sxth	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	b21b      	sxth	r3, r3
 800a892:	4313      	orrs	r3, r2
 800a894:	b21b      	sxth	r3, r3
 800a896:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	441a      	add	r2, r3
 800a8a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a8a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	7b1b      	ldrb	r3, [r3, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f040 8178 	bne.w	800abb6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	785b      	ldrb	r3, [r3, #1]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8084 	beq.w	800a9d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	61bb      	str	r3, [r7, #24]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	461a      	mov	r2, r3
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	61bb      	str	r3, [r7, #24]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	00da      	lsls	r2, r3, #3
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	88db      	ldrh	r3, [r3, #6]
 800a8f8:	085b      	lsrs	r3, r3, #1
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	827b      	strh	r3, [r7, #18]
 800a912:	8a7b      	ldrh	r3, [r7, #18]
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01b      	beq.n	800a954 <USB_ActivateEndpoint+0x180>
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a932:	823b      	strh	r3, [r7, #16]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	441a      	add	r2, r3
 800a93e:	8a3b      	ldrh	r3, [r7, #16]
 800a940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a94c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a950:	b29b      	uxth	r3, r3
 800a952:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	78db      	ldrb	r3, [r3, #3]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d020      	beq.n	800a99e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a96e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a972:	81bb      	strh	r3, [r7, #12]
 800a974:	89bb      	ldrh	r3, [r7, #12]
 800a976:	f083 0320 	eor.w	r3, r3, #32
 800a97a:	81bb      	strh	r3, [r7, #12]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	441a      	add	r2, r3
 800a986:	89bb      	ldrh	r3, [r7, #12]
 800a988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a98c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a998:	b29b      	uxth	r3, r3
 800a99a:	8013      	strh	r3, [r2, #0]
 800a99c:	e2d5      	b.n	800af4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9b4:	81fb      	strh	r3, [r7, #14]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	441a      	add	r2, r3
 800a9c0:	89fb      	ldrh	r3, [r7, #14]
 800a9c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	8013      	strh	r3, [r2, #0]
 800a9d6:	e2b8      	b.n	800af4a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	633b      	str	r3, [r7, #48]	; 0x30
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	4413      	add	r3, r2
 800a9ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	00da      	lsls	r2, r3, #3
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	88db      	ldrh	r3, [r3, #6]
 800aa00:	085b      	lsrs	r3, r3, #1
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1c:	4413      	add	r3, r2
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	00da      	lsls	r2, r3, #3
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	4413      	add	r3, r2
 800aa2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b3e      	cmp	r3, #62	; 0x3e
 800aa46:	d91d      	bls.n	800aa84 <USB_ActivateEndpoint+0x2b0>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	095b      	lsrs	r3, r3, #5
 800aa4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d102      	bne.n	800aa62 <USB_ActivateEndpoint+0x28e>
 800aa5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	029b      	lsls	r3, r3, #10
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	4313      	orrs	r3, r2
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	801a      	strh	r2, [r3, #0]
 800aa82:	e026      	b.n	800aad2 <USB_ActivateEndpoint+0x2fe>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <USB_ActivateEndpoint+0x2ce>
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	801a      	strh	r2, [r3, #0]
 800aaa0:	e017      	b.n	800aad2 <USB_ActivateEndpoint+0x2fe>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	085b      	lsrs	r3, r3, #1
 800aaa8:	66bb      	str	r3, [r7, #104]	; 0x68
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <USB_ActivateEndpoint+0x2e8>
 800aab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aab8:	3301      	adds	r3, #1
 800aaba:	66bb      	str	r3, [r7, #104]	; 0x68
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	029b      	lsls	r3, r3, #10
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	4313      	orrs	r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	847b      	strh	r3, [r7, #34]	; 0x22
 800aae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d01b      	beq.n	800ab22 <USB_ActivateEndpoint+0x34e>
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aafc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab00:	843b      	strh	r3, [r7, #32]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	441a      	add	r2, r3
 800ab0c:	8c3b      	ldrh	r3, [r7, #32]
 800ab0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d124      	bne.n	800ab74 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab40:	83bb      	strh	r3, [r7, #28]
 800ab42:	8bbb      	ldrh	r3, [r7, #28]
 800ab44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab48:	83bb      	strh	r3, [r7, #28]
 800ab4a:	8bbb      	ldrh	r3, [r7, #28]
 800ab4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab50:	83bb      	strh	r3, [r7, #28]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	441a      	add	r2, r3
 800ab5c:	8bbb      	ldrh	r3, [r7, #28]
 800ab5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	8013      	strh	r3, [r2, #0]
 800ab72:	e1ea      	b.n	800af4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	4413      	add	r3, r2
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab8a:	83fb      	strh	r3, [r7, #30]
 800ab8c:	8bfb      	ldrh	r3, [r7, #30]
 800ab8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab92:	83fb      	strh	r3, [r7, #30]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	441a      	add	r2, r3
 800ab9e:	8bfb      	ldrh	r3, [r7, #30]
 800aba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	8013      	strh	r3, [r2, #0]
 800abb4:	e1c9      	b.n	800af4a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	78db      	ldrb	r3, [r3, #3]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d11e      	bne.n	800abfc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	441a      	add	r2, r3
 800abe2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800abe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800abf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	8013      	strh	r3, [r2, #0]
 800abfa:	e01d      	b.n	800ac38 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ac0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	441a      	add	r2, r3
 800ac20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ac24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac48:	4413      	add	r3, r2
 800ac4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	00da      	lsls	r2, r3, #3
 800ac52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	891b      	ldrh	r3, [r3, #8]
 800ac60:	085b      	lsrs	r3, r3, #1
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac6a:	801a      	strh	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	657b      	str	r3, [r7, #84]	; 0x54
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac7c:	4413      	add	r3, r2
 800ac7e:	657b      	str	r3, [r7, #84]	; 0x54
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	00da      	lsls	r2, r3, #3
 800ac86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac88:	4413      	add	r3, r2
 800ac8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	895b      	ldrh	r3, [r3, #10]
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	785b      	ldrb	r3, [r3, #1]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f040 8093 	bne.w	800add0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	881b      	ldrh	r3, [r3, #0]
 800acb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800acba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800acbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d01b      	beq.n	800acfe <USB_ActivateEndpoint+0x52a>
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	881b      	ldrh	r3, [r3, #0]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	441a      	add	r2, r3
 800ace8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800acea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ad0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d01b      	beq.n	800ad4e <USB_ActivateEndpoint+0x57a>
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	441a      	add	r2, r3
 800ad38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	881b      	ldrh	r3, [r3, #0]
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad64:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad6c:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad74:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	441a      	add	r2, r3
 800ad80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4413      	add	r3, r2
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ada8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adac:	86fb      	strh	r3, [r7, #54]	; 0x36
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	441a      	add	r2, r3
 800adb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800adba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adca:	b29b      	uxth	r3, r3
 800adcc:	8013      	strh	r3, [r2, #0]
 800adce:	e0bc      	b.n	800af4a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ade0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ade4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d01d      	beq.n	800ae28 <USB_ActivateEndpoint+0x654>
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae02:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	441a      	add	r2, r3
 800ae10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ae14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ae38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ae3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01d      	beq.n	800ae80 <USB_ActivateEndpoint+0x6ac>
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	441a      	add	r2, r3
 800ae68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ae6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	78db      	ldrb	r3, [r3, #3]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d024      	beq.n	800aed2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aea2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aea6:	f083 0320 	eor.w	r3, r3, #32
 800aeaa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	441a      	add	r2, r3
 800aeb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aecc:	b29b      	uxth	r3, r3
 800aece:	8013      	strh	r3, [r2, #0]
 800aed0:	e01d      	b.n	800af0e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	441a      	add	r2, r3
 800aef6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aefa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aefe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	441a      	add	r2, r3
 800af32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af46:	b29b      	uxth	r3, r3
 800af48:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800af4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3774      	adds	r7, #116	; 0x74
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop

0800af5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b08d      	sub	sp, #52	; 0x34
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	7b1b      	ldrb	r3, [r3, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f040 808e 	bne.w	800b08c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	785b      	ldrb	r3, [r3, #1]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d044      	beq.n	800b002 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	81bb      	strh	r3, [r7, #12]
 800af86:	89bb      	ldrh	r3, [r7, #12]
 800af88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01b      	beq.n	800afc8 <USB_DeactivateEndpoint+0x6c>
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa6:	817b      	strh	r3, [r7, #10]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	441a      	add	r2, r3
 800afb2:	897b      	ldrh	r3, [r7, #10]
 800afb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afde:	813b      	strh	r3, [r7, #8]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	441a      	add	r2, r3
 800afea:	893b      	ldrh	r3, [r7, #8]
 800afec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affc:	b29b      	uxth	r3, r3
 800affe:	8013      	strh	r3, [r2, #0]
 800b000:	e192      	b.n	800b328 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	827b      	strh	r3, [r7, #18]
 800b010:	8a7b      	ldrh	r3, [r7, #18]
 800b012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d01b      	beq.n	800b052 <USB_DeactivateEndpoint+0xf6>
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	b29b      	uxth	r3, r3
 800b028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b02c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b030:	823b      	strh	r3, [r7, #16]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	441a      	add	r2, r3
 800b03c:	8a3b      	ldrh	r3, [r7, #16]
 800b03e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b04e:	b29b      	uxth	r3, r3
 800b050:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b068:	81fb      	strh	r3, [r7, #14]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	441a      	add	r2, r3
 800b074:	89fb      	ldrh	r3, [r7, #14]
 800b076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b07a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b086:	b29b      	uxth	r3, r3
 800b088:	8013      	strh	r3, [r2, #0]
 800b08a:	e14d      	b.n	800b328 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	785b      	ldrb	r3, [r3, #1]
 800b090:	2b00      	cmp	r3, #0
 800b092:	f040 80a5 	bne.w	800b1e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	843b      	strh	r3, [r7, #32]
 800b0a4:	8c3b      	ldrh	r3, [r7, #32]
 800b0a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01b      	beq.n	800b0e6 <USB_DeactivateEndpoint+0x18a>
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c4:	83fb      	strh	r3, [r7, #30]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	441a      	add	r2, r3
 800b0d0:	8bfb      	ldrh	r3, [r7, #30]
 800b0d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	83bb      	strh	r3, [r7, #28]
 800b0f4:	8bbb      	ldrh	r3, [r7, #28]
 800b0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d01b      	beq.n	800b136 <USB_DeactivateEndpoint+0x1da>
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b114:	837b      	strh	r3, [r7, #26]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	441a      	add	r2, r3
 800b120:	8b7b      	ldrh	r3, [r7, #26]
 800b122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b12e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b132:	b29b      	uxth	r3, r3
 800b134:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b14c:	833b      	strh	r3, [r7, #24]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	441a      	add	r2, r3
 800b158:	8b3b      	ldrh	r3, [r7, #24]
 800b15a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b15e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b166:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b184:	82fb      	strh	r3, [r7, #22]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	441a      	add	r2, r3
 800b190:	8afb      	ldrh	r3, [r7, #22]
 800b192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b19a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1bc:	82bb      	strh	r3, [r7, #20]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	441a      	add	r2, r3
 800b1c8:	8abb      	ldrh	r3, [r7, #20]
 800b1ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	8013      	strh	r3, [r2, #0]
 800b1de:	e0a3      	b.n	800b328 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	881b      	ldrh	r3, [r3, #0]
 800b1ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b1ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01b      	beq.n	800b230 <USB_DeactivateEndpoint+0x2d4>
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	b29b      	uxth	r3, r3
 800b206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	441a      	add	r2, r3
 800b21a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b21c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b23e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	d01b      	beq.n	800b280 <USB_DeactivateEndpoint+0x324>
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	b29b      	uxth	r3, r3
 800b256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	441a      	add	r2, r3
 800b26a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b26c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b296:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	441a      	add	r2, r3
 800b2a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	441a      	add	r2, r3
 800b2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b306:	847b      	strh	r3, [r7, #34]	; 0x22
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	441a      	add	r2, r3
 800b312:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b31c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b324:	b29b      	uxth	r3, r3
 800b326:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3734      	adds	r7, #52	; 0x34
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b0c2      	sub	sp, #264	; 0x108
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b344:	6018      	str	r0, [r3, #0]
 800b346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	785b      	ldrb	r3, [r3, #1]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	f040 86b7 	bne.w	800c0d0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	699a      	ldr	r2, [r3, #24]
 800b36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d908      	bls.n	800b390 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b37e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b38e:	e007      	b.n	800b3a0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	7b1b      	ldrb	r3, [r3, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d13a      	bne.n	800b426 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6959      	ldr	r1, [r3, #20]
 800b3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	88da      	ldrh	r2, [r3, #6]
 800b3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b3d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b3d6:	6800      	ldr	r0, [r0, #0]
 800b3d8:	f001 fc98 	bl	800cd0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	613b      	str	r3, [r7, #16]
 800b3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	613b      	str	r3, [r7, #16]
 800b400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	00da      	lsls	r2, r3, #3
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	4413      	add	r3, r2
 800b412:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	801a      	strh	r2, [r3, #0]
 800b422:	f000 be1f 	b.w	800c064 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	78db      	ldrb	r3, [r3, #3]
 800b432:	2b02      	cmp	r3, #2
 800b434:	f040 8462 	bne.w	800bcfc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6a1a      	ldr	r2, [r3, #32]
 800b444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	429a      	cmp	r2, r3
 800b452:	f240 83df 	bls.w	800bc14 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	b29b      	uxth	r3, r3
 800b474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b47c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	441a      	add	r2, r3
 800b49a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b49e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6a1a      	ldr	r2, [r3, #32]
 800b4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c2:	1ad2      	subs	r2, r2, r3
 800b4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 81c7 	beq.w	800b886 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	633b      	str	r3, [r7, #48]	; 0x30
 800b504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	785b      	ldrb	r3, [r3, #1]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d177      	bne.n	800b604 <USB_EPStartXfer+0x2ce>
 800b514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b52e:	b29b      	uxth	r3, r3
 800b530:	461a      	mov	r2, r3
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	4413      	add	r3, r2
 800b536:	62bb      	str	r3, [r7, #40]	; 0x28
 800b538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b53c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	00da      	lsls	r2, r3, #3
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	4413      	add	r3, r2
 800b54a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b54e:	627b      	str	r3, [r7, #36]	; 0x24
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	b29b      	uxth	r3, r3
 800b556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	801a      	strh	r2, [r3, #0]
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b564:	2b3e      	cmp	r3, #62	; 0x3e
 800b566:	d921      	bls.n	800b5ac <USB_EPStartXfer+0x276>
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56c:	095b      	lsrs	r3, r3, #5
 800b56e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b576:	f003 031f 	and.w	r3, r3, #31
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d104      	bne.n	800b588 <USB_EPStartXfer+0x252>
 800b57e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b582:	3b01      	subs	r3, #1
 800b584:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b592:	b29b      	uxth	r3, r3
 800b594:	029b      	lsls	r3, r3, #10
 800b596:	b29b      	uxth	r3, r3
 800b598:	4313      	orrs	r3, r2
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	e050      	b.n	800b64e <USB_EPStartXfer+0x318>
 800b5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <USB_EPStartXfer+0x294>
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	801a      	strh	r2, [r3, #0]
 800b5c8:	e041      	b.n	800b64e <USB_EPStartXfer+0x318>
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <USB_EPStartXfer+0x2b4>
 800b5e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	029b      	lsls	r3, r3, #10
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b600:	801a      	strh	r2, [r3, #0]
 800b602:	e024      	b.n	800b64e <USB_EPStartXfer+0x318>
 800b604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	785b      	ldrb	r3, [r3, #1]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d11c      	bne.n	800b64e <USB_EPStartXfer+0x318>
 800b614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b622:	b29b      	uxth	r3, r3
 800b624:	461a      	mov	r2, r3
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	4413      	add	r3, r2
 800b62a:	633b      	str	r3, [r7, #48]	; 0x30
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	00da      	lsls	r2, r3, #3
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	4413      	add	r3, r2
 800b63e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b648:	b29a      	uxth	r2, r3
 800b64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	895b      	ldrh	r3, [r3, #10]
 800b65a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6959      	ldr	r1, [r3, #20]
 800b66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66e:	b29b      	uxth	r3, r3
 800b670:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b674:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b678:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b67c:	6800      	ldr	r0, [r0, #0]
 800b67e:	f001 fb45 	bl	800cd0c <USB_WritePMA>
            ep->xfer_buff += len;
 800b682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	695a      	ldr	r2, [r3, #20]
 800b68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b692:	441a      	add	r2, r3
 800b694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6a1a      	ldr	r2, [r3, #32]
 800b6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d90f      	bls.n	800b6dc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6a1a      	ldr	r2, [r3, #32]
 800b6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6cc:	1ad2      	subs	r2, r2, r3
 800b6ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	621a      	str	r2, [r3, #32]
 800b6da:	e00e      	b.n	800b6fa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d177      	bne.n	800b7fa <USB_EPStartXfer+0x4c4>
 800b70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	61bb      	str	r3, [r7, #24]
 800b716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b724:	b29b      	uxth	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	4413      	add	r3, r2
 800b72c:	61bb      	str	r3, [r7, #24]
 800b72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	00da      	lsls	r2, r3, #3
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	4413      	add	r3, r2
 800b740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b744:	617b      	str	r3, [r7, #20]
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b750:	b29a      	uxth	r2, r3
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	801a      	strh	r2, [r3, #0]
 800b756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75a:	2b3e      	cmp	r3, #62	; 0x3e
 800b75c:	d921      	bls.n	800b7a2 <USB_EPStartXfer+0x46c>
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b762:	095b      	lsrs	r3, r3, #5
 800b764:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76c:	f003 031f 	and.w	r3, r3, #31
 800b770:	2b00      	cmp	r3, #0
 800b772:	d104      	bne.n	800b77e <USB_EPStartXfer+0x448>
 800b774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b778:	3b01      	subs	r3, #1
 800b77a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	b29a      	uxth	r2, r3
 800b784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b788:	b29b      	uxth	r3, r3
 800b78a:	029b      	lsls	r3, r3, #10
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	4313      	orrs	r3, r2
 800b790:	b29b      	uxth	r3, r3
 800b792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	801a      	strh	r2, [r3, #0]
 800b7a0:	e056      	b.n	800b850 <USB_EPStartXfer+0x51a>
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <USB_EPStartXfer+0x48a>
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	801a      	strh	r2, [r3, #0]
 800b7be:	e047      	b.n	800b850 <USB_EPStartXfer+0x51a>
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c4:	085b      	lsrs	r3, r3, #1
 800b7c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d004      	beq.n	800b7e0 <USB_EPStartXfer+0x4aa>
 800b7d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7da:	3301      	adds	r3, #1
 800b7dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	029b      	lsls	r3, r3, #10
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	801a      	strh	r2, [r3, #0]
 800b7f8:	e02a      	b.n	800b850 <USB_EPStartXfer+0x51a>
 800b7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	785b      	ldrb	r3, [r3, #1]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d122      	bne.n	800b850 <USB_EPStartXfer+0x51a>
 800b80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b80e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	623b      	str	r3, [r7, #32]
 800b816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b824:	b29b      	uxth	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	4413      	add	r3, r2
 800b82c:	623b      	str	r3, [r7, #32]
 800b82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	00da      	lsls	r2, r3, #3
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	4413      	add	r3, r2
 800b840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b844:	61fb      	str	r3, [r7, #28]
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	891b      	ldrh	r3, [r3, #8]
 800b85c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6959      	ldr	r1, [r3, #20]
 800b86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b870:	b29b      	uxth	r3, r3
 800b872:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b876:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b87a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	f001 fa44 	bl	800cd0c <USB_WritePMA>
 800b884:	e3ee      	b.n	800c064 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	785b      	ldrb	r3, [r3, #1]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d177      	bne.n	800b986 <USB_EPStartXfer+0x650>
 800b896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b6:	4413      	add	r3, r2
 800b8b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	00da      	lsls	r2, r3, #3
 800b8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8e0:	801a      	strh	r2, [r3, #0]
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e6:	2b3e      	cmp	r3, #62	; 0x3e
 800b8e8:	d921      	bls.n	800b92e <USB_EPStartXfer+0x5f8>
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ee:	095b      	lsrs	r3, r3, #5
 800b8f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f8:	f003 031f 	and.w	r3, r3, #31
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d104      	bne.n	800b90a <USB_EPStartXfer+0x5d4>
 800b900:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b904:	3b01      	subs	r3, #1
 800b906:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	b29a      	uxth	r2, r3
 800b910:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b914:	b29b      	uxth	r3, r3
 800b916:	029b      	lsls	r3, r3, #10
 800b918:	b29b      	uxth	r3, r3
 800b91a:	4313      	orrs	r3, r2
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b926:	b29a      	uxth	r2, r3
 800b928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b92a:	801a      	strh	r2, [r3, #0]
 800b92c:	e056      	b.n	800b9dc <USB_EPStartXfer+0x6a6>
 800b92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <USB_EPStartXfer+0x616>
 800b936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b944:	b29a      	uxth	r2, r3
 800b946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b948:	801a      	strh	r2, [r3, #0]
 800b94a:	e047      	b.n	800b9dc <USB_EPStartXfer+0x6a6>
 800b94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b950:	085b      	lsrs	r3, r3, #1
 800b952:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95a:	f003 0301 	and.w	r3, r3, #1
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d004      	beq.n	800b96c <USB_EPStartXfer+0x636>
 800b962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b966:	3301      	adds	r3, #1
 800b968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	b29a      	uxth	r2, r3
 800b972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b976:	b29b      	uxth	r3, r3
 800b978:	029b      	lsls	r3, r3, #10
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	4313      	orrs	r3, r2
 800b97e:	b29a      	uxth	r2, r3
 800b980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b982:	801a      	strh	r2, [r3, #0]
 800b984:	e02a      	b.n	800b9dc <USB_EPStartXfer+0x6a6>
 800b986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	785b      	ldrb	r3, [r3, #1]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d122      	bne.n	800b9dc <USB_EPStartXfer+0x6a6>
 800b996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b6:	4413      	add	r3, r2
 800b9b8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	00da      	lsls	r2, r3, #3
 800b9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	891b      	ldrh	r3, [r3, #8]
 800b9e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	6959      	ldr	r1, [r3, #20]
 800b9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ba06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ba0a:	6800      	ldr	r0, [r0, #0]
 800ba0c:	f001 f97e 	bl	800cd0c <USB_WritePMA>
            ep->xfer_buff += len;
 800ba10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695a      	ldr	r2, [r3, #20]
 800ba1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba20:	441a      	add	r2, r3
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ba2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6a1a      	ldr	r2, [r3, #32]
 800ba3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d90f      	bls.n	800ba6a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ba4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5a:	1ad2      	subs	r2, r2, r3
 800ba5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	621a      	str	r2, [r3, #32]
 800ba68:	e00e      	b.n	800ba88 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ba6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ba7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2200      	movs	r2, #0
 800ba86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	643b      	str	r3, [r7, #64]	; 0x40
 800ba94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	785b      	ldrb	r3, [r3, #1]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d177      	bne.n	800bb94 <USB_EPStartXfer+0x85e>
 800baa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	63bb      	str	r3, [r7, #56]	; 0x38
 800bab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800babe:	b29b      	uxth	r3, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	4413      	add	r3, r2
 800bac6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	00da      	lsls	r2, r3, #3
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	4413      	add	r3, r2
 800bada:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bade:	637b      	str	r3, [r7, #52]	; 0x34
 800bae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baea:	b29a      	uxth	r2, r3
 800baec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baee:	801a      	strh	r2, [r3, #0]
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf4:	2b3e      	cmp	r3, #62	; 0x3e
 800baf6:	d921      	bls.n	800bb3c <USB_EPStartXfer+0x806>
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafc:	095b      	lsrs	r3, r3, #5
 800bafe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb06:	f003 031f 	and.w	r3, r3, #31
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d104      	bne.n	800bb18 <USB_EPStartXfer+0x7e2>
 800bb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb12:	3b01      	subs	r3, #1
 800bb14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	029b      	lsls	r3, r3, #10
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb38:	801a      	strh	r2, [r3, #0]
 800bb3a:	e050      	b.n	800bbde <USB_EPStartXfer+0x8a8>
 800bb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <USB_EPStartXfer+0x824>
 800bb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb56:	801a      	strh	r2, [r3, #0]
 800bb58:	e041      	b.n	800bbde <USB_EPStartXfer+0x8a8>
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5e:	085b      	lsrs	r3, r3, #1
 800bb60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <USB_EPStartXfer+0x844>
 800bb70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb74:	3301      	adds	r3, #1
 800bb76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	029b      	lsls	r3, r3, #10
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb90:	801a      	strh	r2, [r3, #0]
 800bb92:	e024      	b.n	800bbde <USB_EPStartXfer+0x8a8>
 800bb94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	785b      	ldrb	r3, [r3, #1]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d11c      	bne.n	800bbde <USB_EPStartXfer+0x8a8>
 800bba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb8:	4413      	add	r3, r2
 800bbba:	643b      	str	r3, [r7, #64]	; 0x40
 800bbbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	00da      	lsls	r2, r3, #3
 800bbca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbcc:	4413      	add	r3, r2
 800bbce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bbde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	895b      	ldrh	r3, [r3, #10]
 800bbea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6959      	ldr	r1, [r3, #20]
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	f001 f87d 	bl	800cd0c <USB_WritePMA>
 800bc12:	e227      	b.n	800c064 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bc24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bc46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bc4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	441a      	add	r2, r3
 800bc68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bc6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bc80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bca0:	4413      	add	r3, r2
 800bca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	00da      	lsls	r2, r3, #3
 800bcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcba:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bcc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	891b      	ldrh	r3, [r3, #8]
 800bcd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6959      	ldr	r1, [r3, #20]
 800bce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bcec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bcf0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bcf4:	6800      	ldr	r0, [r0, #0]
 800bcf6:	f001 f809 	bl	800cd0c <USB_WritePMA>
 800bcfa:	e1b3      	b.n	800c064 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bcfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6a1a      	ldr	r2, [r3, #32]
 800bd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0c:	1ad2      	subs	r2, r2, r3
 800bd0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bd1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 80c6 	beq.w	800bece <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	673b      	str	r3, [r7, #112]	; 0x70
 800bd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	785b      	ldrb	r3, [r3, #1]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d177      	bne.n	800be4e <USB_EPStartXfer+0xb18>
 800bd5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd7e:	4413      	add	r3, r2
 800bd80:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	00da      	lsls	r2, r3, #3
 800bd90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd92:	4413      	add	r3, r2
 800bd94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd98:	667b      	str	r3, [r7, #100]	; 0x64
 800bd9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bda8:	801a      	strh	r2, [r3, #0]
 800bdaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdae:	2b3e      	cmp	r3, #62	; 0x3e
 800bdb0:	d921      	bls.n	800bdf6 <USB_EPStartXfer+0xac0>
 800bdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb6:	095b      	lsrs	r3, r3, #5
 800bdb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc0:	f003 031f 	and.w	r3, r3, #31
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d104      	bne.n	800bdd2 <USB_EPStartXfer+0xa9c>
 800bdc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bdd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	029b      	lsls	r3, r3, #10
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	4313      	orrs	r3, r2
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdf2:	801a      	strh	r2, [r3, #0]
 800bdf4:	e050      	b.n	800be98 <USB_EPStartXfer+0xb62>
 800bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10a      	bne.n	800be14 <USB_EPStartXfer+0xade>
 800bdfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	b29b      	uxth	r3, r3
 800be04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be10:	801a      	strh	r2, [r3, #0]
 800be12:	e041      	b.n	800be98 <USB_EPStartXfer+0xb62>
 800be14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be18:	085b      	lsrs	r3, r3, #1
 800be1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d004      	beq.n	800be34 <USB_EPStartXfer+0xafe>
 800be2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be2e:	3301      	adds	r3, #1
 800be30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29a      	uxth	r2, r3
 800be3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be3e:	b29b      	uxth	r3, r3
 800be40:	029b      	lsls	r3, r3, #10
 800be42:	b29b      	uxth	r3, r3
 800be44:	4313      	orrs	r3, r2
 800be46:	b29a      	uxth	r2, r3
 800be48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be4a:	801a      	strh	r2, [r3, #0]
 800be4c:	e024      	b.n	800be98 <USB_EPStartXfer+0xb62>
 800be4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d11c      	bne.n	800be98 <USB_EPStartXfer+0xb62>
 800be5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	461a      	mov	r2, r3
 800be70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be72:	4413      	add	r3, r2
 800be74:	673b      	str	r3, [r7, #112]	; 0x70
 800be76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	00da      	lsls	r2, r3, #3
 800be84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be86:	4413      	add	r3, r2
 800be88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be92:	b29a      	uxth	r2, r3
 800be94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800be98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	895b      	ldrh	r3, [r3, #10]
 800bea4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6959      	ldr	r1, [r3, #20]
 800beb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb8:	b29b      	uxth	r3, r3
 800beba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bebe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bec2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bec6:	6800      	ldr	r0, [r0, #0]
 800bec8:	f000 ff20 	bl	800cd0c <USB_WritePMA>
 800becc:	e0ca      	b.n	800c064 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d177      	bne.n	800bfce <USB_EPStartXfer+0xc98>
 800bede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800beea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bef8:	b29b      	uxth	r3, r3
 800befa:	461a      	mov	r2, r3
 800befc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800befe:	4413      	add	r3, r2
 800bf00:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	00da      	lsls	r2, r3, #3
 800bf10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf12:	4413      	add	r3, r2
 800bf14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf18:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf28:	801a      	strh	r2, [r3, #0]
 800bf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2e:	2b3e      	cmp	r3, #62	; 0x3e
 800bf30:	d921      	bls.n	800bf76 <USB_EPStartXfer+0xc40>
 800bf32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf36:	095b      	lsrs	r3, r3, #5
 800bf38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf40:	f003 031f 	and.w	r3, r3, #31
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d104      	bne.n	800bf52 <USB_EPStartXfer+0xc1c>
 800bf48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	029b      	lsls	r3, r3, #10
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	4313      	orrs	r3, r2
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf72:	801a      	strh	r2, [r3, #0]
 800bf74:	e05c      	b.n	800c030 <USB_EPStartXfer+0xcfa>
 800bf76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10a      	bne.n	800bf94 <USB_EPStartXfer+0xc5e>
 800bf7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf90:	801a      	strh	r2, [r3, #0]
 800bf92:	e04d      	b.n	800c030 <USB_EPStartXfer+0xcfa>
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf98:	085b      	lsrs	r3, r3, #1
 800bf9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d004      	beq.n	800bfb4 <USB_EPStartXfer+0xc7e>
 800bfaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfae:	3301      	adds	r3, #1
 800bfb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bfb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	029b      	lsls	r3, r3, #10
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfca:	801a      	strh	r2, [r3, #0]
 800bfcc:	e030      	b.n	800c030 <USB_EPStartXfer+0xcfa>
 800bfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	785b      	ldrb	r3, [r3, #1]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d128      	bne.n	800c030 <USB_EPStartXfer+0xcfa>
 800bfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bfec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	461a      	mov	r2, r3
 800bffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c002:	4413      	add	r3, r2
 800c004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	00da      	lsls	r2, r3, #3
 800c016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c01a:	4413      	add	r3, r2
 800c01c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c028:	b29a      	uxth	r2, r3
 800c02a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c02e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	891b      	ldrh	r3, [r3, #8]
 800c03c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6959      	ldr	r1, [r3, #20]
 800c04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c050:	b29b      	uxth	r3, r3
 800c052:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c056:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c05a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c05e:	6800      	ldr	r0, [r0, #0]
 800c060:	f000 fe54 	bl	800cd0c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	b29b      	uxth	r3, r3
 800c082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c08a:	817b      	strh	r3, [r7, #10]
 800c08c:	897b      	ldrh	r3, [r7, #10]
 800c08e:	f083 0310 	eor.w	r3, r3, #16
 800c092:	817b      	strh	r3, [r7, #10]
 800c094:	897b      	ldrh	r3, [r7, #10]
 800c096:	f083 0320 	eor.w	r3, r3, #32
 800c09a:	817b      	strh	r3, [r7, #10]
 800c09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	441a      	add	r2, r3
 800c0b6:	897b      	ldrh	r3, [r7, #10]
 800c0b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	8013      	strh	r3, [r2, #0]
 800c0cc:	f000 bcde 	b.w	800ca8c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	7b1b      	ldrb	r3, [r3, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f040 80bb 	bne.w	800c258 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699a      	ldr	r2, [r3, #24]
 800c0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d917      	bls.n	800c12e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11e:	1ad2      	subs	r2, r2, r3
 800c120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	619a      	str	r2, [r3, #24]
 800c12c:	e00e      	b.n	800c14c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2200      	movs	r2, #0
 800c14a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c15e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c168:	b29b      	uxth	r3, r3
 800c16a:	461a      	mov	r2, r3
 800c16c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c170:	4413      	add	r3, r2
 800c172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c17a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	00da      	lsls	r2, r3, #3
 800c184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c188:	4413      	add	r3, r2
 800c18a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c18e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1a4:	801a      	strh	r2, [r3, #0]
 800c1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1aa:	2b3e      	cmp	r3, #62	; 0x3e
 800c1ac:	d924      	bls.n	800c1f8 <USB_EPStartXfer+0xec2>
 800c1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b2:	095b      	lsrs	r3, r3, #5
 800c1b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1bc:	f003 031f 	and.w	r3, r3, #31
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d104      	bne.n	800c1ce <USB_EPStartXfer+0xe98>
 800c1c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	029b      	lsls	r3, r3, #10
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1f2:	801a      	strh	r2, [r3, #0]
 800c1f4:	f000 bc10 	b.w	800ca18 <USB_EPStartXfer+0x16e2>
 800c1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10c      	bne.n	800c21a <USB_EPStartXfer+0xee4>
 800c200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	b29b      	uxth	r3, r3
 800c208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c210:	b29a      	uxth	r2, r3
 800c212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c216:	801a      	strh	r2, [r3, #0]
 800c218:	e3fe      	b.n	800ca18 <USB_EPStartXfer+0x16e2>
 800c21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21e:	085b      	lsrs	r3, r3, #1
 800c220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d004      	beq.n	800c23a <USB_EPStartXfer+0xf04>
 800c230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c234:	3301      	adds	r3, #1
 800c236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c23a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	b29a      	uxth	r2, r3
 800c242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c246:	b29b      	uxth	r3, r3
 800c248:	029b      	lsls	r3, r3, #10
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	4313      	orrs	r3, r2
 800c24e:	b29a      	uxth	r2, r3
 800c250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c254:	801a      	strh	r2, [r3, #0]
 800c256:	e3df      	b.n	800ca18 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	78db      	ldrb	r3, [r3, #3]
 800c264:	2b02      	cmp	r3, #2
 800c266:	f040 8218 	bne.w	800c69a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	785b      	ldrb	r3, [r3, #1]
 800c276:	2b00      	cmp	r3, #0
 800c278:	f040 809d 	bne.w	800c3b6 <USB_EPStartXfer+0x1080>
 800c27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c298:	b29b      	uxth	r3, r3
 800c29a:	461a      	mov	r2, r3
 800c29c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	00da      	lsls	r2, r3, #3
 800c2b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2d4:	801a      	strh	r2, [r3, #0]
 800c2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	2b3e      	cmp	r3, #62	; 0x3e
 800c2e4:	d92b      	bls.n	800c33e <USB_EPStartXfer+0x1008>
 800c2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	095b      	lsrs	r3, r3, #5
 800c2f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	f003 031f 	and.w	r3, r3, #31
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d104      	bne.n	800c316 <USB_EPStartXfer+0xfe0>
 800c30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c310:	3b01      	subs	r3, #1
 800c312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c31a:	881b      	ldrh	r3, [r3, #0]
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c322:	b29b      	uxth	r3, r3
 800c324:	029b      	lsls	r3, r3, #10
 800c326:	b29b      	uxth	r3, r3
 800c328:	4313      	orrs	r3, r2
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c334:	b29a      	uxth	r2, r3
 800c336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c33a:	801a      	strh	r2, [r3, #0]
 800c33c:	e070      	b.n	800c420 <USB_EPStartXfer+0x10ea>
 800c33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10c      	bne.n	800c368 <USB_EPStartXfer+0x1032>
 800c34e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	b29b      	uxth	r3, r3
 800c356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c35a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c35e:	b29a      	uxth	r2, r3
 800c360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c364:	801a      	strh	r2, [r3, #0]
 800c366:	e05b      	b.n	800c420 <USB_EPStartXfer+0x10ea>
 800c368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	085b      	lsrs	r3, r3, #1
 800c376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d004      	beq.n	800c398 <USB_EPStartXfer+0x1062>
 800c38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c392:	3301      	adds	r3, #1
 800c394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c39c:	881b      	ldrh	r3, [r3, #0]
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	029b      	lsls	r3, r3, #10
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3b2:	801a      	strh	r2, [r3, #0]
 800c3b4:	e034      	b.n	800c420 <USB_EPStartXfer+0x10ea>
 800c3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	785b      	ldrb	r3, [r3, #1]
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d12c      	bne.n	800c420 <USB_EPStartXfer+0x10ea>
 800c3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	00da      	lsls	r2, r3, #3
 800c3fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c402:	4413      	add	r3, r2
 800c404:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	b29a      	uxth	r2, r3
 800c41a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c41e:	801a      	strh	r2, [r3, #0]
 800c420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f040 809d 	bne.w	800c57a <USB_EPStartXfer+0x1244>
 800c440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	461a      	mov	r2, r3
 800c460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c464:	4413      	add	r3, r2
 800c466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	00da      	lsls	r2, r3, #3
 800c478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c47c:	4413      	add	r3, r2
 800c47e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c492:	b29a      	uxth	r2, r3
 800c494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c498:	801a      	strh	r2, [r3, #0]
 800c49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	2b3e      	cmp	r3, #62	; 0x3e
 800c4a8:	d92b      	bls.n	800c502 <USB_EPStartXfer+0x11cc>
 800c4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	095b      	lsrs	r3, r3, #5
 800c4b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	f003 031f 	and.w	r3, r3, #31
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d104      	bne.n	800c4da <USB_EPStartXfer+0x11a4>
 800c4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	b29a      	uxth	r2, r3
 800c4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	029b      	lsls	r3, r3, #10
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4fe:	801a      	strh	r2, [r3, #0]
 800c500:	e069      	b.n	800c5d6 <USB_EPStartXfer+0x12a0>
 800c502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10c      	bne.n	800c52c <USB_EPStartXfer+0x11f6>
 800c512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	b29b      	uxth	r3, r3
 800c51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c522:	b29a      	uxth	r2, r3
 800c524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c528:	801a      	strh	r2, [r3, #0]
 800c52a:	e054      	b.n	800c5d6 <USB_EPStartXfer+0x12a0>
 800c52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	085b      	lsrs	r3, r3, #1
 800c53a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c53e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d004      	beq.n	800c55c <USB_EPStartXfer+0x1226>
 800c552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c556:	3301      	adds	r3, #1
 800c558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c55c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	b29a      	uxth	r2, r3
 800c564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c568:	b29b      	uxth	r3, r3
 800c56a:	029b      	lsls	r3, r3, #10
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	4313      	orrs	r3, r2
 800c570:	b29a      	uxth	r2, r3
 800c572:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c576:	801a      	strh	r2, [r3, #0]
 800c578:	e02d      	b.n	800c5d6 <USB_EPStartXfer+0x12a0>
 800c57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	785b      	ldrb	r3, [r3, #1]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d125      	bne.n	800c5d6 <USB_EPStartXfer+0x12a0>
 800c58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c58e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c598:	b29b      	uxth	r3, r3
 800c59a:	461a      	mov	r2, r3
 800c59c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	00da      	lsls	r2, r3, #3
 800c5b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5d4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 8218 	beq.w	800ca18 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c608:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c60c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d005      	beq.n	800c620 <USB_EPStartXfer+0x12ea>
 800c614:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10d      	bne.n	800c63c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c620:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f040 81f5 	bne.w	800ca18 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c62e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c636:	2b00      	cmp	r3, #0
 800c638:	f040 81ee 	bne.w	800ca18 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	b29b      	uxth	r3, r3
 800c65a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c662:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c66a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	441a      	add	r2, r3
 800c680:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c68c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c694:	b29b      	uxth	r3, r3
 800c696:	8013      	strh	r3, [r2, #0]
 800c698:	e1be      	b.n	800ca18 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c69e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	78db      	ldrb	r3, [r3, #3]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	f040 81b4 	bne.w	800ca14 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	699a      	ldr	r2, [r3, #24]
 800c6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d917      	bls.n	800c6f8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	699a      	ldr	r2, [r3, #24]
 800c6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6e8:	1ad2      	subs	r2, r2, r3
 800c6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	619a      	str	r2, [r3, #24]
 800c6f6:	e00e      	b.n	800c716 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2200      	movs	r2, #0
 800c714:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	785b      	ldrb	r3, [r3, #1]
 800c722:	2b00      	cmp	r3, #0
 800c724:	f040 8085 	bne.w	800c832 <USB_EPStartXfer+0x14fc>
 800c728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c72c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c73a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c744:	b29b      	uxth	r3, r3
 800c746:	461a      	mov	r2, r3
 800c748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c74c:	4413      	add	r3, r2
 800c74e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	00da      	lsls	r2, r3, #3
 800c760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c764:	4413      	add	r3, r2
 800c766:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c76a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c76e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	b29b      	uxth	r3, r3
 800c776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c780:	801a      	strh	r2, [r3, #0]
 800c782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c786:	2b3e      	cmp	r3, #62	; 0x3e
 800c788:	d923      	bls.n	800c7d2 <USB_EPStartXfer+0x149c>
 800c78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78e:	095b      	lsrs	r3, r3, #5
 800c790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c798:	f003 031f 	and.w	r3, r3, #31
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d104      	bne.n	800c7aa <USB_EPStartXfer+0x1474>
 800c7a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c7aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	029b      	lsls	r3, r3, #10
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7ce:	801a      	strh	r2, [r3, #0]
 800c7d0:	e060      	b.n	800c894 <USB_EPStartXfer+0x155e>
 800c7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10c      	bne.n	800c7f4 <USB_EPStartXfer+0x14be>
 800c7da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7f0:	801a      	strh	r2, [r3, #0]
 800c7f2:	e04f      	b.n	800c894 <USB_EPStartXfer+0x155e>
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7f8:	085b      	lsrs	r3, r3, #1
 800c7fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d004      	beq.n	800c814 <USB_EPStartXfer+0x14de>
 800c80a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c80e:	3301      	adds	r3, #1
 800c810:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c820:	b29b      	uxth	r3, r3
 800c822:	029b      	lsls	r3, r3, #10
 800c824:	b29b      	uxth	r3, r3
 800c826:	4313      	orrs	r3, r2
 800c828:	b29a      	uxth	r2, r3
 800c82a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c82e:	801a      	strh	r2, [r3, #0]
 800c830:	e030      	b.n	800c894 <USB_EPStartXfer+0x155e>
 800c832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	785b      	ldrb	r3, [r3, #1]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d128      	bne.n	800c894 <USB_EPStartXfer+0x155e>
 800c842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c85e:	b29b      	uxth	r3, r3
 800c860:	461a      	mov	r2, r3
 800c862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c866:	4413      	add	r3, r2
 800c868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	00da      	lsls	r2, r3, #3
 800c87a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c87e:	4413      	add	r3, r2
 800c880:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c892:	801a      	strh	r2, [r3, #0]
 800c894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	785b      	ldrb	r3, [r3, #1]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f040 8085 	bne.w	800c9be <USB_EPStartXfer+0x1688>
 800c8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8d8:	4413      	add	r3, r2
 800c8da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	00da      	lsls	r2, r3, #3
 800c8ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	b29b      	uxth	r3, r3
 800c902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c906:	b29a      	uxth	r2, r3
 800c908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c90c:	801a      	strh	r2, [r3, #0]
 800c90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c912:	2b3e      	cmp	r3, #62	; 0x3e
 800c914:	d923      	bls.n	800c95e <USB_EPStartXfer+0x1628>
 800c916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c91a:	095b      	lsrs	r3, r3, #5
 800c91c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c924:	f003 031f 	and.w	r3, r3, #31
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d104      	bne.n	800c936 <USB_EPStartXfer+0x1600>
 800c92c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c930:	3b01      	subs	r3, #1
 800c932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c942:	b29b      	uxth	r3, r3
 800c944:	029b      	lsls	r3, r3, #10
 800c946:	b29b      	uxth	r3, r3
 800c948:	4313      	orrs	r3, r2
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c954:	b29a      	uxth	r2, r3
 800c956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c95a:	801a      	strh	r2, [r3, #0]
 800c95c:	e05c      	b.n	800ca18 <USB_EPStartXfer+0x16e2>
 800c95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10c      	bne.n	800c980 <USB_EPStartXfer+0x164a>
 800c966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c976:	b29a      	uxth	r2, r3
 800c978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c97c:	801a      	strh	r2, [r3, #0]
 800c97e:	e04b      	b.n	800ca18 <USB_EPStartXfer+0x16e2>
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c984:	085b      	lsrs	r3, r3, #1
 800c986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b00      	cmp	r3, #0
 800c994:	d004      	beq.n	800c9a0 <USB_EPStartXfer+0x166a>
 800c996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c99a:	3301      	adds	r3, #1
 800c99c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c9a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	029b      	lsls	r3, r3, #10
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c9ba:	801a      	strh	r2, [r3, #0]
 800c9bc:	e02c      	b.n	800ca18 <USB_EPStartXfer+0x16e2>
 800c9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	785b      	ldrb	r3, [r3, #1]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d124      	bne.n	800ca18 <USB_EPStartXfer+0x16e2>
 800c9ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	461a      	mov	r2, r3
 800c9e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	00da      	lsls	r2, r3, #3
 800c9f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca10:	801a      	strh	r2, [r3, #0]
 800ca12:	e001      	b.n	800ca18 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e03a      	b.n	800ca8e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca3e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ca4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ca56:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	441a      	add	r2, r3
 800ca74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d020      	beq.n	800caec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac0:	81bb      	strh	r3, [r7, #12]
 800cac2:	89bb      	ldrh	r3, [r7, #12]
 800cac4:	f083 0310 	eor.w	r3, r3, #16
 800cac8:	81bb      	strh	r3, [r7, #12]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	441a      	add	r2, r3
 800cad4:	89bb      	ldrh	r3, [r7, #12]
 800cad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	8013      	strh	r3, [r2, #0]
 800caea:	e01f      	b.n	800cb2c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb02:	81fb      	strh	r3, [r7, #14]
 800cb04:	89fb      	ldrh	r3, [r7, #14]
 800cb06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb0a:	81fb      	strh	r3, [r7, #14]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	441a      	add	r2, r3
 800cb16:	89fb      	ldrh	r3, [r7, #14]
 800cb18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr

0800cb3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b087      	sub	sp, #28
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
 800cb42:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	7b1b      	ldrb	r3, [r3, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f040 809d 	bne.w	800cc88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	785b      	ldrb	r3, [r3, #1]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d04c      	beq.n	800cbf0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	881b      	ldrh	r3, [r3, #0]
 800cb62:	823b      	strh	r3, [r7, #16]
 800cb64:	8a3b      	ldrh	r3, [r7, #16]
 800cb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d01b      	beq.n	800cba6 <USB_EPClearStall+0x6c>
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb84:	81fb      	strh	r3, [r7, #14]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	441a      	add	r2, r3
 800cb90:	89fb      	ldrh	r3, [r7, #14]
 800cb92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	78db      	ldrb	r3, [r3, #3]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d06c      	beq.n	800cc88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbc4:	81bb      	strh	r3, [r7, #12]
 800cbc6:	89bb      	ldrh	r3, [r7, #12]
 800cbc8:	f083 0320 	eor.w	r3, r3, #32
 800cbcc:	81bb      	strh	r3, [r7, #12]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	441a      	add	r2, r3
 800cbd8:	89bb      	ldrh	r3, [r7, #12]
 800cbda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8013      	strh	r3, [r2, #0]
 800cbee:	e04b      	b.n	800cc88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	82fb      	strh	r3, [r7, #22]
 800cbfe:	8afb      	ldrh	r3, [r7, #22]
 800cc00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01b      	beq.n	800cc40 <USB_EPClearStall+0x106>
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	881b      	ldrh	r3, [r3, #0]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc1e:	82bb      	strh	r3, [r7, #20]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	441a      	add	r2, r3
 800cc2a:	8abb      	ldrh	r3, [r7, #20]
 800cc2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc56:	827b      	strh	r3, [r7, #18]
 800cc58:	8a7b      	ldrh	r3, [r7, #18]
 800cc5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc5e:	827b      	strh	r3, [r7, #18]
 800cc60:	8a7b      	ldrh	r3, [r7, #18]
 800cc62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cc66:	827b      	strh	r3, [r7, #18]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	441a      	add	r2, r3
 800cc72:	8a7b      	ldrh	r3, [r7, #18]
 800cc74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	371c      	adds	r7, #28
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cca2:	78fb      	ldrb	r3, [r7, #3]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d103      	bne.n	800ccb0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2280      	movs	r2, #128	; 0x80
 800ccac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b08b      	sub	sp, #44	; 0x2c
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	4611      	mov	r1, r2
 800cd18:	461a      	mov	r2, r3
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	80fb      	strh	r3, [r7, #6]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cd22:	88bb      	ldrh	r3, [r7, #4]
 800cd24:	3301      	adds	r3, #1
 800cd26:	085b      	lsrs	r3, r3, #1
 800cd28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cd32:	88fa      	ldrh	r2, [r7, #6]
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	4413      	add	r3, r2
 800cd38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd3c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	627b      	str	r3, [r7, #36]	; 0x24
 800cd42:	e01b      	b.n	800cd7c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	021b      	lsls	r3, r3, #8
 800cd52:	b21a      	sxth	r2, r3
 800cd54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	b21b      	sxth	r3, r3
 800cd5c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cd5e:	6a3b      	ldr	r3, [r7, #32]
 800cd60:	8a7a      	ldrh	r2, [r7, #18]
 800cd62:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	3302      	adds	r3, #2
 800cd68:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	3301      	adds	r3, #1
 800cd74:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1e0      	bne.n	800cd44 <USB_WritePMA+0x38>
  }
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	372c      	adds	r7, #44	; 0x2c
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b08b      	sub	sp, #44	; 0x2c
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	460b      	mov	r3, r1
 800cda0:	80fb      	strh	r3, [r7, #6]
 800cda2:	4613      	mov	r3, r2
 800cda4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cda6:	88bb      	ldrh	r3, [r7, #4]
 800cda8:	085b      	lsrs	r3, r3, #1
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cdb6:	88fa      	ldrh	r2, [r7, #6]
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	4413      	add	r3, r2
 800cdbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdc0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc6:	e018      	b.n	800cdfa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cdc8:	6a3b      	ldr	r3, [r7, #32]
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cdd0:	6a3b      	ldr	r3, [r7, #32]
 800cdd2:	3302      	adds	r3, #2
 800cdd4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	3301      	adds	r3, #1
 800cde2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	0a1b      	lsrs	r3, r3, #8
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	627b      	str	r3, [r7, #36]	; 0x24
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1e3      	bne.n	800cdc8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ce00:	88bb      	ldrh	r3, [r7, #4]
 800ce02:	f003 0301 	and.w	r3, r3, #1
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d007      	beq.n	800ce1c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ce0c:	6a3b      	ldr	r3, [r7, #32]
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	701a      	strb	r2, [r3, #0]
  }
}
 800ce1c:	bf00      	nop
 800ce1e:	372c      	adds	r7, #44	; 0x2c
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ce38:	f002 f8fc 	bl	800f034 <USBD_static_malloc>
 800ce3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d105      	bne.n	800ce50 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e066      	b.n	800cf1e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	7c1b      	ldrb	r3, [r3, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d119      	bne.n	800ce94 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ce60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce64:	2202      	movs	r2, #2
 800ce66:	2181      	movs	r1, #129	; 0x81
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f001 ff8a 	bl	800ed82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ce74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce78:	2202      	movs	r2, #2
 800ce7a:	2101      	movs	r1, #1
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f001 ff80 	bl	800ed82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2210      	movs	r2, #16
 800ce8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ce92:	e016      	b.n	800cec2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ce94:	2340      	movs	r3, #64	; 0x40
 800ce96:	2202      	movs	r2, #2
 800ce98:	2181      	movs	r1, #129	; 0x81
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 ff71 	bl	800ed82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cea6:	2340      	movs	r3, #64	; 0x40
 800cea8:	2202      	movs	r2, #2
 800ceaa:	2101      	movs	r1, #1
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 ff68 	bl	800ed82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2210      	movs	r2, #16
 800cebe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cec2:	2308      	movs	r3, #8
 800cec4:	2203      	movs	r2, #3
 800cec6:	2182      	movs	r1, #130	; 0x82
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 ff5a 	bl	800ed82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	7c1b      	ldrb	r3, [r3, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d109      	bne.n	800cf0c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cefe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf02:	2101      	movs	r1, #1
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f002 f82b 	bl	800ef60 <USBD_LL_PrepareReceive>
 800cf0a:	e007      	b.n	800cf1c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf12:	2340      	movs	r3, #64	; 0x40
 800cf14:	2101      	movs	r1, #1
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f002 f822 	bl	800ef60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cf32:	2181      	movs	r1, #129	; 0x81
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f001 ff4a 	bl	800edce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cf40:	2101      	movs	r1, #1
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f001 ff43 	bl	800edce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cf50:	2182      	movs	r1, #130	; 0x82
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f001 ff3b 	bl	800edce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00e      	beq.n	800cf90 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf82:	4618      	mov	r0, r3
 800cf84:	f002 f864 	bl	800f050 <USBD_static_free>
    pdev->pClassData = NULL;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e0af      	b.n	800d124 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d03f      	beq.n	800d050 <USBD_CDC_Setup+0xb4>
 800cfd0:	2b20      	cmp	r3, #32
 800cfd2:	f040 809f 	bne.w	800d114 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	88db      	ldrh	r3, [r3, #6]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d02e      	beq.n	800d03c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	b25b      	sxtb	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	da16      	bge.n	800d016 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cff4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	88d2      	ldrh	r2, [r2, #6]
 800cffa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	88db      	ldrh	r3, [r3, #6]
 800d000:	2b07      	cmp	r3, #7
 800d002:	bf28      	it	cs
 800d004:	2307      	movcs	r3, #7
 800d006:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	89fa      	ldrh	r2, [r7, #14]
 800d00c:	4619      	mov	r1, r3
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f001 facf 	bl	800e5b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d014:	e085      	b.n	800d122 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	785a      	ldrb	r2, [r3, #1]
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	88db      	ldrh	r3, [r3, #6]
 800d024:	b2da      	uxtb	r2, r3
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d02c:	6939      	ldr	r1, [r7, #16]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	88db      	ldrh	r3, [r3, #6]
 800d032:	461a      	mov	r2, r3
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f001 fae8 	bl	800e60a <USBD_CtlPrepareRx>
      break;
 800d03a:	e072      	b.n	800d122 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	7850      	ldrb	r0, [r2, #1]
 800d048:	2200      	movs	r2, #0
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	4798      	blx	r3
      break;
 800d04e:	e068      	b.n	800d122 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	2b0b      	cmp	r3, #11
 800d056:	d852      	bhi.n	800d0fe <USBD_CDC_Setup+0x162>
 800d058:	a201      	add	r2, pc, #4	; (adr r2, 800d060 <USBD_CDC_Setup+0xc4>)
 800d05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05e:	bf00      	nop
 800d060:	0800d091 	.word	0x0800d091
 800d064:	0800d10d 	.word	0x0800d10d
 800d068:	0800d0ff 	.word	0x0800d0ff
 800d06c:	0800d0ff 	.word	0x0800d0ff
 800d070:	0800d0ff 	.word	0x0800d0ff
 800d074:	0800d0ff 	.word	0x0800d0ff
 800d078:	0800d0ff 	.word	0x0800d0ff
 800d07c:	0800d0ff 	.word	0x0800d0ff
 800d080:	0800d0ff 	.word	0x0800d0ff
 800d084:	0800d0ff 	.word	0x0800d0ff
 800d088:	0800d0bb 	.word	0x0800d0bb
 800d08c:	0800d0e5 	.word	0x0800d0e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d107      	bne.n	800d0ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d09c:	f107 030a 	add.w	r3, r7, #10
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f001 fa84 	bl	800e5b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0aa:	e032      	b.n	800d112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f001 fa0e 	bl	800e4d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	75fb      	strb	r3, [r7, #23]
          break;
 800d0b8:	e02b      	b.n	800d112 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d107      	bne.n	800d0d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d0c6:	f107 030d 	add.w	r3, r7, #13
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f001 fa6f 	bl	800e5b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0d4:	e01d      	b.n	800d112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f001 f9f9 	bl	800e4d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800d0e2:	e016      	b.n	800d112 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d00f      	beq.n	800d110 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f001 f9ec 	bl	800e4d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d0fc:	e008      	b.n	800d110 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f001 f9e5 	bl	800e4d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800d106:	2303      	movs	r3, #3
 800d108:	75fb      	strb	r3, [r7, #23]
          break;
 800d10a:	e002      	b.n	800d112 <USBD_CDC_Setup+0x176>
          break;
 800d10c:	bf00      	nop
 800d10e:	e008      	b.n	800d122 <USBD_CDC_Setup+0x186>
          break;
 800d110:	bf00      	nop
      }
      break;
 800d112:	e006      	b.n	800d122 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f001 f9da 	bl	800e4d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800d11c:	2303      	movs	r3, #3
 800d11e:	75fb      	strb	r3, [r7, #23]
      break;
 800d120:	bf00      	nop
  }

  return (uint8_t)ret;
 800d122:	7dfb      	ldrb	r3, [r7, #23]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3718      	adds	r7, #24
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d13e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d14a:	2303      	movs	r3, #3
 800d14c:	e04f      	b.n	800d1ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d154:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d156:	78fa      	ldrb	r2, [r7, #3]
 800d158:	6879      	ldr	r1, [r7, #4]
 800d15a:	4613      	mov	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	440b      	add	r3, r1
 800d164:	3318      	adds	r3, #24
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d029      	beq.n	800d1c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d16c:	78fa      	ldrb	r2, [r7, #3]
 800d16e:	6879      	ldr	r1, [r7, #4]
 800d170:	4613      	mov	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4413      	add	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	440b      	add	r3, r1
 800d17a:	3318      	adds	r3, #24
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	78f9      	ldrb	r1, [r7, #3]
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	460b      	mov	r3, r1
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	440b      	add	r3, r1
 800d188:	00db      	lsls	r3, r3, #3
 800d18a:	4403      	add	r3, r0
 800d18c:	3320      	adds	r3, #32
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	fbb2 f1f3 	udiv	r1, r2, r3
 800d194:	fb01 f303 	mul.w	r3, r1, r3
 800d198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d110      	bne.n	800d1c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d19e:	78fa      	ldrb	r2, [r7, #3]
 800d1a0:	6879      	ldr	r1, [r7, #4]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	4413      	add	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	440b      	add	r3, r1
 800d1ac:	3318      	adds	r3, #24
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1b2:	78f9      	ldrb	r1, [r7, #3]
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f001 feb0 	bl	800ef1e <USBD_LL_Transmit>
 800d1be:	e015      	b.n	800d1ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00b      	beq.n	800d1ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d1e8:	78fa      	ldrb	r2, [r7, #3]
 800d1ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b084      	sub	sp, #16
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	460b      	mov	r3, r1
 800d200:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d210:	2b00      	cmp	r3, #0
 800d212:	d101      	bne.n	800d218 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d214:	2303      	movs	r3, #3
 800d216:	e015      	b.n	800d244 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d218:	78fb      	ldrb	r3, [r7, #3]
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 fec0 	bl	800efa2 <USBD_LL_GetRxDataSize>
 800d222:	4602      	mov	r2, r0
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d23e:	4611      	mov	r1, r2
 800d240:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d25a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d262:	2303      	movs	r3, #3
 800d264:	e01b      	b.n	800d29e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d015      	beq.n	800d29c <USBD_CDC_EP0_RxReady+0x50>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d276:	2bff      	cmp	r3, #255	; 0xff
 800d278:	d010      	beq.n	800d29c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d288:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d290:	b292      	uxth	r2, r2
 800d292:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	22ff      	movs	r2, #255	; 0xff
 800d298:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2243      	movs	r2, #67	; 0x43
 800d2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d2b6:	4b03      	ldr	r3, [pc, #12]	; (800d2c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	20000094 	.word	0x20000094

0800d2c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2243      	movs	r2, #67	; 0x43
 800d2d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d2d6:	4b03      	ldr	r3, [pc, #12]	; (800d2e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr
 800d2e4:	20000050 	.word	0x20000050

0800d2e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2243      	movs	r2, #67	; 0x43
 800d2f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d2f6:	4b03      	ldr	r3, [pc, #12]	; (800d304 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr
 800d304:	200000d8 	.word	0x200000d8

0800d308 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	220a      	movs	r2, #10
 800d314:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d316:	4b03      	ldr	r3, [pc, #12]	; (800d324 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	2000000c 	.word	0x2000000c

0800d328 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d101      	bne.n	800d33c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d338:	2303      	movs	r3, #3
 800d33a:	e004      	b.n	800d346 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d344:	2300      	movs	r3, #0
}
 800d346:	4618      	mov	r0, r3
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d352:	b480      	push	{r7}
 800d354:	b087      	sub	sp, #28
 800d356:	af00      	add	r7, sp, #0
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	60b9      	str	r1, [r7, #8]
 800d35c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d364:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e008      	b.n	800d382 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	371c      	adds	r7, #28
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr

0800d38e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d38e:	b480      	push	{r7}
 800d390:	b085      	sub	sp, #20
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d39e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d101      	bne.n	800d3aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	e004      	b.n	800d3b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	683a      	ldr	r2, [r7, #0]
 800d3ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d101      	bne.n	800d3e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	e01a      	b.n	800d418 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d114      	bne.n	800d416 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d40a:	2181      	movs	r1, #129	; 0x81
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f001 fd86 	bl	800ef1e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d416:	7bfb      	ldrb	r3, [r7, #15]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d42e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d43a:	2303      	movs	r3, #3
 800d43c:	e016      	b.n	800d46c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7c1b      	ldrb	r3, [r3, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d109      	bne.n	800d45a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d44c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d450:	2101      	movs	r1, #1
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f001 fd84 	bl	800ef60 <USBD_LL_PrepareReceive>
 800d458:	e007      	b.n	800d46a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d460:	2340      	movs	r3, #64	; 0x40
 800d462:	2101      	movs	r1, #1
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 fd7b 	bl	800ef60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	4613      	mov	r3, r2
 800d480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d488:	2303      	movs	r3, #3
 800d48a:	e01f      	b.n	800d4cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d003      	beq.n	800d4b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	79fa      	ldrb	r2, [r7, #7]
 800d4be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f001 fbe3 	bl	800ec8c <USBD_LL_Init>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	e016      	b.n	800d51a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00b      	beq.n	800d518 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d508:	f107 020e 	add.w	r2, r7, #14
 800d50c:	4610      	mov	r0, r2
 800d50e:	4798      	blx	r3
 800d510:	4602      	mov	r2, r0
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b082      	sub	sp, #8
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f001 fc0e 	bl	800ed4c <USBD_LL_Start>
 800d530:	4603      	mov	r3, r0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d55c:	2303      	movs	r3, #3
 800d55e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d566:	2b00      	cmp	r3, #0
 800d568:	d009      	beq.n	800d57e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	78fa      	ldrb	r2, [r7, #3]
 800d574:	4611      	mov	r1, r2
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	4798      	blx	r3
 800d57a:	4603      	mov	r3, r0
 800d57c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d007      	beq.n	800d5ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	78fa      	ldrb	r2, [r7, #3]
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	4798      	blx	r3
  }

  return USBD_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 ff46 	bl	800e45c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d5de:	461a      	mov	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d5ec:	f003 031f 	and.w	r3, r3, #31
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d01a      	beq.n	800d62a <USBD_LL_SetupStage+0x72>
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d822      	bhi.n	800d63e <USBD_LL_SetupStage+0x86>
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <USBD_LL_SetupStage+0x4a>
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d00a      	beq.n	800d616 <USBD_LL_SetupStage+0x5e>
 800d600:	e01d      	b.n	800d63e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d608:	4619      	mov	r1, r3
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f9ee 	bl	800d9ec <USBD_StdDevReq>
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]
      break;
 800d614:	e020      	b.n	800d658 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d61c:	4619      	mov	r1, r3
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fa52 	bl	800dac8 <USBD_StdItfReq>
 800d624:	4603      	mov	r3, r0
 800d626:	73fb      	strb	r3, [r7, #15]
      break;
 800d628:	e016      	b.n	800d658 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d630:	4619      	mov	r1, r3
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fa91 	bl	800db5a <USBD_StdEPReq>
 800d638:	4603      	mov	r3, r0
 800d63a:	73fb      	strb	r3, [r7, #15]
      break;
 800d63c:	e00c      	b.n	800d658 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d644:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f001 fbdd 	bl	800ee0c <USBD_LL_StallEP>
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]
      break;
 800d656:	bf00      	nop
  }

  return ret;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b086      	sub	sp, #24
 800d666:	af00      	add	r7, sp, #0
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	460b      	mov	r3, r1
 800d66c:	607a      	str	r2, [r7, #4]
 800d66e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d670:	7afb      	ldrb	r3, [r7, #11]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d138      	bne.n	800d6e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d67c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d684:	2b03      	cmp	r3, #3
 800d686:	d14a      	bne.n	800d71e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	689a      	ldr	r2, [r3, #8]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	429a      	cmp	r2, r3
 800d692:	d913      	bls.n	800d6bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	689a      	ldr	r2, [r3, #8]
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	1ad2      	subs	r2, r2, r3
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	68da      	ldr	r2, [r3, #12]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	bf28      	it	cs
 800d6ae:	4613      	movcs	r3, r2
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f000 ffc5 	bl	800e644 <USBD_CtlContinueRx>
 800d6ba:	e030      	b.n	800d71e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	2b03      	cmp	r3, #3
 800d6c6:	d10b      	bne.n	800d6e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d005      	beq.n	800d6e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 ffc0 	bl	800e666 <USBD_CtlSendStatus>
 800d6e6:	e01a      	b.n	800d71e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b03      	cmp	r3, #3
 800d6f2:	d114      	bne.n	800d71e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fa:	699b      	ldr	r3, [r3, #24]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00e      	beq.n	800d71e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	7afa      	ldrb	r2, [r7, #11]
 800d70a:	4611      	mov	r1, r2
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	4798      	blx	r3
 800d710:	4603      	mov	r3, r0
 800d712:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	e000      	b.n	800d720 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	460b      	mov	r3, r1
 800d732:	607a      	str	r2, [r7, #4]
 800d734:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d736:	7afb      	ldrb	r3, [r7, #11]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d16b      	bne.n	800d814 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3314      	adds	r3, #20
 800d740:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d156      	bne.n	800d7fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	689a      	ldr	r2, [r3, #8]
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	429a      	cmp	r2, r3
 800d756:	d914      	bls.n	800d782 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	689a      	ldr	r2, [r3, #8]
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	1ad2      	subs	r2, r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	461a      	mov	r2, r3
 800d76c:	6879      	ldr	r1, [r7, #4]
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f000 ff3a 	bl	800e5e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d774:	2300      	movs	r3, #0
 800d776:	2200      	movs	r2, #0
 800d778:	2100      	movs	r1, #0
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f001 fbf0 	bl	800ef60 <USBD_LL_PrepareReceive>
 800d780:	e03b      	b.n	800d7fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	68da      	ldr	r2, [r3, #12]
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d11c      	bne.n	800d7c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d796:	429a      	cmp	r2, r3
 800d798:	d316      	bcc.n	800d7c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	685a      	ldr	r2, [r3, #4]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d20f      	bcs.n	800d7c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f000 ff1b 	bl	800e5e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2100      	movs	r1, #0
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f001 fbcd 	bl	800ef60 <USBD_LL_PrepareReceive>
 800d7c6:	e018      	b.n	800d7fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d10b      	bne.n	800d7ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d005      	beq.n	800d7ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7ec:	2180      	movs	r1, #128	; 0x80
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f001 fb0c 	bl	800ee0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f000 ff49 	bl	800e68c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d800:	2b01      	cmp	r3, #1
 800d802:	d122      	bne.n	800d84a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f7ff fe98 	bl	800d53a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d812:	e01a      	b.n	800d84a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	d114      	bne.n	800d84a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d826:	695b      	ldr	r3, [r3, #20]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00e      	beq.n	800d84a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	7afa      	ldrb	r2, [r7, #11]
 800d836:	4611      	mov	r1, r2
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	4798      	blx	r3
 800d83c:	4603      	mov	r3, r0
 800d83e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d840:	7dfb      	ldrb	r3, [r7, #23]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d001      	beq.n	800d84a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d846:	7dfb      	ldrb	r3, [r7, #23]
 800d848:	e000      	b.n	800d84c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d880:	2b00      	cmp	r3, #0
 800d882:	d101      	bne.n	800d888 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d884:	2303      	movs	r3, #3
 800d886:	e02f      	b.n	800d8e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00f      	beq.n	800d8b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d009      	beq.n	800d8b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	6852      	ldr	r2, [r2, #4]
 800d8aa:	b2d2      	uxtb	r2, r2
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8b2:	2340      	movs	r3, #64	; 0x40
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f001 fa62 	bl	800ed82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2240      	movs	r2, #64	; 0x40
 800d8ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8ce:	2340      	movs	r3, #64	; 0x40
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	2180      	movs	r1, #128	; 0x80
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f001 fa54 	bl	800ed82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2240      	movs	r2, #64	; 0x40
 800d8e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	78fa      	ldrb	r2, [r7, #3]
 800d900:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2204      	movs	r2, #4
 800d92a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b04      	cmp	r3, #4
 800d94e:	d106      	bne.n	800d95e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d956:	b2da      	uxtb	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d97e:	2303      	movs	r3, #3
 800d980:	e012      	b.n	800d9a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d10b      	bne.n	800d9a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d994:	69db      	ldr	r3, [r3, #28]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d005      	beq.n	800d9a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9a0:	69db      	ldr	r3, [r3, #28]
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d9ce:	8a3b      	ldrh	r3, [r7, #16]
 800d9d0:	021b      	lsls	r3, r3, #8
 800d9d2:	b21a      	sxth	r2, r3
 800d9d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	b21b      	sxth	r3, r3
 800d9dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d9de:	89fb      	ldrh	r3, [r7, #14]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	371c      	adds	r7, #28
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da02:	2b40      	cmp	r3, #64	; 0x40
 800da04:	d005      	beq.n	800da12 <USBD_StdDevReq+0x26>
 800da06:	2b40      	cmp	r3, #64	; 0x40
 800da08:	d853      	bhi.n	800dab2 <USBD_StdDevReq+0xc6>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00b      	beq.n	800da26 <USBD_StdDevReq+0x3a>
 800da0e:	2b20      	cmp	r3, #32
 800da10:	d14f      	bne.n	800dab2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	4798      	blx	r3
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]
      break;
 800da24:	e04a      	b.n	800dabc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	785b      	ldrb	r3, [r3, #1]
 800da2a:	2b09      	cmp	r3, #9
 800da2c:	d83b      	bhi.n	800daa6 <USBD_StdDevReq+0xba>
 800da2e:	a201      	add	r2, pc, #4	; (adr r2, 800da34 <USBD_StdDevReq+0x48>)
 800da30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da34:	0800da89 	.word	0x0800da89
 800da38:	0800da9d 	.word	0x0800da9d
 800da3c:	0800daa7 	.word	0x0800daa7
 800da40:	0800da93 	.word	0x0800da93
 800da44:	0800daa7 	.word	0x0800daa7
 800da48:	0800da67 	.word	0x0800da67
 800da4c:	0800da5d 	.word	0x0800da5d
 800da50:	0800daa7 	.word	0x0800daa7
 800da54:	0800da7f 	.word	0x0800da7f
 800da58:	0800da71 	.word	0x0800da71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da5c:	6839      	ldr	r1, [r7, #0]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f9de 	bl	800de20 <USBD_GetDescriptor>
          break;
 800da64:	e024      	b.n	800dab0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da66:	6839      	ldr	r1, [r7, #0]
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f000 fb6d 	bl	800e148 <USBD_SetAddress>
          break;
 800da6e:	e01f      	b.n	800dab0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fbac 	bl	800e1d0 <USBD_SetConfig>
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]
          break;
 800da7c:	e018      	b.n	800dab0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fc4b 	bl	800e31c <USBD_GetConfig>
          break;
 800da86:	e013      	b.n	800dab0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 fc7c 	bl	800e388 <USBD_GetStatus>
          break;
 800da90:	e00e      	b.n	800dab0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 fcab 	bl	800e3f0 <USBD_SetFeature>
          break;
 800da9a:	e009      	b.n	800dab0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fcba 	bl	800e418 <USBD_ClrFeature>
          break;
 800daa4:	e004      	b.n	800dab0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fd11 	bl	800e4d0 <USBD_CtlError>
          break;
 800daae:	bf00      	nop
      }
      break;
 800dab0:	e004      	b.n	800dabc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fd0b 	bl	800e4d0 <USBD_CtlError>
      break;
 800daba:	bf00      	nop
  }

  return ret;
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop

0800dac8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dade:	2b40      	cmp	r3, #64	; 0x40
 800dae0:	d005      	beq.n	800daee <USBD_StdItfReq+0x26>
 800dae2:	2b40      	cmp	r3, #64	; 0x40
 800dae4:	d82f      	bhi.n	800db46 <USBD_StdItfReq+0x7e>
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <USBD_StdItfReq+0x26>
 800daea:	2b20      	cmp	r3, #32
 800daec:	d12b      	bne.n	800db46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	3b01      	subs	r3, #1
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d81d      	bhi.n	800db38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	889b      	ldrh	r3, [r3, #4]
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b01      	cmp	r3, #1
 800db04:	d813      	bhi.n	800db2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	6839      	ldr	r1, [r7, #0]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	4798      	blx	r3
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	88db      	ldrh	r3, [r3, #6]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d110      	bne.n	800db42 <USBD_StdItfReq+0x7a>
 800db20:	7bfb      	ldrb	r3, [r7, #15]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10d      	bne.n	800db42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fd9d 	bl	800e666 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db2c:	e009      	b.n	800db42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800db2e:	6839      	ldr	r1, [r7, #0]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fccd 	bl	800e4d0 <USBD_CtlError>
          break;
 800db36:	e004      	b.n	800db42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fcc8 	bl	800e4d0 <USBD_CtlError>
          break;
 800db40:	e000      	b.n	800db44 <USBD_StdItfReq+0x7c>
          break;
 800db42:	bf00      	nop
      }
      break;
 800db44:	e004      	b.n	800db50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fcc1 	bl	800e4d0 <USBD_CtlError>
      break;
 800db4e:	bf00      	nop
  }

  return ret;
 800db50:	7bfb      	ldrb	r3, [r7, #15]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	889b      	ldrh	r3, [r3, #4]
 800db6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db76:	2b40      	cmp	r3, #64	; 0x40
 800db78:	d007      	beq.n	800db8a <USBD_StdEPReq+0x30>
 800db7a:	2b40      	cmp	r3, #64	; 0x40
 800db7c:	f200 8145 	bhi.w	800de0a <USBD_StdEPReq+0x2b0>
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00c      	beq.n	800db9e <USBD_StdEPReq+0x44>
 800db84:	2b20      	cmp	r3, #32
 800db86:	f040 8140 	bne.w	800de0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db90:	689b      	ldr	r3, [r3, #8]
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	4798      	blx	r3
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]
      break;
 800db9c:	e13a      	b.n	800de14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	785b      	ldrb	r3, [r3, #1]
 800dba2:	2b03      	cmp	r3, #3
 800dba4:	d007      	beq.n	800dbb6 <USBD_StdEPReq+0x5c>
 800dba6:	2b03      	cmp	r3, #3
 800dba8:	f300 8129 	bgt.w	800ddfe <USBD_StdEPReq+0x2a4>
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d07f      	beq.n	800dcb0 <USBD_StdEPReq+0x156>
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d03c      	beq.n	800dc2e <USBD_StdEPReq+0xd4>
 800dbb4:	e123      	b.n	800ddfe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d002      	beq.n	800dbc8 <USBD_StdEPReq+0x6e>
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d016      	beq.n	800dbf4 <USBD_StdEPReq+0x9a>
 800dbc6:	e02c      	b.n	800dc22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00d      	beq.n	800dbea <USBD_StdEPReq+0x90>
 800dbce:	7bbb      	ldrb	r3, [r7, #14]
 800dbd0:	2b80      	cmp	r3, #128	; 0x80
 800dbd2:	d00a      	beq.n	800dbea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbd4:	7bbb      	ldrb	r3, [r7, #14]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f001 f917 	bl	800ee0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbde:	2180      	movs	r1, #128	; 0x80
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f001 f913 	bl	800ee0c <USBD_LL_StallEP>
 800dbe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dbe8:	e020      	b.n	800dc2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fc6f 	bl	800e4d0 <USBD_CtlError>
              break;
 800dbf2:	e01b      	b.n	800dc2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	885b      	ldrh	r3, [r3, #2]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10e      	bne.n	800dc1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dbfc:	7bbb      	ldrb	r3, [r7, #14]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00b      	beq.n	800dc1a <USBD_StdEPReq+0xc0>
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	2b80      	cmp	r3, #128	; 0x80
 800dc06:	d008      	beq.n	800dc1a <USBD_StdEPReq+0xc0>
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	88db      	ldrh	r3, [r3, #6]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d104      	bne.n	800dc1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f001 f8f9 	bl	800ee0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 fd23 	bl	800e666 <USBD_CtlSendStatus>

              break;
 800dc20:	e004      	b.n	800dc2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dc22:	6839      	ldr	r1, [r7, #0]
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fc53 	bl	800e4d0 <USBD_CtlError>
              break;
 800dc2a:	bf00      	nop
          }
          break;
 800dc2c:	e0ec      	b.n	800de08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d002      	beq.n	800dc40 <USBD_StdEPReq+0xe6>
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	d016      	beq.n	800dc6c <USBD_StdEPReq+0x112>
 800dc3e:	e030      	b.n	800dca2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc40:	7bbb      	ldrb	r3, [r7, #14]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00d      	beq.n	800dc62 <USBD_StdEPReq+0x108>
 800dc46:	7bbb      	ldrb	r3, [r7, #14]
 800dc48:	2b80      	cmp	r3, #128	; 0x80
 800dc4a:	d00a      	beq.n	800dc62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc4c:	7bbb      	ldrb	r3, [r7, #14]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f001 f8db 	bl	800ee0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc56:	2180      	movs	r1, #128	; 0x80
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f001 f8d7 	bl	800ee0c <USBD_LL_StallEP>
 800dc5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc60:	e025      	b.n	800dcae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 fc33 	bl	800e4d0 <USBD_CtlError>
              break;
 800dc6a:	e020      	b.n	800dcae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	885b      	ldrh	r3, [r3, #2]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d11b      	bne.n	800dcac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dc74:	7bbb      	ldrb	r3, [r7, #14]
 800dc76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d004      	beq.n	800dc88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 f8e1 	bl	800ee4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 fcec 	bl	800e666 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	4798      	blx	r3
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dca0:	e004      	b.n	800dcac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 fc13 	bl	800e4d0 <USBD_CtlError>
              break;
 800dcaa:	e000      	b.n	800dcae <USBD_StdEPReq+0x154>
              break;
 800dcac:	bf00      	nop
          }
          break;
 800dcae:	e0ab      	b.n	800de08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d002      	beq.n	800dcc2 <USBD_StdEPReq+0x168>
 800dcbc:	2b03      	cmp	r3, #3
 800dcbe:	d032      	beq.n	800dd26 <USBD_StdEPReq+0x1cc>
 800dcc0:	e097      	b.n	800ddf2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d007      	beq.n	800dcd8 <USBD_StdEPReq+0x17e>
 800dcc8:	7bbb      	ldrb	r3, [r7, #14]
 800dcca:	2b80      	cmp	r3, #128	; 0x80
 800dccc:	d004      	beq.n	800dcd8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fbfd 	bl	800e4d0 <USBD_CtlError>
                break;
 800dcd6:	e091      	b.n	800ddfc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	da0b      	bge.n	800dcf8 <USBD_StdEPReq+0x19e>
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
 800dce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	3310      	adds	r3, #16
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	e00b      	b.n	800dd10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	3304      	adds	r3, #4
 800dd10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2200      	movs	r2, #0
 800dd16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fc47 	bl	800e5b2 <USBD_CtlSendData>
              break;
 800dd24:	e06a      	b.n	800ddfc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	da11      	bge.n	800dd52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
 800dd30:	f003 020f 	and.w	r2, r3, #15
 800dd34:	6879      	ldr	r1, [r7, #4]
 800dd36:	4613      	mov	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	440b      	add	r3, r1
 800dd40:	3324      	adds	r3, #36	; 0x24
 800dd42:	881b      	ldrh	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d117      	bne.n	800dd78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 fbc0 	bl	800e4d0 <USBD_CtlError>
                  break;
 800dd50:	e054      	b.n	800ddfc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd52:	7bbb      	ldrb	r3, [r7, #14]
 800dd54:	f003 020f 	and.w	r2, r3, #15
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	440b      	add	r3, r1
 800dd64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d104      	bne.n	800dd78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 fbad 	bl	800e4d0 <USBD_CtlError>
                  break;
 800dd76:	e041      	b.n	800ddfc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	da0b      	bge.n	800dd98 <USBD_StdEPReq+0x23e>
 800dd80:	7bbb      	ldrb	r3, [r7, #14]
 800dd82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd86:	4613      	mov	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	3310      	adds	r3, #16
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	3304      	adds	r3, #4
 800dd96:	e00b      	b.n	800ddb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
 800dd9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd9e:	4613      	mov	r3, r2
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	4413      	add	r3, r2
 800ddae:	3304      	adds	r3, #4
 800ddb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ddb2:	7bbb      	ldrb	r3, [r7, #14]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <USBD_StdEPReq+0x264>
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	2b80      	cmp	r3, #128	; 0x80
 800ddbc:	d103      	bne.n	800ddc6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	601a      	str	r2, [r3, #0]
 800ddc4:	e00e      	b.n	800dde4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f001 f85c 	bl	800ee88 <USBD_LL_IsStallEP>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	e002      	b.n	800dde4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	2200      	movs	r2, #0
 800dde2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2202      	movs	r2, #2
 800dde8:	4619      	mov	r1, r3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fbe1 	bl	800e5b2 <USBD_CtlSendData>
              break;
 800ddf0:	e004      	b.n	800ddfc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 fb6b 	bl	800e4d0 <USBD_CtlError>
              break;
 800ddfa:	bf00      	nop
          }
          break;
 800ddfc:	e004      	b.n	800de08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fb65 	bl	800e4d0 <USBD_CtlError>
          break;
 800de06:	bf00      	nop
      }
      break;
 800de08:	e004      	b.n	800de14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fb5f 	bl	800e4d0 <USBD_CtlError>
      break;
 800de12:	bf00      	nop
  }

  return ret;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
	...

0800de20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de2a:	2300      	movs	r3, #0
 800de2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de32:	2300      	movs	r3, #0
 800de34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	885b      	ldrh	r3, [r3, #2]
 800de3a:	0a1b      	lsrs	r3, r3, #8
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	3b01      	subs	r3, #1
 800de40:	2b0e      	cmp	r3, #14
 800de42:	f200 8152 	bhi.w	800e0ea <USBD_GetDescriptor+0x2ca>
 800de46:	a201      	add	r2, pc, #4	; (adr r2, 800de4c <USBD_GetDescriptor+0x2c>)
 800de48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4c:	0800debd 	.word	0x0800debd
 800de50:	0800ded5 	.word	0x0800ded5
 800de54:	0800df15 	.word	0x0800df15
 800de58:	0800e0eb 	.word	0x0800e0eb
 800de5c:	0800e0eb 	.word	0x0800e0eb
 800de60:	0800e08b 	.word	0x0800e08b
 800de64:	0800e0b7 	.word	0x0800e0b7
 800de68:	0800e0eb 	.word	0x0800e0eb
 800de6c:	0800e0eb 	.word	0x0800e0eb
 800de70:	0800e0eb 	.word	0x0800e0eb
 800de74:	0800e0eb 	.word	0x0800e0eb
 800de78:	0800e0eb 	.word	0x0800e0eb
 800de7c:	0800e0eb 	.word	0x0800e0eb
 800de80:	0800e0eb 	.word	0x0800e0eb
 800de84:	0800de89 	.word	0x0800de89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de8e:	69db      	ldr	r3, [r3, #28]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00b      	beq.n	800deac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	7c12      	ldrb	r2, [r2, #16]
 800dea0:	f107 0108 	add.w	r1, r7, #8
 800dea4:	4610      	mov	r0, r2
 800dea6:	4798      	blx	r3
 800dea8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800deaa:	e126      	b.n	800e0fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800deac:	6839      	ldr	r1, [r7, #0]
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 fb0e 	bl	800e4d0 <USBD_CtlError>
        err++;
 800deb4:	7afb      	ldrb	r3, [r7, #11]
 800deb6:	3301      	adds	r3, #1
 800deb8:	72fb      	strb	r3, [r7, #11]
      break;
 800deba:	e11e      	b.n	800e0fa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	7c12      	ldrb	r2, [r2, #16]
 800dec8:	f107 0108 	add.w	r1, r7, #8
 800decc:	4610      	mov	r0, r2
 800dece:	4798      	blx	r3
 800ded0:	60f8      	str	r0, [r7, #12]
      break;
 800ded2:	e112      	b.n	800e0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	7c1b      	ldrb	r3, [r3, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10d      	bne.n	800def8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee4:	f107 0208 	add.w	r2, r7, #8
 800dee8:	4610      	mov	r0, r2
 800deea:	4798      	blx	r3
 800deec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	3301      	adds	r3, #1
 800def2:	2202      	movs	r2, #2
 800def4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800def6:	e100      	b.n	800e0fa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800defe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df00:	f107 0208 	add.w	r2, r7, #8
 800df04:	4610      	mov	r0, r2
 800df06:	4798      	blx	r3
 800df08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	3301      	adds	r3, #1
 800df0e:	2202      	movs	r2, #2
 800df10:	701a      	strb	r2, [r3, #0]
      break;
 800df12:	e0f2      	b.n	800e0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	885b      	ldrh	r3, [r3, #2]
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b05      	cmp	r3, #5
 800df1c:	f200 80ac 	bhi.w	800e078 <USBD_GetDescriptor+0x258>
 800df20:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <USBD_GetDescriptor+0x108>)
 800df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df26:	bf00      	nop
 800df28:	0800df41 	.word	0x0800df41
 800df2c:	0800df75 	.word	0x0800df75
 800df30:	0800dfa9 	.word	0x0800dfa9
 800df34:	0800dfdd 	.word	0x0800dfdd
 800df38:	0800e011 	.word	0x0800e011
 800df3c:	0800e045 	.word	0x0800e045
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00b      	beq.n	800df64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	7c12      	ldrb	r2, [r2, #16]
 800df58:	f107 0108 	add.w	r1, r7, #8
 800df5c:	4610      	mov	r0, r2
 800df5e:	4798      	blx	r3
 800df60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df62:	e091      	b.n	800e088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 fab2 	bl	800e4d0 <USBD_CtlError>
            err++;
 800df6c:	7afb      	ldrb	r3, [r7, #11]
 800df6e:	3301      	adds	r3, #1
 800df70:	72fb      	strb	r3, [r7, #11]
          break;
 800df72:	e089      	b.n	800e088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00b      	beq.n	800df98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	7c12      	ldrb	r2, [r2, #16]
 800df8c:	f107 0108 	add.w	r1, r7, #8
 800df90:	4610      	mov	r0, r2
 800df92:	4798      	blx	r3
 800df94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df96:	e077      	b.n	800e088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fa98 	bl	800e4d0 <USBD_CtlError>
            err++;
 800dfa0:	7afb      	ldrb	r3, [r7, #11]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800dfa6:	e06f      	b.n	800e088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00b      	beq.n	800dfcc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	7c12      	ldrb	r2, [r2, #16]
 800dfc0:	f107 0108 	add.w	r1, r7, #8
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	4798      	blx	r3
 800dfc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfca:	e05d      	b.n	800e088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfcc:	6839      	ldr	r1, [r7, #0]
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fa7e 	bl	800e4d0 <USBD_CtlError>
            err++;
 800dfd4:	7afb      	ldrb	r3, [r7, #11]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	72fb      	strb	r3, [r7, #11]
          break;
 800dfda:	e055      	b.n	800e088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00b      	beq.n	800e000 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	7c12      	ldrb	r2, [r2, #16]
 800dff4:	f107 0108 	add.w	r1, r7, #8
 800dff8:	4610      	mov	r0, r2
 800dffa:	4798      	blx	r3
 800dffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dffe:	e043      	b.n	800e088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fa64 	bl	800e4d0 <USBD_CtlError>
            err++;
 800e008:	7afb      	ldrb	r3, [r7, #11]
 800e00a:	3301      	adds	r3, #1
 800e00c:	72fb      	strb	r3, [r7, #11]
          break;
 800e00e:	e03b      	b.n	800e088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e022:	695b      	ldr	r3, [r3, #20]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	7c12      	ldrb	r2, [r2, #16]
 800e028:	f107 0108 	add.w	r1, r7, #8
 800e02c:	4610      	mov	r0, r2
 800e02e:	4798      	blx	r3
 800e030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e032:	e029      	b.n	800e088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e034:	6839      	ldr	r1, [r7, #0]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 fa4a 	bl	800e4d0 <USBD_CtlError>
            err++;
 800e03c:	7afb      	ldrb	r3, [r7, #11]
 800e03e:	3301      	adds	r3, #1
 800e040:	72fb      	strb	r3, [r7, #11]
          break;
 800e042:	e021      	b.n	800e088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00b      	beq.n	800e068 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	7c12      	ldrb	r2, [r2, #16]
 800e05c:	f107 0108 	add.w	r1, r7, #8
 800e060:	4610      	mov	r0, r2
 800e062:	4798      	blx	r3
 800e064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e066:	e00f      	b.n	800e088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fa30 	bl	800e4d0 <USBD_CtlError>
            err++;
 800e070:	7afb      	ldrb	r3, [r7, #11]
 800e072:	3301      	adds	r3, #1
 800e074:	72fb      	strb	r3, [r7, #11]
          break;
 800e076:	e007      	b.n	800e088 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fa28 	bl	800e4d0 <USBD_CtlError>
          err++;
 800e080:	7afb      	ldrb	r3, [r7, #11]
 800e082:	3301      	adds	r3, #1
 800e084:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e086:	bf00      	nop
      }
      break;
 800e088:	e037      	b.n	800e0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	7c1b      	ldrb	r3, [r3, #16]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d109      	bne.n	800e0a6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e09a:	f107 0208 	add.w	r2, r7, #8
 800e09e:	4610      	mov	r0, r2
 800e0a0:	4798      	blx	r3
 800e0a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0a4:	e029      	b.n	800e0fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fa11 	bl	800e4d0 <USBD_CtlError>
        err++;
 800e0ae:	7afb      	ldrb	r3, [r7, #11]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800e0b4:	e021      	b.n	800e0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	7c1b      	ldrb	r3, [r3, #16]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10d      	bne.n	800e0da <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c6:	f107 0208 	add.w	r2, r7, #8
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	4798      	blx	r3
 800e0ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	2207      	movs	r2, #7
 800e0d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0d8:	e00f      	b.n	800e0fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f9f7 	bl	800e4d0 <USBD_CtlError>
        err++;
 800e0e2:	7afb      	ldrb	r3, [r7, #11]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	72fb      	strb	r3, [r7, #11]
      break;
 800e0e8:	e007      	b.n	800e0fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 f9ef 	bl	800e4d0 <USBD_CtlError>
      err++;
 800e0f2:	7afb      	ldrb	r3, [r7, #11]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800e0f8:	bf00      	nop
  }

  if (err != 0U)
 800e0fa:	7afb      	ldrb	r3, [r7, #11]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d11e      	bne.n	800e13e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	88db      	ldrh	r3, [r3, #6]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d016      	beq.n	800e136 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e108:	893b      	ldrh	r3, [r7, #8]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00e      	beq.n	800e12c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	88da      	ldrh	r2, [r3, #6]
 800e112:	893b      	ldrh	r3, [r7, #8]
 800e114:	4293      	cmp	r3, r2
 800e116:	bf28      	it	cs
 800e118:	4613      	movcs	r3, r2
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e11e:	893b      	ldrh	r3, [r7, #8]
 800e120:	461a      	mov	r2, r3
 800e122:	68f9      	ldr	r1, [r7, #12]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fa44 	bl	800e5b2 <USBD_CtlSendData>
 800e12a:	e009      	b.n	800e140 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f9ce 	bl	800e4d0 <USBD_CtlError>
 800e134:	e004      	b.n	800e140 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 fa95 	bl	800e666 <USBD_CtlSendStatus>
 800e13c:	e000      	b.n	800e140 <USBD_GetDescriptor+0x320>
    return;
 800e13e:	bf00      	nop
  }
}
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop

0800e148 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	889b      	ldrh	r3, [r3, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d131      	bne.n	800e1be <USBD_SetAddress+0x76>
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	88db      	ldrh	r3, [r3, #6]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d12d      	bne.n	800e1be <USBD_SetAddress+0x76>
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	885b      	ldrh	r3, [r3, #2]
 800e166:	2b7f      	cmp	r3, #127	; 0x7f
 800e168:	d829      	bhi.n	800e1be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	885b      	ldrh	r3, [r3, #2]
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e174:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	2b03      	cmp	r3, #3
 800e180:	d104      	bne.n	800e18c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e182:	6839      	ldr	r1, [r7, #0]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f9a3 	bl	800e4d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e18a:	e01d      	b.n	800e1c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	7bfa      	ldrb	r2, [r7, #15]
 800e190:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	4619      	mov	r1, r3
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 fea1 	bl	800eee0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fa61 	bl	800e666 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d004      	beq.n	800e1b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b2:	e009      	b.n	800e1c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1bc:	e004      	b.n	800e1c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f985 	bl	800e4d0 <USBD_CtlError>
  }
}
 800e1c6:	bf00      	nop
 800e1c8:	bf00      	nop
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	885b      	ldrh	r3, [r3, #2]
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	4b4c      	ldr	r3, [pc, #304]	; (800e318 <USBD_SetConfig+0x148>)
 800e1e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e1e8:	4b4b      	ldr	r3, [pc, #300]	; (800e318 <USBD_SetConfig+0x148>)
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d905      	bls.n	800e1fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f96c 	bl	800e4d0 <USBD_CtlError>
    return USBD_FAIL;
 800e1f8:	2303      	movs	r3, #3
 800e1fa:	e088      	b.n	800e30e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b02      	cmp	r3, #2
 800e206:	d002      	beq.n	800e20e <USBD_SetConfig+0x3e>
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d025      	beq.n	800e258 <USBD_SetConfig+0x88>
 800e20c:	e071      	b.n	800e2f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e20e:	4b42      	ldr	r3, [pc, #264]	; (800e318 <USBD_SetConfig+0x148>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d01c      	beq.n	800e250 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e216:	4b40      	ldr	r3, [pc, #256]	; (800e318 <USBD_SetConfig+0x148>)
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	461a      	mov	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e220:	4b3d      	ldr	r3, [pc, #244]	; (800e318 <USBD_SetConfig+0x148>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff f992 	bl	800d550 <USBD_SetClassConfig>
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d004      	beq.n	800e240 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f949 	bl	800e4d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e23e:	e065      	b.n	800e30c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fa10 	bl	800e666 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2203      	movs	r2, #3
 800e24a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e24e:	e05d      	b.n	800e30c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 fa08 	bl	800e666 <USBD_CtlSendStatus>
      break;
 800e256:	e059      	b.n	800e30c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e258:	4b2f      	ldr	r3, [pc, #188]	; (800e318 <USBD_SetConfig+0x148>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d112      	bne.n	800e286 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2202      	movs	r2, #2
 800e264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e268:	4b2b      	ldr	r3, [pc, #172]	; (800e318 <USBD_SetConfig+0x148>)
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	461a      	mov	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e272:	4b29      	ldr	r3, [pc, #164]	; (800e318 <USBD_SetConfig+0x148>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	4619      	mov	r1, r3
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff f985 	bl	800d588 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 f9f1 	bl	800e666 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e284:	e042      	b.n	800e30c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e286:	4b24      	ldr	r3, [pc, #144]	; (800e318 <USBD_SetConfig+0x148>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	429a      	cmp	r2, r3
 800e292:	d02a      	beq.n	800e2ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	4619      	mov	r1, r3
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7ff f973 	bl	800d588 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e2a2:	4b1d      	ldr	r3, [pc, #116]	; (800e318 <USBD_SetConfig+0x148>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2ac:	4b1a      	ldr	r3, [pc, #104]	; (800e318 <USBD_SetConfig+0x148>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7ff f94c 	bl	800d550 <USBD_SetClassConfig>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00f      	beq.n	800e2e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e2c2:	6839      	ldr	r1, [r7, #0]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f903 	bl	800e4d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7ff f958 	bl	800d588 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2202      	movs	r2, #2
 800e2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e2e0:	e014      	b.n	800e30c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f9bf 	bl	800e666 <USBD_CtlSendStatus>
      break;
 800e2e8:	e010      	b.n	800e30c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f9bb 	bl	800e666 <USBD_CtlSendStatus>
      break;
 800e2f0:	e00c      	b.n	800e30c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f8eb 	bl	800e4d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2fa:	4b07      	ldr	r3, [pc, #28]	; (800e318 <USBD_SetConfig+0x148>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	4619      	mov	r1, r3
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f7ff f941 	bl	800d588 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e306:	2303      	movs	r3, #3
 800e308:	73fb      	strb	r3, [r7, #15]
      break;
 800e30a:	bf00      	nop
  }

  return ret;
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	20000be4 	.word	0x20000be4

0800e31c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	88db      	ldrh	r3, [r3, #6]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d004      	beq.n	800e338 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 f8cd 	bl	800e4d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e336:	e023      	b.n	800e380 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	2b02      	cmp	r3, #2
 800e342:	dc02      	bgt.n	800e34a <USBD_GetConfig+0x2e>
 800e344:	2b00      	cmp	r3, #0
 800e346:	dc03      	bgt.n	800e350 <USBD_GetConfig+0x34>
 800e348:	e015      	b.n	800e376 <USBD_GetConfig+0x5a>
 800e34a:	2b03      	cmp	r3, #3
 800e34c:	d00b      	beq.n	800e366 <USBD_GetConfig+0x4a>
 800e34e:	e012      	b.n	800e376 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3308      	adds	r3, #8
 800e35a:	2201      	movs	r2, #1
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 f927 	bl	800e5b2 <USBD_CtlSendData>
        break;
 800e364:	e00c      	b.n	800e380 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3304      	adds	r3, #4
 800e36a:	2201      	movs	r2, #1
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f91f 	bl	800e5b2 <USBD_CtlSendData>
        break;
 800e374:	e004      	b.n	800e380 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e376:	6839      	ldr	r1, [r7, #0]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 f8a9 	bl	800e4d0 <USBD_CtlError>
        break;
 800e37e:	bf00      	nop
}
 800e380:	bf00      	nop
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	3b01      	subs	r3, #1
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d81e      	bhi.n	800e3de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	88db      	ldrh	r3, [r3, #6]
 800e3a4:	2b02      	cmp	r3, #2
 800e3a6:	d004      	beq.n	800e3b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 f890 	bl	800e4d0 <USBD_CtlError>
        break;
 800e3b0:	e01a      	b.n	800e3e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d005      	beq.n	800e3ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	f043 0202 	orr.w	r2, r3, #2
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	330c      	adds	r3, #12
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f8eb 	bl	800e5b2 <USBD_CtlSendData>
      break;
 800e3dc:	e004      	b.n	800e3e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f875 	bl	800e4d0 <USBD_CtlError>
      break;
 800e3e6:	bf00      	nop
  }
}
 800e3e8:	bf00      	nop
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	885b      	ldrh	r3, [r3, #2]
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d106      	bne.n	800e410 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2201      	movs	r2, #1
 800e406:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f92b 	bl	800e666 <USBD_CtlSendStatus>
  }
}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	3b01      	subs	r3, #1
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d80b      	bhi.n	800e448 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	885b      	ldrh	r3, [r3, #2]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d10c      	bne.n	800e452 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f910 	bl	800e666 <USBD_CtlSendStatus>
      }
      break;
 800e446:	e004      	b.n	800e452 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f840 	bl	800e4d0 <USBD_CtlError>
      break;
 800e450:	e000      	b.n	800e454 <USBD_ClrFeature+0x3c>
      break;
 800e452:	bf00      	nop
  }
}
 800e454:	bf00      	nop
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	781a      	ldrb	r2, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3301      	adds	r3, #1
 800e476:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	3301      	adds	r3, #1
 800e484:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f7ff fa92 	bl	800d9b0 <SWAPBYTE>
 800e48c:	4603      	mov	r3, r0
 800e48e:	461a      	mov	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	3301      	adds	r3, #1
 800e498:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3301      	adds	r3, #1
 800e49e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f7ff fa85 	bl	800d9b0 <SWAPBYTE>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7ff fa78 	bl	800d9b0 <SWAPBYTE>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	80da      	strh	r2, [r3, #6]
}
 800e4c8:	bf00      	nop
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4da:	2180      	movs	r1, #128	; 0x80
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fc95 	bl	800ee0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fc91 	bl	800ee0c <USBD_LL_StallEP>
}
 800e4ea:	bf00      	nop
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b086      	sub	sp, #24
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e4fe:	2300      	movs	r3, #0
 800e500:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d036      	beq.n	800e576 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e50c:	6938      	ldr	r0, [r7, #16]
 800e50e:	f000 f836 	bl	800e57e <USBD_GetLen>
 800e512:	4603      	mov	r3, r0
 800e514:	3301      	adds	r3, #1
 800e516:	b29b      	uxth	r3, r3
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e520:	7dfb      	ldrb	r3, [r7, #23]
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	4413      	add	r3, r2
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	7812      	ldrb	r2, [r2, #0]
 800e52a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e52c:	7dfb      	ldrb	r3, [r7, #23]
 800e52e:	3301      	adds	r3, #1
 800e530:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	4413      	add	r3, r2
 800e538:	2203      	movs	r2, #3
 800e53a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e53c:	7dfb      	ldrb	r3, [r7, #23]
 800e53e:	3301      	adds	r3, #1
 800e540:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e542:	e013      	b.n	800e56c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e544:	7dfb      	ldrb	r3, [r7, #23]
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	4413      	add	r3, r2
 800e54a:	693a      	ldr	r2, [r7, #16]
 800e54c:	7812      	ldrb	r2, [r2, #0]
 800e54e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	3301      	adds	r3, #1
 800e554:	613b      	str	r3, [r7, #16]
    idx++;
 800e556:	7dfb      	ldrb	r3, [r7, #23]
 800e558:	3301      	adds	r3, #1
 800e55a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	4413      	add	r3, r2
 800e562:	2200      	movs	r2, #0
 800e564:	701a      	strb	r2, [r3, #0]
    idx++;
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	3301      	adds	r3, #1
 800e56a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1e7      	bne.n	800e544 <USBD_GetString+0x52>
 800e574:	e000      	b.n	800e578 <USBD_GetString+0x86>
    return;
 800e576:	bf00      	nop
  }
}
 800e578:	3718      	adds	r7, #24
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e57e:	b480      	push	{r7}
 800e580:	b085      	sub	sp, #20
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e586:	2300      	movs	r3, #0
 800e588:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e58e:	e005      	b.n	800e59c <USBD_GetLen+0x1e>
  {
    len++;
 800e590:	7bfb      	ldrb	r3, [r7, #15]
 800e592:	3301      	adds	r3, #1
 800e594:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	3301      	adds	r3, #1
 800e59a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1f5      	bne.n	800e590 <USBD_GetLen+0x12>
  }

  return len;
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3714      	adds	r7, #20
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b084      	sub	sp, #16
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f000 fca0 	bl	800ef1e <USBD_LL_Transmit>

  return USBD_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 fc8f 	bl	800ef1e <USBD_LL_Transmit>

  return USBD_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2203      	movs	r2, #3
 800e61a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	2100      	movs	r1, #0
 800e634:	68f8      	ldr	r0, [r7, #12]
 800e636:	f000 fc93 	bl	800ef60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3710      	adds	r7, #16
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	2100      	movs	r1, #0
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f000 fc82 	bl	800ef60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b082      	sub	sp, #8
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2204      	movs	r2, #4
 800e672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e676:	2300      	movs	r3, #0
 800e678:	2200      	movs	r2, #0
 800e67a:	2100      	movs	r1, #0
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 fc4e 	bl	800ef1e <USBD_LL_Transmit>

  return USBD_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2205      	movs	r2, #5
 800e698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e69c:	2300      	movs	r3, #0
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 fc5c 	bl	800ef60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6a8:	2300      	movs	r3, #0
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3708      	adds	r7, #8
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
	...

0800e6b4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	4912      	ldr	r1, [pc, #72]	; (800e704 <MX_USB_Device_Init+0x50>)
 800e6bc:	4812      	ldr	r0, [pc, #72]	; (800e708 <MX_USB_Device_Init+0x54>)
 800e6be:	f7fe fed9 	bl	800d474 <USBD_Init>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d001      	beq.n	800e6cc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e6c8:	f7f3 f82c 	bl	8001724 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e6cc:	490f      	ldr	r1, [pc, #60]	; (800e70c <MX_USB_Device_Init+0x58>)
 800e6ce:	480e      	ldr	r0, [pc, #56]	; (800e708 <MX_USB_Device_Init+0x54>)
 800e6d0:	f7fe ff00 	bl	800d4d4 <USBD_RegisterClass>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e6da:	f7f3 f823 	bl	8001724 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e6de:	490c      	ldr	r1, [pc, #48]	; (800e710 <MX_USB_Device_Init+0x5c>)
 800e6e0:	4809      	ldr	r0, [pc, #36]	; (800e708 <MX_USB_Device_Init+0x54>)
 800e6e2:	f7fe fe21 	bl	800d328 <USBD_CDC_RegisterInterface>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d001      	beq.n	800e6f0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e6ec:	f7f3 f81a 	bl	8001724 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e6f0:	4805      	ldr	r0, [pc, #20]	; (800e708 <MX_USB_Device_Init+0x54>)
 800e6f2:	f7fe ff16 	bl	800d522 <USBD_Start>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e6fc:	f7f3 f812 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e700:	bf00      	nop
 800e702:	bd80      	pop	{r7, pc}
 800e704:	20000130 	.word	0x20000130
 800e708:	20000be8 	.word	0x20000be8
 800e70c:	20000018 	.word	0x20000018
 800e710:	2000011c 	.word	0x2000011c

0800e714 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e718:	2200      	movs	r2, #0
 800e71a:	4905      	ldr	r1, [pc, #20]	; (800e730 <CDC_Init_FS+0x1c>)
 800e71c:	4805      	ldr	r0, [pc, #20]	; (800e734 <CDC_Init_FS+0x20>)
 800e71e:	f7fe fe18 	bl	800d352 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e722:	4905      	ldr	r1, [pc, #20]	; (800e738 <CDC_Init_FS+0x24>)
 800e724:	4803      	ldr	r0, [pc, #12]	; (800e734 <CDC_Init_FS+0x20>)
 800e726:	f7fe fe32 	bl	800d38e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e72a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	200012b8 	.word	0x200012b8
 800e734:	20000be8 	.word	0x20000be8
 800e738:	20000eb8 	.word	0x20000eb8

0800e73c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e73c:	b480      	push	{r7}
 800e73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e740:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e742:	4618      	mov	r0, r3
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	4603      	mov	r3, r0
 800e754:	6039      	str	r1, [r7, #0]
 800e756:	71fb      	strb	r3, [r7, #7]
 800e758:	4613      	mov	r3, r2
 800e75a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	2b23      	cmp	r3, #35	; 0x23
 800e760:	d84a      	bhi.n	800e7f8 <CDC_Control_FS+0xac>
 800e762:	a201      	add	r2, pc, #4	; (adr r2, 800e768 <CDC_Control_FS+0x1c>)
 800e764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e768:	0800e7f9 	.word	0x0800e7f9
 800e76c:	0800e7f9 	.word	0x0800e7f9
 800e770:	0800e7f9 	.word	0x0800e7f9
 800e774:	0800e7f9 	.word	0x0800e7f9
 800e778:	0800e7f9 	.word	0x0800e7f9
 800e77c:	0800e7f9 	.word	0x0800e7f9
 800e780:	0800e7f9 	.word	0x0800e7f9
 800e784:	0800e7f9 	.word	0x0800e7f9
 800e788:	0800e7f9 	.word	0x0800e7f9
 800e78c:	0800e7f9 	.word	0x0800e7f9
 800e790:	0800e7f9 	.word	0x0800e7f9
 800e794:	0800e7f9 	.word	0x0800e7f9
 800e798:	0800e7f9 	.word	0x0800e7f9
 800e79c:	0800e7f9 	.word	0x0800e7f9
 800e7a0:	0800e7f9 	.word	0x0800e7f9
 800e7a4:	0800e7f9 	.word	0x0800e7f9
 800e7a8:	0800e7f9 	.word	0x0800e7f9
 800e7ac:	0800e7f9 	.word	0x0800e7f9
 800e7b0:	0800e7f9 	.word	0x0800e7f9
 800e7b4:	0800e7f9 	.word	0x0800e7f9
 800e7b8:	0800e7f9 	.word	0x0800e7f9
 800e7bc:	0800e7f9 	.word	0x0800e7f9
 800e7c0:	0800e7f9 	.word	0x0800e7f9
 800e7c4:	0800e7f9 	.word	0x0800e7f9
 800e7c8:	0800e7f9 	.word	0x0800e7f9
 800e7cc:	0800e7f9 	.word	0x0800e7f9
 800e7d0:	0800e7f9 	.word	0x0800e7f9
 800e7d4:	0800e7f9 	.word	0x0800e7f9
 800e7d8:	0800e7f9 	.word	0x0800e7f9
 800e7dc:	0800e7f9 	.word	0x0800e7f9
 800e7e0:	0800e7f9 	.word	0x0800e7f9
 800e7e4:	0800e7f9 	.word	0x0800e7f9
 800e7e8:	0800e7f9 	.word	0x0800e7f9
 800e7ec:	0800e7f9 	.word	0x0800e7f9
 800e7f0:	0800e7f9 	.word	0x0800e7f9
 800e7f4:	0800e7f9 	.word	0x0800e7f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e7f8:	bf00      	nop
  }

  return (USBD_OK);
 800e7fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e812:	6879      	ldr	r1, [r7, #4]
 800e814:	4805      	ldr	r0, [pc, #20]	; (800e82c <CDC_Receive_FS+0x24>)
 800e816:	f7fe fdba 	bl	800d38e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e81a:	4804      	ldr	r0, [pc, #16]	; (800e82c <CDC_Receive_FS+0x24>)
 800e81c:	f7fe fe00 	bl	800d420 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e820:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	20000be8 	.word	0x20000be8

0800e830 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	460b      	mov	r3, r1
 800e83a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e840:	4b0d      	ldr	r3, [pc, #52]	; (800e878 <CDC_Transmit_FS+0x48>)
 800e842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e846:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d001      	beq.n	800e856 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e852:	2301      	movs	r3, #1
 800e854:	e00b      	b.n	800e86e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e856:	887b      	ldrh	r3, [r7, #2]
 800e858:	461a      	mov	r2, r3
 800e85a:	6879      	ldr	r1, [r7, #4]
 800e85c:	4806      	ldr	r0, [pc, #24]	; (800e878 <CDC_Transmit_FS+0x48>)
 800e85e:	f7fe fd78 	bl	800d352 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e862:	4805      	ldr	r0, [pc, #20]	; (800e878 <CDC_Transmit_FS+0x48>)
 800e864:	f7fe fdac 	bl	800d3c0 <USBD_CDC_TransmitPacket>
 800e868:	4603      	mov	r3, r0
 800e86a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20000be8 	.word	0x20000be8

0800e87c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b087      	sub	sp, #28
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	4613      	mov	r3, r2
 800e888:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e88e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e892:	4618      	mov	r0, r3
 800e894:	371c      	adds	r7, #28
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
	...

0800e8a0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	6039      	str	r1, [r7, #0]
 800e8aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2212      	movs	r2, #18
 800e8b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e8b2:	4b03      	ldr	r3, [pc, #12]	; (800e8c0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr
 800e8c0:	20000150 	.word	0x20000150

0800e8c4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	6039      	str	r1, [r7, #0]
 800e8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2204      	movs	r2, #4
 800e8d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e8d6:	4b03      	ldr	r3, [pc, #12]	; (800e8e4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	20000164 	.word	0x20000164

0800e8e8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	6039      	str	r1, [r7, #0]
 800e8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d105      	bne.n	800e906 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	4907      	ldr	r1, [pc, #28]	; (800e91c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e8fe:	4808      	ldr	r0, [pc, #32]	; (800e920 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e900:	f7ff fdf7 	bl	800e4f2 <USBD_GetString>
 800e904:	e004      	b.n	800e910 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	4904      	ldr	r1, [pc, #16]	; (800e91c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e90a:	4805      	ldr	r0, [pc, #20]	; (800e920 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e90c:	f7ff fdf1 	bl	800e4f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e910:	4b02      	ldr	r3, [pc, #8]	; (800e91c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e912:	4618      	mov	r0, r3
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	200016b8 	.word	0x200016b8
 800e920:	08013b04 	.word	0x08013b04

0800e924 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	6039      	str	r1, [r7, #0]
 800e92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e930:	683a      	ldr	r2, [r7, #0]
 800e932:	4904      	ldr	r1, [pc, #16]	; (800e944 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e934:	4804      	ldr	r0, [pc, #16]	; (800e948 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e936:	f7ff fddc 	bl	800e4f2 <USBD_GetString>
  return USBD_StrDesc;
 800e93a:	4b02      	ldr	r3, [pc, #8]	; (800e944 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	200016b8 	.word	0x200016b8
 800e948:	08013b1c 	.word	0x08013b1c

0800e94c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	4603      	mov	r3, r0
 800e954:	6039      	str	r1, [r7, #0]
 800e956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	221a      	movs	r2, #26
 800e95c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e95e:	f000 f843 	bl	800e9e8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e962:	4b02      	ldr	r3, [pc, #8]	; (800e96c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e964:	4618      	mov	r0, r3
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	20000168 	.word	0x20000168

0800e970 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	4603      	mov	r3, r0
 800e978:	6039      	str	r1, [r7, #0]
 800e97a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e97c:	79fb      	ldrb	r3, [r7, #7]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d105      	bne.n	800e98e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	4907      	ldr	r1, [pc, #28]	; (800e9a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e986:	4808      	ldr	r0, [pc, #32]	; (800e9a8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e988:	f7ff fdb3 	bl	800e4f2 <USBD_GetString>
 800e98c:	e004      	b.n	800e998 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	4904      	ldr	r1, [pc, #16]	; (800e9a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e992:	4805      	ldr	r0, [pc, #20]	; (800e9a8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e994:	f7ff fdad 	bl	800e4f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e998:	4b02      	ldr	r3, [pc, #8]	; (800e9a4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	200016b8 	.word	0x200016b8
 800e9a8:	08013b30 	.word	0x08013b30

0800e9ac <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	6039      	str	r1, [r7, #0]
 800e9b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d105      	bne.n	800e9ca <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	4907      	ldr	r1, [pc, #28]	; (800e9e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e9c2:	4808      	ldr	r0, [pc, #32]	; (800e9e4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e9c4:	f7ff fd95 	bl	800e4f2 <USBD_GetString>
 800e9c8:	e004      	b.n	800e9d4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	4904      	ldr	r1, [pc, #16]	; (800e9e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e9ce:	4805      	ldr	r0, [pc, #20]	; (800e9e4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e9d0:	f7ff fd8f 	bl	800e4f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9d4:	4b02      	ldr	r3, [pc, #8]	; (800e9e0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	200016b8 	.word	0x200016b8
 800e9e4:	08013b3c 	.word	0x08013b3c

0800e9e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ea2c <Get_SerialNum+0x44>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e9f4:	4b0e      	ldr	r3, [pc, #56]	; (800ea30 <Get_SerialNum+0x48>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e9fa:	4b0e      	ldr	r3, [pc, #56]	; (800ea34 <Get_SerialNum+0x4c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4413      	add	r3, r2
 800ea06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d009      	beq.n	800ea22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea0e:	2208      	movs	r2, #8
 800ea10:	4909      	ldr	r1, [pc, #36]	; (800ea38 <Get_SerialNum+0x50>)
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f000 f814 	bl	800ea40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea18:	2204      	movs	r2, #4
 800ea1a:	4908      	ldr	r1, [pc, #32]	; (800ea3c <Get_SerialNum+0x54>)
 800ea1c:	68b8      	ldr	r0, [r7, #8]
 800ea1e:	f000 f80f 	bl	800ea40 <IntToUnicode>
  }
}
 800ea22:	bf00      	nop
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	1fff7590 	.word	0x1fff7590
 800ea30:	1fff7594 	.word	0x1fff7594
 800ea34:	1fff7598 	.word	0x1fff7598
 800ea38:	2000016a 	.word	0x2000016a
 800ea3c:	2000017a 	.word	0x2000017a

0800ea40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b087      	sub	sp, #28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	4613      	mov	r3, r2
 800ea4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea52:	2300      	movs	r3, #0
 800ea54:	75fb      	strb	r3, [r7, #23]
 800ea56:	e027      	b.n	800eaa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	0f1b      	lsrs	r3, r3, #28
 800ea5c:	2b09      	cmp	r3, #9
 800ea5e:	d80b      	bhi.n	800ea78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	0f1b      	lsrs	r3, r3, #28
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
 800ea68:	005b      	lsls	r3, r3, #1
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	440b      	add	r3, r1
 800ea70:	3230      	adds	r2, #48	; 0x30
 800ea72:	b2d2      	uxtb	r2, r2
 800ea74:	701a      	strb	r2, [r3, #0]
 800ea76:	e00a      	b.n	800ea8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	0f1b      	lsrs	r3, r3, #28
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	005b      	lsls	r3, r3, #1
 800ea82:	4619      	mov	r1, r3
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	440b      	add	r3, r1
 800ea88:	3237      	adds	r2, #55	; 0x37
 800ea8a:	b2d2      	uxtb	r2, r2
 800ea8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	011b      	lsls	r3, r3, #4
 800ea92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
 800ea96:	005b      	lsls	r3, r3, #1
 800ea98:	3301      	adds	r3, #1
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	75fb      	strb	r3, [r7, #23]
 800eaa8:	7dfa      	ldrb	r2, [r7, #23]
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d3d3      	bcc.n	800ea58 <IntToUnicode+0x18>
  }
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	371c      	adds	r7, #28
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
	...

0800eac0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b094      	sub	sp, #80	; 0x50
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800eac8:	f107 030c 	add.w	r3, r7, #12
 800eacc:	2244      	movs	r2, #68	; 0x44
 800eace:	2100      	movs	r1, #0
 800ead0:	4618      	mov	r0, r3
 800ead2:	f002 fa8a 	bl	8010fea <memset>
  if(pcdHandle->Instance==USB)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4a15      	ldr	r2, [pc, #84]	; (800eb30 <HAL_PCD_MspInit+0x70>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d123      	bne.n	800eb28 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800eae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eae4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800eae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eaea:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eaec:	f107 030c 	add.w	r3, r7, #12
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7f8 fe71 	bl	80077d8 <HAL_RCCEx_PeriphCLKConfig>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d001      	beq.n	800eb00 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800eafc:	f7f2 fe12 	bl	8001724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800eb00:	4b0c      	ldr	r3, [pc, #48]	; (800eb34 <HAL_PCD_MspInit+0x74>)
 800eb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb04:	4a0b      	ldr	r2, [pc, #44]	; (800eb34 <HAL_PCD_MspInit+0x74>)
 800eb06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eb0a:	6593      	str	r3, [r2, #88]	; 0x58
 800eb0c:	4b09      	ldr	r3, [pc, #36]	; (800eb34 <HAL_PCD_MspInit+0x74>)
 800eb0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb14:	60bb      	str	r3, [r7, #8]
 800eb16:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	2014      	movs	r0, #20
 800eb1e:	f7f5 fd06 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800eb22:	2014      	movs	r0, #20
 800eb24:	f7f5 fd1d 	bl	8004562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800eb28:	bf00      	nop
 800eb2a:	3750      	adds	r7, #80	; 0x50
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	40005c00 	.word	0x40005c00
 800eb34:	40021000 	.word	0x40021000

0800eb38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	4610      	mov	r0, r2
 800eb50:	f7fe fd32 	bl	800d5b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800eb6e:	78fa      	ldrb	r2, [r7, #3]
 800eb70:	6879      	ldr	r1, [r7, #4]
 800eb72:	4613      	mov	r3, r2
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4413      	add	r3, r2
 800eb78:	00db      	lsls	r3, r3, #3
 800eb7a:	440b      	add	r3, r1
 800eb7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	78fb      	ldrb	r3, [r7, #3]
 800eb84:	4619      	mov	r1, r3
 800eb86:	f7fe fd6c 	bl	800d662 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b082      	sub	sp, #8
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800eba4:	78fa      	ldrb	r2, [r7, #3]
 800eba6:	6879      	ldr	r1, [r7, #4]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4413      	add	r3, r2
 800ebae:	00db      	lsls	r3, r3, #3
 800ebb0:	440b      	add	r3, r1
 800ebb2:	3324      	adds	r3, #36	; 0x24
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	78fb      	ldrb	r3, [r7, #3]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	f7fe fdb5 	bl	800d728 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ebbe:	bf00      	nop
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b082      	sub	sp, #8
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fe fec9 	bl	800d96c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ebea:	2301      	movs	r3, #1
 800ebec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	795b      	ldrb	r3, [r3, #5]
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d001      	beq.n	800ebfa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ebf6:	f7f2 fd95 	bl	8001724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec00:	7bfa      	ldrb	r2, [r7, #15]
 800ec02:	4611      	mov	r1, r2
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fe fe73 	bl	800d8f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe fe1f 	bl	800d854 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fe fe6e 	bl	800d910 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	7a5b      	ldrb	r3, [r3, #9]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d005      	beq.n	800ec48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec3c:	4b04      	ldr	r3, [pc, #16]	; (800ec50 <HAL_PCD_SuspendCallback+0x30>)
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	4a03      	ldr	r2, [pc, #12]	; (800ec50 <HAL_PCD_SuspendCallback+0x30>)
 800ec42:	f043 0306 	orr.w	r3, r3, #6
 800ec46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	e000ed00 	.word	0xe000ed00

0800ec54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	7a5b      	ldrb	r3, [r3, #9]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d007      	beq.n	800ec74 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec64:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <HAL_PCD_ResumeCallback+0x34>)
 800ec66:	691b      	ldr	r3, [r3, #16]
 800ec68:	4a07      	ldr	r2, [pc, #28]	; (800ec88 <HAL_PCD_ResumeCallback+0x34>)
 800ec6a:	f023 0306 	bic.w	r3, r3, #6
 800ec6e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ec70:	f000 f9f8 	bl	800f064 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe fe5e 	bl	800d93c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	e000ed00 	.word	0xe000ed00

0800ec8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ec94:	4a2b      	ldr	r2, [pc, #172]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	4a29      	ldr	r2, [pc, #164]	; (800ed44 <USBD_LL_Init+0xb8>)
 800eca0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eca4:	4b27      	ldr	r3, [pc, #156]	; (800ed44 <USBD_LL_Init+0xb8>)
 800eca6:	4a28      	ldr	r2, [pc, #160]	; (800ed48 <USBD_LL_Init+0xbc>)
 800eca8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ecaa:	4b26      	ldr	r3, [pc, #152]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecac:	2208      	movs	r2, #8
 800ecae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ecb0:	4b24      	ldr	r3, [pc, #144]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecb2:	2202      	movs	r2, #2
 800ecb4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ecb6:	4b23      	ldr	r3, [pc, #140]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecb8:	2202      	movs	r2, #2
 800ecba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ecbc:	4b21      	ldr	r3, [pc, #132]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ecc2:	4b20      	ldr	r3, [pc, #128]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ecc8:	4b1e      	ldr	r3, [pc, #120]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ecce:	4b1d      	ldr	r3, [pc, #116]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ecd4:	481b      	ldr	r0, [pc, #108]	; (800ed44 <USBD_LL_Init+0xb8>)
 800ecd6:	f7f6 fa69 	bl	80051ac <HAL_PCD_Init>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d001      	beq.n	800ece4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ece0:	f7f2 fd20 	bl	8001724 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ecea:	2318      	movs	r3, #24
 800ecec:	2200      	movs	r2, #0
 800ecee:	2100      	movs	r1, #0
 800ecf0:	f7f7 ff23 	bl	8006b3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ecfa:	2358      	movs	r3, #88	; 0x58
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2180      	movs	r1, #128	; 0x80
 800ed00:	f7f7 ff1b 	bl	8006b3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed0a:	23c0      	movs	r3, #192	; 0xc0
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	2181      	movs	r1, #129	; 0x81
 800ed10:	f7f7 ff13 	bl	8006b3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ed1e:	2200      	movs	r2, #0
 800ed20:	2101      	movs	r1, #1
 800ed22:	f7f7 ff0a 	bl	8006b3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed30:	2200      	movs	r2, #0
 800ed32:	2182      	movs	r1, #130	; 0x82
 800ed34:	f7f7 ff01 	bl	8006b3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	200018b8 	.word	0x200018b8
 800ed48:	40005c00 	.word	0x40005c00

0800ed4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7f6 faf0 	bl	8005348 <HAL_PCD_Start>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed6c:	7bfb      	ldrb	r3, [r7, #15]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 f97e 	bl	800f070 <USBD_Get_USB_Status>
 800ed74:	4603      	mov	r3, r0
 800ed76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3710      	adds	r7, #16
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b084      	sub	sp, #16
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	4608      	mov	r0, r1
 800ed8c:	4611      	mov	r1, r2
 800ed8e:	461a      	mov	r2, r3
 800ed90:	4603      	mov	r3, r0
 800ed92:	70fb      	strb	r3, [r7, #3]
 800ed94:	460b      	mov	r3, r1
 800ed96:	70bb      	strb	r3, [r7, #2]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eda0:	2300      	movs	r3, #0
 800eda2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800edaa:	78bb      	ldrb	r3, [r7, #2]
 800edac:	883a      	ldrh	r2, [r7, #0]
 800edae:	78f9      	ldrb	r1, [r7, #3]
 800edb0:	f7f6 fc37 	bl	8005622 <HAL_PCD_EP_Open>
 800edb4:	4603      	mov	r3, r0
 800edb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edb8:	7bfb      	ldrb	r3, [r7, #15]
 800edba:	4618      	mov	r0, r3
 800edbc:	f000 f958 	bl	800f070 <USBD_Get_USB_Status>
 800edc0:	4603      	mov	r3, r0
 800edc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b084      	sub	sp, #16
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	460b      	mov	r3, r1
 800edd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edda:	2300      	movs	r3, #0
 800eddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ede8:	78fa      	ldrb	r2, [r7, #3]
 800edea:	4611      	mov	r1, r2
 800edec:	4618      	mov	r0, r3
 800edee:	f7f6 fc75 	bl	80056dc <HAL_PCD_EP_Close>
 800edf2:	4603      	mov	r3, r0
 800edf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 f939 	bl	800f070 <USBD_Get_USB_Status>
 800edfe:	4603      	mov	r3, r0
 800ee00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	460b      	mov	r3, r1
 800ee16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee26:	78fa      	ldrb	r2, [r7, #3]
 800ee28:	4611      	mov	r1, r2
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7f6 fd1e 	bl	800586c <HAL_PCD_EP_SetStall>
 800ee30:	4603      	mov	r3, r0
 800ee32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee34:	7bfb      	ldrb	r3, [r7, #15]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f000 f91a 	bl	800f070 <USBD_Get_USB_Status>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3710      	adds	r7, #16
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b084      	sub	sp, #16
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
 800ee52:	460b      	mov	r3, r1
 800ee54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee64:	78fa      	ldrb	r2, [r7, #3]
 800ee66:	4611      	mov	r1, r2
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7f6 fd51 	bl	8005910 <HAL_PCD_EP_ClrStall>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 f8fb 	bl	800f070 <USBD_Get_USB_Status>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	460b      	mov	r3, r1
 800ee92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	da0b      	bge.n	800eebc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eeaa:	68f9      	ldr	r1, [r7, #12]
 800eeac:	4613      	mov	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	440b      	add	r3, r1
 800eeb6:	3312      	adds	r3, #18
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	e00b      	b.n	800eed4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eebc:	78fb      	ldrb	r3, [r7, #3]
 800eebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eec2:	68f9      	ldr	r1, [r7, #12]
 800eec4:	4613      	mov	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4413      	add	r3, r2
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	440b      	add	r3, r1
 800eece:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800eed2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eefa:	78fa      	ldrb	r2, [r7, #3]
 800eefc:	4611      	mov	r1, r2
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7f6 fb6b 	bl	80055da <HAL_PCD_SetAddress>
 800ef04:	4603      	mov	r3, r0
 800ef06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f000 f8b0 	bl	800f070 <USBD_Get_USB_Status>
 800ef10:	4603      	mov	r3, r0
 800ef12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b086      	sub	sp, #24
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	60f8      	str	r0, [r7, #12]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef3c:	7af9      	ldrb	r1, [r7, #11]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	f7f6 fc5c 	bl	80057fe <HAL_PCD_EP_Transmit>
 800ef46:	4603      	mov	r3, r0
 800ef48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef4a:	7dfb      	ldrb	r3, [r7, #23]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 f88f 	bl	800f070 <USBD_Get_USB_Status>
 800ef52:	4603      	mov	r3, r0
 800ef54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef56:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	607a      	str	r2, [r7, #4]
 800ef6a:	603b      	str	r3, [r7, #0]
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef7e:	7af9      	ldrb	r1, [r7, #11]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	f7f6 fbf2 	bl	800576c <HAL_PCD_EP_Receive>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef8c:	7dfb      	ldrb	r3, [r7, #23]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f000 f86e 	bl	800f070 <USBD_Get_USB_Status>
 800ef94:	4603      	mov	r3, r0
 800ef96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef98:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3718      	adds	r7, #24
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b082      	sub	sp, #8
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
 800efaa:	460b      	mov	r3, r1
 800efac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efb4:	78fa      	ldrb	r2, [r7, #3]
 800efb6:	4611      	mov	r1, r2
 800efb8:	4618      	mov	r0, r3
 800efba:	f7f6 fc08 	bl	80057ce <HAL_PCD_EP_GetRxCount>
 800efbe:	4603      	mov	r3, r0
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d002      	beq.n	800efe0 <HAL_PCDEx_LPM_Callback+0x18>
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d013      	beq.n	800f006 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800efde:	e023      	b.n	800f028 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	7a5b      	ldrb	r3, [r3, #9]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d007      	beq.n	800eff8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800efe8:	f000 f83c 	bl	800f064 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efec:	4b10      	ldr	r3, [pc, #64]	; (800f030 <HAL_PCDEx_LPM_Callback+0x68>)
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	4a0f      	ldr	r2, [pc, #60]	; (800f030 <HAL_PCDEx_LPM_Callback+0x68>)
 800eff2:	f023 0306 	bic.w	r3, r3, #6
 800eff6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800effe:	4618      	mov	r0, r3
 800f000:	f7fe fc9c 	bl	800d93c <USBD_LL_Resume>
    break;
 800f004:	e010      	b.n	800f028 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe fc7f 	bl	800d910 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	7a5b      	ldrb	r3, [r3, #9]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d005      	beq.n	800f026 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f01a:	4b05      	ldr	r3, [pc, #20]	; (800f030 <HAL_PCDEx_LPM_Callback+0x68>)
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	4a04      	ldr	r2, [pc, #16]	; (800f030 <HAL_PCDEx_LPM_Callback+0x68>)
 800f020:	f043 0306 	orr.w	r3, r3, #6
 800f024:	6113      	str	r3, [r2, #16]
    break;
 800f026:	bf00      	nop
}
 800f028:	bf00      	nop
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	e000ed00 	.word	0xe000ed00

0800f034 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f03c:	4b03      	ldr	r3, [pc, #12]	; (800f04c <USBD_static_malloc+0x18>)
}
 800f03e:	4618      	mov	r0, r3
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	20001b94 	.word	0x20001b94

0800f050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]

}
 800f058:	bf00      	nop
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f068:	f7f2 fb10 	bl	800168c <SystemClock_Config>
}
 800f06c:	bf00      	nop
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f07a:	2300      	movs	r3, #0
 800f07c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f07e:	79fb      	ldrb	r3, [r7, #7]
 800f080:	2b03      	cmp	r3, #3
 800f082:	d817      	bhi.n	800f0b4 <USBD_Get_USB_Status+0x44>
 800f084:	a201      	add	r2, pc, #4	; (adr r2, 800f08c <USBD_Get_USB_Status+0x1c>)
 800f086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08a:	bf00      	nop
 800f08c:	0800f09d 	.word	0x0800f09d
 800f090:	0800f0a3 	.word	0x0800f0a3
 800f094:	0800f0a9 	.word	0x0800f0a9
 800f098:	0800f0af 	.word	0x0800f0af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a0:	e00b      	b.n	800f0ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a6:	e008      	b.n	800f0ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ac:	e005      	b.n	800f0ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f0b2:	e002      	b.n	800f0ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f0b4:	2303      	movs	r3, #3
 800f0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0b8:	bf00      	nop
  }
  return usb_status;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <malloc>:
 800f0c8:	4b02      	ldr	r3, [pc, #8]	; (800f0d4 <malloc+0xc>)
 800f0ca:	4601      	mov	r1, r0
 800f0cc:	6818      	ldr	r0, [r3, #0]
 800f0ce:	f000 b82b 	b.w	800f128 <_malloc_r>
 800f0d2:	bf00      	nop
 800f0d4:	20000348 	.word	0x20000348

0800f0d8 <free>:
 800f0d8:	4b02      	ldr	r3, [pc, #8]	; (800f0e4 <free+0xc>)
 800f0da:	4601      	mov	r1, r0
 800f0dc:	6818      	ldr	r0, [r3, #0]
 800f0de:	f002 bf55 	b.w	8011f8c <_free_r>
 800f0e2:	bf00      	nop
 800f0e4:	20000348 	.word	0x20000348

0800f0e8 <sbrk_aligned>:
 800f0e8:	b570      	push	{r4, r5, r6, lr}
 800f0ea:	4e0e      	ldr	r6, [pc, #56]	; (800f124 <sbrk_aligned+0x3c>)
 800f0ec:	460c      	mov	r4, r1
 800f0ee:	6831      	ldr	r1, [r6, #0]
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	b911      	cbnz	r1, 800f0fa <sbrk_aligned+0x12>
 800f0f4:	f002 f83e 	bl	8011174 <_sbrk_r>
 800f0f8:	6030      	str	r0, [r6, #0]
 800f0fa:	4621      	mov	r1, r4
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	f002 f839 	bl	8011174 <_sbrk_r>
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	d00a      	beq.n	800f11c <sbrk_aligned+0x34>
 800f106:	1cc4      	adds	r4, r0, #3
 800f108:	f024 0403 	bic.w	r4, r4, #3
 800f10c:	42a0      	cmp	r0, r4
 800f10e:	d007      	beq.n	800f120 <sbrk_aligned+0x38>
 800f110:	1a21      	subs	r1, r4, r0
 800f112:	4628      	mov	r0, r5
 800f114:	f002 f82e 	bl	8011174 <_sbrk_r>
 800f118:	3001      	adds	r0, #1
 800f11a:	d101      	bne.n	800f120 <sbrk_aligned+0x38>
 800f11c:	f04f 34ff 	mov.w	r4, #4294967295
 800f120:	4620      	mov	r0, r4
 800f122:	bd70      	pop	{r4, r5, r6, pc}
 800f124:	20001db8 	.word	0x20001db8

0800f128 <_malloc_r>:
 800f128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f12c:	1ccd      	adds	r5, r1, #3
 800f12e:	f025 0503 	bic.w	r5, r5, #3
 800f132:	3508      	adds	r5, #8
 800f134:	2d0c      	cmp	r5, #12
 800f136:	bf38      	it	cc
 800f138:	250c      	movcc	r5, #12
 800f13a:	2d00      	cmp	r5, #0
 800f13c:	4607      	mov	r7, r0
 800f13e:	db01      	blt.n	800f144 <_malloc_r+0x1c>
 800f140:	42a9      	cmp	r1, r5
 800f142:	d905      	bls.n	800f150 <_malloc_r+0x28>
 800f144:	230c      	movs	r3, #12
 800f146:	603b      	str	r3, [r7, #0]
 800f148:	2600      	movs	r6, #0
 800f14a:	4630      	mov	r0, r6
 800f14c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f224 <_malloc_r+0xfc>
 800f154:	f000 f868 	bl	800f228 <__malloc_lock>
 800f158:	f8d8 3000 	ldr.w	r3, [r8]
 800f15c:	461c      	mov	r4, r3
 800f15e:	bb5c      	cbnz	r4, 800f1b8 <_malloc_r+0x90>
 800f160:	4629      	mov	r1, r5
 800f162:	4638      	mov	r0, r7
 800f164:	f7ff ffc0 	bl	800f0e8 <sbrk_aligned>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	4604      	mov	r4, r0
 800f16c:	d155      	bne.n	800f21a <_malloc_r+0xf2>
 800f16e:	f8d8 4000 	ldr.w	r4, [r8]
 800f172:	4626      	mov	r6, r4
 800f174:	2e00      	cmp	r6, #0
 800f176:	d145      	bne.n	800f204 <_malloc_r+0xdc>
 800f178:	2c00      	cmp	r4, #0
 800f17a:	d048      	beq.n	800f20e <_malloc_r+0xe6>
 800f17c:	6823      	ldr	r3, [r4, #0]
 800f17e:	4631      	mov	r1, r6
 800f180:	4638      	mov	r0, r7
 800f182:	eb04 0903 	add.w	r9, r4, r3
 800f186:	f001 fff5 	bl	8011174 <_sbrk_r>
 800f18a:	4581      	cmp	r9, r0
 800f18c:	d13f      	bne.n	800f20e <_malloc_r+0xe6>
 800f18e:	6821      	ldr	r1, [r4, #0]
 800f190:	1a6d      	subs	r5, r5, r1
 800f192:	4629      	mov	r1, r5
 800f194:	4638      	mov	r0, r7
 800f196:	f7ff ffa7 	bl	800f0e8 <sbrk_aligned>
 800f19a:	3001      	adds	r0, #1
 800f19c:	d037      	beq.n	800f20e <_malloc_r+0xe6>
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	442b      	add	r3, r5
 800f1a2:	6023      	str	r3, [r4, #0]
 800f1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d038      	beq.n	800f21e <_malloc_r+0xf6>
 800f1ac:	685a      	ldr	r2, [r3, #4]
 800f1ae:	42a2      	cmp	r2, r4
 800f1b0:	d12b      	bne.n	800f20a <_malloc_r+0xe2>
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	605a      	str	r2, [r3, #4]
 800f1b6:	e00f      	b.n	800f1d8 <_malloc_r+0xb0>
 800f1b8:	6822      	ldr	r2, [r4, #0]
 800f1ba:	1b52      	subs	r2, r2, r5
 800f1bc:	d41f      	bmi.n	800f1fe <_malloc_r+0xd6>
 800f1be:	2a0b      	cmp	r2, #11
 800f1c0:	d917      	bls.n	800f1f2 <_malloc_r+0xca>
 800f1c2:	1961      	adds	r1, r4, r5
 800f1c4:	42a3      	cmp	r3, r4
 800f1c6:	6025      	str	r5, [r4, #0]
 800f1c8:	bf18      	it	ne
 800f1ca:	6059      	strne	r1, [r3, #4]
 800f1cc:	6863      	ldr	r3, [r4, #4]
 800f1ce:	bf08      	it	eq
 800f1d0:	f8c8 1000 	streq.w	r1, [r8]
 800f1d4:	5162      	str	r2, [r4, r5]
 800f1d6:	604b      	str	r3, [r1, #4]
 800f1d8:	4638      	mov	r0, r7
 800f1da:	f104 060b 	add.w	r6, r4, #11
 800f1de:	f000 f829 	bl	800f234 <__malloc_unlock>
 800f1e2:	f026 0607 	bic.w	r6, r6, #7
 800f1e6:	1d23      	adds	r3, r4, #4
 800f1e8:	1af2      	subs	r2, r6, r3
 800f1ea:	d0ae      	beq.n	800f14a <_malloc_r+0x22>
 800f1ec:	1b9b      	subs	r3, r3, r6
 800f1ee:	50a3      	str	r3, [r4, r2]
 800f1f0:	e7ab      	b.n	800f14a <_malloc_r+0x22>
 800f1f2:	42a3      	cmp	r3, r4
 800f1f4:	6862      	ldr	r2, [r4, #4]
 800f1f6:	d1dd      	bne.n	800f1b4 <_malloc_r+0x8c>
 800f1f8:	f8c8 2000 	str.w	r2, [r8]
 800f1fc:	e7ec      	b.n	800f1d8 <_malloc_r+0xb0>
 800f1fe:	4623      	mov	r3, r4
 800f200:	6864      	ldr	r4, [r4, #4]
 800f202:	e7ac      	b.n	800f15e <_malloc_r+0x36>
 800f204:	4634      	mov	r4, r6
 800f206:	6876      	ldr	r6, [r6, #4]
 800f208:	e7b4      	b.n	800f174 <_malloc_r+0x4c>
 800f20a:	4613      	mov	r3, r2
 800f20c:	e7cc      	b.n	800f1a8 <_malloc_r+0x80>
 800f20e:	230c      	movs	r3, #12
 800f210:	603b      	str	r3, [r7, #0]
 800f212:	4638      	mov	r0, r7
 800f214:	f000 f80e 	bl	800f234 <__malloc_unlock>
 800f218:	e797      	b.n	800f14a <_malloc_r+0x22>
 800f21a:	6025      	str	r5, [r4, #0]
 800f21c:	e7dc      	b.n	800f1d8 <_malloc_r+0xb0>
 800f21e:	605b      	str	r3, [r3, #4]
 800f220:	deff      	udf	#255	; 0xff
 800f222:	bf00      	nop
 800f224:	20001db4 	.word	0x20001db4

0800f228 <__malloc_lock>:
 800f228:	4801      	ldr	r0, [pc, #4]	; (800f230 <__malloc_lock+0x8>)
 800f22a:	f001 bff0 	b.w	801120e <__retarget_lock_acquire_recursive>
 800f22e:	bf00      	nop
 800f230:	20001efc 	.word	0x20001efc

0800f234 <__malloc_unlock>:
 800f234:	4801      	ldr	r0, [pc, #4]	; (800f23c <__malloc_unlock+0x8>)
 800f236:	f001 bfeb 	b.w	8011210 <__retarget_lock_release_recursive>
 800f23a:	bf00      	nop
 800f23c:	20001efc 	.word	0x20001efc

0800f240 <sulp>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	4604      	mov	r4, r0
 800f244:	460d      	mov	r5, r1
 800f246:	ec45 4b10 	vmov	d0, r4, r5
 800f24a:	4616      	mov	r6, r2
 800f24c:	f003 fdc0 	bl	8012dd0 <__ulp>
 800f250:	ec51 0b10 	vmov	r0, r1, d0
 800f254:	b17e      	cbz	r6, 800f276 <sulp+0x36>
 800f256:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f25a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f25e:	2b00      	cmp	r3, #0
 800f260:	dd09      	ble.n	800f276 <sulp+0x36>
 800f262:	051b      	lsls	r3, r3, #20
 800f264:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f268:	2400      	movs	r4, #0
 800f26a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f26e:	4622      	mov	r2, r4
 800f270:	462b      	mov	r3, r5
 800f272:	f7f1 f9e9 	bl	8000648 <__aeabi_dmul>
 800f276:	bd70      	pop	{r4, r5, r6, pc}

0800f278 <_strtod_l>:
 800f278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27c:	ed2d 8b02 	vpush	{d8}
 800f280:	b09b      	sub	sp, #108	; 0x6c
 800f282:	4604      	mov	r4, r0
 800f284:	9213      	str	r2, [sp, #76]	; 0x4c
 800f286:	2200      	movs	r2, #0
 800f288:	9216      	str	r2, [sp, #88]	; 0x58
 800f28a:	460d      	mov	r5, r1
 800f28c:	f04f 0800 	mov.w	r8, #0
 800f290:	f04f 0900 	mov.w	r9, #0
 800f294:	460a      	mov	r2, r1
 800f296:	9215      	str	r2, [sp, #84]	; 0x54
 800f298:	7811      	ldrb	r1, [r2, #0]
 800f29a:	292b      	cmp	r1, #43	; 0x2b
 800f29c:	d04c      	beq.n	800f338 <_strtod_l+0xc0>
 800f29e:	d83a      	bhi.n	800f316 <_strtod_l+0x9e>
 800f2a0:	290d      	cmp	r1, #13
 800f2a2:	d834      	bhi.n	800f30e <_strtod_l+0x96>
 800f2a4:	2908      	cmp	r1, #8
 800f2a6:	d834      	bhi.n	800f312 <_strtod_l+0x9a>
 800f2a8:	2900      	cmp	r1, #0
 800f2aa:	d03d      	beq.n	800f328 <_strtod_l+0xb0>
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	920a      	str	r2, [sp, #40]	; 0x28
 800f2b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f2b2:	7832      	ldrb	r2, [r6, #0]
 800f2b4:	2a30      	cmp	r2, #48	; 0x30
 800f2b6:	f040 80b4 	bne.w	800f422 <_strtod_l+0x1aa>
 800f2ba:	7872      	ldrb	r2, [r6, #1]
 800f2bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f2c0:	2a58      	cmp	r2, #88	; 0x58
 800f2c2:	d170      	bne.n	800f3a6 <_strtod_l+0x12e>
 800f2c4:	9302      	str	r3, [sp, #8]
 800f2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c8:	9301      	str	r3, [sp, #4]
 800f2ca:	ab16      	add	r3, sp, #88	; 0x58
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	4a8e      	ldr	r2, [pc, #568]	; (800f508 <_strtod_l+0x290>)
 800f2d0:	ab17      	add	r3, sp, #92	; 0x5c
 800f2d2:	a915      	add	r1, sp, #84	; 0x54
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	f002 ff0d 	bl	80120f4 <__gethex>
 800f2da:	f010 070f 	ands.w	r7, r0, #15
 800f2de:	4605      	mov	r5, r0
 800f2e0:	d005      	beq.n	800f2ee <_strtod_l+0x76>
 800f2e2:	2f06      	cmp	r7, #6
 800f2e4:	d12a      	bne.n	800f33c <_strtod_l+0xc4>
 800f2e6:	3601      	adds	r6, #1
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	9615      	str	r6, [sp, #84]	; 0x54
 800f2ec:	930a      	str	r3, [sp, #40]	; 0x28
 800f2ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f040 857f 	bne.w	800fdf4 <_strtod_l+0xb7c>
 800f2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f8:	b1db      	cbz	r3, 800f332 <_strtod_l+0xba>
 800f2fa:	4642      	mov	r2, r8
 800f2fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f300:	ec43 2b10 	vmov	d0, r2, r3
 800f304:	b01b      	add	sp, #108	; 0x6c
 800f306:	ecbd 8b02 	vpop	{d8}
 800f30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f30e:	2920      	cmp	r1, #32
 800f310:	d1cc      	bne.n	800f2ac <_strtod_l+0x34>
 800f312:	3201      	adds	r2, #1
 800f314:	e7bf      	b.n	800f296 <_strtod_l+0x1e>
 800f316:	292d      	cmp	r1, #45	; 0x2d
 800f318:	d1c8      	bne.n	800f2ac <_strtod_l+0x34>
 800f31a:	2101      	movs	r1, #1
 800f31c:	910a      	str	r1, [sp, #40]	; 0x28
 800f31e:	1c51      	adds	r1, r2, #1
 800f320:	9115      	str	r1, [sp, #84]	; 0x54
 800f322:	7852      	ldrb	r2, [r2, #1]
 800f324:	2a00      	cmp	r2, #0
 800f326:	d1c3      	bne.n	800f2b0 <_strtod_l+0x38>
 800f328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f32a:	9515      	str	r5, [sp, #84]	; 0x54
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	f040 855f 	bne.w	800fdf0 <_strtod_l+0xb78>
 800f332:	4642      	mov	r2, r8
 800f334:	464b      	mov	r3, r9
 800f336:	e7e3      	b.n	800f300 <_strtod_l+0x88>
 800f338:	2100      	movs	r1, #0
 800f33a:	e7ef      	b.n	800f31c <_strtod_l+0xa4>
 800f33c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f33e:	b13a      	cbz	r2, 800f350 <_strtod_l+0xd8>
 800f340:	2135      	movs	r1, #53	; 0x35
 800f342:	a818      	add	r0, sp, #96	; 0x60
 800f344:	f003 fe41 	bl	8012fca <__copybits>
 800f348:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f34a:	4620      	mov	r0, r4
 800f34c:	f003 fa14 	bl	8012778 <_Bfree>
 800f350:	3f01      	subs	r7, #1
 800f352:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f354:	2f04      	cmp	r7, #4
 800f356:	d806      	bhi.n	800f366 <_strtod_l+0xee>
 800f358:	e8df f007 	tbb	[pc, r7]
 800f35c:	201d0314 	.word	0x201d0314
 800f360:	14          	.byte	0x14
 800f361:	00          	.byte	0x00
 800f362:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800f366:	05e9      	lsls	r1, r5, #23
 800f368:	bf48      	it	mi
 800f36a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800f36e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f372:	0d1b      	lsrs	r3, r3, #20
 800f374:	051b      	lsls	r3, r3, #20
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1b9      	bne.n	800f2ee <_strtod_l+0x76>
 800f37a:	f001 ff1d 	bl	80111b8 <__errno>
 800f37e:	2322      	movs	r3, #34	; 0x22
 800f380:	6003      	str	r3, [r0, #0]
 800f382:	e7b4      	b.n	800f2ee <_strtod_l+0x76>
 800f384:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800f388:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f38c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f390:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f394:	e7e7      	b.n	800f366 <_strtod_l+0xee>
 800f396:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f510 <_strtod_l+0x298>
 800f39a:	e7e4      	b.n	800f366 <_strtod_l+0xee>
 800f39c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f3a0:	f04f 38ff 	mov.w	r8, #4294967295
 800f3a4:	e7df      	b.n	800f366 <_strtod_l+0xee>
 800f3a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3a8:	1c5a      	adds	r2, r3, #1
 800f3aa:	9215      	str	r2, [sp, #84]	; 0x54
 800f3ac:	785b      	ldrb	r3, [r3, #1]
 800f3ae:	2b30      	cmp	r3, #48	; 0x30
 800f3b0:	d0f9      	beq.n	800f3a6 <_strtod_l+0x12e>
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d09b      	beq.n	800f2ee <_strtod_l+0x76>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	f04f 0a00 	mov.w	sl, #0
 800f3bc:	9304      	str	r3, [sp, #16]
 800f3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f3c6:	46d3      	mov	fp, sl
 800f3c8:	220a      	movs	r2, #10
 800f3ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f3cc:	7806      	ldrb	r6, [r0, #0]
 800f3ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f3d2:	b2d9      	uxtb	r1, r3
 800f3d4:	2909      	cmp	r1, #9
 800f3d6:	d926      	bls.n	800f426 <_strtod_l+0x1ae>
 800f3d8:	494c      	ldr	r1, [pc, #304]	; (800f50c <_strtod_l+0x294>)
 800f3da:	2201      	movs	r2, #1
 800f3dc:	f001 fe0d 	bl	8010ffa <strncmp>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d030      	beq.n	800f446 <_strtod_l+0x1ce>
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	4632      	mov	r2, r6
 800f3e8:	9005      	str	r0, [sp, #20]
 800f3ea:	465e      	mov	r6, fp
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2a65      	cmp	r2, #101	; 0x65
 800f3f0:	d001      	beq.n	800f3f6 <_strtod_l+0x17e>
 800f3f2:	2a45      	cmp	r2, #69	; 0x45
 800f3f4:	d113      	bne.n	800f41e <_strtod_l+0x1a6>
 800f3f6:	b91e      	cbnz	r6, 800f400 <_strtod_l+0x188>
 800f3f8:	9a04      	ldr	r2, [sp, #16]
 800f3fa:	4302      	orrs	r2, r0
 800f3fc:	d094      	beq.n	800f328 <_strtod_l+0xb0>
 800f3fe:	2600      	movs	r6, #0
 800f400:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f402:	1c6a      	adds	r2, r5, #1
 800f404:	9215      	str	r2, [sp, #84]	; 0x54
 800f406:	786a      	ldrb	r2, [r5, #1]
 800f408:	2a2b      	cmp	r2, #43	; 0x2b
 800f40a:	d074      	beq.n	800f4f6 <_strtod_l+0x27e>
 800f40c:	2a2d      	cmp	r2, #45	; 0x2d
 800f40e:	d078      	beq.n	800f502 <_strtod_l+0x28a>
 800f410:	f04f 0c00 	mov.w	ip, #0
 800f414:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f418:	2909      	cmp	r1, #9
 800f41a:	d97f      	bls.n	800f51c <_strtod_l+0x2a4>
 800f41c:	9515      	str	r5, [sp, #84]	; 0x54
 800f41e:	2700      	movs	r7, #0
 800f420:	e09e      	b.n	800f560 <_strtod_l+0x2e8>
 800f422:	2300      	movs	r3, #0
 800f424:	e7c8      	b.n	800f3b8 <_strtod_l+0x140>
 800f426:	f1bb 0f08 	cmp.w	fp, #8
 800f42a:	bfd8      	it	le
 800f42c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f42e:	f100 0001 	add.w	r0, r0, #1
 800f432:	bfda      	itte	le
 800f434:	fb02 3301 	mlale	r3, r2, r1, r3
 800f438:	9309      	strle	r3, [sp, #36]	; 0x24
 800f43a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f43e:	f10b 0b01 	add.w	fp, fp, #1
 800f442:	9015      	str	r0, [sp, #84]	; 0x54
 800f444:	e7c1      	b.n	800f3ca <_strtod_l+0x152>
 800f446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	9215      	str	r2, [sp, #84]	; 0x54
 800f44c:	785a      	ldrb	r2, [r3, #1]
 800f44e:	f1bb 0f00 	cmp.w	fp, #0
 800f452:	d037      	beq.n	800f4c4 <_strtod_l+0x24c>
 800f454:	9005      	str	r0, [sp, #20]
 800f456:	465e      	mov	r6, fp
 800f458:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f45c:	2b09      	cmp	r3, #9
 800f45e:	d912      	bls.n	800f486 <_strtod_l+0x20e>
 800f460:	2301      	movs	r3, #1
 800f462:	e7c4      	b.n	800f3ee <_strtod_l+0x176>
 800f464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	9215      	str	r2, [sp, #84]	; 0x54
 800f46a:	785a      	ldrb	r2, [r3, #1]
 800f46c:	3001      	adds	r0, #1
 800f46e:	2a30      	cmp	r2, #48	; 0x30
 800f470:	d0f8      	beq.n	800f464 <_strtod_l+0x1ec>
 800f472:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f476:	2b08      	cmp	r3, #8
 800f478:	f200 84c1 	bhi.w	800fdfe <_strtod_l+0xb86>
 800f47c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f47e:	9005      	str	r0, [sp, #20]
 800f480:	2000      	movs	r0, #0
 800f482:	930b      	str	r3, [sp, #44]	; 0x2c
 800f484:	4606      	mov	r6, r0
 800f486:	3a30      	subs	r2, #48	; 0x30
 800f488:	f100 0301 	add.w	r3, r0, #1
 800f48c:	d014      	beq.n	800f4b8 <_strtod_l+0x240>
 800f48e:	9905      	ldr	r1, [sp, #20]
 800f490:	4419      	add	r1, r3
 800f492:	9105      	str	r1, [sp, #20]
 800f494:	4633      	mov	r3, r6
 800f496:	eb00 0c06 	add.w	ip, r0, r6
 800f49a:	210a      	movs	r1, #10
 800f49c:	4563      	cmp	r3, ip
 800f49e:	d113      	bne.n	800f4c8 <_strtod_l+0x250>
 800f4a0:	1833      	adds	r3, r6, r0
 800f4a2:	2b08      	cmp	r3, #8
 800f4a4:	f106 0601 	add.w	r6, r6, #1
 800f4a8:	4406      	add	r6, r0
 800f4aa:	dc1a      	bgt.n	800f4e2 <_strtod_l+0x26a>
 800f4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4ae:	230a      	movs	r3, #10
 800f4b0:	fb03 2301 	mla	r3, r3, r1, r2
 800f4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f4ba:	1c51      	adds	r1, r2, #1
 800f4bc:	9115      	str	r1, [sp, #84]	; 0x54
 800f4be:	7852      	ldrb	r2, [r2, #1]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	e7c9      	b.n	800f458 <_strtod_l+0x1e0>
 800f4c4:	4658      	mov	r0, fp
 800f4c6:	e7d2      	b.n	800f46e <_strtod_l+0x1f6>
 800f4c8:	2b08      	cmp	r3, #8
 800f4ca:	f103 0301 	add.w	r3, r3, #1
 800f4ce:	dc03      	bgt.n	800f4d8 <_strtod_l+0x260>
 800f4d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f4d2:	434f      	muls	r7, r1
 800f4d4:	9709      	str	r7, [sp, #36]	; 0x24
 800f4d6:	e7e1      	b.n	800f49c <_strtod_l+0x224>
 800f4d8:	2b10      	cmp	r3, #16
 800f4da:	bfd8      	it	le
 800f4dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800f4e0:	e7dc      	b.n	800f49c <_strtod_l+0x224>
 800f4e2:	2e10      	cmp	r6, #16
 800f4e4:	bfdc      	itt	le
 800f4e6:	230a      	movle	r3, #10
 800f4e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800f4ec:	e7e3      	b.n	800f4b6 <_strtod_l+0x23e>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	9305      	str	r3, [sp, #20]
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e780      	b.n	800f3f8 <_strtod_l+0x180>
 800f4f6:	f04f 0c00 	mov.w	ip, #0
 800f4fa:	1caa      	adds	r2, r5, #2
 800f4fc:	9215      	str	r2, [sp, #84]	; 0x54
 800f4fe:	78aa      	ldrb	r2, [r5, #2]
 800f500:	e788      	b.n	800f414 <_strtod_l+0x19c>
 800f502:	f04f 0c01 	mov.w	ip, #1
 800f506:	e7f8      	b.n	800f4fa <_strtod_l+0x282>
 800f508:	08013b90 	.word	0x08013b90
 800f50c:	08013b8c 	.word	0x08013b8c
 800f510:	7ff00000 	.word	0x7ff00000
 800f514:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f516:	1c51      	adds	r1, r2, #1
 800f518:	9115      	str	r1, [sp, #84]	; 0x54
 800f51a:	7852      	ldrb	r2, [r2, #1]
 800f51c:	2a30      	cmp	r2, #48	; 0x30
 800f51e:	d0f9      	beq.n	800f514 <_strtod_l+0x29c>
 800f520:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f524:	2908      	cmp	r1, #8
 800f526:	f63f af7a 	bhi.w	800f41e <_strtod_l+0x1a6>
 800f52a:	3a30      	subs	r2, #48	; 0x30
 800f52c:	9208      	str	r2, [sp, #32]
 800f52e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f530:	920c      	str	r2, [sp, #48]	; 0x30
 800f532:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f534:	1c57      	adds	r7, r2, #1
 800f536:	9715      	str	r7, [sp, #84]	; 0x54
 800f538:	7852      	ldrb	r2, [r2, #1]
 800f53a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f53e:	f1be 0f09 	cmp.w	lr, #9
 800f542:	d938      	bls.n	800f5b6 <_strtod_l+0x33e>
 800f544:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f546:	1a7f      	subs	r7, r7, r1
 800f548:	2f08      	cmp	r7, #8
 800f54a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f54e:	dc03      	bgt.n	800f558 <_strtod_l+0x2e0>
 800f550:	9908      	ldr	r1, [sp, #32]
 800f552:	428f      	cmp	r7, r1
 800f554:	bfa8      	it	ge
 800f556:	460f      	movge	r7, r1
 800f558:	f1bc 0f00 	cmp.w	ip, #0
 800f55c:	d000      	beq.n	800f560 <_strtod_l+0x2e8>
 800f55e:	427f      	negs	r7, r7
 800f560:	2e00      	cmp	r6, #0
 800f562:	d14f      	bne.n	800f604 <_strtod_l+0x38c>
 800f564:	9904      	ldr	r1, [sp, #16]
 800f566:	4301      	orrs	r1, r0
 800f568:	f47f aec1 	bne.w	800f2ee <_strtod_l+0x76>
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f47f aedb 	bne.w	800f328 <_strtod_l+0xb0>
 800f572:	2a69      	cmp	r2, #105	; 0x69
 800f574:	d029      	beq.n	800f5ca <_strtod_l+0x352>
 800f576:	dc26      	bgt.n	800f5c6 <_strtod_l+0x34e>
 800f578:	2a49      	cmp	r2, #73	; 0x49
 800f57a:	d026      	beq.n	800f5ca <_strtod_l+0x352>
 800f57c:	2a4e      	cmp	r2, #78	; 0x4e
 800f57e:	f47f aed3 	bne.w	800f328 <_strtod_l+0xb0>
 800f582:	499b      	ldr	r1, [pc, #620]	; (800f7f0 <_strtod_l+0x578>)
 800f584:	a815      	add	r0, sp, #84	; 0x54
 800f586:	f002 fff5 	bl	8012574 <__match>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	f43f aecc 	beq.w	800f328 <_strtod_l+0xb0>
 800f590:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	2b28      	cmp	r3, #40	; 0x28
 800f596:	d12f      	bne.n	800f5f8 <_strtod_l+0x380>
 800f598:	4996      	ldr	r1, [pc, #600]	; (800f7f4 <_strtod_l+0x57c>)
 800f59a:	aa18      	add	r2, sp, #96	; 0x60
 800f59c:	a815      	add	r0, sp, #84	; 0x54
 800f59e:	f002 fffd 	bl	801259c <__hexnan>
 800f5a2:	2805      	cmp	r0, #5
 800f5a4:	d128      	bne.n	800f5f8 <_strtod_l+0x380>
 800f5a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f5a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f5ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f5b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f5b4:	e69b      	b.n	800f2ee <_strtod_l+0x76>
 800f5b6:	9f08      	ldr	r7, [sp, #32]
 800f5b8:	210a      	movs	r1, #10
 800f5ba:	fb01 2107 	mla	r1, r1, r7, r2
 800f5be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f5c2:	9208      	str	r2, [sp, #32]
 800f5c4:	e7b5      	b.n	800f532 <_strtod_l+0x2ba>
 800f5c6:	2a6e      	cmp	r2, #110	; 0x6e
 800f5c8:	e7d9      	b.n	800f57e <_strtod_l+0x306>
 800f5ca:	498b      	ldr	r1, [pc, #556]	; (800f7f8 <_strtod_l+0x580>)
 800f5cc:	a815      	add	r0, sp, #84	; 0x54
 800f5ce:	f002 ffd1 	bl	8012574 <__match>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	f43f aea8 	beq.w	800f328 <_strtod_l+0xb0>
 800f5d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5da:	4988      	ldr	r1, [pc, #544]	; (800f7fc <_strtod_l+0x584>)
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	a815      	add	r0, sp, #84	; 0x54
 800f5e0:	9315      	str	r3, [sp, #84]	; 0x54
 800f5e2:	f002 ffc7 	bl	8012574 <__match>
 800f5e6:	b910      	cbnz	r0, 800f5ee <_strtod_l+0x376>
 800f5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	9315      	str	r3, [sp, #84]	; 0x54
 800f5ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f80c <_strtod_l+0x594>
 800f5f2:	f04f 0800 	mov.w	r8, #0
 800f5f6:	e67a      	b.n	800f2ee <_strtod_l+0x76>
 800f5f8:	4881      	ldr	r0, [pc, #516]	; (800f800 <_strtod_l+0x588>)
 800f5fa:	f001 fe21 	bl	8011240 <nan>
 800f5fe:	ec59 8b10 	vmov	r8, r9, d0
 800f602:	e674      	b.n	800f2ee <_strtod_l+0x76>
 800f604:	9b05      	ldr	r3, [sp, #20]
 800f606:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f608:	1afb      	subs	r3, r7, r3
 800f60a:	f1bb 0f00 	cmp.w	fp, #0
 800f60e:	bf08      	it	eq
 800f610:	46b3      	moveq	fp, r6
 800f612:	2e10      	cmp	r6, #16
 800f614:	9308      	str	r3, [sp, #32]
 800f616:	4635      	mov	r5, r6
 800f618:	bfa8      	it	ge
 800f61a:	2510      	movge	r5, #16
 800f61c:	f7f0 ff9a 	bl	8000554 <__aeabi_ui2d>
 800f620:	2e09      	cmp	r6, #9
 800f622:	4680      	mov	r8, r0
 800f624:	4689      	mov	r9, r1
 800f626:	dd13      	ble.n	800f650 <_strtod_l+0x3d8>
 800f628:	4b76      	ldr	r3, [pc, #472]	; (800f804 <_strtod_l+0x58c>)
 800f62a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f62e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f632:	f7f1 f809 	bl	8000648 <__aeabi_dmul>
 800f636:	4680      	mov	r8, r0
 800f638:	4650      	mov	r0, sl
 800f63a:	4689      	mov	r9, r1
 800f63c:	f7f0 ff8a 	bl	8000554 <__aeabi_ui2d>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	4640      	mov	r0, r8
 800f646:	4649      	mov	r1, r9
 800f648:	f7f0 fe48 	bl	80002dc <__adddf3>
 800f64c:	4680      	mov	r8, r0
 800f64e:	4689      	mov	r9, r1
 800f650:	2e0f      	cmp	r6, #15
 800f652:	dc38      	bgt.n	800f6c6 <_strtod_l+0x44e>
 800f654:	9b08      	ldr	r3, [sp, #32]
 800f656:	2b00      	cmp	r3, #0
 800f658:	f43f ae49 	beq.w	800f2ee <_strtod_l+0x76>
 800f65c:	dd24      	ble.n	800f6a8 <_strtod_l+0x430>
 800f65e:	2b16      	cmp	r3, #22
 800f660:	dc0b      	bgt.n	800f67a <_strtod_l+0x402>
 800f662:	4968      	ldr	r1, [pc, #416]	; (800f804 <_strtod_l+0x58c>)
 800f664:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f66c:	4642      	mov	r2, r8
 800f66e:	464b      	mov	r3, r9
 800f670:	f7f0 ffea 	bl	8000648 <__aeabi_dmul>
 800f674:	4680      	mov	r8, r0
 800f676:	4689      	mov	r9, r1
 800f678:	e639      	b.n	800f2ee <_strtod_l+0x76>
 800f67a:	9a08      	ldr	r2, [sp, #32]
 800f67c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f680:	4293      	cmp	r3, r2
 800f682:	db20      	blt.n	800f6c6 <_strtod_l+0x44e>
 800f684:	4c5f      	ldr	r4, [pc, #380]	; (800f804 <_strtod_l+0x58c>)
 800f686:	f1c6 060f 	rsb	r6, r6, #15
 800f68a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f68e:	4642      	mov	r2, r8
 800f690:	464b      	mov	r3, r9
 800f692:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f696:	f7f0 ffd7 	bl	8000648 <__aeabi_dmul>
 800f69a:	9b08      	ldr	r3, [sp, #32]
 800f69c:	1b9e      	subs	r6, r3, r6
 800f69e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f6a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f6a6:	e7e3      	b.n	800f670 <_strtod_l+0x3f8>
 800f6a8:	9b08      	ldr	r3, [sp, #32]
 800f6aa:	3316      	adds	r3, #22
 800f6ac:	db0b      	blt.n	800f6c6 <_strtod_l+0x44e>
 800f6ae:	9b05      	ldr	r3, [sp, #20]
 800f6b0:	1bdf      	subs	r7, r3, r7
 800f6b2:	4b54      	ldr	r3, [pc, #336]	; (800f804 <_strtod_l+0x58c>)
 800f6b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f6b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6bc:	4640      	mov	r0, r8
 800f6be:	4649      	mov	r1, r9
 800f6c0:	f7f1 f8ec 	bl	800089c <__aeabi_ddiv>
 800f6c4:	e7d6      	b.n	800f674 <_strtod_l+0x3fc>
 800f6c6:	9b08      	ldr	r3, [sp, #32]
 800f6c8:	1b75      	subs	r5, r6, r5
 800f6ca:	441d      	add	r5, r3
 800f6cc:	2d00      	cmp	r5, #0
 800f6ce:	dd70      	ble.n	800f7b2 <_strtod_l+0x53a>
 800f6d0:	f015 030f 	ands.w	r3, r5, #15
 800f6d4:	d00a      	beq.n	800f6ec <_strtod_l+0x474>
 800f6d6:	494b      	ldr	r1, [pc, #300]	; (800f804 <_strtod_l+0x58c>)
 800f6d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f6dc:	4642      	mov	r2, r8
 800f6de:	464b      	mov	r3, r9
 800f6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6e4:	f7f0 ffb0 	bl	8000648 <__aeabi_dmul>
 800f6e8:	4680      	mov	r8, r0
 800f6ea:	4689      	mov	r9, r1
 800f6ec:	f035 050f 	bics.w	r5, r5, #15
 800f6f0:	d04d      	beq.n	800f78e <_strtod_l+0x516>
 800f6f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f6f6:	dd22      	ble.n	800f73e <_strtod_l+0x4c6>
 800f6f8:	2500      	movs	r5, #0
 800f6fa:	46ab      	mov	fp, r5
 800f6fc:	9509      	str	r5, [sp, #36]	; 0x24
 800f6fe:	9505      	str	r5, [sp, #20]
 800f700:	2322      	movs	r3, #34	; 0x22
 800f702:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f80c <_strtod_l+0x594>
 800f706:	6023      	str	r3, [r4, #0]
 800f708:	f04f 0800 	mov.w	r8, #0
 800f70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f43f aded 	beq.w	800f2ee <_strtod_l+0x76>
 800f714:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f716:	4620      	mov	r0, r4
 800f718:	f003 f82e 	bl	8012778 <_Bfree>
 800f71c:	9905      	ldr	r1, [sp, #20]
 800f71e:	4620      	mov	r0, r4
 800f720:	f003 f82a 	bl	8012778 <_Bfree>
 800f724:	4659      	mov	r1, fp
 800f726:	4620      	mov	r0, r4
 800f728:	f003 f826 	bl	8012778 <_Bfree>
 800f72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f72e:	4620      	mov	r0, r4
 800f730:	f003 f822 	bl	8012778 <_Bfree>
 800f734:	4629      	mov	r1, r5
 800f736:	4620      	mov	r0, r4
 800f738:	f003 f81e 	bl	8012778 <_Bfree>
 800f73c:	e5d7      	b.n	800f2ee <_strtod_l+0x76>
 800f73e:	4b32      	ldr	r3, [pc, #200]	; (800f808 <_strtod_l+0x590>)
 800f740:	9304      	str	r3, [sp, #16]
 800f742:	2300      	movs	r3, #0
 800f744:	112d      	asrs	r5, r5, #4
 800f746:	4640      	mov	r0, r8
 800f748:	4649      	mov	r1, r9
 800f74a:	469a      	mov	sl, r3
 800f74c:	2d01      	cmp	r5, #1
 800f74e:	dc21      	bgt.n	800f794 <_strtod_l+0x51c>
 800f750:	b10b      	cbz	r3, 800f756 <_strtod_l+0x4de>
 800f752:	4680      	mov	r8, r0
 800f754:	4689      	mov	r9, r1
 800f756:	492c      	ldr	r1, [pc, #176]	; (800f808 <_strtod_l+0x590>)
 800f758:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f75c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f760:	4642      	mov	r2, r8
 800f762:	464b      	mov	r3, r9
 800f764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f768:	f7f0 ff6e 	bl	8000648 <__aeabi_dmul>
 800f76c:	4b27      	ldr	r3, [pc, #156]	; (800f80c <_strtod_l+0x594>)
 800f76e:	460a      	mov	r2, r1
 800f770:	400b      	ands	r3, r1
 800f772:	4927      	ldr	r1, [pc, #156]	; (800f810 <_strtod_l+0x598>)
 800f774:	428b      	cmp	r3, r1
 800f776:	4680      	mov	r8, r0
 800f778:	d8be      	bhi.n	800f6f8 <_strtod_l+0x480>
 800f77a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f77e:	428b      	cmp	r3, r1
 800f780:	bf86      	itte	hi
 800f782:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f814 <_strtod_l+0x59c>
 800f786:	f04f 38ff 	movhi.w	r8, #4294967295
 800f78a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f78e:	2300      	movs	r3, #0
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	e07b      	b.n	800f88c <_strtod_l+0x614>
 800f794:	07ea      	lsls	r2, r5, #31
 800f796:	d505      	bpl.n	800f7a4 <_strtod_l+0x52c>
 800f798:	9b04      	ldr	r3, [sp, #16]
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	f7f0 ff53 	bl	8000648 <__aeabi_dmul>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	9a04      	ldr	r2, [sp, #16]
 800f7a6:	3208      	adds	r2, #8
 800f7a8:	f10a 0a01 	add.w	sl, sl, #1
 800f7ac:	106d      	asrs	r5, r5, #1
 800f7ae:	9204      	str	r2, [sp, #16]
 800f7b0:	e7cc      	b.n	800f74c <_strtod_l+0x4d4>
 800f7b2:	d0ec      	beq.n	800f78e <_strtod_l+0x516>
 800f7b4:	426d      	negs	r5, r5
 800f7b6:	f015 020f 	ands.w	r2, r5, #15
 800f7ba:	d00a      	beq.n	800f7d2 <_strtod_l+0x55a>
 800f7bc:	4b11      	ldr	r3, [pc, #68]	; (800f804 <_strtod_l+0x58c>)
 800f7be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7c2:	4640      	mov	r0, r8
 800f7c4:	4649      	mov	r1, r9
 800f7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ca:	f7f1 f867 	bl	800089c <__aeabi_ddiv>
 800f7ce:	4680      	mov	r8, r0
 800f7d0:	4689      	mov	r9, r1
 800f7d2:	112d      	asrs	r5, r5, #4
 800f7d4:	d0db      	beq.n	800f78e <_strtod_l+0x516>
 800f7d6:	2d1f      	cmp	r5, #31
 800f7d8:	dd1e      	ble.n	800f818 <_strtod_l+0x5a0>
 800f7da:	2500      	movs	r5, #0
 800f7dc:	46ab      	mov	fp, r5
 800f7de:	9509      	str	r5, [sp, #36]	; 0x24
 800f7e0:	9505      	str	r5, [sp, #20]
 800f7e2:	2322      	movs	r3, #34	; 0x22
 800f7e4:	f04f 0800 	mov.w	r8, #0
 800f7e8:	f04f 0900 	mov.w	r9, #0
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	e78d      	b.n	800f70c <_strtod_l+0x494>
 800f7f0:	08013cee 	.word	0x08013cee
 800f7f4:	08013ba4 	.word	0x08013ba4
 800f7f8:	08013ce6 	.word	0x08013ce6
 800f7fc:	08013dd2 	.word	0x08013dd2
 800f800:	08013dce 	.word	0x08013dce
 800f804:	08013f28 	.word	0x08013f28
 800f808:	08013f00 	.word	0x08013f00
 800f80c:	7ff00000 	.word	0x7ff00000
 800f810:	7ca00000 	.word	0x7ca00000
 800f814:	7fefffff 	.word	0x7fefffff
 800f818:	f015 0310 	ands.w	r3, r5, #16
 800f81c:	bf18      	it	ne
 800f81e:	236a      	movne	r3, #106	; 0x6a
 800f820:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800fbc4 <_strtod_l+0x94c>
 800f824:	9304      	str	r3, [sp, #16]
 800f826:	4640      	mov	r0, r8
 800f828:	4649      	mov	r1, r9
 800f82a:	2300      	movs	r3, #0
 800f82c:	07ea      	lsls	r2, r5, #31
 800f82e:	d504      	bpl.n	800f83a <_strtod_l+0x5c2>
 800f830:	e9da 2300 	ldrd	r2, r3, [sl]
 800f834:	f7f0 ff08 	bl	8000648 <__aeabi_dmul>
 800f838:	2301      	movs	r3, #1
 800f83a:	106d      	asrs	r5, r5, #1
 800f83c:	f10a 0a08 	add.w	sl, sl, #8
 800f840:	d1f4      	bne.n	800f82c <_strtod_l+0x5b4>
 800f842:	b10b      	cbz	r3, 800f848 <_strtod_l+0x5d0>
 800f844:	4680      	mov	r8, r0
 800f846:	4689      	mov	r9, r1
 800f848:	9b04      	ldr	r3, [sp, #16]
 800f84a:	b1bb      	cbz	r3, 800f87c <_strtod_l+0x604>
 800f84c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f850:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f854:	2b00      	cmp	r3, #0
 800f856:	4649      	mov	r1, r9
 800f858:	dd10      	ble.n	800f87c <_strtod_l+0x604>
 800f85a:	2b1f      	cmp	r3, #31
 800f85c:	f340 811e 	ble.w	800fa9c <_strtod_l+0x824>
 800f860:	2b34      	cmp	r3, #52	; 0x34
 800f862:	bfde      	ittt	le
 800f864:	f04f 33ff 	movle.w	r3, #4294967295
 800f868:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f86c:	4093      	lslle	r3, r2
 800f86e:	f04f 0800 	mov.w	r8, #0
 800f872:	bfcc      	ite	gt
 800f874:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f878:	ea03 0901 	andle.w	r9, r3, r1
 800f87c:	2200      	movs	r2, #0
 800f87e:	2300      	movs	r3, #0
 800f880:	4640      	mov	r0, r8
 800f882:	4649      	mov	r1, r9
 800f884:	f7f1 f948 	bl	8000b18 <__aeabi_dcmpeq>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d1a6      	bne.n	800f7da <_strtod_l+0x562>
 800f88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f892:	4633      	mov	r3, r6
 800f894:	465a      	mov	r2, fp
 800f896:	4620      	mov	r0, r4
 800f898:	f002 ffd6 	bl	8012848 <__s2b>
 800f89c:	9009      	str	r0, [sp, #36]	; 0x24
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	f43f af2a 	beq.w	800f6f8 <_strtod_l+0x480>
 800f8a4:	9a08      	ldr	r2, [sp, #32]
 800f8a6:	9b05      	ldr	r3, [sp, #20]
 800f8a8:	2a00      	cmp	r2, #0
 800f8aa:	eba3 0307 	sub.w	r3, r3, r7
 800f8ae:	bfa8      	it	ge
 800f8b0:	2300      	movge	r3, #0
 800f8b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f8b4:	2500      	movs	r5, #0
 800f8b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f8ba:	9312      	str	r3, [sp, #72]	; 0x48
 800f8bc:	46ab      	mov	fp, r5
 800f8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	6859      	ldr	r1, [r3, #4]
 800f8c4:	f002 ff18 	bl	80126f8 <_Balloc>
 800f8c8:	9005      	str	r0, [sp, #20]
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	f43f af18 	beq.w	800f700 <_strtod_l+0x488>
 800f8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d2:	691a      	ldr	r2, [r3, #16]
 800f8d4:	3202      	adds	r2, #2
 800f8d6:	f103 010c 	add.w	r1, r3, #12
 800f8da:	0092      	lsls	r2, r2, #2
 800f8dc:	300c      	adds	r0, #12
 800f8de:	f001 fca0 	bl	8011222 <memcpy>
 800f8e2:	ec49 8b10 	vmov	d0, r8, r9
 800f8e6:	aa18      	add	r2, sp, #96	; 0x60
 800f8e8:	a917      	add	r1, sp, #92	; 0x5c
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f003 fae0 	bl	8012eb0 <__d2b>
 800f8f0:	ec49 8b18 	vmov	d8, r8, r9
 800f8f4:	9016      	str	r0, [sp, #88]	; 0x58
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f43f af02 	beq.w	800f700 <_strtod_l+0x488>
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	4620      	mov	r0, r4
 800f900:	f003 f83a 	bl	8012978 <__i2b>
 800f904:	4683      	mov	fp, r0
 800f906:	2800      	cmp	r0, #0
 800f908:	f43f aefa 	beq.w	800f700 <_strtod_l+0x488>
 800f90c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f90e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f910:	2e00      	cmp	r6, #0
 800f912:	bfab      	itete	ge
 800f914:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f916:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f918:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f91a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f91e:	bfac      	ite	ge
 800f920:	eb06 0a03 	addge.w	sl, r6, r3
 800f924:	1b9f      	sublt	r7, r3, r6
 800f926:	9b04      	ldr	r3, [sp, #16]
 800f928:	1af6      	subs	r6, r6, r3
 800f92a:	4416      	add	r6, r2
 800f92c:	4ba0      	ldr	r3, [pc, #640]	; (800fbb0 <_strtod_l+0x938>)
 800f92e:	3e01      	subs	r6, #1
 800f930:	429e      	cmp	r6, r3
 800f932:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f936:	f280 80c4 	bge.w	800fac2 <_strtod_l+0x84a>
 800f93a:	1b9b      	subs	r3, r3, r6
 800f93c:	2b1f      	cmp	r3, #31
 800f93e:	eba2 0203 	sub.w	r2, r2, r3
 800f942:	f04f 0101 	mov.w	r1, #1
 800f946:	f300 80b0 	bgt.w	800faaa <_strtod_l+0x832>
 800f94a:	fa01 f303 	lsl.w	r3, r1, r3
 800f94e:	930e      	str	r3, [sp, #56]	; 0x38
 800f950:	2300      	movs	r3, #0
 800f952:	930d      	str	r3, [sp, #52]	; 0x34
 800f954:	eb0a 0602 	add.w	r6, sl, r2
 800f958:	9b04      	ldr	r3, [sp, #16]
 800f95a:	45b2      	cmp	sl, r6
 800f95c:	4417      	add	r7, r2
 800f95e:	441f      	add	r7, r3
 800f960:	4653      	mov	r3, sl
 800f962:	bfa8      	it	ge
 800f964:	4633      	movge	r3, r6
 800f966:	42bb      	cmp	r3, r7
 800f968:	bfa8      	it	ge
 800f96a:	463b      	movge	r3, r7
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	bfc2      	ittt	gt
 800f970:	1af6      	subgt	r6, r6, r3
 800f972:	1aff      	subgt	r7, r7, r3
 800f974:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	dd17      	ble.n	800f9ae <_strtod_l+0x736>
 800f97e:	4659      	mov	r1, fp
 800f980:	461a      	mov	r2, r3
 800f982:	4620      	mov	r0, r4
 800f984:	f003 f8b8 	bl	8012af8 <__pow5mult>
 800f988:	4683      	mov	fp, r0
 800f98a:	2800      	cmp	r0, #0
 800f98c:	f43f aeb8 	beq.w	800f700 <_strtod_l+0x488>
 800f990:	4601      	mov	r1, r0
 800f992:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f994:	4620      	mov	r0, r4
 800f996:	f003 f805 	bl	80129a4 <__multiply>
 800f99a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f99c:	2800      	cmp	r0, #0
 800f99e:	f43f aeaf 	beq.w	800f700 <_strtod_l+0x488>
 800f9a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f002 fee7 	bl	8012778 <_Bfree>
 800f9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9ac:	9316      	str	r3, [sp, #88]	; 0x58
 800f9ae:	2e00      	cmp	r6, #0
 800f9b0:	f300 808c 	bgt.w	800facc <_strtod_l+0x854>
 800f9b4:	9b08      	ldr	r3, [sp, #32]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	dd08      	ble.n	800f9cc <_strtod_l+0x754>
 800f9ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9bc:	9905      	ldr	r1, [sp, #20]
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f003 f89a 	bl	8012af8 <__pow5mult>
 800f9c4:	9005      	str	r0, [sp, #20]
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f43f ae9a 	beq.w	800f700 <_strtod_l+0x488>
 800f9cc:	2f00      	cmp	r7, #0
 800f9ce:	dd08      	ble.n	800f9e2 <_strtod_l+0x76a>
 800f9d0:	9905      	ldr	r1, [sp, #20]
 800f9d2:	463a      	mov	r2, r7
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f003 f8e9 	bl	8012bac <__lshift>
 800f9da:	9005      	str	r0, [sp, #20]
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	f43f ae8f 	beq.w	800f700 <_strtod_l+0x488>
 800f9e2:	f1ba 0f00 	cmp.w	sl, #0
 800f9e6:	dd08      	ble.n	800f9fa <_strtod_l+0x782>
 800f9e8:	4659      	mov	r1, fp
 800f9ea:	4652      	mov	r2, sl
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f003 f8dd 	bl	8012bac <__lshift>
 800f9f2:	4683      	mov	fp, r0
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	f43f ae83 	beq.w	800f700 <_strtod_l+0x488>
 800f9fa:	9a05      	ldr	r2, [sp, #20]
 800f9fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f003 f95c 	bl	8012cbc <__mdiff>
 800fa04:	4605      	mov	r5, r0
 800fa06:	2800      	cmp	r0, #0
 800fa08:	f43f ae7a 	beq.w	800f700 <_strtod_l+0x488>
 800fa0c:	68c3      	ldr	r3, [r0, #12]
 800fa0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa10:	2300      	movs	r3, #0
 800fa12:	60c3      	str	r3, [r0, #12]
 800fa14:	4659      	mov	r1, fp
 800fa16:	f003 f935 	bl	8012c84 <__mcmp>
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	da60      	bge.n	800fae0 <_strtod_l+0x868>
 800fa1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa20:	ea53 0308 	orrs.w	r3, r3, r8
 800fa24:	f040 8084 	bne.w	800fb30 <_strtod_l+0x8b8>
 800fa28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d17f      	bne.n	800fb30 <_strtod_l+0x8b8>
 800fa30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa34:	0d1b      	lsrs	r3, r3, #20
 800fa36:	051b      	lsls	r3, r3, #20
 800fa38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa3c:	d978      	bls.n	800fb30 <_strtod_l+0x8b8>
 800fa3e:	696b      	ldr	r3, [r5, #20]
 800fa40:	b913      	cbnz	r3, 800fa48 <_strtod_l+0x7d0>
 800fa42:	692b      	ldr	r3, [r5, #16]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	dd73      	ble.n	800fb30 <_strtod_l+0x8b8>
 800fa48:	4629      	mov	r1, r5
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f003 f8ad 	bl	8012bac <__lshift>
 800fa52:	4659      	mov	r1, fp
 800fa54:	4605      	mov	r5, r0
 800fa56:	f003 f915 	bl	8012c84 <__mcmp>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	dd68      	ble.n	800fb30 <_strtod_l+0x8b8>
 800fa5e:	9904      	ldr	r1, [sp, #16]
 800fa60:	4a54      	ldr	r2, [pc, #336]	; (800fbb4 <_strtod_l+0x93c>)
 800fa62:	464b      	mov	r3, r9
 800fa64:	2900      	cmp	r1, #0
 800fa66:	f000 8084 	beq.w	800fb72 <_strtod_l+0x8fa>
 800fa6a:	ea02 0109 	and.w	r1, r2, r9
 800fa6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fa72:	dc7e      	bgt.n	800fb72 <_strtod_l+0x8fa>
 800fa74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fa78:	f77f aeb3 	ble.w	800f7e2 <_strtod_l+0x56a>
 800fa7c:	4b4e      	ldr	r3, [pc, #312]	; (800fbb8 <_strtod_l+0x940>)
 800fa7e:	4640      	mov	r0, r8
 800fa80:	4649      	mov	r1, r9
 800fa82:	2200      	movs	r2, #0
 800fa84:	f7f0 fde0 	bl	8000648 <__aeabi_dmul>
 800fa88:	4b4a      	ldr	r3, [pc, #296]	; (800fbb4 <_strtod_l+0x93c>)
 800fa8a:	400b      	ands	r3, r1
 800fa8c:	4680      	mov	r8, r0
 800fa8e:	4689      	mov	r9, r1
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f47f ae3f 	bne.w	800f714 <_strtod_l+0x49c>
 800fa96:	2322      	movs	r3, #34	; 0x22
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	e63b      	b.n	800f714 <_strtod_l+0x49c>
 800fa9c:	f04f 32ff 	mov.w	r2, #4294967295
 800faa0:	fa02 f303 	lsl.w	r3, r2, r3
 800faa4:	ea03 0808 	and.w	r8, r3, r8
 800faa8:	e6e8      	b.n	800f87c <_strtod_l+0x604>
 800faaa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800faae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fab2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fab6:	36e2      	adds	r6, #226	; 0xe2
 800fab8:	fa01 f306 	lsl.w	r3, r1, r6
 800fabc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800fac0:	e748      	b.n	800f954 <_strtod_l+0x6dc>
 800fac2:	2100      	movs	r1, #0
 800fac4:	2301      	movs	r3, #1
 800fac6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800faca:	e743      	b.n	800f954 <_strtod_l+0x6dc>
 800facc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800face:	4632      	mov	r2, r6
 800fad0:	4620      	mov	r0, r4
 800fad2:	f003 f86b 	bl	8012bac <__lshift>
 800fad6:	9016      	str	r0, [sp, #88]	; 0x58
 800fad8:	2800      	cmp	r0, #0
 800fada:	f47f af6b 	bne.w	800f9b4 <_strtod_l+0x73c>
 800fade:	e60f      	b.n	800f700 <_strtod_l+0x488>
 800fae0:	46ca      	mov	sl, r9
 800fae2:	d171      	bne.n	800fbc8 <_strtod_l+0x950>
 800fae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fae6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800faea:	b352      	cbz	r2, 800fb42 <_strtod_l+0x8ca>
 800faec:	4a33      	ldr	r2, [pc, #204]	; (800fbbc <_strtod_l+0x944>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d12a      	bne.n	800fb48 <_strtod_l+0x8d0>
 800faf2:	9b04      	ldr	r3, [sp, #16]
 800faf4:	4641      	mov	r1, r8
 800faf6:	b1fb      	cbz	r3, 800fb38 <_strtod_l+0x8c0>
 800faf8:	4b2e      	ldr	r3, [pc, #184]	; (800fbb4 <_strtod_l+0x93c>)
 800fafa:	ea09 0303 	and.w	r3, r9, r3
 800fafe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb02:	f04f 32ff 	mov.w	r2, #4294967295
 800fb06:	d81a      	bhi.n	800fb3e <_strtod_l+0x8c6>
 800fb08:	0d1b      	lsrs	r3, r3, #20
 800fb0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb12:	4299      	cmp	r1, r3
 800fb14:	d118      	bne.n	800fb48 <_strtod_l+0x8d0>
 800fb16:	4b2a      	ldr	r3, [pc, #168]	; (800fbc0 <_strtod_l+0x948>)
 800fb18:	459a      	cmp	sl, r3
 800fb1a:	d102      	bne.n	800fb22 <_strtod_l+0x8aa>
 800fb1c:	3101      	adds	r1, #1
 800fb1e:	f43f adef 	beq.w	800f700 <_strtod_l+0x488>
 800fb22:	4b24      	ldr	r3, [pc, #144]	; (800fbb4 <_strtod_l+0x93c>)
 800fb24:	ea0a 0303 	and.w	r3, sl, r3
 800fb28:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fb2c:	f04f 0800 	mov.w	r8, #0
 800fb30:	9b04      	ldr	r3, [sp, #16]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1a2      	bne.n	800fa7c <_strtod_l+0x804>
 800fb36:	e5ed      	b.n	800f714 <_strtod_l+0x49c>
 800fb38:	f04f 33ff 	mov.w	r3, #4294967295
 800fb3c:	e7e9      	b.n	800fb12 <_strtod_l+0x89a>
 800fb3e:	4613      	mov	r3, r2
 800fb40:	e7e7      	b.n	800fb12 <_strtod_l+0x89a>
 800fb42:	ea53 0308 	orrs.w	r3, r3, r8
 800fb46:	d08a      	beq.n	800fa5e <_strtod_l+0x7e6>
 800fb48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb4a:	b1e3      	cbz	r3, 800fb86 <_strtod_l+0x90e>
 800fb4c:	ea13 0f0a 	tst.w	r3, sl
 800fb50:	d0ee      	beq.n	800fb30 <_strtod_l+0x8b8>
 800fb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb54:	9a04      	ldr	r2, [sp, #16]
 800fb56:	4640      	mov	r0, r8
 800fb58:	4649      	mov	r1, r9
 800fb5a:	b1c3      	cbz	r3, 800fb8e <_strtod_l+0x916>
 800fb5c:	f7ff fb70 	bl	800f240 <sulp>
 800fb60:	4602      	mov	r2, r0
 800fb62:	460b      	mov	r3, r1
 800fb64:	ec51 0b18 	vmov	r0, r1, d8
 800fb68:	f7f0 fbb8 	bl	80002dc <__adddf3>
 800fb6c:	4680      	mov	r8, r0
 800fb6e:	4689      	mov	r9, r1
 800fb70:	e7de      	b.n	800fb30 <_strtod_l+0x8b8>
 800fb72:	4013      	ands	r3, r2
 800fb74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fb7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fb80:	f04f 38ff 	mov.w	r8, #4294967295
 800fb84:	e7d4      	b.n	800fb30 <_strtod_l+0x8b8>
 800fb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb88:	ea13 0f08 	tst.w	r3, r8
 800fb8c:	e7e0      	b.n	800fb50 <_strtod_l+0x8d8>
 800fb8e:	f7ff fb57 	bl	800f240 <sulp>
 800fb92:	4602      	mov	r2, r0
 800fb94:	460b      	mov	r3, r1
 800fb96:	ec51 0b18 	vmov	r0, r1, d8
 800fb9a:	f7f0 fb9d 	bl	80002d8 <__aeabi_dsub>
 800fb9e:	2200      	movs	r2, #0
 800fba0:	2300      	movs	r3, #0
 800fba2:	4680      	mov	r8, r0
 800fba4:	4689      	mov	r9, r1
 800fba6:	f7f0 ffb7 	bl	8000b18 <__aeabi_dcmpeq>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0c0      	beq.n	800fb30 <_strtod_l+0x8b8>
 800fbae:	e618      	b.n	800f7e2 <_strtod_l+0x56a>
 800fbb0:	fffffc02 	.word	0xfffffc02
 800fbb4:	7ff00000 	.word	0x7ff00000
 800fbb8:	39500000 	.word	0x39500000
 800fbbc:	000fffff 	.word	0x000fffff
 800fbc0:	7fefffff 	.word	0x7fefffff
 800fbc4:	08013bb8 	.word	0x08013bb8
 800fbc8:	4659      	mov	r1, fp
 800fbca:	4628      	mov	r0, r5
 800fbcc:	f003 f9ca 	bl	8012f64 <__ratio>
 800fbd0:	ec57 6b10 	vmov	r6, r7, d0
 800fbd4:	ee10 0a10 	vmov	r0, s0
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fbde:	4639      	mov	r1, r7
 800fbe0:	f7f0 ffae 	bl	8000b40 <__aeabi_dcmple>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d071      	beq.n	800fccc <_strtod_l+0xa54>
 800fbe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d17c      	bne.n	800fce8 <_strtod_l+0xa70>
 800fbee:	f1b8 0f00 	cmp.w	r8, #0
 800fbf2:	d15a      	bne.n	800fcaa <_strtod_l+0xa32>
 800fbf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d15d      	bne.n	800fcb8 <_strtod_l+0xa40>
 800fbfc:	4b90      	ldr	r3, [pc, #576]	; (800fe40 <_strtod_l+0xbc8>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	4630      	mov	r0, r6
 800fc02:	4639      	mov	r1, r7
 800fc04:	f7f0 ff92 	bl	8000b2c <__aeabi_dcmplt>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d15c      	bne.n	800fcc6 <_strtod_l+0xa4e>
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	4639      	mov	r1, r7
 800fc10:	4b8c      	ldr	r3, [pc, #560]	; (800fe44 <_strtod_l+0xbcc>)
 800fc12:	2200      	movs	r2, #0
 800fc14:	f7f0 fd18 	bl	8000648 <__aeabi_dmul>
 800fc18:	4606      	mov	r6, r0
 800fc1a:	460f      	mov	r7, r1
 800fc1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800fc20:	9606      	str	r6, [sp, #24]
 800fc22:	9307      	str	r3, [sp, #28]
 800fc24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fc2c:	4b86      	ldr	r3, [pc, #536]	; (800fe48 <_strtod_l+0xbd0>)
 800fc2e:	ea0a 0303 	and.w	r3, sl, r3
 800fc32:	930d      	str	r3, [sp, #52]	; 0x34
 800fc34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc36:	4b85      	ldr	r3, [pc, #532]	; (800fe4c <_strtod_l+0xbd4>)
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	f040 8090 	bne.w	800fd5e <_strtod_l+0xae6>
 800fc3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800fc42:	ec49 8b10 	vmov	d0, r8, r9
 800fc46:	f003 f8c3 	bl	8012dd0 <__ulp>
 800fc4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc4e:	ec51 0b10 	vmov	r0, r1, d0
 800fc52:	f7f0 fcf9 	bl	8000648 <__aeabi_dmul>
 800fc56:	4642      	mov	r2, r8
 800fc58:	464b      	mov	r3, r9
 800fc5a:	f7f0 fb3f 	bl	80002dc <__adddf3>
 800fc5e:	460b      	mov	r3, r1
 800fc60:	4979      	ldr	r1, [pc, #484]	; (800fe48 <_strtod_l+0xbd0>)
 800fc62:	4a7b      	ldr	r2, [pc, #492]	; (800fe50 <_strtod_l+0xbd8>)
 800fc64:	4019      	ands	r1, r3
 800fc66:	4291      	cmp	r1, r2
 800fc68:	4680      	mov	r8, r0
 800fc6a:	d944      	bls.n	800fcf6 <_strtod_l+0xa7e>
 800fc6c:	ee18 2a90 	vmov	r2, s17
 800fc70:	4b78      	ldr	r3, [pc, #480]	; (800fe54 <_strtod_l+0xbdc>)
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d104      	bne.n	800fc80 <_strtod_l+0xa08>
 800fc76:	ee18 3a10 	vmov	r3, s16
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	f43f ad40 	beq.w	800f700 <_strtod_l+0x488>
 800fc80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800fe54 <_strtod_l+0xbdc>
 800fc84:	f04f 38ff 	mov.w	r8, #4294967295
 800fc88:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f002 fd74 	bl	8012778 <_Bfree>
 800fc90:	9905      	ldr	r1, [sp, #20]
 800fc92:	4620      	mov	r0, r4
 800fc94:	f002 fd70 	bl	8012778 <_Bfree>
 800fc98:	4659      	mov	r1, fp
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f002 fd6c 	bl	8012778 <_Bfree>
 800fca0:	4629      	mov	r1, r5
 800fca2:	4620      	mov	r0, r4
 800fca4:	f002 fd68 	bl	8012778 <_Bfree>
 800fca8:	e609      	b.n	800f8be <_strtod_l+0x646>
 800fcaa:	f1b8 0f01 	cmp.w	r8, #1
 800fcae:	d103      	bne.n	800fcb8 <_strtod_l+0xa40>
 800fcb0:	f1b9 0f00 	cmp.w	r9, #0
 800fcb4:	f43f ad95 	beq.w	800f7e2 <_strtod_l+0x56a>
 800fcb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800fe10 <_strtod_l+0xb98>
 800fcbc:	4f60      	ldr	r7, [pc, #384]	; (800fe40 <_strtod_l+0xbc8>)
 800fcbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fcc2:	2600      	movs	r6, #0
 800fcc4:	e7ae      	b.n	800fc24 <_strtod_l+0x9ac>
 800fcc6:	4f5f      	ldr	r7, [pc, #380]	; (800fe44 <_strtod_l+0xbcc>)
 800fcc8:	2600      	movs	r6, #0
 800fcca:	e7a7      	b.n	800fc1c <_strtod_l+0x9a4>
 800fccc:	4b5d      	ldr	r3, [pc, #372]	; (800fe44 <_strtod_l+0xbcc>)
 800fcce:	4630      	mov	r0, r6
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f7f0 fcb8 	bl	8000648 <__aeabi_dmul>
 800fcd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcda:	4606      	mov	r6, r0
 800fcdc:	460f      	mov	r7, r1
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d09c      	beq.n	800fc1c <_strtod_l+0x9a4>
 800fce2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fce6:	e79d      	b.n	800fc24 <_strtod_l+0x9ac>
 800fce8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fe18 <_strtod_l+0xba0>
 800fcec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fcf0:	ec57 6b17 	vmov	r6, r7, d7
 800fcf4:	e796      	b.n	800fc24 <_strtod_l+0x9ac>
 800fcf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fcfa:	9b04      	ldr	r3, [sp, #16]
 800fcfc:	46ca      	mov	sl, r9
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d1c2      	bne.n	800fc88 <_strtod_l+0xa10>
 800fd02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd08:	0d1b      	lsrs	r3, r3, #20
 800fd0a:	051b      	lsls	r3, r3, #20
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d1bb      	bne.n	800fc88 <_strtod_l+0xa10>
 800fd10:	4630      	mov	r0, r6
 800fd12:	4639      	mov	r1, r7
 800fd14:	f7f0 fff8 	bl	8000d08 <__aeabi_d2lz>
 800fd18:	f7f0 fc68 	bl	80005ec <__aeabi_l2d>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4630      	mov	r0, r6
 800fd22:	4639      	mov	r1, r7
 800fd24:	f7f0 fad8 	bl	80002d8 <__aeabi_dsub>
 800fd28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd2e:	ea43 0308 	orr.w	r3, r3, r8
 800fd32:	4313      	orrs	r3, r2
 800fd34:	4606      	mov	r6, r0
 800fd36:	460f      	mov	r7, r1
 800fd38:	d054      	beq.n	800fde4 <_strtod_l+0xb6c>
 800fd3a:	a339      	add	r3, pc, #228	; (adr r3, 800fe20 <_strtod_l+0xba8>)
 800fd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd40:	f7f0 fef4 	bl	8000b2c <__aeabi_dcmplt>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	f47f ace5 	bne.w	800f714 <_strtod_l+0x49c>
 800fd4a:	a337      	add	r3, pc, #220	; (adr r3, 800fe28 <_strtod_l+0xbb0>)
 800fd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd50:	4630      	mov	r0, r6
 800fd52:	4639      	mov	r1, r7
 800fd54:	f7f0 ff08 	bl	8000b68 <__aeabi_dcmpgt>
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d095      	beq.n	800fc88 <_strtod_l+0xa10>
 800fd5c:	e4da      	b.n	800f714 <_strtod_l+0x49c>
 800fd5e:	9b04      	ldr	r3, [sp, #16]
 800fd60:	b333      	cbz	r3, 800fdb0 <_strtod_l+0xb38>
 800fd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fd68:	d822      	bhi.n	800fdb0 <_strtod_l+0xb38>
 800fd6a:	a331      	add	r3, pc, #196	; (adr r3, 800fe30 <_strtod_l+0xbb8>)
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	4630      	mov	r0, r6
 800fd72:	4639      	mov	r1, r7
 800fd74:	f7f0 fee4 	bl	8000b40 <__aeabi_dcmple>
 800fd78:	b1a0      	cbz	r0, 800fda4 <_strtod_l+0xb2c>
 800fd7a:	4639      	mov	r1, r7
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7f0 ff3b 	bl	8000bf8 <__aeabi_d2uiz>
 800fd82:	2801      	cmp	r0, #1
 800fd84:	bf38      	it	cc
 800fd86:	2001      	movcc	r0, #1
 800fd88:	f7f0 fbe4 	bl	8000554 <__aeabi_ui2d>
 800fd8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd8e:	4606      	mov	r6, r0
 800fd90:	460f      	mov	r7, r1
 800fd92:	bb23      	cbnz	r3, 800fdde <_strtod_l+0xb66>
 800fd94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd98:	9010      	str	r0, [sp, #64]	; 0x40
 800fd9a:	9311      	str	r3, [sp, #68]	; 0x44
 800fd9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fda0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fda4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fda6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fda8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fdac:	1a9b      	subs	r3, r3, r2
 800fdae:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fdb4:	eeb0 0a48 	vmov.f32	s0, s16
 800fdb8:	eef0 0a68 	vmov.f32	s1, s17
 800fdbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fdc0:	f003 f806 	bl	8012dd0 <__ulp>
 800fdc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fdc8:	ec53 2b10 	vmov	r2, r3, d0
 800fdcc:	f7f0 fc3c 	bl	8000648 <__aeabi_dmul>
 800fdd0:	ec53 2b18 	vmov	r2, r3, d8
 800fdd4:	f7f0 fa82 	bl	80002dc <__adddf3>
 800fdd8:	4680      	mov	r8, r0
 800fdda:	4689      	mov	r9, r1
 800fddc:	e78d      	b.n	800fcfa <_strtod_l+0xa82>
 800fdde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fde2:	e7db      	b.n	800fd9c <_strtod_l+0xb24>
 800fde4:	a314      	add	r3, pc, #80	; (adr r3, 800fe38 <_strtod_l+0xbc0>)
 800fde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdea:	f7f0 fe9f 	bl	8000b2c <__aeabi_dcmplt>
 800fdee:	e7b3      	b.n	800fd58 <_strtod_l+0xae0>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	930a      	str	r3, [sp, #40]	; 0x28
 800fdf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fdf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdf8:	6013      	str	r3, [r2, #0]
 800fdfa:	f7ff ba7c 	b.w	800f2f6 <_strtod_l+0x7e>
 800fdfe:	2a65      	cmp	r2, #101	; 0x65
 800fe00:	f43f ab75 	beq.w	800f4ee <_strtod_l+0x276>
 800fe04:	2a45      	cmp	r2, #69	; 0x45
 800fe06:	f43f ab72 	beq.w	800f4ee <_strtod_l+0x276>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	f7ff bbaa 	b.w	800f564 <_strtod_l+0x2ec>
 800fe10:	00000000 	.word	0x00000000
 800fe14:	bff00000 	.word	0xbff00000
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	3ff00000 	.word	0x3ff00000
 800fe20:	94a03595 	.word	0x94a03595
 800fe24:	3fdfffff 	.word	0x3fdfffff
 800fe28:	35afe535 	.word	0x35afe535
 800fe2c:	3fe00000 	.word	0x3fe00000
 800fe30:	ffc00000 	.word	0xffc00000
 800fe34:	41dfffff 	.word	0x41dfffff
 800fe38:	94a03595 	.word	0x94a03595
 800fe3c:	3fcfffff 	.word	0x3fcfffff
 800fe40:	3ff00000 	.word	0x3ff00000
 800fe44:	3fe00000 	.word	0x3fe00000
 800fe48:	7ff00000 	.word	0x7ff00000
 800fe4c:	7fe00000 	.word	0x7fe00000
 800fe50:	7c9fffff 	.word	0x7c9fffff
 800fe54:	7fefffff 	.word	0x7fefffff

0800fe58 <_strtod_r>:
 800fe58:	4b01      	ldr	r3, [pc, #4]	; (800fe60 <_strtod_r+0x8>)
 800fe5a:	f7ff ba0d 	b.w	800f278 <_strtod_l>
 800fe5e:	bf00      	nop
 800fe60:	20000190 	.word	0x20000190

0800fe64 <strtof>:
 800fe64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe68:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ff2c <strtof+0xc8>
 800fe6c:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <strtof+0xb4>)
 800fe6e:	460a      	mov	r2, r1
 800fe70:	ed2d 8b02 	vpush	{d8}
 800fe74:	4601      	mov	r1, r0
 800fe76:	f8d8 0000 	ldr.w	r0, [r8]
 800fe7a:	f7ff f9fd 	bl	800f278 <_strtod_l>
 800fe7e:	ec55 4b10 	vmov	r4, r5, d0
 800fe82:	ee10 2a10 	vmov	r2, s0
 800fe86:	ee10 0a10 	vmov	r0, s0
 800fe8a:	462b      	mov	r3, r5
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	f7f0 fe75 	bl	8000b7c <__aeabi_dcmpun>
 800fe92:	b190      	cbz	r0, 800feba <strtof+0x56>
 800fe94:	2d00      	cmp	r5, #0
 800fe96:	4821      	ldr	r0, [pc, #132]	; (800ff1c <strtof+0xb8>)
 800fe98:	da09      	bge.n	800feae <strtof+0x4a>
 800fe9a:	f001 f9d9 	bl	8011250 <nanf>
 800fe9e:	eeb1 8a40 	vneg.f32	s16, s0
 800fea2:	eeb0 0a48 	vmov.f32	s0, s16
 800fea6:	ecbd 8b02 	vpop	{d8}
 800feaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feae:	ecbd 8b02 	vpop	{d8}
 800feb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feb6:	f001 b9cb 	b.w	8011250 <nanf>
 800feba:	4620      	mov	r0, r4
 800febc:	4629      	mov	r1, r5
 800febe:	f7f0 febb 	bl	8000c38 <__aeabi_d2f>
 800fec2:	ee08 0a10 	vmov	s16, r0
 800fec6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ff20 <strtof+0xbc>
 800feca:	eeb0 7ac8 	vabs.f32	s14, s16
 800fece:	eeb4 7a67 	vcmp.f32	s14, s15
 800fed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed6:	dd11      	ble.n	800fefc <strtof+0x98>
 800fed8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800fedc:	4b11      	ldr	r3, [pc, #68]	; (800ff24 <strtof+0xc0>)
 800fede:	f04f 32ff 	mov.w	r2, #4294967295
 800fee2:	4620      	mov	r0, r4
 800fee4:	4639      	mov	r1, r7
 800fee6:	f7f0 fe49 	bl	8000b7c <__aeabi_dcmpun>
 800feea:	b980      	cbnz	r0, 800ff0e <strtof+0xaa>
 800feec:	4b0d      	ldr	r3, [pc, #52]	; (800ff24 <strtof+0xc0>)
 800feee:	f04f 32ff 	mov.w	r2, #4294967295
 800fef2:	4620      	mov	r0, r4
 800fef4:	4639      	mov	r1, r7
 800fef6:	f7f0 fe23 	bl	8000b40 <__aeabi_dcmple>
 800fefa:	b940      	cbnz	r0, 800ff0e <strtof+0xaa>
 800fefc:	ee18 3a10 	vmov	r3, s16
 800ff00:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ff04:	d1cd      	bne.n	800fea2 <strtof+0x3e>
 800ff06:	4b08      	ldr	r3, [pc, #32]	; (800ff28 <strtof+0xc4>)
 800ff08:	402b      	ands	r3, r5
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d0c9      	beq.n	800fea2 <strtof+0x3e>
 800ff0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff12:	2222      	movs	r2, #34	; 0x22
 800ff14:	601a      	str	r2, [r3, #0]
 800ff16:	e7c4      	b.n	800fea2 <strtof+0x3e>
 800ff18:	20000190 	.word	0x20000190
 800ff1c:	08013dce 	.word	0x08013dce
 800ff20:	7f7fffff 	.word	0x7f7fffff
 800ff24:	7fefffff 	.word	0x7fefffff
 800ff28:	7ff00000 	.word	0x7ff00000
 800ff2c:	20000348 	.word	0x20000348

0800ff30 <_strtol_l.constprop.0>:
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff36:	d001      	beq.n	800ff3c <_strtol_l.constprop.0+0xc>
 800ff38:	2b24      	cmp	r3, #36	; 0x24
 800ff3a:	d906      	bls.n	800ff4a <_strtol_l.constprop.0+0x1a>
 800ff3c:	f001 f93c 	bl	80111b8 <__errno>
 800ff40:	2316      	movs	r3, #22
 800ff42:	6003      	str	r3, [r0, #0]
 800ff44:	2000      	movs	r0, #0
 800ff46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010030 <_strtol_l.constprop.0+0x100>
 800ff4e:	460d      	mov	r5, r1
 800ff50:	462e      	mov	r6, r5
 800ff52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ff5a:	f017 0708 	ands.w	r7, r7, #8
 800ff5e:	d1f7      	bne.n	800ff50 <_strtol_l.constprop.0+0x20>
 800ff60:	2c2d      	cmp	r4, #45	; 0x2d
 800ff62:	d132      	bne.n	800ffca <_strtol_l.constprop.0+0x9a>
 800ff64:	782c      	ldrb	r4, [r5, #0]
 800ff66:	2701      	movs	r7, #1
 800ff68:	1cb5      	adds	r5, r6, #2
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d05b      	beq.n	8010026 <_strtol_l.constprop.0+0xf6>
 800ff6e:	2b10      	cmp	r3, #16
 800ff70:	d109      	bne.n	800ff86 <_strtol_l.constprop.0+0x56>
 800ff72:	2c30      	cmp	r4, #48	; 0x30
 800ff74:	d107      	bne.n	800ff86 <_strtol_l.constprop.0+0x56>
 800ff76:	782c      	ldrb	r4, [r5, #0]
 800ff78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ff7c:	2c58      	cmp	r4, #88	; 0x58
 800ff7e:	d14d      	bne.n	801001c <_strtol_l.constprop.0+0xec>
 800ff80:	786c      	ldrb	r4, [r5, #1]
 800ff82:	2310      	movs	r3, #16
 800ff84:	3502      	adds	r5, #2
 800ff86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ff8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff8e:	f04f 0e00 	mov.w	lr, #0
 800ff92:	fbb8 f9f3 	udiv	r9, r8, r3
 800ff96:	4676      	mov	r6, lr
 800ff98:	fb03 8a19 	mls	sl, r3, r9, r8
 800ff9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ffa0:	f1bc 0f09 	cmp.w	ip, #9
 800ffa4:	d816      	bhi.n	800ffd4 <_strtol_l.constprop.0+0xa4>
 800ffa6:	4664      	mov	r4, ip
 800ffa8:	42a3      	cmp	r3, r4
 800ffaa:	dd24      	ble.n	800fff6 <_strtol_l.constprop.0+0xc6>
 800ffac:	f1be 3fff 	cmp.w	lr, #4294967295
 800ffb0:	d008      	beq.n	800ffc4 <_strtol_l.constprop.0+0x94>
 800ffb2:	45b1      	cmp	r9, r6
 800ffb4:	d31c      	bcc.n	800fff0 <_strtol_l.constprop.0+0xc0>
 800ffb6:	d101      	bne.n	800ffbc <_strtol_l.constprop.0+0x8c>
 800ffb8:	45a2      	cmp	sl, r4
 800ffba:	db19      	blt.n	800fff0 <_strtol_l.constprop.0+0xc0>
 800ffbc:	fb06 4603 	mla	r6, r6, r3, r4
 800ffc0:	f04f 0e01 	mov.w	lr, #1
 800ffc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffc8:	e7e8      	b.n	800ff9c <_strtol_l.constprop.0+0x6c>
 800ffca:	2c2b      	cmp	r4, #43	; 0x2b
 800ffcc:	bf04      	itt	eq
 800ffce:	782c      	ldrbeq	r4, [r5, #0]
 800ffd0:	1cb5      	addeq	r5, r6, #2
 800ffd2:	e7ca      	b.n	800ff6a <_strtol_l.constprop.0+0x3a>
 800ffd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ffd8:	f1bc 0f19 	cmp.w	ip, #25
 800ffdc:	d801      	bhi.n	800ffe2 <_strtol_l.constprop.0+0xb2>
 800ffde:	3c37      	subs	r4, #55	; 0x37
 800ffe0:	e7e2      	b.n	800ffa8 <_strtol_l.constprop.0+0x78>
 800ffe2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ffe6:	f1bc 0f19 	cmp.w	ip, #25
 800ffea:	d804      	bhi.n	800fff6 <_strtol_l.constprop.0+0xc6>
 800ffec:	3c57      	subs	r4, #87	; 0x57
 800ffee:	e7db      	b.n	800ffa8 <_strtol_l.constprop.0+0x78>
 800fff0:	f04f 3eff 	mov.w	lr, #4294967295
 800fff4:	e7e6      	b.n	800ffc4 <_strtol_l.constprop.0+0x94>
 800fff6:	f1be 3fff 	cmp.w	lr, #4294967295
 800fffa:	d105      	bne.n	8010008 <_strtol_l.constprop.0+0xd8>
 800fffc:	2322      	movs	r3, #34	; 0x22
 800fffe:	6003      	str	r3, [r0, #0]
 8010000:	4646      	mov	r6, r8
 8010002:	b942      	cbnz	r2, 8010016 <_strtol_l.constprop.0+0xe6>
 8010004:	4630      	mov	r0, r6
 8010006:	e79e      	b.n	800ff46 <_strtol_l.constprop.0+0x16>
 8010008:	b107      	cbz	r7, 801000c <_strtol_l.constprop.0+0xdc>
 801000a:	4276      	negs	r6, r6
 801000c:	2a00      	cmp	r2, #0
 801000e:	d0f9      	beq.n	8010004 <_strtol_l.constprop.0+0xd4>
 8010010:	f1be 0f00 	cmp.w	lr, #0
 8010014:	d000      	beq.n	8010018 <_strtol_l.constprop.0+0xe8>
 8010016:	1e69      	subs	r1, r5, #1
 8010018:	6011      	str	r1, [r2, #0]
 801001a:	e7f3      	b.n	8010004 <_strtol_l.constprop.0+0xd4>
 801001c:	2430      	movs	r4, #48	; 0x30
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1b1      	bne.n	800ff86 <_strtol_l.constprop.0+0x56>
 8010022:	2308      	movs	r3, #8
 8010024:	e7af      	b.n	800ff86 <_strtol_l.constprop.0+0x56>
 8010026:	2c30      	cmp	r4, #48	; 0x30
 8010028:	d0a5      	beq.n	800ff76 <_strtol_l.constprop.0+0x46>
 801002a:	230a      	movs	r3, #10
 801002c:	e7ab      	b.n	800ff86 <_strtol_l.constprop.0+0x56>
 801002e:	bf00      	nop
 8010030:	08013be1 	.word	0x08013be1

08010034 <_strtol_r>:
 8010034:	f7ff bf7c 	b.w	800ff30 <_strtol_l.constprop.0>

08010038 <strtol>:
 8010038:	4613      	mov	r3, r2
 801003a:	460a      	mov	r2, r1
 801003c:	4601      	mov	r1, r0
 801003e:	4802      	ldr	r0, [pc, #8]	; (8010048 <strtol+0x10>)
 8010040:	6800      	ldr	r0, [r0, #0]
 8010042:	f7ff bf75 	b.w	800ff30 <_strtol_l.constprop.0>
 8010046:	bf00      	nop
 8010048:	20000348 	.word	0x20000348

0801004c <__cvt>:
 801004c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010050:	ec55 4b10 	vmov	r4, r5, d0
 8010054:	2d00      	cmp	r5, #0
 8010056:	460e      	mov	r6, r1
 8010058:	4619      	mov	r1, r3
 801005a:	462b      	mov	r3, r5
 801005c:	bfbb      	ittet	lt
 801005e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010062:	461d      	movlt	r5, r3
 8010064:	2300      	movge	r3, #0
 8010066:	232d      	movlt	r3, #45	; 0x2d
 8010068:	700b      	strb	r3, [r1, #0]
 801006a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801006c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010070:	4691      	mov	r9, r2
 8010072:	f023 0820 	bic.w	r8, r3, #32
 8010076:	bfbc      	itt	lt
 8010078:	4622      	movlt	r2, r4
 801007a:	4614      	movlt	r4, r2
 801007c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010080:	d005      	beq.n	801008e <__cvt+0x42>
 8010082:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010086:	d100      	bne.n	801008a <__cvt+0x3e>
 8010088:	3601      	adds	r6, #1
 801008a:	2102      	movs	r1, #2
 801008c:	e000      	b.n	8010090 <__cvt+0x44>
 801008e:	2103      	movs	r1, #3
 8010090:	ab03      	add	r3, sp, #12
 8010092:	9301      	str	r3, [sp, #4]
 8010094:	ab02      	add	r3, sp, #8
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	ec45 4b10 	vmov	d0, r4, r5
 801009c:	4653      	mov	r3, sl
 801009e:	4632      	mov	r2, r6
 80100a0:	f001 f982 	bl	80113a8 <_dtoa_r>
 80100a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80100a8:	4607      	mov	r7, r0
 80100aa:	d102      	bne.n	80100b2 <__cvt+0x66>
 80100ac:	f019 0f01 	tst.w	r9, #1
 80100b0:	d022      	beq.n	80100f8 <__cvt+0xac>
 80100b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100b6:	eb07 0906 	add.w	r9, r7, r6
 80100ba:	d110      	bne.n	80100de <__cvt+0x92>
 80100bc:	783b      	ldrb	r3, [r7, #0]
 80100be:	2b30      	cmp	r3, #48	; 0x30
 80100c0:	d10a      	bne.n	80100d8 <__cvt+0x8c>
 80100c2:	2200      	movs	r2, #0
 80100c4:	2300      	movs	r3, #0
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	f7f0 fd25 	bl	8000b18 <__aeabi_dcmpeq>
 80100ce:	b918      	cbnz	r0, 80100d8 <__cvt+0x8c>
 80100d0:	f1c6 0601 	rsb	r6, r6, #1
 80100d4:	f8ca 6000 	str.w	r6, [sl]
 80100d8:	f8da 3000 	ldr.w	r3, [sl]
 80100dc:	4499      	add	r9, r3
 80100de:	2200      	movs	r2, #0
 80100e0:	2300      	movs	r3, #0
 80100e2:	4620      	mov	r0, r4
 80100e4:	4629      	mov	r1, r5
 80100e6:	f7f0 fd17 	bl	8000b18 <__aeabi_dcmpeq>
 80100ea:	b108      	cbz	r0, 80100f0 <__cvt+0xa4>
 80100ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80100f0:	2230      	movs	r2, #48	; 0x30
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	454b      	cmp	r3, r9
 80100f6:	d307      	bcc.n	8010108 <__cvt+0xbc>
 80100f8:	9b03      	ldr	r3, [sp, #12]
 80100fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100fc:	1bdb      	subs	r3, r3, r7
 80100fe:	4638      	mov	r0, r7
 8010100:	6013      	str	r3, [r2, #0]
 8010102:	b004      	add	sp, #16
 8010104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010108:	1c59      	adds	r1, r3, #1
 801010a:	9103      	str	r1, [sp, #12]
 801010c:	701a      	strb	r2, [r3, #0]
 801010e:	e7f0      	b.n	80100f2 <__cvt+0xa6>

08010110 <__exponent>:
 8010110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010112:	4603      	mov	r3, r0
 8010114:	2900      	cmp	r1, #0
 8010116:	bfb8      	it	lt
 8010118:	4249      	neglt	r1, r1
 801011a:	f803 2b02 	strb.w	r2, [r3], #2
 801011e:	bfb4      	ite	lt
 8010120:	222d      	movlt	r2, #45	; 0x2d
 8010122:	222b      	movge	r2, #43	; 0x2b
 8010124:	2909      	cmp	r1, #9
 8010126:	7042      	strb	r2, [r0, #1]
 8010128:	dd2a      	ble.n	8010180 <__exponent+0x70>
 801012a:	f10d 0207 	add.w	r2, sp, #7
 801012e:	4617      	mov	r7, r2
 8010130:	260a      	movs	r6, #10
 8010132:	4694      	mov	ip, r2
 8010134:	fb91 f5f6 	sdiv	r5, r1, r6
 8010138:	fb06 1415 	mls	r4, r6, r5, r1
 801013c:	3430      	adds	r4, #48	; 0x30
 801013e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010142:	460c      	mov	r4, r1
 8010144:	2c63      	cmp	r4, #99	; 0x63
 8010146:	f102 32ff 	add.w	r2, r2, #4294967295
 801014a:	4629      	mov	r1, r5
 801014c:	dcf1      	bgt.n	8010132 <__exponent+0x22>
 801014e:	3130      	adds	r1, #48	; 0x30
 8010150:	f1ac 0402 	sub.w	r4, ip, #2
 8010154:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010158:	1c41      	adds	r1, r0, #1
 801015a:	4622      	mov	r2, r4
 801015c:	42ba      	cmp	r2, r7
 801015e:	d30a      	bcc.n	8010176 <__exponent+0x66>
 8010160:	f10d 0209 	add.w	r2, sp, #9
 8010164:	eba2 020c 	sub.w	r2, r2, ip
 8010168:	42bc      	cmp	r4, r7
 801016a:	bf88      	it	hi
 801016c:	2200      	movhi	r2, #0
 801016e:	4413      	add	r3, r2
 8010170:	1a18      	subs	r0, r3, r0
 8010172:	b003      	add	sp, #12
 8010174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010176:	f812 5b01 	ldrb.w	r5, [r2], #1
 801017a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801017e:	e7ed      	b.n	801015c <__exponent+0x4c>
 8010180:	2330      	movs	r3, #48	; 0x30
 8010182:	3130      	adds	r1, #48	; 0x30
 8010184:	7083      	strb	r3, [r0, #2]
 8010186:	70c1      	strb	r1, [r0, #3]
 8010188:	1d03      	adds	r3, r0, #4
 801018a:	e7f1      	b.n	8010170 <__exponent+0x60>

0801018c <_printf_float>:
 801018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010190:	ed2d 8b02 	vpush	{d8}
 8010194:	b08d      	sub	sp, #52	; 0x34
 8010196:	460c      	mov	r4, r1
 8010198:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801019c:	4616      	mov	r6, r2
 801019e:	461f      	mov	r7, r3
 80101a0:	4605      	mov	r5, r0
 80101a2:	f000 ffaf 	bl	8011104 <_localeconv_r>
 80101a6:	f8d0 a000 	ldr.w	sl, [r0]
 80101aa:	4650      	mov	r0, sl
 80101ac:	f7f0 f888 	bl	80002c0 <strlen>
 80101b0:	2300      	movs	r3, #0
 80101b2:	930a      	str	r3, [sp, #40]	; 0x28
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	9305      	str	r3, [sp, #20]
 80101b8:	f8d8 3000 	ldr.w	r3, [r8]
 80101bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80101c0:	3307      	adds	r3, #7
 80101c2:	f023 0307 	bic.w	r3, r3, #7
 80101c6:	f103 0208 	add.w	r2, r3, #8
 80101ca:	f8c8 2000 	str.w	r2, [r8]
 80101ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80101d6:	9307      	str	r3, [sp, #28]
 80101d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80101dc:	ee08 0a10 	vmov	s16, r0
 80101e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80101e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101e8:	4b9e      	ldr	r3, [pc, #632]	; (8010464 <_printf_float+0x2d8>)
 80101ea:	f04f 32ff 	mov.w	r2, #4294967295
 80101ee:	f7f0 fcc5 	bl	8000b7c <__aeabi_dcmpun>
 80101f2:	bb88      	cbnz	r0, 8010258 <_printf_float+0xcc>
 80101f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101f8:	4b9a      	ldr	r3, [pc, #616]	; (8010464 <_printf_float+0x2d8>)
 80101fa:	f04f 32ff 	mov.w	r2, #4294967295
 80101fe:	f7f0 fc9f 	bl	8000b40 <__aeabi_dcmple>
 8010202:	bb48      	cbnz	r0, 8010258 <_printf_float+0xcc>
 8010204:	2200      	movs	r2, #0
 8010206:	2300      	movs	r3, #0
 8010208:	4640      	mov	r0, r8
 801020a:	4649      	mov	r1, r9
 801020c:	f7f0 fc8e 	bl	8000b2c <__aeabi_dcmplt>
 8010210:	b110      	cbz	r0, 8010218 <_printf_float+0x8c>
 8010212:	232d      	movs	r3, #45	; 0x2d
 8010214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010218:	4a93      	ldr	r2, [pc, #588]	; (8010468 <_printf_float+0x2dc>)
 801021a:	4b94      	ldr	r3, [pc, #592]	; (801046c <_printf_float+0x2e0>)
 801021c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010220:	bf94      	ite	ls
 8010222:	4690      	movls	r8, r2
 8010224:	4698      	movhi	r8, r3
 8010226:	2303      	movs	r3, #3
 8010228:	6123      	str	r3, [r4, #16]
 801022a:	9b05      	ldr	r3, [sp, #20]
 801022c:	f023 0304 	bic.w	r3, r3, #4
 8010230:	6023      	str	r3, [r4, #0]
 8010232:	f04f 0900 	mov.w	r9, #0
 8010236:	9700      	str	r7, [sp, #0]
 8010238:	4633      	mov	r3, r6
 801023a:	aa0b      	add	r2, sp, #44	; 0x2c
 801023c:	4621      	mov	r1, r4
 801023e:	4628      	mov	r0, r5
 8010240:	f000 f9da 	bl	80105f8 <_printf_common>
 8010244:	3001      	adds	r0, #1
 8010246:	f040 8090 	bne.w	801036a <_printf_float+0x1de>
 801024a:	f04f 30ff 	mov.w	r0, #4294967295
 801024e:	b00d      	add	sp, #52	; 0x34
 8010250:	ecbd 8b02 	vpop	{d8}
 8010254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010258:	4642      	mov	r2, r8
 801025a:	464b      	mov	r3, r9
 801025c:	4640      	mov	r0, r8
 801025e:	4649      	mov	r1, r9
 8010260:	f7f0 fc8c 	bl	8000b7c <__aeabi_dcmpun>
 8010264:	b140      	cbz	r0, 8010278 <_printf_float+0xec>
 8010266:	464b      	mov	r3, r9
 8010268:	2b00      	cmp	r3, #0
 801026a:	bfbc      	itt	lt
 801026c:	232d      	movlt	r3, #45	; 0x2d
 801026e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010272:	4a7f      	ldr	r2, [pc, #508]	; (8010470 <_printf_float+0x2e4>)
 8010274:	4b7f      	ldr	r3, [pc, #508]	; (8010474 <_printf_float+0x2e8>)
 8010276:	e7d1      	b.n	801021c <_printf_float+0x90>
 8010278:	6863      	ldr	r3, [r4, #4]
 801027a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801027e:	9206      	str	r2, [sp, #24]
 8010280:	1c5a      	adds	r2, r3, #1
 8010282:	d13f      	bne.n	8010304 <_printf_float+0x178>
 8010284:	2306      	movs	r3, #6
 8010286:	6063      	str	r3, [r4, #4]
 8010288:	9b05      	ldr	r3, [sp, #20]
 801028a:	6861      	ldr	r1, [r4, #4]
 801028c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010290:	2300      	movs	r3, #0
 8010292:	9303      	str	r3, [sp, #12]
 8010294:	ab0a      	add	r3, sp, #40	; 0x28
 8010296:	e9cd b301 	strd	fp, r3, [sp, #4]
 801029a:	ab09      	add	r3, sp, #36	; 0x24
 801029c:	ec49 8b10 	vmov	d0, r8, r9
 80102a0:	9300      	str	r3, [sp, #0]
 80102a2:	6022      	str	r2, [r4, #0]
 80102a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102a8:	4628      	mov	r0, r5
 80102aa:	f7ff fecf 	bl	801004c <__cvt>
 80102ae:	9b06      	ldr	r3, [sp, #24]
 80102b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102b2:	2b47      	cmp	r3, #71	; 0x47
 80102b4:	4680      	mov	r8, r0
 80102b6:	d108      	bne.n	80102ca <_printf_float+0x13e>
 80102b8:	1cc8      	adds	r0, r1, #3
 80102ba:	db02      	blt.n	80102c2 <_printf_float+0x136>
 80102bc:	6863      	ldr	r3, [r4, #4]
 80102be:	4299      	cmp	r1, r3
 80102c0:	dd41      	ble.n	8010346 <_printf_float+0x1ba>
 80102c2:	f1ab 0302 	sub.w	r3, fp, #2
 80102c6:	fa5f fb83 	uxtb.w	fp, r3
 80102ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102ce:	d820      	bhi.n	8010312 <_printf_float+0x186>
 80102d0:	3901      	subs	r1, #1
 80102d2:	465a      	mov	r2, fp
 80102d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80102d8:	9109      	str	r1, [sp, #36]	; 0x24
 80102da:	f7ff ff19 	bl	8010110 <__exponent>
 80102de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102e0:	1813      	adds	r3, r2, r0
 80102e2:	2a01      	cmp	r2, #1
 80102e4:	4681      	mov	r9, r0
 80102e6:	6123      	str	r3, [r4, #16]
 80102e8:	dc02      	bgt.n	80102f0 <_printf_float+0x164>
 80102ea:	6822      	ldr	r2, [r4, #0]
 80102ec:	07d2      	lsls	r2, r2, #31
 80102ee:	d501      	bpl.n	80102f4 <_printf_float+0x168>
 80102f0:	3301      	adds	r3, #1
 80102f2:	6123      	str	r3, [r4, #16]
 80102f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d09c      	beq.n	8010236 <_printf_float+0xaa>
 80102fc:	232d      	movs	r3, #45	; 0x2d
 80102fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010302:	e798      	b.n	8010236 <_printf_float+0xaa>
 8010304:	9a06      	ldr	r2, [sp, #24]
 8010306:	2a47      	cmp	r2, #71	; 0x47
 8010308:	d1be      	bne.n	8010288 <_printf_float+0xfc>
 801030a:	2b00      	cmp	r3, #0
 801030c:	d1bc      	bne.n	8010288 <_printf_float+0xfc>
 801030e:	2301      	movs	r3, #1
 8010310:	e7b9      	b.n	8010286 <_printf_float+0xfa>
 8010312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010316:	d118      	bne.n	801034a <_printf_float+0x1be>
 8010318:	2900      	cmp	r1, #0
 801031a:	6863      	ldr	r3, [r4, #4]
 801031c:	dd0b      	ble.n	8010336 <_printf_float+0x1aa>
 801031e:	6121      	str	r1, [r4, #16]
 8010320:	b913      	cbnz	r3, 8010328 <_printf_float+0x19c>
 8010322:	6822      	ldr	r2, [r4, #0]
 8010324:	07d0      	lsls	r0, r2, #31
 8010326:	d502      	bpl.n	801032e <_printf_float+0x1a2>
 8010328:	3301      	adds	r3, #1
 801032a:	440b      	add	r3, r1
 801032c:	6123      	str	r3, [r4, #16]
 801032e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010330:	f04f 0900 	mov.w	r9, #0
 8010334:	e7de      	b.n	80102f4 <_printf_float+0x168>
 8010336:	b913      	cbnz	r3, 801033e <_printf_float+0x1b2>
 8010338:	6822      	ldr	r2, [r4, #0]
 801033a:	07d2      	lsls	r2, r2, #31
 801033c:	d501      	bpl.n	8010342 <_printf_float+0x1b6>
 801033e:	3302      	adds	r3, #2
 8010340:	e7f4      	b.n	801032c <_printf_float+0x1a0>
 8010342:	2301      	movs	r3, #1
 8010344:	e7f2      	b.n	801032c <_printf_float+0x1a0>
 8010346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801034a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801034c:	4299      	cmp	r1, r3
 801034e:	db05      	blt.n	801035c <_printf_float+0x1d0>
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	6121      	str	r1, [r4, #16]
 8010354:	07d8      	lsls	r0, r3, #31
 8010356:	d5ea      	bpl.n	801032e <_printf_float+0x1a2>
 8010358:	1c4b      	adds	r3, r1, #1
 801035a:	e7e7      	b.n	801032c <_printf_float+0x1a0>
 801035c:	2900      	cmp	r1, #0
 801035e:	bfd4      	ite	le
 8010360:	f1c1 0202 	rsble	r2, r1, #2
 8010364:	2201      	movgt	r2, #1
 8010366:	4413      	add	r3, r2
 8010368:	e7e0      	b.n	801032c <_printf_float+0x1a0>
 801036a:	6823      	ldr	r3, [r4, #0]
 801036c:	055a      	lsls	r2, r3, #21
 801036e:	d407      	bmi.n	8010380 <_printf_float+0x1f4>
 8010370:	6923      	ldr	r3, [r4, #16]
 8010372:	4642      	mov	r2, r8
 8010374:	4631      	mov	r1, r6
 8010376:	4628      	mov	r0, r5
 8010378:	47b8      	blx	r7
 801037a:	3001      	adds	r0, #1
 801037c:	d12c      	bne.n	80103d8 <_printf_float+0x24c>
 801037e:	e764      	b.n	801024a <_printf_float+0xbe>
 8010380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010384:	f240 80e0 	bls.w	8010548 <_printf_float+0x3bc>
 8010388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801038c:	2200      	movs	r2, #0
 801038e:	2300      	movs	r3, #0
 8010390:	f7f0 fbc2 	bl	8000b18 <__aeabi_dcmpeq>
 8010394:	2800      	cmp	r0, #0
 8010396:	d034      	beq.n	8010402 <_printf_float+0x276>
 8010398:	4a37      	ldr	r2, [pc, #220]	; (8010478 <_printf_float+0x2ec>)
 801039a:	2301      	movs	r3, #1
 801039c:	4631      	mov	r1, r6
 801039e:	4628      	mov	r0, r5
 80103a0:	47b8      	blx	r7
 80103a2:	3001      	adds	r0, #1
 80103a4:	f43f af51 	beq.w	801024a <_printf_float+0xbe>
 80103a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103ac:	429a      	cmp	r2, r3
 80103ae:	db02      	blt.n	80103b6 <_printf_float+0x22a>
 80103b0:	6823      	ldr	r3, [r4, #0]
 80103b2:	07d8      	lsls	r0, r3, #31
 80103b4:	d510      	bpl.n	80103d8 <_printf_float+0x24c>
 80103b6:	ee18 3a10 	vmov	r3, s16
 80103ba:	4652      	mov	r2, sl
 80103bc:	4631      	mov	r1, r6
 80103be:	4628      	mov	r0, r5
 80103c0:	47b8      	blx	r7
 80103c2:	3001      	adds	r0, #1
 80103c4:	f43f af41 	beq.w	801024a <_printf_float+0xbe>
 80103c8:	f04f 0800 	mov.w	r8, #0
 80103cc:	f104 091a 	add.w	r9, r4, #26
 80103d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103d2:	3b01      	subs	r3, #1
 80103d4:	4543      	cmp	r3, r8
 80103d6:	dc09      	bgt.n	80103ec <_printf_float+0x260>
 80103d8:	6823      	ldr	r3, [r4, #0]
 80103da:	079b      	lsls	r3, r3, #30
 80103dc:	f100 8107 	bmi.w	80105ee <_printf_float+0x462>
 80103e0:	68e0      	ldr	r0, [r4, #12]
 80103e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103e4:	4298      	cmp	r0, r3
 80103e6:	bfb8      	it	lt
 80103e8:	4618      	movlt	r0, r3
 80103ea:	e730      	b.n	801024e <_printf_float+0xc2>
 80103ec:	2301      	movs	r3, #1
 80103ee:	464a      	mov	r2, r9
 80103f0:	4631      	mov	r1, r6
 80103f2:	4628      	mov	r0, r5
 80103f4:	47b8      	blx	r7
 80103f6:	3001      	adds	r0, #1
 80103f8:	f43f af27 	beq.w	801024a <_printf_float+0xbe>
 80103fc:	f108 0801 	add.w	r8, r8, #1
 8010400:	e7e6      	b.n	80103d0 <_printf_float+0x244>
 8010402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010404:	2b00      	cmp	r3, #0
 8010406:	dc39      	bgt.n	801047c <_printf_float+0x2f0>
 8010408:	4a1b      	ldr	r2, [pc, #108]	; (8010478 <_printf_float+0x2ec>)
 801040a:	2301      	movs	r3, #1
 801040c:	4631      	mov	r1, r6
 801040e:	4628      	mov	r0, r5
 8010410:	47b8      	blx	r7
 8010412:	3001      	adds	r0, #1
 8010414:	f43f af19 	beq.w	801024a <_printf_float+0xbe>
 8010418:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801041c:	4313      	orrs	r3, r2
 801041e:	d102      	bne.n	8010426 <_printf_float+0x29a>
 8010420:	6823      	ldr	r3, [r4, #0]
 8010422:	07d9      	lsls	r1, r3, #31
 8010424:	d5d8      	bpl.n	80103d8 <_printf_float+0x24c>
 8010426:	ee18 3a10 	vmov	r3, s16
 801042a:	4652      	mov	r2, sl
 801042c:	4631      	mov	r1, r6
 801042e:	4628      	mov	r0, r5
 8010430:	47b8      	blx	r7
 8010432:	3001      	adds	r0, #1
 8010434:	f43f af09 	beq.w	801024a <_printf_float+0xbe>
 8010438:	f04f 0900 	mov.w	r9, #0
 801043c:	f104 0a1a 	add.w	sl, r4, #26
 8010440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010442:	425b      	negs	r3, r3
 8010444:	454b      	cmp	r3, r9
 8010446:	dc01      	bgt.n	801044c <_printf_float+0x2c0>
 8010448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801044a:	e792      	b.n	8010372 <_printf_float+0x1e6>
 801044c:	2301      	movs	r3, #1
 801044e:	4652      	mov	r2, sl
 8010450:	4631      	mov	r1, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	f43f aef7 	beq.w	801024a <_printf_float+0xbe>
 801045c:	f109 0901 	add.w	r9, r9, #1
 8010460:	e7ee      	b.n	8010440 <_printf_float+0x2b4>
 8010462:	bf00      	nop
 8010464:	7fefffff 	.word	0x7fefffff
 8010468:	08013ce1 	.word	0x08013ce1
 801046c:	08013ce5 	.word	0x08013ce5
 8010470:	08013ce9 	.word	0x08013ce9
 8010474:	08013ced 	.word	0x08013ced
 8010478:	08013cf1 	.word	0x08013cf1
 801047c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801047e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010480:	429a      	cmp	r2, r3
 8010482:	bfa8      	it	ge
 8010484:	461a      	movge	r2, r3
 8010486:	2a00      	cmp	r2, #0
 8010488:	4691      	mov	r9, r2
 801048a:	dc37      	bgt.n	80104fc <_printf_float+0x370>
 801048c:	f04f 0b00 	mov.w	fp, #0
 8010490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010494:	f104 021a 	add.w	r2, r4, #26
 8010498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801049a:	9305      	str	r3, [sp, #20]
 801049c:	eba3 0309 	sub.w	r3, r3, r9
 80104a0:	455b      	cmp	r3, fp
 80104a2:	dc33      	bgt.n	801050c <_printf_float+0x380>
 80104a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104a8:	429a      	cmp	r2, r3
 80104aa:	db3b      	blt.n	8010524 <_printf_float+0x398>
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	07da      	lsls	r2, r3, #31
 80104b0:	d438      	bmi.n	8010524 <_printf_float+0x398>
 80104b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80104b6:	eba2 0903 	sub.w	r9, r2, r3
 80104ba:	9b05      	ldr	r3, [sp, #20]
 80104bc:	1ad2      	subs	r2, r2, r3
 80104be:	4591      	cmp	r9, r2
 80104c0:	bfa8      	it	ge
 80104c2:	4691      	movge	r9, r2
 80104c4:	f1b9 0f00 	cmp.w	r9, #0
 80104c8:	dc35      	bgt.n	8010536 <_printf_float+0x3aa>
 80104ca:	f04f 0800 	mov.w	r8, #0
 80104ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104d2:	f104 0a1a 	add.w	sl, r4, #26
 80104d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104da:	1a9b      	subs	r3, r3, r2
 80104dc:	eba3 0309 	sub.w	r3, r3, r9
 80104e0:	4543      	cmp	r3, r8
 80104e2:	f77f af79 	ble.w	80103d8 <_printf_float+0x24c>
 80104e6:	2301      	movs	r3, #1
 80104e8:	4652      	mov	r2, sl
 80104ea:	4631      	mov	r1, r6
 80104ec:	4628      	mov	r0, r5
 80104ee:	47b8      	blx	r7
 80104f0:	3001      	adds	r0, #1
 80104f2:	f43f aeaa 	beq.w	801024a <_printf_float+0xbe>
 80104f6:	f108 0801 	add.w	r8, r8, #1
 80104fa:	e7ec      	b.n	80104d6 <_printf_float+0x34a>
 80104fc:	4613      	mov	r3, r2
 80104fe:	4631      	mov	r1, r6
 8010500:	4642      	mov	r2, r8
 8010502:	4628      	mov	r0, r5
 8010504:	47b8      	blx	r7
 8010506:	3001      	adds	r0, #1
 8010508:	d1c0      	bne.n	801048c <_printf_float+0x300>
 801050a:	e69e      	b.n	801024a <_printf_float+0xbe>
 801050c:	2301      	movs	r3, #1
 801050e:	4631      	mov	r1, r6
 8010510:	4628      	mov	r0, r5
 8010512:	9205      	str	r2, [sp, #20]
 8010514:	47b8      	blx	r7
 8010516:	3001      	adds	r0, #1
 8010518:	f43f ae97 	beq.w	801024a <_printf_float+0xbe>
 801051c:	9a05      	ldr	r2, [sp, #20]
 801051e:	f10b 0b01 	add.w	fp, fp, #1
 8010522:	e7b9      	b.n	8010498 <_printf_float+0x30c>
 8010524:	ee18 3a10 	vmov	r3, s16
 8010528:	4652      	mov	r2, sl
 801052a:	4631      	mov	r1, r6
 801052c:	4628      	mov	r0, r5
 801052e:	47b8      	blx	r7
 8010530:	3001      	adds	r0, #1
 8010532:	d1be      	bne.n	80104b2 <_printf_float+0x326>
 8010534:	e689      	b.n	801024a <_printf_float+0xbe>
 8010536:	9a05      	ldr	r2, [sp, #20]
 8010538:	464b      	mov	r3, r9
 801053a:	4442      	add	r2, r8
 801053c:	4631      	mov	r1, r6
 801053e:	4628      	mov	r0, r5
 8010540:	47b8      	blx	r7
 8010542:	3001      	adds	r0, #1
 8010544:	d1c1      	bne.n	80104ca <_printf_float+0x33e>
 8010546:	e680      	b.n	801024a <_printf_float+0xbe>
 8010548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801054a:	2a01      	cmp	r2, #1
 801054c:	dc01      	bgt.n	8010552 <_printf_float+0x3c6>
 801054e:	07db      	lsls	r3, r3, #31
 8010550:	d53a      	bpl.n	80105c8 <_printf_float+0x43c>
 8010552:	2301      	movs	r3, #1
 8010554:	4642      	mov	r2, r8
 8010556:	4631      	mov	r1, r6
 8010558:	4628      	mov	r0, r5
 801055a:	47b8      	blx	r7
 801055c:	3001      	adds	r0, #1
 801055e:	f43f ae74 	beq.w	801024a <_printf_float+0xbe>
 8010562:	ee18 3a10 	vmov	r3, s16
 8010566:	4652      	mov	r2, sl
 8010568:	4631      	mov	r1, r6
 801056a:	4628      	mov	r0, r5
 801056c:	47b8      	blx	r7
 801056e:	3001      	adds	r0, #1
 8010570:	f43f ae6b 	beq.w	801024a <_printf_float+0xbe>
 8010574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010578:	2200      	movs	r2, #0
 801057a:	2300      	movs	r3, #0
 801057c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010580:	f7f0 faca 	bl	8000b18 <__aeabi_dcmpeq>
 8010584:	b9d8      	cbnz	r0, 80105be <_printf_float+0x432>
 8010586:	f10a 33ff 	add.w	r3, sl, #4294967295
 801058a:	f108 0201 	add.w	r2, r8, #1
 801058e:	4631      	mov	r1, r6
 8010590:	4628      	mov	r0, r5
 8010592:	47b8      	blx	r7
 8010594:	3001      	adds	r0, #1
 8010596:	d10e      	bne.n	80105b6 <_printf_float+0x42a>
 8010598:	e657      	b.n	801024a <_printf_float+0xbe>
 801059a:	2301      	movs	r3, #1
 801059c:	4652      	mov	r2, sl
 801059e:	4631      	mov	r1, r6
 80105a0:	4628      	mov	r0, r5
 80105a2:	47b8      	blx	r7
 80105a4:	3001      	adds	r0, #1
 80105a6:	f43f ae50 	beq.w	801024a <_printf_float+0xbe>
 80105aa:	f108 0801 	add.w	r8, r8, #1
 80105ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b0:	3b01      	subs	r3, #1
 80105b2:	4543      	cmp	r3, r8
 80105b4:	dcf1      	bgt.n	801059a <_printf_float+0x40e>
 80105b6:	464b      	mov	r3, r9
 80105b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80105bc:	e6da      	b.n	8010374 <_printf_float+0x1e8>
 80105be:	f04f 0800 	mov.w	r8, #0
 80105c2:	f104 0a1a 	add.w	sl, r4, #26
 80105c6:	e7f2      	b.n	80105ae <_printf_float+0x422>
 80105c8:	2301      	movs	r3, #1
 80105ca:	4642      	mov	r2, r8
 80105cc:	e7df      	b.n	801058e <_printf_float+0x402>
 80105ce:	2301      	movs	r3, #1
 80105d0:	464a      	mov	r2, r9
 80105d2:	4631      	mov	r1, r6
 80105d4:	4628      	mov	r0, r5
 80105d6:	47b8      	blx	r7
 80105d8:	3001      	adds	r0, #1
 80105da:	f43f ae36 	beq.w	801024a <_printf_float+0xbe>
 80105de:	f108 0801 	add.w	r8, r8, #1
 80105e2:	68e3      	ldr	r3, [r4, #12]
 80105e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105e6:	1a5b      	subs	r3, r3, r1
 80105e8:	4543      	cmp	r3, r8
 80105ea:	dcf0      	bgt.n	80105ce <_printf_float+0x442>
 80105ec:	e6f8      	b.n	80103e0 <_printf_float+0x254>
 80105ee:	f04f 0800 	mov.w	r8, #0
 80105f2:	f104 0919 	add.w	r9, r4, #25
 80105f6:	e7f4      	b.n	80105e2 <_printf_float+0x456>

080105f8 <_printf_common>:
 80105f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105fc:	4616      	mov	r6, r2
 80105fe:	4699      	mov	r9, r3
 8010600:	688a      	ldr	r2, [r1, #8]
 8010602:	690b      	ldr	r3, [r1, #16]
 8010604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010608:	4293      	cmp	r3, r2
 801060a:	bfb8      	it	lt
 801060c:	4613      	movlt	r3, r2
 801060e:	6033      	str	r3, [r6, #0]
 8010610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010614:	4607      	mov	r7, r0
 8010616:	460c      	mov	r4, r1
 8010618:	b10a      	cbz	r2, 801061e <_printf_common+0x26>
 801061a:	3301      	adds	r3, #1
 801061c:	6033      	str	r3, [r6, #0]
 801061e:	6823      	ldr	r3, [r4, #0]
 8010620:	0699      	lsls	r1, r3, #26
 8010622:	bf42      	ittt	mi
 8010624:	6833      	ldrmi	r3, [r6, #0]
 8010626:	3302      	addmi	r3, #2
 8010628:	6033      	strmi	r3, [r6, #0]
 801062a:	6825      	ldr	r5, [r4, #0]
 801062c:	f015 0506 	ands.w	r5, r5, #6
 8010630:	d106      	bne.n	8010640 <_printf_common+0x48>
 8010632:	f104 0a19 	add.w	sl, r4, #25
 8010636:	68e3      	ldr	r3, [r4, #12]
 8010638:	6832      	ldr	r2, [r6, #0]
 801063a:	1a9b      	subs	r3, r3, r2
 801063c:	42ab      	cmp	r3, r5
 801063e:	dc26      	bgt.n	801068e <_printf_common+0x96>
 8010640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010644:	1e13      	subs	r3, r2, #0
 8010646:	6822      	ldr	r2, [r4, #0]
 8010648:	bf18      	it	ne
 801064a:	2301      	movne	r3, #1
 801064c:	0692      	lsls	r2, r2, #26
 801064e:	d42b      	bmi.n	80106a8 <_printf_common+0xb0>
 8010650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010654:	4649      	mov	r1, r9
 8010656:	4638      	mov	r0, r7
 8010658:	47c0      	blx	r8
 801065a:	3001      	adds	r0, #1
 801065c:	d01e      	beq.n	801069c <_printf_common+0xa4>
 801065e:	6823      	ldr	r3, [r4, #0]
 8010660:	6922      	ldr	r2, [r4, #16]
 8010662:	f003 0306 	and.w	r3, r3, #6
 8010666:	2b04      	cmp	r3, #4
 8010668:	bf02      	ittt	eq
 801066a:	68e5      	ldreq	r5, [r4, #12]
 801066c:	6833      	ldreq	r3, [r6, #0]
 801066e:	1aed      	subeq	r5, r5, r3
 8010670:	68a3      	ldr	r3, [r4, #8]
 8010672:	bf0c      	ite	eq
 8010674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010678:	2500      	movne	r5, #0
 801067a:	4293      	cmp	r3, r2
 801067c:	bfc4      	itt	gt
 801067e:	1a9b      	subgt	r3, r3, r2
 8010680:	18ed      	addgt	r5, r5, r3
 8010682:	2600      	movs	r6, #0
 8010684:	341a      	adds	r4, #26
 8010686:	42b5      	cmp	r5, r6
 8010688:	d11a      	bne.n	80106c0 <_printf_common+0xc8>
 801068a:	2000      	movs	r0, #0
 801068c:	e008      	b.n	80106a0 <_printf_common+0xa8>
 801068e:	2301      	movs	r3, #1
 8010690:	4652      	mov	r2, sl
 8010692:	4649      	mov	r1, r9
 8010694:	4638      	mov	r0, r7
 8010696:	47c0      	blx	r8
 8010698:	3001      	adds	r0, #1
 801069a:	d103      	bne.n	80106a4 <_printf_common+0xac>
 801069c:	f04f 30ff 	mov.w	r0, #4294967295
 80106a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106a4:	3501      	adds	r5, #1
 80106a6:	e7c6      	b.n	8010636 <_printf_common+0x3e>
 80106a8:	18e1      	adds	r1, r4, r3
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	2030      	movs	r0, #48	; 0x30
 80106ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106b2:	4422      	add	r2, r4
 80106b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106bc:	3302      	adds	r3, #2
 80106be:	e7c7      	b.n	8010650 <_printf_common+0x58>
 80106c0:	2301      	movs	r3, #1
 80106c2:	4622      	mov	r2, r4
 80106c4:	4649      	mov	r1, r9
 80106c6:	4638      	mov	r0, r7
 80106c8:	47c0      	blx	r8
 80106ca:	3001      	adds	r0, #1
 80106cc:	d0e6      	beq.n	801069c <_printf_common+0xa4>
 80106ce:	3601      	adds	r6, #1
 80106d0:	e7d9      	b.n	8010686 <_printf_common+0x8e>
	...

080106d4 <_printf_i>:
 80106d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106d8:	7e0f      	ldrb	r7, [r1, #24]
 80106da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106dc:	2f78      	cmp	r7, #120	; 0x78
 80106de:	4691      	mov	r9, r2
 80106e0:	4680      	mov	r8, r0
 80106e2:	460c      	mov	r4, r1
 80106e4:	469a      	mov	sl, r3
 80106e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80106ea:	d807      	bhi.n	80106fc <_printf_i+0x28>
 80106ec:	2f62      	cmp	r7, #98	; 0x62
 80106ee:	d80a      	bhi.n	8010706 <_printf_i+0x32>
 80106f0:	2f00      	cmp	r7, #0
 80106f2:	f000 80d4 	beq.w	801089e <_printf_i+0x1ca>
 80106f6:	2f58      	cmp	r7, #88	; 0x58
 80106f8:	f000 80c0 	beq.w	801087c <_printf_i+0x1a8>
 80106fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010704:	e03a      	b.n	801077c <_printf_i+0xa8>
 8010706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801070a:	2b15      	cmp	r3, #21
 801070c:	d8f6      	bhi.n	80106fc <_printf_i+0x28>
 801070e:	a101      	add	r1, pc, #4	; (adr r1, 8010714 <_printf_i+0x40>)
 8010710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010714:	0801076d 	.word	0x0801076d
 8010718:	08010781 	.word	0x08010781
 801071c:	080106fd 	.word	0x080106fd
 8010720:	080106fd 	.word	0x080106fd
 8010724:	080106fd 	.word	0x080106fd
 8010728:	080106fd 	.word	0x080106fd
 801072c:	08010781 	.word	0x08010781
 8010730:	080106fd 	.word	0x080106fd
 8010734:	080106fd 	.word	0x080106fd
 8010738:	080106fd 	.word	0x080106fd
 801073c:	080106fd 	.word	0x080106fd
 8010740:	08010885 	.word	0x08010885
 8010744:	080107ad 	.word	0x080107ad
 8010748:	0801083f 	.word	0x0801083f
 801074c:	080106fd 	.word	0x080106fd
 8010750:	080106fd 	.word	0x080106fd
 8010754:	080108a7 	.word	0x080108a7
 8010758:	080106fd 	.word	0x080106fd
 801075c:	080107ad 	.word	0x080107ad
 8010760:	080106fd 	.word	0x080106fd
 8010764:	080106fd 	.word	0x080106fd
 8010768:	08010847 	.word	0x08010847
 801076c:	682b      	ldr	r3, [r5, #0]
 801076e:	1d1a      	adds	r2, r3, #4
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	602a      	str	r2, [r5, #0]
 8010774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801077c:	2301      	movs	r3, #1
 801077e:	e09f      	b.n	80108c0 <_printf_i+0x1ec>
 8010780:	6820      	ldr	r0, [r4, #0]
 8010782:	682b      	ldr	r3, [r5, #0]
 8010784:	0607      	lsls	r7, r0, #24
 8010786:	f103 0104 	add.w	r1, r3, #4
 801078a:	6029      	str	r1, [r5, #0]
 801078c:	d501      	bpl.n	8010792 <_printf_i+0xbe>
 801078e:	681e      	ldr	r6, [r3, #0]
 8010790:	e003      	b.n	801079a <_printf_i+0xc6>
 8010792:	0646      	lsls	r6, r0, #25
 8010794:	d5fb      	bpl.n	801078e <_printf_i+0xba>
 8010796:	f9b3 6000 	ldrsh.w	r6, [r3]
 801079a:	2e00      	cmp	r6, #0
 801079c:	da03      	bge.n	80107a6 <_printf_i+0xd2>
 801079e:	232d      	movs	r3, #45	; 0x2d
 80107a0:	4276      	negs	r6, r6
 80107a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107a6:	485a      	ldr	r0, [pc, #360]	; (8010910 <_printf_i+0x23c>)
 80107a8:	230a      	movs	r3, #10
 80107aa:	e012      	b.n	80107d2 <_printf_i+0xfe>
 80107ac:	682b      	ldr	r3, [r5, #0]
 80107ae:	6820      	ldr	r0, [r4, #0]
 80107b0:	1d19      	adds	r1, r3, #4
 80107b2:	6029      	str	r1, [r5, #0]
 80107b4:	0605      	lsls	r5, r0, #24
 80107b6:	d501      	bpl.n	80107bc <_printf_i+0xe8>
 80107b8:	681e      	ldr	r6, [r3, #0]
 80107ba:	e002      	b.n	80107c2 <_printf_i+0xee>
 80107bc:	0641      	lsls	r1, r0, #25
 80107be:	d5fb      	bpl.n	80107b8 <_printf_i+0xe4>
 80107c0:	881e      	ldrh	r6, [r3, #0]
 80107c2:	4853      	ldr	r0, [pc, #332]	; (8010910 <_printf_i+0x23c>)
 80107c4:	2f6f      	cmp	r7, #111	; 0x6f
 80107c6:	bf0c      	ite	eq
 80107c8:	2308      	moveq	r3, #8
 80107ca:	230a      	movne	r3, #10
 80107cc:	2100      	movs	r1, #0
 80107ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107d2:	6865      	ldr	r5, [r4, #4]
 80107d4:	60a5      	str	r5, [r4, #8]
 80107d6:	2d00      	cmp	r5, #0
 80107d8:	bfa2      	ittt	ge
 80107da:	6821      	ldrge	r1, [r4, #0]
 80107dc:	f021 0104 	bicge.w	r1, r1, #4
 80107e0:	6021      	strge	r1, [r4, #0]
 80107e2:	b90e      	cbnz	r6, 80107e8 <_printf_i+0x114>
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	d04b      	beq.n	8010880 <_printf_i+0x1ac>
 80107e8:	4615      	mov	r5, r2
 80107ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80107ee:	fb03 6711 	mls	r7, r3, r1, r6
 80107f2:	5dc7      	ldrb	r7, [r0, r7]
 80107f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80107f8:	4637      	mov	r7, r6
 80107fa:	42bb      	cmp	r3, r7
 80107fc:	460e      	mov	r6, r1
 80107fe:	d9f4      	bls.n	80107ea <_printf_i+0x116>
 8010800:	2b08      	cmp	r3, #8
 8010802:	d10b      	bne.n	801081c <_printf_i+0x148>
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	07de      	lsls	r6, r3, #31
 8010808:	d508      	bpl.n	801081c <_printf_i+0x148>
 801080a:	6923      	ldr	r3, [r4, #16]
 801080c:	6861      	ldr	r1, [r4, #4]
 801080e:	4299      	cmp	r1, r3
 8010810:	bfde      	ittt	le
 8010812:	2330      	movle	r3, #48	; 0x30
 8010814:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010818:	f105 35ff 	addle.w	r5, r5, #4294967295
 801081c:	1b52      	subs	r2, r2, r5
 801081e:	6122      	str	r2, [r4, #16]
 8010820:	f8cd a000 	str.w	sl, [sp]
 8010824:	464b      	mov	r3, r9
 8010826:	aa03      	add	r2, sp, #12
 8010828:	4621      	mov	r1, r4
 801082a:	4640      	mov	r0, r8
 801082c:	f7ff fee4 	bl	80105f8 <_printf_common>
 8010830:	3001      	adds	r0, #1
 8010832:	d14a      	bne.n	80108ca <_printf_i+0x1f6>
 8010834:	f04f 30ff 	mov.w	r0, #4294967295
 8010838:	b004      	add	sp, #16
 801083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	f043 0320 	orr.w	r3, r3, #32
 8010844:	6023      	str	r3, [r4, #0]
 8010846:	4833      	ldr	r0, [pc, #204]	; (8010914 <_printf_i+0x240>)
 8010848:	2778      	movs	r7, #120	; 0x78
 801084a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801084e:	6823      	ldr	r3, [r4, #0]
 8010850:	6829      	ldr	r1, [r5, #0]
 8010852:	061f      	lsls	r7, r3, #24
 8010854:	f851 6b04 	ldr.w	r6, [r1], #4
 8010858:	d402      	bmi.n	8010860 <_printf_i+0x18c>
 801085a:	065f      	lsls	r7, r3, #25
 801085c:	bf48      	it	mi
 801085e:	b2b6      	uxthmi	r6, r6
 8010860:	07df      	lsls	r7, r3, #31
 8010862:	bf48      	it	mi
 8010864:	f043 0320 	orrmi.w	r3, r3, #32
 8010868:	6029      	str	r1, [r5, #0]
 801086a:	bf48      	it	mi
 801086c:	6023      	strmi	r3, [r4, #0]
 801086e:	b91e      	cbnz	r6, 8010878 <_printf_i+0x1a4>
 8010870:	6823      	ldr	r3, [r4, #0]
 8010872:	f023 0320 	bic.w	r3, r3, #32
 8010876:	6023      	str	r3, [r4, #0]
 8010878:	2310      	movs	r3, #16
 801087a:	e7a7      	b.n	80107cc <_printf_i+0xf8>
 801087c:	4824      	ldr	r0, [pc, #144]	; (8010910 <_printf_i+0x23c>)
 801087e:	e7e4      	b.n	801084a <_printf_i+0x176>
 8010880:	4615      	mov	r5, r2
 8010882:	e7bd      	b.n	8010800 <_printf_i+0x12c>
 8010884:	682b      	ldr	r3, [r5, #0]
 8010886:	6826      	ldr	r6, [r4, #0]
 8010888:	6961      	ldr	r1, [r4, #20]
 801088a:	1d18      	adds	r0, r3, #4
 801088c:	6028      	str	r0, [r5, #0]
 801088e:	0635      	lsls	r5, r6, #24
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	d501      	bpl.n	8010898 <_printf_i+0x1c4>
 8010894:	6019      	str	r1, [r3, #0]
 8010896:	e002      	b.n	801089e <_printf_i+0x1ca>
 8010898:	0670      	lsls	r0, r6, #25
 801089a:	d5fb      	bpl.n	8010894 <_printf_i+0x1c0>
 801089c:	8019      	strh	r1, [r3, #0]
 801089e:	2300      	movs	r3, #0
 80108a0:	6123      	str	r3, [r4, #16]
 80108a2:	4615      	mov	r5, r2
 80108a4:	e7bc      	b.n	8010820 <_printf_i+0x14c>
 80108a6:	682b      	ldr	r3, [r5, #0]
 80108a8:	1d1a      	adds	r2, r3, #4
 80108aa:	602a      	str	r2, [r5, #0]
 80108ac:	681d      	ldr	r5, [r3, #0]
 80108ae:	6862      	ldr	r2, [r4, #4]
 80108b0:	2100      	movs	r1, #0
 80108b2:	4628      	mov	r0, r5
 80108b4:	f7ef fcb4 	bl	8000220 <memchr>
 80108b8:	b108      	cbz	r0, 80108be <_printf_i+0x1ea>
 80108ba:	1b40      	subs	r0, r0, r5
 80108bc:	6060      	str	r0, [r4, #4]
 80108be:	6863      	ldr	r3, [r4, #4]
 80108c0:	6123      	str	r3, [r4, #16]
 80108c2:	2300      	movs	r3, #0
 80108c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108c8:	e7aa      	b.n	8010820 <_printf_i+0x14c>
 80108ca:	6923      	ldr	r3, [r4, #16]
 80108cc:	462a      	mov	r2, r5
 80108ce:	4649      	mov	r1, r9
 80108d0:	4640      	mov	r0, r8
 80108d2:	47d0      	blx	sl
 80108d4:	3001      	adds	r0, #1
 80108d6:	d0ad      	beq.n	8010834 <_printf_i+0x160>
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	079b      	lsls	r3, r3, #30
 80108dc:	d413      	bmi.n	8010906 <_printf_i+0x232>
 80108de:	68e0      	ldr	r0, [r4, #12]
 80108e0:	9b03      	ldr	r3, [sp, #12]
 80108e2:	4298      	cmp	r0, r3
 80108e4:	bfb8      	it	lt
 80108e6:	4618      	movlt	r0, r3
 80108e8:	e7a6      	b.n	8010838 <_printf_i+0x164>
 80108ea:	2301      	movs	r3, #1
 80108ec:	4632      	mov	r2, r6
 80108ee:	4649      	mov	r1, r9
 80108f0:	4640      	mov	r0, r8
 80108f2:	47d0      	blx	sl
 80108f4:	3001      	adds	r0, #1
 80108f6:	d09d      	beq.n	8010834 <_printf_i+0x160>
 80108f8:	3501      	adds	r5, #1
 80108fa:	68e3      	ldr	r3, [r4, #12]
 80108fc:	9903      	ldr	r1, [sp, #12]
 80108fe:	1a5b      	subs	r3, r3, r1
 8010900:	42ab      	cmp	r3, r5
 8010902:	dcf2      	bgt.n	80108ea <_printf_i+0x216>
 8010904:	e7eb      	b.n	80108de <_printf_i+0x20a>
 8010906:	2500      	movs	r5, #0
 8010908:	f104 0619 	add.w	r6, r4, #25
 801090c:	e7f5      	b.n	80108fa <_printf_i+0x226>
 801090e:	bf00      	nop
 8010910:	08013cf3 	.word	0x08013cf3
 8010914:	08013d04 	.word	0x08013d04

08010918 <_scanf_float>:
 8010918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091c:	b087      	sub	sp, #28
 801091e:	4617      	mov	r7, r2
 8010920:	9303      	str	r3, [sp, #12]
 8010922:	688b      	ldr	r3, [r1, #8]
 8010924:	1e5a      	subs	r2, r3, #1
 8010926:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801092a:	bf83      	ittte	hi
 801092c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010930:	195b      	addhi	r3, r3, r5
 8010932:	9302      	strhi	r3, [sp, #8]
 8010934:	2300      	movls	r3, #0
 8010936:	bf86      	itte	hi
 8010938:	f240 135d 	movwhi	r3, #349	; 0x15d
 801093c:	608b      	strhi	r3, [r1, #8]
 801093e:	9302      	strls	r3, [sp, #8]
 8010940:	680b      	ldr	r3, [r1, #0]
 8010942:	468b      	mov	fp, r1
 8010944:	2500      	movs	r5, #0
 8010946:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801094a:	f84b 3b1c 	str.w	r3, [fp], #28
 801094e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010952:	4680      	mov	r8, r0
 8010954:	460c      	mov	r4, r1
 8010956:	465e      	mov	r6, fp
 8010958:	46aa      	mov	sl, r5
 801095a:	46a9      	mov	r9, r5
 801095c:	9501      	str	r5, [sp, #4]
 801095e:	68a2      	ldr	r2, [r4, #8]
 8010960:	b152      	cbz	r2, 8010978 <_scanf_float+0x60>
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b4e      	cmp	r3, #78	; 0x4e
 8010968:	d864      	bhi.n	8010a34 <_scanf_float+0x11c>
 801096a:	2b40      	cmp	r3, #64	; 0x40
 801096c:	d83c      	bhi.n	80109e8 <_scanf_float+0xd0>
 801096e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010972:	b2c8      	uxtb	r0, r1
 8010974:	280e      	cmp	r0, #14
 8010976:	d93a      	bls.n	80109ee <_scanf_float+0xd6>
 8010978:	f1b9 0f00 	cmp.w	r9, #0
 801097c:	d003      	beq.n	8010986 <_scanf_float+0x6e>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010984:	6023      	str	r3, [r4, #0]
 8010986:	f10a 3aff 	add.w	sl, sl, #4294967295
 801098a:	f1ba 0f01 	cmp.w	sl, #1
 801098e:	f200 8113 	bhi.w	8010bb8 <_scanf_float+0x2a0>
 8010992:	455e      	cmp	r6, fp
 8010994:	f200 8105 	bhi.w	8010ba2 <_scanf_float+0x28a>
 8010998:	2501      	movs	r5, #1
 801099a:	4628      	mov	r0, r5
 801099c:	b007      	add	sp, #28
 801099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80109a6:	2a0d      	cmp	r2, #13
 80109a8:	d8e6      	bhi.n	8010978 <_scanf_float+0x60>
 80109aa:	a101      	add	r1, pc, #4	; (adr r1, 80109b0 <_scanf_float+0x98>)
 80109ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80109b0:	08010aef 	.word	0x08010aef
 80109b4:	08010979 	.word	0x08010979
 80109b8:	08010979 	.word	0x08010979
 80109bc:	08010979 	.word	0x08010979
 80109c0:	08010b4f 	.word	0x08010b4f
 80109c4:	08010b27 	.word	0x08010b27
 80109c8:	08010979 	.word	0x08010979
 80109cc:	08010979 	.word	0x08010979
 80109d0:	08010afd 	.word	0x08010afd
 80109d4:	08010979 	.word	0x08010979
 80109d8:	08010979 	.word	0x08010979
 80109dc:	08010979 	.word	0x08010979
 80109e0:	08010979 	.word	0x08010979
 80109e4:	08010ab5 	.word	0x08010ab5
 80109e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80109ec:	e7db      	b.n	80109a6 <_scanf_float+0x8e>
 80109ee:	290e      	cmp	r1, #14
 80109f0:	d8c2      	bhi.n	8010978 <_scanf_float+0x60>
 80109f2:	a001      	add	r0, pc, #4	; (adr r0, 80109f8 <_scanf_float+0xe0>)
 80109f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80109f8:	08010aa7 	.word	0x08010aa7
 80109fc:	08010979 	.word	0x08010979
 8010a00:	08010aa7 	.word	0x08010aa7
 8010a04:	08010b3b 	.word	0x08010b3b
 8010a08:	08010979 	.word	0x08010979
 8010a0c:	08010a55 	.word	0x08010a55
 8010a10:	08010a91 	.word	0x08010a91
 8010a14:	08010a91 	.word	0x08010a91
 8010a18:	08010a91 	.word	0x08010a91
 8010a1c:	08010a91 	.word	0x08010a91
 8010a20:	08010a91 	.word	0x08010a91
 8010a24:	08010a91 	.word	0x08010a91
 8010a28:	08010a91 	.word	0x08010a91
 8010a2c:	08010a91 	.word	0x08010a91
 8010a30:	08010a91 	.word	0x08010a91
 8010a34:	2b6e      	cmp	r3, #110	; 0x6e
 8010a36:	d809      	bhi.n	8010a4c <_scanf_float+0x134>
 8010a38:	2b60      	cmp	r3, #96	; 0x60
 8010a3a:	d8b2      	bhi.n	80109a2 <_scanf_float+0x8a>
 8010a3c:	2b54      	cmp	r3, #84	; 0x54
 8010a3e:	d077      	beq.n	8010b30 <_scanf_float+0x218>
 8010a40:	2b59      	cmp	r3, #89	; 0x59
 8010a42:	d199      	bne.n	8010978 <_scanf_float+0x60>
 8010a44:	2d07      	cmp	r5, #7
 8010a46:	d197      	bne.n	8010978 <_scanf_float+0x60>
 8010a48:	2508      	movs	r5, #8
 8010a4a:	e029      	b.n	8010aa0 <_scanf_float+0x188>
 8010a4c:	2b74      	cmp	r3, #116	; 0x74
 8010a4e:	d06f      	beq.n	8010b30 <_scanf_float+0x218>
 8010a50:	2b79      	cmp	r3, #121	; 0x79
 8010a52:	e7f6      	b.n	8010a42 <_scanf_float+0x12a>
 8010a54:	6821      	ldr	r1, [r4, #0]
 8010a56:	05c8      	lsls	r0, r1, #23
 8010a58:	d51a      	bpl.n	8010a90 <_scanf_float+0x178>
 8010a5a:	9b02      	ldr	r3, [sp, #8]
 8010a5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010a60:	6021      	str	r1, [r4, #0]
 8010a62:	f109 0901 	add.w	r9, r9, #1
 8010a66:	b11b      	cbz	r3, 8010a70 <_scanf_float+0x158>
 8010a68:	3b01      	subs	r3, #1
 8010a6a:	3201      	adds	r2, #1
 8010a6c:	9302      	str	r3, [sp, #8]
 8010a6e:	60a2      	str	r2, [r4, #8]
 8010a70:	68a3      	ldr	r3, [r4, #8]
 8010a72:	3b01      	subs	r3, #1
 8010a74:	60a3      	str	r3, [r4, #8]
 8010a76:	6923      	ldr	r3, [r4, #16]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	607b      	str	r3, [r7, #4]
 8010a84:	f340 8084 	ble.w	8010b90 <_scanf_float+0x278>
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	603b      	str	r3, [r7, #0]
 8010a8e:	e766      	b.n	801095e <_scanf_float+0x46>
 8010a90:	eb1a 0f05 	cmn.w	sl, r5
 8010a94:	f47f af70 	bne.w	8010978 <_scanf_float+0x60>
 8010a98:	6822      	ldr	r2, [r4, #0]
 8010a9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010a9e:	6022      	str	r2, [r4, #0]
 8010aa0:	f806 3b01 	strb.w	r3, [r6], #1
 8010aa4:	e7e4      	b.n	8010a70 <_scanf_float+0x158>
 8010aa6:	6822      	ldr	r2, [r4, #0]
 8010aa8:	0610      	lsls	r0, r2, #24
 8010aaa:	f57f af65 	bpl.w	8010978 <_scanf_float+0x60>
 8010aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ab2:	e7f4      	b.n	8010a9e <_scanf_float+0x186>
 8010ab4:	f1ba 0f00 	cmp.w	sl, #0
 8010ab8:	d10e      	bne.n	8010ad8 <_scanf_float+0x1c0>
 8010aba:	f1b9 0f00 	cmp.w	r9, #0
 8010abe:	d10e      	bne.n	8010ade <_scanf_float+0x1c6>
 8010ac0:	6822      	ldr	r2, [r4, #0]
 8010ac2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010ac6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010aca:	d108      	bne.n	8010ade <_scanf_float+0x1c6>
 8010acc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010ad0:	6022      	str	r2, [r4, #0]
 8010ad2:	f04f 0a01 	mov.w	sl, #1
 8010ad6:	e7e3      	b.n	8010aa0 <_scanf_float+0x188>
 8010ad8:	f1ba 0f02 	cmp.w	sl, #2
 8010adc:	d055      	beq.n	8010b8a <_scanf_float+0x272>
 8010ade:	2d01      	cmp	r5, #1
 8010ae0:	d002      	beq.n	8010ae8 <_scanf_float+0x1d0>
 8010ae2:	2d04      	cmp	r5, #4
 8010ae4:	f47f af48 	bne.w	8010978 <_scanf_float+0x60>
 8010ae8:	3501      	adds	r5, #1
 8010aea:	b2ed      	uxtb	r5, r5
 8010aec:	e7d8      	b.n	8010aa0 <_scanf_float+0x188>
 8010aee:	f1ba 0f01 	cmp.w	sl, #1
 8010af2:	f47f af41 	bne.w	8010978 <_scanf_float+0x60>
 8010af6:	f04f 0a02 	mov.w	sl, #2
 8010afa:	e7d1      	b.n	8010aa0 <_scanf_float+0x188>
 8010afc:	b97d      	cbnz	r5, 8010b1e <_scanf_float+0x206>
 8010afe:	f1b9 0f00 	cmp.w	r9, #0
 8010b02:	f47f af3c 	bne.w	801097e <_scanf_float+0x66>
 8010b06:	6822      	ldr	r2, [r4, #0]
 8010b08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010b0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010b10:	f47f af39 	bne.w	8010986 <_scanf_float+0x6e>
 8010b14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b18:	6022      	str	r2, [r4, #0]
 8010b1a:	2501      	movs	r5, #1
 8010b1c:	e7c0      	b.n	8010aa0 <_scanf_float+0x188>
 8010b1e:	2d03      	cmp	r5, #3
 8010b20:	d0e2      	beq.n	8010ae8 <_scanf_float+0x1d0>
 8010b22:	2d05      	cmp	r5, #5
 8010b24:	e7de      	b.n	8010ae4 <_scanf_float+0x1cc>
 8010b26:	2d02      	cmp	r5, #2
 8010b28:	f47f af26 	bne.w	8010978 <_scanf_float+0x60>
 8010b2c:	2503      	movs	r5, #3
 8010b2e:	e7b7      	b.n	8010aa0 <_scanf_float+0x188>
 8010b30:	2d06      	cmp	r5, #6
 8010b32:	f47f af21 	bne.w	8010978 <_scanf_float+0x60>
 8010b36:	2507      	movs	r5, #7
 8010b38:	e7b2      	b.n	8010aa0 <_scanf_float+0x188>
 8010b3a:	6822      	ldr	r2, [r4, #0]
 8010b3c:	0591      	lsls	r1, r2, #22
 8010b3e:	f57f af1b 	bpl.w	8010978 <_scanf_float+0x60>
 8010b42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010b46:	6022      	str	r2, [r4, #0]
 8010b48:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b4c:	e7a8      	b.n	8010aa0 <_scanf_float+0x188>
 8010b4e:	6822      	ldr	r2, [r4, #0]
 8010b50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010b54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010b58:	d006      	beq.n	8010b68 <_scanf_float+0x250>
 8010b5a:	0550      	lsls	r0, r2, #21
 8010b5c:	f57f af0c 	bpl.w	8010978 <_scanf_float+0x60>
 8010b60:	f1b9 0f00 	cmp.w	r9, #0
 8010b64:	f43f af0f 	beq.w	8010986 <_scanf_float+0x6e>
 8010b68:	0591      	lsls	r1, r2, #22
 8010b6a:	bf58      	it	pl
 8010b6c:	9901      	ldrpl	r1, [sp, #4]
 8010b6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b72:	bf58      	it	pl
 8010b74:	eba9 0101 	subpl.w	r1, r9, r1
 8010b78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010b7c:	bf58      	it	pl
 8010b7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010b82:	6022      	str	r2, [r4, #0]
 8010b84:	f04f 0900 	mov.w	r9, #0
 8010b88:	e78a      	b.n	8010aa0 <_scanf_float+0x188>
 8010b8a:	f04f 0a03 	mov.w	sl, #3
 8010b8e:	e787      	b.n	8010aa0 <_scanf_float+0x188>
 8010b90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010b94:	4639      	mov	r1, r7
 8010b96:	4640      	mov	r0, r8
 8010b98:	4798      	blx	r3
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	f43f aedf 	beq.w	801095e <_scanf_float+0x46>
 8010ba0:	e6ea      	b.n	8010978 <_scanf_float+0x60>
 8010ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010baa:	463a      	mov	r2, r7
 8010bac:	4640      	mov	r0, r8
 8010bae:	4798      	blx	r3
 8010bb0:	6923      	ldr	r3, [r4, #16]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	6123      	str	r3, [r4, #16]
 8010bb6:	e6ec      	b.n	8010992 <_scanf_float+0x7a>
 8010bb8:	1e6b      	subs	r3, r5, #1
 8010bba:	2b06      	cmp	r3, #6
 8010bbc:	d825      	bhi.n	8010c0a <_scanf_float+0x2f2>
 8010bbe:	2d02      	cmp	r5, #2
 8010bc0:	d836      	bhi.n	8010c30 <_scanf_float+0x318>
 8010bc2:	455e      	cmp	r6, fp
 8010bc4:	f67f aee8 	bls.w	8010998 <_scanf_float+0x80>
 8010bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010bd0:	463a      	mov	r2, r7
 8010bd2:	4640      	mov	r0, r8
 8010bd4:	4798      	blx	r3
 8010bd6:	6923      	ldr	r3, [r4, #16]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	6123      	str	r3, [r4, #16]
 8010bdc:	e7f1      	b.n	8010bc2 <_scanf_float+0x2aa>
 8010bde:	9802      	ldr	r0, [sp, #8]
 8010be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010be4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010be8:	9002      	str	r0, [sp, #8]
 8010bea:	463a      	mov	r2, r7
 8010bec:	4640      	mov	r0, r8
 8010bee:	4798      	blx	r3
 8010bf0:	6923      	ldr	r3, [r4, #16]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	6123      	str	r3, [r4, #16]
 8010bf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bfa:	fa5f fa8a 	uxtb.w	sl, sl
 8010bfe:	f1ba 0f02 	cmp.w	sl, #2
 8010c02:	d1ec      	bne.n	8010bde <_scanf_float+0x2c6>
 8010c04:	3d03      	subs	r5, #3
 8010c06:	b2ed      	uxtb	r5, r5
 8010c08:	1b76      	subs	r6, r6, r5
 8010c0a:	6823      	ldr	r3, [r4, #0]
 8010c0c:	05da      	lsls	r2, r3, #23
 8010c0e:	d52f      	bpl.n	8010c70 <_scanf_float+0x358>
 8010c10:	055b      	lsls	r3, r3, #21
 8010c12:	d510      	bpl.n	8010c36 <_scanf_float+0x31e>
 8010c14:	455e      	cmp	r6, fp
 8010c16:	f67f aebf 	bls.w	8010998 <_scanf_float+0x80>
 8010c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010c22:	463a      	mov	r2, r7
 8010c24:	4640      	mov	r0, r8
 8010c26:	4798      	blx	r3
 8010c28:	6923      	ldr	r3, [r4, #16]
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	6123      	str	r3, [r4, #16]
 8010c2e:	e7f1      	b.n	8010c14 <_scanf_float+0x2fc>
 8010c30:	46aa      	mov	sl, r5
 8010c32:	9602      	str	r6, [sp, #8]
 8010c34:	e7df      	b.n	8010bf6 <_scanf_float+0x2de>
 8010c36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010c3a:	6923      	ldr	r3, [r4, #16]
 8010c3c:	2965      	cmp	r1, #101	; 0x65
 8010c3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c42:	f106 35ff 	add.w	r5, r6, #4294967295
 8010c46:	6123      	str	r3, [r4, #16]
 8010c48:	d00c      	beq.n	8010c64 <_scanf_float+0x34c>
 8010c4a:	2945      	cmp	r1, #69	; 0x45
 8010c4c:	d00a      	beq.n	8010c64 <_scanf_float+0x34c>
 8010c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c52:	463a      	mov	r2, r7
 8010c54:	4640      	mov	r0, r8
 8010c56:	4798      	blx	r3
 8010c58:	6923      	ldr	r3, [r4, #16]
 8010c5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	1eb5      	subs	r5, r6, #2
 8010c62:	6123      	str	r3, [r4, #16]
 8010c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c68:	463a      	mov	r2, r7
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	4798      	blx	r3
 8010c6e:	462e      	mov	r6, r5
 8010c70:	6825      	ldr	r5, [r4, #0]
 8010c72:	f015 0510 	ands.w	r5, r5, #16
 8010c76:	d158      	bne.n	8010d2a <_scanf_float+0x412>
 8010c78:	7035      	strb	r5, [r6, #0]
 8010c7a:	6823      	ldr	r3, [r4, #0]
 8010c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c84:	d11c      	bne.n	8010cc0 <_scanf_float+0x3a8>
 8010c86:	9b01      	ldr	r3, [sp, #4]
 8010c88:	454b      	cmp	r3, r9
 8010c8a:	eba3 0209 	sub.w	r2, r3, r9
 8010c8e:	d124      	bne.n	8010cda <_scanf_float+0x3c2>
 8010c90:	2200      	movs	r2, #0
 8010c92:	4659      	mov	r1, fp
 8010c94:	4640      	mov	r0, r8
 8010c96:	f7ff f8df 	bl	800fe58 <_strtod_r>
 8010c9a:	9b03      	ldr	r3, [sp, #12]
 8010c9c:	6821      	ldr	r1, [r4, #0]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f011 0f02 	tst.w	r1, #2
 8010ca4:	ec57 6b10 	vmov	r6, r7, d0
 8010ca8:	f103 0204 	add.w	r2, r3, #4
 8010cac:	d020      	beq.n	8010cf0 <_scanf_float+0x3d8>
 8010cae:	9903      	ldr	r1, [sp, #12]
 8010cb0:	600a      	str	r2, [r1, #0]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	e9c3 6700 	strd	r6, r7, [r3]
 8010cb8:	68e3      	ldr	r3, [r4, #12]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	60e3      	str	r3, [r4, #12]
 8010cbe:	e66c      	b.n	801099a <_scanf_float+0x82>
 8010cc0:	9b04      	ldr	r3, [sp, #16]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d0e4      	beq.n	8010c90 <_scanf_float+0x378>
 8010cc6:	9905      	ldr	r1, [sp, #20]
 8010cc8:	230a      	movs	r3, #10
 8010cca:	462a      	mov	r2, r5
 8010ccc:	3101      	adds	r1, #1
 8010cce:	4640      	mov	r0, r8
 8010cd0:	f7ff f9b0 	bl	8010034 <_strtol_r>
 8010cd4:	9b04      	ldr	r3, [sp, #16]
 8010cd6:	9e05      	ldr	r6, [sp, #20]
 8010cd8:	1ac2      	subs	r2, r0, r3
 8010cda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010cde:	429e      	cmp	r6, r3
 8010ce0:	bf28      	it	cs
 8010ce2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010ce6:	4912      	ldr	r1, [pc, #72]	; (8010d30 <_scanf_float+0x418>)
 8010ce8:	4630      	mov	r0, r6
 8010cea:	f000 f91b 	bl	8010f24 <siprintf>
 8010cee:	e7cf      	b.n	8010c90 <_scanf_float+0x378>
 8010cf0:	f011 0f04 	tst.w	r1, #4
 8010cf4:	9903      	ldr	r1, [sp, #12]
 8010cf6:	600a      	str	r2, [r1, #0]
 8010cf8:	d1db      	bne.n	8010cb2 <_scanf_float+0x39a>
 8010cfa:	f8d3 8000 	ldr.w	r8, [r3]
 8010cfe:	ee10 2a10 	vmov	r2, s0
 8010d02:	ee10 0a10 	vmov	r0, s0
 8010d06:	463b      	mov	r3, r7
 8010d08:	4639      	mov	r1, r7
 8010d0a:	f7ef ff37 	bl	8000b7c <__aeabi_dcmpun>
 8010d0e:	b128      	cbz	r0, 8010d1c <_scanf_float+0x404>
 8010d10:	4808      	ldr	r0, [pc, #32]	; (8010d34 <_scanf_float+0x41c>)
 8010d12:	f000 fa9d 	bl	8011250 <nanf>
 8010d16:	ed88 0a00 	vstr	s0, [r8]
 8010d1a:	e7cd      	b.n	8010cb8 <_scanf_float+0x3a0>
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	4639      	mov	r1, r7
 8010d20:	f7ef ff8a 	bl	8000c38 <__aeabi_d2f>
 8010d24:	f8c8 0000 	str.w	r0, [r8]
 8010d28:	e7c6      	b.n	8010cb8 <_scanf_float+0x3a0>
 8010d2a:	2500      	movs	r5, #0
 8010d2c:	e635      	b.n	801099a <_scanf_float+0x82>
 8010d2e:	bf00      	nop
 8010d30:	08013d15 	.word	0x08013d15
 8010d34:	08013dce 	.word	0x08013dce

08010d38 <std>:
 8010d38:	2300      	movs	r3, #0
 8010d3a:	b510      	push	{r4, lr}
 8010d3c:	4604      	mov	r4, r0
 8010d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d46:	6083      	str	r3, [r0, #8]
 8010d48:	8181      	strh	r1, [r0, #12]
 8010d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8010d4c:	81c2      	strh	r2, [r0, #14]
 8010d4e:	6183      	str	r3, [r0, #24]
 8010d50:	4619      	mov	r1, r3
 8010d52:	2208      	movs	r2, #8
 8010d54:	305c      	adds	r0, #92	; 0x5c
 8010d56:	f000 f948 	bl	8010fea <memset>
 8010d5a:	4b0d      	ldr	r3, [pc, #52]	; (8010d90 <std+0x58>)
 8010d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d5e:	4b0d      	ldr	r3, [pc, #52]	; (8010d94 <std+0x5c>)
 8010d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d62:	4b0d      	ldr	r3, [pc, #52]	; (8010d98 <std+0x60>)
 8010d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d66:	4b0d      	ldr	r3, [pc, #52]	; (8010d9c <std+0x64>)
 8010d68:	6323      	str	r3, [r4, #48]	; 0x30
 8010d6a:	4b0d      	ldr	r3, [pc, #52]	; (8010da0 <std+0x68>)
 8010d6c:	6224      	str	r4, [r4, #32]
 8010d6e:	429c      	cmp	r4, r3
 8010d70:	d006      	beq.n	8010d80 <std+0x48>
 8010d72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010d76:	4294      	cmp	r4, r2
 8010d78:	d002      	beq.n	8010d80 <std+0x48>
 8010d7a:	33d0      	adds	r3, #208	; 0xd0
 8010d7c:	429c      	cmp	r4, r3
 8010d7e:	d105      	bne.n	8010d8c <std+0x54>
 8010d80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d88:	f000 ba40 	b.w	801120c <__retarget_lock_init_recursive>
 8010d8c:	bd10      	pop	{r4, pc}
 8010d8e:	bf00      	nop
 8010d90:	08010f65 	.word	0x08010f65
 8010d94:	08010f87 	.word	0x08010f87
 8010d98:	08010fbf 	.word	0x08010fbf
 8010d9c:	08010fe3 	.word	0x08010fe3
 8010da0:	20001dbc 	.word	0x20001dbc

08010da4 <stdio_exit_handler>:
 8010da4:	4a02      	ldr	r2, [pc, #8]	; (8010db0 <stdio_exit_handler+0xc>)
 8010da6:	4903      	ldr	r1, [pc, #12]	; (8010db4 <stdio_exit_handler+0x10>)
 8010da8:	4803      	ldr	r0, [pc, #12]	; (8010db8 <stdio_exit_handler+0x14>)
 8010daa:	f000 b869 	b.w	8010e80 <_fwalk_sglue>
 8010dae:	bf00      	nop
 8010db0:	20000184 	.word	0x20000184
 8010db4:	08013429 	.word	0x08013429
 8010db8:	200002fc 	.word	0x200002fc

08010dbc <cleanup_stdio>:
 8010dbc:	6841      	ldr	r1, [r0, #4]
 8010dbe:	4b0c      	ldr	r3, [pc, #48]	; (8010df0 <cleanup_stdio+0x34>)
 8010dc0:	4299      	cmp	r1, r3
 8010dc2:	b510      	push	{r4, lr}
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	d001      	beq.n	8010dcc <cleanup_stdio+0x10>
 8010dc8:	f002 fb2e 	bl	8013428 <_fflush_r>
 8010dcc:	68a1      	ldr	r1, [r4, #8]
 8010dce:	4b09      	ldr	r3, [pc, #36]	; (8010df4 <cleanup_stdio+0x38>)
 8010dd0:	4299      	cmp	r1, r3
 8010dd2:	d002      	beq.n	8010dda <cleanup_stdio+0x1e>
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f002 fb27 	bl	8013428 <_fflush_r>
 8010dda:	68e1      	ldr	r1, [r4, #12]
 8010ddc:	4b06      	ldr	r3, [pc, #24]	; (8010df8 <cleanup_stdio+0x3c>)
 8010dde:	4299      	cmp	r1, r3
 8010de0:	d004      	beq.n	8010dec <cleanup_stdio+0x30>
 8010de2:	4620      	mov	r0, r4
 8010de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010de8:	f002 bb1e 	b.w	8013428 <_fflush_r>
 8010dec:	bd10      	pop	{r4, pc}
 8010dee:	bf00      	nop
 8010df0:	20001dbc 	.word	0x20001dbc
 8010df4:	20001e24 	.word	0x20001e24
 8010df8:	20001e8c 	.word	0x20001e8c

08010dfc <global_stdio_init.part.0>:
 8010dfc:	b510      	push	{r4, lr}
 8010dfe:	4b0b      	ldr	r3, [pc, #44]	; (8010e2c <global_stdio_init.part.0+0x30>)
 8010e00:	4c0b      	ldr	r4, [pc, #44]	; (8010e30 <global_stdio_init.part.0+0x34>)
 8010e02:	4a0c      	ldr	r2, [pc, #48]	; (8010e34 <global_stdio_init.part.0+0x38>)
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	4620      	mov	r0, r4
 8010e08:	2200      	movs	r2, #0
 8010e0a:	2104      	movs	r1, #4
 8010e0c:	f7ff ff94 	bl	8010d38 <std>
 8010e10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010e14:	2201      	movs	r2, #1
 8010e16:	2109      	movs	r1, #9
 8010e18:	f7ff ff8e 	bl	8010d38 <std>
 8010e1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010e20:	2202      	movs	r2, #2
 8010e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e26:	2112      	movs	r1, #18
 8010e28:	f7ff bf86 	b.w	8010d38 <std>
 8010e2c:	20001ef4 	.word	0x20001ef4
 8010e30:	20001dbc 	.word	0x20001dbc
 8010e34:	08010da5 	.word	0x08010da5

08010e38 <__sfp_lock_acquire>:
 8010e38:	4801      	ldr	r0, [pc, #4]	; (8010e40 <__sfp_lock_acquire+0x8>)
 8010e3a:	f000 b9e8 	b.w	801120e <__retarget_lock_acquire_recursive>
 8010e3e:	bf00      	nop
 8010e40:	20001efd 	.word	0x20001efd

08010e44 <__sfp_lock_release>:
 8010e44:	4801      	ldr	r0, [pc, #4]	; (8010e4c <__sfp_lock_release+0x8>)
 8010e46:	f000 b9e3 	b.w	8011210 <__retarget_lock_release_recursive>
 8010e4a:	bf00      	nop
 8010e4c:	20001efd 	.word	0x20001efd

08010e50 <__sinit>:
 8010e50:	b510      	push	{r4, lr}
 8010e52:	4604      	mov	r4, r0
 8010e54:	f7ff fff0 	bl	8010e38 <__sfp_lock_acquire>
 8010e58:	6a23      	ldr	r3, [r4, #32]
 8010e5a:	b11b      	cbz	r3, 8010e64 <__sinit+0x14>
 8010e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e60:	f7ff bff0 	b.w	8010e44 <__sfp_lock_release>
 8010e64:	4b04      	ldr	r3, [pc, #16]	; (8010e78 <__sinit+0x28>)
 8010e66:	6223      	str	r3, [r4, #32]
 8010e68:	4b04      	ldr	r3, [pc, #16]	; (8010e7c <__sinit+0x2c>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1f5      	bne.n	8010e5c <__sinit+0xc>
 8010e70:	f7ff ffc4 	bl	8010dfc <global_stdio_init.part.0>
 8010e74:	e7f2      	b.n	8010e5c <__sinit+0xc>
 8010e76:	bf00      	nop
 8010e78:	08010dbd 	.word	0x08010dbd
 8010e7c:	20001ef4 	.word	0x20001ef4

08010e80 <_fwalk_sglue>:
 8010e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e84:	4607      	mov	r7, r0
 8010e86:	4688      	mov	r8, r1
 8010e88:	4614      	mov	r4, r2
 8010e8a:	2600      	movs	r6, #0
 8010e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e90:	f1b9 0901 	subs.w	r9, r9, #1
 8010e94:	d505      	bpl.n	8010ea2 <_fwalk_sglue+0x22>
 8010e96:	6824      	ldr	r4, [r4, #0]
 8010e98:	2c00      	cmp	r4, #0
 8010e9a:	d1f7      	bne.n	8010e8c <_fwalk_sglue+0xc>
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ea2:	89ab      	ldrh	r3, [r5, #12]
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d907      	bls.n	8010eb8 <_fwalk_sglue+0x38>
 8010ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010eac:	3301      	adds	r3, #1
 8010eae:	d003      	beq.n	8010eb8 <_fwalk_sglue+0x38>
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	4638      	mov	r0, r7
 8010eb4:	47c0      	blx	r8
 8010eb6:	4306      	orrs	r6, r0
 8010eb8:	3568      	adds	r5, #104	; 0x68
 8010eba:	e7e9      	b.n	8010e90 <_fwalk_sglue+0x10>

08010ebc <sniprintf>:
 8010ebc:	b40c      	push	{r2, r3}
 8010ebe:	b530      	push	{r4, r5, lr}
 8010ec0:	4b17      	ldr	r3, [pc, #92]	; (8010f20 <sniprintf+0x64>)
 8010ec2:	1e0c      	subs	r4, r1, #0
 8010ec4:	681d      	ldr	r5, [r3, #0]
 8010ec6:	b09d      	sub	sp, #116	; 0x74
 8010ec8:	da08      	bge.n	8010edc <sniprintf+0x20>
 8010eca:	238b      	movs	r3, #139	; 0x8b
 8010ecc:	602b      	str	r3, [r5, #0]
 8010ece:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed2:	b01d      	add	sp, #116	; 0x74
 8010ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ed8:	b002      	add	sp, #8
 8010eda:	4770      	bx	lr
 8010edc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010ee0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ee4:	bf14      	ite	ne
 8010ee6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010eea:	4623      	moveq	r3, r4
 8010eec:	9304      	str	r3, [sp, #16]
 8010eee:	9307      	str	r3, [sp, #28]
 8010ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ef4:	9002      	str	r0, [sp, #8]
 8010ef6:	9006      	str	r0, [sp, #24]
 8010ef8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010efc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010efe:	ab21      	add	r3, sp, #132	; 0x84
 8010f00:	a902      	add	r1, sp, #8
 8010f02:	4628      	mov	r0, r5
 8010f04:	9301      	str	r3, [sp, #4]
 8010f06:	f002 f90b 	bl	8013120 <_svfiprintf_r>
 8010f0a:	1c43      	adds	r3, r0, #1
 8010f0c:	bfbc      	itt	lt
 8010f0e:	238b      	movlt	r3, #139	; 0x8b
 8010f10:	602b      	strlt	r3, [r5, #0]
 8010f12:	2c00      	cmp	r4, #0
 8010f14:	d0dd      	beq.n	8010ed2 <sniprintf+0x16>
 8010f16:	9b02      	ldr	r3, [sp, #8]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	701a      	strb	r2, [r3, #0]
 8010f1c:	e7d9      	b.n	8010ed2 <sniprintf+0x16>
 8010f1e:	bf00      	nop
 8010f20:	20000348 	.word	0x20000348

08010f24 <siprintf>:
 8010f24:	b40e      	push	{r1, r2, r3}
 8010f26:	b500      	push	{lr}
 8010f28:	b09c      	sub	sp, #112	; 0x70
 8010f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8010f2c:	9002      	str	r0, [sp, #8]
 8010f2e:	9006      	str	r0, [sp, #24]
 8010f30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f34:	4809      	ldr	r0, [pc, #36]	; (8010f5c <siprintf+0x38>)
 8010f36:	9107      	str	r1, [sp, #28]
 8010f38:	9104      	str	r1, [sp, #16]
 8010f3a:	4909      	ldr	r1, [pc, #36]	; (8010f60 <siprintf+0x3c>)
 8010f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f40:	9105      	str	r1, [sp, #20]
 8010f42:	6800      	ldr	r0, [r0, #0]
 8010f44:	9301      	str	r3, [sp, #4]
 8010f46:	a902      	add	r1, sp, #8
 8010f48:	f002 f8ea 	bl	8013120 <_svfiprintf_r>
 8010f4c:	9b02      	ldr	r3, [sp, #8]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	701a      	strb	r2, [r3, #0]
 8010f52:	b01c      	add	sp, #112	; 0x70
 8010f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f58:	b003      	add	sp, #12
 8010f5a:	4770      	bx	lr
 8010f5c:	20000348 	.word	0x20000348
 8010f60:	ffff0208 	.word	0xffff0208

08010f64 <__sread>:
 8010f64:	b510      	push	{r4, lr}
 8010f66:	460c      	mov	r4, r1
 8010f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f6c:	f000 f8f0 	bl	8011150 <_read_r>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	bfab      	itete	ge
 8010f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f76:	89a3      	ldrhlt	r3, [r4, #12]
 8010f78:	181b      	addge	r3, r3, r0
 8010f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f7e:	bfac      	ite	ge
 8010f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f82:	81a3      	strhlt	r3, [r4, #12]
 8010f84:	bd10      	pop	{r4, pc}

08010f86 <__swrite>:
 8010f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f8a:	461f      	mov	r7, r3
 8010f8c:	898b      	ldrh	r3, [r1, #12]
 8010f8e:	05db      	lsls	r3, r3, #23
 8010f90:	4605      	mov	r5, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	4616      	mov	r6, r2
 8010f96:	d505      	bpl.n	8010fa4 <__swrite+0x1e>
 8010f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f000 f8c4 	bl	801112c <_lseek_r>
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fae:	81a3      	strh	r3, [r4, #12]
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	463b      	mov	r3, r7
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	f000 b8eb 	b.w	8011194 <_write_r>

08010fbe <__sseek>:
 8010fbe:	b510      	push	{r4, lr}
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc6:	f000 f8b1 	bl	801112c <_lseek_r>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	89a3      	ldrh	r3, [r4, #12]
 8010fce:	bf15      	itete	ne
 8010fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010fda:	81a3      	strheq	r3, [r4, #12]
 8010fdc:	bf18      	it	ne
 8010fde:	81a3      	strhne	r3, [r4, #12]
 8010fe0:	bd10      	pop	{r4, pc}

08010fe2 <__sclose>:
 8010fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe6:	f000 b891 	b.w	801110c <_close_r>

08010fea <memset>:
 8010fea:	4402      	add	r2, r0
 8010fec:	4603      	mov	r3, r0
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d100      	bne.n	8010ff4 <memset+0xa>
 8010ff2:	4770      	bx	lr
 8010ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8010ff8:	e7f9      	b.n	8010fee <memset+0x4>

08010ffa <strncmp>:
 8010ffa:	b510      	push	{r4, lr}
 8010ffc:	b16a      	cbz	r2, 801101a <strncmp+0x20>
 8010ffe:	3901      	subs	r1, #1
 8011000:	1884      	adds	r4, r0, r2
 8011002:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011006:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801100a:	429a      	cmp	r2, r3
 801100c:	d103      	bne.n	8011016 <strncmp+0x1c>
 801100e:	42a0      	cmp	r0, r4
 8011010:	d001      	beq.n	8011016 <strncmp+0x1c>
 8011012:	2a00      	cmp	r2, #0
 8011014:	d1f5      	bne.n	8011002 <strncmp+0x8>
 8011016:	1ad0      	subs	r0, r2, r3
 8011018:	bd10      	pop	{r4, pc}
 801101a:	4610      	mov	r0, r2
 801101c:	e7fc      	b.n	8011018 <strncmp+0x1e>
	...

08011020 <strtok>:
 8011020:	4b16      	ldr	r3, [pc, #88]	; (801107c <strtok+0x5c>)
 8011022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011024:	681e      	ldr	r6, [r3, #0]
 8011026:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011028:	4605      	mov	r5, r0
 801102a:	b9fc      	cbnz	r4, 801106c <strtok+0x4c>
 801102c:	2050      	movs	r0, #80	; 0x50
 801102e:	9101      	str	r1, [sp, #4]
 8011030:	f7fe f84a 	bl	800f0c8 <malloc>
 8011034:	9901      	ldr	r1, [sp, #4]
 8011036:	6470      	str	r0, [r6, #68]	; 0x44
 8011038:	4602      	mov	r2, r0
 801103a:	b920      	cbnz	r0, 8011046 <strtok+0x26>
 801103c:	4b10      	ldr	r3, [pc, #64]	; (8011080 <strtok+0x60>)
 801103e:	4811      	ldr	r0, [pc, #68]	; (8011084 <strtok+0x64>)
 8011040:	215b      	movs	r1, #91	; 0x5b
 8011042:	f000 f90b 	bl	801125c <__assert_func>
 8011046:	e9c0 4400 	strd	r4, r4, [r0]
 801104a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801104e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011052:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011056:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801105a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801105e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011062:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011066:	6184      	str	r4, [r0, #24]
 8011068:	7704      	strb	r4, [r0, #28]
 801106a:	6244      	str	r4, [r0, #36]	; 0x24
 801106c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801106e:	2301      	movs	r3, #1
 8011070:	4628      	mov	r0, r5
 8011072:	b002      	add	sp, #8
 8011074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011078:	f000 b806 	b.w	8011088 <__strtok_r>
 801107c:	20000348 	.word	0x20000348
 8011080:	08013d1a 	.word	0x08013d1a
 8011084:	08013d31 	.word	0x08013d31

08011088 <__strtok_r>:
 8011088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801108a:	b908      	cbnz	r0, 8011090 <__strtok_r+0x8>
 801108c:	6810      	ldr	r0, [r2, #0]
 801108e:	b188      	cbz	r0, 80110b4 <__strtok_r+0x2c>
 8011090:	4604      	mov	r4, r0
 8011092:	4620      	mov	r0, r4
 8011094:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011098:	460f      	mov	r7, r1
 801109a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801109e:	b91e      	cbnz	r6, 80110a8 <__strtok_r+0x20>
 80110a0:	b965      	cbnz	r5, 80110bc <__strtok_r+0x34>
 80110a2:	6015      	str	r5, [r2, #0]
 80110a4:	4628      	mov	r0, r5
 80110a6:	e005      	b.n	80110b4 <__strtok_r+0x2c>
 80110a8:	42b5      	cmp	r5, r6
 80110aa:	d1f6      	bne.n	801109a <__strtok_r+0x12>
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d1f0      	bne.n	8011092 <__strtok_r+0xa>
 80110b0:	6014      	str	r4, [r2, #0]
 80110b2:	7003      	strb	r3, [r0, #0]
 80110b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110b6:	461c      	mov	r4, r3
 80110b8:	e00c      	b.n	80110d4 <__strtok_r+0x4c>
 80110ba:	b915      	cbnz	r5, 80110c2 <__strtok_r+0x3a>
 80110bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80110c0:	460e      	mov	r6, r1
 80110c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80110c6:	42ab      	cmp	r3, r5
 80110c8:	d1f7      	bne.n	80110ba <__strtok_r+0x32>
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d0f3      	beq.n	80110b6 <__strtok_r+0x2e>
 80110ce:	2300      	movs	r3, #0
 80110d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80110d4:	6014      	str	r4, [r2, #0]
 80110d6:	e7ed      	b.n	80110b4 <__strtok_r+0x2c>

080110d8 <strstr>:
 80110d8:	780a      	ldrb	r2, [r1, #0]
 80110da:	b570      	push	{r4, r5, r6, lr}
 80110dc:	b96a      	cbnz	r2, 80110fa <strstr+0x22>
 80110de:	bd70      	pop	{r4, r5, r6, pc}
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d109      	bne.n	80110f8 <strstr+0x20>
 80110e4:	460c      	mov	r4, r1
 80110e6:	4605      	mov	r5, r0
 80110e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d0f6      	beq.n	80110de <strstr+0x6>
 80110f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80110f4:	429e      	cmp	r6, r3
 80110f6:	d0f7      	beq.n	80110e8 <strstr+0x10>
 80110f8:	3001      	adds	r0, #1
 80110fa:	7803      	ldrb	r3, [r0, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d1ef      	bne.n	80110e0 <strstr+0x8>
 8011100:	4618      	mov	r0, r3
 8011102:	e7ec      	b.n	80110de <strstr+0x6>

08011104 <_localeconv_r>:
 8011104:	4800      	ldr	r0, [pc, #0]	; (8011108 <_localeconv_r+0x4>)
 8011106:	4770      	bx	lr
 8011108:	20000280 	.word	0x20000280

0801110c <_close_r>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	4d06      	ldr	r5, [pc, #24]	; (8011128 <_close_r+0x1c>)
 8011110:	2300      	movs	r3, #0
 8011112:	4604      	mov	r4, r0
 8011114:	4608      	mov	r0, r1
 8011116:	602b      	str	r3, [r5, #0]
 8011118:	f7f1 f847 	bl	80021aa <_close>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_close_r+0x1a>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_close_r+0x1a>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	20001ef8 	.word	0x20001ef8

0801112c <_lseek_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	4d07      	ldr	r5, [pc, #28]	; (801114c <_lseek_r+0x20>)
 8011130:	4604      	mov	r4, r0
 8011132:	4608      	mov	r0, r1
 8011134:	4611      	mov	r1, r2
 8011136:	2200      	movs	r2, #0
 8011138:	602a      	str	r2, [r5, #0]
 801113a:	461a      	mov	r2, r3
 801113c:	f7f1 f85c 	bl	80021f8 <_lseek>
 8011140:	1c43      	adds	r3, r0, #1
 8011142:	d102      	bne.n	801114a <_lseek_r+0x1e>
 8011144:	682b      	ldr	r3, [r5, #0]
 8011146:	b103      	cbz	r3, 801114a <_lseek_r+0x1e>
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	bd38      	pop	{r3, r4, r5, pc}
 801114c:	20001ef8 	.word	0x20001ef8

08011150 <_read_r>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	4d07      	ldr	r5, [pc, #28]	; (8011170 <_read_r+0x20>)
 8011154:	4604      	mov	r4, r0
 8011156:	4608      	mov	r0, r1
 8011158:	4611      	mov	r1, r2
 801115a:	2200      	movs	r2, #0
 801115c:	602a      	str	r2, [r5, #0]
 801115e:	461a      	mov	r2, r3
 8011160:	f7f0 ffea 	bl	8002138 <_read>
 8011164:	1c43      	adds	r3, r0, #1
 8011166:	d102      	bne.n	801116e <_read_r+0x1e>
 8011168:	682b      	ldr	r3, [r5, #0]
 801116a:	b103      	cbz	r3, 801116e <_read_r+0x1e>
 801116c:	6023      	str	r3, [r4, #0]
 801116e:	bd38      	pop	{r3, r4, r5, pc}
 8011170:	20001ef8 	.word	0x20001ef8

08011174 <_sbrk_r>:
 8011174:	b538      	push	{r3, r4, r5, lr}
 8011176:	4d06      	ldr	r5, [pc, #24]	; (8011190 <_sbrk_r+0x1c>)
 8011178:	2300      	movs	r3, #0
 801117a:	4604      	mov	r4, r0
 801117c:	4608      	mov	r0, r1
 801117e:	602b      	str	r3, [r5, #0]
 8011180:	f7f1 f848 	bl	8002214 <_sbrk>
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	d102      	bne.n	801118e <_sbrk_r+0x1a>
 8011188:	682b      	ldr	r3, [r5, #0]
 801118a:	b103      	cbz	r3, 801118e <_sbrk_r+0x1a>
 801118c:	6023      	str	r3, [r4, #0]
 801118e:	bd38      	pop	{r3, r4, r5, pc}
 8011190:	20001ef8 	.word	0x20001ef8

08011194 <_write_r>:
 8011194:	b538      	push	{r3, r4, r5, lr}
 8011196:	4d07      	ldr	r5, [pc, #28]	; (80111b4 <_write_r+0x20>)
 8011198:	4604      	mov	r4, r0
 801119a:	4608      	mov	r0, r1
 801119c:	4611      	mov	r1, r2
 801119e:	2200      	movs	r2, #0
 80111a0:	602a      	str	r2, [r5, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	f7f0 ffe5 	bl	8002172 <_write>
 80111a8:	1c43      	adds	r3, r0, #1
 80111aa:	d102      	bne.n	80111b2 <_write_r+0x1e>
 80111ac:	682b      	ldr	r3, [r5, #0]
 80111ae:	b103      	cbz	r3, 80111b2 <_write_r+0x1e>
 80111b0:	6023      	str	r3, [r4, #0]
 80111b2:	bd38      	pop	{r3, r4, r5, pc}
 80111b4:	20001ef8 	.word	0x20001ef8

080111b8 <__errno>:
 80111b8:	4b01      	ldr	r3, [pc, #4]	; (80111c0 <__errno+0x8>)
 80111ba:	6818      	ldr	r0, [r3, #0]
 80111bc:	4770      	bx	lr
 80111be:	bf00      	nop
 80111c0:	20000348 	.word	0x20000348

080111c4 <__libc_init_array>:
 80111c4:	b570      	push	{r4, r5, r6, lr}
 80111c6:	4d0d      	ldr	r5, [pc, #52]	; (80111fc <__libc_init_array+0x38>)
 80111c8:	4c0d      	ldr	r4, [pc, #52]	; (8011200 <__libc_init_array+0x3c>)
 80111ca:	1b64      	subs	r4, r4, r5
 80111cc:	10a4      	asrs	r4, r4, #2
 80111ce:	2600      	movs	r6, #0
 80111d0:	42a6      	cmp	r6, r4
 80111d2:	d109      	bne.n	80111e8 <__libc_init_array+0x24>
 80111d4:	4d0b      	ldr	r5, [pc, #44]	; (8011204 <__libc_init_array+0x40>)
 80111d6:	4c0c      	ldr	r4, [pc, #48]	; (8011208 <__libc_init_array+0x44>)
 80111d8:	f002 fc70 	bl	8013abc <_init>
 80111dc:	1b64      	subs	r4, r4, r5
 80111de:	10a4      	asrs	r4, r4, #2
 80111e0:	2600      	movs	r6, #0
 80111e2:	42a6      	cmp	r6, r4
 80111e4:	d105      	bne.n	80111f2 <__libc_init_array+0x2e>
 80111e6:	bd70      	pop	{r4, r5, r6, pc}
 80111e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80111ec:	4798      	blx	r3
 80111ee:	3601      	adds	r6, #1
 80111f0:	e7ee      	b.n	80111d0 <__libc_init_array+0xc>
 80111f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80111f6:	4798      	blx	r3
 80111f8:	3601      	adds	r6, #1
 80111fa:	e7f2      	b.n	80111e2 <__libc_init_array+0x1e>
 80111fc:	08014018 	.word	0x08014018
 8011200:	08014018 	.word	0x08014018
 8011204:	08014018 	.word	0x08014018
 8011208:	0801401c 	.word	0x0801401c

0801120c <__retarget_lock_init_recursive>:
 801120c:	4770      	bx	lr

0801120e <__retarget_lock_acquire_recursive>:
 801120e:	4770      	bx	lr

08011210 <__retarget_lock_release_recursive>:
 8011210:	4770      	bx	lr

08011212 <strcpy>:
 8011212:	4603      	mov	r3, r0
 8011214:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011218:	f803 2b01 	strb.w	r2, [r3], #1
 801121c:	2a00      	cmp	r2, #0
 801121e:	d1f9      	bne.n	8011214 <strcpy+0x2>
 8011220:	4770      	bx	lr

08011222 <memcpy>:
 8011222:	440a      	add	r2, r1
 8011224:	4291      	cmp	r1, r2
 8011226:	f100 33ff 	add.w	r3, r0, #4294967295
 801122a:	d100      	bne.n	801122e <memcpy+0xc>
 801122c:	4770      	bx	lr
 801122e:	b510      	push	{r4, lr}
 8011230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011238:	4291      	cmp	r1, r2
 801123a:	d1f9      	bne.n	8011230 <memcpy+0xe>
 801123c:	bd10      	pop	{r4, pc}
	...

08011240 <nan>:
 8011240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011248 <nan+0x8>
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	00000000 	.word	0x00000000
 801124c:	7ff80000 	.word	0x7ff80000

08011250 <nanf>:
 8011250:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011258 <nanf+0x8>
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	7fc00000 	.word	0x7fc00000

0801125c <__assert_func>:
 801125c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801125e:	4614      	mov	r4, r2
 8011260:	461a      	mov	r2, r3
 8011262:	4b09      	ldr	r3, [pc, #36]	; (8011288 <__assert_func+0x2c>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4605      	mov	r5, r0
 8011268:	68d8      	ldr	r0, [r3, #12]
 801126a:	b14c      	cbz	r4, 8011280 <__assert_func+0x24>
 801126c:	4b07      	ldr	r3, [pc, #28]	; (801128c <__assert_func+0x30>)
 801126e:	9100      	str	r1, [sp, #0]
 8011270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011274:	4906      	ldr	r1, [pc, #24]	; (8011290 <__assert_func+0x34>)
 8011276:	462b      	mov	r3, r5
 8011278:	f002 f8fe 	bl	8013478 <fiprintf>
 801127c:	f002 f928 	bl	80134d0 <abort>
 8011280:	4b04      	ldr	r3, [pc, #16]	; (8011294 <__assert_func+0x38>)
 8011282:	461c      	mov	r4, r3
 8011284:	e7f3      	b.n	801126e <__assert_func+0x12>
 8011286:	bf00      	nop
 8011288:	20000348 	.word	0x20000348
 801128c:	08013d93 	.word	0x08013d93
 8011290:	08013da0 	.word	0x08013da0
 8011294:	08013dce 	.word	0x08013dce

08011298 <quorem>:
 8011298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129c:	6903      	ldr	r3, [r0, #16]
 801129e:	690c      	ldr	r4, [r1, #16]
 80112a0:	42a3      	cmp	r3, r4
 80112a2:	4607      	mov	r7, r0
 80112a4:	db7e      	blt.n	80113a4 <quorem+0x10c>
 80112a6:	3c01      	subs	r4, #1
 80112a8:	f101 0814 	add.w	r8, r1, #20
 80112ac:	f100 0514 	add.w	r5, r0, #20
 80112b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112b4:	9301      	str	r3, [sp, #4]
 80112b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80112ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112be:	3301      	adds	r3, #1
 80112c0:	429a      	cmp	r2, r3
 80112c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80112c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80112ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80112ce:	d331      	bcc.n	8011334 <quorem+0x9c>
 80112d0:	f04f 0e00 	mov.w	lr, #0
 80112d4:	4640      	mov	r0, r8
 80112d6:	46ac      	mov	ip, r5
 80112d8:	46f2      	mov	sl, lr
 80112da:	f850 2b04 	ldr.w	r2, [r0], #4
 80112de:	b293      	uxth	r3, r2
 80112e0:	fb06 e303 	mla	r3, r6, r3, lr
 80112e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80112e8:	0c1a      	lsrs	r2, r3, #16
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	ebaa 0303 	sub.w	r3, sl, r3
 80112f0:	f8dc a000 	ldr.w	sl, [ip]
 80112f4:	fa13 f38a 	uxtah	r3, r3, sl
 80112f8:	fb06 220e 	mla	r2, r6, lr, r2
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	9b00      	ldr	r3, [sp, #0]
 8011300:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011304:	b292      	uxth	r2, r2
 8011306:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801130a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801130e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011312:	4581      	cmp	r9, r0
 8011314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011318:	f84c 3b04 	str.w	r3, [ip], #4
 801131c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011320:	d2db      	bcs.n	80112da <quorem+0x42>
 8011322:	f855 300b 	ldr.w	r3, [r5, fp]
 8011326:	b92b      	cbnz	r3, 8011334 <quorem+0x9c>
 8011328:	9b01      	ldr	r3, [sp, #4]
 801132a:	3b04      	subs	r3, #4
 801132c:	429d      	cmp	r5, r3
 801132e:	461a      	mov	r2, r3
 8011330:	d32c      	bcc.n	801138c <quorem+0xf4>
 8011332:	613c      	str	r4, [r7, #16]
 8011334:	4638      	mov	r0, r7
 8011336:	f001 fca5 	bl	8012c84 <__mcmp>
 801133a:	2800      	cmp	r0, #0
 801133c:	db22      	blt.n	8011384 <quorem+0xec>
 801133e:	3601      	adds	r6, #1
 8011340:	4629      	mov	r1, r5
 8011342:	2000      	movs	r0, #0
 8011344:	f858 2b04 	ldr.w	r2, [r8], #4
 8011348:	f8d1 c000 	ldr.w	ip, [r1]
 801134c:	b293      	uxth	r3, r2
 801134e:	1ac3      	subs	r3, r0, r3
 8011350:	0c12      	lsrs	r2, r2, #16
 8011352:	fa13 f38c 	uxtah	r3, r3, ip
 8011356:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801135a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801135e:	b29b      	uxth	r3, r3
 8011360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011364:	45c1      	cmp	r9, r8
 8011366:	f841 3b04 	str.w	r3, [r1], #4
 801136a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801136e:	d2e9      	bcs.n	8011344 <quorem+0xac>
 8011370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011378:	b922      	cbnz	r2, 8011384 <quorem+0xec>
 801137a:	3b04      	subs	r3, #4
 801137c:	429d      	cmp	r5, r3
 801137e:	461a      	mov	r2, r3
 8011380:	d30a      	bcc.n	8011398 <quorem+0x100>
 8011382:	613c      	str	r4, [r7, #16]
 8011384:	4630      	mov	r0, r6
 8011386:	b003      	add	sp, #12
 8011388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801138c:	6812      	ldr	r2, [r2, #0]
 801138e:	3b04      	subs	r3, #4
 8011390:	2a00      	cmp	r2, #0
 8011392:	d1ce      	bne.n	8011332 <quorem+0x9a>
 8011394:	3c01      	subs	r4, #1
 8011396:	e7c9      	b.n	801132c <quorem+0x94>
 8011398:	6812      	ldr	r2, [r2, #0]
 801139a:	3b04      	subs	r3, #4
 801139c:	2a00      	cmp	r2, #0
 801139e:	d1f0      	bne.n	8011382 <quorem+0xea>
 80113a0:	3c01      	subs	r4, #1
 80113a2:	e7eb      	b.n	801137c <quorem+0xe4>
 80113a4:	2000      	movs	r0, #0
 80113a6:	e7ee      	b.n	8011386 <quorem+0xee>

080113a8 <_dtoa_r>:
 80113a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ac:	ed2d 8b04 	vpush	{d8-d9}
 80113b0:	69c5      	ldr	r5, [r0, #28]
 80113b2:	b093      	sub	sp, #76	; 0x4c
 80113b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80113b8:	ec57 6b10 	vmov	r6, r7, d0
 80113bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80113c0:	9107      	str	r1, [sp, #28]
 80113c2:	4604      	mov	r4, r0
 80113c4:	920a      	str	r2, [sp, #40]	; 0x28
 80113c6:	930d      	str	r3, [sp, #52]	; 0x34
 80113c8:	b975      	cbnz	r5, 80113e8 <_dtoa_r+0x40>
 80113ca:	2010      	movs	r0, #16
 80113cc:	f7fd fe7c 	bl	800f0c8 <malloc>
 80113d0:	4602      	mov	r2, r0
 80113d2:	61e0      	str	r0, [r4, #28]
 80113d4:	b920      	cbnz	r0, 80113e0 <_dtoa_r+0x38>
 80113d6:	4bae      	ldr	r3, [pc, #696]	; (8011690 <_dtoa_r+0x2e8>)
 80113d8:	21ef      	movs	r1, #239	; 0xef
 80113da:	48ae      	ldr	r0, [pc, #696]	; (8011694 <_dtoa_r+0x2ec>)
 80113dc:	f7ff ff3e 	bl	801125c <__assert_func>
 80113e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80113e4:	6005      	str	r5, [r0, #0]
 80113e6:	60c5      	str	r5, [r0, #12]
 80113e8:	69e3      	ldr	r3, [r4, #28]
 80113ea:	6819      	ldr	r1, [r3, #0]
 80113ec:	b151      	cbz	r1, 8011404 <_dtoa_r+0x5c>
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	604a      	str	r2, [r1, #4]
 80113f2:	2301      	movs	r3, #1
 80113f4:	4093      	lsls	r3, r2
 80113f6:	608b      	str	r3, [r1, #8]
 80113f8:	4620      	mov	r0, r4
 80113fa:	f001 f9bd 	bl	8012778 <_Bfree>
 80113fe:	69e3      	ldr	r3, [r4, #28]
 8011400:	2200      	movs	r2, #0
 8011402:	601a      	str	r2, [r3, #0]
 8011404:	1e3b      	subs	r3, r7, #0
 8011406:	bfbb      	ittet	lt
 8011408:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801140c:	9303      	strlt	r3, [sp, #12]
 801140e:	2300      	movge	r3, #0
 8011410:	2201      	movlt	r2, #1
 8011412:	bfac      	ite	ge
 8011414:	f8c8 3000 	strge.w	r3, [r8]
 8011418:	f8c8 2000 	strlt.w	r2, [r8]
 801141c:	4b9e      	ldr	r3, [pc, #632]	; (8011698 <_dtoa_r+0x2f0>)
 801141e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011422:	ea33 0308 	bics.w	r3, r3, r8
 8011426:	d11b      	bne.n	8011460 <_dtoa_r+0xb8>
 8011428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801142a:	f242 730f 	movw	r3, #9999	; 0x270f
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011434:	4333      	orrs	r3, r6
 8011436:	f000 8593 	beq.w	8011f60 <_dtoa_r+0xbb8>
 801143a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801143c:	b963      	cbnz	r3, 8011458 <_dtoa_r+0xb0>
 801143e:	4b97      	ldr	r3, [pc, #604]	; (801169c <_dtoa_r+0x2f4>)
 8011440:	e027      	b.n	8011492 <_dtoa_r+0xea>
 8011442:	4b97      	ldr	r3, [pc, #604]	; (80116a0 <_dtoa_r+0x2f8>)
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	3308      	adds	r3, #8
 8011448:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801144a:	6013      	str	r3, [r2, #0]
 801144c:	9800      	ldr	r0, [sp, #0]
 801144e:	b013      	add	sp, #76	; 0x4c
 8011450:	ecbd 8b04 	vpop	{d8-d9}
 8011454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011458:	4b90      	ldr	r3, [pc, #576]	; (801169c <_dtoa_r+0x2f4>)
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	3303      	adds	r3, #3
 801145e:	e7f3      	b.n	8011448 <_dtoa_r+0xa0>
 8011460:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011464:	2200      	movs	r2, #0
 8011466:	ec51 0b17 	vmov	r0, r1, d7
 801146a:	eeb0 8a47 	vmov.f32	s16, s14
 801146e:	eef0 8a67 	vmov.f32	s17, s15
 8011472:	2300      	movs	r3, #0
 8011474:	f7ef fb50 	bl	8000b18 <__aeabi_dcmpeq>
 8011478:	4681      	mov	r9, r0
 801147a:	b160      	cbz	r0, 8011496 <_dtoa_r+0xee>
 801147c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801147e:	2301      	movs	r3, #1
 8011480:	6013      	str	r3, [r2, #0]
 8011482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011484:	2b00      	cmp	r3, #0
 8011486:	f000 8568 	beq.w	8011f5a <_dtoa_r+0xbb2>
 801148a:	4b86      	ldr	r3, [pc, #536]	; (80116a4 <_dtoa_r+0x2fc>)
 801148c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801148e:	6013      	str	r3, [r2, #0]
 8011490:	3b01      	subs	r3, #1
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	e7da      	b.n	801144c <_dtoa_r+0xa4>
 8011496:	aa10      	add	r2, sp, #64	; 0x40
 8011498:	a911      	add	r1, sp, #68	; 0x44
 801149a:	4620      	mov	r0, r4
 801149c:	eeb0 0a48 	vmov.f32	s0, s16
 80114a0:	eef0 0a68 	vmov.f32	s1, s17
 80114a4:	f001 fd04 	bl	8012eb0 <__d2b>
 80114a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80114ac:	4682      	mov	sl, r0
 80114ae:	2d00      	cmp	r5, #0
 80114b0:	d07f      	beq.n	80115b2 <_dtoa_r+0x20a>
 80114b2:	ee18 3a90 	vmov	r3, s17
 80114b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80114be:	ec51 0b18 	vmov	r0, r1, d8
 80114c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80114c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80114ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80114ce:	4619      	mov	r1, r3
 80114d0:	2200      	movs	r2, #0
 80114d2:	4b75      	ldr	r3, [pc, #468]	; (80116a8 <_dtoa_r+0x300>)
 80114d4:	f7ee ff00 	bl	80002d8 <__aeabi_dsub>
 80114d8:	a367      	add	r3, pc, #412	; (adr r3, 8011678 <_dtoa_r+0x2d0>)
 80114da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114de:	f7ef f8b3 	bl	8000648 <__aeabi_dmul>
 80114e2:	a367      	add	r3, pc, #412	; (adr r3, 8011680 <_dtoa_r+0x2d8>)
 80114e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e8:	f7ee fef8 	bl	80002dc <__adddf3>
 80114ec:	4606      	mov	r6, r0
 80114ee:	4628      	mov	r0, r5
 80114f0:	460f      	mov	r7, r1
 80114f2:	f7ef f83f 	bl	8000574 <__aeabi_i2d>
 80114f6:	a364      	add	r3, pc, #400	; (adr r3, 8011688 <_dtoa_r+0x2e0>)
 80114f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fc:	f7ef f8a4 	bl	8000648 <__aeabi_dmul>
 8011500:	4602      	mov	r2, r0
 8011502:	460b      	mov	r3, r1
 8011504:	4630      	mov	r0, r6
 8011506:	4639      	mov	r1, r7
 8011508:	f7ee fee8 	bl	80002dc <__adddf3>
 801150c:	4606      	mov	r6, r0
 801150e:	460f      	mov	r7, r1
 8011510:	f7ef fb4a 	bl	8000ba8 <__aeabi_d2iz>
 8011514:	2200      	movs	r2, #0
 8011516:	4683      	mov	fp, r0
 8011518:	2300      	movs	r3, #0
 801151a:	4630      	mov	r0, r6
 801151c:	4639      	mov	r1, r7
 801151e:	f7ef fb05 	bl	8000b2c <__aeabi_dcmplt>
 8011522:	b148      	cbz	r0, 8011538 <_dtoa_r+0x190>
 8011524:	4658      	mov	r0, fp
 8011526:	f7ef f825 	bl	8000574 <__aeabi_i2d>
 801152a:	4632      	mov	r2, r6
 801152c:	463b      	mov	r3, r7
 801152e:	f7ef faf3 	bl	8000b18 <__aeabi_dcmpeq>
 8011532:	b908      	cbnz	r0, 8011538 <_dtoa_r+0x190>
 8011534:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011538:	f1bb 0f16 	cmp.w	fp, #22
 801153c:	d857      	bhi.n	80115ee <_dtoa_r+0x246>
 801153e:	4b5b      	ldr	r3, [pc, #364]	; (80116ac <_dtoa_r+0x304>)
 8011540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011548:	ec51 0b18 	vmov	r0, r1, d8
 801154c:	f7ef faee 	bl	8000b2c <__aeabi_dcmplt>
 8011550:	2800      	cmp	r0, #0
 8011552:	d04e      	beq.n	80115f2 <_dtoa_r+0x24a>
 8011554:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011558:	2300      	movs	r3, #0
 801155a:	930c      	str	r3, [sp, #48]	; 0x30
 801155c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801155e:	1b5b      	subs	r3, r3, r5
 8011560:	1e5a      	subs	r2, r3, #1
 8011562:	bf45      	ittet	mi
 8011564:	f1c3 0301 	rsbmi	r3, r3, #1
 8011568:	9305      	strmi	r3, [sp, #20]
 801156a:	2300      	movpl	r3, #0
 801156c:	2300      	movmi	r3, #0
 801156e:	9206      	str	r2, [sp, #24]
 8011570:	bf54      	ite	pl
 8011572:	9305      	strpl	r3, [sp, #20]
 8011574:	9306      	strmi	r3, [sp, #24]
 8011576:	f1bb 0f00 	cmp.w	fp, #0
 801157a:	db3c      	blt.n	80115f6 <_dtoa_r+0x24e>
 801157c:	9b06      	ldr	r3, [sp, #24]
 801157e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011582:	445b      	add	r3, fp
 8011584:	9306      	str	r3, [sp, #24]
 8011586:	2300      	movs	r3, #0
 8011588:	9308      	str	r3, [sp, #32]
 801158a:	9b07      	ldr	r3, [sp, #28]
 801158c:	2b09      	cmp	r3, #9
 801158e:	d868      	bhi.n	8011662 <_dtoa_r+0x2ba>
 8011590:	2b05      	cmp	r3, #5
 8011592:	bfc4      	itt	gt
 8011594:	3b04      	subgt	r3, #4
 8011596:	9307      	strgt	r3, [sp, #28]
 8011598:	9b07      	ldr	r3, [sp, #28]
 801159a:	f1a3 0302 	sub.w	r3, r3, #2
 801159e:	bfcc      	ite	gt
 80115a0:	2500      	movgt	r5, #0
 80115a2:	2501      	movle	r5, #1
 80115a4:	2b03      	cmp	r3, #3
 80115a6:	f200 8085 	bhi.w	80116b4 <_dtoa_r+0x30c>
 80115aa:	e8df f003 	tbb	[pc, r3]
 80115ae:	3b2e      	.short	0x3b2e
 80115b0:	5839      	.short	0x5839
 80115b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80115b6:	441d      	add	r5, r3
 80115b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80115bc:	2b20      	cmp	r3, #32
 80115be:	bfc1      	itttt	gt
 80115c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80115c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80115c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80115cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80115d0:	bfd6      	itet	le
 80115d2:	f1c3 0320 	rsble	r3, r3, #32
 80115d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80115da:	fa06 f003 	lslle.w	r0, r6, r3
 80115de:	f7ee ffb9 	bl	8000554 <__aeabi_ui2d>
 80115e2:	2201      	movs	r2, #1
 80115e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80115e8:	3d01      	subs	r5, #1
 80115ea:	920e      	str	r2, [sp, #56]	; 0x38
 80115ec:	e76f      	b.n	80114ce <_dtoa_r+0x126>
 80115ee:	2301      	movs	r3, #1
 80115f0:	e7b3      	b.n	801155a <_dtoa_r+0x1b2>
 80115f2:	900c      	str	r0, [sp, #48]	; 0x30
 80115f4:	e7b2      	b.n	801155c <_dtoa_r+0x1b4>
 80115f6:	9b05      	ldr	r3, [sp, #20]
 80115f8:	eba3 030b 	sub.w	r3, r3, fp
 80115fc:	9305      	str	r3, [sp, #20]
 80115fe:	f1cb 0300 	rsb	r3, fp, #0
 8011602:	9308      	str	r3, [sp, #32]
 8011604:	2300      	movs	r3, #0
 8011606:	930b      	str	r3, [sp, #44]	; 0x2c
 8011608:	e7bf      	b.n	801158a <_dtoa_r+0x1e2>
 801160a:	2300      	movs	r3, #0
 801160c:	9309      	str	r3, [sp, #36]	; 0x24
 801160e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011610:	2b00      	cmp	r3, #0
 8011612:	dc52      	bgt.n	80116ba <_dtoa_r+0x312>
 8011614:	2301      	movs	r3, #1
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	9304      	str	r3, [sp, #16]
 801161a:	461a      	mov	r2, r3
 801161c:	920a      	str	r2, [sp, #40]	; 0x28
 801161e:	e00b      	b.n	8011638 <_dtoa_r+0x290>
 8011620:	2301      	movs	r3, #1
 8011622:	e7f3      	b.n	801160c <_dtoa_r+0x264>
 8011624:	2300      	movs	r3, #0
 8011626:	9309      	str	r3, [sp, #36]	; 0x24
 8011628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801162a:	445b      	add	r3, fp
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	3301      	adds	r3, #1
 8011630:	2b01      	cmp	r3, #1
 8011632:	9304      	str	r3, [sp, #16]
 8011634:	bfb8      	it	lt
 8011636:	2301      	movlt	r3, #1
 8011638:	69e0      	ldr	r0, [r4, #28]
 801163a:	2100      	movs	r1, #0
 801163c:	2204      	movs	r2, #4
 801163e:	f102 0614 	add.w	r6, r2, #20
 8011642:	429e      	cmp	r6, r3
 8011644:	d93d      	bls.n	80116c2 <_dtoa_r+0x31a>
 8011646:	6041      	str	r1, [r0, #4]
 8011648:	4620      	mov	r0, r4
 801164a:	f001 f855 	bl	80126f8 <_Balloc>
 801164e:	9000      	str	r0, [sp, #0]
 8011650:	2800      	cmp	r0, #0
 8011652:	d139      	bne.n	80116c8 <_dtoa_r+0x320>
 8011654:	4b16      	ldr	r3, [pc, #88]	; (80116b0 <_dtoa_r+0x308>)
 8011656:	4602      	mov	r2, r0
 8011658:	f240 11af 	movw	r1, #431	; 0x1af
 801165c:	e6bd      	b.n	80113da <_dtoa_r+0x32>
 801165e:	2301      	movs	r3, #1
 8011660:	e7e1      	b.n	8011626 <_dtoa_r+0x27e>
 8011662:	2501      	movs	r5, #1
 8011664:	2300      	movs	r3, #0
 8011666:	9307      	str	r3, [sp, #28]
 8011668:	9509      	str	r5, [sp, #36]	; 0x24
 801166a:	f04f 33ff 	mov.w	r3, #4294967295
 801166e:	9301      	str	r3, [sp, #4]
 8011670:	9304      	str	r3, [sp, #16]
 8011672:	2200      	movs	r2, #0
 8011674:	2312      	movs	r3, #18
 8011676:	e7d1      	b.n	801161c <_dtoa_r+0x274>
 8011678:	636f4361 	.word	0x636f4361
 801167c:	3fd287a7 	.word	0x3fd287a7
 8011680:	8b60c8b3 	.word	0x8b60c8b3
 8011684:	3fc68a28 	.word	0x3fc68a28
 8011688:	509f79fb 	.word	0x509f79fb
 801168c:	3fd34413 	.word	0x3fd34413
 8011690:	08013d1a 	.word	0x08013d1a
 8011694:	08013ddc 	.word	0x08013ddc
 8011698:	7ff00000 	.word	0x7ff00000
 801169c:	08013dd8 	.word	0x08013dd8
 80116a0:	08013dcf 	.word	0x08013dcf
 80116a4:	08013cf2 	.word	0x08013cf2
 80116a8:	3ff80000 	.word	0x3ff80000
 80116ac:	08013f28 	.word	0x08013f28
 80116b0:	08013e34 	.word	0x08013e34
 80116b4:	2301      	movs	r3, #1
 80116b6:	9309      	str	r3, [sp, #36]	; 0x24
 80116b8:	e7d7      	b.n	801166a <_dtoa_r+0x2c2>
 80116ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116bc:	9301      	str	r3, [sp, #4]
 80116be:	9304      	str	r3, [sp, #16]
 80116c0:	e7ba      	b.n	8011638 <_dtoa_r+0x290>
 80116c2:	3101      	adds	r1, #1
 80116c4:	0052      	lsls	r2, r2, #1
 80116c6:	e7ba      	b.n	801163e <_dtoa_r+0x296>
 80116c8:	69e3      	ldr	r3, [r4, #28]
 80116ca:	9a00      	ldr	r2, [sp, #0]
 80116cc:	601a      	str	r2, [r3, #0]
 80116ce:	9b04      	ldr	r3, [sp, #16]
 80116d0:	2b0e      	cmp	r3, #14
 80116d2:	f200 80a8 	bhi.w	8011826 <_dtoa_r+0x47e>
 80116d6:	2d00      	cmp	r5, #0
 80116d8:	f000 80a5 	beq.w	8011826 <_dtoa_r+0x47e>
 80116dc:	f1bb 0f00 	cmp.w	fp, #0
 80116e0:	dd38      	ble.n	8011754 <_dtoa_r+0x3ac>
 80116e2:	4bc0      	ldr	r3, [pc, #768]	; (80119e4 <_dtoa_r+0x63c>)
 80116e4:	f00b 020f 	and.w	r2, fp, #15
 80116e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80116f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80116f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80116f8:	d019      	beq.n	801172e <_dtoa_r+0x386>
 80116fa:	4bbb      	ldr	r3, [pc, #748]	; (80119e8 <_dtoa_r+0x640>)
 80116fc:	ec51 0b18 	vmov	r0, r1, d8
 8011700:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011704:	f7ef f8ca 	bl	800089c <__aeabi_ddiv>
 8011708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801170c:	f008 080f 	and.w	r8, r8, #15
 8011710:	2503      	movs	r5, #3
 8011712:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80119e8 <_dtoa_r+0x640>
 8011716:	f1b8 0f00 	cmp.w	r8, #0
 801171a:	d10a      	bne.n	8011732 <_dtoa_r+0x38a>
 801171c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011720:	4632      	mov	r2, r6
 8011722:	463b      	mov	r3, r7
 8011724:	f7ef f8ba 	bl	800089c <__aeabi_ddiv>
 8011728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801172c:	e02b      	b.n	8011786 <_dtoa_r+0x3de>
 801172e:	2502      	movs	r5, #2
 8011730:	e7ef      	b.n	8011712 <_dtoa_r+0x36a>
 8011732:	f018 0f01 	tst.w	r8, #1
 8011736:	d008      	beq.n	801174a <_dtoa_r+0x3a2>
 8011738:	4630      	mov	r0, r6
 801173a:	4639      	mov	r1, r7
 801173c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011740:	f7ee ff82 	bl	8000648 <__aeabi_dmul>
 8011744:	3501      	adds	r5, #1
 8011746:	4606      	mov	r6, r0
 8011748:	460f      	mov	r7, r1
 801174a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801174e:	f109 0908 	add.w	r9, r9, #8
 8011752:	e7e0      	b.n	8011716 <_dtoa_r+0x36e>
 8011754:	f000 809f 	beq.w	8011896 <_dtoa_r+0x4ee>
 8011758:	f1cb 0600 	rsb	r6, fp, #0
 801175c:	4ba1      	ldr	r3, [pc, #644]	; (80119e4 <_dtoa_r+0x63c>)
 801175e:	4fa2      	ldr	r7, [pc, #648]	; (80119e8 <_dtoa_r+0x640>)
 8011760:	f006 020f 	and.w	r2, r6, #15
 8011764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176c:	ec51 0b18 	vmov	r0, r1, d8
 8011770:	f7ee ff6a 	bl	8000648 <__aeabi_dmul>
 8011774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011778:	1136      	asrs	r6, r6, #4
 801177a:	2300      	movs	r3, #0
 801177c:	2502      	movs	r5, #2
 801177e:	2e00      	cmp	r6, #0
 8011780:	d17e      	bne.n	8011880 <_dtoa_r+0x4d8>
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1d0      	bne.n	8011728 <_dtoa_r+0x380>
 8011786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011788:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801178c:	2b00      	cmp	r3, #0
 801178e:	f000 8084 	beq.w	801189a <_dtoa_r+0x4f2>
 8011792:	4b96      	ldr	r3, [pc, #600]	; (80119ec <_dtoa_r+0x644>)
 8011794:	2200      	movs	r2, #0
 8011796:	4640      	mov	r0, r8
 8011798:	4649      	mov	r1, r9
 801179a:	f7ef f9c7 	bl	8000b2c <__aeabi_dcmplt>
 801179e:	2800      	cmp	r0, #0
 80117a0:	d07b      	beq.n	801189a <_dtoa_r+0x4f2>
 80117a2:	9b04      	ldr	r3, [sp, #16]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d078      	beq.n	801189a <_dtoa_r+0x4f2>
 80117a8:	9b01      	ldr	r3, [sp, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	dd39      	ble.n	8011822 <_dtoa_r+0x47a>
 80117ae:	4b90      	ldr	r3, [pc, #576]	; (80119f0 <_dtoa_r+0x648>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	4640      	mov	r0, r8
 80117b4:	4649      	mov	r1, r9
 80117b6:	f7ee ff47 	bl	8000648 <__aeabi_dmul>
 80117ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117be:	9e01      	ldr	r6, [sp, #4]
 80117c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80117c4:	3501      	adds	r5, #1
 80117c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80117ca:	4628      	mov	r0, r5
 80117cc:	f7ee fed2 	bl	8000574 <__aeabi_i2d>
 80117d0:	4642      	mov	r2, r8
 80117d2:	464b      	mov	r3, r9
 80117d4:	f7ee ff38 	bl	8000648 <__aeabi_dmul>
 80117d8:	4b86      	ldr	r3, [pc, #536]	; (80119f4 <_dtoa_r+0x64c>)
 80117da:	2200      	movs	r2, #0
 80117dc:	f7ee fd7e 	bl	80002dc <__adddf3>
 80117e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80117e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117e8:	9303      	str	r3, [sp, #12]
 80117ea:	2e00      	cmp	r6, #0
 80117ec:	d158      	bne.n	80118a0 <_dtoa_r+0x4f8>
 80117ee:	4b82      	ldr	r3, [pc, #520]	; (80119f8 <_dtoa_r+0x650>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	4640      	mov	r0, r8
 80117f4:	4649      	mov	r1, r9
 80117f6:	f7ee fd6f 	bl	80002d8 <__aeabi_dsub>
 80117fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117fe:	4680      	mov	r8, r0
 8011800:	4689      	mov	r9, r1
 8011802:	f7ef f9b1 	bl	8000b68 <__aeabi_dcmpgt>
 8011806:	2800      	cmp	r0, #0
 8011808:	f040 8296 	bne.w	8011d38 <_dtoa_r+0x990>
 801180c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011810:	4640      	mov	r0, r8
 8011812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011816:	4649      	mov	r1, r9
 8011818:	f7ef f988 	bl	8000b2c <__aeabi_dcmplt>
 801181c:	2800      	cmp	r0, #0
 801181e:	f040 8289 	bne.w	8011d34 <_dtoa_r+0x98c>
 8011822:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011828:	2b00      	cmp	r3, #0
 801182a:	f2c0 814e 	blt.w	8011aca <_dtoa_r+0x722>
 801182e:	f1bb 0f0e 	cmp.w	fp, #14
 8011832:	f300 814a 	bgt.w	8011aca <_dtoa_r+0x722>
 8011836:	4b6b      	ldr	r3, [pc, #428]	; (80119e4 <_dtoa_r+0x63c>)
 8011838:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801183c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011842:	2b00      	cmp	r3, #0
 8011844:	f280 80dc 	bge.w	8011a00 <_dtoa_r+0x658>
 8011848:	9b04      	ldr	r3, [sp, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	f300 80d8 	bgt.w	8011a00 <_dtoa_r+0x658>
 8011850:	f040 826f 	bne.w	8011d32 <_dtoa_r+0x98a>
 8011854:	4b68      	ldr	r3, [pc, #416]	; (80119f8 <_dtoa_r+0x650>)
 8011856:	2200      	movs	r2, #0
 8011858:	4640      	mov	r0, r8
 801185a:	4649      	mov	r1, r9
 801185c:	f7ee fef4 	bl	8000648 <__aeabi_dmul>
 8011860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011864:	f7ef f976 	bl	8000b54 <__aeabi_dcmpge>
 8011868:	9e04      	ldr	r6, [sp, #16]
 801186a:	4637      	mov	r7, r6
 801186c:	2800      	cmp	r0, #0
 801186e:	f040 8245 	bne.w	8011cfc <_dtoa_r+0x954>
 8011872:	9d00      	ldr	r5, [sp, #0]
 8011874:	2331      	movs	r3, #49	; 0x31
 8011876:	f805 3b01 	strb.w	r3, [r5], #1
 801187a:	f10b 0b01 	add.w	fp, fp, #1
 801187e:	e241      	b.n	8011d04 <_dtoa_r+0x95c>
 8011880:	07f2      	lsls	r2, r6, #31
 8011882:	d505      	bpl.n	8011890 <_dtoa_r+0x4e8>
 8011884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011888:	f7ee fede 	bl	8000648 <__aeabi_dmul>
 801188c:	3501      	adds	r5, #1
 801188e:	2301      	movs	r3, #1
 8011890:	1076      	asrs	r6, r6, #1
 8011892:	3708      	adds	r7, #8
 8011894:	e773      	b.n	801177e <_dtoa_r+0x3d6>
 8011896:	2502      	movs	r5, #2
 8011898:	e775      	b.n	8011786 <_dtoa_r+0x3de>
 801189a:	9e04      	ldr	r6, [sp, #16]
 801189c:	465f      	mov	r7, fp
 801189e:	e792      	b.n	80117c6 <_dtoa_r+0x41e>
 80118a0:	9900      	ldr	r1, [sp, #0]
 80118a2:	4b50      	ldr	r3, [pc, #320]	; (80119e4 <_dtoa_r+0x63c>)
 80118a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118a8:	4431      	add	r1, r6
 80118aa:	9102      	str	r1, [sp, #8]
 80118ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118ae:	eeb0 9a47 	vmov.f32	s18, s14
 80118b2:	eef0 9a67 	vmov.f32	s19, s15
 80118b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80118ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80118be:	2900      	cmp	r1, #0
 80118c0:	d044      	beq.n	801194c <_dtoa_r+0x5a4>
 80118c2:	494e      	ldr	r1, [pc, #312]	; (80119fc <_dtoa_r+0x654>)
 80118c4:	2000      	movs	r0, #0
 80118c6:	f7ee ffe9 	bl	800089c <__aeabi_ddiv>
 80118ca:	ec53 2b19 	vmov	r2, r3, d9
 80118ce:	f7ee fd03 	bl	80002d8 <__aeabi_dsub>
 80118d2:	9d00      	ldr	r5, [sp, #0]
 80118d4:	ec41 0b19 	vmov	d9, r0, r1
 80118d8:	4649      	mov	r1, r9
 80118da:	4640      	mov	r0, r8
 80118dc:	f7ef f964 	bl	8000ba8 <__aeabi_d2iz>
 80118e0:	4606      	mov	r6, r0
 80118e2:	f7ee fe47 	bl	8000574 <__aeabi_i2d>
 80118e6:	4602      	mov	r2, r0
 80118e8:	460b      	mov	r3, r1
 80118ea:	4640      	mov	r0, r8
 80118ec:	4649      	mov	r1, r9
 80118ee:	f7ee fcf3 	bl	80002d8 <__aeabi_dsub>
 80118f2:	3630      	adds	r6, #48	; 0x30
 80118f4:	f805 6b01 	strb.w	r6, [r5], #1
 80118f8:	ec53 2b19 	vmov	r2, r3, d9
 80118fc:	4680      	mov	r8, r0
 80118fe:	4689      	mov	r9, r1
 8011900:	f7ef f914 	bl	8000b2c <__aeabi_dcmplt>
 8011904:	2800      	cmp	r0, #0
 8011906:	d164      	bne.n	80119d2 <_dtoa_r+0x62a>
 8011908:	4642      	mov	r2, r8
 801190a:	464b      	mov	r3, r9
 801190c:	4937      	ldr	r1, [pc, #220]	; (80119ec <_dtoa_r+0x644>)
 801190e:	2000      	movs	r0, #0
 8011910:	f7ee fce2 	bl	80002d8 <__aeabi_dsub>
 8011914:	ec53 2b19 	vmov	r2, r3, d9
 8011918:	f7ef f908 	bl	8000b2c <__aeabi_dcmplt>
 801191c:	2800      	cmp	r0, #0
 801191e:	f040 80b6 	bne.w	8011a8e <_dtoa_r+0x6e6>
 8011922:	9b02      	ldr	r3, [sp, #8]
 8011924:	429d      	cmp	r5, r3
 8011926:	f43f af7c 	beq.w	8011822 <_dtoa_r+0x47a>
 801192a:	4b31      	ldr	r3, [pc, #196]	; (80119f0 <_dtoa_r+0x648>)
 801192c:	ec51 0b19 	vmov	r0, r1, d9
 8011930:	2200      	movs	r2, #0
 8011932:	f7ee fe89 	bl	8000648 <__aeabi_dmul>
 8011936:	4b2e      	ldr	r3, [pc, #184]	; (80119f0 <_dtoa_r+0x648>)
 8011938:	ec41 0b19 	vmov	d9, r0, r1
 801193c:	2200      	movs	r2, #0
 801193e:	4640      	mov	r0, r8
 8011940:	4649      	mov	r1, r9
 8011942:	f7ee fe81 	bl	8000648 <__aeabi_dmul>
 8011946:	4680      	mov	r8, r0
 8011948:	4689      	mov	r9, r1
 801194a:	e7c5      	b.n	80118d8 <_dtoa_r+0x530>
 801194c:	ec51 0b17 	vmov	r0, r1, d7
 8011950:	f7ee fe7a 	bl	8000648 <__aeabi_dmul>
 8011954:	9b02      	ldr	r3, [sp, #8]
 8011956:	9d00      	ldr	r5, [sp, #0]
 8011958:	930f      	str	r3, [sp, #60]	; 0x3c
 801195a:	ec41 0b19 	vmov	d9, r0, r1
 801195e:	4649      	mov	r1, r9
 8011960:	4640      	mov	r0, r8
 8011962:	f7ef f921 	bl	8000ba8 <__aeabi_d2iz>
 8011966:	4606      	mov	r6, r0
 8011968:	f7ee fe04 	bl	8000574 <__aeabi_i2d>
 801196c:	3630      	adds	r6, #48	; 0x30
 801196e:	4602      	mov	r2, r0
 8011970:	460b      	mov	r3, r1
 8011972:	4640      	mov	r0, r8
 8011974:	4649      	mov	r1, r9
 8011976:	f7ee fcaf 	bl	80002d8 <__aeabi_dsub>
 801197a:	f805 6b01 	strb.w	r6, [r5], #1
 801197e:	9b02      	ldr	r3, [sp, #8]
 8011980:	429d      	cmp	r5, r3
 8011982:	4680      	mov	r8, r0
 8011984:	4689      	mov	r9, r1
 8011986:	f04f 0200 	mov.w	r2, #0
 801198a:	d124      	bne.n	80119d6 <_dtoa_r+0x62e>
 801198c:	4b1b      	ldr	r3, [pc, #108]	; (80119fc <_dtoa_r+0x654>)
 801198e:	ec51 0b19 	vmov	r0, r1, d9
 8011992:	f7ee fca3 	bl	80002dc <__adddf3>
 8011996:	4602      	mov	r2, r0
 8011998:	460b      	mov	r3, r1
 801199a:	4640      	mov	r0, r8
 801199c:	4649      	mov	r1, r9
 801199e:	f7ef f8e3 	bl	8000b68 <__aeabi_dcmpgt>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d173      	bne.n	8011a8e <_dtoa_r+0x6e6>
 80119a6:	ec53 2b19 	vmov	r2, r3, d9
 80119aa:	4914      	ldr	r1, [pc, #80]	; (80119fc <_dtoa_r+0x654>)
 80119ac:	2000      	movs	r0, #0
 80119ae:	f7ee fc93 	bl	80002d8 <__aeabi_dsub>
 80119b2:	4602      	mov	r2, r0
 80119b4:	460b      	mov	r3, r1
 80119b6:	4640      	mov	r0, r8
 80119b8:	4649      	mov	r1, r9
 80119ba:	f7ef f8b7 	bl	8000b2c <__aeabi_dcmplt>
 80119be:	2800      	cmp	r0, #0
 80119c0:	f43f af2f 	beq.w	8011822 <_dtoa_r+0x47a>
 80119c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80119c6:	1e6b      	subs	r3, r5, #1
 80119c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80119ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80119ce:	2b30      	cmp	r3, #48	; 0x30
 80119d0:	d0f8      	beq.n	80119c4 <_dtoa_r+0x61c>
 80119d2:	46bb      	mov	fp, r7
 80119d4:	e04a      	b.n	8011a6c <_dtoa_r+0x6c4>
 80119d6:	4b06      	ldr	r3, [pc, #24]	; (80119f0 <_dtoa_r+0x648>)
 80119d8:	f7ee fe36 	bl	8000648 <__aeabi_dmul>
 80119dc:	4680      	mov	r8, r0
 80119de:	4689      	mov	r9, r1
 80119e0:	e7bd      	b.n	801195e <_dtoa_r+0x5b6>
 80119e2:	bf00      	nop
 80119e4:	08013f28 	.word	0x08013f28
 80119e8:	08013f00 	.word	0x08013f00
 80119ec:	3ff00000 	.word	0x3ff00000
 80119f0:	40240000 	.word	0x40240000
 80119f4:	401c0000 	.word	0x401c0000
 80119f8:	40140000 	.word	0x40140000
 80119fc:	3fe00000 	.word	0x3fe00000
 8011a00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011a04:	9d00      	ldr	r5, [sp, #0]
 8011a06:	4642      	mov	r2, r8
 8011a08:	464b      	mov	r3, r9
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	4639      	mov	r1, r7
 8011a0e:	f7ee ff45 	bl	800089c <__aeabi_ddiv>
 8011a12:	f7ef f8c9 	bl	8000ba8 <__aeabi_d2iz>
 8011a16:	9001      	str	r0, [sp, #4]
 8011a18:	f7ee fdac 	bl	8000574 <__aeabi_i2d>
 8011a1c:	4642      	mov	r2, r8
 8011a1e:	464b      	mov	r3, r9
 8011a20:	f7ee fe12 	bl	8000648 <__aeabi_dmul>
 8011a24:	4602      	mov	r2, r0
 8011a26:	460b      	mov	r3, r1
 8011a28:	4630      	mov	r0, r6
 8011a2a:	4639      	mov	r1, r7
 8011a2c:	f7ee fc54 	bl	80002d8 <__aeabi_dsub>
 8011a30:	9e01      	ldr	r6, [sp, #4]
 8011a32:	9f04      	ldr	r7, [sp, #16]
 8011a34:	3630      	adds	r6, #48	; 0x30
 8011a36:	f805 6b01 	strb.w	r6, [r5], #1
 8011a3a:	9e00      	ldr	r6, [sp, #0]
 8011a3c:	1bae      	subs	r6, r5, r6
 8011a3e:	42b7      	cmp	r7, r6
 8011a40:	4602      	mov	r2, r0
 8011a42:	460b      	mov	r3, r1
 8011a44:	d134      	bne.n	8011ab0 <_dtoa_r+0x708>
 8011a46:	f7ee fc49 	bl	80002dc <__adddf3>
 8011a4a:	4642      	mov	r2, r8
 8011a4c:	464b      	mov	r3, r9
 8011a4e:	4606      	mov	r6, r0
 8011a50:	460f      	mov	r7, r1
 8011a52:	f7ef f889 	bl	8000b68 <__aeabi_dcmpgt>
 8011a56:	b9c8      	cbnz	r0, 8011a8c <_dtoa_r+0x6e4>
 8011a58:	4642      	mov	r2, r8
 8011a5a:	464b      	mov	r3, r9
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	4639      	mov	r1, r7
 8011a60:	f7ef f85a 	bl	8000b18 <__aeabi_dcmpeq>
 8011a64:	b110      	cbz	r0, 8011a6c <_dtoa_r+0x6c4>
 8011a66:	9b01      	ldr	r3, [sp, #4]
 8011a68:	07db      	lsls	r3, r3, #31
 8011a6a:	d40f      	bmi.n	8011a8c <_dtoa_r+0x6e4>
 8011a6c:	4651      	mov	r1, sl
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f000 fe82 	bl	8012778 <_Bfree>
 8011a74:	2300      	movs	r3, #0
 8011a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a78:	702b      	strb	r3, [r5, #0]
 8011a7a:	f10b 0301 	add.w	r3, fp, #1
 8011a7e:	6013      	str	r3, [r2, #0]
 8011a80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f43f ace2 	beq.w	801144c <_dtoa_r+0xa4>
 8011a88:	601d      	str	r5, [r3, #0]
 8011a8a:	e4df      	b.n	801144c <_dtoa_r+0xa4>
 8011a8c:	465f      	mov	r7, fp
 8011a8e:	462b      	mov	r3, r5
 8011a90:	461d      	mov	r5, r3
 8011a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a96:	2a39      	cmp	r2, #57	; 0x39
 8011a98:	d106      	bne.n	8011aa8 <_dtoa_r+0x700>
 8011a9a:	9a00      	ldr	r2, [sp, #0]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d1f7      	bne.n	8011a90 <_dtoa_r+0x6e8>
 8011aa0:	9900      	ldr	r1, [sp, #0]
 8011aa2:	2230      	movs	r2, #48	; 0x30
 8011aa4:	3701      	adds	r7, #1
 8011aa6:	700a      	strb	r2, [r1, #0]
 8011aa8:	781a      	ldrb	r2, [r3, #0]
 8011aaa:	3201      	adds	r2, #1
 8011aac:	701a      	strb	r2, [r3, #0]
 8011aae:	e790      	b.n	80119d2 <_dtoa_r+0x62a>
 8011ab0:	4ba3      	ldr	r3, [pc, #652]	; (8011d40 <_dtoa_r+0x998>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f7ee fdc8 	bl	8000648 <__aeabi_dmul>
 8011ab8:	2200      	movs	r2, #0
 8011aba:	2300      	movs	r3, #0
 8011abc:	4606      	mov	r6, r0
 8011abe:	460f      	mov	r7, r1
 8011ac0:	f7ef f82a 	bl	8000b18 <__aeabi_dcmpeq>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d09e      	beq.n	8011a06 <_dtoa_r+0x65e>
 8011ac8:	e7d0      	b.n	8011a6c <_dtoa_r+0x6c4>
 8011aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011acc:	2a00      	cmp	r2, #0
 8011ace:	f000 80ca 	beq.w	8011c66 <_dtoa_r+0x8be>
 8011ad2:	9a07      	ldr	r2, [sp, #28]
 8011ad4:	2a01      	cmp	r2, #1
 8011ad6:	f300 80ad 	bgt.w	8011c34 <_dtoa_r+0x88c>
 8011ada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011adc:	2a00      	cmp	r2, #0
 8011ade:	f000 80a5 	beq.w	8011c2c <_dtoa_r+0x884>
 8011ae2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011ae6:	9e08      	ldr	r6, [sp, #32]
 8011ae8:	9d05      	ldr	r5, [sp, #20]
 8011aea:	9a05      	ldr	r2, [sp, #20]
 8011aec:	441a      	add	r2, r3
 8011aee:	9205      	str	r2, [sp, #20]
 8011af0:	9a06      	ldr	r2, [sp, #24]
 8011af2:	2101      	movs	r1, #1
 8011af4:	441a      	add	r2, r3
 8011af6:	4620      	mov	r0, r4
 8011af8:	9206      	str	r2, [sp, #24]
 8011afa:	f000 ff3d 	bl	8012978 <__i2b>
 8011afe:	4607      	mov	r7, r0
 8011b00:	b165      	cbz	r5, 8011b1c <_dtoa_r+0x774>
 8011b02:	9b06      	ldr	r3, [sp, #24]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	dd09      	ble.n	8011b1c <_dtoa_r+0x774>
 8011b08:	42ab      	cmp	r3, r5
 8011b0a:	9a05      	ldr	r2, [sp, #20]
 8011b0c:	bfa8      	it	ge
 8011b0e:	462b      	movge	r3, r5
 8011b10:	1ad2      	subs	r2, r2, r3
 8011b12:	9205      	str	r2, [sp, #20]
 8011b14:	9a06      	ldr	r2, [sp, #24]
 8011b16:	1aed      	subs	r5, r5, r3
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	9306      	str	r3, [sp, #24]
 8011b1c:	9b08      	ldr	r3, [sp, #32]
 8011b1e:	b1f3      	cbz	r3, 8011b5e <_dtoa_r+0x7b6>
 8011b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	f000 80a3 	beq.w	8011c6e <_dtoa_r+0x8c6>
 8011b28:	2e00      	cmp	r6, #0
 8011b2a:	dd10      	ble.n	8011b4e <_dtoa_r+0x7a6>
 8011b2c:	4639      	mov	r1, r7
 8011b2e:	4632      	mov	r2, r6
 8011b30:	4620      	mov	r0, r4
 8011b32:	f000 ffe1 	bl	8012af8 <__pow5mult>
 8011b36:	4652      	mov	r2, sl
 8011b38:	4601      	mov	r1, r0
 8011b3a:	4607      	mov	r7, r0
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	f000 ff31 	bl	80129a4 <__multiply>
 8011b42:	4651      	mov	r1, sl
 8011b44:	4680      	mov	r8, r0
 8011b46:	4620      	mov	r0, r4
 8011b48:	f000 fe16 	bl	8012778 <_Bfree>
 8011b4c:	46c2      	mov	sl, r8
 8011b4e:	9b08      	ldr	r3, [sp, #32]
 8011b50:	1b9a      	subs	r2, r3, r6
 8011b52:	d004      	beq.n	8011b5e <_dtoa_r+0x7b6>
 8011b54:	4651      	mov	r1, sl
 8011b56:	4620      	mov	r0, r4
 8011b58:	f000 ffce 	bl	8012af8 <__pow5mult>
 8011b5c:	4682      	mov	sl, r0
 8011b5e:	2101      	movs	r1, #1
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 ff09 	bl	8012978 <__i2b>
 8011b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	f340 8081 	ble.w	8011c72 <_dtoa_r+0x8ca>
 8011b70:	461a      	mov	r2, r3
 8011b72:	4601      	mov	r1, r0
 8011b74:	4620      	mov	r0, r4
 8011b76:	f000 ffbf 	bl	8012af8 <__pow5mult>
 8011b7a:	9b07      	ldr	r3, [sp, #28]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	4606      	mov	r6, r0
 8011b80:	dd7a      	ble.n	8011c78 <_dtoa_r+0x8d0>
 8011b82:	f04f 0800 	mov.w	r8, #0
 8011b86:	6933      	ldr	r3, [r6, #16]
 8011b88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011b8c:	6918      	ldr	r0, [r3, #16]
 8011b8e:	f000 fea5 	bl	80128dc <__hi0bits>
 8011b92:	f1c0 0020 	rsb	r0, r0, #32
 8011b96:	9b06      	ldr	r3, [sp, #24]
 8011b98:	4418      	add	r0, r3
 8011b9a:	f010 001f 	ands.w	r0, r0, #31
 8011b9e:	f000 8094 	beq.w	8011cca <_dtoa_r+0x922>
 8011ba2:	f1c0 0320 	rsb	r3, r0, #32
 8011ba6:	2b04      	cmp	r3, #4
 8011ba8:	f340 8085 	ble.w	8011cb6 <_dtoa_r+0x90e>
 8011bac:	9b05      	ldr	r3, [sp, #20]
 8011bae:	f1c0 001c 	rsb	r0, r0, #28
 8011bb2:	4403      	add	r3, r0
 8011bb4:	9305      	str	r3, [sp, #20]
 8011bb6:	9b06      	ldr	r3, [sp, #24]
 8011bb8:	4403      	add	r3, r0
 8011bba:	4405      	add	r5, r0
 8011bbc:	9306      	str	r3, [sp, #24]
 8011bbe:	9b05      	ldr	r3, [sp, #20]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	dd05      	ble.n	8011bd0 <_dtoa_r+0x828>
 8011bc4:	4651      	mov	r1, sl
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f000 ffef 	bl	8012bac <__lshift>
 8011bce:	4682      	mov	sl, r0
 8011bd0:	9b06      	ldr	r3, [sp, #24]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	dd05      	ble.n	8011be2 <_dtoa_r+0x83a>
 8011bd6:	4631      	mov	r1, r6
 8011bd8:	461a      	mov	r2, r3
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f000 ffe6 	bl	8012bac <__lshift>
 8011be0:	4606      	mov	r6, r0
 8011be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d072      	beq.n	8011cce <_dtoa_r+0x926>
 8011be8:	4631      	mov	r1, r6
 8011bea:	4650      	mov	r0, sl
 8011bec:	f001 f84a 	bl	8012c84 <__mcmp>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	da6c      	bge.n	8011cce <_dtoa_r+0x926>
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	4651      	mov	r1, sl
 8011bf8:	220a      	movs	r2, #10
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f000 fdde 	bl	80127bc <__multadd>
 8011c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c06:	4682      	mov	sl, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f000 81b0 	beq.w	8011f6e <_dtoa_r+0xbc6>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	4639      	mov	r1, r7
 8011c12:	220a      	movs	r2, #10
 8011c14:	4620      	mov	r0, r4
 8011c16:	f000 fdd1 	bl	80127bc <__multadd>
 8011c1a:	9b01      	ldr	r3, [sp, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	4607      	mov	r7, r0
 8011c20:	f300 8096 	bgt.w	8011d50 <_dtoa_r+0x9a8>
 8011c24:	9b07      	ldr	r3, [sp, #28]
 8011c26:	2b02      	cmp	r3, #2
 8011c28:	dc59      	bgt.n	8011cde <_dtoa_r+0x936>
 8011c2a:	e091      	b.n	8011d50 <_dtoa_r+0x9a8>
 8011c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011c32:	e758      	b.n	8011ae6 <_dtoa_r+0x73e>
 8011c34:	9b04      	ldr	r3, [sp, #16]
 8011c36:	1e5e      	subs	r6, r3, #1
 8011c38:	9b08      	ldr	r3, [sp, #32]
 8011c3a:	42b3      	cmp	r3, r6
 8011c3c:	bfbf      	itttt	lt
 8011c3e:	9b08      	ldrlt	r3, [sp, #32]
 8011c40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011c42:	9608      	strlt	r6, [sp, #32]
 8011c44:	1af3      	sublt	r3, r6, r3
 8011c46:	bfb4      	ite	lt
 8011c48:	18d2      	addlt	r2, r2, r3
 8011c4a:	1b9e      	subge	r6, r3, r6
 8011c4c:	9b04      	ldr	r3, [sp, #16]
 8011c4e:	bfbc      	itt	lt
 8011c50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011c52:	2600      	movlt	r6, #0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	bfb7      	itett	lt
 8011c58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011c5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011c60:	1a9d      	sublt	r5, r3, r2
 8011c62:	2300      	movlt	r3, #0
 8011c64:	e741      	b.n	8011aea <_dtoa_r+0x742>
 8011c66:	9e08      	ldr	r6, [sp, #32]
 8011c68:	9d05      	ldr	r5, [sp, #20]
 8011c6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011c6c:	e748      	b.n	8011b00 <_dtoa_r+0x758>
 8011c6e:	9a08      	ldr	r2, [sp, #32]
 8011c70:	e770      	b.n	8011b54 <_dtoa_r+0x7ac>
 8011c72:	9b07      	ldr	r3, [sp, #28]
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	dc19      	bgt.n	8011cac <_dtoa_r+0x904>
 8011c78:	9b02      	ldr	r3, [sp, #8]
 8011c7a:	b9bb      	cbnz	r3, 8011cac <_dtoa_r+0x904>
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c82:	b99b      	cbnz	r3, 8011cac <_dtoa_r+0x904>
 8011c84:	9b03      	ldr	r3, [sp, #12]
 8011c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c8a:	0d1b      	lsrs	r3, r3, #20
 8011c8c:	051b      	lsls	r3, r3, #20
 8011c8e:	b183      	cbz	r3, 8011cb2 <_dtoa_r+0x90a>
 8011c90:	9b05      	ldr	r3, [sp, #20]
 8011c92:	3301      	adds	r3, #1
 8011c94:	9305      	str	r3, [sp, #20]
 8011c96:	9b06      	ldr	r3, [sp, #24]
 8011c98:	3301      	adds	r3, #1
 8011c9a:	9306      	str	r3, [sp, #24]
 8011c9c:	f04f 0801 	mov.w	r8, #1
 8011ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f47f af6f 	bne.w	8011b86 <_dtoa_r+0x7de>
 8011ca8:	2001      	movs	r0, #1
 8011caa:	e774      	b.n	8011b96 <_dtoa_r+0x7ee>
 8011cac:	f04f 0800 	mov.w	r8, #0
 8011cb0:	e7f6      	b.n	8011ca0 <_dtoa_r+0x8f8>
 8011cb2:	4698      	mov	r8, r3
 8011cb4:	e7f4      	b.n	8011ca0 <_dtoa_r+0x8f8>
 8011cb6:	d082      	beq.n	8011bbe <_dtoa_r+0x816>
 8011cb8:	9a05      	ldr	r2, [sp, #20]
 8011cba:	331c      	adds	r3, #28
 8011cbc:	441a      	add	r2, r3
 8011cbe:	9205      	str	r2, [sp, #20]
 8011cc0:	9a06      	ldr	r2, [sp, #24]
 8011cc2:	441a      	add	r2, r3
 8011cc4:	441d      	add	r5, r3
 8011cc6:	9206      	str	r2, [sp, #24]
 8011cc8:	e779      	b.n	8011bbe <_dtoa_r+0x816>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	e7f4      	b.n	8011cb8 <_dtoa_r+0x910>
 8011cce:	9b04      	ldr	r3, [sp, #16]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	dc37      	bgt.n	8011d44 <_dtoa_r+0x99c>
 8011cd4:	9b07      	ldr	r3, [sp, #28]
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	dd34      	ble.n	8011d44 <_dtoa_r+0x99c>
 8011cda:	9b04      	ldr	r3, [sp, #16]
 8011cdc:	9301      	str	r3, [sp, #4]
 8011cde:	9b01      	ldr	r3, [sp, #4]
 8011ce0:	b963      	cbnz	r3, 8011cfc <_dtoa_r+0x954>
 8011ce2:	4631      	mov	r1, r6
 8011ce4:	2205      	movs	r2, #5
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f000 fd68 	bl	80127bc <__multadd>
 8011cec:	4601      	mov	r1, r0
 8011cee:	4606      	mov	r6, r0
 8011cf0:	4650      	mov	r0, sl
 8011cf2:	f000 ffc7 	bl	8012c84 <__mcmp>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	f73f adbb 	bgt.w	8011872 <_dtoa_r+0x4ca>
 8011cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cfe:	9d00      	ldr	r5, [sp, #0]
 8011d00:	ea6f 0b03 	mvn.w	fp, r3
 8011d04:	f04f 0800 	mov.w	r8, #0
 8011d08:	4631      	mov	r1, r6
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 fd34 	bl	8012778 <_Bfree>
 8011d10:	2f00      	cmp	r7, #0
 8011d12:	f43f aeab 	beq.w	8011a6c <_dtoa_r+0x6c4>
 8011d16:	f1b8 0f00 	cmp.w	r8, #0
 8011d1a:	d005      	beq.n	8011d28 <_dtoa_r+0x980>
 8011d1c:	45b8      	cmp	r8, r7
 8011d1e:	d003      	beq.n	8011d28 <_dtoa_r+0x980>
 8011d20:	4641      	mov	r1, r8
 8011d22:	4620      	mov	r0, r4
 8011d24:	f000 fd28 	bl	8012778 <_Bfree>
 8011d28:	4639      	mov	r1, r7
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f000 fd24 	bl	8012778 <_Bfree>
 8011d30:	e69c      	b.n	8011a6c <_dtoa_r+0x6c4>
 8011d32:	2600      	movs	r6, #0
 8011d34:	4637      	mov	r7, r6
 8011d36:	e7e1      	b.n	8011cfc <_dtoa_r+0x954>
 8011d38:	46bb      	mov	fp, r7
 8011d3a:	4637      	mov	r7, r6
 8011d3c:	e599      	b.n	8011872 <_dtoa_r+0x4ca>
 8011d3e:	bf00      	nop
 8011d40:	40240000 	.word	0x40240000
 8011d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f000 80c8 	beq.w	8011edc <_dtoa_r+0xb34>
 8011d4c:	9b04      	ldr	r3, [sp, #16]
 8011d4e:	9301      	str	r3, [sp, #4]
 8011d50:	2d00      	cmp	r5, #0
 8011d52:	dd05      	ble.n	8011d60 <_dtoa_r+0x9b8>
 8011d54:	4639      	mov	r1, r7
 8011d56:	462a      	mov	r2, r5
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f000 ff27 	bl	8012bac <__lshift>
 8011d5e:	4607      	mov	r7, r0
 8011d60:	f1b8 0f00 	cmp.w	r8, #0
 8011d64:	d05b      	beq.n	8011e1e <_dtoa_r+0xa76>
 8011d66:	6879      	ldr	r1, [r7, #4]
 8011d68:	4620      	mov	r0, r4
 8011d6a:	f000 fcc5 	bl	80126f8 <_Balloc>
 8011d6e:	4605      	mov	r5, r0
 8011d70:	b928      	cbnz	r0, 8011d7e <_dtoa_r+0x9d6>
 8011d72:	4b83      	ldr	r3, [pc, #524]	; (8011f80 <_dtoa_r+0xbd8>)
 8011d74:	4602      	mov	r2, r0
 8011d76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011d7a:	f7ff bb2e 	b.w	80113da <_dtoa_r+0x32>
 8011d7e:	693a      	ldr	r2, [r7, #16]
 8011d80:	3202      	adds	r2, #2
 8011d82:	0092      	lsls	r2, r2, #2
 8011d84:	f107 010c 	add.w	r1, r7, #12
 8011d88:	300c      	adds	r0, #12
 8011d8a:	f7ff fa4a 	bl	8011222 <memcpy>
 8011d8e:	2201      	movs	r2, #1
 8011d90:	4629      	mov	r1, r5
 8011d92:	4620      	mov	r0, r4
 8011d94:	f000 ff0a 	bl	8012bac <__lshift>
 8011d98:	9b00      	ldr	r3, [sp, #0]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011da2:	4413      	add	r3, r2
 8011da4:	9308      	str	r3, [sp, #32]
 8011da6:	9b02      	ldr	r3, [sp, #8]
 8011da8:	f003 0301 	and.w	r3, r3, #1
 8011dac:	46b8      	mov	r8, r7
 8011dae:	9306      	str	r3, [sp, #24]
 8011db0:	4607      	mov	r7, r0
 8011db2:	9b04      	ldr	r3, [sp, #16]
 8011db4:	4631      	mov	r1, r6
 8011db6:	3b01      	subs	r3, #1
 8011db8:	4650      	mov	r0, sl
 8011dba:	9301      	str	r3, [sp, #4]
 8011dbc:	f7ff fa6c 	bl	8011298 <quorem>
 8011dc0:	4641      	mov	r1, r8
 8011dc2:	9002      	str	r0, [sp, #8]
 8011dc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011dc8:	4650      	mov	r0, sl
 8011dca:	f000 ff5b 	bl	8012c84 <__mcmp>
 8011dce:	463a      	mov	r2, r7
 8011dd0:	9005      	str	r0, [sp, #20]
 8011dd2:	4631      	mov	r1, r6
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f000 ff71 	bl	8012cbc <__mdiff>
 8011dda:	68c2      	ldr	r2, [r0, #12]
 8011ddc:	4605      	mov	r5, r0
 8011dde:	bb02      	cbnz	r2, 8011e22 <_dtoa_r+0xa7a>
 8011de0:	4601      	mov	r1, r0
 8011de2:	4650      	mov	r0, sl
 8011de4:	f000 ff4e 	bl	8012c84 <__mcmp>
 8011de8:	4602      	mov	r2, r0
 8011dea:	4629      	mov	r1, r5
 8011dec:	4620      	mov	r0, r4
 8011dee:	9209      	str	r2, [sp, #36]	; 0x24
 8011df0:	f000 fcc2 	bl	8012778 <_Bfree>
 8011df4:	9b07      	ldr	r3, [sp, #28]
 8011df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011df8:	9d04      	ldr	r5, [sp, #16]
 8011dfa:	ea43 0102 	orr.w	r1, r3, r2
 8011dfe:	9b06      	ldr	r3, [sp, #24]
 8011e00:	4319      	orrs	r1, r3
 8011e02:	d110      	bne.n	8011e26 <_dtoa_r+0xa7e>
 8011e04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011e08:	d029      	beq.n	8011e5e <_dtoa_r+0xab6>
 8011e0a:	9b05      	ldr	r3, [sp, #20]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	dd02      	ble.n	8011e16 <_dtoa_r+0xa6e>
 8011e10:	9b02      	ldr	r3, [sp, #8]
 8011e12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	f883 9000 	strb.w	r9, [r3]
 8011e1c:	e774      	b.n	8011d08 <_dtoa_r+0x960>
 8011e1e:	4638      	mov	r0, r7
 8011e20:	e7ba      	b.n	8011d98 <_dtoa_r+0x9f0>
 8011e22:	2201      	movs	r2, #1
 8011e24:	e7e1      	b.n	8011dea <_dtoa_r+0xa42>
 8011e26:	9b05      	ldr	r3, [sp, #20]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	db04      	blt.n	8011e36 <_dtoa_r+0xa8e>
 8011e2c:	9907      	ldr	r1, [sp, #28]
 8011e2e:	430b      	orrs	r3, r1
 8011e30:	9906      	ldr	r1, [sp, #24]
 8011e32:	430b      	orrs	r3, r1
 8011e34:	d120      	bne.n	8011e78 <_dtoa_r+0xad0>
 8011e36:	2a00      	cmp	r2, #0
 8011e38:	dded      	ble.n	8011e16 <_dtoa_r+0xa6e>
 8011e3a:	4651      	mov	r1, sl
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f000 feb4 	bl	8012bac <__lshift>
 8011e44:	4631      	mov	r1, r6
 8011e46:	4682      	mov	sl, r0
 8011e48:	f000 ff1c 	bl	8012c84 <__mcmp>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	dc03      	bgt.n	8011e58 <_dtoa_r+0xab0>
 8011e50:	d1e1      	bne.n	8011e16 <_dtoa_r+0xa6e>
 8011e52:	f019 0f01 	tst.w	r9, #1
 8011e56:	d0de      	beq.n	8011e16 <_dtoa_r+0xa6e>
 8011e58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011e5c:	d1d8      	bne.n	8011e10 <_dtoa_r+0xa68>
 8011e5e:	9a01      	ldr	r2, [sp, #4]
 8011e60:	2339      	movs	r3, #57	; 0x39
 8011e62:	7013      	strb	r3, [r2, #0]
 8011e64:	462b      	mov	r3, r5
 8011e66:	461d      	mov	r5, r3
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011e6e:	2a39      	cmp	r2, #57	; 0x39
 8011e70:	d06c      	beq.n	8011f4c <_dtoa_r+0xba4>
 8011e72:	3201      	adds	r2, #1
 8011e74:	701a      	strb	r2, [r3, #0]
 8011e76:	e747      	b.n	8011d08 <_dtoa_r+0x960>
 8011e78:	2a00      	cmp	r2, #0
 8011e7a:	dd07      	ble.n	8011e8c <_dtoa_r+0xae4>
 8011e7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011e80:	d0ed      	beq.n	8011e5e <_dtoa_r+0xab6>
 8011e82:	9a01      	ldr	r2, [sp, #4]
 8011e84:	f109 0301 	add.w	r3, r9, #1
 8011e88:	7013      	strb	r3, [r2, #0]
 8011e8a:	e73d      	b.n	8011d08 <_dtoa_r+0x960>
 8011e8c:	9b04      	ldr	r3, [sp, #16]
 8011e8e:	9a08      	ldr	r2, [sp, #32]
 8011e90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d043      	beq.n	8011f20 <_dtoa_r+0xb78>
 8011e98:	4651      	mov	r1, sl
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	220a      	movs	r2, #10
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f000 fc8c 	bl	80127bc <__multadd>
 8011ea4:	45b8      	cmp	r8, r7
 8011ea6:	4682      	mov	sl, r0
 8011ea8:	f04f 0300 	mov.w	r3, #0
 8011eac:	f04f 020a 	mov.w	r2, #10
 8011eb0:	4641      	mov	r1, r8
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	d107      	bne.n	8011ec6 <_dtoa_r+0xb1e>
 8011eb6:	f000 fc81 	bl	80127bc <__multadd>
 8011eba:	4680      	mov	r8, r0
 8011ebc:	4607      	mov	r7, r0
 8011ebe:	9b04      	ldr	r3, [sp, #16]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	e775      	b.n	8011db2 <_dtoa_r+0xa0a>
 8011ec6:	f000 fc79 	bl	80127bc <__multadd>
 8011eca:	4639      	mov	r1, r7
 8011ecc:	4680      	mov	r8, r0
 8011ece:	2300      	movs	r3, #0
 8011ed0:	220a      	movs	r2, #10
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f000 fc72 	bl	80127bc <__multadd>
 8011ed8:	4607      	mov	r7, r0
 8011eda:	e7f0      	b.n	8011ebe <_dtoa_r+0xb16>
 8011edc:	9b04      	ldr	r3, [sp, #16]
 8011ede:	9301      	str	r3, [sp, #4]
 8011ee0:	9d00      	ldr	r5, [sp, #0]
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	4650      	mov	r0, sl
 8011ee6:	f7ff f9d7 	bl	8011298 <quorem>
 8011eea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011eee:	9b00      	ldr	r3, [sp, #0]
 8011ef0:	f805 9b01 	strb.w	r9, [r5], #1
 8011ef4:	1aea      	subs	r2, r5, r3
 8011ef6:	9b01      	ldr	r3, [sp, #4]
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	dd07      	ble.n	8011f0c <_dtoa_r+0xb64>
 8011efc:	4651      	mov	r1, sl
 8011efe:	2300      	movs	r3, #0
 8011f00:	220a      	movs	r2, #10
 8011f02:	4620      	mov	r0, r4
 8011f04:	f000 fc5a 	bl	80127bc <__multadd>
 8011f08:	4682      	mov	sl, r0
 8011f0a:	e7ea      	b.n	8011ee2 <_dtoa_r+0xb3a>
 8011f0c:	9b01      	ldr	r3, [sp, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	bfc8      	it	gt
 8011f12:	461d      	movgt	r5, r3
 8011f14:	9b00      	ldr	r3, [sp, #0]
 8011f16:	bfd8      	it	le
 8011f18:	2501      	movle	r5, #1
 8011f1a:	441d      	add	r5, r3
 8011f1c:	f04f 0800 	mov.w	r8, #0
 8011f20:	4651      	mov	r1, sl
 8011f22:	2201      	movs	r2, #1
 8011f24:	4620      	mov	r0, r4
 8011f26:	f000 fe41 	bl	8012bac <__lshift>
 8011f2a:	4631      	mov	r1, r6
 8011f2c:	4682      	mov	sl, r0
 8011f2e:	f000 fea9 	bl	8012c84 <__mcmp>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	dc96      	bgt.n	8011e64 <_dtoa_r+0xabc>
 8011f36:	d102      	bne.n	8011f3e <_dtoa_r+0xb96>
 8011f38:	f019 0f01 	tst.w	r9, #1
 8011f3c:	d192      	bne.n	8011e64 <_dtoa_r+0xabc>
 8011f3e:	462b      	mov	r3, r5
 8011f40:	461d      	mov	r5, r3
 8011f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f46:	2a30      	cmp	r2, #48	; 0x30
 8011f48:	d0fa      	beq.n	8011f40 <_dtoa_r+0xb98>
 8011f4a:	e6dd      	b.n	8011d08 <_dtoa_r+0x960>
 8011f4c:	9a00      	ldr	r2, [sp, #0]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d189      	bne.n	8011e66 <_dtoa_r+0xabe>
 8011f52:	f10b 0b01 	add.w	fp, fp, #1
 8011f56:	2331      	movs	r3, #49	; 0x31
 8011f58:	e796      	b.n	8011e88 <_dtoa_r+0xae0>
 8011f5a:	4b0a      	ldr	r3, [pc, #40]	; (8011f84 <_dtoa_r+0xbdc>)
 8011f5c:	f7ff ba99 	b.w	8011492 <_dtoa_r+0xea>
 8011f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	f47f aa6d 	bne.w	8011442 <_dtoa_r+0x9a>
 8011f68:	4b07      	ldr	r3, [pc, #28]	; (8011f88 <_dtoa_r+0xbe0>)
 8011f6a:	f7ff ba92 	b.w	8011492 <_dtoa_r+0xea>
 8011f6e:	9b01      	ldr	r3, [sp, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	dcb5      	bgt.n	8011ee0 <_dtoa_r+0xb38>
 8011f74:	9b07      	ldr	r3, [sp, #28]
 8011f76:	2b02      	cmp	r3, #2
 8011f78:	f73f aeb1 	bgt.w	8011cde <_dtoa_r+0x936>
 8011f7c:	e7b0      	b.n	8011ee0 <_dtoa_r+0xb38>
 8011f7e:	bf00      	nop
 8011f80:	08013e34 	.word	0x08013e34
 8011f84:	08013cf1 	.word	0x08013cf1
 8011f88:	08013dcf 	.word	0x08013dcf

08011f8c <_free_r>:
 8011f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f8e:	2900      	cmp	r1, #0
 8011f90:	d044      	beq.n	801201c <_free_r+0x90>
 8011f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f96:	9001      	str	r0, [sp, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8011f9e:	bfb8      	it	lt
 8011fa0:	18e4      	addlt	r4, r4, r3
 8011fa2:	f7fd f941 	bl	800f228 <__malloc_lock>
 8011fa6:	4a1e      	ldr	r2, [pc, #120]	; (8012020 <_free_r+0x94>)
 8011fa8:	9801      	ldr	r0, [sp, #4]
 8011faa:	6813      	ldr	r3, [r2, #0]
 8011fac:	b933      	cbnz	r3, 8011fbc <_free_r+0x30>
 8011fae:	6063      	str	r3, [r4, #4]
 8011fb0:	6014      	str	r4, [r2, #0]
 8011fb2:	b003      	add	sp, #12
 8011fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fb8:	f7fd b93c 	b.w	800f234 <__malloc_unlock>
 8011fbc:	42a3      	cmp	r3, r4
 8011fbe:	d908      	bls.n	8011fd2 <_free_r+0x46>
 8011fc0:	6825      	ldr	r5, [r4, #0]
 8011fc2:	1961      	adds	r1, r4, r5
 8011fc4:	428b      	cmp	r3, r1
 8011fc6:	bf01      	itttt	eq
 8011fc8:	6819      	ldreq	r1, [r3, #0]
 8011fca:	685b      	ldreq	r3, [r3, #4]
 8011fcc:	1949      	addeq	r1, r1, r5
 8011fce:	6021      	streq	r1, [r4, #0]
 8011fd0:	e7ed      	b.n	8011fae <_free_r+0x22>
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	b10b      	cbz	r3, 8011fdc <_free_r+0x50>
 8011fd8:	42a3      	cmp	r3, r4
 8011fda:	d9fa      	bls.n	8011fd2 <_free_r+0x46>
 8011fdc:	6811      	ldr	r1, [r2, #0]
 8011fde:	1855      	adds	r5, r2, r1
 8011fe0:	42a5      	cmp	r5, r4
 8011fe2:	d10b      	bne.n	8011ffc <_free_r+0x70>
 8011fe4:	6824      	ldr	r4, [r4, #0]
 8011fe6:	4421      	add	r1, r4
 8011fe8:	1854      	adds	r4, r2, r1
 8011fea:	42a3      	cmp	r3, r4
 8011fec:	6011      	str	r1, [r2, #0]
 8011fee:	d1e0      	bne.n	8011fb2 <_free_r+0x26>
 8011ff0:	681c      	ldr	r4, [r3, #0]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	6053      	str	r3, [r2, #4]
 8011ff6:	440c      	add	r4, r1
 8011ff8:	6014      	str	r4, [r2, #0]
 8011ffa:	e7da      	b.n	8011fb2 <_free_r+0x26>
 8011ffc:	d902      	bls.n	8012004 <_free_r+0x78>
 8011ffe:	230c      	movs	r3, #12
 8012000:	6003      	str	r3, [r0, #0]
 8012002:	e7d6      	b.n	8011fb2 <_free_r+0x26>
 8012004:	6825      	ldr	r5, [r4, #0]
 8012006:	1961      	adds	r1, r4, r5
 8012008:	428b      	cmp	r3, r1
 801200a:	bf04      	itt	eq
 801200c:	6819      	ldreq	r1, [r3, #0]
 801200e:	685b      	ldreq	r3, [r3, #4]
 8012010:	6063      	str	r3, [r4, #4]
 8012012:	bf04      	itt	eq
 8012014:	1949      	addeq	r1, r1, r5
 8012016:	6021      	streq	r1, [r4, #0]
 8012018:	6054      	str	r4, [r2, #4]
 801201a:	e7ca      	b.n	8011fb2 <_free_r+0x26>
 801201c:	b003      	add	sp, #12
 801201e:	bd30      	pop	{r4, r5, pc}
 8012020:	20001db4 	.word	0x20001db4

08012024 <rshift>:
 8012024:	6903      	ldr	r3, [r0, #16]
 8012026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801202a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801202e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012032:	f100 0414 	add.w	r4, r0, #20
 8012036:	dd45      	ble.n	80120c4 <rshift+0xa0>
 8012038:	f011 011f 	ands.w	r1, r1, #31
 801203c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012044:	d10c      	bne.n	8012060 <rshift+0x3c>
 8012046:	f100 0710 	add.w	r7, r0, #16
 801204a:	4629      	mov	r1, r5
 801204c:	42b1      	cmp	r1, r6
 801204e:	d334      	bcc.n	80120ba <rshift+0x96>
 8012050:	1a9b      	subs	r3, r3, r2
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	1eea      	subs	r2, r5, #3
 8012056:	4296      	cmp	r6, r2
 8012058:	bf38      	it	cc
 801205a:	2300      	movcc	r3, #0
 801205c:	4423      	add	r3, r4
 801205e:	e015      	b.n	801208c <rshift+0x68>
 8012060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012064:	f1c1 0820 	rsb	r8, r1, #32
 8012068:	40cf      	lsrs	r7, r1
 801206a:	f105 0e04 	add.w	lr, r5, #4
 801206e:	46a1      	mov	r9, r4
 8012070:	4576      	cmp	r6, lr
 8012072:	46f4      	mov	ip, lr
 8012074:	d815      	bhi.n	80120a2 <rshift+0x7e>
 8012076:	1a9a      	subs	r2, r3, r2
 8012078:	0092      	lsls	r2, r2, #2
 801207a:	3a04      	subs	r2, #4
 801207c:	3501      	adds	r5, #1
 801207e:	42ae      	cmp	r6, r5
 8012080:	bf38      	it	cc
 8012082:	2200      	movcc	r2, #0
 8012084:	18a3      	adds	r3, r4, r2
 8012086:	50a7      	str	r7, [r4, r2]
 8012088:	b107      	cbz	r7, 801208c <rshift+0x68>
 801208a:	3304      	adds	r3, #4
 801208c:	1b1a      	subs	r2, r3, r4
 801208e:	42a3      	cmp	r3, r4
 8012090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012094:	bf08      	it	eq
 8012096:	2300      	moveq	r3, #0
 8012098:	6102      	str	r2, [r0, #16]
 801209a:	bf08      	it	eq
 801209c:	6143      	streq	r3, [r0, #20]
 801209e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120a2:	f8dc c000 	ldr.w	ip, [ip]
 80120a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80120aa:	ea4c 0707 	orr.w	r7, ip, r7
 80120ae:	f849 7b04 	str.w	r7, [r9], #4
 80120b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80120b6:	40cf      	lsrs	r7, r1
 80120b8:	e7da      	b.n	8012070 <rshift+0x4c>
 80120ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80120be:	f847 cf04 	str.w	ip, [r7, #4]!
 80120c2:	e7c3      	b.n	801204c <rshift+0x28>
 80120c4:	4623      	mov	r3, r4
 80120c6:	e7e1      	b.n	801208c <rshift+0x68>

080120c8 <__hexdig_fun>:
 80120c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80120cc:	2b09      	cmp	r3, #9
 80120ce:	d802      	bhi.n	80120d6 <__hexdig_fun+0xe>
 80120d0:	3820      	subs	r0, #32
 80120d2:	b2c0      	uxtb	r0, r0
 80120d4:	4770      	bx	lr
 80120d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80120da:	2b05      	cmp	r3, #5
 80120dc:	d801      	bhi.n	80120e2 <__hexdig_fun+0x1a>
 80120de:	3847      	subs	r0, #71	; 0x47
 80120e0:	e7f7      	b.n	80120d2 <__hexdig_fun+0xa>
 80120e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80120e6:	2b05      	cmp	r3, #5
 80120e8:	d801      	bhi.n	80120ee <__hexdig_fun+0x26>
 80120ea:	3827      	subs	r0, #39	; 0x27
 80120ec:	e7f1      	b.n	80120d2 <__hexdig_fun+0xa>
 80120ee:	2000      	movs	r0, #0
 80120f0:	4770      	bx	lr
	...

080120f4 <__gethex>:
 80120f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f8:	4617      	mov	r7, r2
 80120fa:	680a      	ldr	r2, [r1, #0]
 80120fc:	b085      	sub	sp, #20
 80120fe:	f102 0b02 	add.w	fp, r2, #2
 8012102:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012106:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801210a:	4681      	mov	r9, r0
 801210c:	468a      	mov	sl, r1
 801210e:	9302      	str	r3, [sp, #8]
 8012110:	32fe      	adds	r2, #254	; 0xfe
 8012112:	eb02 030b 	add.w	r3, r2, fp
 8012116:	46d8      	mov	r8, fp
 8012118:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801211c:	9301      	str	r3, [sp, #4]
 801211e:	2830      	cmp	r0, #48	; 0x30
 8012120:	d0f7      	beq.n	8012112 <__gethex+0x1e>
 8012122:	f7ff ffd1 	bl	80120c8 <__hexdig_fun>
 8012126:	4604      	mov	r4, r0
 8012128:	2800      	cmp	r0, #0
 801212a:	d138      	bne.n	801219e <__gethex+0xaa>
 801212c:	49a7      	ldr	r1, [pc, #668]	; (80123cc <__gethex+0x2d8>)
 801212e:	2201      	movs	r2, #1
 8012130:	4640      	mov	r0, r8
 8012132:	f7fe ff62 	bl	8010ffa <strncmp>
 8012136:	4606      	mov	r6, r0
 8012138:	2800      	cmp	r0, #0
 801213a:	d169      	bne.n	8012210 <__gethex+0x11c>
 801213c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012140:	465d      	mov	r5, fp
 8012142:	f7ff ffc1 	bl	80120c8 <__hexdig_fun>
 8012146:	2800      	cmp	r0, #0
 8012148:	d064      	beq.n	8012214 <__gethex+0x120>
 801214a:	465a      	mov	r2, fp
 801214c:	7810      	ldrb	r0, [r2, #0]
 801214e:	2830      	cmp	r0, #48	; 0x30
 8012150:	4690      	mov	r8, r2
 8012152:	f102 0201 	add.w	r2, r2, #1
 8012156:	d0f9      	beq.n	801214c <__gethex+0x58>
 8012158:	f7ff ffb6 	bl	80120c8 <__hexdig_fun>
 801215c:	2301      	movs	r3, #1
 801215e:	fab0 f480 	clz	r4, r0
 8012162:	0964      	lsrs	r4, r4, #5
 8012164:	465e      	mov	r6, fp
 8012166:	9301      	str	r3, [sp, #4]
 8012168:	4642      	mov	r2, r8
 801216a:	4615      	mov	r5, r2
 801216c:	3201      	adds	r2, #1
 801216e:	7828      	ldrb	r0, [r5, #0]
 8012170:	f7ff ffaa 	bl	80120c8 <__hexdig_fun>
 8012174:	2800      	cmp	r0, #0
 8012176:	d1f8      	bne.n	801216a <__gethex+0x76>
 8012178:	4994      	ldr	r1, [pc, #592]	; (80123cc <__gethex+0x2d8>)
 801217a:	2201      	movs	r2, #1
 801217c:	4628      	mov	r0, r5
 801217e:	f7fe ff3c 	bl	8010ffa <strncmp>
 8012182:	b978      	cbnz	r0, 80121a4 <__gethex+0xb0>
 8012184:	b946      	cbnz	r6, 8012198 <__gethex+0xa4>
 8012186:	1c6e      	adds	r6, r5, #1
 8012188:	4632      	mov	r2, r6
 801218a:	4615      	mov	r5, r2
 801218c:	3201      	adds	r2, #1
 801218e:	7828      	ldrb	r0, [r5, #0]
 8012190:	f7ff ff9a 	bl	80120c8 <__hexdig_fun>
 8012194:	2800      	cmp	r0, #0
 8012196:	d1f8      	bne.n	801218a <__gethex+0x96>
 8012198:	1b73      	subs	r3, r6, r5
 801219a:	009e      	lsls	r6, r3, #2
 801219c:	e004      	b.n	80121a8 <__gethex+0xb4>
 801219e:	2400      	movs	r4, #0
 80121a0:	4626      	mov	r6, r4
 80121a2:	e7e1      	b.n	8012168 <__gethex+0x74>
 80121a4:	2e00      	cmp	r6, #0
 80121a6:	d1f7      	bne.n	8012198 <__gethex+0xa4>
 80121a8:	782b      	ldrb	r3, [r5, #0]
 80121aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80121ae:	2b50      	cmp	r3, #80	; 0x50
 80121b0:	d13d      	bne.n	801222e <__gethex+0x13a>
 80121b2:	786b      	ldrb	r3, [r5, #1]
 80121b4:	2b2b      	cmp	r3, #43	; 0x2b
 80121b6:	d02f      	beq.n	8012218 <__gethex+0x124>
 80121b8:	2b2d      	cmp	r3, #45	; 0x2d
 80121ba:	d031      	beq.n	8012220 <__gethex+0x12c>
 80121bc:	1c69      	adds	r1, r5, #1
 80121be:	f04f 0b00 	mov.w	fp, #0
 80121c2:	7808      	ldrb	r0, [r1, #0]
 80121c4:	f7ff ff80 	bl	80120c8 <__hexdig_fun>
 80121c8:	1e42      	subs	r2, r0, #1
 80121ca:	b2d2      	uxtb	r2, r2
 80121cc:	2a18      	cmp	r2, #24
 80121ce:	d82e      	bhi.n	801222e <__gethex+0x13a>
 80121d0:	f1a0 0210 	sub.w	r2, r0, #16
 80121d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80121d8:	f7ff ff76 	bl	80120c8 <__hexdig_fun>
 80121dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80121e0:	fa5f fc8c 	uxtb.w	ip, ip
 80121e4:	f1bc 0f18 	cmp.w	ip, #24
 80121e8:	d91d      	bls.n	8012226 <__gethex+0x132>
 80121ea:	f1bb 0f00 	cmp.w	fp, #0
 80121ee:	d000      	beq.n	80121f2 <__gethex+0xfe>
 80121f0:	4252      	negs	r2, r2
 80121f2:	4416      	add	r6, r2
 80121f4:	f8ca 1000 	str.w	r1, [sl]
 80121f8:	b1dc      	cbz	r4, 8012232 <__gethex+0x13e>
 80121fa:	9b01      	ldr	r3, [sp, #4]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	bf14      	ite	ne
 8012200:	f04f 0800 	movne.w	r8, #0
 8012204:	f04f 0806 	moveq.w	r8, #6
 8012208:	4640      	mov	r0, r8
 801220a:	b005      	add	sp, #20
 801220c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012210:	4645      	mov	r5, r8
 8012212:	4626      	mov	r6, r4
 8012214:	2401      	movs	r4, #1
 8012216:	e7c7      	b.n	80121a8 <__gethex+0xb4>
 8012218:	f04f 0b00 	mov.w	fp, #0
 801221c:	1ca9      	adds	r1, r5, #2
 801221e:	e7d0      	b.n	80121c2 <__gethex+0xce>
 8012220:	f04f 0b01 	mov.w	fp, #1
 8012224:	e7fa      	b.n	801221c <__gethex+0x128>
 8012226:	230a      	movs	r3, #10
 8012228:	fb03 0002 	mla	r0, r3, r2, r0
 801222c:	e7d0      	b.n	80121d0 <__gethex+0xdc>
 801222e:	4629      	mov	r1, r5
 8012230:	e7e0      	b.n	80121f4 <__gethex+0x100>
 8012232:	eba5 0308 	sub.w	r3, r5, r8
 8012236:	3b01      	subs	r3, #1
 8012238:	4621      	mov	r1, r4
 801223a:	2b07      	cmp	r3, #7
 801223c:	dc0a      	bgt.n	8012254 <__gethex+0x160>
 801223e:	4648      	mov	r0, r9
 8012240:	f000 fa5a 	bl	80126f8 <_Balloc>
 8012244:	4604      	mov	r4, r0
 8012246:	b940      	cbnz	r0, 801225a <__gethex+0x166>
 8012248:	4b61      	ldr	r3, [pc, #388]	; (80123d0 <__gethex+0x2dc>)
 801224a:	4602      	mov	r2, r0
 801224c:	21e4      	movs	r1, #228	; 0xe4
 801224e:	4861      	ldr	r0, [pc, #388]	; (80123d4 <__gethex+0x2e0>)
 8012250:	f7ff f804 	bl	801125c <__assert_func>
 8012254:	3101      	adds	r1, #1
 8012256:	105b      	asrs	r3, r3, #1
 8012258:	e7ef      	b.n	801223a <__gethex+0x146>
 801225a:	f100 0a14 	add.w	sl, r0, #20
 801225e:	2300      	movs	r3, #0
 8012260:	495a      	ldr	r1, [pc, #360]	; (80123cc <__gethex+0x2d8>)
 8012262:	f8cd a004 	str.w	sl, [sp, #4]
 8012266:	469b      	mov	fp, r3
 8012268:	45a8      	cmp	r8, r5
 801226a:	d342      	bcc.n	80122f2 <__gethex+0x1fe>
 801226c:	9801      	ldr	r0, [sp, #4]
 801226e:	f840 bb04 	str.w	fp, [r0], #4
 8012272:	eba0 000a 	sub.w	r0, r0, sl
 8012276:	1080      	asrs	r0, r0, #2
 8012278:	6120      	str	r0, [r4, #16]
 801227a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801227e:	4658      	mov	r0, fp
 8012280:	f000 fb2c 	bl	80128dc <__hi0bits>
 8012284:	683d      	ldr	r5, [r7, #0]
 8012286:	eba8 0000 	sub.w	r0, r8, r0
 801228a:	42a8      	cmp	r0, r5
 801228c:	dd59      	ble.n	8012342 <__gethex+0x24e>
 801228e:	eba0 0805 	sub.w	r8, r0, r5
 8012292:	4641      	mov	r1, r8
 8012294:	4620      	mov	r0, r4
 8012296:	f000 febb 	bl	8013010 <__any_on>
 801229a:	4683      	mov	fp, r0
 801229c:	b1b8      	cbz	r0, 80122ce <__gethex+0x1da>
 801229e:	f108 33ff 	add.w	r3, r8, #4294967295
 80122a2:	1159      	asrs	r1, r3, #5
 80122a4:	f003 021f 	and.w	r2, r3, #31
 80122a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80122ac:	f04f 0b01 	mov.w	fp, #1
 80122b0:	fa0b f202 	lsl.w	r2, fp, r2
 80122b4:	420a      	tst	r2, r1
 80122b6:	d00a      	beq.n	80122ce <__gethex+0x1da>
 80122b8:	455b      	cmp	r3, fp
 80122ba:	dd06      	ble.n	80122ca <__gethex+0x1d6>
 80122bc:	f1a8 0102 	sub.w	r1, r8, #2
 80122c0:	4620      	mov	r0, r4
 80122c2:	f000 fea5 	bl	8013010 <__any_on>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d138      	bne.n	801233c <__gethex+0x248>
 80122ca:	f04f 0b02 	mov.w	fp, #2
 80122ce:	4641      	mov	r1, r8
 80122d0:	4620      	mov	r0, r4
 80122d2:	f7ff fea7 	bl	8012024 <rshift>
 80122d6:	4446      	add	r6, r8
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	42b3      	cmp	r3, r6
 80122dc:	da41      	bge.n	8012362 <__gethex+0x26e>
 80122de:	4621      	mov	r1, r4
 80122e0:	4648      	mov	r0, r9
 80122e2:	f000 fa49 	bl	8012778 <_Bfree>
 80122e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122e8:	2300      	movs	r3, #0
 80122ea:	6013      	str	r3, [r2, #0]
 80122ec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80122f0:	e78a      	b.n	8012208 <__gethex+0x114>
 80122f2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80122f6:	2a2e      	cmp	r2, #46	; 0x2e
 80122f8:	d014      	beq.n	8012324 <__gethex+0x230>
 80122fa:	2b20      	cmp	r3, #32
 80122fc:	d106      	bne.n	801230c <__gethex+0x218>
 80122fe:	9b01      	ldr	r3, [sp, #4]
 8012300:	f843 bb04 	str.w	fp, [r3], #4
 8012304:	f04f 0b00 	mov.w	fp, #0
 8012308:	9301      	str	r3, [sp, #4]
 801230a:	465b      	mov	r3, fp
 801230c:	7828      	ldrb	r0, [r5, #0]
 801230e:	9303      	str	r3, [sp, #12]
 8012310:	f7ff feda 	bl	80120c8 <__hexdig_fun>
 8012314:	9b03      	ldr	r3, [sp, #12]
 8012316:	f000 000f 	and.w	r0, r0, #15
 801231a:	4098      	lsls	r0, r3
 801231c:	ea4b 0b00 	orr.w	fp, fp, r0
 8012320:	3304      	adds	r3, #4
 8012322:	e7a1      	b.n	8012268 <__gethex+0x174>
 8012324:	45a8      	cmp	r8, r5
 8012326:	d8e8      	bhi.n	80122fa <__gethex+0x206>
 8012328:	2201      	movs	r2, #1
 801232a:	4628      	mov	r0, r5
 801232c:	9303      	str	r3, [sp, #12]
 801232e:	f7fe fe64 	bl	8010ffa <strncmp>
 8012332:	4926      	ldr	r1, [pc, #152]	; (80123cc <__gethex+0x2d8>)
 8012334:	9b03      	ldr	r3, [sp, #12]
 8012336:	2800      	cmp	r0, #0
 8012338:	d1df      	bne.n	80122fa <__gethex+0x206>
 801233a:	e795      	b.n	8012268 <__gethex+0x174>
 801233c:	f04f 0b03 	mov.w	fp, #3
 8012340:	e7c5      	b.n	80122ce <__gethex+0x1da>
 8012342:	da0b      	bge.n	801235c <__gethex+0x268>
 8012344:	eba5 0800 	sub.w	r8, r5, r0
 8012348:	4621      	mov	r1, r4
 801234a:	4642      	mov	r2, r8
 801234c:	4648      	mov	r0, r9
 801234e:	f000 fc2d 	bl	8012bac <__lshift>
 8012352:	eba6 0608 	sub.w	r6, r6, r8
 8012356:	4604      	mov	r4, r0
 8012358:	f100 0a14 	add.w	sl, r0, #20
 801235c:	f04f 0b00 	mov.w	fp, #0
 8012360:	e7ba      	b.n	80122d8 <__gethex+0x1e4>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	42b3      	cmp	r3, r6
 8012366:	dd73      	ble.n	8012450 <__gethex+0x35c>
 8012368:	1b9e      	subs	r6, r3, r6
 801236a:	42b5      	cmp	r5, r6
 801236c:	dc34      	bgt.n	80123d8 <__gethex+0x2e4>
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2b02      	cmp	r3, #2
 8012372:	d023      	beq.n	80123bc <__gethex+0x2c8>
 8012374:	2b03      	cmp	r3, #3
 8012376:	d025      	beq.n	80123c4 <__gethex+0x2d0>
 8012378:	2b01      	cmp	r3, #1
 801237a:	d115      	bne.n	80123a8 <__gethex+0x2b4>
 801237c:	42b5      	cmp	r5, r6
 801237e:	d113      	bne.n	80123a8 <__gethex+0x2b4>
 8012380:	2d01      	cmp	r5, #1
 8012382:	d10b      	bne.n	801239c <__gethex+0x2a8>
 8012384:	9a02      	ldr	r2, [sp, #8]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6013      	str	r3, [r2, #0]
 801238a:	2301      	movs	r3, #1
 801238c:	6123      	str	r3, [r4, #16]
 801238e:	f8ca 3000 	str.w	r3, [sl]
 8012392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012394:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012398:	601c      	str	r4, [r3, #0]
 801239a:	e735      	b.n	8012208 <__gethex+0x114>
 801239c:	1e69      	subs	r1, r5, #1
 801239e:	4620      	mov	r0, r4
 80123a0:	f000 fe36 	bl	8013010 <__any_on>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d1ed      	bne.n	8012384 <__gethex+0x290>
 80123a8:	4621      	mov	r1, r4
 80123aa:	4648      	mov	r0, r9
 80123ac:	f000 f9e4 	bl	8012778 <_Bfree>
 80123b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123b2:	2300      	movs	r3, #0
 80123b4:	6013      	str	r3, [r2, #0]
 80123b6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80123ba:	e725      	b.n	8012208 <__gethex+0x114>
 80123bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d1f2      	bne.n	80123a8 <__gethex+0x2b4>
 80123c2:	e7df      	b.n	8012384 <__gethex+0x290>
 80123c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d1dc      	bne.n	8012384 <__gethex+0x290>
 80123ca:	e7ed      	b.n	80123a8 <__gethex+0x2b4>
 80123cc:	08013b8c 	.word	0x08013b8c
 80123d0:	08013e34 	.word	0x08013e34
 80123d4:	08013e45 	.word	0x08013e45
 80123d8:	f106 38ff 	add.w	r8, r6, #4294967295
 80123dc:	f1bb 0f00 	cmp.w	fp, #0
 80123e0:	d133      	bne.n	801244a <__gethex+0x356>
 80123e2:	f1b8 0f00 	cmp.w	r8, #0
 80123e6:	d004      	beq.n	80123f2 <__gethex+0x2fe>
 80123e8:	4641      	mov	r1, r8
 80123ea:	4620      	mov	r0, r4
 80123ec:	f000 fe10 	bl	8013010 <__any_on>
 80123f0:	4683      	mov	fp, r0
 80123f2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80123f6:	2301      	movs	r3, #1
 80123f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80123fc:	f008 081f 	and.w	r8, r8, #31
 8012400:	fa03 f308 	lsl.w	r3, r3, r8
 8012404:	4213      	tst	r3, r2
 8012406:	4631      	mov	r1, r6
 8012408:	4620      	mov	r0, r4
 801240a:	bf18      	it	ne
 801240c:	f04b 0b02 	orrne.w	fp, fp, #2
 8012410:	1bad      	subs	r5, r5, r6
 8012412:	f7ff fe07 	bl	8012024 <rshift>
 8012416:	687e      	ldr	r6, [r7, #4]
 8012418:	f04f 0802 	mov.w	r8, #2
 801241c:	f1bb 0f00 	cmp.w	fp, #0
 8012420:	d04a      	beq.n	80124b8 <__gethex+0x3c4>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2b02      	cmp	r3, #2
 8012426:	d016      	beq.n	8012456 <__gethex+0x362>
 8012428:	2b03      	cmp	r3, #3
 801242a:	d018      	beq.n	801245e <__gethex+0x36a>
 801242c:	2b01      	cmp	r3, #1
 801242e:	d109      	bne.n	8012444 <__gethex+0x350>
 8012430:	f01b 0f02 	tst.w	fp, #2
 8012434:	d006      	beq.n	8012444 <__gethex+0x350>
 8012436:	f8da 3000 	ldr.w	r3, [sl]
 801243a:	ea4b 0b03 	orr.w	fp, fp, r3
 801243e:	f01b 0f01 	tst.w	fp, #1
 8012442:	d10f      	bne.n	8012464 <__gethex+0x370>
 8012444:	f048 0810 	orr.w	r8, r8, #16
 8012448:	e036      	b.n	80124b8 <__gethex+0x3c4>
 801244a:	f04f 0b01 	mov.w	fp, #1
 801244e:	e7d0      	b.n	80123f2 <__gethex+0x2fe>
 8012450:	f04f 0801 	mov.w	r8, #1
 8012454:	e7e2      	b.n	801241c <__gethex+0x328>
 8012456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012458:	f1c3 0301 	rsb	r3, r3, #1
 801245c:	930f      	str	r3, [sp, #60]	; 0x3c
 801245e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012460:	2b00      	cmp	r3, #0
 8012462:	d0ef      	beq.n	8012444 <__gethex+0x350>
 8012464:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012468:	f104 0214 	add.w	r2, r4, #20
 801246c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012470:	9301      	str	r3, [sp, #4]
 8012472:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012476:	2300      	movs	r3, #0
 8012478:	4694      	mov	ip, r2
 801247a:	f852 1b04 	ldr.w	r1, [r2], #4
 801247e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012482:	d01e      	beq.n	80124c2 <__gethex+0x3ce>
 8012484:	3101      	adds	r1, #1
 8012486:	f8cc 1000 	str.w	r1, [ip]
 801248a:	f1b8 0f02 	cmp.w	r8, #2
 801248e:	f104 0214 	add.w	r2, r4, #20
 8012492:	d13d      	bne.n	8012510 <__gethex+0x41c>
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	3b01      	subs	r3, #1
 8012498:	42ab      	cmp	r3, r5
 801249a:	d10b      	bne.n	80124b4 <__gethex+0x3c0>
 801249c:	1169      	asrs	r1, r5, #5
 801249e:	2301      	movs	r3, #1
 80124a0:	f005 051f 	and.w	r5, r5, #31
 80124a4:	fa03 f505 	lsl.w	r5, r3, r5
 80124a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124ac:	421d      	tst	r5, r3
 80124ae:	bf18      	it	ne
 80124b0:	f04f 0801 	movne.w	r8, #1
 80124b4:	f048 0820 	orr.w	r8, r8, #32
 80124b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124ba:	601c      	str	r4, [r3, #0]
 80124bc:	9b02      	ldr	r3, [sp, #8]
 80124be:	601e      	str	r6, [r3, #0]
 80124c0:	e6a2      	b.n	8012208 <__gethex+0x114>
 80124c2:	4290      	cmp	r0, r2
 80124c4:	f842 3c04 	str.w	r3, [r2, #-4]
 80124c8:	d8d6      	bhi.n	8012478 <__gethex+0x384>
 80124ca:	68a2      	ldr	r2, [r4, #8]
 80124cc:	4593      	cmp	fp, r2
 80124ce:	db17      	blt.n	8012500 <__gethex+0x40c>
 80124d0:	6861      	ldr	r1, [r4, #4]
 80124d2:	4648      	mov	r0, r9
 80124d4:	3101      	adds	r1, #1
 80124d6:	f000 f90f 	bl	80126f8 <_Balloc>
 80124da:	4682      	mov	sl, r0
 80124dc:	b918      	cbnz	r0, 80124e6 <__gethex+0x3f2>
 80124de:	4b1b      	ldr	r3, [pc, #108]	; (801254c <__gethex+0x458>)
 80124e0:	4602      	mov	r2, r0
 80124e2:	2184      	movs	r1, #132	; 0x84
 80124e4:	e6b3      	b.n	801224e <__gethex+0x15a>
 80124e6:	6922      	ldr	r2, [r4, #16]
 80124e8:	3202      	adds	r2, #2
 80124ea:	f104 010c 	add.w	r1, r4, #12
 80124ee:	0092      	lsls	r2, r2, #2
 80124f0:	300c      	adds	r0, #12
 80124f2:	f7fe fe96 	bl	8011222 <memcpy>
 80124f6:	4621      	mov	r1, r4
 80124f8:	4648      	mov	r0, r9
 80124fa:	f000 f93d 	bl	8012778 <_Bfree>
 80124fe:	4654      	mov	r4, sl
 8012500:	6922      	ldr	r2, [r4, #16]
 8012502:	1c51      	adds	r1, r2, #1
 8012504:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012508:	6121      	str	r1, [r4, #16]
 801250a:	2101      	movs	r1, #1
 801250c:	6151      	str	r1, [r2, #20]
 801250e:	e7bc      	b.n	801248a <__gethex+0x396>
 8012510:	6921      	ldr	r1, [r4, #16]
 8012512:	4559      	cmp	r1, fp
 8012514:	dd0b      	ble.n	801252e <__gethex+0x43a>
 8012516:	2101      	movs	r1, #1
 8012518:	4620      	mov	r0, r4
 801251a:	f7ff fd83 	bl	8012024 <rshift>
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	3601      	adds	r6, #1
 8012522:	42b3      	cmp	r3, r6
 8012524:	f6ff aedb 	blt.w	80122de <__gethex+0x1ea>
 8012528:	f04f 0801 	mov.w	r8, #1
 801252c:	e7c2      	b.n	80124b4 <__gethex+0x3c0>
 801252e:	f015 051f 	ands.w	r5, r5, #31
 8012532:	d0f9      	beq.n	8012528 <__gethex+0x434>
 8012534:	9b01      	ldr	r3, [sp, #4]
 8012536:	441a      	add	r2, r3
 8012538:	f1c5 0520 	rsb	r5, r5, #32
 801253c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012540:	f000 f9cc 	bl	80128dc <__hi0bits>
 8012544:	42a8      	cmp	r0, r5
 8012546:	dbe6      	blt.n	8012516 <__gethex+0x422>
 8012548:	e7ee      	b.n	8012528 <__gethex+0x434>
 801254a:	bf00      	nop
 801254c:	08013e34 	.word	0x08013e34

08012550 <L_shift>:
 8012550:	f1c2 0208 	rsb	r2, r2, #8
 8012554:	0092      	lsls	r2, r2, #2
 8012556:	b570      	push	{r4, r5, r6, lr}
 8012558:	f1c2 0620 	rsb	r6, r2, #32
 801255c:	6843      	ldr	r3, [r0, #4]
 801255e:	6804      	ldr	r4, [r0, #0]
 8012560:	fa03 f506 	lsl.w	r5, r3, r6
 8012564:	432c      	orrs	r4, r5
 8012566:	40d3      	lsrs	r3, r2
 8012568:	6004      	str	r4, [r0, #0]
 801256a:	f840 3f04 	str.w	r3, [r0, #4]!
 801256e:	4288      	cmp	r0, r1
 8012570:	d3f4      	bcc.n	801255c <L_shift+0xc>
 8012572:	bd70      	pop	{r4, r5, r6, pc}

08012574 <__match>:
 8012574:	b530      	push	{r4, r5, lr}
 8012576:	6803      	ldr	r3, [r0, #0]
 8012578:	3301      	adds	r3, #1
 801257a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801257e:	b914      	cbnz	r4, 8012586 <__match+0x12>
 8012580:	6003      	str	r3, [r0, #0]
 8012582:	2001      	movs	r0, #1
 8012584:	bd30      	pop	{r4, r5, pc}
 8012586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801258a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801258e:	2d19      	cmp	r5, #25
 8012590:	bf98      	it	ls
 8012592:	3220      	addls	r2, #32
 8012594:	42a2      	cmp	r2, r4
 8012596:	d0f0      	beq.n	801257a <__match+0x6>
 8012598:	2000      	movs	r0, #0
 801259a:	e7f3      	b.n	8012584 <__match+0x10>

0801259c <__hexnan>:
 801259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a0:	680b      	ldr	r3, [r1, #0]
 80125a2:	6801      	ldr	r1, [r0, #0]
 80125a4:	115e      	asrs	r6, r3, #5
 80125a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125aa:	f013 031f 	ands.w	r3, r3, #31
 80125ae:	b087      	sub	sp, #28
 80125b0:	bf18      	it	ne
 80125b2:	3604      	addne	r6, #4
 80125b4:	2500      	movs	r5, #0
 80125b6:	1f37      	subs	r7, r6, #4
 80125b8:	4682      	mov	sl, r0
 80125ba:	4690      	mov	r8, r2
 80125bc:	9301      	str	r3, [sp, #4]
 80125be:	f846 5c04 	str.w	r5, [r6, #-4]
 80125c2:	46b9      	mov	r9, r7
 80125c4:	463c      	mov	r4, r7
 80125c6:	9502      	str	r5, [sp, #8]
 80125c8:	46ab      	mov	fp, r5
 80125ca:	784a      	ldrb	r2, [r1, #1]
 80125cc:	1c4b      	adds	r3, r1, #1
 80125ce:	9303      	str	r3, [sp, #12]
 80125d0:	b342      	cbz	r2, 8012624 <__hexnan+0x88>
 80125d2:	4610      	mov	r0, r2
 80125d4:	9105      	str	r1, [sp, #20]
 80125d6:	9204      	str	r2, [sp, #16]
 80125d8:	f7ff fd76 	bl	80120c8 <__hexdig_fun>
 80125dc:	2800      	cmp	r0, #0
 80125de:	d14f      	bne.n	8012680 <__hexnan+0xe4>
 80125e0:	9a04      	ldr	r2, [sp, #16]
 80125e2:	9905      	ldr	r1, [sp, #20]
 80125e4:	2a20      	cmp	r2, #32
 80125e6:	d818      	bhi.n	801261a <__hexnan+0x7e>
 80125e8:	9b02      	ldr	r3, [sp, #8]
 80125ea:	459b      	cmp	fp, r3
 80125ec:	dd13      	ble.n	8012616 <__hexnan+0x7a>
 80125ee:	454c      	cmp	r4, r9
 80125f0:	d206      	bcs.n	8012600 <__hexnan+0x64>
 80125f2:	2d07      	cmp	r5, #7
 80125f4:	dc04      	bgt.n	8012600 <__hexnan+0x64>
 80125f6:	462a      	mov	r2, r5
 80125f8:	4649      	mov	r1, r9
 80125fa:	4620      	mov	r0, r4
 80125fc:	f7ff ffa8 	bl	8012550 <L_shift>
 8012600:	4544      	cmp	r4, r8
 8012602:	d950      	bls.n	80126a6 <__hexnan+0x10a>
 8012604:	2300      	movs	r3, #0
 8012606:	f1a4 0904 	sub.w	r9, r4, #4
 801260a:	f844 3c04 	str.w	r3, [r4, #-4]
 801260e:	f8cd b008 	str.w	fp, [sp, #8]
 8012612:	464c      	mov	r4, r9
 8012614:	461d      	mov	r5, r3
 8012616:	9903      	ldr	r1, [sp, #12]
 8012618:	e7d7      	b.n	80125ca <__hexnan+0x2e>
 801261a:	2a29      	cmp	r2, #41	; 0x29
 801261c:	d155      	bne.n	80126ca <__hexnan+0x12e>
 801261e:	3102      	adds	r1, #2
 8012620:	f8ca 1000 	str.w	r1, [sl]
 8012624:	f1bb 0f00 	cmp.w	fp, #0
 8012628:	d04f      	beq.n	80126ca <__hexnan+0x12e>
 801262a:	454c      	cmp	r4, r9
 801262c:	d206      	bcs.n	801263c <__hexnan+0xa0>
 801262e:	2d07      	cmp	r5, #7
 8012630:	dc04      	bgt.n	801263c <__hexnan+0xa0>
 8012632:	462a      	mov	r2, r5
 8012634:	4649      	mov	r1, r9
 8012636:	4620      	mov	r0, r4
 8012638:	f7ff ff8a 	bl	8012550 <L_shift>
 801263c:	4544      	cmp	r4, r8
 801263e:	d934      	bls.n	80126aa <__hexnan+0x10e>
 8012640:	f1a8 0204 	sub.w	r2, r8, #4
 8012644:	4623      	mov	r3, r4
 8012646:	f853 1b04 	ldr.w	r1, [r3], #4
 801264a:	f842 1f04 	str.w	r1, [r2, #4]!
 801264e:	429f      	cmp	r7, r3
 8012650:	d2f9      	bcs.n	8012646 <__hexnan+0xaa>
 8012652:	1b3b      	subs	r3, r7, r4
 8012654:	f023 0303 	bic.w	r3, r3, #3
 8012658:	3304      	adds	r3, #4
 801265a:	3e03      	subs	r6, #3
 801265c:	3401      	adds	r4, #1
 801265e:	42a6      	cmp	r6, r4
 8012660:	bf38      	it	cc
 8012662:	2304      	movcc	r3, #4
 8012664:	4443      	add	r3, r8
 8012666:	2200      	movs	r2, #0
 8012668:	f843 2b04 	str.w	r2, [r3], #4
 801266c:	429f      	cmp	r7, r3
 801266e:	d2fb      	bcs.n	8012668 <__hexnan+0xcc>
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	b91b      	cbnz	r3, 801267c <__hexnan+0xe0>
 8012674:	4547      	cmp	r7, r8
 8012676:	d126      	bne.n	80126c6 <__hexnan+0x12a>
 8012678:	2301      	movs	r3, #1
 801267a:	603b      	str	r3, [r7, #0]
 801267c:	2005      	movs	r0, #5
 801267e:	e025      	b.n	80126cc <__hexnan+0x130>
 8012680:	3501      	adds	r5, #1
 8012682:	2d08      	cmp	r5, #8
 8012684:	f10b 0b01 	add.w	fp, fp, #1
 8012688:	dd06      	ble.n	8012698 <__hexnan+0xfc>
 801268a:	4544      	cmp	r4, r8
 801268c:	d9c3      	bls.n	8012616 <__hexnan+0x7a>
 801268e:	2300      	movs	r3, #0
 8012690:	f844 3c04 	str.w	r3, [r4, #-4]
 8012694:	2501      	movs	r5, #1
 8012696:	3c04      	subs	r4, #4
 8012698:	6822      	ldr	r2, [r4, #0]
 801269a:	f000 000f 	and.w	r0, r0, #15
 801269e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126a2:	6020      	str	r0, [r4, #0]
 80126a4:	e7b7      	b.n	8012616 <__hexnan+0x7a>
 80126a6:	2508      	movs	r5, #8
 80126a8:	e7b5      	b.n	8012616 <__hexnan+0x7a>
 80126aa:	9b01      	ldr	r3, [sp, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d0df      	beq.n	8012670 <__hexnan+0xd4>
 80126b0:	f1c3 0320 	rsb	r3, r3, #32
 80126b4:	f04f 32ff 	mov.w	r2, #4294967295
 80126b8:	40da      	lsrs	r2, r3
 80126ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80126be:	4013      	ands	r3, r2
 80126c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80126c4:	e7d4      	b.n	8012670 <__hexnan+0xd4>
 80126c6:	3f04      	subs	r7, #4
 80126c8:	e7d2      	b.n	8012670 <__hexnan+0xd4>
 80126ca:	2004      	movs	r0, #4
 80126cc:	b007      	add	sp, #28
 80126ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080126d2 <__ascii_mbtowc>:
 80126d2:	b082      	sub	sp, #8
 80126d4:	b901      	cbnz	r1, 80126d8 <__ascii_mbtowc+0x6>
 80126d6:	a901      	add	r1, sp, #4
 80126d8:	b142      	cbz	r2, 80126ec <__ascii_mbtowc+0x1a>
 80126da:	b14b      	cbz	r3, 80126f0 <__ascii_mbtowc+0x1e>
 80126dc:	7813      	ldrb	r3, [r2, #0]
 80126de:	600b      	str	r3, [r1, #0]
 80126e0:	7812      	ldrb	r2, [r2, #0]
 80126e2:	1e10      	subs	r0, r2, #0
 80126e4:	bf18      	it	ne
 80126e6:	2001      	movne	r0, #1
 80126e8:	b002      	add	sp, #8
 80126ea:	4770      	bx	lr
 80126ec:	4610      	mov	r0, r2
 80126ee:	e7fb      	b.n	80126e8 <__ascii_mbtowc+0x16>
 80126f0:	f06f 0001 	mvn.w	r0, #1
 80126f4:	e7f8      	b.n	80126e8 <__ascii_mbtowc+0x16>
	...

080126f8 <_Balloc>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	69c6      	ldr	r6, [r0, #28]
 80126fc:	4604      	mov	r4, r0
 80126fe:	460d      	mov	r5, r1
 8012700:	b976      	cbnz	r6, 8012720 <_Balloc+0x28>
 8012702:	2010      	movs	r0, #16
 8012704:	f7fc fce0 	bl	800f0c8 <malloc>
 8012708:	4602      	mov	r2, r0
 801270a:	61e0      	str	r0, [r4, #28]
 801270c:	b920      	cbnz	r0, 8012718 <_Balloc+0x20>
 801270e:	4b18      	ldr	r3, [pc, #96]	; (8012770 <_Balloc+0x78>)
 8012710:	4818      	ldr	r0, [pc, #96]	; (8012774 <_Balloc+0x7c>)
 8012712:	216b      	movs	r1, #107	; 0x6b
 8012714:	f7fe fda2 	bl	801125c <__assert_func>
 8012718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801271c:	6006      	str	r6, [r0, #0]
 801271e:	60c6      	str	r6, [r0, #12]
 8012720:	69e6      	ldr	r6, [r4, #28]
 8012722:	68f3      	ldr	r3, [r6, #12]
 8012724:	b183      	cbz	r3, 8012748 <_Balloc+0x50>
 8012726:	69e3      	ldr	r3, [r4, #28]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801272e:	b9b8      	cbnz	r0, 8012760 <_Balloc+0x68>
 8012730:	2101      	movs	r1, #1
 8012732:	fa01 f605 	lsl.w	r6, r1, r5
 8012736:	1d72      	adds	r2, r6, #5
 8012738:	0092      	lsls	r2, r2, #2
 801273a:	4620      	mov	r0, r4
 801273c:	f000 fecf 	bl	80134de <_calloc_r>
 8012740:	b160      	cbz	r0, 801275c <_Balloc+0x64>
 8012742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012746:	e00e      	b.n	8012766 <_Balloc+0x6e>
 8012748:	2221      	movs	r2, #33	; 0x21
 801274a:	2104      	movs	r1, #4
 801274c:	4620      	mov	r0, r4
 801274e:	f000 fec6 	bl	80134de <_calloc_r>
 8012752:	69e3      	ldr	r3, [r4, #28]
 8012754:	60f0      	str	r0, [r6, #12]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d1e4      	bne.n	8012726 <_Balloc+0x2e>
 801275c:	2000      	movs	r0, #0
 801275e:	bd70      	pop	{r4, r5, r6, pc}
 8012760:	6802      	ldr	r2, [r0, #0]
 8012762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012766:	2300      	movs	r3, #0
 8012768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801276c:	e7f7      	b.n	801275e <_Balloc+0x66>
 801276e:	bf00      	nop
 8012770:	08013d1a 	.word	0x08013d1a
 8012774:	08013ea5 	.word	0x08013ea5

08012778 <_Bfree>:
 8012778:	b570      	push	{r4, r5, r6, lr}
 801277a:	69c6      	ldr	r6, [r0, #28]
 801277c:	4605      	mov	r5, r0
 801277e:	460c      	mov	r4, r1
 8012780:	b976      	cbnz	r6, 80127a0 <_Bfree+0x28>
 8012782:	2010      	movs	r0, #16
 8012784:	f7fc fca0 	bl	800f0c8 <malloc>
 8012788:	4602      	mov	r2, r0
 801278a:	61e8      	str	r0, [r5, #28]
 801278c:	b920      	cbnz	r0, 8012798 <_Bfree+0x20>
 801278e:	4b09      	ldr	r3, [pc, #36]	; (80127b4 <_Bfree+0x3c>)
 8012790:	4809      	ldr	r0, [pc, #36]	; (80127b8 <_Bfree+0x40>)
 8012792:	218f      	movs	r1, #143	; 0x8f
 8012794:	f7fe fd62 	bl	801125c <__assert_func>
 8012798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801279c:	6006      	str	r6, [r0, #0]
 801279e:	60c6      	str	r6, [r0, #12]
 80127a0:	b13c      	cbz	r4, 80127b2 <_Bfree+0x3a>
 80127a2:	69eb      	ldr	r3, [r5, #28]
 80127a4:	6862      	ldr	r2, [r4, #4]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127ac:	6021      	str	r1, [r4, #0]
 80127ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127b2:	bd70      	pop	{r4, r5, r6, pc}
 80127b4:	08013d1a 	.word	0x08013d1a
 80127b8:	08013ea5 	.word	0x08013ea5

080127bc <__multadd>:
 80127bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c0:	690d      	ldr	r5, [r1, #16]
 80127c2:	4607      	mov	r7, r0
 80127c4:	460c      	mov	r4, r1
 80127c6:	461e      	mov	r6, r3
 80127c8:	f101 0c14 	add.w	ip, r1, #20
 80127cc:	2000      	movs	r0, #0
 80127ce:	f8dc 3000 	ldr.w	r3, [ip]
 80127d2:	b299      	uxth	r1, r3
 80127d4:	fb02 6101 	mla	r1, r2, r1, r6
 80127d8:	0c1e      	lsrs	r6, r3, #16
 80127da:	0c0b      	lsrs	r3, r1, #16
 80127dc:	fb02 3306 	mla	r3, r2, r6, r3
 80127e0:	b289      	uxth	r1, r1
 80127e2:	3001      	adds	r0, #1
 80127e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80127e8:	4285      	cmp	r5, r0
 80127ea:	f84c 1b04 	str.w	r1, [ip], #4
 80127ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80127f2:	dcec      	bgt.n	80127ce <__multadd+0x12>
 80127f4:	b30e      	cbz	r6, 801283a <__multadd+0x7e>
 80127f6:	68a3      	ldr	r3, [r4, #8]
 80127f8:	42ab      	cmp	r3, r5
 80127fa:	dc19      	bgt.n	8012830 <__multadd+0x74>
 80127fc:	6861      	ldr	r1, [r4, #4]
 80127fe:	4638      	mov	r0, r7
 8012800:	3101      	adds	r1, #1
 8012802:	f7ff ff79 	bl	80126f8 <_Balloc>
 8012806:	4680      	mov	r8, r0
 8012808:	b928      	cbnz	r0, 8012816 <__multadd+0x5a>
 801280a:	4602      	mov	r2, r0
 801280c:	4b0c      	ldr	r3, [pc, #48]	; (8012840 <__multadd+0x84>)
 801280e:	480d      	ldr	r0, [pc, #52]	; (8012844 <__multadd+0x88>)
 8012810:	21ba      	movs	r1, #186	; 0xba
 8012812:	f7fe fd23 	bl	801125c <__assert_func>
 8012816:	6922      	ldr	r2, [r4, #16]
 8012818:	3202      	adds	r2, #2
 801281a:	f104 010c 	add.w	r1, r4, #12
 801281e:	0092      	lsls	r2, r2, #2
 8012820:	300c      	adds	r0, #12
 8012822:	f7fe fcfe 	bl	8011222 <memcpy>
 8012826:	4621      	mov	r1, r4
 8012828:	4638      	mov	r0, r7
 801282a:	f7ff ffa5 	bl	8012778 <_Bfree>
 801282e:	4644      	mov	r4, r8
 8012830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012834:	3501      	adds	r5, #1
 8012836:	615e      	str	r6, [r3, #20]
 8012838:	6125      	str	r5, [r4, #16]
 801283a:	4620      	mov	r0, r4
 801283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012840:	08013e34 	.word	0x08013e34
 8012844:	08013ea5 	.word	0x08013ea5

08012848 <__s2b>:
 8012848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801284c:	460c      	mov	r4, r1
 801284e:	4615      	mov	r5, r2
 8012850:	461f      	mov	r7, r3
 8012852:	2209      	movs	r2, #9
 8012854:	3308      	adds	r3, #8
 8012856:	4606      	mov	r6, r0
 8012858:	fb93 f3f2 	sdiv	r3, r3, r2
 801285c:	2100      	movs	r1, #0
 801285e:	2201      	movs	r2, #1
 8012860:	429a      	cmp	r2, r3
 8012862:	db09      	blt.n	8012878 <__s2b+0x30>
 8012864:	4630      	mov	r0, r6
 8012866:	f7ff ff47 	bl	80126f8 <_Balloc>
 801286a:	b940      	cbnz	r0, 801287e <__s2b+0x36>
 801286c:	4602      	mov	r2, r0
 801286e:	4b19      	ldr	r3, [pc, #100]	; (80128d4 <__s2b+0x8c>)
 8012870:	4819      	ldr	r0, [pc, #100]	; (80128d8 <__s2b+0x90>)
 8012872:	21d3      	movs	r1, #211	; 0xd3
 8012874:	f7fe fcf2 	bl	801125c <__assert_func>
 8012878:	0052      	lsls	r2, r2, #1
 801287a:	3101      	adds	r1, #1
 801287c:	e7f0      	b.n	8012860 <__s2b+0x18>
 801287e:	9b08      	ldr	r3, [sp, #32]
 8012880:	6143      	str	r3, [r0, #20]
 8012882:	2d09      	cmp	r5, #9
 8012884:	f04f 0301 	mov.w	r3, #1
 8012888:	6103      	str	r3, [r0, #16]
 801288a:	dd16      	ble.n	80128ba <__s2b+0x72>
 801288c:	f104 0909 	add.w	r9, r4, #9
 8012890:	46c8      	mov	r8, r9
 8012892:	442c      	add	r4, r5
 8012894:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012898:	4601      	mov	r1, r0
 801289a:	3b30      	subs	r3, #48	; 0x30
 801289c:	220a      	movs	r2, #10
 801289e:	4630      	mov	r0, r6
 80128a0:	f7ff ff8c 	bl	80127bc <__multadd>
 80128a4:	45a0      	cmp	r8, r4
 80128a6:	d1f5      	bne.n	8012894 <__s2b+0x4c>
 80128a8:	f1a5 0408 	sub.w	r4, r5, #8
 80128ac:	444c      	add	r4, r9
 80128ae:	1b2d      	subs	r5, r5, r4
 80128b0:	1963      	adds	r3, r4, r5
 80128b2:	42bb      	cmp	r3, r7
 80128b4:	db04      	blt.n	80128c0 <__s2b+0x78>
 80128b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ba:	340a      	adds	r4, #10
 80128bc:	2509      	movs	r5, #9
 80128be:	e7f6      	b.n	80128ae <__s2b+0x66>
 80128c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128c4:	4601      	mov	r1, r0
 80128c6:	3b30      	subs	r3, #48	; 0x30
 80128c8:	220a      	movs	r2, #10
 80128ca:	4630      	mov	r0, r6
 80128cc:	f7ff ff76 	bl	80127bc <__multadd>
 80128d0:	e7ee      	b.n	80128b0 <__s2b+0x68>
 80128d2:	bf00      	nop
 80128d4:	08013e34 	.word	0x08013e34
 80128d8:	08013ea5 	.word	0x08013ea5

080128dc <__hi0bits>:
 80128dc:	0c03      	lsrs	r3, r0, #16
 80128de:	041b      	lsls	r3, r3, #16
 80128e0:	b9d3      	cbnz	r3, 8012918 <__hi0bits+0x3c>
 80128e2:	0400      	lsls	r0, r0, #16
 80128e4:	2310      	movs	r3, #16
 80128e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80128ea:	bf04      	itt	eq
 80128ec:	0200      	lsleq	r0, r0, #8
 80128ee:	3308      	addeq	r3, #8
 80128f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80128f4:	bf04      	itt	eq
 80128f6:	0100      	lsleq	r0, r0, #4
 80128f8:	3304      	addeq	r3, #4
 80128fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80128fe:	bf04      	itt	eq
 8012900:	0080      	lsleq	r0, r0, #2
 8012902:	3302      	addeq	r3, #2
 8012904:	2800      	cmp	r0, #0
 8012906:	db05      	blt.n	8012914 <__hi0bits+0x38>
 8012908:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801290c:	f103 0301 	add.w	r3, r3, #1
 8012910:	bf08      	it	eq
 8012912:	2320      	moveq	r3, #32
 8012914:	4618      	mov	r0, r3
 8012916:	4770      	bx	lr
 8012918:	2300      	movs	r3, #0
 801291a:	e7e4      	b.n	80128e6 <__hi0bits+0xa>

0801291c <__lo0bits>:
 801291c:	6803      	ldr	r3, [r0, #0]
 801291e:	f013 0207 	ands.w	r2, r3, #7
 8012922:	d00c      	beq.n	801293e <__lo0bits+0x22>
 8012924:	07d9      	lsls	r1, r3, #31
 8012926:	d422      	bmi.n	801296e <__lo0bits+0x52>
 8012928:	079a      	lsls	r2, r3, #30
 801292a:	bf49      	itett	mi
 801292c:	085b      	lsrmi	r3, r3, #1
 801292e:	089b      	lsrpl	r3, r3, #2
 8012930:	6003      	strmi	r3, [r0, #0]
 8012932:	2201      	movmi	r2, #1
 8012934:	bf5c      	itt	pl
 8012936:	6003      	strpl	r3, [r0, #0]
 8012938:	2202      	movpl	r2, #2
 801293a:	4610      	mov	r0, r2
 801293c:	4770      	bx	lr
 801293e:	b299      	uxth	r1, r3
 8012940:	b909      	cbnz	r1, 8012946 <__lo0bits+0x2a>
 8012942:	0c1b      	lsrs	r3, r3, #16
 8012944:	2210      	movs	r2, #16
 8012946:	b2d9      	uxtb	r1, r3
 8012948:	b909      	cbnz	r1, 801294e <__lo0bits+0x32>
 801294a:	3208      	adds	r2, #8
 801294c:	0a1b      	lsrs	r3, r3, #8
 801294e:	0719      	lsls	r1, r3, #28
 8012950:	bf04      	itt	eq
 8012952:	091b      	lsreq	r3, r3, #4
 8012954:	3204      	addeq	r2, #4
 8012956:	0799      	lsls	r1, r3, #30
 8012958:	bf04      	itt	eq
 801295a:	089b      	lsreq	r3, r3, #2
 801295c:	3202      	addeq	r2, #2
 801295e:	07d9      	lsls	r1, r3, #31
 8012960:	d403      	bmi.n	801296a <__lo0bits+0x4e>
 8012962:	085b      	lsrs	r3, r3, #1
 8012964:	f102 0201 	add.w	r2, r2, #1
 8012968:	d003      	beq.n	8012972 <__lo0bits+0x56>
 801296a:	6003      	str	r3, [r0, #0]
 801296c:	e7e5      	b.n	801293a <__lo0bits+0x1e>
 801296e:	2200      	movs	r2, #0
 8012970:	e7e3      	b.n	801293a <__lo0bits+0x1e>
 8012972:	2220      	movs	r2, #32
 8012974:	e7e1      	b.n	801293a <__lo0bits+0x1e>
	...

08012978 <__i2b>:
 8012978:	b510      	push	{r4, lr}
 801297a:	460c      	mov	r4, r1
 801297c:	2101      	movs	r1, #1
 801297e:	f7ff febb 	bl	80126f8 <_Balloc>
 8012982:	4602      	mov	r2, r0
 8012984:	b928      	cbnz	r0, 8012992 <__i2b+0x1a>
 8012986:	4b05      	ldr	r3, [pc, #20]	; (801299c <__i2b+0x24>)
 8012988:	4805      	ldr	r0, [pc, #20]	; (80129a0 <__i2b+0x28>)
 801298a:	f240 1145 	movw	r1, #325	; 0x145
 801298e:	f7fe fc65 	bl	801125c <__assert_func>
 8012992:	2301      	movs	r3, #1
 8012994:	6144      	str	r4, [r0, #20]
 8012996:	6103      	str	r3, [r0, #16]
 8012998:	bd10      	pop	{r4, pc}
 801299a:	bf00      	nop
 801299c:	08013e34 	.word	0x08013e34
 80129a0:	08013ea5 	.word	0x08013ea5

080129a4 <__multiply>:
 80129a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a8:	4691      	mov	r9, r2
 80129aa:	690a      	ldr	r2, [r1, #16]
 80129ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	bfb8      	it	lt
 80129b4:	460b      	movlt	r3, r1
 80129b6:	460c      	mov	r4, r1
 80129b8:	bfbc      	itt	lt
 80129ba:	464c      	movlt	r4, r9
 80129bc:	4699      	movlt	r9, r3
 80129be:	6927      	ldr	r7, [r4, #16]
 80129c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80129c4:	68a3      	ldr	r3, [r4, #8]
 80129c6:	6861      	ldr	r1, [r4, #4]
 80129c8:	eb07 060a 	add.w	r6, r7, sl
 80129cc:	42b3      	cmp	r3, r6
 80129ce:	b085      	sub	sp, #20
 80129d0:	bfb8      	it	lt
 80129d2:	3101      	addlt	r1, #1
 80129d4:	f7ff fe90 	bl	80126f8 <_Balloc>
 80129d8:	b930      	cbnz	r0, 80129e8 <__multiply+0x44>
 80129da:	4602      	mov	r2, r0
 80129dc:	4b44      	ldr	r3, [pc, #272]	; (8012af0 <__multiply+0x14c>)
 80129de:	4845      	ldr	r0, [pc, #276]	; (8012af4 <__multiply+0x150>)
 80129e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80129e4:	f7fe fc3a 	bl	801125c <__assert_func>
 80129e8:	f100 0514 	add.w	r5, r0, #20
 80129ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80129f0:	462b      	mov	r3, r5
 80129f2:	2200      	movs	r2, #0
 80129f4:	4543      	cmp	r3, r8
 80129f6:	d321      	bcc.n	8012a3c <__multiply+0x98>
 80129f8:	f104 0314 	add.w	r3, r4, #20
 80129fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012a00:	f109 0314 	add.w	r3, r9, #20
 8012a04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a08:	9202      	str	r2, [sp, #8]
 8012a0a:	1b3a      	subs	r2, r7, r4
 8012a0c:	3a15      	subs	r2, #21
 8012a0e:	f022 0203 	bic.w	r2, r2, #3
 8012a12:	3204      	adds	r2, #4
 8012a14:	f104 0115 	add.w	r1, r4, #21
 8012a18:	428f      	cmp	r7, r1
 8012a1a:	bf38      	it	cc
 8012a1c:	2204      	movcc	r2, #4
 8012a1e:	9201      	str	r2, [sp, #4]
 8012a20:	9a02      	ldr	r2, [sp, #8]
 8012a22:	9303      	str	r3, [sp, #12]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d80c      	bhi.n	8012a42 <__multiply+0x9e>
 8012a28:	2e00      	cmp	r6, #0
 8012a2a:	dd03      	ble.n	8012a34 <__multiply+0x90>
 8012a2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d05b      	beq.n	8012aec <__multiply+0x148>
 8012a34:	6106      	str	r6, [r0, #16]
 8012a36:	b005      	add	sp, #20
 8012a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a3c:	f843 2b04 	str.w	r2, [r3], #4
 8012a40:	e7d8      	b.n	80129f4 <__multiply+0x50>
 8012a42:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a46:	f1ba 0f00 	cmp.w	sl, #0
 8012a4a:	d024      	beq.n	8012a96 <__multiply+0xf2>
 8012a4c:	f104 0e14 	add.w	lr, r4, #20
 8012a50:	46a9      	mov	r9, r5
 8012a52:	f04f 0c00 	mov.w	ip, #0
 8012a56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012a5a:	f8d9 1000 	ldr.w	r1, [r9]
 8012a5e:	fa1f fb82 	uxth.w	fp, r2
 8012a62:	b289      	uxth	r1, r1
 8012a64:	fb0a 110b 	mla	r1, sl, fp, r1
 8012a68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8012a70:	4461      	add	r1, ip
 8012a72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012a76:	fb0a c20b 	mla	r2, sl, fp, ip
 8012a7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012a7e:	b289      	uxth	r1, r1
 8012a80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012a84:	4577      	cmp	r7, lr
 8012a86:	f849 1b04 	str.w	r1, [r9], #4
 8012a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012a8e:	d8e2      	bhi.n	8012a56 <__multiply+0xb2>
 8012a90:	9a01      	ldr	r2, [sp, #4]
 8012a92:	f845 c002 	str.w	ip, [r5, r2]
 8012a96:	9a03      	ldr	r2, [sp, #12]
 8012a98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012a9c:	3304      	adds	r3, #4
 8012a9e:	f1b9 0f00 	cmp.w	r9, #0
 8012aa2:	d021      	beq.n	8012ae8 <__multiply+0x144>
 8012aa4:	6829      	ldr	r1, [r5, #0]
 8012aa6:	f104 0c14 	add.w	ip, r4, #20
 8012aaa:	46ae      	mov	lr, r5
 8012aac:	f04f 0a00 	mov.w	sl, #0
 8012ab0:	f8bc b000 	ldrh.w	fp, [ip]
 8012ab4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012ab8:	fb09 220b 	mla	r2, r9, fp, r2
 8012abc:	4452      	add	r2, sl
 8012abe:	b289      	uxth	r1, r1
 8012ac0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012ac4:	f84e 1b04 	str.w	r1, [lr], #4
 8012ac8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012acc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ad0:	f8be 1000 	ldrh.w	r1, [lr]
 8012ad4:	fb09 110a 	mla	r1, r9, sl, r1
 8012ad8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012adc:	4567      	cmp	r7, ip
 8012ade:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ae2:	d8e5      	bhi.n	8012ab0 <__multiply+0x10c>
 8012ae4:	9a01      	ldr	r2, [sp, #4]
 8012ae6:	50a9      	str	r1, [r5, r2]
 8012ae8:	3504      	adds	r5, #4
 8012aea:	e799      	b.n	8012a20 <__multiply+0x7c>
 8012aec:	3e01      	subs	r6, #1
 8012aee:	e79b      	b.n	8012a28 <__multiply+0x84>
 8012af0:	08013e34 	.word	0x08013e34
 8012af4:	08013ea5 	.word	0x08013ea5

08012af8 <__pow5mult>:
 8012af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012afc:	4615      	mov	r5, r2
 8012afe:	f012 0203 	ands.w	r2, r2, #3
 8012b02:	4606      	mov	r6, r0
 8012b04:	460f      	mov	r7, r1
 8012b06:	d007      	beq.n	8012b18 <__pow5mult+0x20>
 8012b08:	4c25      	ldr	r4, [pc, #148]	; (8012ba0 <__pow5mult+0xa8>)
 8012b0a:	3a01      	subs	r2, #1
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b12:	f7ff fe53 	bl	80127bc <__multadd>
 8012b16:	4607      	mov	r7, r0
 8012b18:	10ad      	asrs	r5, r5, #2
 8012b1a:	d03d      	beq.n	8012b98 <__pow5mult+0xa0>
 8012b1c:	69f4      	ldr	r4, [r6, #28]
 8012b1e:	b97c      	cbnz	r4, 8012b40 <__pow5mult+0x48>
 8012b20:	2010      	movs	r0, #16
 8012b22:	f7fc fad1 	bl	800f0c8 <malloc>
 8012b26:	4602      	mov	r2, r0
 8012b28:	61f0      	str	r0, [r6, #28]
 8012b2a:	b928      	cbnz	r0, 8012b38 <__pow5mult+0x40>
 8012b2c:	4b1d      	ldr	r3, [pc, #116]	; (8012ba4 <__pow5mult+0xac>)
 8012b2e:	481e      	ldr	r0, [pc, #120]	; (8012ba8 <__pow5mult+0xb0>)
 8012b30:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012b34:	f7fe fb92 	bl	801125c <__assert_func>
 8012b38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b3c:	6004      	str	r4, [r0, #0]
 8012b3e:	60c4      	str	r4, [r0, #12]
 8012b40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012b44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b48:	b94c      	cbnz	r4, 8012b5e <__pow5mult+0x66>
 8012b4a:	f240 2171 	movw	r1, #625	; 0x271
 8012b4e:	4630      	mov	r0, r6
 8012b50:	f7ff ff12 	bl	8012978 <__i2b>
 8012b54:	2300      	movs	r3, #0
 8012b56:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	6003      	str	r3, [r0, #0]
 8012b5e:	f04f 0900 	mov.w	r9, #0
 8012b62:	07eb      	lsls	r3, r5, #31
 8012b64:	d50a      	bpl.n	8012b7c <__pow5mult+0x84>
 8012b66:	4639      	mov	r1, r7
 8012b68:	4622      	mov	r2, r4
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f7ff ff1a 	bl	80129a4 <__multiply>
 8012b70:	4639      	mov	r1, r7
 8012b72:	4680      	mov	r8, r0
 8012b74:	4630      	mov	r0, r6
 8012b76:	f7ff fdff 	bl	8012778 <_Bfree>
 8012b7a:	4647      	mov	r7, r8
 8012b7c:	106d      	asrs	r5, r5, #1
 8012b7e:	d00b      	beq.n	8012b98 <__pow5mult+0xa0>
 8012b80:	6820      	ldr	r0, [r4, #0]
 8012b82:	b938      	cbnz	r0, 8012b94 <__pow5mult+0x9c>
 8012b84:	4622      	mov	r2, r4
 8012b86:	4621      	mov	r1, r4
 8012b88:	4630      	mov	r0, r6
 8012b8a:	f7ff ff0b 	bl	80129a4 <__multiply>
 8012b8e:	6020      	str	r0, [r4, #0]
 8012b90:	f8c0 9000 	str.w	r9, [r0]
 8012b94:	4604      	mov	r4, r0
 8012b96:	e7e4      	b.n	8012b62 <__pow5mult+0x6a>
 8012b98:	4638      	mov	r0, r7
 8012b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b9e:	bf00      	nop
 8012ba0:	08013ff0 	.word	0x08013ff0
 8012ba4:	08013d1a 	.word	0x08013d1a
 8012ba8:	08013ea5 	.word	0x08013ea5

08012bac <__lshift>:
 8012bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb0:	460c      	mov	r4, r1
 8012bb2:	6849      	ldr	r1, [r1, #4]
 8012bb4:	6923      	ldr	r3, [r4, #16]
 8012bb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bba:	68a3      	ldr	r3, [r4, #8]
 8012bbc:	4607      	mov	r7, r0
 8012bbe:	4691      	mov	r9, r2
 8012bc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bc4:	f108 0601 	add.w	r6, r8, #1
 8012bc8:	42b3      	cmp	r3, r6
 8012bca:	db0b      	blt.n	8012be4 <__lshift+0x38>
 8012bcc:	4638      	mov	r0, r7
 8012bce:	f7ff fd93 	bl	80126f8 <_Balloc>
 8012bd2:	4605      	mov	r5, r0
 8012bd4:	b948      	cbnz	r0, 8012bea <__lshift+0x3e>
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	4b28      	ldr	r3, [pc, #160]	; (8012c7c <__lshift+0xd0>)
 8012bda:	4829      	ldr	r0, [pc, #164]	; (8012c80 <__lshift+0xd4>)
 8012bdc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012be0:	f7fe fb3c 	bl	801125c <__assert_func>
 8012be4:	3101      	adds	r1, #1
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	e7ee      	b.n	8012bc8 <__lshift+0x1c>
 8012bea:	2300      	movs	r3, #0
 8012bec:	f100 0114 	add.w	r1, r0, #20
 8012bf0:	f100 0210 	add.w	r2, r0, #16
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	4553      	cmp	r3, sl
 8012bf8:	db33      	blt.n	8012c62 <__lshift+0xb6>
 8012bfa:	6920      	ldr	r0, [r4, #16]
 8012bfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c00:	f104 0314 	add.w	r3, r4, #20
 8012c04:	f019 091f 	ands.w	r9, r9, #31
 8012c08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c10:	d02b      	beq.n	8012c6a <__lshift+0xbe>
 8012c12:	f1c9 0e20 	rsb	lr, r9, #32
 8012c16:	468a      	mov	sl, r1
 8012c18:	2200      	movs	r2, #0
 8012c1a:	6818      	ldr	r0, [r3, #0]
 8012c1c:	fa00 f009 	lsl.w	r0, r0, r9
 8012c20:	4310      	orrs	r0, r2
 8012c22:	f84a 0b04 	str.w	r0, [sl], #4
 8012c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c2a:	459c      	cmp	ip, r3
 8012c2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c30:	d8f3      	bhi.n	8012c1a <__lshift+0x6e>
 8012c32:	ebac 0304 	sub.w	r3, ip, r4
 8012c36:	3b15      	subs	r3, #21
 8012c38:	f023 0303 	bic.w	r3, r3, #3
 8012c3c:	3304      	adds	r3, #4
 8012c3e:	f104 0015 	add.w	r0, r4, #21
 8012c42:	4584      	cmp	ip, r0
 8012c44:	bf38      	it	cc
 8012c46:	2304      	movcc	r3, #4
 8012c48:	50ca      	str	r2, [r1, r3]
 8012c4a:	b10a      	cbz	r2, 8012c50 <__lshift+0xa4>
 8012c4c:	f108 0602 	add.w	r6, r8, #2
 8012c50:	3e01      	subs	r6, #1
 8012c52:	4638      	mov	r0, r7
 8012c54:	612e      	str	r6, [r5, #16]
 8012c56:	4621      	mov	r1, r4
 8012c58:	f7ff fd8e 	bl	8012778 <_Bfree>
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c62:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c66:	3301      	adds	r3, #1
 8012c68:	e7c5      	b.n	8012bf6 <__lshift+0x4a>
 8012c6a:	3904      	subs	r1, #4
 8012c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c70:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c74:	459c      	cmp	ip, r3
 8012c76:	d8f9      	bhi.n	8012c6c <__lshift+0xc0>
 8012c78:	e7ea      	b.n	8012c50 <__lshift+0xa4>
 8012c7a:	bf00      	nop
 8012c7c:	08013e34 	.word	0x08013e34
 8012c80:	08013ea5 	.word	0x08013ea5

08012c84 <__mcmp>:
 8012c84:	b530      	push	{r4, r5, lr}
 8012c86:	6902      	ldr	r2, [r0, #16]
 8012c88:	690c      	ldr	r4, [r1, #16]
 8012c8a:	1b12      	subs	r2, r2, r4
 8012c8c:	d10e      	bne.n	8012cac <__mcmp+0x28>
 8012c8e:	f100 0314 	add.w	r3, r0, #20
 8012c92:	3114      	adds	r1, #20
 8012c94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012c98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012c9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012ca0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ca4:	42a5      	cmp	r5, r4
 8012ca6:	d003      	beq.n	8012cb0 <__mcmp+0x2c>
 8012ca8:	d305      	bcc.n	8012cb6 <__mcmp+0x32>
 8012caa:	2201      	movs	r2, #1
 8012cac:	4610      	mov	r0, r2
 8012cae:	bd30      	pop	{r4, r5, pc}
 8012cb0:	4283      	cmp	r3, r0
 8012cb2:	d3f3      	bcc.n	8012c9c <__mcmp+0x18>
 8012cb4:	e7fa      	b.n	8012cac <__mcmp+0x28>
 8012cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cba:	e7f7      	b.n	8012cac <__mcmp+0x28>

08012cbc <__mdiff>:
 8012cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc0:	460c      	mov	r4, r1
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	4611      	mov	r1, r2
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	4690      	mov	r8, r2
 8012cca:	f7ff ffdb 	bl	8012c84 <__mcmp>
 8012cce:	1e05      	subs	r5, r0, #0
 8012cd0:	d110      	bne.n	8012cf4 <__mdiff+0x38>
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f7ff fd0f 	bl	80126f8 <_Balloc>
 8012cda:	b930      	cbnz	r0, 8012cea <__mdiff+0x2e>
 8012cdc:	4b3a      	ldr	r3, [pc, #232]	; (8012dc8 <__mdiff+0x10c>)
 8012cde:	4602      	mov	r2, r0
 8012ce0:	f240 2137 	movw	r1, #567	; 0x237
 8012ce4:	4839      	ldr	r0, [pc, #228]	; (8012dcc <__mdiff+0x110>)
 8012ce6:	f7fe fab9 	bl	801125c <__assert_func>
 8012cea:	2301      	movs	r3, #1
 8012cec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf4:	bfa4      	itt	ge
 8012cf6:	4643      	movge	r3, r8
 8012cf8:	46a0      	movge	r8, r4
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d00:	bfa6      	itte	ge
 8012d02:	461c      	movge	r4, r3
 8012d04:	2500      	movge	r5, #0
 8012d06:	2501      	movlt	r5, #1
 8012d08:	f7ff fcf6 	bl	80126f8 <_Balloc>
 8012d0c:	b920      	cbnz	r0, 8012d18 <__mdiff+0x5c>
 8012d0e:	4b2e      	ldr	r3, [pc, #184]	; (8012dc8 <__mdiff+0x10c>)
 8012d10:	4602      	mov	r2, r0
 8012d12:	f240 2145 	movw	r1, #581	; 0x245
 8012d16:	e7e5      	b.n	8012ce4 <__mdiff+0x28>
 8012d18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d1c:	6926      	ldr	r6, [r4, #16]
 8012d1e:	60c5      	str	r5, [r0, #12]
 8012d20:	f104 0914 	add.w	r9, r4, #20
 8012d24:	f108 0514 	add.w	r5, r8, #20
 8012d28:	f100 0e14 	add.w	lr, r0, #20
 8012d2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012d30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012d34:	f108 0210 	add.w	r2, r8, #16
 8012d38:	46f2      	mov	sl, lr
 8012d3a:	2100      	movs	r1, #0
 8012d3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d44:	fa11 f88b 	uxtah	r8, r1, fp
 8012d48:	b299      	uxth	r1, r3
 8012d4a:	0c1b      	lsrs	r3, r3, #16
 8012d4c:	eba8 0801 	sub.w	r8, r8, r1
 8012d50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d58:	fa1f f888 	uxth.w	r8, r8
 8012d5c:	1419      	asrs	r1, r3, #16
 8012d5e:	454e      	cmp	r6, r9
 8012d60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d64:	f84a 3b04 	str.w	r3, [sl], #4
 8012d68:	d8e8      	bhi.n	8012d3c <__mdiff+0x80>
 8012d6a:	1b33      	subs	r3, r6, r4
 8012d6c:	3b15      	subs	r3, #21
 8012d6e:	f023 0303 	bic.w	r3, r3, #3
 8012d72:	3304      	adds	r3, #4
 8012d74:	3415      	adds	r4, #21
 8012d76:	42a6      	cmp	r6, r4
 8012d78:	bf38      	it	cc
 8012d7a:	2304      	movcc	r3, #4
 8012d7c:	441d      	add	r5, r3
 8012d7e:	4473      	add	r3, lr
 8012d80:	469e      	mov	lr, r3
 8012d82:	462e      	mov	r6, r5
 8012d84:	4566      	cmp	r6, ip
 8012d86:	d30e      	bcc.n	8012da6 <__mdiff+0xea>
 8012d88:	f10c 0203 	add.w	r2, ip, #3
 8012d8c:	1b52      	subs	r2, r2, r5
 8012d8e:	f022 0203 	bic.w	r2, r2, #3
 8012d92:	3d03      	subs	r5, #3
 8012d94:	45ac      	cmp	ip, r5
 8012d96:	bf38      	it	cc
 8012d98:	2200      	movcc	r2, #0
 8012d9a:	4413      	add	r3, r2
 8012d9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012da0:	b17a      	cbz	r2, 8012dc2 <__mdiff+0x106>
 8012da2:	6107      	str	r7, [r0, #16]
 8012da4:	e7a4      	b.n	8012cf0 <__mdiff+0x34>
 8012da6:	f856 8b04 	ldr.w	r8, [r6], #4
 8012daa:	fa11 f288 	uxtah	r2, r1, r8
 8012dae:	1414      	asrs	r4, r2, #16
 8012db0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012db4:	b292      	uxth	r2, r2
 8012db6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012dba:	f84e 2b04 	str.w	r2, [lr], #4
 8012dbe:	1421      	asrs	r1, r4, #16
 8012dc0:	e7e0      	b.n	8012d84 <__mdiff+0xc8>
 8012dc2:	3f01      	subs	r7, #1
 8012dc4:	e7ea      	b.n	8012d9c <__mdiff+0xe0>
 8012dc6:	bf00      	nop
 8012dc8:	08013e34 	.word	0x08013e34
 8012dcc:	08013ea5 	.word	0x08013ea5

08012dd0 <__ulp>:
 8012dd0:	b082      	sub	sp, #8
 8012dd2:	ed8d 0b00 	vstr	d0, [sp]
 8012dd6:	9a01      	ldr	r2, [sp, #4]
 8012dd8:	4b0f      	ldr	r3, [pc, #60]	; (8012e18 <__ulp+0x48>)
 8012dda:	4013      	ands	r3, r2
 8012ddc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	dc08      	bgt.n	8012df6 <__ulp+0x26>
 8012de4:	425b      	negs	r3, r3
 8012de6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012dea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012dee:	da04      	bge.n	8012dfa <__ulp+0x2a>
 8012df0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012df4:	4113      	asrs	r3, r2
 8012df6:	2200      	movs	r2, #0
 8012df8:	e008      	b.n	8012e0c <__ulp+0x3c>
 8012dfa:	f1a2 0314 	sub.w	r3, r2, #20
 8012dfe:	2b1e      	cmp	r3, #30
 8012e00:	bfda      	itte	le
 8012e02:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012e06:	40da      	lsrle	r2, r3
 8012e08:	2201      	movgt	r2, #1
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	4610      	mov	r0, r2
 8012e10:	ec41 0b10 	vmov	d0, r0, r1
 8012e14:	b002      	add	sp, #8
 8012e16:	4770      	bx	lr
 8012e18:	7ff00000 	.word	0x7ff00000

08012e1c <__b2d>:
 8012e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e20:	6906      	ldr	r6, [r0, #16]
 8012e22:	f100 0814 	add.w	r8, r0, #20
 8012e26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012e2a:	1f37      	subs	r7, r6, #4
 8012e2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012e30:	4610      	mov	r0, r2
 8012e32:	f7ff fd53 	bl	80128dc <__hi0bits>
 8012e36:	f1c0 0320 	rsb	r3, r0, #32
 8012e3a:	280a      	cmp	r0, #10
 8012e3c:	600b      	str	r3, [r1, #0]
 8012e3e:	491b      	ldr	r1, [pc, #108]	; (8012eac <__b2d+0x90>)
 8012e40:	dc15      	bgt.n	8012e6e <__b2d+0x52>
 8012e42:	f1c0 0c0b 	rsb	ip, r0, #11
 8012e46:	fa22 f30c 	lsr.w	r3, r2, ip
 8012e4a:	45b8      	cmp	r8, r7
 8012e4c:	ea43 0501 	orr.w	r5, r3, r1
 8012e50:	bf34      	ite	cc
 8012e52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e56:	2300      	movcs	r3, #0
 8012e58:	3015      	adds	r0, #21
 8012e5a:	fa02 f000 	lsl.w	r0, r2, r0
 8012e5e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012e62:	4303      	orrs	r3, r0
 8012e64:	461c      	mov	r4, r3
 8012e66:	ec45 4b10 	vmov	d0, r4, r5
 8012e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6e:	45b8      	cmp	r8, r7
 8012e70:	bf3a      	itte	cc
 8012e72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e76:	f1a6 0708 	subcc.w	r7, r6, #8
 8012e7a:	2300      	movcs	r3, #0
 8012e7c:	380b      	subs	r0, #11
 8012e7e:	d012      	beq.n	8012ea6 <__b2d+0x8a>
 8012e80:	f1c0 0120 	rsb	r1, r0, #32
 8012e84:	fa23 f401 	lsr.w	r4, r3, r1
 8012e88:	4082      	lsls	r2, r0
 8012e8a:	4322      	orrs	r2, r4
 8012e8c:	4547      	cmp	r7, r8
 8012e8e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012e92:	bf8c      	ite	hi
 8012e94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012e98:	2200      	movls	r2, #0
 8012e9a:	4083      	lsls	r3, r0
 8012e9c:	40ca      	lsrs	r2, r1
 8012e9e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	e7de      	b.n	8012e64 <__b2d+0x48>
 8012ea6:	ea42 0501 	orr.w	r5, r2, r1
 8012eaa:	e7db      	b.n	8012e64 <__b2d+0x48>
 8012eac:	3ff00000 	.word	0x3ff00000

08012eb0 <__d2b>:
 8012eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012eb4:	460f      	mov	r7, r1
 8012eb6:	2101      	movs	r1, #1
 8012eb8:	ec59 8b10 	vmov	r8, r9, d0
 8012ebc:	4616      	mov	r6, r2
 8012ebe:	f7ff fc1b 	bl	80126f8 <_Balloc>
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	b930      	cbnz	r0, 8012ed4 <__d2b+0x24>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	4b24      	ldr	r3, [pc, #144]	; (8012f5c <__d2b+0xac>)
 8012eca:	4825      	ldr	r0, [pc, #148]	; (8012f60 <__d2b+0xb0>)
 8012ecc:	f240 310f 	movw	r1, #783	; 0x30f
 8012ed0:	f7fe f9c4 	bl	801125c <__assert_func>
 8012ed4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012edc:	bb2d      	cbnz	r5, 8012f2a <__d2b+0x7a>
 8012ede:	9301      	str	r3, [sp, #4]
 8012ee0:	f1b8 0300 	subs.w	r3, r8, #0
 8012ee4:	d026      	beq.n	8012f34 <__d2b+0x84>
 8012ee6:	4668      	mov	r0, sp
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	f7ff fd17 	bl	801291c <__lo0bits>
 8012eee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ef2:	b1e8      	cbz	r0, 8012f30 <__d2b+0x80>
 8012ef4:	f1c0 0320 	rsb	r3, r0, #32
 8012ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8012efc:	430b      	orrs	r3, r1
 8012efe:	40c2      	lsrs	r2, r0
 8012f00:	6163      	str	r3, [r4, #20]
 8012f02:	9201      	str	r2, [sp, #4]
 8012f04:	9b01      	ldr	r3, [sp, #4]
 8012f06:	61a3      	str	r3, [r4, #24]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	bf14      	ite	ne
 8012f0c:	2202      	movne	r2, #2
 8012f0e:	2201      	moveq	r2, #1
 8012f10:	6122      	str	r2, [r4, #16]
 8012f12:	b1bd      	cbz	r5, 8012f44 <__d2b+0x94>
 8012f14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012f18:	4405      	add	r5, r0
 8012f1a:	603d      	str	r5, [r7, #0]
 8012f1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f20:	6030      	str	r0, [r6, #0]
 8012f22:	4620      	mov	r0, r4
 8012f24:	b003      	add	sp, #12
 8012f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f2e:	e7d6      	b.n	8012ede <__d2b+0x2e>
 8012f30:	6161      	str	r1, [r4, #20]
 8012f32:	e7e7      	b.n	8012f04 <__d2b+0x54>
 8012f34:	a801      	add	r0, sp, #4
 8012f36:	f7ff fcf1 	bl	801291c <__lo0bits>
 8012f3a:	9b01      	ldr	r3, [sp, #4]
 8012f3c:	6163      	str	r3, [r4, #20]
 8012f3e:	3020      	adds	r0, #32
 8012f40:	2201      	movs	r2, #1
 8012f42:	e7e5      	b.n	8012f10 <__d2b+0x60>
 8012f44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f4c:	6038      	str	r0, [r7, #0]
 8012f4e:	6918      	ldr	r0, [r3, #16]
 8012f50:	f7ff fcc4 	bl	80128dc <__hi0bits>
 8012f54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f58:	e7e2      	b.n	8012f20 <__d2b+0x70>
 8012f5a:	bf00      	nop
 8012f5c:	08013e34 	.word	0x08013e34
 8012f60:	08013ea5 	.word	0x08013ea5

08012f64 <__ratio>:
 8012f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f68:	4688      	mov	r8, r1
 8012f6a:	4669      	mov	r1, sp
 8012f6c:	4681      	mov	r9, r0
 8012f6e:	f7ff ff55 	bl	8012e1c <__b2d>
 8012f72:	a901      	add	r1, sp, #4
 8012f74:	4640      	mov	r0, r8
 8012f76:	ec55 4b10 	vmov	r4, r5, d0
 8012f7a:	f7ff ff4f 	bl	8012e1c <__b2d>
 8012f7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012f86:	eba3 0c02 	sub.w	ip, r3, r2
 8012f8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012f8e:	1a9b      	subs	r3, r3, r2
 8012f90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012f94:	ec51 0b10 	vmov	r0, r1, d0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	bfd6      	itet	le
 8012f9c:	460a      	movle	r2, r1
 8012f9e:	462a      	movgt	r2, r5
 8012fa0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012fa4:	468b      	mov	fp, r1
 8012fa6:	462f      	mov	r7, r5
 8012fa8:	bfd4      	ite	le
 8012faa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012fae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	ee10 2a10 	vmov	r2, s0
 8012fb8:	465b      	mov	r3, fp
 8012fba:	4639      	mov	r1, r7
 8012fbc:	f7ed fc6e 	bl	800089c <__aeabi_ddiv>
 8012fc0:	ec41 0b10 	vmov	d0, r0, r1
 8012fc4:	b003      	add	sp, #12
 8012fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012fca <__copybits>:
 8012fca:	3901      	subs	r1, #1
 8012fcc:	b570      	push	{r4, r5, r6, lr}
 8012fce:	1149      	asrs	r1, r1, #5
 8012fd0:	6914      	ldr	r4, [r2, #16]
 8012fd2:	3101      	adds	r1, #1
 8012fd4:	f102 0314 	add.w	r3, r2, #20
 8012fd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012fdc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012fe0:	1f05      	subs	r5, r0, #4
 8012fe2:	42a3      	cmp	r3, r4
 8012fe4:	d30c      	bcc.n	8013000 <__copybits+0x36>
 8012fe6:	1aa3      	subs	r3, r4, r2
 8012fe8:	3b11      	subs	r3, #17
 8012fea:	f023 0303 	bic.w	r3, r3, #3
 8012fee:	3211      	adds	r2, #17
 8012ff0:	42a2      	cmp	r2, r4
 8012ff2:	bf88      	it	hi
 8012ff4:	2300      	movhi	r3, #0
 8012ff6:	4418      	add	r0, r3
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	4288      	cmp	r0, r1
 8012ffc:	d305      	bcc.n	801300a <__copybits+0x40>
 8012ffe:	bd70      	pop	{r4, r5, r6, pc}
 8013000:	f853 6b04 	ldr.w	r6, [r3], #4
 8013004:	f845 6f04 	str.w	r6, [r5, #4]!
 8013008:	e7eb      	b.n	8012fe2 <__copybits+0x18>
 801300a:	f840 3b04 	str.w	r3, [r0], #4
 801300e:	e7f4      	b.n	8012ffa <__copybits+0x30>

08013010 <__any_on>:
 8013010:	f100 0214 	add.w	r2, r0, #20
 8013014:	6900      	ldr	r0, [r0, #16]
 8013016:	114b      	asrs	r3, r1, #5
 8013018:	4298      	cmp	r0, r3
 801301a:	b510      	push	{r4, lr}
 801301c:	db11      	blt.n	8013042 <__any_on+0x32>
 801301e:	dd0a      	ble.n	8013036 <__any_on+0x26>
 8013020:	f011 011f 	ands.w	r1, r1, #31
 8013024:	d007      	beq.n	8013036 <__any_on+0x26>
 8013026:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801302a:	fa24 f001 	lsr.w	r0, r4, r1
 801302e:	fa00 f101 	lsl.w	r1, r0, r1
 8013032:	428c      	cmp	r4, r1
 8013034:	d10b      	bne.n	801304e <__any_on+0x3e>
 8013036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801303a:	4293      	cmp	r3, r2
 801303c:	d803      	bhi.n	8013046 <__any_on+0x36>
 801303e:	2000      	movs	r0, #0
 8013040:	bd10      	pop	{r4, pc}
 8013042:	4603      	mov	r3, r0
 8013044:	e7f7      	b.n	8013036 <__any_on+0x26>
 8013046:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801304a:	2900      	cmp	r1, #0
 801304c:	d0f5      	beq.n	801303a <__any_on+0x2a>
 801304e:	2001      	movs	r0, #1
 8013050:	e7f6      	b.n	8013040 <__any_on+0x30>

08013052 <__ascii_wctomb>:
 8013052:	b149      	cbz	r1, 8013068 <__ascii_wctomb+0x16>
 8013054:	2aff      	cmp	r2, #255	; 0xff
 8013056:	bf85      	ittet	hi
 8013058:	238a      	movhi	r3, #138	; 0x8a
 801305a:	6003      	strhi	r3, [r0, #0]
 801305c:	700a      	strbls	r2, [r1, #0]
 801305e:	f04f 30ff 	movhi.w	r0, #4294967295
 8013062:	bf98      	it	ls
 8013064:	2001      	movls	r0, #1
 8013066:	4770      	bx	lr
 8013068:	4608      	mov	r0, r1
 801306a:	4770      	bx	lr

0801306c <__ssputs_r>:
 801306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013070:	688e      	ldr	r6, [r1, #8]
 8013072:	461f      	mov	r7, r3
 8013074:	42be      	cmp	r6, r7
 8013076:	680b      	ldr	r3, [r1, #0]
 8013078:	4682      	mov	sl, r0
 801307a:	460c      	mov	r4, r1
 801307c:	4690      	mov	r8, r2
 801307e:	d82c      	bhi.n	80130da <__ssputs_r+0x6e>
 8013080:	898a      	ldrh	r2, [r1, #12]
 8013082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013086:	d026      	beq.n	80130d6 <__ssputs_r+0x6a>
 8013088:	6965      	ldr	r5, [r4, #20]
 801308a:	6909      	ldr	r1, [r1, #16]
 801308c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013090:	eba3 0901 	sub.w	r9, r3, r1
 8013094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013098:	1c7b      	adds	r3, r7, #1
 801309a:	444b      	add	r3, r9
 801309c:	106d      	asrs	r5, r5, #1
 801309e:	429d      	cmp	r5, r3
 80130a0:	bf38      	it	cc
 80130a2:	461d      	movcc	r5, r3
 80130a4:	0553      	lsls	r3, r2, #21
 80130a6:	d527      	bpl.n	80130f8 <__ssputs_r+0x8c>
 80130a8:	4629      	mov	r1, r5
 80130aa:	f7fc f83d 	bl	800f128 <_malloc_r>
 80130ae:	4606      	mov	r6, r0
 80130b0:	b360      	cbz	r0, 801310c <__ssputs_r+0xa0>
 80130b2:	6921      	ldr	r1, [r4, #16]
 80130b4:	464a      	mov	r2, r9
 80130b6:	f7fe f8b4 	bl	8011222 <memcpy>
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80130c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130c4:	81a3      	strh	r3, [r4, #12]
 80130c6:	6126      	str	r6, [r4, #16]
 80130c8:	6165      	str	r5, [r4, #20]
 80130ca:	444e      	add	r6, r9
 80130cc:	eba5 0509 	sub.w	r5, r5, r9
 80130d0:	6026      	str	r6, [r4, #0]
 80130d2:	60a5      	str	r5, [r4, #8]
 80130d4:	463e      	mov	r6, r7
 80130d6:	42be      	cmp	r6, r7
 80130d8:	d900      	bls.n	80130dc <__ssputs_r+0x70>
 80130da:	463e      	mov	r6, r7
 80130dc:	6820      	ldr	r0, [r4, #0]
 80130de:	4632      	mov	r2, r6
 80130e0:	4641      	mov	r1, r8
 80130e2:	f000 f9db 	bl	801349c <memmove>
 80130e6:	68a3      	ldr	r3, [r4, #8]
 80130e8:	1b9b      	subs	r3, r3, r6
 80130ea:	60a3      	str	r3, [r4, #8]
 80130ec:	6823      	ldr	r3, [r4, #0]
 80130ee:	4433      	add	r3, r6
 80130f0:	6023      	str	r3, [r4, #0]
 80130f2:	2000      	movs	r0, #0
 80130f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130f8:	462a      	mov	r2, r5
 80130fa:	f000 fa06 	bl	801350a <_realloc_r>
 80130fe:	4606      	mov	r6, r0
 8013100:	2800      	cmp	r0, #0
 8013102:	d1e0      	bne.n	80130c6 <__ssputs_r+0x5a>
 8013104:	6921      	ldr	r1, [r4, #16]
 8013106:	4650      	mov	r0, sl
 8013108:	f7fe ff40 	bl	8011f8c <_free_r>
 801310c:	230c      	movs	r3, #12
 801310e:	f8ca 3000 	str.w	r3, [sl]
 8013112:	89a3      	ldrh	r3, [r4, #12]
 8013114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013118:	81a3      	strh	r3, [r4, #12]
 801311a:	f04f 30ff 	mov.w	r0, #4294967295
 801311e:	e7e9      	b.n	80130f4 <__ssputs_r+0x88>

08013120 <_svfiprintf_r>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	4698      	mov	r8, r3
 8013126:	898b      	ldrh	r3, [r1, #12]
 8013128:	061b      	lsls	r3, r3, #24
 801312a:	b09d      	sub	sp, #116	; 0x74
 801312c:	4607      	mov	r7, r0
 801312e:	460d      	mov	r5, r1
 8013130:	4614      	mov	r4, r2
 8013132:	d50e      	bpl.n	8013152 <_svfiprintf_r+0x32>
 8013134:	690b      	ldr	r3, [r1, #16]
 8013136:	b963      	cbnz	r3, 8013152 <_svfiprintf_r+0x32>
 8013138:	2140      	movs	r1, #64	; 0x40
 801313a:	f7fb fff5 	bl	800f128 <_malloc_r>
 801313e:	6028      	str	r0, [r5, #0]
 8013140:	6128      	str	r0, [r5, #16]
 8013142:	b920      	cbnz	r0, 801314e <_svfiprintf_r+0x2e>
 8013144:	230c      	movs	r3, #12
 8013146:	603b      	str	r3, [r7, #0]
 8013148:	f04f 30ff 	mov.w	r0, #4294967295
 801314c:	e0d0      	b.n	80132f0 <_svfiprintf_r+0x1d0>
 801314e:	2340      	movs	r3, #64	; 0x40
 8013150:	616b      	str	r3, [r5, #20]
 8013152:	2300      	movs	r3, #0
 8013154:	9309      	str	r3, [sp, #36]	; 0x24
 8013156:	2320      	movs	r3, #32
 8013158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801315c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013160:	2330      	movs	r3, #48	; 0x30
 8013162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013308 <_svfiprintf_r+0x1e8>
 8013166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801316a:	f04f 0901 	mov.w	r9, #1
 801316e:	4623      	mov	r3, r4
 8013170:	469a      	mov	sl, r3
 8013172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013176:	b10a      	cbz	r2, 801317c <_svfiprintf_r+0x5c>
 8013178:	2a25      	cmp	r2, #37	; 0x25
 801317a:	d1f9      	bne.n	8013170 <_svfiprintf_r+0x50>
 801317c:	ebba 0b04 	subs.w	fp, sl, r4
 8013180:	d00b      	beq.n	801319a <_svfiprintf_r+0x7a>
 8013182:	465b      	mov	r3, fp
 8013184:	4622      	mov	r2, r4
 8013186:	4629      	mov	r1, r5
 8013188:	4638      	mov	r0, r7
 801318a:	f7ff ff6f 	bl	801306c <__ssputs_r>
 801318e:	3001      	adds	r0, #1
 8013190:	f000 80a9 	beq.w	80132e6 <_svfiprintf_r+0x1c6>
 8013194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013196:	445a      	add	r2, fp
 8013198:	9209      	str	r2, [sp, #36]	; 0x24
 801319a:	f89a 3000 	ldrb.w	r3, [sl]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f000 80a1 	beq.w	80132e6 <_svfiprintf_r+0x1c6>
 80131a4:	2300      	movs	r3, #0
 80131a6:	f04f 32ff 	mov.w	r2, #4294967295
 80131aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131ae:	f10a 0a01 	add.w	sl, sl, #1
 80131b2:	9304      	str	r3, [sp, #16]
 80131b4:	9307      	str	r3, [sp, #28]
 80131b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131ba:	931a      	str	r3, [sp, #104]	; 0x68
 80131bc:	4654      	mov	r4, sl
 80131be:	2205      	movs	r2, #5
 80131c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131c4:	4850      	ldr	r0, [pc, #320]	; (8013308 <_svfiprintf_r+0x1e8>)
 80131c6:	f7ed f82b 	bl	8000220 <memchr>
 80131ca:	9a04      	ldr	r2, [sp, #16]
 80131cc:	b9d8      	cbnz	r0, 8013206 <_svfiprintf_r+0xe6>
 80131ce:	06d0      	lsls	r0, r2, #27
 80131d0:	bf44      	itt	mi
 80131d2:	2320      	movmi	r3, #32
 80131d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131d8:	0711      	lsls	r1, r2, #28
 80131da:	bf44      	itt	mi
 80131dc:	232b      	movmi	r3, #43	; 0x2b
 80131de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131e2:	f89a 3000 	ldrb.w	r3, [sl]
 80131e6:	2b2a      	cmp	r3, #42	; 0x2a
 80131e8:	d015      	beq.n	8013216 <_svfiprintf_r+0xf6>
 80131ea:	9a07      	ldr	r2, [sp, #28]
 80131ec:	4654      	mov	r4, sl
 80131ee:	2000      	movs	r0, #0
 80131f0:	f04f 0c0a 	mov.w	ip, #10
 80131f4:	4621      	mov	r1, r4
 80131f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131fa:	3b30      	subs	r3, #48	; 0x30
 80131fc:	2b09      	cmp	r3, #9
 80131fe:	d94d      	bls.n	801329c <_svfiprintf_r+0x17c>
 8013200:	b1b0      	cbz	r0, 8013230 <_svfiprintf_r+0x110>
 8013202:	9207      	str	r2, [sp, #28]
 8013204:	e014      	b.n	8013230 <_svfiprintf_r+0x110>
 8013206:	eba0 0308 	sub.w	r3, r0, r8
 801320a:	fa09 f303 	lsl.w	r3, r9, r3
 801320e:	4313      	orrs	r3, r2
 8013210:	9304      	str	r3, [sp, #16]
 8013212:	46a2      	mov	sl, r4
 8013214:	e7d2      	b.n	80131bc <_svfiprintf_r+0x9c>
 8013216:	9b03      	ldr	r3, [sp, #12]
 8013218:	1d19      	adds	r1, r3, #4
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	9103      	str	r1, [sp, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	bfbb      	ittet	lt
 8013222:	425b      	neglt	r3, r3
 8013224:	f042 0202 	orrlt.w	r2, r2, #2
 8013228:	9307      	strge	r3, [sp, #28]
 801322a:	9307      	strlt	r3, [sp, #28]
 801322c:	bfb8      	it	lt
 801322e:	9204      	strlt	r2, [sp, #16]
 8013230:	7823      	ldrb	r3, [r4, #0]
 8013232:	2b2e      	cmp	r3, #46	; 0x2e
 8013234:	d10c      	bne.n	8013250 <_svfiprintf_r+0x130>
 8013236:	7863      	ldrb	r3, [r4, #1]
 8013238:	2b2a      	cmp	r3, #42	; 0x2a
 801323a:	d134      	bne.n	80132a6 <_svfiprintf_r+0x186>
 801323c:	9b03      	ldr	r3, [sp, #12]
 801323e:	1d1a      	adds	r2, r3, #4
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	9203      	str	r2, [sp, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	bfb8      	it	lt
 8013248:	f04f 33ff 	movlt.w	r3, #4294967295
 801324c:	3402      	adds	r4, #2
 801324e:	9305      	str	r3, [sp, #20]
 8013250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013318 <_svfiprintf_r+0x1f8>
 8013254:	7821      	ldrb	r1, [r4, #0]
 8013256:	2203      	movs	r2, #3
 8013258:	4650      	mov	r0, sl
 801325a:	f7ec ffe1 	bl	8000220 <memchr>
 801325e:	b138      	cbz	r0, 8013270 <_svfiprintf_r+0x150>
 8013260:	9b04      	ldr	r3, [sp, #16]
 8013262:	eba0 000a 	sub.w	r0, r0, sl
 8013266:	2240      	movs	r2, #64	; 0x40
 8013268:	4082      	lsls	r2, r0
 801326a:	4313      	orrs	r3, r2
 801326c:	3401      	adds	r4, #1
 801326e:	9304      	str	r3, [sp, #16]
 8013270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013274:	4825      	ldr	r0, [pc, #148]	; (801330c <_svfiprintf_r+0x1ec>)
 8013276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801327a:	2206      	movs	r2, #6
 801327c:	f7ec ffd0 	bl	8000220 <memchr>
 8013280:	2800      	cmp	r0, #0
 8013282:	d038      	beq.n	80132f6 <_svfiprintf_r+0x1d6>
 8013284:	4b22      	ldr	r3, [pc, #136]	; (8013310 <_svfiprintf_r+0x1f0>)
 8013286:	bb1b      	cbnz	r3, 80132d0 <_svfiprintf_r+0x1b0>
 8013288:	9b03      	ldr	r3, [sp, #12]
 801328a:	3307      	adds	r3, #7
 801328c:	f023 0307 	bic.w	r3, r3, #7
 8013290:	3308      	adds	r3, #8
 8013292:	9303      	str	r3, [sp, #12]
 8013294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013296:	4433      	add	r3, r6
 8013298:	9309      	str	r3, [sp, #36]	; 0x24
 801329a:	e768      	b.n	801316e <_svfiprintf_r+0x4e>
 801329c:	fb0c 3202 	mla	r2, ip, r2, r3
 80132a0:	460c      	mov	r4, r1
 80132a2:	2001      	movs	r0, #1
 80132a4:	e7a6      	b.n	80131f4 <_svfiprintf_r+0xd4>
 80132a6:	2300      	movs	r3, #0
 80132a8:	3401      	adds	r4, #1
 80132aa:	9305      	str	r3, [sp, #20]
 80132ac:	4619      	mov	r1, r3
 80132ae:	f04f 0c0a 	mov.w	ip, #10
 80132b2:	4620      	mov	r0, r4
 80132b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132b8:	3a30      	subs	r2, #48	; 0x30
 80132ba:	2a09      	cmp	r2, #9
 80132bc:	d903      	bls.n	80132c6 <_svfiprintf_r+0x1a6>
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d0c6      	beq.n	8013250 <_svfiprintf_r+0x130>
 80132c2:	9105      	str	r1, [sp, #20]
 80132c4:	e7c4      	b.n	8013250 <_svfiprintf_r+0x130>
 80132c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80132ca:	4604      	mov	r4, r0
 80132cc:	2301      	movs	r3, #1
 80132ce:	e7f0      	b.n	80132b2 <_svfiprintf_r+0x192>
 80132d0:	ab03      	add	r3, sp, #12
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	462a      	mov	r2, r5
 80132d6:	4b0f      	ldr	r3, [pc, #60]	; (8013314 <_svfiprintf_r+0x1f4>)
 80132d8:	a904      	add	r1, sp, #16
 80132da:	4638      	mov	r0, r7
 80132dc:	f7fc ff56 	bl	801018c <_printf_float>
 80132e0:	1c42      	adds	r2, r0, #1
 80132e2:	4606      	mov	r6, r0
 80132e4:	d1d6      	bne.n	8013294 <_svfiprintf_r+0x174>
 80132e6:	89ab      	ldrh	r3, [r5, #12]
 80132e8:	065b      	lsls	r3, r3, #25
 80132ea:	f53f af2d 	bmi.w	8013148 <_svfiprintf_r+0x28>
 80132ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132f0:	b01d      	add	sp, #116	; 0x74
 80132f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f6:	ab03      	add	r3, sp, #12
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	462a      	mov	r2, r5
 80132fc:	4b05      	ldr	r3, [pc, #20]	; (8013314 <_svfiprintf_r+0x1f4>)
 80132fe:	a904      	add	r1, sp, #16
 8013300:	4638      	mov	r0, r7
 8013302:	f7fd f9e7 	bl	80106d4 <_printf_i>
 8013306:	e7eb      	b.n	80132e0 <_svfiprintf_r+0x1c0>
 8013308:	08013ffc 	.word	0x08013ffc
 801330c:	08014006 	.word	0x08014006
 8013310:	0801018d 	.word	0x0801018d
 8013314:	0801306d 	.word	0x0801306d
 8013318:	08014002 	.word	0x08014002

0801331c <__sflush_r>:
 801331c:	898a      	ldrh	r2, [r1, #12]
 801331e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013322:	4605      	mov	r5, r0
 8013324:	0710      	lsls	r0, r2, #28
 8013326:	460c      	mov	r4, r1
 8013328:	d458      	bmi.n	80133dc <__sflush_r+0xc0>
 801332a:	684b      	ldr	r3, [r1, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	dc05      	bgt.n	801333c <__sflush_r+0x20>
 8013330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013332:	2b00      	cmp	r3, #0
 8013334:	dc02      	bgt.n	801333c <__sflush_r+0x20>
 8013336:	2000      	movs	r0, #0
 8013338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801333e:	2e00      	cmp	r6, #0
 8013340:	d0f9      	beq.n	8013336 <__sflush_r+0x1a>
 8013342:	2300      	movs	r3, #0
 8013344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013348:	682f      	ldr	r7, [r5, #0]
 801334a:	6a21      	ldr	r1, [r4, #32]
 801334c:	602b      	str	r3, [r5, #0]
 801334e:	d032      	beq.n	80133b6 <__sflush_r+0x9a>
 8013350:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013352:	89a3      	ldrh	r3, [r4, #12]
 8013354:	075a      	lsls	r2, r3, #29
 8013356:	d505      	bpl.n	8013364 <__sflush_r+0x48>
 8013358:	6863      	ldr	r3, [r4, #4]
 801335a:	1ac0      	subs	r0, r0, r3
 801335c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801335e:	b10b      	cbz	r3, 8013364 <__sflush_r+0x48>
 8013360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013362:	1ac0      	subs	r0, r0, r3
 8013364:	2300      	movs	r3, #0
 8013366:	4602      	mov	r2, r0
 8013368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801336a:	6a21      	ldr	r1, [r4, #32]
 801336c:	4628      	mov	r0, r5
 801336e:	47b0      	blx	r6
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	89a3      	ldrh	r3, [r4, #12]
 8013374:	d106      	bne.n	8013384 <__sflush_r+0x68>
 8013376:	6829      	ldr	r1, [r5, #0]
 8013378:	291d      	cmp	r1, #29
 801337a:	d82b      	bhi.n	80133d4 <__sflush_r+0xb8>
 801337c:	4a29      	ldr	r2, [pc, #164]	; (8013424 <__sflush_r+0x108>)
 801337e:	410a      	asrs	r2, r1
 8013380:	07d6      	lsls	r6, r2, #31
 8013382:	d427      	bmi.n	80133d4 <__sflush_r+0xb8>
 8013384:	2200      	movs	r2, #0
 8013386:	6062      	str	r2, [r4, #4]
 8013388:	04d9      	lsls	r1, r3, #19
 801338a:	6922      	ldr	r2, [r4, #16]
 801338c:	6022      	str	r2, [r4, #0]
 801338e:	d504      	bpl.n	801339a <__sflush_r+0x7e>
 8013390:	1c42      	adds	r2, r0, #1
 8013392:	d101      	bne.n	8013398 <__sflush_r+0x7c>
 8013394:	682b      	ldr	r3, [r5, #0]
 8013396:	b903      	cbnz	r3, 801339a <__sflush_r+0x7e>
 8013398:	6560      	str	r0, [r4, #84]	; 0x54
 801339a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801339c:	602f      	str	r7, [r5, #0]
 801339e:	2900      	cmp	r1, #0
 80133a0:	d0c9      	beq.n	8013336 <__sflush_r+0x1a>
 80133a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133a6:	4299      	cmp	r1, r3
 80133a8:	d002      	beq.n	80133b0 <__sflush_r+0x94>
 80133aa:	4628      	mov	r0, r5
 80133ac:	f7fe fdee 	bl	8011f8c <_free_r>
 80133b0:	2000      	movs	r0, #0
 80133b2:	6360      	str	r0, [r4, #52]	; 0x34
 80133b4:	e7c0      	b.n	8013338 <__sflush_r+0x1c>
 80133b6:	2301      	movs	r3, #1
 80133b8:	4628      	mov	r0, r5
 80133ba:	47b0      	blx	r6
 80133bc:	1c41      	adds	r1, r0, #1
 80133be:	d1c8      	bne.n	8013352 <__sflush_r+0x36>
 80133c0:	682b      	ldr	r3, [r5, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d0c5      	beq.n	8013352 <__sflush_r+0x36>
 80133c6:	2b1d      	cmp	r3, #29
 80133c8:	d001      	beq.n	80133ce <__sflush_r+0xb2>
 80133ca:	2b16      	cmp	r3, #22
 80133cc:	d101      	bne.n	80133d2 <__sflush_r+0xb6>
 80133ce:	602f      	str	r7, [r5, #0]
 80133d0:	e7b1      	b.n	8013336 <__sflush_r+0x1a>
 80133d2:	89a3      	ldrh	r3, [r4, #12]
 80133d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133d8:	81a3      	strh	r3, [r4, #12]
 80133da:	e7ad      	b.n	8013338 <__sflush_r+0x1c>
 80133dc:	690f      	ldr	r7, [r1, #16]
 80133de:	2f00      	cmp	r7, #0
 80133e0:	d0a9      	beq.n	8013336 <__sflush_r+0x1a>
 80133e2:	0793      	lsls	r3, r2, #30
 80133e4:	680e      	ldr	r6, [r1, #0]
 80133e6:	bf08      	it	eq
 80133e8:	694b      	ldreq	r3, [r1, #20]
 80133ea:	600f      	str	r7, [r1, #0]
 80133ec:	bf18      	it	ne
 80133ee:	2300      	movne	r3, #0
 80133f0:	eba6 0807 	sub.w	r8, r6, r7
 80133f4:	608b      	str	r3, [r1, #8]
 80133f6:	f1b8 0f00 	cmp.w	r8, #0
 80133fa:	dd9c      	ble.n	8013336 <__sflush_r+0x1a>
 80133fc:	6a21      	ldr	r1, [r4, #32]
 80133fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013400:	4643      	mov	r3, r8
 8013402:	463a      	mov	r2, r7
 8013404:	4628      	mov	r0, r5
 8013406:	47b0      	blx	r6
 8013408:	2800      	cmp	r0, #0
 801340a:	dc06      	bgt.n	801341a <__sflush_r+0xfe>
 801340c:	89a3      	ldrh	r3, [r4, #12]
 801340e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013412:	81a3      	strh	r3, [r4, #12]
 8013414:	f04f 30ff 	mov.w	r0, #4294967295
 8013418:	e78e      	b.n	8013338 <__sflush_r+0x1c>
 801341a:	4407      	add	r7, r0
 801341c:	eba8 0800 	sub.w	r8, r8, r0
 8013420:	e7e9      	b.n	80133f6 <__sflush_r+0xda>
 8013422:	bf00      	nop
 8013424:	dfbffffe 	.word	0xdfbffffe

08013428 <_fflush_r>:
 8013428:	b538      	push	{r3, r4, r5, lr}
 801342a:	690b      	ldr	r3, [r1, #16]
 801342c:	4605      	mov	r5, r0
 801342e:	460c      	mov	r4, r1
 8013430:	b913      	cbnz	r3, 8013438 <_fflush_r+0x10>
 8013432:	2500      	movs	r5, #0
 8013434:	4628      	mov	r0, r5
 8013436:	bd38      	pop	{r3, r4, r5, pc}
 8013438:	b118      	cbz	r0, 8013442 <_fflush_r+0x1a>
 801343a:	6a03      	ldr	r3, [r0, #32]
 801343c:	b90b      	cbnz	r3, 8013442 <_fflush_r+0x1a>
 801343e:	f7fd fd07 	bl	8010e50 <__sinit>
 8013442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d0f3      	beq.n	8013432 <_fflush_r+0xa>
 801344a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801344c:	07d0      	lsls	r0, r2, #31
 801344e:	d404      	bmi.n	801345a <_fflush_r+0x32>
 8013450:	0599      	lsls	r1, r3, #22
 8013452:	d402      	bmi.n	801345a <_fflush_r+0x32>
 8013454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013456:	f7fd feda 	bl	801120e <__retarget_lock_acquire_recursive>
 801345a:	4628      	mov	r0, r5
 801345c:	4621      	mov	r1, r4
 801345e:	f7ff ff5d 	bl	801331c <__sflush_r>
 8013462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013464:	07da      	lsls	r2, r3, #31
 8013466:	4605      	mov	r5, r0
 8013468:	d4e4      	bmi.n	8013434 <_fflush_r+0xc>
 801346a:	89a3      	ldrh	r3, [r4, #12]
 801346c:	059b      	lsls	r3, r3, #22
 801346e:	d4e1      	bmi.n	8013434 <_fflush_r+0xc>
 8013470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013472:	f7fd fecd 	bl	8011210 <__retarget_lock_release_recursive>
 8013476:	e7dd      	b.n	8013434 <_fflush_r+0xc>

08013478 <fiprintf>:
 8013478:	b40e      	push	{r1, r2, r3}
 801347a:	b503      	push	{r0, r1, lr}
 801347c:	4601      	mov	r1, r0
 801347e:	ab03      	add	r3, sp, #12
 8013480:	4805      	ldr	r0, [pc, #20]	; (8013498 <fiprintf+0x20>)
 8013482:	f853 2b04 	ldr.w	r2, [r3], #4
 8013486:	6800      	ldr	r0, [r0, #0]
 8013488:	9301      	str	r3, [sp, #4]
 801348a:	f000 f897 	bl	80135bc <_vfiprintf_r>
 801348e:	b002      	add	sp, #8
 8013490:	f85d eb04 	ldr.w	lr, [sp], #4
 8013494:	b003      	add	sp, #12
 8013496:	4770      	bx	lr
 8013498:	20000348 	.word	0x20000348

0801349c <memmove>:
 801349c:	4288      	cmp	r0, r1
 801349e:	b510      	push	{r4, lr}
 80134a0:	eb01 0402 	add.w	r4, r1, r2
 80134a4:	d902      	bls.n	80134ac <memmove+0x10>
 80134a6:	4284      	cmp	r4, r0
 80134a8:	4623      	mov	r3, r4
 80134aa:	d807      	bhi.n	80134bc <memmove+0x20>
 80134ac:	1e43      	subs	r3, r0, #1
 80134ae:	42a1      	cmp	r1, r4
 80134b0:	d008      	beq.n	80134c4 <memmove+0x28>
 80134b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134ba:	e7f8      	b.n	80134ae <memmove+0x12>
 80134bc:	4402      	add	r2, r0
 80134be:	4601      	mov	r1, r0
 80134c0:	428a      	cmp	r2, r1
 80134c2:	d100      	bne.n	80134c6 <memmove+0x2a>
 80134c4:	bd10      	pop	{r4, pc}
 80134c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134ce:	e7f7      	b.n	80134c0 <memmove+0x24>

080134d0 <abort>:
 80134d0:	b508      	push	{r3, lr}
 80134d2:	2006      	movs	r0, #6
 80134d4:	f000 fa4a 	bl	801396c <raise>
 80134d8:	2001      	movs	r0, #1
 80134da:	f7ee fe23 	bl	8002124 <_exit>

080134de <_calloc_r>:
 80134de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134e0:	fba1 2402 	umull	r2, r4, r1, r2
 80134e4:	b94c      	cbnz	r4, 80134fa <_calloc_r+0x1c>
 80134e6:	4611      	mov	r1, r2
 80134e8:	9201      	str	r2, [sp, #4]
 80134ea:	f7fb fe1d 	bl	800f128 <_malloc_r>
 80134ee:	9a01      	ldr	r2, [sp, #4]
 80134f0:	4605      	mov	r5, r0
 80134f2:	b930      	cbnz	r0, 8013502 <_calloc_r+0x24>
 80134f4:	4628      	mov	r0, r5
 80134f6:	b003      	add	sp, #12
 80134f8:	bd30      	pop	{r4, r5, pc}
 80134fa:	220c      	movs	r2, #12
 80134fc:	6002      	str	r2, [r0, #0]
 80134fe:	2500      	movs	r5, #0
 8013500:	e7f8      	b.n	80134f4 <_calloc_r+0x16>
 8013502:	4621      	mov	r1, r4
 8013504:	f7fd fd71 	bl	8010fea <memset>
 8013508:	e7f4      	b.n	80134f4 <_calloc_r+0x16>

0801350a <_realloc_r>:
 801350a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801350e:	4680      	mov	r8, r0
 8013510:	4614      	mov	r4, r2
 8013512:	460e      	mov	r6, r1
 8013514:	b921      	cbnz	r1, 8013520 <_realloc_r+0x16>
 8013516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801351a:	4611      	mov	r1, r2
 801351c:	f7fb be04 	b.w	800f128 <_malloc_r>
 8013520:	b92a      	cbnz	r2, 801352e <_realloc_r+0x24>
 8013522:	f7fe fd33 	bl	8011f8c <_free_r>
 8013526:	4625      	mov	r5, r4
 8013528:	4628      	mov	r0, r5
 801352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801352e:	f000 fa39 	bl	80139a4 <_malloc_usable_size_r>
 8013532:	4284      	cmp	r4, r0
 8013534:	4607      	mov	r7, r0
 8013536:	d802      	bhi.n	801353e <_realloc_r+0x34>
 8013538:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801353c:	d812      	bhi.n	8013564 <_realloc_r+0x5a>
 801353e:	4621      	mov	r1, r4
 8013540:	4640      	mov	r0, r8
 8013542:	f7fb fdf1 	bl	800f128 <_malloc_r>
 8013546:	4605      	mov	r5, r0
 8013548:	2800      	cmp	r0, #0
 801354a:	d0ed      	beq.n	8013528 <_realloc_r+0x1e>
 801354c:	42bc      	cmp	r4, r7
 801354e:	4622      	mov	r2, r4
 8013550:	4631      	mov	r1, r6
 8013552:	bf28      	it	cs
 8013554:	463a      	movcs	r2, r7
 8013556:	f7fd fe64 	bl	8011222 <memcpy>
 801355a:	4631      	mov	r1, r6
 801355c:	4640      	mov	r0, r8
 801355e:	f7fe fd15 	bl	8011f8c <_free_r>
 8013562:	e7e1      	b.n	8013528 <_realloc_r+0x1e>
 8013564:	4635      	mov	r5, r6
 8013566:	e7df      	b.n	8013528 <_realloc_r+0x1e>

08013568 <__sfputc_r>:
 8013568:	6893      	ldr	r3, [r2, #8]
 801356a:	3b01      	subs	r3, #1
 801356c:	2b00      	cmp	r3, #0
 801356e:	b410      	push	{r4}
 8013570:	6093      	str	r3, [r2, #8]
 8013572:	da08      	bge.n	8013586 <__sfputc_r+0x1e>
 8013574:	6994      	ldr	r4, [r2, #24]
 8013576:	42a3      	cmp	r3, r4
 8013578:	db01      	blt.n	801357e <__sfputc_r+0x16>
 801357a:	290a      	cmp	r1, #10
 801357c:	d103      	bne.n	8013586 <__sfputc_r+0x1e>
 801357e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013582:	f000 b935 	b.w	80137f0 <__swbuf_r>
 8013586:	6813      	ldr	r3, [r2, #0]
 8013588:	1c58      	adds	r0, r3, #1
 801358a:	6010      	str	r0, [r2, #0]
 801358c:	7019      	strb	r1, [r3, #0]
 801358e:	4608      	mov	r0, r1
 8013590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013594:	4770      	bx	lr

08013596 <__sfputs_r>:
 8013596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013598:	4606      	mov	r6, r0
 801359a:	460f      	mov	r7, r1
 801359c:	4614      	mov	r4, r2
 801359e:	18d5      	adds	r5, r2, r3
 80135a0:	42ac      	cmp	r4, r5
 80135a2:	d101      	bne.n	80135a8 <__sfputs_r+0x12>
 80135a4:	2000      	movs	r0, #0
 80135a6:	e007      	b.n	80135b8 <__sfputs_r+0x22>
 80135a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135ac:	463a      	mov	r2, r7
 80135ae:	4630      	mov	r0, r6
 80135b0:	f7ff ffda 	bl	8013568 <__sfputc_r>
 80135b4:	1c43      	adds	r3, r0, #1
 80135b6:	d1f3      	bne.n	80135a0 <__sfputs_r+0xa>
 80135b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135bc <_vfiprintf_r>:
 80135bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c0:	460d      	mov	r5, r1
 80135c2:	b09d      	sub	sp, #116	; 0x74
 80135c4:	4614      	mov	r4, r2
 80135c6:	4698      	mov	r8, r3
 80135c8:	4606      	mov	r6, r0
 80135ca:	b118      	cbz	r0, 80135d4 <_vfiprintf_r+0x18>
 80135cc:	6a03      	ldr	r3, [r0, #32]
 80135ce:	b90b      	cbnz	r3, 80135d4 <_vfiprintf_r+0x18>
 80135d0:	f7fd fc3e 	bl	8010e50 <__sinit>
 80135d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135d6:	07d9      	lsls	r1, r3, #31
 80135d8:	d405      	bmi.n	80135e6 <_vfiprintf_r+0x2a>
 80135da:	89ab      	ldrh	r3, [r5, #12]
 80135dc:	059a      	lsls	r2, r3, #22
 80135de:	d402      	bmi.n	80135e6 <_vfiprintf_r+0x2a>
 80135e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135e2:	f7fd fe14 	bl	801120e <__retarget_lock_acquire_recursive>
 80135e6:	89ab      	ldrh	r3, [r5, #12]
 80135e8:	071b      	lsls	r3, r3, #28
 80135ea:	d501      	bpl.n	80135f0 <_vfiprintf_r+0x34>
 80135ec:	692b      	ldr	r3, [r5, #16]
 80135ee:	b99b      	cbnz	r3, 8013618 <_vfiprintf_r+0x5c>
 80135f0:	4629      	mov	r1, r5
 80135f2:	4630      	mov	r0, r6
 80135f4:	f000 f93a 	bl	801386c <__swsetup_r>
 80135f8:	b170      	cbz	r0, 8013618 <_vfiprintf_r+0x5c>
 80135fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135fc:	07dc      	lsls	r4, r3, #31
 80135fe:	d504      	bpl.n	801360a <_vfiprintf_r+0x4e>
 8013600:	f04f 30ff 	mov.w	r0, #4294967295
 8013604:	b01d      	add	sp, #116	; 0x74
 8013606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360a:	89ab      	ldrh	r3, [r5, #12]
 801360c:	0598      	lsls	r0, r3, #22
 801360e:	d4f7      	bmi.n	8013600 <_vfiprintf_r+0x44>
 8013610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013612:	f7fd fdfd 	bl	8011210 <__retarget_lock_release_recursive>
 8013616:	e7f3      	b.n	8013600 <_vfiprintf_r+0x44>
 8013618:	2300      	movs	r3, #0
 801361a:	9309      	str	r3, [sp, #36]	; 0x24
 801361c:	2320      	movs	r3, #32
 801361e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013622:	f8cd 800c 	str.w	r8, [sp, #12]
 8013626:	2330      	movs	r3, #48	; 0x30
 8013628:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80137dc <_vfiprintf_r+0x220>
 801362c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013630:	f04f 0901 	mov.w	r9, #1
 8013634:	4623      	mov	r3, r4
 8013636:	469a      	mov	sl, r3
 8013638:	f813 2b01 	ldrb.w	r2, [r3], #1
 801363c:	b10a      	cbz	r2, 8013642 <_vfiprintf_r+0x86>
 801363e:	2a25      	cmp	r2, #37	; 0x25
 8013640:	d1f9      	bne.n	8013636 <_vfiprintf_r+0x7a>
 8013642:	ebba 0b04 	subs.w	fp, sl, r4
 8013646:	d00b      	beq.n	8013660 <_vfiprintf_r+0xa4>
 8013648:	465b      	mov	r3, fp
 801364a:	4622      	mov	r2, r4
 801364c:	4629      	mov	r1, r5
 801364e:	4630      	mov	r0, r6
 8013650:	f7ff ffa1 	bl	8013596 <__sfputs_r>
 8013654:	3001      	adds	r0, #1
 8013656:	f000 80a9 	beq.w	80137ac <_vfiprintf_r+0x1f0>
 801365a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801365c:	445a      	add	r2, fp
 801365e:	9209      	str	r2, [sp, #36]	; 0x24
 8013660:	f89a 3000 	ldrb.w	r3, [sl]
 8013664:	2b00      	cmp	r3, #0
 8013666:	f000 80a1 	beq.w	80137ac <_vfiprintf_r+0x1f0>
 801366a:	2300      	movs	r3, #0
 801366c:	f04f 32ff 	mov.w	r2, #4294967295
 8013670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013674:	f10a 0a01 	add.w	sl, sl, #1
 8013678:	9304      	str	r3, [sp, #16]
 801367a:	9307      	str	r3, [sp, #28]
 801367c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013680:	931a      	str	r3, [sp, #104]	; 0x68
 8013682:	4654      	mov	r4, sl
 8013684:	2205      	movs	r2, #5
 8013686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801368a:	4854      	ldr	r0, [pc, #336]	; (80137dc <_vfiprintf_r+0x220>)
 801368c:	f7ec fdc8 	bl	8000220 <memchr>
 8013690:	9a04      	ldr	r2, [sp, #16]
 8013692:	b9d8      	cbnz	r0, 80136cc <_vfiprintf_r+0x110>
 8013694:	06d1      	lsls	r1, r2, #27
 8013696:	bf44      	itt	mi
 8013698:	2320      	movmi	r3, #32
 801369a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801369e:	0713      	lsls	r3, r2, #28
 80136a0:	bf44      	itt	mi
 80136a2:	232b      	movmi	r3, #43	; 0x2b
 80136a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136a8:	f89a 3000 	ldrb.w	r3, [sl]
 80136ac:	2b2a      	cmp	r3, #42	; 0x2a
 80136ae:	d015      	beq.n	80136dc <_vfiprintf_r+0x120>
 80136b0:	9a07      	ldr	r2, [sp, #28]
 80136b2:	4654      	mov	r4, sl
 80136b4:	2000      	movs	r0, #0
 80136b6:	f04f 0c0a 	mov.w	ip, #10
 80136ba:	4621      	mov	r1, r4
 80136bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136c0:	3b30      	subs	r3, #48	; 0x30
 80136c2:	2b09      	cmp	r3, #9
 80136c4:	d94d      	bls.n	8013762 <_vfiprintf_r+0x1a6>
 80136c6:	b1b0      	cbz	r0, 80136f6 <_vfiprintf_r+0x13a>
 80136c8:	9207      	str	r2, [sp, #28]
 80136ca:	e014      	b.n	80136f6 <_vfiprintf_r+0x13a>
 80136cc:	eba0 0308 	sub.w	r3, r0, r8
 80136d0:	fa09 f303 	lsl.w	r3, r9, r3
 80136d4:	4313      	orrs	r3, r2
 80136d6:	9304      	str	r3, [sp, #16]
 80136d8:	46a2      	mov	sl, r4
 80136da:	e7d2      	b.n	8013682 <_vfiprintf_r+0xc6>
 80136dc:	9b03      	ldr	r3, [sp, #12]
 80136de:	1d19      	adds	r1, r3, #4
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	9103      	str	r1, [sp, #12]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	bfbb      	ittet	lt
 80136e8:	425b      	neglt	r3, r3
 80136ea:	f042 0202 	orrlt.w	r2, r2, #2
 80136ee:	9307      	strge	r3, [sp, #28]
 80136f0:	9307      	strlt	r3, [sp, #28]
 80136f2:	bfb8      	it	lt
 80136f4:	9204      	strlt	r2, [sp, #16]
 80136f6:	7823      	ldrb	r3, [r4, #0]
 80136f8:	2b2e      	cmp	r3, #46	; 0x2e
 80136fa:	d10c      	bne.n	8013716 <_vfiprintf_r+0x15a>
 80136fc:	7863      	ldrb	r3, [r4, #1]
 80136fe:	2b2a      	cmp	r3, #42	; 0x2a
 8013700:	d134      	bne.n	801376c <_vfiprintf_r+0x1b0>
 8013702:	9b03      	ldr	r3, [sp, #12]
 8013704:	1d1a      	adds	r2, r3, #4
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	9203      	str	r2, [sp, #12]
 801370a:	2b00      	cmp	r3, #0
 801370c:	bfb8      	it	lt
 801370e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013712:	3402      	adds	r4, #2
 8013714:	9305      	str	r3, [sp, #20]
 8013716:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80137ec <_vfiprintf_r+0x230>
 801371a:	7821      	ldrb	r1, [r4, #0]
 801371c:	2203      	movs	r2, #3
 801371e:	4650      	mov	r0, sl
 8013720:	f7ec fd7e 	bl	8000220 <memchr>
 8013724:	b138      	cbz	r0, 8013736 <_vfiprintf_r+0x17a>
 8013726:	9b04      	ldr	r3, [sp, #16]
 8013728:	eba0 000a 	sub.w	r0, r0, sl
 801372c:	2240      	movs	r2, #64	; 0x40
 801372e:	4082      	lsls	r2, r0
 8013730:	4313      	orrs	r3, r2
 8013732:	3401      	adds	r4, #1
 8013734:	9304      	str	r3, [sp, #16]
 8013736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801373a:	4829      	ldr	r0, [pc, #164]	; (80137e0 <_vfiprintf_r+0x224>)
 801373c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013740:	2206      	movs	r2, #6
 8013742:	f7ec fd6d 	bl	8000220 <memchr>
 8013746:	2800      	cmp	r0, #0
 8013748:	d03f      	beq.n	80137ca <_vfiprintf_r+0x20e>
 801374a:	4b26      	ldr	r3, [pc, #152]	; (80137e4 <_vfiprintf_r+0x228>)
 801374c:	bb1b      	cbnz	r3, 8013796 <_vfiprintf_r+0x1da>
 801374e:	9b03      	ldr	r3, [sp, #12]
 8013750:	3307      	adds	r3, #7
 8013752:	f023 0307 	bic.w	r3, r3, #7
 8013756:	3308      	adds	r3, #8
 8013758:	9303      	str	r3, [sp, #12]
 801375a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801375c:	443b      	add	r3, r7
 801375e:	9309      	str	r3, [sp, #36]	; 0x24
 8013760:	e768      	b.n	8013634 <_vfiprintf_r+0x78>
 8013762:	fb0c 3202 	mla	r2, ip, r2, r3
 8013766:	460c      	mov	r4, r1
 8013768:	2001      	movs	r0, #1
 801376a:	e7a6      	b.n	80136ba <_vfiprintf_r+0xfe>
 801376c:	2300      	movs	r3, #0
 801376e:	3401      	adds	r4, #1
 8013770:	9305      	str	r3, [sp, #20]
 8013772:	4619      	mov	r1, r3
 8013774:	f04f 0c0a 	mov.w	ip, #10
 8013778:	4620      	mov	r0, r4
 801377a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801377e:	3a30      	subs	r2, #48	; 0x30
 8013780:	2a09      	cmp	r2, #9
 8013782:	d903      	bls.n	801378c <_vfiprintf_r+0x1d0>
 8013784:	2b00      	cmp	r3, #0
 8013786:	d0c6      	beq.n	8013716 <_vfiprintf_r+0x15a>
 8013788:	9105      	str	r1, [sp, #20]
 801378a:	e7c4      	b.n	8013716 <_vfiprintf_r+0x15a>
 801378c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013790:	4604      	mov	r4, r0
 8013792:	2301      	movs	r3, #1
 8013794:	e7f0      	b.n	8013778 <_vfiprintf_r+0x1bc>
 8013796:	ab03      	add	r3, sp, #12
 8013798:	9300      	str	r3, [sp, #0]
 801379a:	462a      	mov	r2, r5
 801379c:	4b12      	ldr	r3, [pc, #72]	; (80137e8 <_vfiprintf_r+0x22c>)
 801379e:	a904      	add	r1, sp, #16
 80137a0:	4630      	mov	r0, r6
 80137a2:	f7fc fcf3 	bl	801018c <_printf_float>
 80137a6:	4607      	mov	r7, r0
 80137a8:	1c78      	adds	r0, r7, #1
 80137aa:	d1d6      	bne.n	801375a <_vfiprintf_r+0x19e>
 80137ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137ae:	07d9      	lsls	r1, r3, #31
 80137b0:	d405      	bmi.n	80137be <_vfiprintf_r+0x202>
 80137b2:	89ab      	ldrh	r3, [r5, #12]
 80137b4:	059a      	lsls	r2, r3, #22
 80137b6:	d402      	bmi.n	80137be <_vfiprintf_r+0x202>
 80137b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137ba:	f7fd fd29 	bl	8011210 <__retarget_lock_release_recursive>
 80137be:	89ab      	ldrh	r3, [r5, #12]
 80137c0:	065b      	lsls	r3, r3, #25
 80137c2:	f53f af1d 	bmi.w	8013600 <_vfiprintf_r+0x44>
 80137c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137c8:	e71c      	b.n	8013604 <_vfiprintf_r+0x48>
 80137ca:	ab03      	add	r3, sp, #12
 80137cc:	9300      	str	r3, [sp, #0]
 80137ce:	462a      	mov	r2, r5
 80137d0:	4b05      	ldr	r3, [pc, #20]	; (80137e8 <_vfiprintf_r+0x22c>)
 80137d2:	a904      	add	r1, sp, #16
 80137d4:	4630      	mov	r0, r6
 80137d6:	f7fc ff7d 	bl	80106d4 <_printf_i>
 80137da:	e7e4      	b.n	80137a6 <_vfiprintf_r+0x1ea>
 80137dc:	08013ffc 	.word	0x08013ffc
 80137e0:	08014006 	.word	0x08014006
 80137e4:	0801018d 	.word	0x0801018d
 80137e8:	08013597 	.word	0x08013597
 80137ec:	08014002 	.word	0x08014002

080137f0 <__swbuf_r>:
 80137f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137f2:	460e      	mov	r6, r1
 80137f4:	4614      	mov	r4, r2
 80137f6:	4605      	mov	r5, r0
 80137f8:	b118      	cbz	r0, 8013802 <__swbuf_r+0x12>
 80137fa:	6a03      	ldr	r3, [r0, #32]
 80137fc:	b90b      	cbnz	r3, 8013802 <__swbuf_r+0x12>
 80137fe:	f7fd fb27 	bl	8010e50 <__sinit>
 8013802:	69a3      	ldr	r3, [r4, #24]
 8013804:	60a3      	str	r3, [r4, #8]
 8013806:	89a3      	ldrh	r3, [r4, #12]
 8013808:	071a      	lsls	r2, r3, #28
 801380a:	d525      	bpl.n	8013858 <__swbuf_r+0x68>
 801380c:	6923      	ldr	r3, [r4, #16]
 801380e:	b31b      	cbz	r3, 8013858 <__swbuf_r+0x68>
 8013810:	6823      	ldr	r3, [r4, #0]
 8013812:	6922      	ldr	r2, [r4, #16]
 8013814:	1a98      	subs	r0, r3, r2
 8013816:	6963      	ldr	r3, [r4, #20]
 8013818:	b2f6      	uxtb	r6, r6
 801381a:	4283      	cmp	r3, r0
 801381c:	4637      	mov	r7, r6
 801381e:	dc04      	bgt.n	801382a <__swbuf_r+0x3a>
 8013820:	4621      	mov	r1, r4
 8013822:	4628      	mov	r0, r5
 8013824:	f7ff fe00 	bl	8013428 <_fflush_r>
 8013828:	b9e0      	cbnz	r0, 8013864 <__swbuf_r+0x74>
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	3b01      	subs	r3, #1
 801382e:	60a3      	str	r3, [r4, #8]
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	1c5a      	adds	r2, r3, #1
 8013834:	6022      	str	r2, [r4, #0]
 8013836:	701e      	strb	r6, [r3, #0]
 8013838:	6962      	ldr	r2, [r4, #20]
 801383a:	1c43      	adds	r3, r0, #1
 801383c:	429a      	cmp	r2, r3
 801383e:	d004      	beq.n	801384a <__swbuf_r+0x5a>
 8013840:	89a3      	ldrh	r3, [r4, #12]
 8013842:	07db      	lsls	r3, r3, #31
 8013844:	d506      	bpl.n	8013854 <__swbuf_r+0x64>
 8013846:	2e0a      	cmp	r6, #10
 8013848:	d104      	bne.n	8013854 <__swbuf_r+0x64>
 801384a:	4621      	mov	r1, r4
 801384c:	4628      	mov	r0, r5
 801384e:	f7ff fdeb 	bl	8013428 <_fflush_r>
 8013852:	b938      	cbnz	r0, 8013864 <__swbuf_r+0x74>
 8013854:	4638      	mov	r0, r7
 8013856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013858:	4621      	mov	r1, r4
 801385a:	4628      	mov	r0, r5
 801385c:	f000 f806 	bl	801386c <__swsetup_r>
 8013860:	2800      	cmp	r0, #0
 8013862:	d0d5      	beq.n	8013810 <__swbuf_r+0x20>
 8013864:	f04f 37ff 	mov.w	r7, #4294967295
 8013868:	e7f4      	b.n	8013854 <__swbuf_r+0x64>
	...

0801386c <__swsetup_r>:
 801386c:	b538      	push	{r3, r4, r5, lr}
 801386e:	4b2a      	ldr	r3, [pc, #168]	; (8013918 <__swsetup_r+0xac>)
 8013870:	4605      	mov	r5, r0
 8013872:	6818      	ldr	r0, [r3, #0]
 8013874:	460c      	mov	r4, r1
 8013876:	b118      	cbz	r0, 8013880 <__swsetup_r+0x14>
 8013878:	6a03      	ldr	r3, [r0, #32]
 801387a:	b90b      	cbnz	r3, 8013880 <__swsetup_r+0x14>
 801387c:	f7fd fae8 	bl	8010e50 <__sinit>
 8013880:	89a3      	ldrh	r3, [r4, #12]
 8013882:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013886:	0718      	lsls	r0, r3, #28
 8013888:	d422      	bmi.n	80138d0 <__swsetup_r+0x64>
 801388a:	06d9      	lsls	r1, r3, #27
 801388c:	d407      	bmi.n	801389e <__swsetup_r+0x32>
 801388e:	2309      	movs	r3, #9
 8013890:	602b      	str	r3, [r5, #0]
 8013892:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013896:	81a3      	strh	r3, [r4, #12]
 8013898:	f04f 30ff 	mov.w	r0, #4294967295
 801389c:	e034      	b.n	8013908 <__swsetup_r+0x9c>
 801389e:	0758      	lsls	r0, r3, #29
 80138a0:	d512      	bpl.n	80138c8 <__swsetup_r+0x5c>
 80138a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138a4:	b141      	cbz	r1, 80138b8 <__swsetup_r+0x4c>
 80138a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138aa:	4299      	cmp	r1, r3
 80138ac:	d002      	beq.n	80138b4 <__swsetup_r+0x48>
 80138ae:	4628      	mov	r0, r5
 80138b0:	f7fe fb6c 	bl	8011f8c <_free_r>
 80138b4:	2300      	movs	r3, #0
 80138b6:	6363      	str	r3, [r4, #52]	; 0x34
 80138b8:	89a3      	ldrh	r3, [r4, #12]
 80138ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80138be:	81a3      	strh	r3, [r4, #12]
 80138c0:	2300      	movs	r3, #0
 80138c2:	6063      	str	r3, [r4, #4]
 80138c4:	6923      	ldr	r3, [r4, #16]
 80138c6:	6023      	str	r3, [r4, #0]
 80138c8:	89a3      	ldrh	r3, [r4, #12]
 80138ca:	f043 0308 	orr.w	r3, r3, #8
 80138ce:	81a3      	strh	r3, [r4, #12]
 80138d0:	6923      	ldr	r3, [r4, #16]
 80138d2:	b94b      	cbnz	r3, 80138e8 <__swsetup_r+0x7c>
 80138d4:	89a3      	ldrh	r3, [r4, #12]
 80138d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80138da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138de:	d003      	beq.n	80138e8 <__swsetup_r+0x7c>
 80138e0:	4621      	mov	r1, r4
 80138e2:	4628      	mov	r0, r5
 80138e4:	f000 f88c 	bl	8013a00 <__smakebuf_r>
 80138e8:	89a0      	ldrh	r0, [r4, #12]
 80138ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138ee:	f010 0301 	ands.w	r3, r0, #1
 80138f2:	d00a      	beq.n	801390a <__swsetup_r+0x9e>
 80138f4:	2300      	movs	r3, #0
 80138f6:	60a3      	str	r3, [r4, #8]
 80138f8:	6963      	ldr	r3, [r4, #20]
 80138fa:	425b      	negs	r3, r3
 80138fc:	61a3      	str	r3, [r4, #24]
 80138fe:	6923      	ldr	r3, [r4, #16]
 8013900:	b943      	cbnz	r3, 8013914 <__swsetup_r+0xa8>
 8013902:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013906:	d1c4      	bne.n	8013892 <__swsetup_r+0x26>
 8013908:	bd38      	pop	{r3, r4, r5, pc}
 801390a:	0781      	lsls	r1, r0, #30
 801390c:	bf58      	it	pl
 801390e:	6963      	ldrpl	r3, [r4, #20]
 8013910:	60a3      	str	r3, [r4, #8]
 8013912:	e7f4      	b.n	80138fe <__swsetup_r+0x92>
 8013914:	2000      	movs	r0, #0
 8013916:	e7f7      	b.n	8013908 <__swsetup_r+0x9c>
 8013918:	20000348 	.word	0x20000348

0801391c <_raise_r>:
 801391c:	291f      	cmp	r1, #31
 801391e:	b538      	push	{r3, r4, r5, lr}
 8013920:	4604      	mov	r4, r0
 8013922:	460d      	mov	r5, r1
 8013924:	d904      	bls.n	8013930 <_raise_r+0x14>
 8013926:	2316      	movs	r3, #22
 8013928:	6003      	str	r3, [r0, #0]
 801392a:	f04f 30ff 	mov.w	r0, #4294967295
 801392e:	bd38      	pop	{r3, r4, r5, pc}
 8013930:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013932:	b112      	cbz	r2, 801393a <_raise_r+0x1e>
 8013934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013938:	b94b      	cbnz	r3, 801394e <_raise_r+0x32>
 801393a:	4620      	mov	r0, r4
 801393c:	f000 f830 	bl	80139a0 <_getpid_r>
 8013940:	462a      	mov	r2, r5
 8013942:	4601      	mov	r1, r0
 8013944:	4620      	mov	r0, r4
 8013946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801394a:	f000 b817 	b.w	801397c <_kill_r>
 801394e:	2b01      	cmp	r3, #1
 8013950:	d00a      	beq.n	8013968 <_raise_r+0x4c>
 8013952:	1c59      	adds	r1, r3, #1
 8013954:	d103      	bne.n	801395e <_raise_r+0x42>
 8013956:	2316      	movs	r3, #22
 8013958:	6003      	str	r3, [r0, #0]
 801395a:	2001      	movs	r0, #1
 801395c:	e7e7      	b.n	801392e <_raise_r+0x12>
 801395e:	2400      	movs	r4, #0
 8013960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013964:	4628      	mov	r0, r5
 8013966:	4798      	blx	r3
 8013968:	2000      	movs	r0, #0
 801396a:	e7e0      	b.n	801392e <_raise_r+0x12>

0801396c <raise>:
 801396c:	4b02      	ldr	r3, [pc, #8]	; (8013978 <raise+0xc>)
 801396e:	4601      	mov	r1, r0
 8013970:	6818      	ldr	r0, [r3, #0]
 8013972:	f7ff bfd3 	b.w	801391c <_raise_r>
 8013976:	bf00      	nop
 8013978:	20000348 	.word	0x20000348

0801397c <_kill_r>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4d07      	ldr	r5, [pc, #28]	; (801399c <_kill_r+0x20>)
 8013980:	2300      	movs	r3, #0
 8013982:	4604      	mov	r4, r0
 8013984:	4608      	mov	r0, r1
 8013986:	4611      	mov	r1, r2
 8013988:	602b      	str	r3, [r5, #0]
 801398a:	f7ee fbbb 	bl	8002104 <_kill>
 801398e:	1c43      	adds	r3, r0, #1
 8013990:	d102      	bne.n	8013998 <_kill_r+0x1c>
 8013992:	682b      	ldr	r3, [r5, #0]
 8013994:	b103      	cbz	r3, 8013998 <_kill_r+0x1c>
 8013996:	6023      	str	r3, [r4, #0]
 8013998:	bd38      	pop	{r3, r4, r5, pc}
 801399a:	bf00      	nop
 801399c:	20001ef8 	.word	0x20001ef8

080139a0 <_getpid_r>:
 80139a0:	f7ee bba8 	b.w	80020f4 <_getpid>

080139a4 <_malloc_usable_size_r>:
 80139a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139a8:	1f18      	subs	r0, r3, #4
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	bfbc      	itt	lt
 80139ae:	580b      	ldrlt	r3, [r1, r0]
 80139b0:	18c0      	addlt	r0, r0, r3
 80139b2:	4770      	bx	lr

080139b4 <__swhatbuf_r>:
 80139b4:	b570      	push	{r4, r5, r6, lr}
 80139b6:	460c      	mov	r4, r1
 80139b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139bc:	2900      	cmp	r1, #0
 80139be:	b096      	sub	sp, #88	; 0x58
 80139c0:	4615      	mov	r5, r2
 80139c2:	461e      	mov	r6, r3
 80139c4:	da0d      	bge.n	80139e2 <__swhatbuf_r+0x2e>
 80139c6:	89a3      	ldrh	r3, [r4, #12]
 80139c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80139cc:	f04f 0100 	mov.w	r1, #0
 80139d0:	bf0c      	ite	eq
 80139d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80139d6:	2340      	movne	r3, #64	; 0x40
 80139d8:	2000      	movs	r0, #0
 80139da:	6031      	str	r1, [r6, #0]
 80139dc:	602b      	str	r3, [r5, #0]
 80139de:	b016      	add	sp, #88	; 0x58
 80139e0:	bd70      	pop	{r4, r5, r6, pc}
 80139e2:	466a      	mov	r2, sp
 80139e4:	f000 f848 	bl	8013a78 <_fstat_r>
 80139e8:	2800      	cmp	r0, #0
 80139ea:	dbec      	blt.n	80139c6 <__swhatbuf_r+0x12>
 80139ec:	9901      	ldr	r1, [sp, #4]
 80139ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80139f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80139f6:	4259      	negs	r1, r3
 80139f8:	4159      	adcs	r1, r3
 80139fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139fe:	e7eb      	b.n	80139d8 <__swhatbuf_r+0x24>

08013a00 <__smakebuf_r>:
 8013a00:	898b      	ldrh	r3, [r1, #12]
 8013a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a04:	079d      	lsls	r5, r3, #30
 8013a06:	4606      	mov	r6, r0
 8013a08:	460c      	mov	r4, r1
 8013a0a:	d507      	bpl.n	8013a1c <__smakebuf_r+0x1c>
 8013a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013a10:	6023      	str	r3, [r4, #0]
 8013a12:	6123      	str	r3, [r4, #16]
 8013a14:	2301      	movs	r3, #1
 8013a16:	6163      	str	r3, [r4, #20]
 8013a18:	b002      	add	sp, #8
 8013a1a:	bd70      	pop	{r4, r5, r6, pc}
 8013a1c:	ab01      	add	r3, sp, #4
 8013a1e:	466a      	mov	r2, sp
 8013a20:	f7ff ffc8 	bl	80139b4 <__swhatbuf_r>
 8013a24:	9900      	ldr	r1, [sp, #0]
 8013a26:	4605      	mov	r5, r0
 8013a28:	4630      	mov	r0, r6
 8013a2a:	f7fb fb7d 	bl	800f128 <_malloc_r>
 8013a2e:	b948      	cbnz	r0, 8013a44 <__smakebuf_r+0x44>
 8013a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a34:	059a      	lsls	r2, r3, #22
 8013a36:	d4ef      	bmi.n	8013a18 <__smakebuf_r+0x18>
 8013a38:	f023 0303 	bic.w	r3, r3, #3
 8013a3c:	f043 0302 	orr.w	r3, r3, #2
 8013a40:	81a3      	strh	r3, [r4, #12]
 8013a42:	e7e3      	b.n	8013a0c <__smakebuf_r+0xc>
 8013a44:	89a3      	ldrh	r3, [r4, #12]
 8013a46:	6020      	str	r0, [r4, #0]
 8013a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a4c:	81a3      	strh	r3, [r4, #12]
 8013a4e:	9b00      	ldr	r3, [sp, #0]
 8013a50:	6163      	str	r3, [r4, #20]
 8013a52:	9b01      	ldr	r3, [sp, #4]
 8013a54:	6120      	str	r0, [r4, #16]
 8013a56:	b15b      	cbz	r3, 8013a70 <__smakebuf_r+0x70>
 8013a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	f000 f81d 	bl	8013a9c <_isatty_r>
 8013a62:	b128      	cbz	r0, 8013a70 <__smakebuf_r+0x70>
 8013a64:	89a3      	ldrh	r3, [r4, #12]
 8013a66:	f023 0303 	bic.w	r3, r3, #3
 8013a6a:	f043 0301 	orr.w	r3, r3, #1
 8013a6e:	81a3      	strh	r3, [r4, #12]
 8013a70:	89a3      	ldrh	r3, [r4, #12]
 8013a72:	431d      	orrs	r5, r3
 8013a74:	81a5      	strh	r5, [r4, #12]
 8013a76:	e7cf      	b.n	8013a18 <__smakebuf_r+0x18>

08013a78 <_fstat_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d07      	ldr	r5, [pc, #28]	; (8013a98 <_fstat_r+0x20>)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4608      	mov	r0, r1
 8013a82:	4611      	mov	r1, r2
 8013a84:	602b      	str	r3, [r5, #0]
 8013a86:	f7ee fb9c 	bl	80021c2 <_fstat>
 8013a8a:	1c43      	adds	r3, r0, #1
 8013a8c:	d102      	bne.n	8013a94 <_fstat_r+0x1c>
 8013a8e:	682b      	ldr	r3, [r5, #0]
 8013a90:	b103      	cbz	r3, 8013a94 <_fstat_r+0x1c>
 8013a92:	6023      	str	r3, [r4, #0]
 8013a94:	bd38      	pop	{r3, r4, r5, pc}
 8013a96:	bf00      	nop
 8013a98:	20001ef8 	.word	0x20001ef8

08013a9c <_isatty_r>:
 8013a9c:	b538      	push	{r3, r4, r5, lr}
 8013a9e:	4d06      	ldr	r5, [pc, #24]	; (8013ab8 <_isatty_r+0x1c>)
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	4608      	mov	r0, r1
 8013aa6:	602b      	str	r3, [r5, #0]
 8013aa8:	f7ee fb9b 	bl	80021e2 <_isatty>
 8013aac:	1c43      	adds	r3, r0, #1
 8013aae:	d102      	bne.n	8013ab6 <_isatty_r+0x1a>
 8013ab0:	682b      	ldr	r3, [r5, #0]
 8013ab2:	b103      	cbz	r3, 8013ab6 <_isatty_r+0x1a>
 8013ab4:	6023      	str	r3, [r4, #0]
 8013ab6:	bd38      	pop	{r3, r4, r5, pc}
 8013ab8:	20001ef8 	.word	0x20001ef8

08013abc <_init>:
 8013abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013abe:	bf00      	nop
 8013ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ac2:	bc08      	pop	{r3}
 8013ac4:	469e      	mov	lr, r3
 8013ac6:	4770      	bx	lr

08013ac8 <_fini>:
 8013ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aca:	bf00      	nop
 8013acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ace:	bc08      	pop	{r3}
 8013ad0:	469e      	mov	lr, r3
 8013ad2:	4770      	bx	lr
