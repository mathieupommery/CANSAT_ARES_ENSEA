
CANSAT_MAINBOARD_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013924  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08013b08  08013b08  00023b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014040  08014040  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08014040  08014040  00024040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014048  08014048  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014048  08014048  00024048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801404c  0801404c  0002404c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08014050  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb0  20000350  0801439c  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  0801439c  00031f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000292bb  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059c6  00000000  00000000  0005967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  0005f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019f5  00000000  00000000  000611f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c7d  00000000  00000000  00062be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d512  00000000  00000000  00089862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7f0f  00000000  00000000  000b6d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a4b8  00000000  00000000  0019ec84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001a913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013aec 	.word	0x08013aec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08013aec 	.word	0x08013aec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f00f ffde 	bl	801101a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105e:	4b40      	ldr	r3, [pc, #256]	; (8001160 <MX_ADC1_Init+0x120>)
 8001060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001064:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <MX_ADC1_Init+0x120>)
 8001068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <MX_ADC1_Init+0x120>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <MX_ADC1_Init+0x120>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <MX_ADC1_Init+0x120>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001080:	4b37      	ldr	r3, [pc, #220]	; (8001160 <MX_ADC1_Init+0x120>)
 8001082:	2201      	movs	r2, #1
 8001084:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <MX_ADC1_Init+0x120>)
 8001088:	2204      	movs	r2, #4
 800108a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800108c:	4b34      	ldr	r3, [pc, #208]	; (8001160 <MX_ADC1_Init+0x120>)
 800108e:	2200      	movs	r2, #0
 8001090:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <MX_ADC1_Init+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001098:	4b31      	ldr	r3, [pc, #196]	; (8001160 <MX_ADC1_Init+0x120>)
 800109a:	2203      	movs	r2, #3
 800109c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <MX_ADC1_Init+0x120>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <MX_ADC1_Init+0x120>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <MX_ADC1_Init+0x120>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_ADC1_Init+0x120>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_ADC1_Init+0x120>)
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <MX_ADC1_Init+0x120>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	4825      	ldr	r0, [pc, #148]	; (8001160 <MX_ADC1_Init+0x120>)
 80010ca:	f001 fef7 	bl	8002ebc <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d4:	f000 fb3e 	bl	8001754 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	481f      	ldr	r0, [pc, #124]	; (8001160 <MX_ADC1_Init+0x120>)
 80010e4:	f003 f8bc 	bl	8004260 <HAL_ADCEx_MultiModeConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ee:	f000 fb31 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_ADC1_Init+0x124>)
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2306      	movs	r3, #6
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010fa:	2307      	movs	r3, #7
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fe:	237f      	movs	r3, #127	; 0x7f
 8001100:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001102:	2304      	movs	r3, #4
 8001104:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <MX_ADC1_Init+0x120>)
 8001110:	f002 fb44 	bl	800379c <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800111a:	f000 fb1b 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC1_Init+0x128>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001122:	230c      	movs	r3, #12
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_ADC1_Init+0x120>)
 800112c:	f002 fb36 	bl	800379c <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001136:	f000 fb0d 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_ADC1_Init+0x12c>)
 800113c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800113e:	2312      	movs	r3, #18
 8001140:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_ADC1_Init+0x120>)
 8001148:	f002 fb28 	bl	800379c <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001152:	f000 faff 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3730      	adds	r7, #48	; 0x30
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000036c 	.word	0x2000036c
 8001164:	cb840000 	.word	0xcb840000
 8001168:	08600004 	.word	0x08600004
 800116c:	0c900008 	.word	0x0c900008

08001170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09a      	sub	sp, #104	; 0x68
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2244      	movs	r2, #68	; 0x44
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00f ff42 	bl	801101a <memset>
  if(adcHandle->Instance==ADC1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d13c      	bne.n	800121a <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 fb29 	bl	8007808 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011bc:	f000 faca 	bl	8001754 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a11      	ldr	r2, [pc, #68]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_ADC_MspInit+0xb4>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80011f0:	2306      	movs	r3, #6
 80011f2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f003 fd1d 	bl	8004c44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2012      	movs	r0, #18
 8001210:	f003 f9a5 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001214:	2012      	movs	r0, #18
 8001216:	f003 f9bc 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3768      	adds	r7, #104	; 0x68
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001238:	d158      	bne.n	80012ec <HAL_ADC_ConvCpltCallback+0xc4>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_ADC_ConvCpltCallback+0xf0>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f998 	bl	8000574 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	a12d      	add	r1, pc, #180	; (adr r1, 8001300 <HAL_ADC_ConvCpltCallback+0xd8>)
 800124a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124e:	f7ff fb25 	bl	800089c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fced 	bl	8000c38 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	4a2e      	ldr	r2, [pc, #184]	; (800131c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001262:	6013      	str	r3, [r2, #0]
		vcurr=(float) CURRCOEF*(rawdata[1]/4090.0)*vrefint;
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001266:	885b      	ldrh	r3, [r3, #2]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f983 	bl	8000574 <__aeabi_i2d>
 800126e:	a326      	add	r3, pc, #152	; (adr r3, 8001308 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff fb12 	bl	800089c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4614      	mov	r4, r2
 800127e:	461d      	mov	r5, r3
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f987 	bl	8000598 <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff f9d9 	bl	8000648 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fccb 	bl	8000c38 <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_ADC_ConvCpltCallback+0xf8>)
 80012a6:	6013      	str	r3, [r2, #0]
		vbat=(float) VCOEF*(rawdata[2]/4095.0)*vrefint;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_ADC_ConvCpltCallback+0xf0>)
 80012aa:	889b      	ldrh	r3, [r3, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f961 	bl	8000574 <__aeabi_i2d>
 80012b2:	a317      	add	r3, pc, #92	; (adr r3, 8001310 <HAL_ADC_ConvCpltCallback+0xe8>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff faf0 	bl	800089c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4614      	mov	r4, r2
 80012c2:	461d      	mov	r5, r3
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_ADC_ConvCpltCallback+0xf4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f965 	bl	8000598 <__aeabi_f2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff f9b7 	bl	8000648 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fca9 	bl	8000c38 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012ea:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012ec:	2203      	movs	r2, #3
 80012ee:	490a      	ldr	r1, [pc, #40]	; (8001318 <HAL_ADC_ConvCpltCallback+0xf0>)
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <HAL_ADC_ConvCpltCallback+0x100>)
 80012f2:	f001 ff67 	bl	80031c4 <HAL_ADC_Start_DMA>



}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdb0      	pop	{r4, r5, r7, pc}
 80012fe:	bf00      	nop
 8001300:	d70a3d70 	.word	0xd70a3d70
 8001304:	40b36323 	.word	0x40b36323
 8001308:	00000000 	.word	0x00000000
 800130c:	40aff400 	.word	0x40aff400
 8001310:	00000000 	.word	0x00000000
 8001314:	40affe00 	.word	0x40affe00
 8001318:	20000670 	.word	0x20000670
 800131c:	2000067c 	.word	0x2000067c
 8001320:	20000678 	.word	0x20000678
 8001324:	20000680 	.word	0x20000680
 8001328:	2000036c 	.word	0x2000036c

0800132c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_DMA_Init+0x60>)
 8001334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <MX_DMA_Init+0x60>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6493      	str	r3, [r2, #72]	; 0x48
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_DMA_Init+0x60>)
 8001340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_DMA_Init+0x60>)
 800134c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <MX_DMA_Init+0x60>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6493      	str	r3, [r2, #72]	; 0x48
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <MX_DMA_Init+0x60>)
 8001358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	200b      	movs	r0, #11
 8001368:	f003 f8f9 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800136c:	200b      	movs	r0, #11
 800136e:	f003 f910 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	200c      	movs	r0, #12
 8001378:	f003 f8f1 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800137c:	200c      	movs	r0, #12
 800137e:	f003 f908 	bl	8004592 <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a33      	ldr	r2, [pc, #204]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013ac:	f043 0320 	orr.w	r3, r3, #32
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a2d      	ldr	r2, [pc, #180]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a27      	ldr	r2, [pc, #156]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2110      	movs	r1, #16
 800140a:	481c      	ldr	r0, [pc, #112]	; (800147c <MX_GPIO_Init+0xec>)
 800140c:	f003 fd9c 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDSTATE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001416:	481a      	ldr	r0, [pc, #104]	; (8001480 <MX_GPIO_Init+0xf0>)
 8001418:	f003 fd96 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800141c:	2310      	movs	r3, #16
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4812      	ldr	r0, [pc, #72]	; (800147c <MX_GPIO_Init+0xec>)
 8001434:	f003 fc06 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SD_DETECT_Pin;
 8001438:	2306      	movs	r3, #6
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_GPIO_Init+0xf0>)
 800144e:	f003 fbf9 	bl	8004c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEDSTATE_Pin|PWEN_Pin;
 8001452:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_GPIO_Init+0xf0>)
 800146c:	f003 fbea 	bl	8004c44 <HAL_GPIO_Init>

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	48000800 	.word	0x48000800
 8001480:	48000400 	.word	0x48000400

08001484 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_I2C3_Init+0x74>)
 800148a:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <MX_I2C3_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_I2C3_Init+0x74>)
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <MX_I2C3_Init+0x7c>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_I2C3_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_I2C3_Init+0x74>)
 800149c:	2201      	movs	r2, #1
 800149e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014c0:	f003 fd5a 	bl	8004f78 <HAL_I2C_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014ca:	f000 f943 	bl	8001754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014d2:	f003 fdec 	bl	80050ae <HAL_I2CEx_ConfigAnalogFilter>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014dc:	f000 f93a 	bl	8001754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014e0:	2100      	movs	r1, #0
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_I2C3_Init+0x74>)
 80014e4:	f003 fe2e 	bl	8005144 <HAL_I2CEx_ConfigDigitalFilter>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f000 f931 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200003d8 	.word	0x200003d8
 80014fc:	40007800 	.word	0x40007800
 8001500:	0010061a 	.word	0x0010061a

08001504 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09c      	sub	sp, #112	; 0x70
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	2244      	movs	r2, #68	; 0x44
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00f fd78 	bl	801101a <memset>
  if(i2cHandle->Instance==I2C3)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2e      	ldr	r2, [pc, #184]	; (80015e8 <HAL_I2C_MspInit+0xe4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d155      	bne.n	80015e0 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001538:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800153a:	2300      	movs	r3, #0
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	4618      	mov	r0, r3
 8001544:	f006 f960 	bl	8007808 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800154e:	f000 f901 	bl	8001754 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001586:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001594:	2302      	movs	r3, #2
 8001596:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f003 fb4f 	bl	8004c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ac:	2312      	movs	r3, #18
 80015ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80015b8:	2308      	movs	r3, #8
 80015ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015c0:	4619      	mov	r1, r3
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <HAL_I2C_MspInit+0xec>)
 80015c4:	f003 fb3e 	bl	8004c44 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 80015ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_I2C_MspInit+0xe8>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015e0:	bf00      	nop
 80015e2:	3770      	adds	r7, #112	; 0x70
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40007800 	.word	0x40007800
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000800 	.word	0x48000800

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f001 f98c 	bl	8002916 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fe:	f000 f85d 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f7ff fec5 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 8001606:	f7ff fe91 	bl	800132c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800160a:	f000 ff33 	bl	8002474 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800160e:	f000 ff7b 	bl	8002508 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001612:	f7ff fd15 	bl	8001040 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001616:	f000 fc69 	bl	8001eec <MX_SPI1_Init>
  MX_USB_Device_Init();
 800161a:	f00d f863 	bl	800e6e4 <MX_USB_Device_Init>
  MX_I2C3_Init();
 800161e:	f7ff ff31 	bl	8001484 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001622:	f000 fe57 	bl	80022d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001626:	2203      	movs	r2, #3
 8001628:	491a      	ldr	r1, [pc, #104]	; (8001694 <main+0xa0>)
 800162a:	481b      	ldr	r0, [pc, #108]	; (8001698 <main+0xa4>)
 800162c:	f001 fdca 	bl	80031c4 <HAL_ADC_Start_DMA>

  	HAL_UART_Abort(&huart1);
 8001630:	481a      	ldr	r0, [pc, #104]	; (800169c <main+0xa8>)
 8001632:	f007 fc11 	bl	8008e58 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001636:	2240      	movs	r2, #64	; 0x40
 8001638:	4919      	ldr	r1, [pc, #100]	; (80016a0 <main+0xac>)
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <main+0xa8>)
 800163c:	f007 fbc0 	bl	8008dc0 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	2131      	movs	r1, #49	; 0x31
 8001646:	4817      	ldr	r0, [pc, #92]	; (80016a4 <main+0xb0>)
 8001648:	f00f fce7 	bl	801101a <memset>
  	memset(flashwrite,'\0',256);
 800164c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001650:	2100      	movs	r1, #0
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <main+0xb4>)
 8001654:	f00f fce1 	bl	801101a <memset>

  	HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f001 f9cd 	bl	80029f8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  nmea_parse(&myData, DataBuffer);
 800165e:	4913      	ldr	r1, [pc, #76]	; (80016ac <main+0xb8>)
 8001660:	4813      	ldr	r0, [pc, #76]	; (80016b0 <main+0xbc>)
 8001662:	f000 fb93 	bl	8001d8c <nmea_parse>
	  int taillefin=0;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
	  taillefin = snprintf((uint8_t *)usbbuffer,64,"v=%0.3f",myData.speed);
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <main+0xbc>)
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff92 	bl	8000598 <__aeabi_f2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	e9cd 2300 	strd	r2, r3, [sp]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <main+0xc0>)
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <main+0xc4>)
 8001682:	f00f fc33 	bl	8010eec <sniprintf>
 8001686:	6078      	str	r0, [r7, #4]
	  CDC_Transmit_FS((uint8_t *)usbbuffer,taillefin);
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	480b      	ldr	r0, [pc, #44]	; (80016b8 <main+0xc4>)
 800168c:	f00d f8e8 	bl	800e860 <CDC_Transmit_FS>
  {
 8001690:	e7e5      	b.n	800165e <main+0x6a>
 8001692:	bf00      	nop
 8001694:	20000670 	.word	0x20000670
 8001698:	2000036c 	.word	0x2000036c
 800169c:	20000a8c 	.word	0x20000a8c
 80016a0:	20000430 	.word	0x20000430
 80016a4:	20000784 	.word	0x20000784
 80016a8:	20000684 	.word	0x20000684
 80016ac:	20000470 	.word	0x20000470
 80016b0:	20000888 	.word	0x20000888
 80016b4:	08013b08 	.word	0x08013b08
 80016b8:	200008c8 	.word	0x200008c8

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	2238      	movs	r2, #56	; 0x38
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00f fca5 	bl	801101a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e2:	f005 faaf 	bl	8006c44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f8:	2302      	movs	r3, #2
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001700:	230c      	movs	r3, #12
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001708:	2304      	movs	r3, #4
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800170c:	2302      	movs	r3, #2
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4618      	mov	r0, r3
 8001716:	f005 fb49 	bl	8006dac <HAL_RCC_OscConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001720:	f000 f818 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001724:	230f      	movs	r3, #15
 8001726:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001728:	2301      	movs	r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f005 fe47 	bl	80073d0 <HAL_RCC_ClockConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001748:	f000 f804 	bl	8001754 <Error_Handler>
  }
}
 800174c:	bf00      	nop
 800174e:	3750      	adds	r7, #80	; 0x50
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>

0800175e <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fdaa 	bl	80002c0 <strlen>
 800176c:	4603      	mov	r3, r0
 800176e:	2b04      	cmp	r3, #4
 8001770:	d801      	bhi.n	8001776 <gps_checksum+0x18>
 8001772:	2300      	movs	r3, #0
 8001774:	e038      	b.n	80017e8 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7fe fda2 	bl	80002c0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	3b04      	subs	r3, #4
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7fe fd99 	bl	80002c0 <strlen>
 800178e:	4603      	mov	r3, r0
 8001790:	3b03      	subs	r3, #3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	e00a      	b.n	80017ba <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4053      	eors	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	3301      	adds	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7fe fd80 	bl	80002c0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	1f5a      	subs	r2, r3, #5
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d8ec      	bhi.n	80017a4 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2210      	movs	r2, #16
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00e fc48 	bl	8010068 <strtol>
 80017d8:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d101      	bne.n	80017e6 <gps_checksum+0x88>
        return 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <gps_checksum+0x8a>
    }
    else{
        return 0;
 80017e6:	2300      	movs	r3, #0
    }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b0b7      	sub	sp, #220	; 0xdc
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	2264      	movs	r2, #100	; 0x64
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f00f fc06 	bl	801101a <memset>
    char *marker = strtok(inputString, ",");
 800180e:	49c2      	ldr	r1, [pc, #776]	; (8001b18 <nmea_GPGGA+0x328>)
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f00f fc1d 	bl	8011050 <strtok>
 8001816:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800181a:	e027      	b.n	800186c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800181c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001820:	f7fe fd4e 	bl	80002c0 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800182c:	1c63      	adds	r3, r4, #1
 800182e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001832:	4610      	mov	r0, r2
 8001834:	f00d fc60 	bl	800f0f8 <malloc>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	00a3      	lsls	r3, r4, #2
 800183e:	33d8      	adds	r3, #216	; 0xd8
 8001840:	443b      	add	r3, r7
 8001842:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800184a:	3b01      	subs	r3, #1
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	33d8      	adds	r3, #216	; 0xd8
 8001850:	443b      	add	r3, r7
 8001852:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001856:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800185a:	4618      	mov	r0, r3
 800185c:	f00f fcf1 	bl	8011242 <strcpy>
        marker = strtok(NULL, ",");
 8001860:	49ad      	ldr	r1, [pc, #692]	; (8001b18 <nmea_GPGGA+0x328>)
 8001862:	2000      	movs	r0, #0
 8001864:	f00f fbf4 	bl	8011050 <strtok>
 8001868:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800186c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1d3      	bne.n	800181c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 800187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	332c      	adds	r3, #44	; 0x2c
 8001888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f00f fcd8 	bl	8011242 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001892:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001896:	2b53      	cmp	r3, #83	; 0x53
 8001898:	d004      	beq.n	80018a4 <nmea_GPGGA+0xb4>
 800189a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800189e:	2b4e      	cmp	r3, #78	; 0x4e
 80018a0:	f040 8159 	bne.w	8001b56 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018aa:	e010      	b.n	80018ce <nmea_GPGGA+0xde>
 80018ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018b2:	4413      	add	r3, r2
 80018b4:	7819      	ldrb	r1, [r3, #0]
 80018b6:	f107 021c 	add.w	r2, r7, #28
 80018ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018be:	4413      	add	r3, r2
 80018c0:	460a      	mov	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	ddea      	ble.n	80018ac <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018dc:	e011      	b.n	8001902 <nmea_GPGGA+0x112>
 80018de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018e4:	3302      	adds	r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	7819      	ldrb	r1, [r3, #0]
 80018ea:	f107 0214 	add.w	r2, r7, #20
 80018ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018f2:	4413      	add	r3, r2
 80018f4:	460a      	mov	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018fc:	3301      	adds	r3, #1
 80018fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001906:	2b05      	cmp	r3, #5
 8001908:	dde9      	ble.n	80018de <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	220a      	movs	r2, #10
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f00e fba8 	bl	8010068 <strtol>
 8001918:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f00e fab6 	bl	800fe94 <strtof>
 8001928:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800192c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001938:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800193c:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001b1c <nmea_GPGGA+0x32c>
 8001940:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	ee17 0a90 	vmov	r0, s15
 800194c:	f7fe fe24 	bl	8000598 <__aeabi_f2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800195e:	e010      	b.n	8001982 <nmea_GPGGA+0x192>
 8001960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001966:	4413      	add	r3, r2
 8001968:	7819      	ldrb	r1, [r3, #0]
 800196a:	f107 0210 	add.w	r2, r7, #16
 800196e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001972:	4413      	add	r3, r2
 8001974:	460a      	mov	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800197c:	3301      	adds	r3, #1
 800197e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001986:	2b02      	cmp	r3, #2
 8001988:	ddea      	ble.n	8001960 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001990:	e011      	b.n	80019b6 <nmea_GPGGA+0x1c6>
 8001992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001994:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001998:	3303      	adds	r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	7819      	ldrb	r1, [r3, #0]
 800199e:	f107 0208 	add.w	r2, r7, #8
 80019a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a6:	4413      	add	r3, r2
 80019a8:	460a      	mov	r2, r1
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80019b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	dde9      	ble.n	8001992 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	220a      	movs	r2, #10
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00e fb4e 	bl	8010068 <strtol>
 80019cc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00e fa5c 	bl	800fe94 <strtof>
 80019dc:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80019e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80019f0:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001b1c <nmea_GPGGA+0x32c>
 80019f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	ee17 0a90 	vmov	r0, s15
 8001a00:	f7fe fdca 	bl	8000598 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a18:	f7ff f87e 	bl	8000b18 <__aeabi_dcmpeq>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d176      	bne.n	8001b10 <nmea_GPGGA+0x320>
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001a2e:	f7ff f873 	bl	8000b18 <__aeabi_dcmpeq>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d16b      	bne.n	8001b10 <nmea_GPGGA+0x320>
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <nmea_GPGGA+0x330>)
 8001a3e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a42:	f7ff f873 	bl	8000b2c <__aeabi_dcmplt>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d061      	beq.n	8001b10 <nmea_GPGGA+0x320>
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <nmea_GPGGA+0x334>)
 8001a52:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001a56:	f7ff f869 	bl	8000b2c <__aeabi_dcmplt>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d057      	beq.n	8001b10 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001a66:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001a70:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a78:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001a82:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00e fa03 	bl	800fe94 <strtof>
 8001a8e:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001a92:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001a96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9e:	d102      	bne.n	8001aa6 <nmea_GPGGA+0x2b6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	e001      	b.n	8001aaa <nmea_GPGGA+0x2ba>
 8001aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f00e fad7 	bl	8010068 <strtol>
 8001aba:	4602      	mov	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac2:	220a      	movs	r2, #10
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00e face 	bl	8010068 <strtol>
 8001acc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bfcc      	ite	gt
 8001ad8:	2301      	movgt	r3, #1
 8001ada:	2300      	movle	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00e f9d3 	bl	800fe94 <strtof>
 8001aee:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001af2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001af6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	d102      	bne.n	8001b06 <nmea_GPGGA+0x316>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	e001      	b.n	8001b0a <nmea_GPGGA+0x31a>
 8001b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001b0e:	e022      	b.n	8001b56 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b16:	e016      	b.n	8001b46 <nmea_GPGGA+0x356>
 8001b18:	08013b10 	.word	0x08013b10
 8001b1c:	42700000 	.word	0x42700000
 8001b20:	40568000 	.word	0x40568000
 8001b24:	40668000 	.word	0x40668000
 8001b28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	33d8      	adds	r3, #216	; 0xd8
 8001b30:	443b      	add	r3, r7
 8001b32:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00d fae6 	bl	800f108 <free>
 8001b3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b40:	3301      	adds	r3, #1
 8001b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	dbea      	blt.n	8001b28 <nmea_GPGGA+0x338>
            return 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e019      	b.n	8001b8a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b5c:	e00e      	b.n	8001b7c <nmea_GPGGA+0x38c>
 8001b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	33d8      	adds	r3, #216	; 0xd8
 8001b66:	443b      	add	r3, r7
 8001b68:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00d facb 	bl	800f108 <free>
 8001b72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b76:	3301      	adds	r3, #1
 8001b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbea      	blt.n	8001b5e <nmea_GPGGA+0x36e>
    return 1;
 8001b88:	2301      	movs	r3, #1
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	37dc      	adds	r7, #220	; 0xdc
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	bf00      	nop

08001b94 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b0a3      	sub	sp, #140	; 0x8c
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2264      	movs	r2, #100	; 0x64
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00f fa34 	bl	801101a <memset>
    char *marker = strtok(inputString, ",");
 8001bb2:	493b      	ldr	r1, [pc, #236]	; (8001ca0 <nmea_GPGSA+0x10c>)
 8001bb4:	6838      	ldr	r0, [r7, #0]
 8001bb6:	f00f fa4b 	bl	8011050 <strtok>
 8001bba:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001bbe:	e027      	b.n	8001c10 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001bc0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001bc4:	f7fe fb7c 	bl	80002c0 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001bd0:	1c63      	adds	r3, r4, #1
 8001bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f00d fa8e 	bl	800f0f8 <malloc>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	00a3      	lsls	r3, r4, #2
 8001be2:	3388      	adds	r3, #136	; 0x88
 8001be4:	443b      	add	r3, r7
 8001be6:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	3388      	adds	r3, #136	; 0x88
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001bfa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00f fb1f 	bl	8011242 <strcpy>
        marker = strtok(NULL, ",");
 8001c04:	4926      	ldr	r1, [pc, #152]	; (8001ca0 <nmea_GPGSA+0x10c>)
 8001c06:	2000      	movs	r0, #0
 8001c08:	f00f fa22 	bl	8011050 <strtok>
 8001c0c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1d3      	bne.n	8001bc0 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	220a      	movs	r2, #10
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00e fa22 	bl	8010068 <strtol>
 8001c24:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	bfcc      	ite	gt
 8001c2c:	2301      	movgt	r3, #1
 8001c2e:	2300      	movle	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c40:	e00e      	b.n	8001c60 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	3388      	adds	r3, #136	; 0x88
 8001c48:	443b      	add	r3, r7
 8001c4a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c56:	3301      	adds	r3, #1
 8001c58:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c62:	2b0e      	cmp	r3, #14
 8001c64:	dded      	ble.n	8001c42 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	677b      	str	r3, [r7, #116]	; 0x74
 8001c70:	e00b      	b.n	8001c8a <nmea_GPGSA+0xf6>
 8001c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	3388      	adds	r3, #136	; 0x88
 8001c78:	443b      	add	r3, r7
 8001c7a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00d fa42 	bl	800f108 <free>
 8001c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c86:	3301      	adds	r3, #1
 8001c88:	677b      	str	r3, [r7, #116]	; 0x74
 8001c8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbee      	blt.n	8001c72 <nmea_GPGSA+0xde>
    return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	378c      	adds	r7, #140	; 0x8c
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	08013b10 	.word	0x08013b10
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b0a1      	sub	sp, #132	; 0x84
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	2264      	movs	r2, #100	; 0x64
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f00f f9ab 	bl	801101a <memset>
    char *marker = strtok(inputString, ",");
 8001cc4:	4930      	ldr	r1, [pc, #192]	; (8001d88 <nmea_GNRMC+0xe0>)
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f00f f9c2 	bl	8011050 <strtok>
 8001ccc:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001cce:	e021      	b.n	8001d14 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001cd0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001cd2:	f7fe faf5 	bl	80002c0 <strlen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001cdc:	1c63      	adds	r3, r4, #1
 8001cde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	f00d fa09 	bl	800f0f8 <malloc>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	00a3      	lsls	r3, r4, #2
 8001cec:	3380      	adds	r3, #128	; 0x80
 8001cee:	443b      	add	r3, r7
 8001cf0:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3380      	adds	r3, #128	; 0x80
 8001cfc:	443b      	add	r3, r7
 8001cfe:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001d02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00f fa9c 	bl	8011242 <strcpy>
        marker = strtok(NULL, ",");
 8001d0a:	491f      	ldr	r1, [pc, #124]	; (8001d88 <nmea_GNRMC+0xe0>)
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f00f f99f 	bl	8011050 <strtok>
 8001d12:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1da      	bne.n	8001cd0 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00e f8b8 	bl	800fe94 <strtof>
 8001d24:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001d28:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001d2a:	f7fe fc35 	bl	8000598 <__aeabi_f2d>
 8001d2e:	a314      	add	r3, pc, #80	; (adr r3, 8001d80 <nmea_GNRMC+0xd8>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fdb2 	bl	800089c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff7a 	bl	8000c38 <__aeabi_d2f>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d4e:	e00b      	b.n	8001d68 <nmea_GNRMC+0xc0>
 8001d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	3380      	adds	r3, #128	; 0x80
 8001d56:	443b      	add	r3, r7
 8001d58:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00d f9d3 	bl	800f108 <free>
 8001d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d64:	3301      	adds	r3, #1
 8001d66:	677b      	str	r3, [r7, #116]	; 0x74
 8001d68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbef      	blt.n	8001d50 <nmea_GNRMC+0xa8>
    return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3784      	adds	r7, #132	; 0x84
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w
 8001d80:	be76c8b4 	.word	0xbe76c8b4
 8001d84:	3fff1a9f 	.word	0x3fff1a9f
 8001d88:	08013b10 	.word	0x08013b10

08001d8c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001d96:	223c      	movs	r2, #60	; 0x3c
 8001d98:	2100      	movs	r1, #0
 8001d9a:	484e      	ldr	r0, [pc, #312]	; (8001ed4 <nmea_parse+0x148>)
 8001d9c:	f00f f93d 	bl	801101a <memset>
    char * token = strtok(buffer, "$");
 8001da0:	494d      	ldr	r1, [pc, #308]	; (8001ed8 <nmea_parse+0x14c>)
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f00f f954 	bl	8011050 <strtok>
 8001da8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001dae:	e01d      	b.n	8001dec <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001db0:	6978      	ldr	r0, [r7, #20]
 8001db2:	f7fe fa85 	bl	80002c0 <strlen>
 8001db6:	4603      	mov	r3, r0
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	693c      	ldr	r4, [r7, #16]
 8001dbc:	1c63      	adds	r3, r4, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f00d f999 	bl	800f0f8 <malloc>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <nmea_parse+0x148>)
 8001dcc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <nmea_parse+0x148>)
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	6979      	ldr	r1, [r7, #20]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00f fa30 	bl	8011242 <strcpy>
        token = strtok(NULL, "$");
 8001de2:	493d      	ldr	r1, [pc, #244]	; (8001ed8 <nmea_parse+0x14c>)
 8001de4:	2000      	movs	r0, #0
 8001de6:	f00f f933 	bl	8011050 <strtok>
 8001dea:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1de      	bne.n	8001db0 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e052      	b.n	8001e9e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001df8:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <nmea_parse+0x148>)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	4936      	ldr	r1, [pc, #216]	; (8001edc <nmea_parse+0x150>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00f f980 	bl	8011108 <strstr>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d044      	beq.n	8001e98 <nmea_parse+0x10c>
 8001e0e:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <nmea_parse+0x148>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fca1 	bl	800175e <gps_checksum>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03a      	beq.n	8001e98 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001e22:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <nmea_parse+0x148>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	492d      	ldr	r1, [pc, #180]	; (8001ee0 <nmea_parse+0x154>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00f f96b 	bl	8011108 <strstr>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <nmea_parse+0x148>)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff30 	bl	8001ca8 <nmea_GNRMC>
 8001e48:	e026      	b.n	8001e98 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <nmea_parse+0x148>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	4924      	ldr	r1, [pc, #144]	; (8001ee4 <nmea_parse+0x158>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00f f957 	bl	8011108 <strstr>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001e60:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <nmea_parse+0x148>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe92 	bl	8001b94 <nmea_GPGSA>
 8001e70:	e012      	b.n	8001e98 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <nmea_parse+0x148>)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	491b      	ldr	r1, [pc, #108]	; (8001ee8 <nmea_parse+0x15c>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00f f943 	bl	8011108 <strstr>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001e88:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <nmea_parse+0x148>)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	4619      	mov	r1, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fcac 	bl	80017f0 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dba8      	blt.n	8001df8 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	e009      	b.n	8001ec0 <nmea_parse+0x134>
 8001eac:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <nmea_parse+0x148>)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f00d f927 	bl	800f108 <free>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbf1      	blt.n	8001eac <nmea_parse+0x120>


}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000908 	.word	0x20000908
 8001ed8:	08013b14 	.word	0x08013b14
 8001edc:	08013b18 	.word	0x08013b18
 8001ee0:	08013b1c 	.word	0x08013b1c
 8001ee4:	08013b24 	.word	0x08013b24
 8001ee8:	08013b2c 	.word	0x08013b2c

08001eec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <MX_SPI1_Init+0x78>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f46:	2208      	movs	r2, #8
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_SPI1_Init+0x74>)
 8001f4c:	f005 fe4c 	bl	8007be8 <HAL_SPI_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f56:	f7ff fbfd 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000944 	.word	0x20000944
 8001f64:	40013000 	.word	0x40013000

08001f68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_SPI_MspInit+0x8c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d130      	bne.n	8001fec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_SPI_MspInit+0x90>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_SPI_MspInit+0x90>)
 8001f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f94:	6613      	str	r3, [r2, #96]	; 0x60
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_SPI_MspInit+0x90>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_SPI_MspInit+0x90>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_SPI_MspInit+0x90>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_SPI_MspInit+0x90>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fba:	23e0      	movs	r3, #224	; 0xe0
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fca:	2305      	movs	r3, #5
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f002 fe34 	bl	8004c44 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2023      	movs	r0, #35	; 0x23
 8001fe2:	f002 fabc 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fe6:	2023      	movs	r0, #35	; 0x23
 8001fe8:	f002 fad3 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40013000 	.word	0x40013000
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_MspInit+0x44>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_MspInit+0x44>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6613      	str	r3, [r2, #96]	; 0x60
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_MspInit+0x44>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x44>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x44>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x44>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002032:	f004 feab 	bl	8006d8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 fc94 	bl	80029bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <DMA1_Channel1_IRQHandler+0x10>)
 800209e:	f002 fc76 	bl	800498e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000b20 	.word	0x20000b20

080020ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <DMA1_Channel2_IRQHandler+0x10>)
 80020b2:	f002 fc6c 	bl	800498e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000b80 	.word	0x20000b80

080020c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <ADC1_2_IRQHandler+0x10>)
 80020c6:	f001 f931 	bl	800332c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000036c 	.word	0x2000036c

080020d4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <USB_LP_IRQHandler+0x10>)
 80020da:	f003 f96f 	bl	80053bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200018b8 	.word	0x200018b8

080020e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <SPI1_IRQHandler+0x10>)
 80020ee:	f005 fe27 	bl	8007d40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000944 	.word	0x20000944

080020fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <USART1_IRQHandler+0x10>)
 8002102:	f006 ffb7 	bl	8009074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000a8c 	.word	0x20000a8c

08002110 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <LPUART1_IRQHandler+0x10>)
 8002116:	f006 ffad 	bl	8009074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200009f8 	.word	0x200009f8

08002124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return 1;
 8002128:	2301      	movs	r3, #1
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_kill>:

int _kill(int pid, int sig)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800213e:	f00f f853 	bl	80111e8 <__errno>
 8002142:	4603      	mov	r3, r0
 8002144:	2216      	movs	r2, #22
 8002146:	601a      	str	r2, [r3, #0]
  return -1;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_exit>:

void _exit (int status)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ffe7 	bl	8002134 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002166:	e7fe      	b.n	8002166 <_exit+0x12>

08002168 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e00a      	b.n	8002190 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800217a:	f3af 8000 	nop.w
 800217e:	4601      	mov	r1, r0
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	60ba      	str	r2, [r7, #8]
 8002186:	b2ca      	uxtb	r2, r1
 8002188:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf0      	blt.n	800217a <_read+0x12>
  }

  return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e009      	b.n	80021c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dbf1      	blt.n	80021b4 <_write+0x12>
  }
  return len;
 80021d0:	687b      	ldr	r3, [r7, #4]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_close>:

int _close(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002202:	605a      	str	r2, [r3, #4]
  return 0;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_isatty>:

int _isatty(int file)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <_sbrk+0x5c>)
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <_sbrk+0x60>)
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <_sbrk+0x64>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <_sbrk+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d207      	bcs.n	8002284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002274:	f00e ffb8 	bl	80111e8 <__errno>
 8002278:	4603      	mov	r3, r0
 800227a:	220c      	movs	r2, #12
 800227c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e009      	b.n	8002298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <_sbrk+0x64>)
 8002294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20008000 	.word	0x20008000
 80022a4:	00000400 	.word	0x00000400
 80022a8:	200009a8 	.word	0x200009a8
 80022ac:	20001f00 	.word	0x20001f00

080022b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <SystemInit+0x20>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <SystemInit+0x20>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	; 0x38
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f4:	463b      	mov	r3, r7
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <MX_TIM3_Init+0xe8>)
 8002308:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <MX_TIM3_Init+0xec>)
 800230a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <MX_TIM3_Init+0xe8>)
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <MX_TIM3_Init+0xe8>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <MX_TIM3_Init+0xe8>)
 800231a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <MX_TIM3_Init+0xe8>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <MX_TIM3_Init+0xe8>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800232c:	4823      	ldr	r0, [pc, #140]	; (80023bc <MX_TIM3_Init+0xe8>)
 800232e:	f005 fe1a 	bl	8007f66 <HAL_TIM_Base_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002338:	f7ff fa0c 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002346:	4619      	mov	r1, r3
 8002348:	481c      	ldr	r0, [pc, #112]	; (80023bc <MX_TIM3_Init+0xe8>)
 800234a:	f005 ff3f 	bl	80081cc <HAL_TIM_ConfigClockSource>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002354:	f7ff f9fe 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002358:	4818      	ldr	r0, [pc, #96]	; (80023bc <MX_TIM3_Init+0xe8>)
 800235a:	f005 fe5b 	bl	8008014 <HAL_TIM_OC_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002364:	f7ff f9f6 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <MX_TIM3_Init+0xe8>)
 8002378:	f006 fc50 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002382:	f7ff f9e7 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002386:	2300      	movs	r3, #0
 8002388:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002396:	463b      	mov	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	4619      	mov	r1, r3
 800239c:	4807      	ldr	r0, [pc, #28]	; (80023bc <MX_TIM3_Init+0xe8>)
 800239e:	f005 fe9b 	bl	80080d8 <HAL_TIM_OC_ConfigChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80023a8:	f7ff f9d4 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <MX_TIM3_Init+0xe8>)
 80023ae:	f000 f829 	bl	8002404 <HAL_TIM_MspPostInit>

}
 80023b2:	bf00      	nop
 80023b4:	3738      	adds	r7, #56	; 0x38
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200009ac 	.word	0x200009ac
 80023c0:	40000400 	.word	0x40000400

080023c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_TIM_Base_MspInit+0x38>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10b      	bne.n	80023ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_TIM_Base_MspInit+0x3c>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_TIM_Base_MspInit+0x3c>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_TIM_Base_MspInit+0x3c>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40000400 	.word	0x40000400
 8002400:	40021000 	.word	0x40021000

08002404 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_TIM_MspPostInit+0x64>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d11b      	bne.n	800245e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_TIM_MspPostInit+0x68>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_TIM_MspPostInit+0x68>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_TIM_MspPostInit+0x68>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800243e:	2340      	movs	r3, #64	; 0x40
 8002440:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800244e:	2302      	movs	r3, #2
 8002450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_TIM_MspPostInit+0x6c>)
 800245a:	f002 fbf3 	bl	8004c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40000400 	.word	0x40000400
 800246c:	40021000 	.word	0x40021000
 8002470:	48000800 	.word	0x48000800

08002474 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <MX_LPUART1_UART_Init+0x90>)
 800247c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 8002480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002484:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80024b6:	4812      	ldr	r0, [pc, #72]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024b8:	f006 fc32 	bl	8008d20 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80024c2:	f7ff f947 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c6:	2100      	movs	r1, #0
 80024c8:	480d      	ldr	r0, [pc, #52]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024ca:	f008 f881 	bl	800a5d0 <HAL_UARTEx_SetTxFifoThreshold>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80024d4:	f7ff f93e 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d8:	2100      	movs	r1, #0
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024dc:	f008 f8b6 	bl	800a64c <HAL_UARTEx_SetRxFifoThreshold>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80024e6:	f7ff f935 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_LPUART1_UART_Init+0x8c>)
 80024ec:	f008 f837 	bl	800a55e <HAL_UARTEx_DisableFifoMode>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80024f6:	f7ff f92d 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200009f8 	.word	0x200009f8
 8002504:	40008000 	.word	0x40008000

08002508 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <MX_USART1_UART_Init+0x90>)
 800250e:	4a23      	ldr	r2, [pc, #140]	; (800259c <MX_USART1_UART_Init+0x94>)
 8002510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <MX_USART1_UART_Init+0x90>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002526:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_USART1_UART_Init+0x90>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_USART1_UART_Init+0x90>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <MX_USART1_UART_Init+0x90>)
 800254c:	2200      	movs	r2, #0
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002550:	4811      	ldr	r0, [pc, #68]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002552:	f006 fbe5 	bl	8008d20 <HAL_UART_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800255c:	f7ff f8fa 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002560:	2100      	movs	r1, #0
 8002562:	480d      	ldr	r0, [pc, #52]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002564:	f008 f834 	bl	800a5d0 <HAL_UARTEx_SetTxFifoThreshold>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800256e:	f7ff f8f1 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002572:	2100      	movs	r1, #0
 8002574:	4808      	ldr	r0, [pc, #32]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002576:	f008 f869 	bl	800a64c <HAL_UARTEx_SetRxFifoThreshold>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002580:	f7ff f8e8 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002584:	4804      	ldr	r0, [pc, #16]	; (8002598 <MX_USART1_UART_Init+0x90>)
 8002586:	f007 ffea 	bl	800a55e <HAL_UARTEx_DisableFifoMode>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002590:	f7ff f8e0 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000a8c 	.word	0x20000a8c
 800259c:	40013800 	.word	0x40013800

080025a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b09e      	sub	sp, #120	; 0x78
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b8:	f107 0320 	add.w	r3, r7, #32
 80025bc:	2244      	movs	r2, #68	; 0x44
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f00e fd2a 	bl	801101a <memset>
  if(uartHandle->Instance==LPUART1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7d      	ldr	r2, [pc, #500]	; (80027c0 <HAL_UART_MspInit+0x220>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	f040 8086 	bne.w	80026de <HAL_UART_MspInit+0x13e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025d2:	2320      	movs	r3, #32
 80025d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	4618      	mov	r0, r3
 80025e0:	f005 f912 	bl	8007808 <HAL_RCCEx_PeriphCLKConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025ea:	f7ff f8b3 	bl	8001754 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025ee:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <HAL_UART_MspInit+0x224>)
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	4a74      	ldr	r2, [pc, #464]	; (80027c4 <HAL_UART_MspInit+0x224>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_UART_MspInit+0x224>)
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_UART_MspInit+0x224>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_UART_MspInit+0x224>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002612:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_UART_MspInit+0x224>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_UART_MspInit+0x224>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a68      	ldr	r2, [pc, #416]	; (80027c4 <HAL_UART_MspInit+0x224>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_UART_MspInit+0x224>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = LPUART1_RX_TRANSMITTER_Pin;
 8002636:	2308      	movs	r3, #8
 8002638:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002646:	230c      	movs	r3, #12
 8002648:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(LPUART1_RX_TRANSMITTER_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800264e:	4619      	mov	r1, r3
 8002650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002654:	f002 faf6 	bl	8004c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LPUART1_TX_TRANSMITTER_Pin;
 8002658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800265c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800266a:	2308      	movs	r3, #8
 800266c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(LPUART1_TX_TRANSMITTER_GPIO_Port, &GPIO_InitStruct);
 800266e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002672:	4619      	mov	r1, r3
 8002674:	4854      	ldr	r0, [pc, #336]	; (80027c8 <HAL_UART_MspInit+0x228>)
 8002676:	f002 fae5 	bl	8004c44 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_UART_MspInit+0x22c>)
 800267c:	4a54      	ldr	r2, [pc, #336]	; (80027d0 <HAL_UART_MspInit+0x230>)
 800267e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002680:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_UART_MspInit+0x22c>)
 8002682:	2223      	movs	r2, #35	; 0x23
 8002684:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002686:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_UART_MspInit+0x22c>)
 8002688:	2210      	movs	r2, #16
 800268a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800268c:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <HAL_UART_MspInit+0x22c>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <HAL_UART_MspInit+0x22c>)
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_UART_MspInit+0x22c>)
 800269a:	2200      	movs	r2, #0
 800269c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_UART_MspInit+0x22c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80026a4:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_UART_MspInit+0x22c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_UART_MspInit+0x22c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80026b0:	4846      	ldr	r0, [pc, #280]	; (80027cc <HAL_UART_MspInit+0x22c>)
 80026b2:	f001 ff89 	bl	80045c8 <HAL_DMA_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 80026bc:	f7ff f84a 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_UART_MspInit+0x22c>)
 80026c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80026c6:	4a41      	ldr	r2, [pc, #260]	; (80027cc <HAL_UART_MspInit+0x22c>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	205b      	movs	r0, #91	; 0x5b
 80026d2:	f001 ff44 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80026d6:	205b      	movs	r0, #91	; 0x5b
 80026d8:	f001 ff5b 	bl	8004592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026dc:	e06c      	b.n	80027b8 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_UART_MspInit+0x234>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d167      	bne.n	80027b8 <HAL_UART_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026e8:	2301      	movs	r3, #1
 80026ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 f887 	bl	8007808 <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8002700:	f7ff f828 	bl	8001754 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002704:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_UART_MspInit+0x224>)
 8002706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002708:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <HAL_UART_MspInit+0x224>)
 800270a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270e:	6613      	str	r3, [r2, #96]	; 0x60
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_UART_MspInit+0x224>)
 8002712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_UART_MspInit+0x224>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <HAL_UART_MspInit+0x224>)
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002728:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <HAL_UART_MspInit+0x224>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002734:	23c0      	movs	r3, #192	; 0xc0
 8002736:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002744:	2307      	movs	r3, #7
 8002746:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800274c:	4619      	mov	r1, r3
 800274e:	481e      	ldr	r0, [pc, #120]	; (80027c8 <HAL_UART_MspInit+0x228>)
 8002750:	f002 fa78 	bl	8004c44 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_UART_MspInit+0x238>)
 8002756:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_UART_MspInit+0x23c>)
 8002758:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_UART_MspInit+0x238>)
 800275c:	2218      	movs	r2, #24
 800275e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_UART_MspInit+0x238>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_UART_MspInit+0x238>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_UART_MspInit+0x238>)
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_UART_MspInit+0x238>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_UART_MspInit+0x238>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_UART_MspInit+0x238>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_UART_MspInit+0x238>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800278a:	4813      	ldr	r0, [pc, #76]	; (80027d8 <HAL_UART_MspInit+0x238>)
 800278c:	f001 ff1c 	bl	80045c8 <HAL_DMA_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8002796:	f7fe ffdd 	bl	8001754 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_UART_MspInit+0x238>)
 800279e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_UART_MspInit+0x238>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2025      	movs	r0, #37	; 0x25
 80027ae:	f001 fed6 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027b2:	2025      	movs	r0, #37	; 0x25
 80027b4:	f001 feed 	bl	8004592 <HAL_NVIC_EnableIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	3778      	adds	r7, #120	; 0x78
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40008000 	.word	0x40008000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	48000400 	.word	0x48000400
 80027cc:	20000b20 	.word	0x20000b20
 80027d0:	40020008 	.word	0x40020008
 80027d4:	40013800 	.word	0x40013800
 80027d8:	20000b80 	.word	0x20000b80
 80027dc:	4002001c 	.word	0x4002001c

080027e0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_UART_RxCpltCallback+0xcc>)
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 80027ee:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80027f0:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80027f8:	d922      	bls.n	8002840 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002802:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_UART_RxCpltCallback+0xd4>)
 800280c:	4413      	add	r3, r2
 800280e:	89fa      	ldrh	r2, [r7, #14]
 8002810:	4929      	ldr	r1, [pc, #164]	; (80028b8 <HAL_UART_RxCpltCallback+0xd8>)
 8002812:	4618      	mov	r0, r3
 8002814:	f00e fd1d 	bl	8011252 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 800281a:	2200      	movs	r2, #0
 800281c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <HAL_UART_RxCpltCallback+0xd8>)
 8002822:	1899      	adds	r1, r3, r2
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800282a:	461a      	mov	r2, r3
 800282c:	4821      	ldr	r0, [pc, #132]	; (80028b4 <HAL_UART_RxCpltCallback+0xd4>)
 800282e:	f00e fd10 	bl	8011252 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8002832:	89fb      	ldrh	r3, [r7, #14]
 8002834:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002838:	b29a      	uxth	r2, r3
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_UART_RxCpltCallback+0xcc>)
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	e01e      	b.n	800287e <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_UART_RxCpltCallback+0xd4>)
 8002848:	441a      	add	r2, r3
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_UART_RxCpltCallback+0xd8>)
 800284c:	4610      	mov	r0, r2
 800284e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002852:	4602      	mov	r2, r0
 8002854:	4619      	mov	r1, r3
 8002856:	f8d1 c000 	ldr.w	ip, [r1]
 800285a:	684e      	ldr	r6, [r1, #4]
 800285c:	688d      	ldr	r5, [r1, #8]
 800285e:	68c9      	ldr	r1, [r1, #12]
 8002860:	f8c2 c000 	str.w	ip, [r2]
 8002864:	6056      	str	r6, [r2, #4]
 8002866:	6095      	str	r5, [r2, #8]
 8002868:	60d1      	str	r1, [r2, #12]
 800286a:	3310      	adds	r3, #16
 800286c:	3010      	adds	r0, #16
 800286e:	42a3      	cmp	r3, r4
 8002870:	d1ef      	bne.n	8002852 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	3340      	adds	r3, #64	; 0x40
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_UART_RxCpltCallback+0xcc>)
 800287c:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	490d      	ldr	r1, [pc, #52]	; (80028b8 <HAL_UART_RxCpltCallback+0xd8>)
 8002882:	480e      	ldr	r0, [pc, #56]	; (80028bc <HAL_UART_RxCpltCallback+0xdc>)
 8002884:	f006 fa9c 	bl	8008dc0 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_UART_RxCpltCallback+0xe0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_UART_RxCpltCallback+0xe0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0204 	bic.w	r2, r2, #4
 8002896:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002898:	2240      	movs	r2, #64	; 0x40
 800289a:	4907      	ldr	r1, [pc, #28]	; (80028b8 <HAL_UART_RxCpltCallback+0xd8>)
 800289c:	4807      	ldr	r0, [pc, #28]	; (80028bc <HAL_UART_RxCpltCallback+0xdc>)
 800289e:	f006 fa8f 	bl	8008dc0 <HAL_UART_Receive_DMA>
}//l'appel de cette fonction réactive l'intérruption.
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000042e 	.word	0x2000042e
 80028b0:	2000042c 	.word	0x2000042c
 80028b4:	20000470 	.word	0x20000470
 80028b8:	20000430 	.word	0x20000430
 80028bc:	20000a8c 	.word	0x20000a8c
 80028c0:	20000b80 	.word	0x20000b80

080028c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80028c8:	f7ff fcf2 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <LoopForever+0x6>)
  ldr r1, =_edata
 80028ce:	490d      	ldr	r1, [pc, #52]	; (8002904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028d0:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <LoopForever+0xe>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <LoopForever+0x12>)
  ldr r4, =_ebss
 80028e4:	4c0a      	ldr	r4, [pc, #40]	; (8002910 <LoopForever+0x16>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80028f2:	f00e fc7f 	bl	80111f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028f6:	f7fe fe7d 	bl	80015f4 <main>

080028fa <LoopForever>:

LoopForever:
    b LoopForever
 80028fa:	e7fe      	b.n	80028fa <LoopForever>
  ldr   r0, =_estack
 80028fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002904:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8002908:	08014050 	.word	0x08014050
  ldr r2, =_sbss
 800290c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002910:	20001f00 	.word	0x20001f00

08002914 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002914:	e7fe      	b.n	8002914 <COMP1_2_3_IRQHandler>

08002916 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002920:	2003      	movs	r0, #3
 8002922:	f001 fe11 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002926:	200f      	movs	r0, #15
 8002928:	f000 f80e 	bl	8002948 <HAL_InitTick>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	71fb      	strb	r3, [r7, #7]
 8002936:	e001      	b.n	800293c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002938:	f7ff fb60 	bl	8001ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800293c:	79fb      	ldrb	r3, [r7, #7]

}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <HAL_InitTick+0x68>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d022      	beq.n	80029a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_InitTick+0x6c>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_InitTick+0x68>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002968:	fbb1 f3f3 	udiv	r3, r1, r3
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fe1c 	bl	80045ae <HAL_SYSTICK_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b0f      	cmp	r3, #15
 8002980:	d809      	bhi.n	8002996 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002982:	2200      	movs	r2, #0
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	f04f 30ff 	mov.w	r0, #4294967295
 800298a:	f001 fde8 	bl	800455e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_InitTick+0x70>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e007      	b.n	80029a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e004      	b.n	80029a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e001      	b.n	80029a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000008 	.word	0x20000008
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_IncTick+0x1c>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_IncTick+0x20>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <HAL_IncTick+0x1c>)
 80029cc:	6013      	str	r3, [r2, #0]
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000be0 	.word	0x20000be0
 80029dc:	20000008 	.word	0x20000008

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000be0 	.word	0x20000be0

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d004      	beq.n	8002a1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_Delay+0x40>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1c:	bf00      	nop
 8002a1e:	f7ff ffdf 	bl	80029e0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d8f7      	bhi.n	8002a1e <HAL_Delay+0x26>
  {
  }
}
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000008 	.word	0x20000008

08002a3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3360      	adds	r3, #96	; 0x60
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <LL_ADC_SetOffset+0x44>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	03fff000 	.word	0x03fff000

08002aec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	461a      	mov	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3360      	adds	r3, #96	; 0x60
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3360      	adds	r3, #96	; 0x60
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	615a      	str	r2, [r3, #20]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b087      	sub	sp, #28
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3330      	adds	r3, #48	; 0x30
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	4413      	add	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	211f      	movs	r1, #31
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	401a      	ands	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	f003 011f 	and.w	r1, r3, #31
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3314      	adds	r3, #20
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0e5b      	lsrs	r3, r3, #25
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	0d1b      	lsrs	r3, r3, #20
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2107      	movs	r1, #7
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	0d1b      	lsrs	r3, r3, #20
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0318 	and.w	r3, r3, #24
 8002cfe:	4908      	ldr	r1, [pc, #32]	; (8002d20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d00:	40d9      	lsrs	r1, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	400b      	ands	r3, r1
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	0007ffff 	.word	0x0007ffff

08002d24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 031f 	and.w	r3, r3, #31
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6093      	str	r3, [r2, #8]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d94:	d101      	bne.n	8002d9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de4:	d101      	bne.n	8002dea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_IsEnabled+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_IsEnabled+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d101      	bne.n	8002e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d101      	bne.n	8002eac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e167      	b.n	80031a6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe f943 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff3f 	bl	8002d80 <LL_ADC_IsDeepPowerDownEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff25 	bl	8002d5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff5a 	bl	8002dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff3e 	bl	8002da8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2c:	4ba0      	ldr	r3, [pc, #640]	; (80031b0 <HAL_ADC_Init+0x2f4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	4aa0      	ldr	r2, [pc, #640]	; (80031b4 <HAL_ADC_Init+0x2f8>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f40:	e002      	b.n	8002f48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff3c 	bl	8002dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	f043 0210 	orr.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	f043 0201 	orr.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff75 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 8002f84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 8100 	bne.w	8003194 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 80fc 	bne.w	8003194 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fa4:	f043 0202 	orr.w	r2, r3, #2
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff35 	bl	8002e20 <LL_ADC_IsEnabled>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d111      	bne.n	8002fe0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fc0:	f7ff ff2e 	bl	8002e20 <LL_ADC_IsEnabled>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	487c      	ldr	r0, [pc, #496]	; (80031b8 <HAL_ADC_Init+0x2fc>)
 8002fc8:	f7ff ff2a 	bl	8002e20 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4323      	orrs	r3, r4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4878      	ldr	r0, [pc, #480]	; (80031bc <HAL_ADC_Init+0x300>)
 8002fdc:	f7ff fd2e 	bl	8002a3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7f5b      	ldrb	r3, [r3, #29]
 8002fe4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ff0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ff6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ffe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800300a:	2b01      	cmp	r3, #1
 800300c:	d106      	bne.n	800301c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	045b      	lsls	r3, r3, #17
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	4b60      	ldr	r3, [pc, #384]	; (80031c0 <HAL_ADC_Init+0x304>)
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	430b      	orrs	r3, r1
 800304a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff14 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 800306c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d16d      	bne.n	8003150 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d16a      	bne.n	8003150 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800307e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003086:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003096:	f023 0302 	bic.w	r3, r3, #2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6911      	ldr	r1, [r2, #16]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80030da:	e013      	b.n	8003104 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003100:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310a:	2b01      	cmp	r3, #1
 800310c:	d118      	bne.n	8003140 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003130:	430a      	orrs	r2, r1
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	e007      	b.n	8003150 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10c      	bne.n	8003172 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f023 010f 	bic.w	r1, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	e007      	b.n	8003182 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 020f 	bic.w	r2, r2, #15
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c
 8003192:	e007      	b.n	80031a4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	50000100 	.word	0x50000100
 80031bc:	50000300 	.word	0x50000300
 80031c0:	fff04007 	.word	0xfff04007

080031c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d0:	4851      	ldr	r0, [pc, #324]	; (8003318 <HAL_ADC_Start_DMA+0x154>)
 80031d2:	f7ff fda7 	bl	8002d24 <LL_ADC_GetMultimode>
 80031d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe46 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 808f 	bne.w	8003308 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_Start_DMA+0x34>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e08a      	b.n	800330e <HAL_ADC_Start_DMA+0x14a>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d002      	beq.n	8003212 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b09      	cmp	r3, #9
 8003210:	d173      	bne.n	80032fa <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 feb2 	bl	8003f7c <ADC_Enable>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d166      	bne.n	80032f0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a38      	ldr	r2, [pc, #224]	; (800331c <HAL_ADC_Start_DMA+0x158>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d002      	beq.n	8003246 <HAL_ADC_Start_DMA+0x82>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e001      	b.n	800324a <HAL_ADC_Start_DMA+0x86>
 8003246:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	4293      	cmp	r3, r2
 8003250:	d002      	beq.n	8003258 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	f023 0206 	bic.w	r2, r3, #6
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	661a      	str	r2, [r3, #96]	; 0x60
 800327c:	e002      	b.n	8003284 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <HAL_ADC_Start_DMA+0x15c>)
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <HAL_ADC_Start_DMA+0x160>)
 8003292:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <HAL_ADC_Start_DMA+0x164>)
 800329a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	221c      	movs	r2, #28
 80032a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0210 	orr.w	r2, r2, #16
 80032ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3340      	adds	r3, #64	; 0x40
 80032d6:	4619      	mov	r1, r3
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f001 fa1c 	bl	8004718 <HAL_DMA_Start_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fdac 	bl	8002e46 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032ee:	e00d      	b.n	800330c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80032f8:	e008      	b.n	800330c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003306:	e001      	b.n	800330c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003308:	2302      	movs	r3, #2
 800330a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	50000300 	.word	0x50000300
 800331c:	50000100 	.word	0x50000100
 8003320:	08004089 	.word	0x08004089
 8003324:	08004161 	.word	0x08004161
 8003328:	0800417d 	.word	0x0800417d

0800332c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003348:	4883      	ldr	r0, [pc, #524]	; (8003558 <HAL_ADC_IRQHandler+0x22c>)
 800334a:	f7ff fceb 	bl	8002d24 <LL_ADC_GetMultimode>
 800334e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <HAL_ADC_IRQHandler+0x5e>
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 ff65 	bl	800424c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2202      	movs	r2, #2
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_ADC_IRQHandler+0x72>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8085 	beq.w	80034b4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d07f      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fc05 	bl	8002be0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d064      	beq.n	80034a6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a5e      	ldr	r2, [pc, #376]	; (800355c <HAL_ADC_IRQHandler+0x230>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d002      	beq.n	80033ec <HAL_ADC_IRQHandler+0xc0>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	e001      	b.n	80033f0 <HAL_ADC_IRQHandler+0xc4>
 80033ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d008      	beq.n	800340a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d002      	beq.n	800340a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b09      	cmp	r3, #9
 8003408:	d104      	bne.n	8003414 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	e00d      	b.n	8003430 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a50      	ldr	r2, [pc, #320]	; (800355c <HAL_ADC_IRQHandler+0x230>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d002      	beq.n	8003424 <HAL_ADC_IRQHandler+0xf8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	e001      	b.n	8003428 <HAL_ADC_IRQHandler+0xfc>
 8003424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003428:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d135      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d12e      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fd0e 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11a      	bne.n	800348e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 020c 	bic.w	r2, r2, #12
 8003466:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d112      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c
 800348c:	e00b      	b.n	80034a6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd febe 	bl	8001228 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	220c      	movs	r2, #12
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_IRQHandler+0x19c>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 809e 	beq.w	8003610 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8098 	beq.w	8003610 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fbae 	bl	8002c5e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003502:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fb69 	bl	8002be0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800350e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a11      	ldr	r2, [pc, #68]	; (800355c <HAL_ADC_IRQHandler+0x230>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d002      	beq.n	8003520 <HAL_ADC_IRQHandler+0x1f4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e001      	b.n	8003524 <HAL_ADC_IRQHandler+0x1f8>
 8003520:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	4293      	cmp	r3, r2
 800352a:	d008      	beq.n	800353e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d002      	beq.n	800353e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b07      	cmp	r3, #7
 800353c:	d104      	bne.n	8003548 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	e011      	b.n	800356c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a03      	ldr	r2, [pc, #12]	; (800355c <HAL_ADC_IRQHandler+0x230>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d006      	beq.n	8003560 <HAL_ADC_IRQHandler+0x234>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e005      	b.n	8003564 <HAL_ADC_IRQHandler+0x238>
 8003558:	50000300 	.word	0x50000300
 800355c:	50000100 	.word	0x50000100
 8003560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003564:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d047      	beq.n	8003602 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_ADC_IRQHandler+0x260>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d03f      	beq.n	8003602 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003588:	2b00      	cmp	r3, #0
 800358a:	d13a      	bne.n	8003602 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d133      	bne.n	8003602 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d12e      	bne.n	8003602 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fc73 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d11a      	bne.n	80035ea <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d112      	bne.n	8003602 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f043 0201 	orr.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80035e8:	e00b      	b.n	8003602 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fdfa 	bl	80041fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2260      	movs	r2, #96	; 0x60
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <HAL_ADC_IRQHandler+0x312>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00c      	beq.n	800363e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f89f 	bl	8003774 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <HAL_ADC_IRQHandler+0x342>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fde0 	bl	8004224 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <HAL_ADC_IRQHandler+0x372>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fdd2 	bl	8004238 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d036      	beq.n	8003716 <HAL_ADC_IRQHandler+0x3ea>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d031      	beq.n	8003716 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80036ba:	2301      	movs	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e014      	b.n	80036ea <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036c6:	4825      	ldr	r0, [pc, #148]	; (800375c <HAL_ADC_IRQHandler+0x430>)
 80036c8:	f7ff fb3a 	bl	8002d40 <LL_ADC_GetMultiDMATransfer>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	e008      	b.n	80036ea <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80036e6:	2301      	movs	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10e      	bne.n	800370e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003700:	f043 0202 	orr.w	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f83d 	bl	8003788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2210      	movs	r2, #16
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_ADC_IRQHandler+0x426>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d013      	beq.n	8003752 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	f043 0208 	orr.w	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fd5f 	bl	8004210 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003752:	bf00      	nop
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	50000300 	.word	0x50000300

08003760 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b0b6      	sub	sp, #216	; 0xd8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x22>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e3c8      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x7b4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fb4f 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 83ad 	bne.w	8003f32 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	f7ff fa0e 	bl	8002c06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fb3d 	bl	8002e6e <LL_ADC_REG_IsConversionOngoing>
 80037f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fb49 	bl	8002e94 <LL_ADC_INJ_IsConversionOngoing>
 8003802:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003806:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 81d9 	bne.w	8003bc2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 81d4 	bne.w	8003bc2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003822:	d10f      	bne.n	8003844 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	4619      	mov	r1, r3
 8003830:	f7ff fa28 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff f9bc 	bl	8002bba <LL_ADC_SetSamplingTimeCommonConfig>
 8003842:	e00e      	b.n	8003862 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	461a      	mov	r2, r3
 8003852:	f7ff fa17 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff f9ac 	bl	8002bba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	08db      	lsrs	r3, r3, #3
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d022      	beq.n	80038ca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6919      	ldr	r1, [r3, #16]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003894:	f7ff f906 	bl	8002aa4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6919      	ldr	r1, [r3, #16]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f7ff f952 	bl	8002b4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x124>
 80038ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038be:	e000      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x126>
 80038c0:	2300      	movs	r3, #0
 80038c2:	461a      	mov	r2, r3
 80038c4:	f7ff f95e 	bl	8002b84 <LL_ADC_SetOffsetSaturation>
 80038c8:	e17b      	b.n	8003bc2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff f90b 	bl	8002aec <LL_ADC_GetOffsetChannel>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x15a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f900 	bl	8002aec <LL_ADC_GetOffsetChannel>
 80038ec:	4603      	mov	r3, r0
 80038ee:	0e9b      	lsrs	r3, r3, #26
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	e01e      	b.n	8003934 <HAL_ADC_ConfigChannel+0x198>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff f8f5 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003902:	4603      	mov	r3, r0
 8003904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003914:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003918:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800391c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e004      	b.n	8003932 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1b0>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0e9b      	lsrs	r3, r3, #26
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	e018      	b.n	800397e <HAL_ADC_ConfigChannel+0x1e2>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e004      	b.n	800397e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800397e:	429a      	cmp	r2, r3
 8003980:	d106      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff f8c4 	bl	8002b18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f8a8 	bl	8002aec <LL_ADC_GetOffsetChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x220>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff f89d 	bl	8002aec <LL_ADC_GetOffsetChannel>
 80039b2:	4603      	mov	r3, r0
 80039b4:	0e9b      	lsrs	r3, r3, #26
 80039b6:	f003 021f 	and.w	r2, r3, #31
 80039ba:	e01e      	b.n	80039fa <HAL_ADC_ConfigChannel+0x25e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f892 	bl	8002aec <LL_ADC_GetOffsetChannel>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80039ea:	2320      	movs	r3, #32
 80039ec:	e004      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80039ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d105      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x276>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0e9b      	lsrs	r3, r3, #26
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	e018      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x2a8>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003a36:	2320      	movs	r3, #32
 8003a38:	e004      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d106      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff f861 	bl	8002b18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff f845 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x2e6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff f83a 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	0e9b      	lsrs	r3, r3, #26
 8003a7c:	f003 021f 	and.w	r2, r3, #31
 8003a80:	e01e      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x324>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2102      	movs	r1, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff f82f 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	e004      	b.n	8003abe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x33c>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0e9b      	lsrs	r3, r3, #26
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	e016      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x36a>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003af8:	2320      	movs	r3, #32
 8003afa:	e004      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d106      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f800 	bl	8002b18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2103      	movs	r1, #3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe ffe4 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x3a8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2103      	movs	r1, #3
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe ffd9 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	f003 021f 	and.w	r2, r3, #31
 8003b42:	e017      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x3d8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2103      	movs	r1, #3
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe ffce 	bl	8002aec <LL_ADC_GetOffsetChannel>
 8003b50:	4603      	mov	r3, r0
 8003b52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003b66:	2320      	movs	r3, #32
 8003b68:	e003      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x3f0>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	0e9b      	lsrs	r3, r3, #26
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	e011      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x414>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e003      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d106      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2103      	movs	r1, #3
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe ffab 	bl	8002b18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f92a 	bl	8002e20 <LL_ADC_IsEnabled>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 8140 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	461a      	mov	r2, r3
 8003be2:	f7ff f87b 	bl	8002cdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4a8f      	ldr	r2, [pc, #572]	; (8003e28 <HAL_ADC_ConfigChannel+0x68c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	f040 8131 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x47e>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	0e9b      	lsrs	r3, r3, #26
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	bf94      	ite	ls
 8003c12:	2301      	movls	r3, #1
 8003c14:	2300      	movhi	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	e019      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x4b2>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c2a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003c32:	2320      	movs	r3, #32
 8003c34:	e003      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c38:	fab3 f383 	clz	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2b09      	cmp	r3, #9
 8003c46:	bf94      	ite	ls
 8003c48:	2301      	movls	r3, #1
 8003c4a:	2300      	movhi	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d079      	beq.n	8003d46 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x4d2>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	0e9b      	lsrs	r3, r3, #26
 8003c64:	3301      	adds	r3, #1
 8003c66:	069b      	lsls	r3, r3, #26
 8003c68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c6c:	e015      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x4fe>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003c86:	2320      	movs	r3, #32
 8003c88:	e003      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	069b      	lsls	r3, r3, #26
 8003c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x51e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	3301      	adds	r3, #1
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	e017      	b.n	8003cea <HAL_ADC_ConfigChannel+0x54e>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	e003      	b.n	8003cde <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd8:	fab3 f383 	clz	r3, r3
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	ea42 0103 	orr.w	r1, r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x574>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0e9b      	lsrs	r3, r3, #26
 8003d00:	3301      	adds	r3, #1
 8003d02:	f003 021f 	and.w	r2, r3, #31
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	051b      	lsls	r3, r3, #20
 8003d0e:	e018      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x5a6>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	e003      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	f003 021f 	and.w	r2, r3, #31
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d42:	430b      	orrs	r3, r1
 8003d44:	e081      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x5c6>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	3301      	adds	r3, #1
 8003d5a:	069b      	lsls	r3, r3, #26
 8003d5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d60:	e015      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x5f2>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	e003      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	069b      	lsls	r3, r3, #26
 8003d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x612>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	0e9b      	lsrs	r3, r3, #26
 8003da0:	3301      	adds	r3, #1
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	e017      	b.n	8003dde <HAL_ADC_ConfigChannel+0x642>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	61fb      	str	r3, [r7, #28]
  return result;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	e003      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10d      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x66e>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	3301      	adds	r3, #1
 8003df6:	f003 021f 	and.w	r2, r3, #31
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b1e      	subs	r3, #30
 8003e02:	051b      	lsls	r3, r3, #20
 8003e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e08:	e01e      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x6ac>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	613b      	str	r3, [r7, #16]
  return result;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e006      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x698>
 8003e26:	bf00      	nop
 8003e28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f003 021f 	and.w	r2, r3, #31
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	3b1e      	subs	r3, #30
 8003e42:	051b      	lsls	r3, r3, #20
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e48:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7fe ff18 	bl	8002c84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d071      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e60:	483e      	ldr	r0, [pc, #248]	; (8003f5c <HAL_ADC_ConfigChannel+0x7c0>)
 8003e62:	f7fe fe11 	bl	8002a88 <LL_ADC_GetCommonPathInternalCh>
 8003e66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_ADC_ConfigChannel+0x6e2>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d127      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d121      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e92:	d157      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	482f      	ldr	r0, [pc, #188]	; (8003f5c <HAL_ADC_ConfigChannel+0x7c0>)
 8003ea0:	f7fe fddf 	bl	8002a62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ea4:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	4a30      	ldr	r2, [pc, #192]	; (8003f6c <HAL_ADC_ConfigChannel+0x7d0>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ebe:	e002      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f9      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ecc:	e03a      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d113      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_ADC_ConfigChannel+0x7d8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02a      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4818      	ldr	r0, [pc, #96]	; (8003f5c <HAL_ADC_ConfigChannel+0x7c0>)
 8003efa:	f7fe fdb2 	bl	8002a62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003efe:	e021      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d11c      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d011      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f28:	4619      	mov	r1, r3
 8003f2a:	480c      	ldr	r0, [pc, #48]	; (8003f5c <HAL_ADC_ConfigChannel+0x7c0>)
 8003f2c:	f7fe fd99 	bl	8002a62 <LL_ADC_SetCommonPathInternalCh>
 8003f30:	e008      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	37d8      	adds	r7, #216	; 0xd8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	80080000 	.word	0x80080000
 8003f5c:	50000300 	.word	0x50000300
 8003f60:	c3210000 	.word	0xc3210000
 8003f64:	90c00010 	.word	0x90c00010
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	053e2d63 	.word	0x053e2d63
 8003f70:	c7520000 	.word	0xc7520000
 8003f74:	50000100 	.word	0x50000100
 8003f78:	cb840000 	.word	0xcb840000

08003f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe ff47 	bl	8002e20 <LL_ADC_IsEnabled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d169      	bne.n	800406c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <ADC_Enable+0xfc>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e055      	b.n	800406e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe ff16 	bl	8002df8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003fcc:	482b      	ldr	r0, [pc, #172]	; (800407c <ADC_Enable+0x100>)
 8003fce:	f7fe fd5b 	bl	8002a88 <LL_ADC_GetCommonPathInternalCh>
 8003fd2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fdc:	4b28      	ldr	r3, [pc, #160]	; (8004080 <ADC_Enable+0x104>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	4a28      	ldr	r2, [pc, #160]	; (8004084 <ADC_Enable+0x108>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ff6:	e002      	b.n	8003ffe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f9      	bne.n	8003ff8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004004:	f7fe fcec 	bl	80029e0 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800400a:	e028      	b.n	800405e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe ff05 	bl	8002e20 <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fee9 	bl	8002df8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004026:	f7fe fcdb 	bl	80029e0 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d914      	bls.n	800405e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d00d      	beq.n	800405e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	f043 0210 	orr.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e007      	b.n	800406e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d1cf      	bne.n	800400c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	8000003f 	.word	0x8000003f
 800407c:	50000300 	.word	0x50000300
 8004080:	20000000 	.word	0x20000000
 8004084:	053e2d63 	.word	0x053e2d63

08004088 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d14b      	bne.n	800413a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d021      	beq.n	8004100 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fd8d 	bl	8002be0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d032      	beq.n	8004132 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d12b      	bne.n	8004132 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d11f      	bne.n	8004132 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80040fe:	e018      	b.n	8004132 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d111      	bne.n	8004132 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412a:	f043 0201 	orr.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7fd f878 	bl	8001228 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004138:	e00e      	b.n	8004158 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7ff fb1e 	bl	8003788 <HAL_ADC_ErrorCallback>
}
 800414c:	e004      	b.n	8004158 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff faf6 	bl	8003760 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	f043 0204 	orr.w	r2, r3, #4
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff faf0 	bl	8003788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <LL_ADC_IsEnabled>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <LL_ADC_IsEnabled+0x18>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <LL_ADC_IsEnabled+0x1a>
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d101      	bne.n	80041ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b0a1      	sub	sp, #132	; 0x84
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800427a:	2302      	movs	r3, #2
 800427c:	e08b      	b.n	8004396 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004286:	2300      	movs	r3, #0
 8004288:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800428a:	2300      	movs	r3, #0
 800428c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004296:	d102      	bne.n	800429e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004298:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	e001      	b.n	80042a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e06a      	b.n	8004396 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ff87 	bl	80041d6 <LL_ADC_REG_IsConversionOngoing>
 80042c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff ff81 	bl	80041d6 <LL_ADC_REG_IsConversionOngoing>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d14c      	bne.n	8004374 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80042da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d149      	bne.n	8004374 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042e0:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80042e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d028      	beq.n	800433e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042fe:	035b      	lsls	r3, r3, #13
 8004300:	430b      	orrs	r3, r1
 8004302:	431a      	orrs	r2, r3
 8004304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004306:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004308:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800430c:	f7ff ff50 	bl	80041b0 <LL_ADC_IsEnabled>
 8004310:	4604      	mov	r4, r0
 8004312:	4823      	ldr	r0, [pc, #140]	; (80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004314:	f7ff ff4c 	bl	80041b0 <LL_ADC_IsEnabled>
 8004318:	4603      	mov	r3, r0
 800431a:	4323      	orrs	r3, r4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d133      	bne.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004328:	f023 030f 	bic.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	6811      	ldr	r1, [r2, #0]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	430a      	orrs	r2, r1
 8004336:	431a      	orrs	r2, r3
 8004338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800433c:	e024      	b.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800433e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004348:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800434a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800434e:	f7ff ff2f 	bl	80041b0 <LL_ADC_IsEnabled>
 8004352:	4604      	mov	r4, r0
 8004354:	4812      	ldr	r0, [pc, #72]	; (80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004356:	f7ff ff2b 	bl	80041b0 <LL_ADC_IsEnabled>
 800435a:	4603      	mov	r3, r0
 800435c:	4323      	orrs	r3, r4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d112      	bne.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800436a:	f023 030f 	bic.w	r3, r3, #15
 800436e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004370:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004372:	e009      	b.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004386:	e000      	b.n	800438a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004388:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004392:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004396:	4618      	mov	r0, r3
 8004398:	3784      	adds	r7, #132	; 0x84
 800439a:	46bd      	mov	sp, r7
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	bf00      	nop
 80043a0:	50000100 	.word	0x50000100
 80043a4:	50000300 	.word	0x50000300

080043a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043da:	4a04      	ldr	r2, [pc, #16]	; (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60d3      	str	r3, [r2, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db0b      	blt.n	8004436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <__NVIC_EnableIRQ+0x38>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2001      	movs	r0, #1
 800442e:	fa00 f202 	lsl.w	r2, r0, r2
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db0a      	blt.n	8004472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	490c      	ldr	r1, [pc, #48]	; (8004494 <__NVIC_SetPriority+0x4c>)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	440b      	add	r3, r1
 800446c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004470:	e00a      	b.n	8004488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4908      	ldr	r1, [pc, #32]	; (8004498 <__NVIC_SetPriority+0x50>)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3b04      	subs	r3, #4
 8004480:	0112      	lsls	r2, r2, #4
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	440b      	add	r3, r1
 8004486:	761a      	strb	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf28      	it	cs
 80044ba:	2304      	movcs	r3, #4
 80044bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d902      	bls.n	80044cc <NVIC_EncodePriority+0x30>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3b03      	subs	r3, #3
 80044ca:	e000      	b.n	80044ce <NVIC_EncodePriority+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	401a      	ands	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	4313      	orrs	r3, r2
         );
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004514:	d301      	bcc.n	800451a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004516:	2301      	movs	r3, #1
 8004518:	e00f      	b.n	800453a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <SysTick_Config+0x40>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004522:	210f      	movs	r1, #15
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	f7ff ff8e 	bl	8004448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <SysTick_Config+0x40>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <SysTick_Config+0x40>)
 8004534:	2207      	movs	r2, #7
 8004536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e010 	.word	0xe000e010

08004548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff29 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800456c:	f7ff ff40 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 8004570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7ff ff90 	bl	800449c <NVIC_EncodePriority>
 800457c:	4602      	mov	r2, r0
 800457e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff5f 	bl	8004448 <__NVIC_SetPriority>
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff33 	bl	800440c <__NVIC_EnableIRQ>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ffa4 	bl	8004504 <SysTick_Config>
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e08d      	b.n	80046f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_DMA_Init+0x138>)
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d80f      	bhi.n	8004606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b45      	ldr	r3, [pc, #276]	; (8004704 <HAL_DMA_Init+0x13c>)
 80045ee:	4413      	add	r3, r2
 80045f0:	4a45      	ldr	r2, [pc, #276]	; (8004708 <HAL_DMA_Init+0x140>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	009a      	lsls	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a42      	ldr	r2, [pc, #264]	; (800470c <HAL_DMA_Init+0x144>)
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
 8004604:	e00e      	b.n	8004624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	4b40      	ldr	r3, [pc, #256]	; (8004710 <HAL_DMA_Init+0x148>)
 800460e:	4413      	add	r3, r2
 8004610:	4a3d      	ldr	r2, [pc, #244]	; (8004708 <HAL_DMA_Init+0x140>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	009a      	lsls	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <HAL_DMA_Init+0x14c>)
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa82 	bl	8004b80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004684:	d102      	bne.n	800468c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d010      	beq.n	80046cc <HAL_DMA_Init+0x104>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d80c      	bhi.n	80046cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 faa2 	bl	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	e008      	b.n	80046de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40020407 	.word	0x40020407
 8004704:	bffdfff8 	.word	0xbffdfff8
 8004708:	cccccccd 	.word	0xcccccccd
 800470c:	40020000 	.word	0x40020000
 8004710:	bffdfbf8 	.word	0xbffdfbf8
 8004714:	40020400 	.word	0x40020400

08004718 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_DMA_Start_IT+0x20>
 8004734:	2302      	movs	r3, #2
 8004736:	e066      	b.n	8004806 <HAL_DMA_Start_IT+0xee>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d155      	bne.n	80047f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f9c7 	bl	8004b04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 020e 	orr.w	r2, r2, #14
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e00f      	b.n	80047b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 020a 	orr.w	r2, r2, #10
 80047ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e005      	b.n	8004804 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004800:	2302      	movs	r3, #2
 8004802:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004804:	7dfb      	ldrb	r3, [r7, #23]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d005      	beq.n	8004832 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2204      	movs	r2, #4
 800482a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e037      	b.n	80048a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 020e 	bic.w	r2, r2, #14
 8004840:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f003 021f 	and.w	r2, r3, #31
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	2101      	movs	r1, #1
 8004870:	fa01 f202 	lsl.w	r2, r1, r2
 8004874:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800487e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004896:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d00d      	beq.n	80048f4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2204      	movs	r2, #4
 80048dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	e047      	b.n	8004984 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 020e 	bic.w	r2, r2, #14
 8004902:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f003 021f 	and.w	r2, r3, #31
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f202 	lsl.w	r2, r1, r2
 8004936:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004940:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004958:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004962:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
    }
  }
  return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2204      	movs	r2, #4
 80049b0:	409a      	lsls	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d026      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x7a>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d021      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0204 	bic.w	r2, r2, #4
 80049e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f003 021f 	and.w	r2, r3, #31
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2104      	movs	r1, #4
 80049f0:	fa01 f202 	lsl.w	r2, r1, r2
 80049f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d071      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a06:	e06c      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2202      	movs	r2, #2
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02e      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d029      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 020a 	bic.w	r2, r2, #10
 8004a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	f003 021f 	and.w	r2, r3, #31
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	2102      	movs	r1, #2
 8004a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d038      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a78:	e033      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2208      	movs	r2, #8
 8004a84:	409a      	lsls	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02a      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d025      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 020e 	bic.w	r2, r2, #14
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
}
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f003 021f 	and.w	r2, r3, #31
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d108      	bne.n	8004b64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b62:	e007      	b.n	8004b74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d802      	bhi.n	8004b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e001      	b.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b9c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3b08      	subs	r3, #8
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	009a      	lsls	r2, r3, #2
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40020407 	.word	0x40020407
 8004bec:	40020800 	.word	0x40020800
 8004bf0:	40020820 	.word	0x40020820
 8004bf4:	cccccccd 	.word	0xcccccccd
 8004bf8:	40020880 	.word	0x40020880

08004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	461a      	mov	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c1e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	2201      	movs	r2, #1
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	1000823f 	.word	0x1000823f
 8004c40:	40020940 	.word	0x40020940

08004c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c52:	e15a      	b.n	8004f0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	2101      	movs	r1, #1
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	4013      	ands	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 814c 	beq.w	8004f04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d005      	beq.n	8004c84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d130      	bne.n	8004ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	2203      	movs	r2, #3
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cba:	2201      	movs	r2, #1
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	f003 0201 	and.w	r2, r3, #1
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d017      	beq.n	8004d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d123      	bne.n	8004d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	08da      	lsrs	r2, r3, #3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3208      	adds	r2, #8
 8004d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	220f      	movs	r2, #15
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	08da      	lsrs	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3208      	adds	r2, #8
 8004d70:	6939      	ldr	r1, [r7, #16]
 8004d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	2203      	movs	r2, #3
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0203 	and.w	r2, r3, #3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80a6 	beq.w	8004f04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db8:	4b5b      	ldr	r3, [pc, #364]	; (8004f28 <HAL_GPIO_Init+0x2e4>)
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	4a5a      	ldr	r2, [pc, #360]	; (8004f28 <HAL_GPIO_Init+0x2e4>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8004dc4:	4b58      	ldr	r3, [pc, #352]	; (8004f28 <HAL_GPIO_Init+0x2e4>)
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dd0:	4a56      	ldr	r2, [pc, #344]	; (8004f2c <HAL_GPIO_Init+0x2e8>)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	220f      	movs	r2, #15
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dfa:	d01f      	beq.n	8004e3c <HAL_GPIO_Init+0x1f8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a4c      	ldr	r2, [pc, #304]	; (8004f30 <HAL_GPIO_Init+0x2ec>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d019      	beq.n	8004e38 <HAL_GPIO_Init+0x1f4>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a4b      	ldr	r2, [pc, #300]	; (8004f34 <HAL_GPIO_Init+0x2f0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <HAL_GPIO_Init+0x1f0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a4a      	ldr	r2, [pc, #296]	; (8004f38 <HAL_GPIO_Init+0x2f4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00d      	beq.n	8004e30 <HAL_GPIO_Init+0x1ec>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a49      	ldr	r2, [pc, #292]	; (8004f3c <HAL_GPIO_Init+0x2f8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <HAL_GPIO_Init+0x1e8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a48      	ldr	r2, [pc, #288]	; (8004f40 <HAL_GPIO_Init+0x2fc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d101      	bne.n	8004e28 <HAL_GPIO_Init+0x1e4>
 8004e24:	2305      	movs	r3, #5
 8004e26:	e00a      	b.n	8004e3e <HAL_GPIO_Init+0x1fa>
 8004e28:	2306      	movs	r3, #6
 8004e2a:	e008      	b.n	8004e3e <HAL_GPIO_Init+0x1fa>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	e006      	b.n	8004e3e <HAL_GPIO_Init+0x1fa>
 8004e30:	2303      	movs	r3, #3
 8004e32:	e004      	b.n	8004e3e <HAL_GPIO_Init+0x1fa>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e002      	b.n	8004e3e <HAL_GPIO_Init+0x1fa>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_GPIO_Init+0x1fa>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	f002 0203 	and.w	r2, r2, #3
 8004e44:	0092      	lsls	r2, r2, #2
 8004e46:	4093      	lsls	r3, r2
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4e:	4937      	ldr	r1, [pc, #220]	; (8004f2c <HAL_GPIO_Init+0x2e8>)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e5c:	4b39      	ldr	r3, [pc, #228]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e80:	4a30      	ldr	r2, [pc, #192]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e86:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4013      	ands	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004eaa:	4a26      	ldr	r2, [pc, #152]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eda:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004efe:	4a11      	ldr	r2, [pc, #68]	; (8004f44 <HAL_GPIO_Init+0x300>)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	3301      	adds	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f ae9d 	bne.w	8004c54 <HAL_GPIO_Init+0x10>
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	48000400 	.word	0x48000400
 8004f34:	48000800 	.word	0x48000800
 8004f38:	48000c00 	.word	0x48000c00
 8004f3c:	48001000 	.word	0x48001000
 8004f40:	48001400 	.word	0x48001400
 8004f44:	40010400 	.word	0x40010400

08004f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
 8004f54:	4613      	mov	r3, r2
 8004f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f58:	787b      	ldrb	r3, [r7, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f64:	e002      	b.n	8004f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f66:	887a      	ldrh	r2, [r7, #2]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e08d      	b.n	80050a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc fab0 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d107      	bne.n	8004ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	e006      	b.n	8005000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d108      	bne.n	800501a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	e007      	b.n	800502a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005028:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800504c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69d9      	ldr	r1, [r3, #28]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d138      	bne.n	8005136 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e032      	b.n	8005138 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2224      	movs	r2, #36	; 0x24
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005100:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6819      	ldr	r1, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	e000      	b.n	8005138 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b20      	cmp	r3, #32
 8005158:	d139      	bne.n	80051ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005164:	2302      	movs	r3, #2
 8005166:	e033      	b.n	80051d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2224      	movs	r2, #36	; 0x24
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005196:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0c0      	b.n	8005370 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f009 fc74 	bl	800eaf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2203      	movs	r2, #3
 800520c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f005 fabc 	bl	800a792 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
 800521e:	e03e      	b.n	800529e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005220:	7bfa      	ldrb	r2, [r7, #15]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	440b      	add	r3, r1
 800522e:	3311      	adds	r3, #17
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	440b      	add	r3, r1
 8005242:	3310      	adds	r3, #16
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	440b      	add	r3, r1
 8005256:	3313      	adds	r3, #19
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	3320      	adds	r3, #32
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	3324      	adds	r3, #36	; 0x24
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	440b      	add	r3, r1
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	3301      	adds	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	791b      	ldrb	r3, [r3, #4]
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d3bb      	bcc.n	8005220 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	e044      	b.n	8005338 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052ae:	7bfa      	ldrb	r2, [r7, #15]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	440b      	add	r3, r1
 80052bc:	f203 1351 	addw	r3, r3, #337	; 0x151
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	440b      	add	r3, r1
 8005314:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800531c:	7bfa      	ldrb	r2, [r7, #15]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	440b      	add	r3, r1
 800532a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	3301      	adds	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	791b      	ldrb	r3, [r3, #4]
 800533c:	7bfa      	ldrb	r2, [r7, #15]
 800533e:	429a      	cmp	r2, r3
 8005340:	d3b5      	bcc.n	80052ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800534e:	f005 fa3b 	bl	800a7c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7a9b      	ldrb	r3, [r3, #10]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d102      	bne.n	800536e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fc41 	bl	8006bf0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_PCD_Start+0x16>
 800538a:	2302      	movs	r3, #2
 800538c:	e012      	b.n	80053b4 <HAL_PCD_Start+0x3c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f005 f9e2 	bl	800a764 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f007 fca2 	bl	800ccee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f007 fca7 	bl	800cd1c <USB_ReadInterrupts>
 80053ce:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fb04 	bl	80059e8 <PCD_EP_ISR_Handler>

    return;
 80053e0:	e110      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d013      	beq.n	8005414 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	b292      	uxth	r2, r2
 8005400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f009 fc04 	bl	800ec12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800540a:	2100      	movs	r1, #0
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8fc 	bl	800560a <HAL_PCD_SetAddress>

    return;
 8005412:	e0f7      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005426:	b29a      	uxth	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005430:	b292      	uxth	r2, r2
 8005432:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005436:	e0e5      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005454:	b292      	uxth	r2, r2
 8005456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800545a:	e0d3      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d034      	beq.n	80054d0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0204 	bic.w	r2, r2, #4
 8005478:	b292      	uxth	r2, r2
 800547a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0208 	bic.w	r2, r2, #8
 8005490:	b292      	uxth	r2, r2
 8005492:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054a8:	2100      	movs	r1, #0
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f009 fda4 	bl	800eff8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f009 fbe7 	bl	800ec84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054c8:	b292      	uxth	r2, r2
 80054ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80054ce:	e099      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d027      	beq.n	800552a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0208 	orr.w	r2, r2, #8
 80054ec:	b292      	uxth	r2, r2
 80054ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005504:	b292      	uxth	r2, r2
 8005506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0204 	orr.w	r2, r2, #4
 800551c:	b292      	uxth	r2, r2
 800551e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f009 fb94 	bl	800ec50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005528:	e06c      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	d040      	beq.n	80055b6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005546:	b292      	uxth	r2, r2
 8005548:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d12b      	bne.n	80055ae <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0204 	orr.w	r2, r2, #4
 8005568:	b292      	uxth	r2, r2
 800556a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0208 	orr.w	r2, r2, #8
 8005580:	b292      	uxth	r2, r2
 8005582:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005596:	b29b      	uxth	r3, r3
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80055a4:	2101      	movs	r1, #1
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f009 fd26 	bl	800eff8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80055ac:	e02a      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f009 fb4e 	bl	800ec50 <HAL_PCD_SuspendCallback>
    return;
 80055b4:	e026      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055d2:	b292      	uxth	r2, r2
 80055d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f009 fb0c 	bl	800ebf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80055de:	e011      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055fc:	b292      	uxth	r2, r2
 80055fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005602:	bf00      	nop
  }
}
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_PCD_SetAddress+0x1a>
 8005620:	2302      	movs	r3, #2
 8005622:	e012      	b.n	800564a <HAL_PCD_SetAddress+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f007 fb43 	bl	800ccc6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	4608      	mov	r0, r1
 800565c:	4611      	mov	r1, r2
 800565e:	461a      	mov	r2, r3
 8005660:	4603      	mov	r3, r0
 8005662:	70fb      	strb	r3, [r7, #3]
 8005664:	460b      	mov	r3, r1
 8005666:	803b      	strh	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	da0e      	bge.n	8005696 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	f003 0207 	and.w	r2, r3, #7
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	3310      	adds	r3, #16
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4413      	add	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	705a      	strb	r2, [r3, #1]
 8005694:	e00e      	b.n	80056b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	f003 0207 	and.w	r2, r3, #7
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056c0:	883a      	ldrh	r2, [r7, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	78ba      	ldrb	r2, [r7, #2]
 80056ca:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056cc:	78bb      	ldrb	r3, [r7, #2]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d102      	bne.n	80056d8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_PCD_EP_Open+0x94>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e00e      	b.n	8005704 <HAL_PCD_EP_Open+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f005 f885 	bl	800a804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8005702:	7afb      	ldrb	r3, [r7, #11]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800571c:	2b00      	cmp	r3, #0
 800571e:	da0e      	bge.n	800573e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	f003 0207 	and.w	r2, r3, #7
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	3310      	adds	r3, #16
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	705a      	strb	r2, [r3, #1]
 800573c:	e00e      	b.n	800575c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f003 0207 	and.w	r2, r3, #7
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_PCD_EP_Close+0x6a>
 8005772:	2302      	movs	r3, #2
 8005774:	e00e      	b.n	8005794 <HAL_PCD_EP_Close+0x88>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	4618      	mov	r0, r3
 8005786:	f005 fc01 	bl	800af8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	460b      	mov	r3, r1
 80057aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ac:	7afb      	ldrb	r3, [r7, #11]
 80057ae:	f003 0207 	and.w	r2, r3, #7
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2200      	movs	r2, #0
 80057d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2200      	movs	r2, #0
 80057da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6979      	ldr	r1, [r7, #20]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f005 fdb9 	bl	800b366 <USB_EPStartXfer>

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	f003 0207 	and.w	r2, r3, #7
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	440b      	add	r3, r1
 800581c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005820:	681b      	ldr	r3, [r3, #0]
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	460b      	mov	r3, r1
 800583c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	f003 0207 	and.w	r2, r3, #7
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	3310      	adds	r3, #16
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2200      	movs	r2, #0
 8005872:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2201      	movs	r2, #1
 8005878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	b2da      	uxtb	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6979      	ldr	r1, [r7, #20]
 800588c:	4618      	mov	r0, r3
 800588e:	f005 fd6a 	bl	800b366 <USB_EPStartXfer>

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	7912      	ldrb	r2, [r2, #4]
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e03e      	b.n	8005938 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da0e      	bge.n	80058e0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	f003 0207 	and.w	r2, r3, #7
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	3310      	adds	r3, #16
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	705a      	strb	r2, [r3, #1]
 80058de:	e00c      	b.n	80058fa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_PCD_EP_SetStall+0x7e>
 8005916:	2302      	movs	r3, #2
 8005918:	e00e      	b.n	8005938 <HAL_PCD_EP_SetStall+0x9c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	4618      	mov	r0, r3
 800592a:	f007 f8cd 	bl	800cac8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	7912      	ldrb	r2, [r2, #4]
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e040      	b.n	80059e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800595e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da0e      	bge.n	8005984 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	f003 0207 	and.w	r2, r3, #7
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	3310      	adds	r3, #16
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	705a      	strb	r2, [r3, #1]
 8005982:	e00e      	b.n	80059a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 0207 	and.w	r2, r3, #7
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_PCD_EP_ClrStall+0x82>
 80059be:	2302      	movs	r3, #2
 80059c0:	e00e      	b.n	80059e0 <HAL_PCD_EP_ClrStall+0xa0>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f007 f8ca 	bl	800cb6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b096      	sub	sp, #88	; 0x58
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059f0:	e3ae      	b.n	8006150 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80059fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005a0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f040 8170 	bne.w	8005cf6 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d14d      	bne.n	8005abe <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	81fb      	strh	r3, [r7, #14]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	89fb      	ldrh	r3, [r7, #14]
 8005a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3310      	adds	r3, #16
 8005a4a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	441a      	add	r2, r3
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a80:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a82:	2100      	movs	r1, #0
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f009 f89c 	bl	800ebc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7b1b      	ldrb	r3, [r3, #12]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 835d 	beq.w	8006150 <PCD_EP_ISR_Handler+0x768>
 8005a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 8358 	bne.w	8006150 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7b1b      	ldrb	r3, [r3, #12]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	b292      	uxth	r2, r2
 8005ab2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	731a      	strb	r2, [r3, #12]
 8005abc:	e348      	b.n	8006150 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ac4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ad0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d032      	beq.n	8005b42 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b02:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b10:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b14:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f007 f952 	bl	800cdc0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b28:	4013      	ands	r3, r2
 8005b2a:	823b      	strh	r3, [r7, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	8a3a      	ldrh	r2, [r7, #16]
 8005b32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b36:	b292      	uxth	r2, r2
 8005b38:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f009 f814 	bl	800eb68 <HAL_PCD_SetupStageCallback>
 8005b40:	e306      	b.n	8006150 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b42:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f280 8302 	bge.w	8006150 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b58:	4013      	ands	r3, r2
 8005b5a:	83fb      	strh	r3, [r7, #30]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	8bfa      	ldrh	r2, [r7, #30]
 8005b62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b66:	b292      	uxth	r2, r2
 8005b68:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d019      	beq.n	8005bce <PCD_EP_ISR_Handler+0x1e6>
 8005b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d015      	beq.n	8005bce <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba8:	6959      	ldr	r1, [r3, #20]
 8005baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f007 f904 	bl	800cdc0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f008 ffdf 	bl	800eb8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005bd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 82b5 	bne.w	8006150 <PCD_EP_ISR_Handler+0x768>
 8005be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf2:	f000 82ad 	beq.w	8006150 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2c:	d91d      	bls.n	8005c6a <PCD_EP_ISR_Handler+0x282>
 8005c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
 8005c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <PCD_EP_ISR_Handler+0x260>
 8005c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c44:	3b01      	subs	r3, #1
 8005c46:	647b      	str	r3, [r7, #68]	; 0x44
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	029b      	lsls	r3, r3, #10
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4313      	orrs	r3, r2
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e026      	b.n	8005cb8 <PCD_EP_ISR_Handler+0x2d0>
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <PCD_EP_ISR_Handler+0x2a0>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e017      	b.n	8005cb8 <PCD_EP_ISR_Handler+0x2d0>
 8005c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <PCD_EP_ISR_Handler+0x2ba>
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	827b      	strh	r3, [r7, #18]
 8005cca:	8a7b      	ldrh	r3, [r7, #18]
 8005ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cd0:	827b      	strh	r3, [r7, #18]
 8005cd2:	8a7b      	ldrh	r3, [r7, #18]
 8005cd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cd8:	827b      	strh	r3, [r7, #18]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	8a7b      	ldrh	r3, [r7, #18]
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
 8005cf4:	e22c      	b.n	8006150 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d0a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f280 80f6 	bge.w	8005f00 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d46:	b292      	uxth	r2, r2
 8005d48:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d4a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d62:	7b1b      	ldrb	r3, [r3, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d123      	bne.n	8005db0 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d8c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005d90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 808e 	beq.w	8005eb6 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da0:	6959      	ldr	r1, [r3, #20]
 8005da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da4:	88da      	ldrh	r2, [r3, #6]
 8005da6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005daa:	f007 f809 	bl	800cdc0 <USB_ReadPMA>
 8005dae:	e082      	b.n	8005eb6 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d10a      	bne.n	8005dce <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005db8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9d3 	bl	800616c <HAL_PCD_EP_DB_Receive>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005dcc:	e073      	b.n	8005eb6 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d022      	beq.n	8005e72 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4413      	add	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e50:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d02c      	beq.n	8005eb6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e62:	6959      	ldr	r1, [r3, #20]
 8005e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e66:	891a      	ldrh	r2, [r3, #8]
 8005e68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e6c:	f006 ffa8 	bl	800cdc0 <USB_ReadPMA>
 8005e70:	e021      	b.n	8005eb6 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4413      	add	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eac:	895a      	ldrh	r2, [r3, #10]
 8005eae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005eb2:	f006 ff85 	bl	800cdc0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb8:	69da      	ldr	r2, [r3, #28]
 8005eba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ebe:	441a      	add	r2, r3
 8005ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ecc:	441a      	add	r2, r3
 8005ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <PCD_EP_ISR_Handler+0x4fe>
 8005eda:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d206      	bcs.n	8005ef4 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f008 fe4d 	bl	800eb8c <HAL_PCD_DataOutStageCallback>
 8005ef2:	e005      	b.n	8005f00 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005efa:	4618      	mov	r0, r3
 8005efc:	f005 fa33 	bl	800b366 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005f00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8121 	beq.w	8006150 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8005f0e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	3310      	adds	r3, #16
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	4413      	add	r3, r2
 8005f20:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f60:	78db      	ldrb	r3, [r3, #3]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	f040 80a2 	bne.w	80060ac <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8005f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f70:	7b1b      	ldrb	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8093 	beq.w	800609e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d046      	beq.n	8006012 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d126      	bne.n	8005fda <PCD_EP_ISR_Handler+0x5f2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	4413      	add	r3, r2
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	00da      	lsls	r2, r3, #3
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	e061      	b.n	800609e <PCD_EP_ISR_Handler+0x6b6>
 8005fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d15d      	bne.n	800609e <PCD_EP_ISR_Handler+0x6b6>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	4413      	add	r3, r2
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	00da      	lsls	r2, r3, #3
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	4413      	add	r3, r2
 8006004:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2200      	movs	r2, #0
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	e045      	b.n	800609e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d126      	bne.n	800606e <PCD_EP_ISR_Handler+0x686>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	4413      	add	r3, r2
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
 8006038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	00da      	lsls	r2, r3, #3
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	4413      	add	r3, r2
 8006042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006052:	b29a      	uxth	r2, r3
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006066:	b29a      	uxth	r2, r3
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	e017      	b.n	800609e <PCD_EP_ISR_Handler+0x6b6>
 800606e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d113      	bne.n	800609e <PCD_EP_ISR_Handler+0x6b6>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800607e:	b29b      	uxth	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	4413      	add	r3, r2
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	00da      	lsls	r2, r3, #3
 800608e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006090:	4413      	add	r3, r2
 8006092:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	2200      	movs	r2, #0
 800609c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800609e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f008 fd8c 	bl	800ebc2 <HAL_PCD_DataInStageCallback>
 80060aa:	e051      	b.n	8006150 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80060ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d144      	bne.n	8006142 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80060e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d907      	bls.n	80060fc <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80060ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060f4:	1ad2      	subs	r2, r2, r3
 80060f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f8:	619a      	str	r2, [r3, #24]
 80060fa:	e002      	b.n	8006102 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80060fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060fe:	2200      	movs	r2, #0
 8006100:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800610a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f008 fd56 	bl	800ebc2 <HAL_PCD_DataInStageCallback>
 8006116:	e01b      	b.n	8006150 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006120:	441a      	add	r2, r3
 8006122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006124:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006128:	69da      	ldr	r2, [r3, #28]
 800612a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800612e:	441a      	add	r2, r3
 8006130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006132:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800613a:	4618      	mov	r0, r3
 800613c:	f005 f913 	bl	800b366 <USB_EPStartXfer>
 8006140:	e006      	b.n	8006150 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006146:	461a      	mov	r2, r3
 8006148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f917 	bl	800637e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006158:	b29b      	uxth	r3, r3
 800615a:	b21b      	sxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	f6ff ac48 	blt.w	80059f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3758      	adds	r7, #88	; 0x58
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d07c      	beq.n	800627e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	4413      	add	r3, r2
 800619e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	8b7b      	ldrh	r3, [r7, #26]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d306      	bcc.n	80061c2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	8b7b      	ldrh	r3, [r7, #26]
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	619a      	str	r2, [r3, #24]
 80061c0:	e002      	b.n	80061c8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d123      	bne.n	8006218 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ea:	833b      	strh	r3, [r7, #24]
 80061ec:	8b3b      	ldrh	r3, [r7, #24]
 80061ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061f2:	833b      	strh	r3, [r7, #24]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	441a      	add	r2, r3
 8006202:	8b3b      	ldrh	r3, [r7, #24]
 8006204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800620c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006214:	b29b      	uxth	r3, r3
 8006216:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01f      	beq.n	8006262 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623c:	82fb      	strh	r3, [r7, #22]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	8afb      	ldrh	r3, [r7, #22]
 800624e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800625e:	b29b      	uxth	r3, r3
 8006260:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006262:	8b7b      	ldrh	r3, [r7, #26]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8085 	beq.w	8006374 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6959      	ldr	r1, [r3, #20]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	891a      	ldrh	r2, [r3, #8]
 8006276:	8b7b      	ldrh	r3, [r7, #26]
 8006278:	f006 fda2 	bl	800cdc0 <USB_ReadPMA>
 800627c:	e07a      	b.n	8006374 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006286:	b29b      	uxth	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4413      	add	r3, r2
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	4413      	add	r3, r2
 8006298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	8b7b      	ldrh	r3, [r7, #26]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d306      	bcc.n	80062bc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	8b7b      	ldrh	r3, [r7, #26]
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	619a      	str	r2, [r3, #24]
 80062ba:	e002      	b.n	80062c2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2200      	movs	r2, #0
 80062c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d123      	bne.n	8006312 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e4:	83fb      	strh	r3, [r7, #30]
 80062e6:	8bfb      	ldrh	r3, [r7, #30]
 80062e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062ec:	83fb      	strh	r3, [r7, #30]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	441a      	add	r2, r3
 80062fc:	8bfb      	ldrh	r3, [r7, #30]
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11f      	bne.n	800635c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	83bb      	strh	r3, [r7, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	8bbb      	ldrh	r3, [r7, #28]
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006354:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800635c:	8b7b      	ldrh	r3, [r7, #26]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6959      	ldr	r1, [r3, #20]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	895a      	ldrh	r2, [r3, #10]
 800636e:	8b7b      	ldrh	r3, [r7, #26]
 8006370:	f006 fd26 	bl	800cdc0 <USB_ReadPMA>
    }
  }

  return count;
 8006374:	8b7b      	ldrh	r3, [r7, #26]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b0a4      	sub	sp, #144	; 0x90
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	4613      	mov	r3, r2
 800638a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 81db 	beq.w	800674e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4413      	add	r3, r2
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	4413      	add	r3, r2
 80063b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063bc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d907      	bls.n	80063dc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	619a      	str	r2, [r3, #24]
 80063da:	e002      	b.n	80063e2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2200      	movs	r2, #0
 80063e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f040 80b9 	bne.w	800655e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d126      	bne.n	8006442 <HAL_PCD_EP_DB_Transmit+0xc4>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006402:	b29b      	uxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	4413      	add	r3, r2
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	00da      	lsls	r2, r3, #3
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	4413      	add	r3, r2
 8006416:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006426:	b29a      	uxth	r2, r3
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643a:	b29a      	uxth	r2, r3
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e01a      	b.n	8006478 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d116      	bne.n	8006478 <HAL_PCD_EP_DB_Transmit+0xfa>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006458:	b29b      	uxth	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	4413      	add	r3, r2
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	00da      	lsls	r2, r3, #3
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	4413      	add	r3, r2
 800646c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006470:	633b      	str	r3, [r7, #48]	; 0x30
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2200      	movs	r2, #0
 8006476:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d126      	bne.n	80064d4 <HAL_PCD_EP_DB_Transmit+0x156>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006494:	b29b      	uxth	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	00da      	lsls	r2, r3, #3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e017      	b.n	8006504 <HAL_PCD_EP_DB_Transmit+0x186>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d113      	bne.n	8006504 <HAL_PCD_EP_DB_Transmit+0x186>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	4413      	add	r3, r2
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	00da      	lsls	r2, r3, #3
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	4413      	add	r3, r2
 80064f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064fc:	623b      	str	r3, [r7, #32]
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	2200      	movs	r2, #0
 8006502:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	4619      	mov	r1, r3
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f008 fb59 	bl	800ebc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 82fa 	beq.w	8006b10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	82fb      	strh	r3, [r7, #22]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	8afb      	ldrh	r3, [r7, #22]
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]
 800655c:	e2d8      	b.n	8006b10 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d021      	beq.n	80065ac <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	f040 82ac 	bne.w	8006b10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065c0:	441a      	add	r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065ce:	441a      	add	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6a1a      	ldr	r2, [r3, #32]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d30b      	bcc.n	80065f8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6a1a      	ldr	r2, [r3, #32]
 80065ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065f0:	1ad2      	subs	r2, r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	621a      	str	r2, [r3, #32]
 80065f6:	e017      	b.n	8006628 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006600:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006604:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006610:	e00a      	b.n	8006628 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2200      	movs	r2, #0
 8006626:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d165      	bne.n	80066fc <HAL_PCD_EP_DB_Transmit+0x37e>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	4413      	add	r3, r2
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	00da      	lsls	r2, r3, #3
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	4413      	add	r3, r2
 8006652:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006656:	63bb      	str	r3, [r7, #56]	; 0x38
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006662:	b29a      	uxth	r2, r3
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800666c:	2b3e      	cmp	r3, #62	; 0x3e
 800666e:	d91d      	bls.n	80066ac <HAL_PCD_EP_DB_Transmit+0x32e>
 8006670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	64bb      	str	r3, [r7, #72]	; 0x48
 8006678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800667c:	f003 031f 	and.w	r3, r3, #31
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <HAL_PCD_EP_DB_Transmit+0x30c>
 8006684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006686:	3b01      	subs	r3, #1
 8006688:	64bb      	str	r3, [r7, #72]	; 0x48
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29a      	uxth	r2, r3
 8006690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006692:	b29b      	uxth	r3, r3
 8006694:	029b      	lsls	r3, r3, #10
 8006696:	b29b      	uxth	r3, r3
 8006698:	4313      	orrs	r3, r2
 800669a:	b29b      	uxth	r3, r3
 800669c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e044      	b.n	8006736 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_PCD_EP_DB_Transmit+0x34c>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e035      	b.n	8006736 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_PCD_EP_DB_Transmit+0x366>
 80066de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e0:	3301      	adds	r3, #1
 80066e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	029b      	lsls	r3, r3, #10
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e01c      	b.n	8006736 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d118      	bne.n	8006736 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	647b      	str	r3, [r7, #68]	; 0x44
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006718:	4413      	add	r3, r2
 800671a:	647b      	str	r3, [r7, #68]	; 0x44
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	00da      	lsls	r2, r3, #3
 8006722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006724:	4413      	add	r3, r2
 8006726:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800672a:	643b      	str	r3, [r7, #64]	; 0x40
 800672c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006730:	b29a      	uxth	r2, r3
 8006732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006734:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6959      	ldr	r1, [r3, #20]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	891a      	ldrh	r2, [r3, #8]
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006746:	b29b      	uxth	r3, r3
 8006748:	f006 faf8 	bl	800cd3c <USB_WritePMA>
 800674c:	e1e0      	b.n	8006b10 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4413      	add	r3, r2
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	4413      	add	r3, r2
 8006768:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006772:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800677e:	429a      	cmp	r2, r3
 8006780:	d307      	bcc.n	8006792 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800678a:	1ad2      	subs	r2, r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	619a      	str	r2, [r3, #24]
 8006790:	e002      	b.n	8006798 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2200      	movs	r2, #0
 8006796:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f040 80c0 	bne.w	8006922 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d126      	bne.n	80067f8 <HAL_PCD_EP_DB_Transmit+0x47a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067be:	4413      	add	r3, r2
 80067c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	00da      	lsls	r2, r3, #3
 80067c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e01a      	b.n	800682e <HAL_PCD_EP_DB_Transmit+0x4b0>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d116      	bne.n	800682e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	667b      	str	r3, [r7, #100]	; 0x64
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006814:	4413      	add	r3, r2
 8006816:	667b      	str	r3, [r7, #100]	; 0x64
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	00da      	lsls	r2, r3, #3
 800681e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006820:	4413      	add	r3, r2
 8006822:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006826:	663b      	str	r3, [r7, #96]	; 0x60
 8006828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800682a:	2200      	movs	r2, #0
 800682c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	677b      	str	r3, [r7, #116]	; 0x74
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d12b      	bne.n	8006894 <HAL_PCD_EP_DB_Transmit+0x516>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	4413      	add	r3, r2
 8006852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	00da      	lsls	r2, r3, #3
 800685a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800685c:	4413      	add	r3, r2
 800685e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688a:	b29a      	uxth	r2, r3
 800688c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	e017      	b.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x546>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d113      	bne.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x546>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068aa:	4413      	add	r3, r2
 80068ac:	677b      	str	r3, [r7, #116]	; 0x74
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	00da      	lsls	r2, r3, #3
 80068b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b6:	4413      	add	r3, r2
 80068b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068bc:	673b      	str	r3, [r7, #112]	; 0x70
 80068be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068c0:	2200      	movs	r2, #0
 80068c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	4619      	mov	r1, r3
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f008 f979 	bl	800ebc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f040 811a 	bne.w	8006b10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800690c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	b29b      	uxth	r3, r3
 800691e:	8013      	strh	r3, [r2, #0]
 8006920:	e0f6      	b.n	8006b10 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d121      	bne.n	8006970 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006946:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800695c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006976:	2b01      	cmp	r3, #1
 8006978:	f040 80ca 	bne.w	8006b10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	695a      	ldr	r2, [r3, #20]
 8006980:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006984:	441a      	add	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006992:	441a      	add	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d30b      	bcc.n	80069bc <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069b4:	1ad2      	subs	r2, r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	621a      	str	r2, [r3, #32]
 80069ba:	e017      	b.n	80069ec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80069c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069d4:	e00a      	b.n	80069ec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2200      	movs	r2, #0
 80069e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	657b      	str	r3, [r7, #84]	; 0x54
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d165      	bne.n	8006ac6 <HAL_PCD_EP_DB_Transmit+0x748>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a0e:	4413      	add	r3, r2
 8006a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	00da      	lsls	r2, r3, #3
 8006a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a36:	2b3e      	cmp	r3, #62	; 0x3e
 8006a38:	d91d      	bls.n	8006a76 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a50:	3b01      	subs	r3, #1
 8006a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	029b      	lsls	r3, r3, #10
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4313      	orrs	r3, r2
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e041      	b.n	8006afa <HAL_PCD_EP_DB_Transmit+0x77c>
 8006a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <HAL_PCD_EP_DB_Transmit+0x716>
 8006a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e032      	b.n	8006afa <HAL_PCD_EP_DB_Transmit+0x77c>
 8006a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <HAL_PCD_EP_DB_Transmit+0x730>
 8006aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aaa:	3301      	adds	r3, #1
 8006aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	029b      	lsls	r3, r3, #10
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4313      	orrs	r3, r2
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	e019      	b.n	8006afa <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d115      	bne.n	8006afa <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006adc:	4413      	add	r3, r2
 8006ade:	657b      	str	r3, [r7, #84]	; 0x54
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aee:	653b      	str	r3, [r7, #80]	; 0x50
 8006af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6959      	ldr	r1, [r3, #20]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	895a      	ldrh	r2, [r3, #10]
 8006b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f006 f916 	bl	800cd3c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2a:	82bb      	strh	r3, [r7, #20]
 8006b2c:	8abb      	ldrh	r3, [r7, #20]
 8006b2e:	f083 0310 	eor.w	r3, r3, #16
 8006b32:	82bb      	strh	r3, [r7, #20]
 8006b34:	8abb      	ldrh	r3, [r7, #20]
 8006b36:	f083 0320 	eor.w	r3, r3, #32
 8006b3a:	82bb      	strh	r3, [r7, #20]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	8abb      	ldrh	r3, [r7, #20]
 8006b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3790      	adds	r7, #144	; 0x90
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b087      	sub	sp, #28
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	607b      	str	r3, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	817b      	strh	r3, [r7, #10]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b7c:	897b      	ldrh	r3, [r7, #10]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b88:	897b      	ldrh	r3, [r7, #10]
 8006b8a:	f003 0207 	and.w	r2, r3, #7
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	3310      	adds	r3, #16
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e009      	b.n	8006bb4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ba0:	897a      	ldrh	r2, [r7, #10]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006bb4:	893b      	ldrh	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	80da      	strh	r2, [r3, #6]
 8006bc8:	e00b      	b.n	8006be2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f043 0302 	orr.w	r3, r3, #2
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d141      	bne.n	8006cd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c52:	4b4b      	ldr	r3, [pc, #300]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c5e:	d131      	bne.n	8006cc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c60:	4b47      	ldr	r3, [pc, #284]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c66:	4a46      	ldr	r2, [pc, #280]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c70:	4b43      	ldr	r3, [pc, #268]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c78:	4a41      	ldr	r2, [pc, #260]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c80:	4b40      	ldr	r3, [pc, #256]	; (8006d84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2232      	movs	r2, #50	; 0x32
 8006c86:	fb02 f303 	mul.w	r3, r2, r3
 8006c8a:	4a3f      	ldr	r2, [pc, #252]	; (8006d88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c90:	0c9b      	lsrs	r3, r3, #18
 8006c92:	3301      	adds	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c96:	e002      	b.n	8006c9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c9e:	4b38      	ldr	r3, [pc, #224]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d102      	bne.n	8006cb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f2      	bne.n	8006c98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cb2:	4b33      	ldr	r3, [pc, #204]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbe:	d158      	bne.n	8006d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e057      	b.n	8006d74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cc4:	4b2e      	ldr	r3, [pc, #184]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cca:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006cd4:	e04d      	b.n	8006d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cdc:	d141      	bne.n	8006d62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cde:	4b28      	ldr	r3, [pc, #160]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cea:	d131      	bne.n	8006d50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cec:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf2:	4a23      	ldr	r2, [pc, #140]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cfc:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d04:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2232      	movs	r2, #50	; 0x32
 8006d12:	fb02 f303 	mul.w	r3, r2, r3
 8006d16:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	0c9b      	lsrs	r3, r3, #18
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d22:	e002      	b.n	8006d2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d2a:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d36:	d102      	bne.n	8006d3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f2      	bne.n	8006d24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d3e:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4a:	d112      	bne.n	8006d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e011      	b.n	8006d74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d56:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006d60:	e007      	b.n	8006d72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d62:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d6a:	4a05      	ldr	r2, [pc, #20]	; (8006d80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	40007000 	.word	0x40007000
 8006d84:	20000000 	.word	0x20000000
 8006d88:	431bde83 	.word	0x431bde83

08006d8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d9a:	6093      	str	r3, [r2, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40007000 	.word	0x40007000

08006dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e2fe      	b.n	80073bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d075      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dca:	4b97      	ldr	r3, [pc, #604]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 030c 	and.w	r3, r3, #12
 8006dd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dd4:	4b94      	ldr	r3, [pc, #592]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	d102      	bne.n	8006dea <HAL_RCC_OscConfig+0x3e>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d002      	beq.n	8006df0 <HAL_RCC_OscConfig+0x44>
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d10b      	bne.n	8006e08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df0:	4b8d      	ldr	r3, [pc, #564]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d05b      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x108>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d157      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e2d9      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e10:	d106      	bne.n	8006e20 <HAL_RCC_OscConfig+0x74>
 8006e12:	4b85      	ldr	r3, [pc, #532]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a84      	ldr	r2, [pc, #528]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e01d      	b.n	8006e5c <HAL_RCC_OscConfig+0xb0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x98>
 8006e2a:	4b7f      	ldr	r3, [pc, #508]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a7e      	ldr	r2, [pc, #504]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	4b7c      	ldr	r3, [pc, #496]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7b      	ldr	r2, [pc, #492]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	e00b      	b.n	8006e5c <HAL_RCC_OscConfig+0xb0>
 8006e44:	4b78      	ldr	r3, [pc, #480]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a77      	ldr	r2, [pc, #476]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4b75      	ldr	r3, [pc, #468]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a74      	ldr	r2, [pc, #464]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fb fdbc 	bl	80029e0 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e6c:	f7fb fdb8 	bl	80029e0 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b64      	cmp	r3, #100	; 0x64
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e29e      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e7e:	4b6a      	ldr	r3, [pc, #424]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0xc0>
 8006e8a:	e014      	b.n	8006eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fb fda8 	bl	80029e0 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e94:	f7fb fda4 	bl	80029e0 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b64      	cmp	r3, #100	; 0x64
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e28a      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ea6:	4b60      	ldr	r3, [pc, #384]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0xe8>
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d075      	beq.n	8006fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ec2:	4b59      	ldr	r3, [pc, #356]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ecc:	4b56      	ldr	r3, [pc, #344]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	d102      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x136>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d002      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x13c>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d11f      	bne.n	8006f28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ee8:	4b4f      	ldr	r3, [pc, #316]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_RCC_OscConfig+0x154>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e25d      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f00:	4b49      	ldr	r3, [pc, #292]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	4946      	ldr	r1, [pc, #280]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f14:	4b45      	ldr	r3, [pc, #276]	; (800702c <HAL_RCC_OscConfig+0x280>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fb fd15 	bl	8002948 <HAL_InitTick>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d043      	beq.n	8006fac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e249      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d023      	beq.n	8006f78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f30:	4b3d      	ldr	r3, [pc, #244]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a3c      	ldr	r2, [pc, #240]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3c:	f7fb fd50 	bl	80029e0 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f44:	f7fb fd4c 	bl	80029e0 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e232      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f56:	4b34      	ldr	r3, [pc, #208]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f62:	4b31      	ldr	r3, [pc, #196]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	492d      	ldr	r1, [pc, #180]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	604b      	str	r3, [r1, #4]
 8006f76:	e01a      	b.n	8006fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f78:	4b2b      	ldr	r3, [pc, #172]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fb fd2c 	bl	80029e0 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f8c:	f7fb fd28 	bl	80029e0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e20e      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f9e:	4b22      	ldr	r3, [pc, #136]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x1e0>
 8006faa:	e000      	b.n	8006fae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d041      	beq.n	800703e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01c      	beq.n	8006ffc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fc2:	4b19      	ldr	r3, [pc, #100]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc8:	4a17      	ldr	r2, [pc, #92]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd2:	f7fb fd05 	bl	80029e0 <HAL_GetTick>
 8006fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fda:	f7fb fd01 	bl	80029e0 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e1e7      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fec:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0ef      	beq.n	8006fda <HAL_RCC_OscConfig+0x22e>
 8006ffa:	e020      	b.n	800703e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007002:	4a09      	ldr	r2, [pc, #36]	; (8007028 <HAL_RCC_OscConfig+0x27c>)
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700c:	f7fb fce8 	bl	80029e0 <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007012:	e00d      	b.n	8007030 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007014:	f7fb fce4 	bl	80029e0 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d906      	bls.n	8007030 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e1ca      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
 8007026:	bf00      	nop
 8007028:	40021000 	.word	0x40021000
 800702c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007030:	4b8c      	ldr	r3, [pc, #560]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1ea      	bne.n	8007014 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80a6 	beq.w	8007198 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800704c:	2300      	movs	r3, #0
 800704e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007050:	4b84      	ldr	r3, [pc, #528]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_RCC_OscConfig+0x2b4>
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <HAL_RCC_OscConfig+0x2b6>
 8007060:	2300      	movs	r3, #0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007066:	4b7f      	ldr	r3, [pc, #508]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	4a7e      	ldr	r2, [pc, #504]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 800706c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007070:	6593      	str	r3, [r2, #88]	; 0x58
 8007072:	4b7c      	ldr	r3, [pc, #496]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800707e:	2301      	movs	r3, #1
 8007080:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007082:	4b79      	ldr	r3, [pc, #484]	; (8007268 <HAL_RCC_OscConfig+0x4bc>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d118      	bne.n	80070c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800708e:	4b76      	ldr	r3, [pc, #472]	; (8007268 <HAL_RCC_OscConfig+0x4bc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a75      	ldr	r2, [pc, #468]	; (8007268 <HAL_RCC_OscConfig+0x4bc>)
 8007094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800709a:	f7fb fca1 	bl	80029e0 <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070a2:	f7fb fc9d 	bl	80029e0 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e183      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070b4:	4b6c      	ldr	r3, [pc, #432]	; (8007268 <HAL_RCC_OscConfig+0x4bc>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0f0      	beq.n	80070a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d108      	bne.n	80070da <HAL_RCC_OscConfig+0x32e>
 80070c8:	4b66      	ldr	r3, [pc, #408]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80070ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ce:	4a65      	ldr	r2, [pc, #404]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d8:	e024      	b.n	8007124 <HAL_RCC_OscConfig+0x378>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b05      	cmp	r3, #5
 80070e0:	d110      	bne.n	8007104 <HAL_RCC_OscConfig+0x358>
 80070e2:	4b60      	ldr	r3, [pc, #384]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	4a5e      	ldr	r2, [pc, #376]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80070ea:	f043 0304 	orr.w	r3, r3, #4
 80070ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070f2:	4b5c      	ldr	r3, [pc, #368]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f8:	4a5a      	ldr	r2, [pc, #360]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007102:	e00f      	b.n	8007124 <HAL_RCC_OscConfig+0x378>
 8007104:	4b57      	ldr	r3, [pc, #348]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710a:	4a56      	ldr	r2, [pc, #344]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007114:	4b53      	ldr	r3, [pc, #332]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711a:	4a52      	ldr	r2, [pc, #328]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 800711c:	f023 0304 	bic.w	r3, r3, #4
 8007120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d016      	beq.n	800715a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712c:	f7fb fc58 	bl	80029e0 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007132:	e00a      	b.n	800714a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007134:	f7fb fc54 	bl	80029e0 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e138      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800714a:	4b46      	ldr	r3, [pc, #280]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 800714c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0ed      	beq.n	8007134 <HAL_RCC_OscConfig+0x388>
 8007158:	e015      	b.n	8007186 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715a:	f7fb fc41 	bl	80029e0 <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007160:	e00a      	b.n	8007178 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007162:	f7fb fc3d 	bl	80029e0 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e121      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007178:	4b3a      	ldr	r3, [pc, #232]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1ed      	bne.n	8007162 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007186:	7ffb      	ldrb	r3, [r7, #31]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d105      	bne.n	8007198 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800718c:	4b35      	ldr	r3, [pc, #212]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 800718e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007190:	4a34      	ldr	r2, [pc, #208]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007196:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d03c      	beq.n	800721e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01c      	beq.n	80071e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071ac:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80071ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071b2:	4a2c      	ldr	r2, [pc, #176]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071bc:	f7fb fc10 	bl	80029e0 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071c4:	f7fb fc0c 	bl	80029e0 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e0f2      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071d6:	4b23      	ldr	r3, [pc, #140]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80071d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ef      	beq.n	80071c4 <HAL_RCC_OscConfig+0x418>
 80071e4:	e01b      	b.n	800721e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071e6:	4b1f      	ldr	r3, [pc, #124]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80071e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f6:	f7fb fbf3 	bl	80029e0 <HAL_GetTick>
 80071fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071fc:	e008      	b.n	8007210 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071fe:	f7fb fbef 	bl	80029e0 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e0d5      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007210:	4b14      	ldr	r3, [pc, #80]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ef      	bne.n	80071fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 80c9 	beq.w	80073ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007228:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 030c 	and.w	r3, r3, #12
 8007230:	2b0c      	cmp	r3, #12
 8007232:	f000 8083 	beq.w	800733c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d15e      	bne.n	80072fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a08      	ldr	r2, [pc, #32]	; (8007264 <HAL_RCC_OscConfig+0x4b8>)
 8007244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724a:	f7fb fbc9 	bl	80029e0 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007250:	e00c      	b.n	800726c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007252:	f7fb fbc5 	bl	80029e0 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d905      	bls.n	800726c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e0ab      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
 8007264:	40021000 	.word	0x40021000
 8007268:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800726c:	4b55      	ldr	r3, [pc, #340]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1ec      	bne.n	8007252 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007278:	4b52      	ldr	r3, [pc, #328]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	4b52      	ldr	r3, [pc, #328]	; (80073c8 <HAL_RCC_OscConfig+0x61c>)
 800727e:	4013      	ands	r3, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6a11      	ldr	r1, [r2, #32]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007288:	3a01      	subs	r2, #1
 800728a:	0112      	lsls	r2, r2, #4
 800728c:	4311      	orrs	r1, r2
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007292:	0212      	lsls	r2, r2, #8
 8007294:	4311      	orrs	r1, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800729a:	0852      	lsrs	r2, r2, #1
 800729c:	3a01      	subs	r2, #1
 800729e:	0552      	lsls	r2, r2, #21
 80072a0:	4311      	orrs	r1, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072a6:	0852      	lsrs	r2, r2, #1
 80072a8:	3a01      	subs	r2, #1
 80072aa:	0652      	lsls	r2, r2, #25
 80072ac:	4311      	orrs	r1, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072b2:	06d2      	lsls	r2, r2, #27
 80072b4:	430a      	orrs	r2, r1
 80072b6:	4943      	ldr	r1, [pc, #268]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072bc:	4b41      	ldr	r3, [pc, #260]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a40      	ldr	r2, [pc, #256]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 80072c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072c8:	4b3e      	ldr	r3, [pc, #248]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4a3d      	ldr	r2, [pc, #244]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 80072ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d4:	f7fb fb84 	bl	80029e0 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072dc:	f7fb fb80 	bl	80029e0 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e066      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072ee:	4b35      	ldr	r3, [pc, #212]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f0      	beq.n	80072dc <HAL_RCC_OscConfig+0x530>
 80072fa:	e05e      	b.n	80073ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072fc:	4b31      	ldr	r3, [pc, #196]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a30      	ldr	r2, [pc, #192]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 8007302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007308:	f7fb fb6a 	bl	80029e0 <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007310:	f7fb fb66 	bl	80029e0 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e04c      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007322:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f0      	bne.n	8007310 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800732e:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	4924      	ldr	r1, [pc, #144]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 8007334:	4b25      	ldr	r3, [pc, #148]	; (80073cc <HAL_RCC_OscConfig+0x620>)
 8007336:	4013      	ands	r3, r2
 8007338:	60cb      	str	r3, [r1, #12]
 800733a:	e03e      	b.n	80073ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e039      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <HAL_RCC_OscConfig+0x618>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f003 0203 	and.w	r2, r3, #3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	429a      	cmp	r2, r3
 800735a:	d12c      	bne.n	80073b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	3b01      	subs	r3, #1
 8007368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800736a:	429a      	cmp	r2, r3
 800736c:	d123      	bne.n	80073b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007378:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800737a:	429a      	cmp	r2, r3
 800737c:	d11b      	bne.n	80073b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800738a:	429a      	cmp	r2, r3
 800738c:	d113      	bne.n	80073b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	3b01      	subs	r3, #1
 800739c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800739e:	429a      	cmp	r2, r3
 80073a0:	d109      	bne.n	80073b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	3b01      	subs	r3, #1
 80073b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d001      	beq.n	80073ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3720      	adds	r7, #32
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40021000 	.word	0x40021000
 80073c8:	019f800c 	.word	0x019f800c
 80073cc:	feeefffc 	.word	0xfeeefffc

080073d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e11e      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073e8:	4b91      	ldr	r3, [pc, #580]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d910      	bls.n	8007418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f6:	4b8e      	ldr	r3, [pc, #568]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f023 020f 	bic.w	r2, r3, #15
 80073fe:	498c      	ldr	r1, [pc, #560]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007406:	4b8a      	ldr	r3, [pc, #552]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d001      	beq.n	8007418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e106      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d073      	beq.n	800750c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d129      	bne.n	8007480 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800742c:	4b81      	ldr	r3, [pc, #516]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0f4      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800743c:	f000 f99e 	bl	800777c <RCC_GetSysClockFreqFromPLLSource>
 8007440:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4a7c      	ldr	r2, [pc, #496]	; (8007638 <HAL_RCC_ClockConfig+0x268>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d93f      	bls.n	80074ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800744a:	4b7a      	ldr	r3, [pc, #488]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d009      	beq.n	800746a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800745e:	2b00      	cmp	r3, #0
 8007460:	d033      	beq.n	80074ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007466:	2b00      	cmp	r3, #0
 8007468:	d12f      	bne.n	80074ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800746a:	4b72      	ldr	r3, [pc, #456]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007472:	4a70      	ldr	r2, [pc, #448]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007478:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800747a:	2380      	movs	r3, #128	; 0x80
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	e024      	b.n	80074ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d107      	bne.n	8007498 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007488:	4b6a      	ldr	r3, [pc, #424]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0c6      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007498:	4b66      	ldr	r3, [pc, #408]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0be      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80074a8:	f000 f8ce 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 80074ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4a61      	ldr	r2, [pc, #388]	; (8007638 <HAL_RCC_ClockConfig+0x268>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d909      	bls.n	80074ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074b6:	4b5f      	ldr	r3, [pc, #380]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074be:	4a5d      	ldr	r2, [pc, #372]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80074c6:	2380      	movs	r3, #128	; 0x80
 80074c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074ca:	4b5a      	ldr	r3, [pc, #360]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f023 0203 	bic.w	r2, r3, #3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4957      	ldr	r1, [pc, #348]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074dc:	f7fb fa80 	bl	80029e0 <HAL_GetTick>
 80074e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e4:	f7fb fa7c 	bl	80029e0 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e095      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fa:	4b4e      	ldr	r3, [pc, #312]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 020c 	and.w	r2, r3, #12
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	429a      	cmp	r2, r3
 800750a:	d1eb      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d023      	beq.n	8007560 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007524:	4b43      	ldr	r3, [pc, #268]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4a42      	ldr	r2, [pc, #264]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800752a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800752e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800753c:	4b3d      	ldr	r3, [pc, #244]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007544:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800754a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800754c:	4b39      	ldr	r3, [pc, #228]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4936      	ldr	r1, [pc, #216]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
 800755e:	e008      	b.n	8007572 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d105      	bne.n	8007572 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007566:	4b33      	ldr	r3, [pc, #204]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	4a32      	ldr	r2, [pc, #200]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800756c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007570:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007572:	4b2f      	ldr	r3, [pc, #188]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d21d      	bcs.n	80075bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007580:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f023 020f 	bic.w	r2, r3, #15
 8007588:	4929      	ldr	r1, [pc, #164]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007590:	f7fb fa26 	bl	80029e0 <HAL_GetTick>
 8007594:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007596:	e00a      	b.n	80075ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fb fa22 	bl	80029e0 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e03b      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ae:	4b20      	ldr	r3, [pc, #128]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d1ed      	bne.n	8007598 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075c8:	4b1a      	ldr	r3, [pc, #104]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4917      	ldr	r1, [pc, #92]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	490f      	ldr	r1, [pc, #60]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075fa:	f000 f825 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 80075fe:	4602      	mov	r2, r0
 8007600:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	490c      	ldr	r1, [pc, #48]	; (800763c <HAL_RCC_ClockConfig+0x26c>)
 800760c:	5ccb      	ldrb	r3, [r1, r3]
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	fa22 f303 	lsr.w	r3, r2, r3
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <HAL_RCC_ClockConfig+0x270>)
 8007618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <HAL_RCC_ClockConfig+0x274>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fb f992 	bl	8002948 <HAL_InitTick>
 8007624:	4603      	mov	r3, r0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40022000 	.word	0x40022000
 8007634:	40021000 	.word	0x40021000
 8007638:	04c4b400 	.word	0x04c4b400
 800763c:	08013b7c 	.word	0x08013b7c
 8007640:	20000000 	.word	0x20000000
 8007644:	20000004 	.word	0x20000004

08007648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800764e:	4b2c      	ldr	r3, [pc, #176]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 030c 	and.w	r3, r3, #12
 8007656:	2b04      	cmp	r3, #4
 8007658:	d102      	bne.n	8007660 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800765a:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <HAL_RCC_GetSysClockFreq+0xbc>)
 800765c:	613b      	str	r3, [r7, #16]
 800765e:	e047      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007660:	4b27      	ldr	r3, [pc, #156]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 030c 	and.w	r3, r3, #12
 8007668:	2b08      	cmp	r3, #8
 800766a:	d102      	bne.n	8007672 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800766c:	4b26      	ldr	r3, [pc, #152]	; (8007708 <HAL_RCC_GetSysClockFreq+0xc0>)
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	e03e      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007672:	4b23      	ldr	r3, [pc, #140]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
 800767a:	2b0c      	cmp	r3, #12
 800767c:	d136      	bne.n	80076ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800767e:	4b20      	ldr	r3, [pc, #128]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007688:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	3301      	adds	r3, #1
 8007694:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b03      	cmp	r3, #3
 800769a:	d10c      	bne.n	80076b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800769c:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <HAL_RCC_GetSysClockFreq+0xc0>)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a4:	4a16      	ldr	r2, [pc, #88]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076a6:	68d2      	ldr	r2, [r2, #12]
 80076a8:	0a12      	lsrs	r2, r2, #8
 80076aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	617b      	str	r3, [r7, #20]
      break;
 80076b4:	e00c      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076b6:	4a13      	ldr	r2, [pc, #76]	; (8007704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80076be:	4a10      	ldr	r2, [pc, #64]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076c0:	68d2      	ldr	r2, [r2, #12]
 80076c2:	0a12      	lsrs	r2, r2, #8
 80076c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
 80076cc:	617b      	str	r3, [r7, #20]
      break;
 80076ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	0e5b      	lsrs	r3, r3, #25
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	3301      	adds	r3, #1
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	e001      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80076f0:	693b      	ldr	r3, [r7, #16]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40021000 	.word	0x40021000
 8007704:	00f42400 	.word	0x00f42400
 8007708:	007a1200 	.word	0x007a1200

0800770c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <HAL_RCC_GetHCLKFreq+0x14>)
 8007712:	681b      	ldr	r3, [r3, #0]
}
 8007714:	4618      	mov	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20000000 	.word	0x20000000

08007724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007728:	f7ff fff0 	bl	800770c <HAL_RCC_GetHCLKFreq>
 800772c:	4602      	mov	r2, r0
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	4904      	ldr	r1, [pc, #16]	; (800774c <HAL_RCC_GetPCLK1Freq+0x28>)
 800773a:	5ccb      	ldrb	r3, [r1, r3]
 800773c:	f003 031f 	and.w	r3, r3, #31
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000
 800774c:	08013b8c 	.word	0x08013b8c

08007750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007754:	f7ff ffda 	bl	800770c <HAL_RCC_GetHCLKFreq>
 8007758:	4602      	mov	r2, r0
 800775a:	4b06      	ldr	r3, [pc, #24]	; (8007774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	0adb      	lsrs	r3, r3, #11
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	4904      	ldr	r1, [pc, #16]	; (8007778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007766:	5ccb      	ldrb	r3, [r1, r3]
 8007768:	f003 031f 	and.w	r3, r3, #31
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40021000 	.word	0x40021000
 8007778:	08013b8c 	.word	0x08013b8c

0800777c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007782:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800778c:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d10c      	bne.n	80077ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077a0:	4a17      	ldr	r2, [pc, #92]	; (8007800 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a8:	4a14      	ldr	r2, [pc, #80]	; (80077fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077aa:	68d2      	ldr	r2, [r2, #12]
 80077ac:	0a12      	lsrs	r2, r2, #8
 80077ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077b2:	fb02 f303 	mul.w	r3, r2, r3
 80077b6:	617b      	str	r3, [r7, #20]
    break;
 80077b8:	e00c      	b.n	80077d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077ba:	4a12      	ldr	r2, [pc, #72]	; (8007804 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c2:	4a0e      	ldr	r2, [pc, #56]	; (80077fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077c4:	68d2      	ldr	r2, [r2, #12]
 80077c6:	0a12      	lsrs	r2, r2, #8
 80077c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]
    break;
 80077d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077d4:	4b09      	ldr	r3, [pc, #36]	; (80077fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	0e5b      	lsrs	r3, r3, #25
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	3301      	adds	r3, #1
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80077ee:	687b      	ldr	r3, [r7, #4]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	40021000 	.word	0x40021000
 8007800:	007a1200 	.word	0x007a1200
 8007804:	00f42400 	.word	0x00f42400

08007808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007810:	2300      	movs	r3, #0
 8007812:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007814:	2300      	movs	r3, #0
 8007816:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8098 	beq.w	8007956 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007826:	2300      	movs	r3, #0
 8007828:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800782a:	4b43      	ldr	r3, [pc, #268]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800782c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10d      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007836:	4b40      	ldr	r3, [pc, #256]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783a:	4a3f      	ldr	r2, [pc, #252]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800783c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007840:	6593      	str	r3, [r2, #88]	; 0x58
 8007842:	4b3d      	ldr	r3, [pc, #244]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784a:	60bb      	str	r3, [r7, #8]
 800784c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800784e:	2301      	movs	r3, #1
 8007850:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007852:	4b3a      	ldr	r3, [pc, #232]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a39      	ldr	r2, [pc, #228]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800785e:	f7fb f8bf 	bl	80029e0 <HAL_GetTick>
 8007862:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007864:	e009      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007866:	f7fb f8bb 	bl	80029e0 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d902      	bls.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	74fb      	strb	r3, [r7, #19]
        break;
 8007878:	e005      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800787a:	4b30      	ldr	r3, [pc, #192]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0ef      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007886:	7cfb      	ldrb	r3, [r7, #19]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d159      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800788c:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007896:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01e      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d019      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078a8:	4b23      	ldr	r3, [pc, #140]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078b4:	4b20      	ldr	r3, [pc, #128]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ba:	4a1f      	ldr	r2, [pc, #124]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078c4:	4b1c      	ldr	r3, [pc, #112]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ca:	4a1b      	ldr	r2, [pc, #108]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078d4:	4a18      	ldr	r2, [pc, #96]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d016      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e6:	f7fb f87b 	bl	80029e0 <HAL_GetTick>
 80078ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078ec:	e00b      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ee:	f7fb f877 	bl	80029e0 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d902      	bls.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	74fb      	strb	r3, [r7, #19]
            break;
 8007904:	e006      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007906:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0ec      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007914:	7cfb      	ldrb	r3, [r7, #19]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10b      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	4903      	ldr	r1, [pc, #12]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007930:	e008      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007932:	7cfb      	ldrb	r3, [r7, #19]
 8007934:	74bb      	strb	r3, [r7, #18]
 8007936:	e005      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007938:	40021000 	.word	0x40021000
 800793c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007940:	7cfb      	ldrb	r3, [r7, #19]
 8007942:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007944:	7c7b      	ldrb	r3, [r7, #17]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d105      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800794a:	4ba6      	ldr	r3, [pc, #664]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800794c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794e:	4aa5      	ldr	r2, [pc, #660]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007954:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007962:	4ba0      	ldr	r3, [pc, #640]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007968:	f023 0203 	bic.w	r2, r3, #3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	499c      	ldr	r1, [pc, #624]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007972:	4313      	orrs	r3, r2
 8007974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007984:	4b97      	ldr	r3, [pc, #604]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798a:	f023 020c 	bic.w	r2, r3, #12
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	4994      	ldr	r1, [pc, #592]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007994:	4313      	orrs	r3, r2
 8007996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079a6:	4b8f      	ldr	r3, [pc, #572]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	498b      	ldr	r1, [pc, #556]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079c8:	4b86      	ldr	r3, [pc, #536]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	4983      	ldr	r1, [pc, #524]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079ea:	4b7e      	ldr	r3, [pc, #504]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	497a      	ldr	r1, [pc, #488]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a0c:	4b75      	ldr	r3, [pc, #468]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	4972      	ldr	r1, [pc, #456]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a2e:	4b6d      	ldr	r3, [pc, #436]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	4969      	ldr	r1, [pc, #420]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a50:	4b64      	ldr	r3, [pc, #400]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	4961      	ldr	r1, [pc, #388]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a72:	4b5c      	ldr	r3, [pc, #368]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	4958      	ldr	r1, [pc, #352]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d015      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a94:	4b53      	ldr	r3, [pc, #332]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	4950      	ldr	r1, [pc, #320]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab2:	d105      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ab4:	4b4b      	ldr	r3, [pc, #300]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4a4a      	ldr	r2, [pc, #296]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007abe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d015      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007acc:	4b45      	ldr	r3, [pc, #276]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	4942      	ldr	r1, [pc, #264]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aea:	d105      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aec:	4b3d      	ldr	r3, [pc, #244]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a3c      	ldr	r2, [pc, #240]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007af6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d015      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b04:	4b37      	ldr	r3, [pc, #220]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	4934      	ldr	r1, [pc, #208]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b22:	d105      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b24:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a2e      	ldr	r2, [pc, #184]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d015      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b3c:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4a:	4926      	ldr	r1, [pc, #152]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b5a:	d105      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b5c:	4b21      	ldr	r3, [pc, #132]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	4a20      	ldr	r2, [pc, #128]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d015      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b74:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	4918      	ldr	r1, [pc, #96]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b92:	d105      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b94:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a12      	ldr	r2, [pc, #72]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d015      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bba:	490a      	ldr	r1, [pc, #40]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bca:	d105      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4a04      	ldr	r2, [pc, #16]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007bd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40021000 	.word	0x40021000

08007be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e09d      	b.n	8007d36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d108      	bne.n	8007c14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c0a:	d009      	beq.n	8007c20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	61da      	str	r2, [r3, #28]
 8007c12:	e005      	b.n	8007c20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fa f994 	bl	8001f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c60:	d902      	bls.n	8007c68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	e002      	b.n	8007c6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c76:	d007      	beq.n	8007c88 <HAL_SPI_Init+0xa0>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c80:	d002      	beq.n	8007c88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cca:	ea42 0103 	orr.w	r1, r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	0c1b      	lsrs	r3, r3, #16
 8007ce4:	f003 0204 	and.w	r2, r3, #4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	f003 0310 	and.w	r3, r3, #16
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d04:	ea42 0103 	orr.w	r1, r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10e      	bne.n	8007d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d009      	beq.n	8007d80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d004      	beq.n	8007d80 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
    return;
 8007d7e:	e0ce      	b.n	8007f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_SPI_IRQHandler+0x5e>
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
    return;
 8007d9c:	e0bf      	b.n	8007f1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <HAL_SPI_IRQHandler+0x7e>
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d105      	bne.n	8007dbe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 80b0 	beq.w	8007f1e <HAL_SPI_IRQHandler+0x1de>
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f003 0320 	and.w	r3, r3, #32
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 80aa 	beq.w	8007f1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d023      	beq.n	8007e1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d011      	beq.n	8007e04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de4:	f043 0204 	orr.w	r2, r3, #4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	e00b      	b.n	8007e1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e04:	2300      	movs	r3, #0
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	693b      	ldr	r3, [r7, #16]
        return;
 8007e1a:	e080      	b.n	8007f1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d014      	beq.n	8007e50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2a:	f043 0201 	orr.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5e:	f043 0208 	orr.w	r2, r3, #8
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e66:	2300      	movs	r3, #0
 8007e68:	60bb      	str	r3, [r7, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	60bb      	str	r3, [r7, #8]
 8007e72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d04f      	beq.n	8007f1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <HAL_SPI_IRQHandler+0x168>
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d034      	beq.n	8007f12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0203 	bic.w	r2, r2, #3
 8007eb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d011      	beq.n	8007ee4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec4:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <HAL_SPI_IRQHandler+0x1e4>)
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fc fcf7 	bl	80048c0 <HAL_DMA_Abort_IT>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d016      	beq.n	8007f1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef0:	4a0c      	ldr	r2, [pc, #48]	; (8007f24 <HAL_SPI_IRQHandler+0x1e4>)
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fc fce1 	bl	80048c0 <HAL_DMA_Abort_IT>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007f10:	e003      	b.n	8007f1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f808 	bl	8007f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f18:	e000      	b.n	8007f1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007f1a:	bf00      	nop
    return;
 8007f1c:	bf00      	nop
  }
}
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	08007f3d 	.word	0x08007f3d

08007f28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff ffe5 	bl	8007f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e049      	b.n	800800c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7fa fa19 	bl	80023c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	f000 fa0b 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e049      	b.n	80080ba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f841 	bl	80080c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f000 f9b4 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80080f2:	2302      	movs	r3, #2
 80080f4:	e066      	b.n	80081c4 <HAL_TIM_OC_ConfigChannel+0xec>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b14      	cmp	r3, #20
 8008102:	d857      	bhi.n	80081b4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008104:	a201      	add	r2, pc, #4	; (adr r2, 800810c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810a:	bf00      	nop
 800810c:	08008161 	.word	0x08008161
 8008110:	080081b5 	.word	0x080081b5
 8008114:	080081b5 	.word	0x080081b5
 8008118:	080081b5 	.word	0x080081b5
 800811c:	0800816f 	.word	0x0800816f
 8008120:	080081b5 	.word	0x080081b5
 8008124:	080081b5 	.word	0x080081b5
 8008128:	080081b5 	.word	0x080081b5
 800812c:	0800817d 	.word	0x0800817d
 8008130:	080081b5 	.word	0x080081b5
 8008134:	080081b5 	.word	0x080081b5
 8008138:	080081b5 	.word	0x080081b5
 800813c:	0800818b 	.word	0x0800818b
 8008140:	080081b5 	.word	0x080081b5
 8008144:	080081b5 	.word	0x080081b5
 8008148:	080081b5 	.word	0x080081b5
 800814c:	08008199 	.word	0x08008199
 8008150:	080081b5 	.word	0x080081b5
 8008154:	080081b5 	.word	0x080081b5
 8008158:	080081b5 	.word	0x080081b5
 800815c:	080081a7 	.word	0x080081a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	4618      	mov	r0, r3
 8008168:	f000 f9c6 	bl	80084f8 <TIM_OC1_SetConfig>
      break;
 800816c:	e025      	b.n	80081ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fa4f 	bl	8008618 <TIM_OC2_SetConfig>
      break;
 800817a:	e01e      	b.n	80081ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fad2 	bl	800872c <TIM_OC3_SetConfig>
      break;
 8008188:	e017      	b.n	80081ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fb53 	bl	800883c <TIM_OC4_SetConfig>
      break;
 8008196:	e010      	b.n	80081ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fbd6 	bl	8008950 <TIM_OC5_SetConfig>
      break;
 80081a4:	e009      	b.n	80081ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68b9      	ldr	r1, [r7, #8]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fc33 	bl	8008a18 <TIM_OC6_SetConfig>
      break;
 80081b2:	e002      	b.n	80081ba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	75fb      	strb	r3, [r7, #23]
      break;
 80081b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_TIM_ConfigClockSource+0x1c>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e0de      	b.n	80083a6 <HAL_TIM_ConfigClockSource+0x1da>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800820a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a63      	ldr	r2, [pc, #396]	; (80083b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	f000 80a9 	beq.w	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 8008228:	4a61      	ldr	r2, [pc, #388]	; (80083b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800822a:	4293      	cmp	r3, r2
 800822c:	f200 80ae 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 8008230:	4a60      	ldr	r2, [pc, #384]	; (80083b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008232:	4293      	cmp	r3, r2
 8008234:	f000 80a1 	beq.w	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 8008238:	4a5e      	ldr	r2, [pc, #376]	; (80083b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	f200 80a6 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 8008240:	4a5d      	ldr	r2, [pc, #372]	; (80083b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008242:	4293      	cmp	r3, r2
 8008244:	f000 8099 	beq.w	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 8008248:	4a5b      	ldr	r2, [pc, #364]	; (80083b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800824a:	4293      	cmp	r3, r2
 800824c:	f200 809e 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 8008250:	4a5a      	ldr	r2, [pc, #360]	; (80083bc <HAL_TIM_ConfigClockSource+0x1f0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	f000 8091 	beq.w	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 8008258:	4a58      	ldr	r2, [pc, #352]	; (80083bc <HAL_TIM_ConfigClockSource+0x1f0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	f200 8096 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 8008260:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008264:	f000 8089 	beq.w	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 8008268:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800826c:	f200 808e 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 8008270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008274:	d03e      	beq.n	80082f4 <HAL_TIM_ConfigClockSource+0x128>
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800827a:	f200 8087 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 800827e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008282:	f000 8086 	beq.w	8008392 <HAL_TIM_ConfigClockSource+0x1c6>
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828a:	d87f      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 800828c:	2b70      	cmp	r3, #112	; 0x70
 800828e:	d01a      	beq.n	80082c6 <HAL_TIM_ConfigClockSource+0xfa>
 8008290:	2b70      	cmp	r3, #112	; 0x70
 8008292:	d87b      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 8008294:	2b60      	cmp	r3, #96	; 0x60
 8008296:	d050      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x16e>
 8008298:	2b60      	cmp	r3, #96	; 0x60
 800829a:	d877      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 800829c:	2b50      	cmp	r3, #80	; 0x50
 800829e:	d03c      	beq.n	800831a <HAL_TIM_ConfigClockSource+0x14e>
 80082a0:	2b50      	cmp	r3, #80	; 0x50
 80082a2:	d873      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	d058      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x18e>
 80082a8:	2b40      	cmp	r3, #64	; 0x40
 80082aa:	d86f      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d064      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 80082b0:	2b30      	cmp	r3, #48	; 0x30
 80082b2:	d86b      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d060      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d867      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05c      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 80082c0:	2b10      	cmp	r3, #16
 80082c2:	d05a      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x1ae>
 80082c4:	e062      	b.n	800838c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082d6:	f000 fc81 	bl	8008bdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	609a      	str	r2, [r3, #8]
      break;
 80082f2:	e04f      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008304:	f000 fc6a 	bl	8008bdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008316:	609a      	str	r2, [r3, #8]
      break;
 8008318:	e03c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008326:	461a      	mov	r2, r3
 8008328:	f000 fbdc 	bl	8008ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2150      	movs	r1, #80	; 0x50
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fc35 	bl	8008ba2 <TIM_ITRx_SetConfig>
      break;
 8008338:	e02c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008346:	461a      	mov	r2, r3
 8008348:	f000 fbfb 	bl	8008b42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2160      	movs	r1, #96	; 0x60
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fc25 	bl	8008ba2 <TIM_ITRx_SetConfig>
      break;
 8008358:	e01c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008366:	461a      	mov	r2, r3
 8008368:	f000 fbbc 	bl	8008ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2140      	movs	r1, #64	; 0x40
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fc15 	bl	8008ba2 <TIM_ITRx_SetConfig>
      break;
 8008378:	e00c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f000 fc0c 	bl	8008ba2 <TIM_ITRx_SetConfig>
      break;
 800838a:	e003      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	73fb      	strb	r3, [r7, #15]
      break;
 8008390:	e000      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	00100070 	.word	0x00100070
 80083b4:	00100040 	.word	0x00100040
 80083b8:	00100030 	.word	0x00100030
 80083bc:	00100020 	.word	0x00100020

080083c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a42      	ldr	r2, [pc, #264]	; (80084dc <TIM_Base_SetConfig+0x11c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d00f      	beq.n	80083f8 <TIM_Base_SetConfig+0x38>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083de:	d00b      	beq.n	80083f8 <TIM_Base_SetConfig+0x38>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a3f      	ldr	r2, [pc, #252]	; (80084e0 <TIM_Base_SetConfig+0x120>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d007      	beq.n	80083f8 <TIM_Base_SetConfig+0x38>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a3e      	ldr	r2, [pc, #248]	; (80084e4 <TIM_Base_SetConfig+0x124>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_Base_SetConfig+0x38>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a3d      	ldr	r2, [pc, #244]	; (80084e8 <TIM_Base_SetConfig+0x128>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d108      	bne.n	800840a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a33      	ldr	r2, [pc, #204]	; (80084dc <TIM_Base_SetConfig+0x11c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01b      	beq.n	800844a <TIM_Base_SetConfig+0x8a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008418:	d017      	beq.n	800844a <TIM_Base_SetConfig+0x8a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a30      	ldr	r2, [pc, #192]	; (80084e0 <TIM_Base_SetConfig+0x120>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d013      	beq.n	800844a <TIM_Base_SetConfig+0x8a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a2f      	ldr	r2, [pc, #188]	; (80084e4 <TIM_Base_SetConfig+0x124>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00f      	beq.n	800844a <TIM_Base_SetConfig+0x8a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2e      	ldr	r2, [pc, #184]	; (80084e8 <TIM_Base_SetConfig+0x128>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00b      	beq.n	800844a <TIM_Base_SetConfig+0x8a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a2d      	ldr	r2, [pc, #180]	; (80084ec <TIM_Base_SetConfig+0x12c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d007      	beq.n	800844a <TIM_Base_SetConfig+0x8a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2c      	ldr	r2, [pc, #176]	; (80084f0 <TIM_Base_SetConfig+0x130>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d003      	beq.n	800844a <TIM_Base_SetConfig+0x8a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a2b      	ldr	r2, [pc, #172]	; (80084f4 <TIM_Base_SetConfig+0x134>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d108      	bne.n	800845c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	4313      	orrs	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a16      	ldr	r2, [pc, #88]	; (80084dc <TIM_Base_SetConfig+0x11c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00f      	beq.n	80084a8 <TIM_Base_SetConfig+0xe8>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <TIM_Base_SetConfig+0x128>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00b      	beq.n	80084a8 <TIM_Base_SetConfig+0xe8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a16      	ldr	r2, [pc, #88]	; (80084ec <TIM_Base_SetConfig+0x12c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d007      	beq.n	80084a8 <TIM_Base_SetConfig+0xe8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a15      	ldr	r2, [pc, #84]	; (80084f0 <TIM_Base_SetConfig+0x130>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_Base_SetConfig+0xe8>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a14      	ldr	r2, [pc, #80]	; (80084f4 <TIM_Base_SetConfig+0x134>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d103      	bne.n	80084b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d105      	bne.n	80084ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f023 0201 	bic.w	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	611a      	str	r2, [r3, #16]
  }
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40000400 	.word	0x40000400
 80084e4:	40000800 	.word	0x40000800
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800

080084f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f023 0201 	bic.w	r2, r3, #1
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f023 0302 	bic.w	r3, r3, #2
 8008544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a2c      	ldr	r2, [pc, #176]	; (8008604 <TIM_OC1_SetConfig+0x10c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00f      	beq.n	8008578 <TIM_OC1_SetConfig+0x80>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a2b      	ldr	r2, [pc, #172]	; (8008608 <TIM_OC1_SetConfig+0x110>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00b      	beq.n	8008578 <TIM_OC1_SetConfig+0x80>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2a      	ldr	r2, [pc, #168]	; (800860c <TIM_OC1_SetConfig+0x114>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d007      	beq.n	8008578 <TIM_OC1_SetConfig+0x80>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a29      	ldr	r2, [pc, #164]	; (8008610 <TIM_OC1_SetConfig+0x118>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_OC1_SetConfig+0x80>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a28      	ldr	r2, [pc, #160]	; (8008614 <TIM_OC1_SetConfig+0x11c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d10c      	bne.n	8008592 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f023 0308 	bic.w	r3, r3, #8
 800857e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f023 0304 	bic.w	r3, r3, #4
 8008590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <TIM_OC1_SetConfig+0x10c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00f      	beq.n	80085ba <TIM_OC1_SetConfig+0xc2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1a      	ldr	r2, [pc, #104]	; (8008608 <TIM_OC1_SetConfig+0x110>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00b      	beq.n	80085ba <TIM_OC1_SetConfig+0xc2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a19      	ldr	r2, [pc, #100]	; (800860c <TIM_OC1_SetConfig+0x114>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d007      	beq.n	80085ba <TIM_OC1_SetConfig+0xc2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a18      	ldr	r2, [pc, #96]	; (8008610 <TIM_OC1_SetConfig+0x118>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d003      	beq.n	80085ba <TIM_OC1_SetConfig+0xc2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a17      	ldr	r2, [pc, #92]	; (8008614 <TIM_OC1_SetConfig+0x11c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d111      	bne.n	80085de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	621a      	str	r2, [r3, #32]
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	40012c00 	.word	0x40012c00
 8008608:	40013400 	.word	0x40013400
 800860c:	40014000 	.word	0x40014000
 8008610:	40014400 	.word	0x40014400
 8008614:	40014800 	.word	0x40014800

08008618 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f023 0210 	bic.w	r2, r3, #16
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	021b      	lsls	r3, r3, #8
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0320 	bic.w	r3, r3, #32
 8008666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a28      	ldr	r2, [pc, #160]	; (8008718 <TIM_OC2_SetConfig+0x100>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_OC2_SetConfig+0x6c>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a27      	ldr	r2, [pc, #156]	; (800871c <TIM_OC2_SetConfig+0x104>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d10d      	bne.n	80086a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <TIM_OC2_SetConfig+0x100>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00f      	beq.n	80086c8 <TIM_OC2_SetConfig+0xb0>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a1c      	ldr	r2, [pc, #112]	; (800871c <TIM_OC2_SetConfig+0x104>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00b      	beq.n	80086c8 <TIM_OC2_SetConfig+0xb0>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <TIM_OC2_SetConfig+0x108>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d007      	beq.n	80086c8 <TIM_OC2_SetConfig+0xb0>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a1a      	ldr	r2, [pc, #104]	; (8008724 <TIM_OC2_SetConfig+0x10c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d003      	beq.n	80086c8 <TIM_OC2_SetConfig+0xb0>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a19      	ldr	r2, [pc, #100]	; (8008728 <TIM_OC2_SetConfig+0x110>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d113      	bne.n	80086f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	621a      	str	r2, [r3, #32]
}
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40012c00 	.word	0x40012c00
 800871c:	40013400 	.word	0x40013400
 8008720:	40014000 	.word	0x40014000
 8008724:	40014400 	.word	0x40014400
 8008728:	40014800 	.word	0x40014800

0800872c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800875a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	4313      	orrs	r3, r2
 8008784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a27      	ldr	r2, [pc, #156]	; (8008828 <TIM_OC3_SetConfig+0xfc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d003      	beq.n	8008796 <TIM_OC3_SetConfig+0x6a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a26      	ldr	r2, [pc, #152]	; (800882c <TIM_OC3_SetConfig+0x100>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d10d      	bne.n	80087b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800879c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a1c      	ldr	r2, [pc, #112]	; (8008828 <TIM_OC3_SetConfig+0xfc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00f      	beq.n	80087da <TIM_OC3_SetConfig+0xae>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a1b      	ldr	r2, [pc, #108]	; (800882c <TIM_OC3_SetConfig+0x100>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00b      	beq.n	80087da <TIM_OC3_SetConfig+0xae>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a1a      	ldr	r2, [pc, #104]	; (8008830 <TIM_OC3_SetConfig+0x104>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d007      	beq.n	80087da <TIM_OC3_SetConfig+0xae>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a19      	ldr	r2, [pc, #100]	; (8008834 <TIM_OC3_SetConfig+0x108>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d003      	beq.n	80087da <TIM_OC3_SetConfig+0xae>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a18      	ldr	r2, [pc, #96]	; (8008838 <TIM_OC3_SetConfig+0x10c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d113      	bne.n	8008802 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	621a      	str	r2, [r3, #32]
}
 800881c:	bf00      	nop
 800881e:	371c      	adds	r7, #28
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	40012c00 	.word	0x40012c00
 800882c:	40013400 	.word	0x40013400
 8008830:	40014000 	.word	0x40014000
 8008834:	40014400 	.word	0x40014400
 8008838:	40014800 	.word	0x40014800

0800883c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800886a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800888a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	031b      	lsls	r3, r3, #12
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a28      	ldr	r2, [pc, #160]	; (800893c <TIM_OC4_SetConfig+0x100>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <TIM_OC4_SetConfig+0x6c>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a27      	ldr	r2, [pc, #156]	; (8008940 <TIM_OC4_SetConfig+0x104>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d10d      	bne.n	80088c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	031b      	lsls	r3, r3, #12
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a1d      	ldr	r2, [pc, #116]	; (800893c <TIM_OC4_SetConfig+0x100>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d00f      	beq.n	80088ec <TIM_OC4_SetConfig+0xb0>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a1c      	ldr	r2, [pc, #112]	; (8008940 <TIM_OC4_SetConfig+0x104>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00b      	beq.n	80088ec <TIM_OC4_SetConfig+0xb0>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a1b      	ldr	r2, [pc, #108]	; (8008944 <TIM_OC4_SetConfig+0x108>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d007      	beq.n	80088ec <TIM_OC4_SetConfig+0xb0>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a1a      	ldr	r2, [pc, #104]	; (8008948 <TIM_OC4_SetConfig+0x10c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_OC4_SetConfig+0xb0>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a19      	ldr	r2, [pc, #100]	; (800894c <TIM_OC4_SetConfig+0x110>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d113      	bne.n	8008914 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	019b      	lsls	r3, r3, #6
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	4313      	orrs	r3, r2
 8008906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	019b      	lsls	r3, r3, #6
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4313      	orrs	r3, r2
 8008912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	621a      	str	r2, [r3, #32]
}
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	40012c00 	.word	0x40012c00
 8008940:	40013400 	.word	0x40013400
 8008944:	40014000 	.word	0x40014000
 8008948:	40014400 	.word	0x40014400
 800894c:	40014800 	.word	0x40014800

08008950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800897e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008994:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a17      	ldr	r2, [pc, #92]	; (8008a04 <TIM_OC5_SetConfig+0xb4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00f      	beq.n	80089ca <TIM_OC5_SetConfig+0x7a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a16      	ldr	r2, [pc, #88]	; (8008a08 <TIM_OC5_SetConfig+0xb8>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00b      	beq.n	80089ca <TIM_OC5_SetConfig+0x7a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <TIM_OC5_SetConfig+0xbc>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d007      	beq.n	80089ca <TIM_OC5_SetConfig+0x7a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a14      	ldr	r2, [pc, #80]	; (8008a10 <TIM_OC5_SetConfig+0xc0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_OC5_SetConfig+0x7a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a13      	ldr	r2, [pc, #76]	; (8008a14 <TIM_OC5_SetConfig+0xc4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d109      	bne.n	80089de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	40012c00 	.word	0x40012c00
 8008a08:	40013400 	.word	0x40013400
 8008a0c:	40014000 	.word	0x40014000
 8008a10:	40014400 	.word	0x40014400
 8008a14:	40014800 	.word	0x40014800

08008a18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	021b      	lsls	r3, r3, #8
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	051b      	lsls	r3, r3, #20
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a18      	ldr	r2, [pc, #96]	; (8008ad0 <TIM_OC6_SetConfig+0xb8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d00f      	beq.n	8008a94 <TIM_OC6_SetConfig+0x7c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <TIM_OC6_SetConfig+0xbc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00b      	beq.n	8008a94 <TIM_OC6_SetConfig+0x7c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <TIM_OC6_SetConfig+0xc0>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d007      	beq.n	8008a94 <TIM_OC6_SetConfig+0x7c>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a15      	ldr	r2, [pc, #84]	; (8008adc <TIM_OC6_SetConfig+0xc4>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d003      	beq.n	8008a94 <TIM_OC6_SetConfig+0x7c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a14      	ldr	r2, [pc, #80]	; (8008ae0 <TIM_OC6_SetConfig+0xc8>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d109      	bne.n	8008aa8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	029b      	lsls	r3, r3, #10
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	621a      	str	r2, [r3, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40012c00 	.word	0x40012c00
 8008ad4:	40013400 	.word	0x40013400
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40014400 	.word	0x40014400
 8008ae0:	40014800 	.word	0x40014800

08008ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	f023 0201 	bic.w	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f023 030a 	bic.w	r3, r3, #10
 8008b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	621a      	str	r2, [r3, #32]
}
 8008b36:	bf00      	nop
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b087      	sub	sp, #28
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	f023 0210 	bic.w	r2, r3, #16
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	031b      	lsls	r3, r3, #12
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	621a      	str	r2, [r3, #32]
}
 8008b96:	bf00      	nop
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	f043 0307 	orr.w	r3, r3, #7
 8008bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	609a      	str	r2, [r3, #8]
}
 8008bd0:	bf00      	nop
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	021a      	lsls	r2, r3, #8
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	609a      	str	r2, [r3, #8]
}
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e065      	b.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a2c      	ldr	r2, [pc, #176]	; (8008d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d004      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a2b      	ldr	r2, [pc, #172]	; (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d108      	bne.n	8008c7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1b      	ldr	r2, [pc, #108]	; (8008d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d018      	beq.n	8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008caa:	d013      	beq.n	8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a18      	ldr	r2, [pc, #96]	; (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00e      	beq.n	8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d009      	beq.n	8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d004      	beq.n	8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a13      	ldr	r2, [pc, #76]	; (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d10c      	bne.n	8008cee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	40012c00 	.word	0x40012c00
 8008d10:	40013400 	.word	0x40013400
 8008d14:	40000400 	.word	0x40000400
 8008d18:	40000800 	.word	0x40000800
 8008d1c:	40014000 	.word	0x40014000

08008d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e042      	b.n	8008db8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7f9 fc2b 	bl	80025a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2224      	movs	r2, #36	; 0x24
 8008d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0201 	bic.w	r2, r2, #1
 8008d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 ff9c 	bl	8009ca8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fccd 	bl	8009710 <UART_SetConfig>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d101      	bne.n	8008d80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e01b      	b.n	8008db8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 f81b 	bl	8009dec <UART_CheckIdleState>
 8008db6:	4603      	mov	r3, r0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08a      	sub	sp, #40	; 0x28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d137      	bne.n	8008e48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <HAL_UART_Receive_DMA+0x24>
 8008dde:	88fb      	ldrh	r3, [r7, #6]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e030      	b.n	8008e4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a18      	ldr	r2, [pc, #96]	; (8008e54 <HAL_UART_Receive_DMA+0x94>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d01f      	beq.n	8008e38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d018      	beq.n	8008e38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	613b      	str	r3, [r7, #16]
   return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	623b      	str	r3, [r7, #32]
 8008e26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	69f9      	ldr	r1, [r7, #28]
 8008e2a:	6a3a      	ldr	r2, [r7, #32]
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e6      	bne.n	8008e06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e38:	88fb      	ldrh	r3, [r7, #6]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f001 f8ec 	bl	800a01c <UART_Start_Receive_DMA>
 8008e44:	4603      	mov	r3, r0
 8008e46:	e000      	b.n	8008e4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e48:	2302      	movs	r3, #2
  }
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3728      	adds	r7, #40	; 0x28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40008000 	.word	0x40008000

08008e58 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b0a0      	sub	sp, #128	; 0x80
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e70:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8008e74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e80:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e6      	bne.n	8008e60 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3308      	adds	r3, #8
 8008e98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea4:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008eb6:	657a      	str	r2, [r7, #84]	; 0x54
 8008eb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e3      	bne.n	8008e92 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d118      	bne.n	8008f04 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	f023 0310 	bic.w	r3, r3, #16
 8008ee6:	677b      	str	r3, [r7, #116]	; 0x74
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e6      	bne.n	8008ed2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0e:	2b80      	cmp	r3, #128	; 0x80
 8008f10:	d137      	bne.n	8008f82 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f28:	673b      	str	r3, [r7, #112]	; 0x70
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e5      	bne.n	8008f12 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d019      	beq.n	8008f82 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f52:	2200      	movs	r2, #0
 8008f54:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fb fc57 	bl	800480e <HAL_DMA_Abort>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00d      	beq.n	8008f82 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fb fdbe 	bl	8004aec <HAL_DMA_GetError>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	d105      	bne.n	8008f82 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2210      	movs	r2, #16
 8008f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e073      	b.n	800906a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8c:	2b40      	cmp	r3, #64	; 0x40
 8008f8e:	d13b      	bne.n	8009008 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3308      	adds	r3, #8
 8008fae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fb0:	61ba      	str	r2, [r7, #24]
 8008fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6979      	ldr	r1, [r7, #20]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e5      	bne.n	8008f90 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d01c      	beq.n	8009008 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fb fc15 	bl	800480e <HAL_DMA_Abort>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00e      	beq.n	8009008 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fb fd7b 	bl	8004aec <HAL_DMA_GetError>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	d105      	bne.n	8009008 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2210      	movs	r2, #16
 8009000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e030      	b.n	800906a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	220f      	movs	r2, #15
 800901e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009028:	d107      	bne.n	800903a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699a      	ldr	r2, [r3, #24]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0210 	orr.w	r2, r2, #16
 8009038:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	699a      	ldr	r2, [r3, #24]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0208 	orr.w	r2, r2, #8
 8009048:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2220      	movs	r2, #32
 800904e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3780      	adds	r7, #128	; 0x80
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b0ba      	sub	sp, #232	; 0xe8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800909a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800909e:	f640 030f 	movw	r3, #2063	; 0x80f
 80090a2:	4013      	ands	r3, r2
 80090a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80090a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d11b      	bne.n	80090e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d015      	beq.n	80090e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d105      	bne.n	80090d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d009      	beq.n	80090e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 82e3 	beq.w	80096a4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
      }
      return;
 80090e6:	e2dd      	b.n	80096a4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 8123 	beq.w	8009338 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80090f6:	4b8d      	ldr	r3, [pc, #564]	; (800932c <HAL_UART_IRQHandler+0x2b8>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009102:	4b8b      	ldr	r3, [pc, #556]	; (8009330 <HAL_UART_IRQHandler+0x2bc>)
 8009104:	4013      	ands	r3, r2
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 8116 	beq.w	8009338 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800910c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d011      	beq.n	800913c <HAL_UART_IRQHandler+0xc8>
 8009118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2201      	movs	r2, #1
 800912a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009132:	f043 0201 	orr.w	r2, r3, #1
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800913c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d011      	beq.n	800916c <HAL_UART_IRQHandler+0xf8>
 8009148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2202      	movs	r2, #2
 800915a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009162:	f043 0204 	orr.w	r2, r3, #4
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800916c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d011      	beq.n	800919c <HAL_UART_IRQHandler+0x128>
 8009178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2204      	movs	r2, #4
 800918a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009192:	f043 0202 	orr.w	r2, r3, #2
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d017      	beq.n	80091d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d105      	bne.n	80091c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80091b8:	4b5c      	ldr	r3, [pc, #368]	; (800932c <HAL_UART_IRQHandler+0x2b8>)
 80091ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2208      	movs	r2, #8
 80091c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ce:	f043 0208 	orr.w	r2, r3, #8
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d012      	beq.n	800920a <HAL_UART_IRQHandler+0x196>
 80091e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00c      	beq.n	800920a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	f043 0220 	orr.w	r2, r3, #32
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 8249 	beq.w	80096a8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	d013      	beq.n	800924a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800922e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b40      	cmp	r3, #64	; 0x40
 8009260:	d005      	beq.n	800926e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009266:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800926a:	2b00      	cmp	r3, #0
 800926c:	d054      	beq.n	8009318 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 ffbb 	bl	800a1ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d146      	bne.n	8009310 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3308      	adds	r3, #8
 8009288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800929c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1d9      	bne.n	8009282 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d017      	beq.n	8009308 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092de:	4a15      	ldr	r2, [pc, #84]	; (8009334 <HAL_UART_IRQHandler+0x2c0>)
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fb fae9 	bl	80048c0 <HAL_DMA_Abort_IT>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d019      	beq.n	8009328 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009302:	4610      	mov	r0, r2
 8009304:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009306:	e00f      	b.n	8009328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f9eb 	bl	80096e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800930e:	e00b      	b.n	8009328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f9e7 	bl	80096e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009316:	e007      	b.n	8009328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f9e3 	bl	80096e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009326:	e1bf      	b.n	80096a8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009328:	bf00      	nop
    return;
 800932a:	e1bd      	b.n	80096a8 <HAL_UART_IRQHandler+0x634>
 800932c:	10000001 	.word	0x10000001
 8009330:	04000120 	.word	0x04000120
 8009334:	0800a4a1 	.word	0x0800a4a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933c:	2b01      	cmp	r3, #1
 800933e:	f040 8153 	bne.w	80095e8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009346:	f003 0310 	and.w	r3, r3, #16
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 814c 	beq.w	80095e8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009354:	f003 0310 	and.w	r3, r3, #16
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 8145 	beq.w	80095e8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2210      	movs	r2, #16
 8009364:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009370:	2b40      	cmp	r3, #64	; 0x40
 8009372:	f040 80bb 	bne.w	80094ec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 818f 	beq.w	80096ac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009394:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009398:	429a      	cmp	r2, r3
 800939a:	f080 8187 	bcs.w	80096ac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f040 8087 	bne.w	80094ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80093f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80093fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1da      	bne.n	80093bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009418:	f023 0301 	bic.w	r3, r3, #1
 800941c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3308      	adds	r3, #8
 8009426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800942a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800942e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009432:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800943c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e1      	bne.n	8009406 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3308      	adds	r3, #8
 8009448:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3308      	adds	r3, #8
 8009462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009468:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800946c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e3      	bne.n	8009442 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009498:	f023 0310 	bic.w	r3, r3, #16
 800949c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80094ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e4      	bne.n	8009488 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fb f9a2 	bl	800480e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2202      	movs	r2, #2
 80094ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094dc:	b29b      	uxth	r3, r3
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f907 	bl	80096f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094ea:	e0df      	b.n	80096ac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 80d1 	beq.w	80096b0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800950e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 80cc 	beq.w	80096b0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800952c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800953a:	647b      	str	r3, [r7, #68]	; 0x44
 800953c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e4      	bne.n	8009518 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	623b      	str	r3, [r7, #32]
   return(result);
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009564:	f023 0301 	bic.w	r3, r3, #1
 8009568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009576:	633a      	str	r2, [r7, #48]	; 0x30
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800957c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e1      	bne.n	800954e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0310 	bic.w	r3, r3, #16
 80095b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	69b9      	ldr	r1, [r7, #24]
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	617b      	str	r3, [r7, #20]
   return(result);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e4      	bne.n	800959e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f889 	bl	80096f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095e6:	e063      	b.n	80096b0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80095e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <HAL_UART_IRQHandler+0x59e>
 80095f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 ff89 	bl	800a522 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009610:	e051      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961a:	2b00      	cmp	r3, #0
 800961c:	d014      	beq.n	8009648 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800961e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800962a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d008      	beq.n	8009648 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800963a:	2b00      	cmp	r3, #0
 800963c:	d03a      	beq.n	80096b4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
    }
    return;
 8009646:	e035      	b.n	80096b4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d009      	beq.n	8009668 <HAL_UART_IRQHandler+0x5f4>
 8009654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 ff33 	bl	800a4cc <UART_EndTransmit_IT>
    return;
 8009666:	e026      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d009      	beq.n	8009688 <HAL_UART_IRQHandler+0x614>
 8009674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009678:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 ff62 	bl	800a54a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009686:	e016      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d010      	beq.n	80096b6 <HAL_UART_IRQHandler+0x642>
 8009694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009698:	2b00      	cmp	r3, #0
 800969a:	da0c      	bge.n	80096b6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 ff4a 	bl	800a536 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096a2:	e008      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
      return;
 80096a4:	bf00      	nop
 80096a6:	e006      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
    return;
 80096a8:	bf00      	nop
 80096aa:	e004      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
      return;
 80096ac:	bf00      	nop
 80096ae:	e002      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
      return;
 80096b0:	bf00      	nop
 80096b2:	e000      	b.n	80096b6 <HAL_UART_IRQHandler+0x642>
    return;
 80096b4:	bf00      	nop
  }
}
 80096b6:	37e8      	adds	r7, #232	; 0xe8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009714:	b08c      	sub	sp, #48	; 0x30
 8009716:	af00      	add	r7, sp, #0
 8009718:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	431a      	orrs	r2, r3
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	431a      	orrs	r2, r3
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	69db      	ldr	r3, [r3, #28]
 8009734:	4313      	orrs	r3, r2
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	4bab      	ldr	r3, [pc, #684]	; (80099ec <UART_SetConfig+0x2dc>)
 8009740:	4013      	ands	r3, r2
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	6812      	ldr	r2, [r2, #0]
 8009746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009748:	430b      	orrs	r3, r1
 800974a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4aa0      	ldr	r2, [pc, #640]	; (80099f0 <UART_SetConfig+0x2e0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d004      	beq.n	800977c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009778:	4313      	orrs	r3, r2
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009786:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	6812      	ldr	r2, [r2, #0]
 800978e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009790:	430b      	orrs	r3, r1
 8009792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	f023 010f 	bic.w	r1, r3, #15
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a91      	ldr	r2, [pc, #580]	; (80099f4 <UART_SetConfig+0x2e4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d125      	bne.n	8009800 <UART_SetConfig+0xf0>
 80097b4:	4b90      	ldr	r3, [pc, #576]	; (80099f8 <UART_SetConfig+0x2e8>)
 80097b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d81a      	bhi.n	80097f8 <UART_SetConfig+0xe8>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0xb8>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	080097e9 	.word	0x080097e9
 80097d0:	080097e1 	.word	0x080097e1
 80097d4:	080097f1 	.word	0x080097f1
 80097d8:	2301      	movs	r3, #1
 80097da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097de:	e0d6      	b.n	800998e <UART_SetConfig+0x27e>
 80097e0:	2302      	movs	r3, #2
 80097e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097e6:	e0d2      	b.n	800998e <UART_SetConfig+0x27e>
 80097e8:	2304      	movs	r3, #4
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ee:	e0ce      	b.n	800998e <UART_SetConfig+0x27e>
 80097f0:	2308      	movs	r3, #8
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097f6:	e0ca      	b.n	800998e <UART_SetConfig+0x27e>
 80097f8:	2310      	movs	r3, #16
 80097fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097fe:	e0c6      	b.n	800998e <UART_SetConfig+0x27e>
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a7d      	ldr	r2, [pc, #500]	; (80099fc <UART_SetConfig+0x2ec>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d138      	bne.n	800987c <UART_SetConfig+0x16c>
 800980a:	4b7b      	ldr	r3, [pc, #492]	; (80099f8 <UART_SetConfig+0x2e8>)
 800980c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009810:	f003 030c 	and.w	r3, r3, #12
 8009814:	2b0c      	cmp	r3, #12
 8009816:	d82d      	bhi.n	8009874 <UART_SetConfig+0x164>
 8009818:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <UART_SetConfig+0x110>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	08009855 	.word	0x08009855
 8009824:	08009875 	.word	0x08009875
 8009828:	08009875 	.word	0x08009875
 800982c:	08009875 	.word	0x08009875
 8009830:	08009865 	.word	0x08009865
 8009834:	08009875 	.word	0x08009875
 8009838:	08009875 	.word	0x08009875
 800983c:	08009875 	.word	0x08009875
 8009840:	0800985d 	.word	0x0800985d
 8009844:	08009875 	.word	0x08009875
 8009848:	08009875 	.word	0x08009875
 800984c:	08009875 	.word	0x08009875
 8009850:	0800986d 	.word	0x0800986d
 8009854:	2300      	movs	r3, #0
 8009856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800985a:	e098      	b.n	800998e <UART_SetConfig+0x27e>
 800985c:	2302      	movs	r3, #2
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009862:	e094      	b.n	800998e <UART_SetConfig+0x27e>
 8009864:	2304      	movs	r3, #4
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800986a:	e090      	b.n	800998e <UART_SetConfig+0x27e>
 800986c:	2308      	movs	r3, #8
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009872:	e08c      	b.n	800998e <UART_SetConfig+0x27e>
 8009874:	2310      	movs	r3, #16
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987a:	e088      	b.n	800998e <UART_SetConfig+0x27e>
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a5f      	ldr	r2, [pc, #380]	; (8009a00 <UART_SetConfig+0x2f0>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d125      	bne.n	80098d2 <UART_SetConfig+0x1c2>
 8009886:	4b5c      	ldr	r3, [pc, #368]	; (80099f8 <UART_SetConfig+0x2e8>)
 8009888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009890:	2b30      	cmp	r3, #48	; 0x30
 8009892:	d016      	beq.n	80098c2 <UART_SetConfig+0x1b2>
 8009894:	2b30      	cmp	r3, #48	; 0x30
 8009896:	d818      	bhi.n	80098ca <UART_SetConfig+0x1ba>
 8009898:	2b20      	cmp	r3, #32
 800989a:	d00a      	beq.n	80098b2 <UART_SetConfig+0x1a2>
 800989c:	2b20      	cmp	r3, #32
 800989e:	d814      	bhi.n	80098ca <UART_SetConfig+0x1ba>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <UART_SetConfig+0x19a>
 80098a4:	2b10      	cmp	r3, #16
 80098a6:	d008      	beq.n	80098ba <UART_SetConfig+0x1aa>
 80098a8:	e00f      	b.n	80098ca <UART_SetConfig+0x1ba>
 80098aa:	2300      	movs	r3, #0
 80098ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098b0:	e06d      	b.n	800998e <UART_SetConfig+0x27e>
 80098b2:	2302      	movs	r3, #2
 80098b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098b8:	e069      	b.n	800998e <UART_SetConfig+0x27e>
 80098ba:	2304      	movs	r3, #4
 80098bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098c0:	e065      	b.n	800998e <UART_SetConfig+0x27e>
 80098c2:	2308      	movs	r3, #8
 80098c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098c8:	e061      	b.n	800998e <UART_SetConfig+0x27e>
 80098ca:	2310      	movs	r3, #16
 80098cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098d0:	e05d      	b.n	800998e <UART_SetConfig+0x27e>
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a4b      	ldr	r2, [pc, #300]	; (8009a04 <UART_SetConfig+0x2f4>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d125      	bne.n	8009928 <UART_SetConfig+0x218>
 80098dc:	4b46      	ldr	r3, [pc, #280]	; (80099f8 <UART_SetConfig+0x2e8>)
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80098e6:	2bc0      	cmp	r3, #192	; 0xc0
 80098e8:	d016      	beq.n	8009918 <UART_SetConfig+0x208>
 80098ea:	2bc0      	cmp	r3, #192	; 0xc0
 80098ec:	d818      	bhi.n	8009920 <UART_SetConfig+0x210>
 80098ee:	2b80      	cmp	r3, #128	; 0x80
 80098f0:	d00a      	beq.n	8009908 <UART_SetConfig+0x1f8>
 80098f2:	2b80      	cmp	r3, #128	; 0x80
 80098f4:	d814      	bhi.n	8009920 <UART_SetConfig+0x210>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <UART_SetConfig+0x1f0>
 80098fa:	2b40      	cmp	r3, #64	; 0x40
 80098fc:	d008      	beq.n	8009910 <UART_SetConfig+0x200>
 80098fe:	e00f      	b.n	8009920 <UART_SetConfig+0x210>
 8009900:	2300      	movs	r3, #0
 8009902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009906:	e042      	b.n	800998e <UART_SetConfig+0x27e>
 8009908:	2302      	movs	r3, #2
 800990a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800990e:	e03e      	b.n	800998e <UART_SetConfig+0x27e>
 8009910:	2304      	movs	r3, #4
 8009912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009916:	e03a      	b.n	800998e <UART_SetConfig+0x27e>
 8009918:	2308      	movs	r3, #8
 800991a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800991e:	e036      	b.n	800998e <UART_SetConfig+0x27e>
 8009920:	2310      	movs	r3, #16
 8009922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009926:	e032      	b.n	800998e <UART_SetConfig+0x27e>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a30      	ldr	r2, [pc, #192]	; (80099f0 <UART_SetConfig+0x2e0>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d12a      	bne.n	8009988 <UART_SetConfig+0x278>
 8009932:	4b31      	ldr	r3, [pc, #196]	; (80099f8 <UART_SetConfig+0x2e8>)
 8009934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800993c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009940:	d01a      	beq.n	8009978 <UART_SetConfig+0x268>
 8009942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009946:	d81b      	bhi.n	8009980 <UART_SetConfig+0x270>
 8009948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800994c:	d00c      	beq.n	8009968 <UART_SetConfig+0x258>
 800994e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009952:	d815      	bhi.n	8009980 <UART_SetConfig+0x270>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <UART_SetConfig+0x250>
 8009958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800995c:	d008      	beq.n	8009970 <UART_SetConfig+0x260>
 800995e:	e00f      	b.n	8009980 <UART_SetConfig+0x270>
 8009960:	2300      	movs	r3, #0
 8009962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009966:	e012      	b.n	800998e <UART_SetConfig+0x27e>
 8009968:	2302      	movs	r3, #2
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800996e:	e00e      	b.n	800998e <UART_SetConfig+0x27e>
 8009970:	2304      	movs	r3, #4
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009976:	e00a      	b.n	800998e <UART_SetConfig+0x27e>
 8009978:	2308      	movs	r3, #8
 800997a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800997e:	e006      	b.n	800998e <UART_SetConfig+0x27e>
 8009980:	2310      	movs	r3, #16
 8009982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009986:	e002      	b.n	800998e <UART_SetConfig+0x27e>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a17      	ldr	r2, [pc, #92]	; (80099f0 <UART_SetConfig+0x2e0>)
 8009994:	4293      	cmp	r3, r2
 8009996:	f040 80a8 	bne.w	8009aea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800999a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800999e:	2b08      	cmp	r3, #8
 80099a0:	d834      	bhi.n	8009a0c <UART_SetConfig+0x2fc>
 80099a2:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <UART_SetConfig+0x298>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	08009a0d 	.word	0x08009a0d
 80099b0:	080099d5 	.word	0x080099d5
 80099b4:	08009a0d 	.word	0x08009a0d
 80099b8:	080099db 	.word	0x080099db
 80099bc:	08009a0d 	.word	0x08009a0d
 80099c0:	08009a0d 	.word	0x08009a0d
 80099c4:	08009a0d 	.word	0x08009a0d
 80099c8:	080099e3 	.word	0x080099e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099cc:	f7fd feaa 	bl	8007724 <HAL_RCC_GetPCLK1Freq>
 80099d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099d2:	e021      	b.n	8009a18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <UART_SetConfig+0x2f8>)
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099d8:	e01e      	b.n	8009a18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099da:	f7fd fe35 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 80099de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099e0:	e01a      	b.n	8009a18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099e8:	e016      	b.n	8009a18 <UART_SetConfig+0x308>
 80099ea:	bf00      	nop
 80099ec:	cfff69f3 	.word	0xcfff69f3
 80099f0:	40008000 	.word	0x40008000
 80099f4:	40013800 	.word	0x40013800
 80099f8:	40021000 	.word	0x40021000
 80099fc:	40004400 	.word	0x40004400
 8009a00:	40004800 	.word	0x40004800
 8009a04:	40004c00 	.word	0x40004c00
 8009a08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 812a 	beq.w	8009c74 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	4a9e      	ldr	r2, [pc, #632]	; (8009ca0 <UART_SetConfig+0x590>)
 8009a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a32:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	4413      	add	r3, r2
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d305      	bcc.n	8009a50 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d903      	bls.n	8009a58 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a56:	e10d      	b.n	8009c74 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	60bb      	str	r3, [r7, #8]
 8009a5e:	60fa      	str	r2, [r7, #12]
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	4a8e      	ldr	r2, [pc, #568]	; (8009ca0 <UART_SetConfig+0x590>)
 8009a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a7a:	f7f7 f92d 	bl	8000cd8 <__aeabi_uldivmod>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4610      	mov	r0, r2
 8009a84:	4619      	mov	r1, r3
 8009a86:	f04f 0200 	mov.w	r2, #0
 8009a8a:	f04f 0300 	mov.w	r3, #0
 8009a8e:	020b      	lsls	r3, r1, #8
 8009a90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a94:	0202      	lsls	r2, r0, #8
 8009a96:	6979      	ldr	r1, [r7, #20]
 8009a98:	6849      	ldr	r1, [r1, #4]
 8009a9a:	0849      	lsrs	r1, r1, #1
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	eb12 0804 	adds.w	r8, r2, r4
 8009aa6:	eb43 0905 	adc.w	r9, r3, r5
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	469a      	mov	sl, r3
 8009ab2:	4693      	mov	fp, r2
 8009ab4:	4652      	mov	r2, sl
 8009ab6:	465b      	mov	r3, fp
 8009ab8:	4640      	mov	r0, r8
 8009aba:	4649      	mov	r1, r9
 8009abc:	f7f7 f90c 	bl	8000cd8 <__aeabi_uldivmod>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ace:	d308      	bcc.n	8009ae2 <UART_SetConfig+0x3d2>
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad6:	d204      	bcs.n	8009ae2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6a3a      	ldr	r2, [r7, #32]
 8009ade:	60da      	str	r2, [r3, #12]
 8009ae0:	e0c8      	b.n	8009c74 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ae8:	e0c4      	b.n	8009c74 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af2:	d167      	bne.n	8009bc4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d828      	bhi.n	8009b4e <UART_SetConfig+0x43e>
 8009afc:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x3f4>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b29 	.word	0x08009b29
 8009b08:	08009b31 	.word	0x08009b31
 8009b0c:	08009b39 	.word	0x08009b39
 8009b10:	08009b4f 	.word	0x08009b4f
 8009b14:	08009b3f 	.word	0x08009b3f
 8009b18:	08009b4f 	.word	0x08009b4f
 8009b1c:	08009b4f 	.word	0x08009b4f
 8009b20:	08009b4f 	.word	0x08009b4f
 8009b24:	08009b47 	.word	0x08009b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b28:	f7fd fdfc 	bl	8007724 <HAL_RCC_GetPCLK1Freq>
 8009b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b2e:	e014      	b.n	8009b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b30:	f7fd fe0e 	bl	8007750 <HAL_RCC_GetPCLK2Freq>
 8009b34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b36:	e010      	b.n	8009b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b38:	4b5a      	ldr	r3, [pc, #360]	; (8009ca4 <UART_SetConfig+0x594>)
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b3c:	e00d      	b.n	8009b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b3e:	f7fd fd83 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8009b42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b44:	e009      	b.n	8009b5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b4c:	e005      	b.n	8009b5a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 8089 	beq.w	8009c74 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	4a4e      	ldr	r2, [pc, #312]	; (8009ca0 <UART_SetConfig+0x590>)
 8009b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b74:	005a      	lsls	r2, r3, #1
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	441a      	add	r2, r3
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	2b0f      	cmp	r3, #15
 8009b8c:	d916      	bls.n	8009bbc <UART_SetConfig+0x4ac>
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b94:	d212      	bcs.n	8009bbc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	f023 030f 	bic.w	r3, r3, #15
 8009b9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	085b      	lsrs	r3, r3, #1
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	8bfb      	ldrh	r3, [r7, #30]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	8bfa      	ldrh	r2, [r7, #30]
 8009bb8:	60da      	str	r2, [r3, #12]
 8009bba:	e05b      	b.n	8009c74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009bc2:	e057      	b.n	8009c74 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009bc8:	2b08      	cmp	r3, #8
 8009bca:	d828      	bhi.n	8009c1e <UART_SetConfig+0x50e>
 8009bcc:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <UART_SetConfig+0x4c4>)
 8009bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd2:	bf00      	nop
 8009bd4:	08009bf9 	.word	0x08009bf9
 8009bd8:	08009c01 	.word	0x08009c01
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	08009c1f 	.word	0x08009c1f
 8009be4:	08009c0f 	.word	0x08009c0f
 8009be8:	08009c1f 	.word	0x08009c1f
 8009bec:	08009c1f 	.word	0x08009c1f
 8009bf0:	08009c1f 	.word	0x08009c1f
 8009bf4:	08009c17 	.word	0x08009c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bf8:	f7fd fd94 	bl	8007724 <HAL_RCC_GetPCLK1Freq>
 8009bfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bfe:	e014      	b.n	8009c2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c00:	f7fd fda6 	bl	8007750 <HAL_RCC_GetPCLK2Freq>
 8009c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c06:	e010      	b.n	8009c2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c08:	4b26      	ldr	r3, [pc, #152]	; (8009ca4 <UART_SetConfig+0x594>)
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c0c:	e00d      	b.n	8009c2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c0e:	f7fd fd1b 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8009c12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c14:	e009      	b.n	8009c2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c1c:	e005      	b.n	8009c2a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c28:	bf00      	nop
    }

    if (pclk != 0U)
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d021      	beq.n	8009c74 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	4a1a      	ldr	r2, [pc, #104]	; (8009ca0 <UART_SetConfig+0x590>)
 8009c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	085b      	lsrs	r3, r3, #1
 8009c48:	441a      	add	r2, r3
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	2b0f      	cmp	r3, #15
 8009c58:	d909      	bls.n	8009c6e <UART_SetConfig+0x55e>
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c60:	d205      	bcs.n	8009c6e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60da      	str	r2, [r3, #12]
 8009c6c:	e002      	b.n	8009c74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2200      	movs	r2, #0
 8009c88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009c90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3730      	adds	r7, #48	; 0x30
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c9e:	bf00      	nop
 8009ca0:	08013b94 	.word	0x08013b94
 8009ca4:	00f42400 	.word	0x00f42400

08009ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	f003 0308 	and.w	r3, r3, #8
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00a      	beq.n	8009cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00a      	beq.n	8009d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1a:	f003 0304 	and.w	r3, r3, #4
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00a      	beq.n	8009d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	f003 0320 	and.w	r3, r3, #32
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01a      	beq.n	8009dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da6:	d10a      	bne.n	8009dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	605a      	str	r2, [r3, #4]
  }
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b098      	sub	sp, #96	; 0x60
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dfc:	f7f8 fdf0 	bl	80029e0 <HAL_GetTick>
 8009e00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d12f      	bne.n	8009e70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f88e 	bl	8009f40 <UART_WaitOnFlagUntilTimeout>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d022      	beq.n	8009e70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	e853 3f00 	ldrex	r3, [r3]
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e48:	647b      	str	r3, [r7, #68]	; 0x44
 8009e4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e50:	e841 2300 	strex	r3, r2, [r1]
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1e6      	bne.n	8009e2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e063      	b.n	8009f38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d149      	bne.n	8009f12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e86:	2200      	movs	r2, #0
 8009e88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f857 	bl	8009f40 <UART_WaitOnFlagUntilTimeout>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d03c      	beq.n	8009f12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8009eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ebe:	e841 2300 	strex	r3, r2, [r1]
 8009ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1e6      	bne.n	8009e98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3308      	adds	r3, #8
 8009ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	e853 3f00 	ldrex	r3, [r3]
 8009ed8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eea:	61fa      	str	r2, [r7, #28]
 8009eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eee:	69b9      	ldr	r1, [r7, #24]
 8009ef0:	69fa      	ldr	r2, [r7, #28]
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e5      	bne.n	8009eca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e012      	b.n	8009f38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2220      	movs	r2, #32
 8009f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3758      	adds	r7, #88	; 0x58
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f50:	e04f      	b.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f58:	d04b      	beq.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f5a:	f7f8 fd41 	bl	80029e0 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d302      	bcc.n	8009f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e04e      	b.n	800a012 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d037      	beq.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b80      	cmp	r3, #128	; 0x80
 8009f86:	d034      	beq.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b40      	cmp	r3, #64	; 0x40
 8009f8c:	d031      	beq.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	f003 0308 	and.w	r3, r3, #8
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d110      	bne.n	8009fbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2208      	movs	r2, #8
 8009fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f920 	bl	800a1ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2208      	movs	r2, #8
 8009fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e029      	b.n	800a012 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fcc:	d111      	bne.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 f906 	bl	800a1ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e00f      	b.n	800a012 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69da      	ldr	r2, [r3, #28]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	bf0c      	ite	eq
 800a002:	2301      	moveq	r3, #1
 800a004:	2300      	movne	r3, #0
 800a006:	b2db      	uxtb	r3, r3
 800a008:	461a      	mov	r2, r3
 800a00a:	79fb      	ldrb	r3, [r7, #7]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d0a0      	beq.n	8009f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b096      	sub	sp, #88	; 0x58
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	88fa      	ldrh	r2, [r7, #6]
 800a034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2222      	movs	r2, #34	; 0x22
 800a044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d02d      	beq.n	800a0ae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a058:	4a40      	ldr	r2, [pc, #256]	; (800a15c <UART_Start_Receive_DMA+0x140>)
 800a05a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a062:	4a3f      	ldr	r2, [pc, #252]	; (800a160 <UART_Start_Receive_DMA+0x144>)
 800a064:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a06c:	4a3d      	ldr	r2, [pc, #244]	; (800a164 <UART_Start_Receive_DMA+0x148>)
 800a06e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a076:	2200      	movs	r2, #0
 800a078:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3324      	adds	r3, #36	; 0x24
 800a086:	4619      	mov	r1, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08c:	461a      	mov	r2, r3
 800a08e:	88fb      	ldrh	r3, [r7, #6]
 800a090:	f7fa fb42 	bl	8004718 <HAL_DMA_Start_IT>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2210      	movs	r2, #16
 800a09e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e051      	b.n	800a152 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d018      	beq.n	800a0e8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0be:	e853 3f00 	ldrex	r3, [r3]
 800a0c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e6      	bne.n	800a0b6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	e853 3f00 	ldrex	r3, [r3]
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	f043 0301 	orr.w	r3, r3, #1
 800a0fe:	653b      	str	r3, [r7, #80]	; 0x50
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3308      	adds	r3, #8
 800a106:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a108:	637a      	str	r2, [r7, #52]	; 0x34
 800a10a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a110:	e841 2300 	strex	r3, r2, [r1]
 800a114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1e5      	bne.n	800a0e8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3308      	adds	r3, #8
 800a122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	613b      	str	r3, [r7, #16]
   return(result);
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a132:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a13c:	623a      	str	r2, [r7, #32]
 800a13e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	69f9      	ldr	r1, [r7, #28]
 800a142:	6a3a      	ldr	r2, [r7, #32]
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	61bb      	str	r3, [r7, #24]
   return(result);
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e5      	bne.n	800a11c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3758      	adds	r7, #88	; 0x58
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	0800a2b7 	.word	0x0800a2b7
 800a160:	0800a3e3 	.word	0x0800a3e3
 800a164:	0800a421 	.word	0x0800a421

0800a168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b08f      	sub	sp, #60	; 0x3c
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a184:	637b      	str	r3, [r7, #52]	; 0x34
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a190:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e6      	bne.n	800a170 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a1b8:	633b      	str	r3, [r7, #48]	; 0x30
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c2:	61ba      	str	r2, [r7, #24]
 800a1c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6979      	ldr	r1, [r7, #20]
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e5      	bne.n	800a1a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a1de:	bf00      	nop
 800a1e0:	373c      	adds	r7, #60	; 0x3c
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b095      	sub	sp, #84	; 0x54
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a206:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a210:	643b      	str	r3, [r7, #64]	; 0x40
 800a212:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e6      	bne.n	800a1f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3308      	adds	r3, #8
 800a22a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	e853 3f00 	ldrex	r3, [r3]
 800a232:	61fb      	str	r3, [r7, #28]
   return(result);
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a23a:	f023 0301 	bic.w	r3, r3, #1
 800a23e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3308      	adds	r3, #8
 800a246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a24e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a250:	e841 2300 	strex	r3, r2, [r1]
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e3      	bne.n	800a224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a260:	2b01      	cmp	r3, #1
 800a262:	d118      	bne.n	800a296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	e853 3f00 	ldrex	r3, [r3]
 800a270:	60bb      	str	r3, [r7, #8]
   return(result);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f023 0310 	bic.w	r3, r3, #16
 800a278:	647b      	str	r3, [r7, #68]	; 0x44
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a282:	61bb      	str	r3, [r7, #24]
 800a284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a286:	6979      	ldr	r1, [r7, #20]
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	e841 2300 	strex	r3, r2, [r1]
 800a28e:	613b      	str	r3, [r7, #16]
   return(result);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1e6      	bne.n	800a264 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a2aa:	bf00      	nop
 800a2ac:	3754      	adds	r7, #84	; 0x54
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b09c      	sub	sp, #112	; 0x70
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d171      	bne.n	800a3b6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a2d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e6      	bne.n	800a2da <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3308      	adds	r3, #8
 800a312:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31e:	f023 0301 	bic.w	r3, r3, #1
 800a322:	667b      	str	r3, [r7, #100]	; 0x64
 800a324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3308      	adds	r3, #8
 800a32a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a32c:	647a      	str	r2, [r7, #68]	; 0x44
 800a32e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a334:	e841 2300 	strex	r3, r2, [r1]
 800a338:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e5      	bne.n	800a30c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3308      	adds	r3, #8
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	623b      	str	r3, [r7, #32]
   return(result);
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a356:	663b      	str	r3, [r7, #96]	; 0x60
 800a358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3308      	adds	r3, #8
 800a35e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a360:	633a      	str	r2, [r7, #48]	; 0x30
 800a362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e5      	bne.n	800a340 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a376:	2220      	movs	r2, #32
 800a378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a37c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a380:	2b01      	cmp	r3, #1
 800a382:	d118      	bne.n	800a3b6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	60fb      	str	r3, [r7, #12]
   return(result);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f023 0310 	bic.w	r3, r3, #16
 800a398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3a2:	61fb      	str	r3, [r7, #28]
 800a3a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	69b9      	ldr	r1, [r7, #24]
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	617b      	str	r3, [r7, #20]
   return(result);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e6      	bne.n	800a384 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d107      	bne.n	800a3d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3ce:	f7ff f993 	bl	80096f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3d2:	e002      	b.n	800a3da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a3d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3d6:	f7f8 fa03 	bl	80027e0 <HAL_UART_RxCpltCallback>
}
 800a3da:	bf00      	nop
 800a3dc:	3770      	adds	r7, #112	; 0x70
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d109      	bne.n	800a412 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a404:	085b      	lsrs	r3, r3, #1
 800a406:	b29b      	uxth	r3, r3
 800a408:	4619      	mov	r1, r3
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff f974 	bl	80096f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a410:	e002      	b.n	800a418 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f7ff f95c 	bl	80096d0 <HAL_UART_RxHalfCpltCallback>
}
 800a418:	bf00      	nop
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a434:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a43c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a448:	2b80      	cmp	r3, #128	; 0x80
 800a44a:	d109      	bne.n	800a460 <UART_DMAError+0x40>
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2b21      	cmp	r3, #33	; 0x21
 800a450:	d106      	bne.n	800a460 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2200      	movs	r2, #0
 800a456:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a45a:	6978      	ldr	r0, [r7, #20]
 800a45c:	f7ff fe84 	bl	800a168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46a:	2b40      	cmp	r3, #64	; 0x40
 800a46c:	d109      	bne.n	800a482 <UART_DMAError+0x62>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b22      	cmp	r3, #34	; 0x22
 800a472:	d106      	bne.n	800a482 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2200      	movs	r2, #0
 800a478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a47c:	6978      	ldr	r0, [r7, #20]
 800a47e:	f7ff feb4 	bl	800a1ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a488:	f043 0210 	orr.w	r2, r3, #16
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a492:	6978      	ldr	r0, [r7, #20]
 800a494:	f7ff f926 	bl	80096e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a498:	bf00      	nop
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff f910 	bl	80096e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4c4:	bf00      	nop
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	e853 3f00 	ldrex	r3, [r3]
 800a4e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	61bb      	str	r3, [r7, #24]
 800a4f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	6979      	ldr	r1, [r7, #20]
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e6      	bne.n	800a4d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2220      	movs	r2, #32
 800a50a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff f8d1 	bl	80096bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a51a:	bf00      	nop
 800a51c:	3720      	adds	r7, #32
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d101      	bne.n	800a574 <HAL_UARTEx_DisableFifoMode+0x16>
 800a570:	2302      	movs	r3, #2
 800a572:	e027      	b.n	800a5c4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2224      	movs	r2, #36	; 0x24
 800a580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f022 0201 	bic.w	r2, r2, #1
 800a59a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a5a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e02d      	b.n	800a644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2224      	movs	r2, #36	; 0x24
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f022 0201 	bic.w	r2, r2, #1
 800a60e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f84f 	bl	800a6c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d101      	bne.n	800a664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a660:	2302      	movs	r3, #2
 800a662:	e02d      	b.n	800a6c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2224      	movs	r2, #36	; 0x24
 800a670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0201 	bic.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f811 	bl	800a6c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d108      	bne.n	800a6ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6e8:	e031      	b.n	800a74e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6ea:	2308      	movs	r3, #8
 800a6ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ee:	2308      	movs	r3, #8
 800a6f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	0e5b      	lsrs	r3, r3, #25
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 0307 	and.w	r3, r3, #7
 800a700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	0f5b      	lsrs	r3, r3, #29
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	7b3a      	ldrb	r2, [r7, #12]
 800a716:	4911      	ldr	r1, [pc, #68]	; (800a75c <UARTEx_SetNbDataToProcess+0x94>)
 800a718:	5c8a      	ldrb	r2, [r1, r2]
 800a71a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a71e:	7b3a      	ldrb	r2, [r7, #12]
 800a720:	490f      	ldr	r1, [pc, #60]	; (800a760 <UARTEx_SetNbDataToProcess+0x98>)
 800a722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a724:	fb93 f3f2 	sdiv	r3, r3, r2
 800a728:	b29a      	uxth	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	7b7a      	ldrb	r2, [r7, #13]
 800a734:	4909      	ldr	r1, [pc, #36]	; (800a75c <UARTEx_SetNbDataToProcess+0x94>)
 800a736:	5c8a      	ldrb	r2, [r1, r2]
 800a738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a73c:	7b7a      	ldrb	r2, [r7, #13]
 800a73e:	4908      	ldr	r1, [pc, #32]	; (800a760 <UARTEx_SetNbDataToProcess+0x98>)
 800a740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a742:	fb93 f3f2 	sdiv	r3, r3, r2
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a74e:	bf00      	nop
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	08013bac 	.word	0x08013bac
 800a760:	08013bb4 	.word	0x08013bb4

0800a764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a774:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a778:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a792:	b480      	push	{r7}
 800a794:	b085      	sub	sp, #20
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a79a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a79e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	1d3b      	adds	r3, r7, #4
 800a7d2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a804:	b480      	push	{r7}
 800a806:	b09d      	sub	sp, #116	; 0x74
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	78db      	ldrb	r3, [r3, #3]
 800a832:	2b03      	cmp	r3, #3
 800a834:	d81f      	bhi.n	800a876 <USB_ActivateEndpoint+0x72>
 800a836:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <USB_ActivateEndpoint+0x38>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a84d 	.word	0x0800a84d
 800a840:	0800a869 	.word	0x0800a869
 800a844:	0800a87f 	.word	0x0800a87f
 800a848:	0800a85b 	.word	0x0800a85b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a84c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a854:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a858:	e012      	b.n	800a880 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a85a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a85e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a862:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a866:	e00b      	b.n	800a880 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a868:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a86c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a870:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a874:	e004      	b.n	800a880 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a87c:	e000      	b.n	800a880 <USB_ActivateEndpoint+0x7c>
      break;
 800a87e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	441a      	add	r2, r3
 800a88a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	b21b      	sxth	r3, r3
 800a8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ba:	b21a      	sxth	r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	b21b      	sxth	r3, r3
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	b21b      	sxth	r3, r3
 800a8c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	441a      	add	r2, r3
 800a8d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a8d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	7b1b      	ldrb	r3, [r3, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f040 8178 	bne.w	800abe6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	785b      	ldrb	r3, [r3, #1]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 8084 	beq.w	800aa08 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	61bb      	str	r3, [r7, #24]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	461a      	mov	r2, r3
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	4413      	add	r3, r2
 800a912:	61bb      	str	r3, [r7, #24]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	00da      	lsls	r2, r3, #3
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	88db      	ldrh	r3, [r3, #6]
 800a928:	085b      	lsrs	r3, r3, #1
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	827b      	strh	r3, [r7, #18]
 800a942:	8a7b      	ldrh	r3, [r7, #18]
 800a944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01b      	beq.n	800a984 <USB_ActivateEndpoint+0x180>
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a962:	823b      	strh	r3, [r7, #16]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	441a      	add	r2, r3
 800a96e:	8a3b      	ldrh	r3, [r7, #16]
 800a970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a97c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a980:	b29b      	uxth	r3, r3
 800a982:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	78db      	ldrb	r3, [r3, #3]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d020      	beq.n	800a9ce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a99e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9a2:	81bb      	strh	r3, [r7, #12]
 800a9a4:	89bb      	ldrh	r3, [r7, #12]
 800a9a6:	f083 0320 	eor.w	r3, r3, #32
 800a9aa:	81bb      	strh	r3, [r7, #12]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	441a      	add	r2, r3
 800a9b6:	89bb      	ldrh	r3, [r7, #12]
 800a9b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	8013      	strh	r3, [r2, #0]
 800a9cc:	e2d5      	b.n	800af7a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9e4:	81fb      	strh	r3, [r7, #14]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	441a      	add	r2, r3
 800a9f0:	89fb      	ldrh	r3, [r7, #14]
 800a9f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	8013      	strh	r3, [r2, #0]
 800aa06:	e2b8      	b.n	800af7a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	633b      	str	r3, [r7, #48]	; 0x30
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	461a      	mov	r2, r3
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	4413      	add	r3, r2
 800aa1a:	633b      	str	r3, [r7, #48]	; 0x30
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	00da      	lsls	r2, r3, #3
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	4413      	add	r3, r2
 800aa26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	88db      	ldrh	r3, [r3, #6]
 800aa30:	085b      	lsrs	r3, r3, #1
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	4413      	add	r3, r2
 800aa4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	00da      	lsls	r2, r3, #3
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	4413      	add	r3, r2
 800aa5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	801a      	strh	r2, [r3, #0]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b3e      	cmp	r3, #62	; 0x3e
 800aa76:	d91d      	bls.n	800aab4 <USB_ActivateEndpoint+0x2b0>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	095b      	lsrs	r3, r3, #5
 800aa7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	f003 031f 	and.w	r3, r3, #31
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <USB_ActivateEndpoint+0x28e>
 800aa8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	881b      	ldrh	r3, [r3, #0]
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	029b      	lsls	r3, r3, #10
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	801a      	strh	r2, [r3, #0]
 800aab2:	e026      	b.n	800ab02 <USB_ActivateEndpoint+0x2fe>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <USB_ActivateEndpoint+0x2ce>
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	801a      	strh	r2, [r3, #0]
 800aad0:	e017      	b.n	800ab02 <USB_ActivateEndpoint+0x2fe>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	66bb      	str	r3, [r7, #104]	; 0x68
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d002      	beq.n	800aaec <USB_ActivateEndpoint+0x2e8>
 800aae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aae8:	3301      	adds	r3, #1
 800aaea:	66bb      	str	r3, [r7, #104]	; 0x68
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	029b      	lsls	r3, r3, #10
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	4313      	orrs	r3, r2
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	847b      	strh	r3, [r7, #34]	; 0x22
 800ab10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01b      	beq.n	800ab52 <USB_ActivateEndpoint+0x34e>
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab30:	843b      	strh	r3, [r7, #32]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	441a      	add	r2, r3
 800ab3c:	8c3b      	ldrh	r3, [r7, #32]
 800ab3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d124      	bne.n	800aba4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab70:	83bb      	strh	r3, [r7, #28]
 800ab72:	8bbb      	ldrh	r3, [r7, #28]
 800ab74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab78:	83bb      	strh	r3, [r7, #28]
 800ab7a:	8bbb      	ldrh	r3, [r7, #28]
 800ab7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab80:	83bb      	strh	r3, [r7, #28]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	441a      	add	r2, r3
 800ab8c:	8bbb      	ldrh	r3, [r7, #28]
 800ab8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	8013      	strh	r3, [r2, #0]
 800aba2:	e1ea      	b.n	800af7a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abba:	83fb      	strh	r3, [r7, #30]
 800abbc:	8bfb      	ldrh	r3, [r7, #30]
 800abbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800abc2:	83fb      	strh	r3, [r7, #30]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	441a      	add	r2, r3
 800abce:	8bfb      	ldrh	r3, [r7, #30]
 800abd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	8013      	strh	r3, [r2, #0]
 800abe4:	e1c9      	b.n	800af7a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	78db      	ldrb	r3, [r3, #3]
 800abea:	2b02      	cmp	r3, #2
 800abec:	d11e      	bne.n	800ac2c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac04:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	441a      	add	r2, r3
 800ac12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ac16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ac22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	8013      	strh	r3, [r2, #0]
 800ac2a:	e01d      	b.n	800ac68 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ac3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	441a      	add	r2, r3
 800ac50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ac54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	461a      	mov	r2, r3
 800ac76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac78:	4413      	add	r3, r2
 800ac7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	00da      	lsls	r2, r3, #3
 800ac82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	891b      	ldrh	r3, [r3, #8]
 800ac90:	085b      	lsrs	r3, r3, #1
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac9a:	801a      	strh	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	657b      	str	r3, [r7, #84]	; 0x54
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acac:	4413      	add	r3, r2
 800acae:	657b      	str	r3, [r7, #84]	; 0x54
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	00da      	lsls	r2, r3, #3
 800acb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acb8:	4413      	add	r3, r2
 800acba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800acbe:	653b      	str	r3, [r7, #80]	; 0x50
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	895b      	ldrh	r3, [r3, #10]
 800acc4:	085b      	lsrs	r3, r3, #1
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	b29a      	uxth	r2, r3
 800accc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f040 8093 	bne.w	800ae00 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800acea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800acee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01b      	beq.n	800ad2e <USB_ActivateEndpoint+0x52a>
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	441a      	add	r2, r3
 800ad18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ad3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d01b      	beq.n	800ad7e <USB_ActivateEndpoint+0x57a>
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad5c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	441a      	add	r2, r3
 800ad68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad94:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad9c:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ada0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ada4:	873b      	strh	r3, [r7, #56]	; 0x38
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	441a      	add	r2, r3
 800adb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800adb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800add8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800addc:	86fb      	strh	r3, [r7, #54]	; 0x36
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	441a      	add	r2, r3
 800ade8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800adea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	8013      	strh	r3, [r2, #0]
 800adfe:	e0bc      	b.n	800af7a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ae10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ae14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d01d      	beq.n	800ae58 <USB_ActivateEndpoint+0x654>
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	441a      	add	r2, r3
 800ae40:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ae44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ae68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ae6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01d      	beq.n	800aeb0 <USB_ActivateEndpoint+0x6ac>
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	441a      	add	r2, r3
 800ae98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ae9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aea8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	78db      	ldrb	r3, [r3, #3]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d024      	beq.n	800af02 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aece:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aed2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aed6:	f083 0320 	eor.w	r3, r3, #32
 800aeda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	441a      	add	r2, r3
 800aee8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aeec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	8013      	strh	r3, [r2, #0]
 800af00:	e01d      	b.n	800af3e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	441a      	add	r2, r3
 800af26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800af2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	441a      	add	r2, r3
 800af62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af76:	b29b      	uxth	r3, r3
 800af78:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800af7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3774      	adds	r7, #116	; 0x74
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop

0800af8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b08d      	sub	sp, #52	; 0x34
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	7b1b      	ldrb	r3, [r3, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f040 808e 	bne.w	800b0bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	785b      	ldrb	r3, [r3, #1]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d044      	beq.n	800b032 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	81bb      	strh	r3, [r7, #12]
 800afb6:	89bb      	ldrh	r3, [r7, #12]
 800afb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01b      	beq.n	800aff8 <USB_DeactivateEndpoint+0x6c>
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd6:	817b      	strh	r3, [r7, #10]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	441a      	add	r2, r3
 800afe2:	897b      	ldrh	r3, [r7, #10]
 800afe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	b29b      	uxth	r3, r3
 800b006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b00a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b00e:	813b      	strh	r3, [r7, #8]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	441a      	add	r2, r3
 800b01a:	893b      	ldrh	r3, [r7, #8]
 800b01c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	8013      	strh	r3, [r2, #0]
 800b030:	e192      	b.n	800b358 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	827b      	strh	r3, [r7, #18]
 800b040:	8a7b      	ldrh	r3, [r7, #18]
 800b042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01b      	beq.n	800b082 <USB_DeactivateEndpoint+0xf6>
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b05c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b060:	823b      	strh	r3, [r7, #16]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	441a      	add	r2, r3
 800b06c:	8a3b      	ldrh	r3, [r7, #16]
 800b06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07e:	b29b      	uxth	r3, r3
 800b080:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b098:	81fb      	strh	r3, [r7, #14]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	441a      	add	r2, r3
 800b0a4:	89fb      	ldrh	r3, [r7, #14]
 800b0a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	8013      	strh	r3, [r2, #0]
 800b0ba:	e14d      	b.n	800b358 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	785b      	ldrb	r3, [r3, #1]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f040 80a5 	bne.w	800b210 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	843b      	strh	r3, [r7, #32]
 800b0d4:	8c3b      	ldrh	r3, [r7, #32]
 800b0d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d01b      	beq.n	800b116 <USB_DeactivateEndpoint+0x18a>
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f4:	83fb      	strh	r3, [r7, #30]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	441a      	add	r2, r3
 800b100:	8bfb      	ldrh	r3, [r7, #30]
 800b102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b10a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b112:	b29b      	uxth	r3, r3
 800b114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	83bb      	strh	r3, [r7, #28]
 800b124:	8bbb      	ldrh	r3, [r7, #28]
 800b126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d01b      	beq.n	800b166 <USB_DeactivateEndpoint+0x1da>
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b144:	837b      	strh	r3, [r7, #26]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	441a      	add	r2, r3
 800b150:	8b7b      	ldrh	r3, [r7, #26]
 800b152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b15a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b15e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b162:	b29b      	uxth	r3, r3
 800b164:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	b29b      	uxth	r3, r3
 800b174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b17c:	833b      	strh	r3, [r7, #24]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	441a      	add	r2, r3
 800b188:	8b3b      	ldrh	r3, [r7, #24]
 800b18a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b18e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b196:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1b4:	82fb      	strh	r3, [r7, #22]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	441a      	add	r2, r3
 800b1c0:	8afb      	ldrh	r3, [r7, #22]
 800b1c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ec:	82bb      	strh	r3, [r7, #20]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	441a      	add	r2, r3
 800b1f8:	8abb      	ldrh	r3, [r7, #20]
 800b1fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	8013      	strh	r3, [r2, #0]
 800b20e:	e0a3      	b.n	800b358 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b21e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01b      	beq.n	800b260 <USB_DeactivateEndpoint+0x2d4>
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	b29b      	uxth	r3, r3
 800b236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b23e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	441a      	add	r2, r3
 800b24a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b24c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b26e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b274:	2b00      	cmp	r3, #0
 800b276:	d01b      	beq.n	800b2b0 <USB_DeactivateEndpoint+0x324>
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	b29b      	uxth	r3, r3
 800b286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b28a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b28e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	441a      	add	r2, r3
 800b29a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b29c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	441a      	add	r2, r3
 800b2d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	441a      	add	r2, r3
 800b30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b30c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b336:	847b      	strh	r3, [r7, #34]	; 0x22
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	441a      	add	r2, r3
 800b342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b34c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b354:	b29b      	uxth	r3, r3
 800b356:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3734      	adds	r7, #52	; 0x34
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b0c2      	sub	sp, #264	; 0x108
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b374:	6018      	str	r0, [r3, #0]
 800b376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b37a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	785b      	ldrb	r3, [r3, #1]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	f040 86b7 	bne.w	800c100 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	699a      	ldr	r2, [r3, #24]
 800b39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d908      	bls.n	800b3c0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b3be:	e007      	b.n	800b3d0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	7b1b      	ldrb	r3, [r3, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d13a      	bne.n	800b456 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6959      	ldr	r1, [r3, #20]
 800b3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	88da      	ldrh	r2, [r3, #6]
 800b3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b402:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b406:	6800      	ldr	r0, [r0, #0]
 800b408:	f001 fc98 	bl	800cd3c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	613b      	str	r3, [r7, #16]
 800b418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b426:	b29b      	uxth	r3, r3
 800b428:	461a      	mov	r2, r3
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	4413      	add	r3, r2
 800b42e:	613b      	str	r3, [r7, #16]
 800b430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	00da      	lsls	r2, r3, #3
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	4413      	add	r3, r2
 800b442:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	801a      	strh	r2, [r3, #0]
 800b452:	f000 be1f 	b.w	800c094 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	78db      	ldrb	r3, [r3, #3]
 800b462:	2b02      	cmp	r3, #2
 800b464:	f040 8462 	bne.w	800bd2c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6a1a      	ldr	r2, [r3, #32]
 800b474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	429a      	cmp	r2, r3
 800b482:	f240 83df 	bls.w	800bc44 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	441a      	add	r2, r3
 800b4ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b4ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6a1a      	ldr	r2, [r3, #32]
 800b4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f2:	1ad2      	subs	r2, r2, r3
 800b4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 81c7 	beq.w	800b8b6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b52c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	633b      	str	r3, [r7, #48]	; 0x30
 800b534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d177      	bne.n	800b634 <USB_EPStartXfer+0x2ce>
 800b544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b55e:	b29b      	uxth	r3, r3
 800b560:	461a      	mov	r2, r3
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	4413      	add	r3, r2
 800b566:	62bb      	str	r3, [r7, #40]	; 0x28
 800b568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	00da      	lsls	r2, r3, #3
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	4413      	add	r3, r2
 800b57a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	b29b      	uxth	r3, r3
 800b586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	801a      	strh	r2, [r3, #0]
 800b590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b594:	2b3e      	cmp	r3, #62	; 0x3e
 800b596:	d921      	bls.n	800b5dc <USB_EPStartXfer+0x276>
 800b598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59c:	095b      	lsrs	r3, r3, #5
 800b59e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a6:	f003 031f 	and.w	r3, r3, #31
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <USB_EPStartXfer+0x252>
 800b5ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	029b      	lsls	r3, r3, #10
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	801a      	strh	r2, [r3, #0]
 800b5da:	e050      	b.n	800b67e <USB_EPStartXfer+0x318>
 800b5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10a      	bne.n	800b5fa <USB_EPStartXfer+0x294>
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	e041      	b.n	800b67e <USB_EPStartXfer+0x318>
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	085b      	lsrs	r3, r3, #1
 800b600:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d004      	beq.n	800b61a <USB_EPStartXfer+0x2b4>
 800b610:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b614:	3301      	adds	r3, #1
 800b616:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	b29a      	uxth	r2, r3
 800b620:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b624:	b29b      	uxth	r3, r3
 800b626:	029b      	lsls	r3, r3, #10
 800b628:	b29b      	uxth	r3, r3
 800b62a:	4313      	orrs	r3, r2
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	801a      	strh	r2, [r3, #0]
 800b632:	e024      	b.n	800b67e <USB_EPStartXfer+0x318>
 800b634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	785b      	ldrb	r3, [r3, #1]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d11c      	bne.n	800b67e <USB_EPStartXfer+0x318>
 800b644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b652:	b29b      	uxth	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	4413      	add	r3, r2
 800b65a:	633b      	str	r3, [r7, #48]	; 0x30
 800b65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	00da      	lsls	r2, r3, #3
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	4413      	add	r3, r2
 800b66e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b672:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b678:	b29a      	uxth	r2, r3
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	895b      	ldrh	r3, [r3, #10]
 800b68a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6959      	ldr	r1, [r3, #20]
 800b69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b6a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b6a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b6ac:	6800      	ldr	r0, [r0, #0]
 800b6ae:	f001 fb45 	bl	800cd3c <USB_WritePMA>
            ep->xfer_buff += len;
 800b6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	695a      	ldr	r2, [r3, #20]
 800b6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c2:	441a      	add	r2, r3
 800b6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6a1a      	ldr	r2, [r3, #32]
 800b6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d90f      	bls.n	800b70c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6a1a      	ldr	r2, [r3, #32]
 800b6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fc:	1ad2      	subs	r2, r2, r3
 800b6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	621a      	str	r2, [r3, #32]
 800b70a:	e00e      	b.n	800b72a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2200      	movs	r2, #0
 800b728:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	785b      	ldrb	r3, [r3, #1]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d177      	bne.n	800b82a <USB_EPStartXfer+0x4c4>
 800b73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	61bb      	str	r3, [r7, #24]
 800b746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b754:	b29b      	uxth	r3, r3
 800b756:	461a      	mov	r2, r3
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	4413      	add	r3, r2
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	00da      	lsls	r2, r3, #3
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	4413      	add	r3, r2
 800b770:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b774:	617b      	str	r3, [r7, #20]
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b780:	b29a      	uxth	r2, r3
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	801a      	strh	r2, [r3, #0]
 800b786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78a:	2b3e      	cmp	r3, #62	; 0x3e
 800b78c:	d921      	bls.n	800b7d2 <USB_EPStartXfer+0x46c>
 800b78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79c:	f003 031f 	and.w	r3, r3, #31
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d104      	bne.n	800b7ae <USB_EPStartXfer+0x448>
 800b7a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	029b      	lsls	r3, r3, #10
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	801a      	strh	r2, [r3, #0]
 800b7d0:	e056      	b.n	800b880 <USB_EPStartXfer+0x51a>
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <USB_EPStartXfer+0x48a>
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	801a      	strh	r2, [r3, #0]
 800b7ee:	e047      	b.n	800b880 <USB_EPStartXfer+0x51a>
 800b7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f4:	085b      	lsrs	r3, r3, #1
 800b7f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	d004      	beq.n	800b810 <USB_EPStartXfer+0x4aa>
 800b806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b80a:	3301      	adds	r3, #1
 800b80c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	b29a      	uxth	r2, r3
 800b816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	029b      	lsls	r3, r3, #10
 800b81e:	b29b      	uxth	r3, r3
 800b820:	4313      	orrs	r3, r2
 800b822:	b29a      	uxth	r2, r3
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	801a      	strh	r2, [r3, #0]
 800b828:	e02a      	b.n	800b880 <USB_EPStartXfer+0x51a>
 800b82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d122      	bne.n	800b880 <USB_EPStartXfer+0x51a>
 800b83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	623b      	str	r3, [r7, #32]
 800b846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b854:	b29b      	uxth	r3, r3
 800b856:	461a      	mov	r2, r3
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	4413      	add	r3, r2
 800b85c:	623b      	str	r3, [r7, #32]
 800b85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	00da      	lsls	r2, r3, #3
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	4413      	add	r3, r2
 800b870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b874:	61fb      	str	r3, [r7, #28]
 800b876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	891b      	ldrh	r3, [r3, #8]
 800b88c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6959      	ldr	r1, [r3, #20]
 800b89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8ae:	6800      	ldr	r0, [r0, #0]
 800b8b0:	f001 fa44 	bl	800cd3c <USB_WritePMA>
 800b8b4:	e3ee      	b.n	800c094 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	785b      	ldrb	r3, [r3, #1]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d177      	bne.n	800b9b6 <USB_EPStartXfer+0x650>
 800b8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8e6:	4413      	add	r3, r2
 800b8e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	00da      	lsls	r2, r3, #3
 800b8f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b900:	647b      	str	r3, [r7, #68]	; 0x44
 800b902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	b29b      	uxth	r3, r3
 800b908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b910:	801a      	strh	r2, [r3, #0]
 800b912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b916:	2b3e      	cmp	r3, #62	; 0x3e
 800b918:	d921      	bls.n	800b95e <USB_EPStartXfer+0x5f8>
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91e:	095b      	lsrs	r3, r3, #5
 800b920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	f003 031f 	and.w	r3, r3, #31
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d104      	bne.n	800b93a <USB_EPStartXfer+0x5d4>
 800b930:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b934:	3b01      	subs	r3, #1
 800b936:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29a      	uxth	r2, r3
 800b940:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b944:	b29b      	uxth	r3, r3
 800b946:	029b      	lsls	r3, r3, #10
 800b948:	b29b      	uxth	r3, r3
 800b94a:	4313      	orrs	r3, r2
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b956:	b29a      	uxth	r2, r3
 800b958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	e056      	b.n	800ba0c <USB_EPStartXfer+0x6a6>
 800b95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10a      	bne.n	800b97c <USB_EPStartXfer+0x616>
 800b966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b974:	b29a      	uxth	r2, r3
 800b976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b978:	801a      	strh	r2, [r3, #0]
 800b97a:	e047      	b.n	800ba0c <USB_EPStartXfer+0x6a6>
 800b97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b980:	085b      	lsrs	r3, r3, #1
 800b982:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98a:	f003 0301 	and.w	r3, r3, #1
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d004      	beq.n	800b99c <USB_EPStartXfer+0x636>
 800b992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b996:	3301      	adds	r3, #1
 800b998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	029b      	lsls	r3, r3, #10
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b2:	801a      	strh	r2, [r3, #0]
 800b9b4:	e02a      	b.n	800ba0c <USB_EPStartXfer+0x6a6>
 800b9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	785b      	ldrb	r3, [r3, #1]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d122      	bne.n	800ba0c <USB_EPStartXfer+0x6a6>
 800b9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e6:	4413      	add	r3, r2
 800b9e8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	00da      	lsls	r2, r3, #3
 800b9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ba0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	891b      	ldrh	r3, [r3, #8]
 800ba18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	6959      	ldr	r1, [r3, #20]
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ba36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ba3a:	6800      	ldr	r0, [r0, #0]
 800ba3c:	f001 f97e 	bl	800cd3c <USB_WritePMA>
            ep->xfer_buff += len;
 800ba40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	695a      	ldr	r2, [r3, #20]
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba50:	441a      	add	r2, r3
 800ba52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ba5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6a1a      	ldr	r2, [r3, #32]
 800ba6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d90f      	bls.n	800ba9a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ba7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6a1a      	ldr	r2, [r3, #32]
 800ba86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8a:	1ad2      	subs	r2, r2, r3
 800ba8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	621a      	str	r2, [r3, #32]
 800ba98:	e00e      	b.n	800bab8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ba9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800baaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2200      	movs	r2, #0
 800bab6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800babc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	643b      	str	r3, [r7, #64]	; 0x40
 800bac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	785b      	ldrb	r3, [r3, #1]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d177      	bne.n	800bbc4 <USB_EPStartXfer+0x85e>
 800bad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	63bb      	str	r3, [r7, #56]	; 0x38
 800bae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baee:	b29b      	uxth	r3, r3
 800baf0:	461a      	mov	r2, r3
 800baf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf4:	4413      	add	r3, r2
 800baf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800baf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	00da      	lsls	r2, r3, #3
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	4413      	add	r3, r2
 800bb0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1e:	801a      	strh	r2, [r3, #0]
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	2b3e      	cmp	r3, #62	; 0x3e
 800bb26:	d921      	bls.n	800bb6c <USB_EPStartXfer+0x806>
 800bb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2c:	095b      	lsrs	r3, r3, #5
 800bb2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb36:	f003 031f 	and.w	r3, r3, #31
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d104      	bne.n	800bb48 <USB_EPStartXfer+0x7e2>
 800bb3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb42:	3b01      	subs	r3, #1
 800bb44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4a:	881b      	ldrh	r3, [r3, #0]
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	029b      	lsls	r3, r3, #10
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	801a      	strh	r2, [r3, #0]
 800bb6a:	e050      	b.n	800bc0e <USB_EPStartXfer+0x8a8>
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10a      	bne.n	800bb8a <USB_EPStartXfer+0x824>
 800bb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb86:	801a      	strh	r2, [r3, #0]
 800bb88:	e041      	b.n	800bc0e <USB_EPStartXfer+0x8a8>
 800bb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8e:	085b      	lsrs	r3, r3, #1
 800bb90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d004      	beq.n	800bbaa <USB_EPStartXfer+0x844>
 800bba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba4:	3301      	adds	r3, #1
 800bba6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	029b      	lsls	r3, r3, #10
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc0:	801a      	strh	r2, [r3, #0]
 800bbc2:	e024      	b.n	800bc0e <USB_EPStartXfer+0x8a8>
 800bbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	785b      	ldrb	r3, [r3, #1]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d11c      	bne.n	800bc0e <USB_EPStartXfer+0x8a8>
 800bbd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe8:	4413      	add	r3, r2
 800bbea:	643b      	str	r3, [r7, #64]	; 0x40
 800bbec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	00da      	lsls	r2, r3, #3
 800bbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbfc:	4413      	add	r3, r2
 800bbfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bc0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	895b      	ldrh	r3, [r3, #10]
 800bc1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6959      	ldr	r1, [r3, #20]
 800bc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc3c:	6800      	ldr	r0, [r0, #0]
 800bc3e:	f001 f87d 	bl	800cd3c <USB_WritePMA>
 800bc42:	e227      	b.n	800c094 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bc44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bc54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bc76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc7a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bc7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	441a      	add	r2, r3
 800bc98:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bc9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd0:	4413      	add	r3, r2
 800bcd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	00da      	lsls	r2, r3, #3
 800bce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bce4:	4413      	add	r3, r2
 800bce6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcea:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcf4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bcf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	891b      	ldrh	r3, [r3, #8]
 800bd02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6959      	ldr	r1, [r3, #20]
 800bd12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd24:	6800      	ldr	r0, [r0, #0]
 800bd26:	f001 f809 	bl	800cd3c <USB_WritePMA>
 800bd2a:	e1b3      	b.n	800c094 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6a1a      	ldr	r2, [r3, #32]
 800bd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd3c:	1ad2      	subs	r2, r2, r3
 800bd3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 80c6 	beq.w	800befe <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	673b      	str	r3, [r7, #112]	; 0x70
 800bd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d177      	bne.n	800be7e <USB_EPStartXfer+0xb18>
 800bd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdae:	4413      	add	r3, r2
 800bdb0:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	00da      	lsls	r2, r3, #3
 800bdc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bdc8:	667b      	str	r3, [r7, #100]	; 0x64
 800bdca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdd8:	801a      	strh	r2, [r3, #0]
 800bdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdde:	2b3e      	cmp	r3, #62	; 0x3e
 800bde0:	d921      	bls.n	800be26 <USB_EPStartXfer+0xac0>
 800bde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde6:	095b      	lsrs	r3, r3, #5
 800bde8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf0:	f003 031f 	and.w	r3, r3, #31
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <USB_EPStartXfer+0xa9c>
 800bdf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	b29a      	uxth	r2, r3
 800be08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	029b      	lsls	r3, r3, #10
 800be10:	b29b      	uxth	r3, r3
 800be12:	4313      	orrs	r3, r2
 800be14:	b29b      	uxth	r3, r3
 800be16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be1e:	b29a      	uxth	r2, r3
 800be20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be22:	801a      	strh	r2, [r3, #0]
 800be24:	e050      	b.n	800bec8 <USB_EPStartXfer+0xb62>
 800be26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <USB_EPStartXfer+0xade>
 800be2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	b29b      	uxth	r3, r3
 800be34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be40:	801a      	strh	r2, [r3, #0]
 800be42:	e041      	b.n	800bec8 <USB_EPStartXfer+0xb62>
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be48:	085b      	lsrs	r3, r3, #1
 800be4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	d004      	beq.n	800be64 <USB_EPStartXfer+0xafe>
 800be5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be5e:	3301      	adds	r3, #1
 800be60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	b29a      	uxth	r2, r3
 800be6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be6e:	b29b      	uxth	r3, r3
 800be70:	029b      	lsls	r3, r3, #10
 800be72:	b29b      	uxth	r3, r3
 800be74:	4313      	orrs	r3, r2
 800be76:	b29a      	uxth	r2, r3
 800be78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be7a:	801a      	strh	r2, [r3, #0]
 800be7c:	e024      	b.n	800bec8 <USB_EPStartXfer+0xb62>
 800be7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d11c      	bne.n	800bec8 <USB_EPStartXfer+0xb62>
 800be8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	461a      	mov	r2, r3
 800bea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bea2:	4413      	add	r3, r2
 800bea4:	673b      	str	r3, [r7, #112]	; 0x70
 800bea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	00da      	lsls	r2, r3, #3
 800beb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800beb6:	4413      	add	r3, r2
 800beb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bebc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800becc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	895b      	ldrh	r3, [r3, #10]
 800bed4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6959      	ldr	r1, [r3, #20]
 800bee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee8:	b29b      	uxth	r3, r3
 800beea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800beee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bef2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bef6:	6800      	ldr	r0, [r0, #0]
 800bef8:	f000 ff20 	bl	800cd3c <USB_WritePMA>
 800befc:	e0ca      	b.n	800c094 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800befe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	785b      	ldrb	r3, [r3, #1]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d177      	bne.n	800bffe <USB_EPStartXfer+0xc98>
 800bf0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf2e:	4413      	add	r3, r2
 800bf30:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	00da      	lsls	r2, r3, #3
 800bf40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf42:	4413      	add	r3, r2
 800bf44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf48:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf58:	801a      	strh	r2, [r3, #0]
 800bf5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf5e:	2b3e      	cmp	r3, #62	; 0x3e
 800bf60:	d921      	bls.n	800bfa6 <USB_EPStartXfer+0xc40>
 800bf62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf66:	095b      	lsrs	r3, r3, #5
 800bf68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf70:	f003 031f 	and.w	r3, r3, #31
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d104      	bne.n	800bf82 <USB_EPStartXfer+0xc1c>
 800bf78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	029b      	lsls	r3, r3, #10
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	4313      	orrs	r3, r2
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfa2:	801a      	strh	r2, [r3, #0]
 800bfa4:	e05c      	b.n	800c060 <USB_EPStartXfer+0xcfa>
 800bfa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10a      	bne.n	800bfc4 <USB_EPStartXfer+0xc5e>
 800bfae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfc0:	801a      	strh	r2, [r3, #0]
 800bfc2:	e04d      	b.n	800c060 <USB_EPStartXfer+0xcfa>
 800bfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc8:	085b      	lsrs	r3, r3, #1
 800bfca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d004      	beq.n	800bfe4 <USB_EPStartXfer+0xc7e>
 800bfda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfde:	3301      	adds	r3, #1
 800bfe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bfe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	029b      	lsls	r3, r3, #10
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	4313      	orrs	r3, r2
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bffa:	801a      	strh	r2, [r3, #0]
 800bffc:	e030      	b.n	800c060 <USB_EPStartXfer+0xcfa>
 800bffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	785b      	ldrb	r3, [r3, #1]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d128      	bne.n	800c060 <USB_EPStartXfer+0xcfa>
 800c00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	461a      	mov	r2, r3
 800c02e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c032:	4413      	add	r3, r2
 800c034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	00da      	lsls	r2, r3, #3
 800c046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c04a:	4413      	add	r3, r2
 800c04c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c058:	b29a      	uxth	r2, r3
 800c05a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c05e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	891b      	ldrh	r3, [r3, #8]
 800c06c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6959      	ldr	r1, [r3, #20]
 800c07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c080:	b29b      	uxth	r3, r3
 800c082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c086:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c08a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c08e:	6800      	ldr	r0, [r0, #0]
 800c090:	f000 fe54 	bl	800cd3c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	881b      	ldrh	r3, [r3, #0]
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ba:	817b      	strh	r3, [r7, #10]
 800c0bc:	897b      	ldrh	r3, [r7, #10]
 800c0be:	f083 0310 	eor.w	r3, r3, #16
 800c0c2:	817b      	strh	r3, [r7, #10]
 800c0c4:	897b      	ldrh	r3, [r7, #10]
 800c0c6:	f083 0320 	eor.w	r3, r3, #32
 800c0ca:	817b      	strh	r3, [r7, #10]
 800c0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	441a      	add	r2, r3
 800c0e6:	897b      	ldrh	r3, [r7, #10]
 800c0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	8013      	strh	r3, [r2, #0]
 800c0fc:	f000 bcde 	b.w	800cabc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	7b1b      	ldrb	r3, [r3, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 80bb 	bne.w	800c288 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	699a      	ldr	r2, [r3, #24]
 800c11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d917      	bls.n	800c15e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	699a      	ldr	r2, [r3, #24]
 800c14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14e:	1ad2      	subs	r2, r2, r3
 800c150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	619a      	str	r2, [r3, #24]
 800c15c:	e00e      	b.n	800c17c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	699b      	ldr	r3, [r3, #24]
 800c16a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2200      	movs	r2, #0
 800c17a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c18e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c198:	b29b      	uxth	r3, r3
 800c19a:	461a      	mov	r2, r3
 800c19c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	00da      	lsls	r2, r3, #3
 800c1b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c1c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1d4:	801a      	strh	r2, [r3, #0]
 800c1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1da:	2b3e      	cmp	r3, #62	; 0x3e
 800c1dc:	d924      	bls.n	800c228 <USB_EPStartXfer+0xec2>
 800c1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1e2:	095b      	lsrs	r3, r3, #5
 800c1e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ec:	f003 031f 	and.w	r3, r3, #31
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <USB_EPStartXfer+0xe98>
 800c1f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	b29a      	uxth	r2, r3
 800c206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	029b      	lsls	r3, r3, #10
 800c20e:	b29b      	uxth	r3, r3
 800c210:	4313      	orrs	r3, r2
 800c212:	b29b      	uxth	r3, r3
 800c214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c222:	801a      	strh	r2, [r3, #0]
 800c224:	f000 bc10 	b.w	800ca48 <USB_EPStartXfer+0x16e2>
 800c228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10c      	bne.n	800c24a <USB_EPStartXfer+0xee4>
 800c230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	b29b      	uxth	r3, r3
 800c238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c23c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c240:	b29a      	uxth	r2, r3
 800c242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c246:	801a      	strh	r2, [r3, #0]
 800c248:	e3fe      	b.n	800ca48 <USB_EPStartXfer+0x16e2>
 800c24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c24e:	085b      	lsrs	r3, r3, #1
 800c250:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d004      	beq.n	800c26a <USB_EPStartXfer+0xf04>
 800c260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c264:	3301      	adds	r3, #1
 800c266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c26a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	b29a      	uxth	r2, r3
 800c272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c276:	b29b      	uxth	r3, r3
 800c278:	029b      	lsls	r3, r3, #10
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	4313      	orrs	r3, r2
 800c27e:	b29a      	uxth	r2, r3
 800c280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c284:	801a      	strh	r2, [r3, #0]
 800c286:	e3df      	b.n	800ca48 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	78db      	ldrb	r3, [r3, #3]
 800c294:	2b02      	cmp	r3, #2
 800c296:	f040 8218 	bne.w	800c6ca <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	785b      	ldrb	r3, [r3, #1]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f040 809d 	bne.w	800c3e6 <USB_EPStartXfer+0x1080>
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	00da      	lsls	r2, r3, #3
 800c2e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c304:	801a      	strh	r2, [r3, #0]
 800c306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	2b3e      	cmp	r3, #62	; 0x3e
 800c314:	d92b      	bls.n	800c36e <USB_EPStartXfer+0x1008>
 800c316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	095b      	lsrs	r3, r3, #5
 800c324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	f003 031f 	and.w	r3, r3, #31
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <USB_EPStartXfer+0xfe0>
 800c33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c340:	3b01      	subs	r3, #1
 800c342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c352:	b29b      	uxth	r3, r3
 800c354:	029b      	lsls	r3, r3, #10
 800c356:	b29b      	uxth	r3, r3
 800c358:	4313      	orrs	r3, r2
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c364:	b29a      	uxth	r2, r3
 800c366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c36a:	801a      	strh	r2, [r3, #0]
 800c36c:	e070      	b.n	800c450 <USB_EPStartXfer+0x10ea>
 800c36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10c      	bne.n	800c398 <USB_EPStartXfer+0x1032>
 800c37e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	b29b      	uxth	r3, r3
 800c386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c38a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c38e:	b29a      	uxth	r2, r3
 800c390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c394:	801a      	strh	r2, [r3, #0]
 800c396:	e05b      	b.n	800c450 <USB_EPStartXfer+0x10ea>
 800c398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	085b      	lsrs	r3, r3, #1
 800c3a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d004      	beq.n	800c3c8 <USB_EPStartXfer+0x1062>
 800c3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	029b      	lsls	r3, r3, #10
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3e2:	801a      	strh	r2, [r3, #0]
 800c3e4:	e034      	b.n	800c450 <USB_EPStartXfer+0x10ea>
 800c3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d12c      	bne.n	800c450 <USB_EPStartXfer+0x10ea>
 800c3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c412:	b29b      	uxth	r3, r3
 800c414:	461a      	mov	r2, r3
 800c416:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c41a:	4413      	add	r3, r2
 800c41c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	00da      	lsls	r2, r3, #3
 800c42e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c432:	4413      	add	r3, r2
 800c434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	b29a      	uxth	r2, r3
 800c44a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c44e:	801a      	strh	r2, [r3, #0]
 800c450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	785b      	ldrb	r3, [r3, #1]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f040 809d 	bne.w	800c5aa <USB_EPStartXfer+0x1244>
 800c470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	461a      	mov	r2, r3
 800c490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c494:	4413      	add	r3, r2
 800c496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	00da      	lsls	r2, r3, #3
 800c4a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4c8:	801a      	strh	r2, [r3, #0]
 800c4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b3e      	cmp	r3, #62	; 0x3e
 800c4d8:	d92b      	bls.n	800c532 <USB_EPStartXfer+0x11cc>
 800c4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	095b      	lsrs	r3, r3, #5
 800c4e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	f003 031f 	and.w	r3, r3, #31
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d104      	bne.n	800c50a <USB_EPStartXfer+0x11a4>
 800c500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c504:	3b01      	subs	r3, #1
 800c506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c50a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	b29a      	uxth	r2, r3
 800c512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c516:	b29b      	uxth	r3, r3
 800c518:	029b      	lsls	r3, r3, #10
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4313      	orrs	r3, r2
 800c51e:	b29b      	uxth	r3, r3
 800c520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c528:	b29a      	uxth	r2, r3
 800c52a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c52e:	801a      	strh	r2, [r3, #0]
 800c530:	e069      	b.n	800c606 <USB_EPStartXfer+0x12a0>
 800c532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10c      	bne.n	800c55c <USB_EPStartXfer+0x11f6>
 800c542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c54e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c552:	b29a      	uxth	r2, r3
 800c554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c558:	801a      	strh	r2, [r3, #0]
 800c55a:	e054      	b.n	800c606 <USB_EPStartXfer+0x12a0>
 800c55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	085b      	lsrs	r3, r3, #1
 800c56a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d004      	beq.n	800c58c <USB_EPStartXfer+0x1226>
 800c582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c586:	3301      	adds	r3, #1
 800c588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c58c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	b29a      	uxth	r2, r3
 800c594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c598:	b29b      	uxth	r3, r3
 800c59a:	029b      	lsls	r3, r3, #10
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5a6:	801a      	strh	r2, [r3, #0]
 800c5a8:	e02d      	b.n	800c606 <USB_EPStartXfer+0x12a0>
 800c5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d125      	bne.n	800c606 <USB_EPStartXfer+0x12a0>
 800c5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5d0:	4413      	add	r3, r2
 800c5d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	00da      	lsls	r2, r3, #3
 800c5e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c604:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8218 	beq.w	800ca48 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c61c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c638:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c63c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c640:	2b00      	cmp	r3, #0
 800c642:	d005      	beq.n	800c650 <USB_EPStartXfer+0x12ea>
 800c644:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10d      	bne.n	800c66c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c650:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f040 81f5 	bne.w	800ca48 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c65e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c666:	2b00      	cmp	r3, #0
 800c668:	f040 81ee 	bne.w	800ca48 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	881b      	ldrh	r3, [r3, #0]
 800c688:	b29b      	uxth	r3, r3
 800c68a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c692:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c69a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	441a      	add	r2, r3
 800c6b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	8013      	strh	r3, [r2, #0]
 800c6c8:	e1be      	b.n	800ca48 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	78db      	ldrb	r3, [r3, #3]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	f040 81b4 	bne.w	800ca44 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	699a      	ldr	r2, [r3, #24]
 800c6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d917      	bls.n	800c728 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	699a      	ldr	r2, [r3, #24]
 800c714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c718:	1ad2      	subs	r2, r2, r3
 800c71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	619a      	str	r2, [r3, #24]
 800c726:	e00e      	b.n	800c746 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c72c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2200      	movs	r2, #0
 800c744:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f040 8085 	bne.w	800c862 <USB_EPStartXfer+0x14fc>
 800c758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c75c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c76a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c774:	b29b      	uxth	r3, r3
 800c776:	461a      	mov	r2, r3
 800c778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c77c:	4413      	add	r3, r2
 800c77e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	00da      	lsls	r2, r3, #3
 800c790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c794:	4413      	add	r3, r2
 800c796:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c79a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c79e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7b0:	801a      	strh	r2, [r3, #0]
 800c7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7b6:	2b3e      	cmp	r3, #62	; 0x3e
 800c7b8:	d923      	bls.n	800c802 <USB_EPStartXfer+0x149c>
 800c7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7be:	095b      	lsrs	r3, r3, #5
 800c7c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7c8:	f003 031f 	and.w	r3, r3, #31
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d104      	bne.n	800c7da <USB_EPStartXfer+0x1474>
 800c7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c7da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	029b      	lsls	r3, r3, #10
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7fe:	801a      	strh	r2, [r3, #0]
 800c800:	e060      	b.n	800c8c4 <USB_EPStartXfer+0x155e>
 800c802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10c      	bne.n	800c824 <USB_EPStartXfer+0x14be>
 800c80a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29b      	uxth	r3, r3
 800c812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c820:	801a      	strh	r2, [r3, #0]
 800c822:	e04f      	b.n	800c8c4 <USB_EPStartXfer+0x155e>
 800c824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c828:	085b      	lsrs	r3, r3, #1
 800c82a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b00      	cmp	r3, #0
 800c838:	d004      	beq.n	800c844 <USB_EPStartXfer+0x14de>
 800c83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c83e:	3301      	adds	r3, #1
 800c840:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c850:	b29b      	uxth	r3, r3
 800c852:	029b      	lsls	r3, r3, #10
 800c854:	b29b      	uxth	r3, r3
 800c856:	4313      	orrs	r3, r2
 800c858:	b29a      	uxth	r2, r3
 800c85a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c85e:	801a      	strh	r2, [r3, #0]
 800c860:	e030      	b.n	800c8c4 <USB_EPStartXfer+0x155e>
 800c862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	785b      	ldrb	r3, [r3, #1]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d128      	bne.n	800c8c4 <USB_EPStartXfer+0x155e>
 800c872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c88e:	b29b      	uxth	r3, r3
 800c890:	461a      	mov	r2, r3
 800c892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c896:	4413      	add	r3, r2
 800c898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	00da      	lsls	r2, r3, #3
 800c8aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8ae:	4413      	add	r3, r2
 800c8b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c8c2:	801a      	strh	r2, [r3, #0]
 800c8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f040 8085 	bne.w	800c9ee <USB_EPStartXfer+0x1688>
 800c8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c900:	b29b      	uxth	r3, r3
 800c902:	461a      	mov	r2, r3
 800c904:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c908:	4413      	add	r3, r2
 800c90a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	00da      	lsls	r2, r3, #3
 800c91c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c920:	4413      	add	r3, r2
 800c922:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c936:	b29a      	uxth	r2, r3
 800c938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c93c:	801a      	strh	r2, [r3, #0]
 800c93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c942:	2b3e      	cmp	r3, #62	; 0x3e
 800c944:	d923      	bls.n	800c98e <USB_EPStartXfer+0x1628>
 800c946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c94a:	095b      	lsrs	r3, r3, #5
 800c94c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c954:	f003 031f 	and.w	r3, r3, #31
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d104      	bne.n	800c966 <USB_EPStartXfer+0x1600>
 800c95c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c960:	3b01      	subs	r3, #1
 800c962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c972:	b29b      	uxth	r3, r3
 800c974:	029b      	lsls	r3, r3, #10
 800c976:	b29b      	uxth	r3, r3
 800c978:	4313      	orrs	r3, r2
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c984:	b29a      	uxth	r2, r3
 800c986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c98a:	801a      	strh	r2, [r3, #0]
 800c98c:	e05c      	b.n	800ca48 <USB_EPStartXfer+0x16e2>
 800c98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10c      	bne.n	800c9b0 <USB_EPStartXfer+0x164a>
 800c996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c99a:	881b      	ldrh	r3, [r3, #0]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c9ac:	801a      	strh	r2, [r3, #0]
 800c9ae:	e04b      	b.n	800ca48 <USB_EPStartXfer+0x16e2>
 800c9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9b4:	085b      	lsrs	r3, r3, #1
 800c9b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d004      	beq.n	800c9d0 <USB_EPStartXfer+0x166a>
 800c9c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c9d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	029b      	lsls	r3, r3, #10
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c9ea:	801a      	strh	r2, [r3, #0]
 800c9ec:	e02c      	b.n	800ca48 <USB_EPStartXfer+0x16e2>
 800c9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	785b      	ldrb	r3, [r3, #1]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d124      	bne.n	800ca48 <USB_EPStartXfer+0x16e2>
 800c9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	461a      	mov	r2, r3
 800ca10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ca14:	4413      	add	r3, r2
 800ca16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	00da      	lsls	r2, r3, #3
 800ca28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ca2c:	4413      	add	r3, r2
 800ca2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca40:	801a      	strh	r2, [r3, #0]
 800ca42:	e001      	b.n	800ca48 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e03a      	b.n	800cabe <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca6e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ca7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ca86:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	441a      	add	r2, r3
 800caa4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800caa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cab8:	b29b      	uxth	r3, r3
 800caba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	785b      	ldrb	r3, [r3, #1]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d020      	beq.n	800cb1c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caf0:	81bb      	strh	r3, [r7, #12]
 800caf2:	89bb      	ldrh	r3, [r7, #12]
 800caf4:	f083 0310 	eor.w	r3, r3, #16
 800caf8:	81bb      	strh	r3, [r7, #12]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	441a      	add	r2, r3
 800cb04:	89bb      	ldrh	r3, [r7, #12]
 800cb06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	8013      	strh	r3, [r2, #0]
 800cb1a:	e01f      	b.n	800cb5c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	4413      	add	r3, r2
 800cb26:	881b      	ldrh	r3, [r3, #0]
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb32:	81fb      	strh	r3, [r7, #14]
 800cb34:	89fb      	ldrh	r3, [r7, #14]
 800cb36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb3a:	81fb      	strh	r3, [r7, #14]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	441a      	add	r2, r3
 800cb46:	89fb      	ldrh	r3, [r7, #14]
 800cb48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3714      	adds	r7, #20
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b087      	sub	sp, #28
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	7b1b      	ldrb	r3, [r3, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f040 809d 	bne.w	800ccb8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	785b      	ldrb	r3, [r3, #1]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d04c      	beq.n	800cc20 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	881b      	ldrh	r3, [r3, #0]
 800cb92:	823b      	strh	r3, [r7, #16]
 800cb94:	8a3b      	ldrh	r3, [r7, #16]
 800cb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d01b      	beq.n	800cbd6 <USB_EPClearStall+0x6c>
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbb4:	81fb      	strh	r3, [r7, #14]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	441a      	add	r2, r3
 800cbc0:	89fb      	ldrh	r3, [r7, #14]
 800cbc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	78db      	ldrb	r3, [r3, #3]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d06c      	beq.n	800ccb8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	881b      	ldrh	r3, [r3, #0]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbf4:	81bb      	strh	r3, [r7, #12]
 800cbf6:	89bb      	ldrh	r3, [r7, #12]
 800cbf8:	f083 0320 	eor.w	r3, r3, #32
 800cbfc:	81bb      	strh	r3, [r7, #12]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	441a      	add	r2, r3
 800cc08:	89bb      	ldrh	r3, [r7, #12]
 800cc0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	8013      	strh	r3, [r2, #0]
 800cc1e:	e04b      	b.n	800ccb8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	82fb      	strh	r3, [r7, #22]
 800cc2e:	8afb      	ldrh	r3, [r7, #22]
 800cc30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01b      	beq.n	800cc70 <USB_EPClearStall+0x106>
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	4413      	add	r3, r2
 800cc42:	881b      	ldrh	r3, [r3, #0]
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc4e:	82bb      	strh	r3, [r7, #20]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	441a      	add	r2, r3
 800cc5a:	8abb      	ldrh	r3, [r7, #20]
 800cc5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	881b      	ldrh	r3, [r3, #0]
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc86:	827b      	strh	r3, [r7, #18]
 800cc88:	8a7b      	ldrh	r3, [r7, #18]
 800cc8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc8e:	827b      	strh	r3, [r7, #18]
 800cc90:	8a7b      	ldrh	r3, [r7, #18]
 800cc92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cc96:	827b      	strh	r3, [r7, #18]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	441a      	add	r2, r3
 800cca2:	8a7b      	ldrh	r3, [r7, #18]
 800cca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	371c      	adds	r7, #28
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ccd2:	78fb      	ldrb	r3, [r7, #3]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d103      	bne.n	800cce0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2280      	movs	r2, #128	; 0x80
 800ccdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b08b      	sub	sp, #44	; 0x2c
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	4611      	mov	r1, r2
 800cd48:	461a      	mov	r2, r3
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	80fb      	strh	r3, [r7, #6]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cd52:	88bb      	ldrh	r3, [r7, #4]
 800cd54:	3301      	adds	r3, #1
 800cd56:	085b      	lsrs	r3, r3, #1
 800cd58:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cd62:	88fa      	ldrh	r2, [r7, #6]
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	4413      	add	r3, r2
 800cd68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	627b      	str	r3, [r7, #36]	; 0x24
 800cd72:	e01b      	b.n	800cdac <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	021b      	lsls	r3, r3, #8
 800cd82:	b21a      	sxth	r2, r3
 800cd84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	b21b      	sxth	r3, r3
 800cd8c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cd8e:	6a3b      	ldr	r3, [r7, #32]
 800cd90:	8a7a      	ldrh	r2, [r7, #18]
 800cd92:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cd94:	6a3b      	ldr	r3, [r7, #32]
 800cd96:	3302      	adds	r3, #2
 800cd98:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	3301      	adds	r3, #1
 800cda4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	627b      	str	r3, [r7, #36]	; 0x24
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1e0      	bne.n	800cd74 <USB_WritePMA+0x38>
  }
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	372c      	adds	r7, #44	; 0x2c
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b08b      	sub	sp, #44	; 0x2c
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	461a      	mov	r2, r3
 800cdce:	460b      	mov	r3, r1
 800cdd0:	80fb      	strh	r3, [r7, #6]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cdd6:	88bb      	ldrh	r3, [r7, #4]
 800cdd8:	085b      	lsrs	r3, r3, #1
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cde6:	88fa      	ldrh	r2, [r7, #6]
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	4413      	add	r3, r2
 800cdec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdf0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdf6:	e018      	b.n	800ce2a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	881b      	ldrh	r3, [r3, #0]
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ce00:	6a3b      	ldr	r3, [r7, #32]
 800ce02:	3302      	adds	r3, #2
 800ce04:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	3301      	adds	r3, #1
 800ce12:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	0a1b      	lsrs	r3, r3, #8
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	3301      	adds	r3, #1
 800ce22:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	3b01      	subs	r3, #1
 800ce28:	627b      	str	r3, [r7, #36]	; 0x24
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1e3      	bne.n	800cdf8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ce30:	88bb      	ldrh	r3, [r7, #4]
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d007      	beq.n	800ce4c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	701a      	strb	r2, [r3, #0]
  }
}
 800ce4c:	bf00      	nop
 800ce4e:	372c      	adds	r7, #44	; 0x2c
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ce68:	f002 f8fc 	bl	800f064 <USBD_static_malloc>
 800ce6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d105      	bne.n	800ce80 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	e066      	b.n	800cf4e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	7c1b      	ldrb	r3, [r3, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d119      	bne.n	800cec4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ce90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce94:	2202      	movs	r2, #2
 800ce96:	2181      	movs	r1, #129	; 0x81
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f001 ff8a 	bl	800edb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cea8:	2202      	movs	r2, #2
 800ceaa:	2101      	movs	r1, #1
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 ff80 	bl	800edb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2210      	movs	r2, #16
 800cebe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cec2:	e016      	b.n	800cef2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cec4:	2340      	movs	r3, #64	; 0x40
 800cec6:	2202      	movs	r2, #2
 800cec8:	2181      	movs	r1, #129	; 0x81
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f001 ff71 	bl	800edb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2201      	movs	r2, #1
 800ced4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ced6:	2340      	movs	r3, #64	; 0x40
 800ced8:	2202      	movs	r2, #2
 800ceda:	2101      	movs	r1, #1
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f001 ff68 	bl	800edb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2210      	movs	r2, #16
 800ceee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cef2:	2308      	movs	r3, #8
 800cef4:	2203      	movs	r2, #3
 800cef6:	2182      	movs	r1, #130	; 0x82
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f001 ff5a 	bl	800edb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7c1b      	ldrb	r3, [r3, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d109      	bne.n	800cf3c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf32:	2101      	movs	r1, #1
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f002 f82b 	bl	800ef90 <USBD_LL_PrepareReceive>
 800cf3a:	e007      	b.n	800cf4c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf42:	2340      	movs	r3, #64	; 0x40
 800cf44:	2101      	movs	r1, #1
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f002 f822 	bl	800ef90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cf62:	2181      	movs	r1, #129	; 0x81
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f001 ff4a 	bl	800edfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cf70:	2101      	movs	r1, #1
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f001 ff43 	bl	800edfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cf80:	2182      	movs	r1, #130	; 0x82
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f001 ff3b 	bl	800edfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00e      	beq.n	800cfc0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f002 f864 	bl	800f080 <USBD_static_free>
    pdev->pClassData = NULL;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfdc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e0af      	b.n	800d154 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d03f      	beq.n	800d080 <USBD_CDC_Setup+0xb4>
 800d000:	2b20      	cmp	r3, #32
 800d002:	f040 809f 	bne.w	800d144 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	88db      	ldrh	r3, [r3, #6]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d02e      	beq.n	800d06c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	b25b      	sxtb	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	da16      	bge.n	800d046 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d024:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	88d2      	ldrh	r2, [r2, #6]
 800d02a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	88db      	ldrh	r3, [r3, #6]
 800d030:	2b07      	cmp	r3, #7
 800d032:	bf28      	it	cs
 800d034:	2307      	movcs	r3, #7
 800d036:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	89fa      	ldrh	r2, [r7, #14]
 800d03c:	4619      	mov	r1, r3
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f001 facf 	bl	800e5e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d044:	e085      	b.n	800d152 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	785a      	ldrb	r2, [r3, #1]
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	88db      	ldrh	r3, [r3, #6]
 800d054:	b2da      	uxtb	r2, r3
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d05c:	6939      	ldr	r1, [r7, #16]
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	88db      	ldrh	r3, [r3, #6]
 800d062:	461a      	mov	r2, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f001 fae8 	bl	800e63a <USBD_CtlPrepareRx>
      break;
 800d06a:	e072      	b.n	800d152 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	7850      	ldrb	r0, [r2, #1]
 800d078:	2200      	movs	r2, #0
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	4798      	blx	r3
      break;
 800d07e:	e068      	b.n	800d152 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	785b      	ldrb	r3, [r3, #1]
 800d084:	2b0b      	cmp	r3, #11
 800d086:	d852      	bhi.n	800d12e <USBD_CDC_Setup+0x162>
 800d088:	a201      	add	r2, pc, #4	; (adr r2, 800d090 <USBD_CDC_Setup+0xc4>)
 800d08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08e:	bf00      	nop
 800d090:	0800d0c1 	.word	0x0800d0c1
 800d094:	0800d13d 	.word	0x0800d13d
 800d098:	0800d12f 	.word	0x0800d12f
 800d09c:	0800d12f 	.word	0x0800d12f
 800d0a0:	0800d12f 	.word	0x0800d12f
 800d0a4:	0800d12f 	.word	0x0800d12f
 800d0a8:	0800d12f 	.word	0x0800d12f
 800d0ac:	0800d12f 	.word	0x0800d12f
 800d0b0:	0800d12f 	.word	0x0800d12f
 800d0b4:	0800d12f 	.word	0x0800d12f
 800d0b8:	0800d0eb 	.word	0x0800d0eb
 800d0bc:	0800d115 	.word	0x0800d115
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	2b03      	cmp	r3, #3
 800d0ca:	d107      	bne.n	800d0dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d0cc:	f107 030a 	add.w	r3, r7, #10
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f001 fa84 	bl	800e5e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0da:	e032      	b.n	800d142 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f001 fa0e 	bl	800e500 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	75fb      	strb	r3, [r7, #23]
          break;
 800d0e8:	e02b      	b.n	800d142 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	d107      	bne.n	800d106 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d0f6:	f107 030d 	add.w	r3, r7, #13
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f001 fa6f 	bl	800e5e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d104:	e01d      	b.n	800d142 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d106:	6839      	ldr	r1, [r7, #0]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f001 f9f9 	bl	800e500 <USBD_CtlError>
            ret = USBD_FAIL;
 800d10e:	2303      	movs	r3, #3
 800d110:	75fb      	strb	r3, [r7, #23]
          break;
 800d112:	e016      	b.n	800d142 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b03      	cmp	r3, #3
 800d11e:	d00f      	beq.n	800d140 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 f9ec 	bl	800e500 <USBD_CtlError>
            ret = USBD_FAIL;
 800d128:	2303      	movs	r3, #3
 800d12a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d12c:	e008      	b.n	800d140 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f001 f9e5 	bl	800e500 <USBD_CtlError>
          ret = USBD_FAIL;
 800d136:	2303      	movs	r3, #3
 800d138:	75fb      	strb	r3, [r7, #23]
          break;
 800d13a:	e002      	b.n	800d142 <USBD_CDC_Setup+0x176>
          break;
 800d13c:	bf00      	nop
 800d13e:	e008      	b.n	800d152 <USBD_CDC_Setup+0x186>
          break;
 800d140:	bf00      	nop
      }
      break;
 800d142:	e006      	b.n	800d152 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f001 f9da 	bl	800e500 <USBD_CtlError>
      ret = USBD_FAIL;
 800d14c:	2303      	movs	r3, #3
 800d14e:	75fb      	strb	r3, [r7, #23]
      break;
 800d150:	bf00      	nop
  }

  return (uint8_t)ret;
 800d152:	7dfb      	ldrb	r3, [r7, #23]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3718      	adds	r7, #24
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	460b      	mov	r3, r1
 800d166:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d16e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d17a:	2303      	movs	r3, #3
 800d17c:	e04f      	b.n	800d21e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d184:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d186:	78fa      	ldrb	r2, [r7, #3]
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	4613      	mov	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	440b      	add	r3, r1
 800d194:	3318      	adds	r3, #24
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d029      	beq.n	800d1f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d19c:	78fa      	ldrb	r2, [r7, #3]
 800d19e:	6879      	ldr	r1, [r7, #4]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	440b      	add	r3, r1
 800d1aa:	3318      	adds	r3, #24
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	78f9      	ldrb	r1, [r7, #3]
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	440b      	add	r3, r1
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	4403      	add	r3, r0
 800d1bc:	3320      	adds	r3, #32
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d1c4:	fb01 f303 	mul.w	r3, r1, r3
 800d1c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d110      	bne.n	800d1f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d1ce:	78fa      	ldrb	r2, [r7, #3]
 800d1d0:	6879      	ldr	r1, [r7, #4]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	440b      	add	r3, r1
 800d1dc:	3318      	adds	r3, #24
 800d1de:	2200      	movs	r2, #0
 800d1e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1e2:	78f9      	ldrb	r1, [r7, #3]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f001 feb0 	bl	800ef4e <USBD_LL_Transmit>
 800d1ee:	e015      	b.n	800d21c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d218:	78fa      	ldrb	r2, [r7, #3]
 800d21a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b084      	sub	sp, #16
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	460b      	mov	r3, r1
 800d230:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d238:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d244:	2303      	movs	r3, #3
 800d246:	e015      	b.n	800d274 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d248:	78fb      	ldrb	r3, [r7, #3]
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f001 fec0 	bl	800efd2 <USBD_LL_GetRxDataSize>
 800d252:	4602      	mov	r2, r0
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d26e:	4611      	mov	r1, r2
 800d270:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d28a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d292:	2303      	movs	r3, #3
 800d294:	e01b      	b.n	800d2ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d015      	beq.n	800d2cc <USBD_CDC_EP0_RxReady+0x50>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d2a6:	2bff      	cmp	r3, #255	; 0xff
 800d2a8:	d010      	beq.n	800d2cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d2b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2c0:	b292      	uxth	r2, r2
 800d2c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	22ff      	movs	r2, #255	; 0xff
 800d2c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2243      	movs	r2, #67	; 0x43
 800d2e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d2e6:	4b03      	ldr	r3, [pc, #12]	; (800d2f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	20000094 	.word	0x20000094

0800d2f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2243      	movs	r2, #67	; 0x43
 800d304:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d306:	4b03      	ldr	r3, [pc, #12]	; (800d314 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	20000050 	.word	0x20000050

0800d318 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2243      	movs	r2, #67	; 0x43
 800d324:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d326:	4b03      	ldr	r3, [pc, #12]	; (800d334 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d328:	4618      	mov	r0, r3
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	200000d8 	.word	0x200000d8

0800d338 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	220a      	movs	r2, #10
 800d344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d346:	4b03      	ldr	r3, [pc, #12]	; (800d354 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d348:	4618      	mov	r0, r3
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	2000000c 	.word	0x2000000c

0800d358 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d368:	2303      	movs	r3, #3
 800d36a:	e004      	b.n	800d376 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d382:	b480      	push	{r7}
 800d384:	b087      	sub	sp, #28
 800d386:	af00      	add	r7, sp, #0
 800d388:	60f8      	str	r0, [r7, #12]
 800d38a:	60b9      	str	r1, [r7, #8]
 800d38c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d394:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d101      	bne.n	800d3a0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e008      	b.n	800d3b2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	371c      	adds	r7, #28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d3d6:	2303      	movs	r3, #3
 800d3d8:	e004      	b.n	800d3e4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d400:	2301      	movs	r3, #1
 800d402:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d40e:	2303      	movs	r3, #3
 800d410:	e01a      	b.n	800d448 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d114      	bne.n	800d446 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2201      	movs	r2, #1
 800d420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d43a:	2181      	movs	r1, #129	; 0x81
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f001 fd86 	bl	800ef4e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d446:	7bfb      	ldrb	r3, [r7, #15]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d45e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e016      	b.n	800d49c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7c1b      	ldrb	r3, [r3, #16]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d109      	bne.n	800d48a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d47c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d480:	2101      	movs	r1, #1
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f001 fd84 	bl	800ef90 <USBD_LL_PrepareReceive>
 800d488:	e007      	b.n	800d49a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d490:	2340      	movs	r3, #64	; 0x40
 800d492:	2101      	movs	r1, #1
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f001 fd7b 	bl	800ef90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d101      	bne.n	800d4bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d4b8:	2303      	movs	r3, #3
 800d4ba:	e01f      	b.n	800d4fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d003      	beq.n	800d4e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	79fa      	ldrb	r2, [r7, #7]
 800d4ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f001 fbe3 	bl	800ecbc <USBD_LL_Init>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d50e:	2300      	movs	r3, #0
 800d510:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d518:	2303      	movs	r3, #3
 800d51a:	e016      	b.n	800d54a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00b      	beq.n	800d548 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d538:	f107 020e 	add.w	r2, r7, #14
 800d53c:	4610      	mov	r0, r2
 800d53e:	4798      	blx	r3
 800d540:	4602      	mov	r2, r0
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f001 fc0e 	bl	800ed7c <USBD_LL_Start>
 800d560:	4603      	mov	r3, r0
}
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b083      	sub	sp, #12
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	460b      	mov	r3, r1
 800d58a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d58c:	2303      	movs	r3, #3
 800d58e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d596:	2b00      	cmp	r3, #0
 800d598:	d009      	beq.n	800d5ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	78fa      	ldrb	r2, [r7, #3]
 800d5a4:	4611      	mov	r1, r2
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	4798      	blx	r3
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d007      	beq.n	800d5de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	78fa      	ldrb	r2, [r7, #3]
 800d5d8:	4611      	mov	r1, r2
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	4798      	blx	r3
  }

  return USBD_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 ff46 	bl	800e48c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d60e:	461a      	mov	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d61c:	f003 031f 	and.w	r3, r3, #31
 800d620:	2b02      	cmp	r3, #2
 800d622:	d01a      	beq.n	800d65a <USBD_LL_SetupStage+0x72>
 800d624:	2b02      	cmp	r3, #2
 800d626:	d822      	bhi.n	800d66e <USBD_LL_SetupStage+0x86>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d002      	beq.n	800d632 <USBD_LL_SetupStage+0x4a>
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d00a      	beq.n	800d646 <USBD_LL_SetupStage+0x5e>
 800d630:	e01d      	b.n	800d66e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f9ee 	bl	800da1c <USBD_StdDevReq>
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]
      break;
 800d644:	e020      	b.n	800d688 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fa52 	bl	800daf8 <USBD_StdItfReq>
 800d654:	4603      	mov	r3, r0
 800d656:	73fb      	strb	r3, [r7, #15]
      break;
 800d658:	e016      	b.n	800d688 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa91 	bl	800db8a <USBD_StdEPReq>
 800d668:	4603      	mov	r3, r0
 800d66a:	73fb      	strb	r3, [r7, #15]
      break;
 800d66c:	e00c      	b.n	800d688 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d674:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f001 fbdd 	bl	800ee3c <USBD_LL_StallEP>
 800d682:	4603      	mov	r3, r0
 800d684:	73fb      	strb	r3, [r7, #15]
      break;
 800d686:	bf00      	nop
  }

  return ret;
 800d688:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b086      	sub	sp, #24
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	460b      	mov	r3, r1
 800d69c:	607a      	str	r2, [r7, #4]
 800d69e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d6a0:	7afb      	ldrb	r3, [r7, #11]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d138      	bne.n	800d718 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d6ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6b4:	2b03      	cmp	r3, #3
 800d6b6:	d14a      	bne.n	800d74e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	689a      	ldr	r2, [r3, #8]
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d913      	bls.n	800d6ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	689a      	ldr	r2, [r3, #8]
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	1ad2      	subs	r2, r2, r3
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	68da      	ldr	r2, [r3, #12]
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	bf28      	it	cs
 800d6de:	4613      	movcs	r3, r2
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 ffc5 	bl	800e674 <USBD_CtlContinueRx>
 800d6ea:	e030      	b.n	800d74e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b03      	cmp	r3, #3
 800d6f6:	d10b      	bne.n	800d710 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d005      	beq.n	800d710 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 ffc0 	bl	800e696 <USBD_CtlSendStatus>
 800d716:	e01a      	b.n	800d74e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b03      	cmp	r3, #3
 800d722:	d114      	bne.n	800d74e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d72a:	699b      	ldr	r3, [r3, #24]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00e      	beq.n	800d74e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	7afa      	ldrb	r2, [r7, #11]
 800d73a:	4611      	mov	r1, r2
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	4798      	blx	r3
 800d740:	4603      	mov	r3, r0
 800d742:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d744:	7dfb      	ldrb	r3, [r7, #23]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
 800d74c:	e000      	b.n	800d750 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3718      	adds	r7, #24
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	460b      	mov	r3, r1
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d766:	7afb      	ldrb	r3, [r7, #11]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d16b      	bne.n	800d844 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	3314      	adds	r3, #20
 800d770:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d156      	bne.n	800d82a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	689a      	ldr	r2, [r3, #8]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	429a      	cmp	r2, r3
 800d786:	d914      	bls.n	800d7b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	689a      	ldr	r2, [r3, #8]
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	1ad2      	subs	r2, r2, r3
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	461a      	mov	r2, r3
 800d79c:	6879      	ldr	r1, [r7, #4]
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f000 ff3a 	bl	800e618 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f001 fbf0 	bl	800ef90 <USBD_LL_PrepareReceive>
 800d7b0:	e03b      	b.n	800d82a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	68da      	ldr	r2, [r3, #12]
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	689b      	ldr	r3, [r3, #8]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d11c      	bne.n	800d7f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	685a      	ldr	r2, [r3, #4]
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d316      	bcc.n	800d7f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	685a      	ldr	r2, [r3, #4]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d20f      	bcs.n	800d7f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2100      	movs	r1, #0
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 ff1b 	bl	800e618 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f001 fbcd 	bl	800ef90 <USBD_LL_PrepareReceive>
 800d7f6:	e018      	b.n	800d82a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b03      	cmp	r3, #3
 800d802:	d10b      	bne.n	800d81c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d005      	beq.n	800d81c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d81c:	2180      	movs	r1, #128	; 0x80
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f001 fb0c 	bl	800ee3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f000 ff49 	bl	800e6bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d830:	2b01      	cmp	r3, #1
 800d832:	d122      	bne.n	800d87a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f7ff fe98 	bl	800d56a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d842:	e01a      	b.n	800d87a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b03      	cmp	r3, #3
 800d84e:	d114      	bne.n	800d87a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00e      	beq.n	800d87a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d862:	695b      	ldr	r3, [r3, #20]
 800d864:	7afa      	ldrb	r2, [r7, #11]
 800d866:	4611      	mov	r1, r2
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	4798      	blx	r3
 800d86c:	4603      	mov	r3, r0
 800d86e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d870:	7dfb      	ldrb	r3, [r7, #23]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	e000      	b.n	800d87c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3718      	adds	r7, #24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e02f      	b.n	800d918 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00f      	beq.n	800d8e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d009      	beq.n	800d8e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	6852      	ldr	r2, [r2, #4]
 800d8da:	b2d2      	uxtb	r2, r2
 800d8dc:	4611      	mov	r1, r2
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8e2:	2340      	movs	r3, #64	; 0x40
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 fa62 	bl	800edb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2240      	movs	r2, #64	; 0x40
 800d8fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8fe:	2340      	movs	r3, #64	; 0x40
 800d900:	2200      	movs	r2, #0
 800d902:	2180      	movs	r1, #128	; 0x80
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f001 fa54 	bl	800edb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2201      	movs	r2, #1
 800d90e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2240      	movs	r2, #64	; 0x40
 800d914:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	78fa      	ldrb	r2, [r7, #3]
 800d930:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2204      	movs	r2, #4
 800d95a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	d106      	bne.n	800d98e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d986:	b2da      	uxtb	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d9ae:	2303      	movs	r3, #3
 800d9b0:	e012      	b.n	800d9d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d10b      	bne.n	800d9d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c4:	69db      	ldr	r3, [r3, #28]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d005      	beq.n	800d9d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9d0:	69db      	ldr	r3, [r3, #28]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d9fe:	8a3b      	ldrh	r3, [r7, #16]
 800da00:	021b      	lsls	r3, r3, #8
 800da02:	b21a      	sxth	r2, r3
 800da04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800da08:	4313      	orrs	r3, r2
 800da0a:	b21b      	sxth	r3, r3
 800da0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800da0e:	89fb      	ldrh	r3, [r7, #14]
}
 800da10:	4618      	mov	r0, r3
 800da12:	371c      	adds	r7, #28
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da32:	2b40      	cmp	r3, #64	; 0x40
 800da34:	d005      	beq.n	800da42 <USBD_StdDevReq+0x26>
 800da36:	2b40      	cmp	r3, #64	; 0x40
 800da38:	d853      	bhi.n	800dae2 <USBD_StdDevReq+0xc6>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00b      	beq.n	800da56 <USBD_StdDevReq+0x3a>
 800da3e:	2b20      	cmp	r3, #32
 800da40:	d14f      	bne.n	800dae2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	4798      	blx	r3
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
      break;
 800da54:	e04a      	b.n	800daec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	785b      	ldrb	r3, [r3, #1]
 800da5a:	2b09      	cmp	r3, #9
 800da5c:	d83b      	bhi.n	800dad6 <USBD_StdDevReq+0xba>
 800da5e:	a201      	add	r2, pc, #4	; (adr r2, 800da64 <USBD_StdDevReq+0x48>)
 800da60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da64:	0800dab9 	.word	0x0800dab9
 800da68:	0800dacd 	.word	0x0800dacd
 800da6c:	0800dad7 	.word	0x0800dad7
 800da70:	0800dac3 	.word	0x0800dac3
 800da74:	0800dad7 	.word	0x0800dad7
 800da78:	0800da97 	.word	0x0800da97
 800da7c:	0800da8d 	.word	0x0800da8d
 800da80:	0800dad7 	.word	0x0800dad7
 800da84:	0800daaf 	.word	0x0800daaf
 800da88:	0800daa1 	.word	0x0800daa1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 f9de 	bl	800de50 <USBD_GetDescriptor>
          break;
 800da94:	e024      	b.n	800dae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fb6d 	bl	800e178 <USBD_SetAddress>
          break;
 800da9e:	e01f      	b.n	800dae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fbac 	bl	800e200 <USBD_SetConfig>
 800daa8:	4603      	mov	r3, r0
 800daaa:	73fb      	strb	r3, [r7, #15]
          break;
 800daac:	e018      	b.n	800dae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fc4b 	bl	800e34c <USBD_GetConfig>
          break;
 800dab6:	e013      	b.n	800dae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dab8:	6839      	ldr	r1, [r7, #0]
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 fc7c 	bl	800e3b8 <USBD_GetStatus>
          break;
 800dac0:	e00e      	b.n	800dae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fcab 	bl	800e420 <USBD_SetFeature>
          break;
 800daca:	e009      	b.n	800dae0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fcba 	bl	800e448 <USBD_ClrFeature>
          break;
 800dad4:	e004      	b.n	800dae0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dad6:	6839      	ldr	r1, [r7, #0]
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 fd11 	bl	800e500 <USBD_CtlError>
          break;
 800dade:	bf00      	nop
      }
      break;
 800dae0:	e004      	b.n	800daec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dae2:	6839      	ldr	r1, [r7, #0]
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fd0b 	bl	800e500 <USBD_CtlError>
      break;
 800daea:	bf00      	nop
  }

  return ret;
 800daec:	7bfb      	ldrb	r3, [r7, #15]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop

0800daf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db0e:	2b40      	cmp	r3, #64	; 0x40
 800db10:	d005      	beq.n	800db1e <USBD_StdItfReq+0x26>
 800db12:	2b40      	cmp	r3, #64	; 0x40
 800db14:	d82f      	bhi.n	800db76 <USBD_StdItfReq+0x7e>
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <USBD_StdItfReq+0x26>
 800db1a:	2b20      	cmp	r3, #32
 800db1c:	d12b      	bne.n	800db76 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db24:	b2db      	uxtb	r3, r3
 800db26:	3b01      	subs	r3, #1
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d81d      	bhi.n	800db68 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	889b      	ldrh	r3, [r3, #4]
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b01      	cmp	r3, #1
 800db34:	d813      	bhi.n	800db5e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	6839      	ldr	r1, [r7, #0]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	4798      	blx	r3
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	88db      	ldrh	r3, [r3, #6]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d110      	bne.n	800db72 <USBD_StdItfReq+0x7a>
 800db50:	7bfb      	ldrb	r3, [r7, #15]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10d      	bne.n	800db72 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fd9d 	bl	800e696 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db5c:	e009      	b.n	800db72 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 fccd 	bl	800e500 <USBD_CtlError>
          break;
 800db66:	e004      	b.n	800db72 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fcc8 	bl	800e500 <USBD_CtlError>
          break;
 800db70:	e000      	b.n	800db74 <USBD_StdItfReq+0x7c>
          break;
 800db72:	bf00      	nop
      }
      break;
 800db74:	e004      	b.n	800db80 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800db76:	6839      	ldr	r1, [r7, #0]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fcc1 	bl	800e500 <USBD_CtlError>
      break;
 800db7e:	bf00      	nop
  }

  return ret;
 800db80:	7bfb      	ldrb	r3, [r7, #15]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b084      	sub	sp, #16
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	889b      	ldrh	r3, [r3, #4]
 800db9c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dba6:	2b40      	cmp	r3, #64	; 0x40
 800dba8:	d007      	beq.n	800dbba <USBD_StdEPReq+0x30>
 800dbaa:	2b40      	cmp	r3, #64	; 0x40
 800dbac:	f200 8145 	bhi.w	800de3a <USBD_StdEPReq+0x2b0>
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00c      	beq.n	800dbce <USBD_StdEPReq+0x44>
 800dbb4:	2b20      	cmp	r3, #32
 800dbb6:	f040 8140 	bne.w	800de3a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	4798      	blx	r3
 800dbc8:	4603      	mov	r3, r0
 800dbca:	73fb      	strb	r3, [r7, #15]
      break;
 800dbcc:	e13a      	b.n	800de44 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	785b      	ldrb	r3, [r3, #1]
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d007      	beq.n	800dbe6 <USBD_StdEPReq+0x5c>
 800dbd6:	2b03      	cmp	r3, #3
 800dbd8:	f300 8129 	bgt.w	800de2e <USBD_StdEPReq+0x2a4>
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d07f      	beq.n	800dce0 <USBD_StdEPReq+0x156>
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d03c      	beq.n	800dc5e <USBD_StdEPReq+0xd4>
 800dbe4:	e123      	b.n	800de2e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d002      	beq.n	800dbf8 <USBD_StdEPReq+0x6e>
 800dbf2:	2b03      	cmp	r3, #3
 800dbf4:	d016      	beq.n	800dc24 <USBD_StdEPReq+0x9a>
 800dbf6:	e02c      	b.n	800dc52 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbf8:	7bbb      	ldrb	r3, [r7, #14]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00d      	beq.n	800dc1a <USBD_StdEPReq+0x90>
 800dbfe:	7bbb      	ldrb	r3, [r7, #14]
 800dc00:	2b80      	cmp	r3, #128	; 0x80
 800dc02:	d00a      	beq.n	800dc1a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc04:	7bbb      	ldrb	r3, [r7, #14]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f001 f917 	bl	800ee3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc0e:	2180      	movs	r1, #128	; 0x80
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f001 f913 	bl	800ee3c <USBD_LL_StallEP>
 800dc16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc18:	e020      	b.n	800dc5c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fc6f 	bl	800e500 <USBD_CtlError>
              break;
 800dc22:	e01b      	b.n	800dc5c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	885b      	ldrh	r3, [r3, #2]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d10e      	bne.n	800dc4a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00b      	beq.n	800dc4a <USBD_StdEPReq+0xc0>
 800dc32:	7bbb      	ldrb	r3, [r7, #14]
 800dc34:	2b80      	cmp	r3, #128	; 0x80
 800dc36:	d008      	beq.n	800dc4a <USBD_StdEPReq+0xc0>
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	88db      	ldrh	r3, [r3, #6]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d104      	bne.n	800dc4a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc40:	7bbb      	ldrb	r3, [r7, #14]
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 f8f9 	bl	800ee3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fd23 	bl	800e696 <USBD_CtlSendStatus>

              break;
 800dc50:	e004      	b.n	800dc5c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fc53 	bl	800e500 <USBD_CtlError>
              break;
 800dc5a:	bf00      	nop
          }
          break;
 800dc5c:	e0ec      	b.n	800de38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d002      	beq.n	800dc70 <USBD_StdEPReq+0xe6>
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d016      	beq.n	800dc9c <USBD_StdEPReq+0x112>
 800dc6e:	e030      	b.n	800dcd2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc70:	7bbb      	ldrb	r3, [r7, #14]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00d      	beq.n	800dc92 <USBD_StdEPReq+0x108>
 800dc76:	7bbb      	ldrb	r3, [r7, #14]
 800dc78:	2b80      	cmp	r3, #128	; 0x80
 800dc7a:	d00a      	beq.n	800dc92 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc7c:	7bbb      	ldrb	r3, [r7, #14]
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f001 f8db 	bl	800ee3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc86:	2180      	movs	r1, #128	; 0x80
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f001 f8d7 	bl	800ee3c <USBD_LL_StallEP>
 800dc8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc90:	e025      	b.n	800dcde <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fc33 	bl	800e500 <USBD_CtlError>
              break;
 800dc9a:	e020      	b.n	800dcde <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	885b      	ldrh	r3, [r3, #2]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d11b      	bne.n	800dcdc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dca4:	7bbb      	ldrb	r3, [r7, #14]
 800dca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d004      	beq.n	800dcb8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dcae:	7bbb      	ldrb	r3, [r7, #14]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f001 f8e1 	bl	800ee7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fcec 	bl	800e696 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	4798      	blx	r3
 800dccc:	4603      	mov	r3, r0
 800dcce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dcd0:	e004      	b.n	800dcdc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fc13 	bl	800e500 <USBD_CtlError>
              break;
 800dcda:	e000      	b.n	800dcde <USBD_StdEPReq+0x154>
              break;
 800dcdc:	bf00      	nop
          }
          break;
 800dcde:	e0ab      	b.n	800de38 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d002      	beq.n	800dcf2 <USBD_StdEPReq+0x168>
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d032      	beq.n	800dd56 <USBD_StdEPReq+0x1cc>
 800dcf0:	e097      	b.n	800de22 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d007      	beq.n	800dd08 <USBD_StdEPReq+0x17e>
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	2b80      	cmp	r3, #128	; 0x80
 800dcfc:	d004      	beq.n	800dd08 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fbfd 	bl	800e500 <USBD_CtlError>
                break;
 800dd06:	e091      	b.n	800de2c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	da0b      	bge.n	800dd28 <USBD_StdEPReq+0x19e>
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
 800dd12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd16:	4613      	mov	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	3310      	adds	r3, #16
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	4413      	add	r3, r2
 800dd24:	3304      	adds	r3, #4
 800dd26:	e00b      	b.n	800dd40 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd28:	7bbb      	ldrb	r3, [r7, #14]
 800dd2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd2e:	4613      	mov	r3, r2
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	4413      	add	r3, r2
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	3304      	adds	r3, #4
 800dd40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2200      	movs	r2, #0
 800dd46:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	2202      	movs	r2, #2
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 fc47 	bl	800e5e2 <USBD_CtlSendData>
              break;
 800dd54:	e06a      	b.n	800de2c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	da11      	bge.n	800dd82 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	f003 020f 	and.w	r2, r3, #15
 800dd64:	6879      	ldr	r1, [r7, #4]
 800dd66:	4613      	mov	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4413      	add	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	440b      	add	r3, r1
 800dd70:	3324      	adds	r3, #36	; 0x24
 800dd72:	881b      	ldrh	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d117      	bne.n	800dda8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dd78:	6839      	ldr	r1, [r7, #0]
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 fbc0 	bl	800e500 <USBD_CtlError>
                  break;
 800dd80:	e054      	b.n	800de2c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd82:	7bbb      	ldrb	r3, [r7, #14]
 800dd84:	f003 020f 	and.w	r2, r3, #15
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	4413      	add	r3, r2
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	440b      	add	r3, r1
 800dd94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d104      	bne.n	800dda8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fbad 	bl	800e500 <USBD_CtlError>
                  break;
 800dda6:	e041      	b.n	800de2c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dda8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	da0b      	bge.n	800ddc8 <USBD_StdEPReq+0x23e>
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
 800ddb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	3310      	adds	r3, #16
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	e00b      	b.n	800dde0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddc8:	7bbb      	ldrb	r3, [r7, #14]
 800ddca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddce:	4613      	mov	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	4413      	add	r3, r2
 800ddde:	3304      	adds	r3, #4
 800dde0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dde2:	7bbb      	ldrb	r3, [r7, #14]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <USBD_StdEPReq+0x264>
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
 800ddea:	2b80      	cmp	r3, #128	; 0x80
 800ddec:	d103      	bne.n	800ddf6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	e00e      	b.n	800de14 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ddf6:	7bbb      	ldrb	r3, [r7, #14]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f001 f85c 	bl	800eeb8 <USBD_LL_IsStallEP>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2201      	movs	r2, #1
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	e002      	b.n	800de14 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2202      	movs	r2, #2
 800de18:	4619      	mov	r1, r3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fbe1 	bl	800e5e2 <USBD_CtlSendData>
              break;
 800de20:	e004      	b.n	800de2c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fb6b 	bl	800e500 <USBD_CtlError>
              break;
 800de2a:	bf00      	nop
          }
          break;
 800de2c:	e004      	b.n	800de38 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800de2e:	6839      	ldr	r1, [r7, #0]
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 fb65 	bl	800e500 <USBD_CtlError>
          break;
 800de36:	bf00      	nop
      }
      break;
 800de38:	e004      	b.n	800de44 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fb5f 	bl	800e500 <USBD_CtlError>
      break;
 800de42:	bf00      	nop
  }

  return ret;
 800de44:	7bfb      	ldrb	r3, [r7, #15]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
	...

0800de50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de5a:	2300      	movs	r3, #0
 800de5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de5e:	2300      	movs	r3, #0
 800de60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de62:	2300      	movs	r3, #0
 800de64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	885b      	ldrh	r3, [r3, #2]
 800de6a:	0a1b      	lsrs	r3, r3, #8
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	3b01      	subs	r3, #1
 800de70:	2b0e      	cmp	r3, #14
 800de72:	f200 8152 	bhi.w	800e11a <USBD_GetDescriptor+0x2ca>
 800de76:	a201      	add	r2, pc, #4	; (adr r2, 800de7c <USBD_GetDescriptor+0x2c>)
 800de78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7c:	0800deed 	.word	0x0800deed
 800de80:	0800df05 	.word	0x0800df05
 800de84:	0800df45 	.word	0x0800df45
 800de88:	0800e11b 	.word	0x0800e11b
 800de8c:	0800e11b 	.word	0x0800e11b
 800de90:	0800e0bb 	.word	0x0800e0bb
 800de94:	0800e0e7 	.word	0x0800e0e7
 800de98:	0800e11b 	.word	0x0800e11b
 800de9c:	0800e11b 	.word	0x0800e11b
 800dea0:	0800e11b 	.word	0x0800e11b
 800dea4:	0800e11b 	.word	0x0800e11b
 800dea8:	0800e11b 	.word	0x0800e11b
 800deac:	0800e11b 	.word	0x0800e11b
 800deb0:	0800e11b 	.word	0x0800e11b
 800deb4:	0800deb9 	.word	0x0800deb9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800debe:	69db      	ldr	r3, [r3, #28]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00b      	beq.n	800dedc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deca:	69db      	ldr	r3, [r3, #28]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	7c12      	ldrb	r2, [r2, #16]
 800ded0:	f107 0108 	add.w	r1, r7, #8
 800ded4:	4610      	mov	r0, r2
 800ded6:	4798      	blx	r3
 800ded8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800deda:	e126      	b.n	800e12a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fb0e 	bl	800e500 <USBD_CtlError>
        err++;
 800dee4:	7afb      	ldrb	r3, [r7, #11]
 800dee6:	3301      	adds	r3, #1
 800dee8:	72fb      	strb	r3, [r7, #11]
      break;
 800deea:	e11e      	b.n	800e12a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	7c12      	ldrb	r2, [r2, #16]
 800def8:	f107 0108 	add.w	r1, r7, #8
 800defc:	4610      	mov	r0, r2
 800defe:	4798      	blx	r3
 800df00:	60f8      	str	r0, [r7, #12]
      break;
 800df02:	e112      	b.n	800e12a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	7c1b      	ldrb	r3, [r3, #16]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10d      	bne.n	800df28 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df14:	f107 0208 	add.w	r2, r7, #8
 800df18:	4610      	mov	r0, r2
 800df1a:	4798      	blx	r3
 800df1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3301      	adds	r3, #1
 800df22:	2202      	movs	r2, #2
 800df24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df26:	e100      	b.n	800e12a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df30:	f107 0208 	add.w	r2, r7, #8
 800df34:	4610      	mov	r0, r2
 800df36:	4798      	blx	r3
 800df38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3301      	adds	r3, #1
 800df3e:	2202      	movs	r2, #2
 800df40:	701a      	strb	r2, [r3, #0]
      break;
 800df42:	e0f2      	b.n	800e12a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	885b      	ldrh	r3, [r3, #2]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b05      	cmp	r3, #5
 800df4c:	f200 80ac 	bhi.w	800e0a8 <USBD_GetDescriptor+0x258>
 800df50:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <USBD_GetDescriptor+0x108>)
 800df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df56:	bf00      	nop
 800df58:	0800df71 	.word	0x0800df71
 800df5c:	0800dfa5 	.word	0x0800dfa5
 800df60:	0800dfd9 	.word	0x0800dfd9
 800df64:	0800e00d 	.word	0x0800e00d
 800df68:	0800e041 	.word	0x0800e041
 800df6c:	0800e075 	.word	0x0800e075
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	7c12      	ldrb	r2, [r2, #16]
 800df88:	f107 0108 	add.w	r1, r7, #8
 800df8c:	4610      	mov	r0, r2
 800df8e:	4798      	blx	r3
 800df90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df92:	e091      	b.n	800e0b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fab2 	bl	800e500 <USBD_CtlError>
            err++;
 800df9c:	7afb      	ldrb	r3, [r7, #11]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	72fb      	strb	r3, [r7, #11]
          break;
 800dfa2:	e089      	b.n	800e0b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00b      	beq.n	800dfc8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	7c12      	ldrb	r2, [r2, #16]
 800dfbc:	f107 0108 	add.w	r1, r7, #8
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	4798      	blx	r3
 800dfc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfc6:	e077      	b.n	800e0b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fa98 	bl	800e500 <USBD_CtlError>
            err++;
 800dfd0:	7afb      	ldrb	r3, [r7, #11]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	72fb      	strb	r3, [r7, #11]
          break;
 800dfd6:	e06f      	b.n	800e0b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00b      	beq.n	800dffc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	7c12      	ldrb	r2, [r2, #16]
 800dff0:	f107 0108 	add.w	r1, r7, #8
 800dff4:	4610      	mov	r0, r2
 800dff6:	4798      	blx	r3
 800dff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dffa:	e05d      	b.n	800e0b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dffc:	6839      	ldr	r1, [r7, #0]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fa7e 	bl	800e500 <USBD_CtlError>
            err++;
 800e004:	7afb      	ldrb	r3, [r7, #11]
 800e006:	3301      	adds	r3, #1
 800e008:	72fb      	strb	r3, [r7, #11]
          break;
 800e00a:	e055      	b.n	800e0b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	7c12      	ldrb	r2, [r2, #16]
 800e024:	f107 0108 	add.w	r1, r7, #8
 800e028:	4610      	mov	r0, r2
 800e02a:	4798      	blx	r3
 800e02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e02e:	e043      	b.n	800e0b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fa64 	bl	800e500 <USBD_CtlError>
            err++;
 800e038:	7afb      	ldrb	r3, [r7, #11]
 800e03a:	3301      	adds	r3, #1
 800e03c:	72fb      	strb	r3, [r7, #11]
          break;
 800e03e:	e03b      	b.n	800e0b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e046:	695b      	ldr	r3, [r3, #20]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00b      	beq.n	800e064 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	7c12      	ldrb	r2, [r2, #16]
 800e058:	f107 0108 	add.w	r1, r7, #8
 800e05c:	4610      	mov	r0, r2
 800e05e:	4798      	blx	r3
 800e060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e062:	e029      	b.n	800e0b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e064:	6839      	ldr	r1, [r7, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fa4a 	bl	800e500 <USBD_CtlError>
            err++;
 800e06c:	7afb      	ldrb	r3, [r7, #11]
 800e06e:	3301      	adds	r3, #1
 800e070:	72fb      	strb	r3, [r7, #11]
          break;
 800e072:	e021      	b.n	800e0b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00b      	beq.n	800e098 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	7c12      	ldrb	r2, [r2, #16]
 800e08c:	f107 0108 	add.w	r1, r7, #8
 800e090:	4610      	mov	r0, r2
 800e092:	4798      	blx	r3
 800e094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e096:	e00f      	b.n	800e0b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fa30 	bl	800e500 <USBD_CtlError>
            err++;
 800e0a0:	7afb      	ldrb	r3, [r7, #11]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e0a6:	e007      	b.n	800e0b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e0a8:	6839      	ldr	r1, [r7, #0]
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fa28 	bl	800e500 <USBD_CtlError>
          err++;
 800e0b0:	7afb      	ldrb	r3, [r7, #11]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e0b6:	bf00      	nop
      }
      break;
 800e0b8:	e037      	b.n	800e12a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	7c1b      	ldrb	r3, [r3, #16]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d109      	bne.n	800e0d6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ca:	f107 0208 	add.w	r2, r7, #8
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	4798      	blx	r3
 800e0d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0d4:	e029      	b.n	800e12a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fa11 	bl	800e500 <USBD_CtlError>
        err++;
 800e0de:	7afb      	ldrb	r3, [r7, #11]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	72fb      	strb	r3, [r7, #11]
      break;
 800e0e4:	e021      	b.n	800e12a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	7c1b      	ldrb	r3, [r3, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10d      	bne.n	800e10a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0f6:	f107 0208 	add.w	r2, r7, #8
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	4798      	blx	r3
 800e0fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3301      	adds	r3, #1
 800e104:	2207      	movs	r2, #7
 800e106:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e108:	e00f      	b.n	800e12a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f9f7 	bl	800e500 <USBD_CtlError>
        err++;
 800e112:	7afb      	ldrb	r3, [r7, #11]
 800e114:	3301      	adds	r3, #1
 800e116:	72fb      	strb	r3, [r7, #11]
      break;
 800e118:	e007      	b.n	800e12a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f9ef 	bl	800e500 <USBD_CtlError>
      err++;
 800e122:	7afb      	ldrb	r3, [r7, #11]
 800e124:	3301      	adds	r3, #1
 800e126:	72fb      	strb	r3, [r7, #11]
      break;
 800e128:	bf00      	nop
  }

  if (err != 0U)
 800e12a:	7afb      	ldrb	r3, [r7, #11]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d11e      	bne.n	800e16e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	88db      	ldrh	r3, [r3, #6]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d016      	beq.n	800e166 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e138:	893b      	ldrh	r3, [r7, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00e      	beq.n	800e15c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	88da      	ldrh	r2, [r3, #6]
 800e142:	893b      	ldrh	r3, [r7, #8]
 800e144:	4293      	cmp	r3, r2
 800e146:	bf28      	it	cs
 800e148:	4613      	movcs	r3, r2
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e14e:	893b      	ldrh	r3, [r7, #8]
 800e150:	461a      	mov	r2, r3
 800e152:	68f9      	ldr	r1, [r7, #12]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 fa44 	bl	800e5e2 <USBD_CtlSendData>
 800e15a:	e009      	b.n	800e170 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f9ce 	bl	800e500 <USBD_CtlError>
 800e164:	e004      	b.n	800e170 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fa95 	bl	800e696 <USBD_CtlSendStatus>
 800e16c:	e000      	b.n	800e170 <USBD_GetDescriptor+0x320>
    return;
 800e16e:	bf00      	nop
  }
}
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop

0800e178 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	889b      	ldrh	r3, [r3, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d131      	bne.n	800e1ee <USBD_SetAddress+0x76>
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	88db      	ldrh	r3, [r3, #6]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d12d      	bne.n	800e1ee <USBD_SetAddress+0x76>
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	885b      	ldrh	r3, [r3, #2]
 800e196:	2b7f      	cmp	r3, #127	; 0x7f
 800e198:	d829      	bhi.n	800e1ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	885b      	ldrh	r3, [r3, #2]
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d104      	bne.n	800e1bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f9a3 	bl	800e500 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ba:	e01d      	b.n	800e1f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7bfa      	ldrb	r2, [r7, #15]
 800e1c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fea1 	bl	800ef10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 fa61 	bl	800e696 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d004      	beq.n	800e1e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2202      	movs	r2, #2
 800e1de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1e2:	e009      	b.n	800e1f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ec:	e004      	b.n	800e1f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f985 	bl	800e500 <USBD_CtlError>
  }
}
 800e1f6:	bf00      	nop
 800e1f8:	bf00      	nop
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e20a:	2300      	movs	r3, #0
 800e20c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	885b      	ldrh	r3, [r3, #2]
 800e212:	b2da      	uxtb	r2, r3
 800e214:	4b4c      	ldr	r3, [pc, #304]	; (800e348 <USBD_SetConfig+0x148>)
 800e216:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e218:	4b4b      	ldr	r3, [pc, #300]	; (800e348 <USBD_SetConfig+0x148>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d905      	bls.n	800e22c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f96c 	bl	800e500 <USBD_CtlError>
    return USBD_FAIL;
 800e228:	2303      	movs	r3, #3
 800e22a:	e088      	b.n	800e33e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b02      	cmp	r3, #2
 800e236:	d002      	beq.n	800e23e <USBD_SetConfig+0x3e>
 800e238:	2b03      	cmp	r3, #3
 800e23a:	d025      	beq.n	800e288 <USBD_SetConfig+0x88>
 800e23c:	e071      	b.n	800e322 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e23e:	4b42      	ldr	r3, [pc, #264]	; (800e348 <USBD_SetConfig+0x148>)
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d01c      	beq.n	800e280 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e246:	4b40      	ldr	r3, [pc, #256]	; (800e348 <USBD_SetConfig+0x148>)
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	461a      	mov	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e250:	4b3d      	ldr	r3, [pc, #244]	; (800e348 <USBD_SetConfig+0x148>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	4619      	mov	r1, r3
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7ff f992 	bl	800d580 <USBD_SetClassConfig>
 800e25c:	4603      	mov	r3, r0
 800e25e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d004      	beq.n	800e270 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f949 	bl	800e500 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e26e:	e065      	b.n	800e33c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 fa10 	bl	800e696 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2203      	movs	r2, #3
 800e27a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e27e:	e05d      	b.n	800e33c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fa08 	bl	800e696 <USBD_CtlSendStatus>
      break;
 800e286:	e059      	b.n	800e33c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e288:	4b2f      	ldr	r3, [pc, #188]	; (800e348 <USBD_SetConfig+0x148>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d112      	bne.n	800e2b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2202      	movs	r2, #2
 800e294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e298:	4b2b      	ldr	r3, [pc, #172]	; (800e348 <USBD_SetConfig+0x148>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2a2:	4b29      	ldr	r3, [pc, #164]	; (800e348 <USBD_SetConfig+0x148>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7ff f985 	bl	800d5b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f9f1 	bl	800e696 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e2b4:	e042      	b.n	800e33c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e2b6:	4b24      	ldr	r3, [pc, #144]	; (800e348 <USBD_SetConfig+0x148>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d02a      	beq.n	800e31a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff f973 	bl	800d5b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e2d2:	4b1d      	ldr	r3, [pc, #116]	; (800e348 <USBD_SetConfig+0x148>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2dc:	4b1a      	ldr	r3, [pc, #104]	; (800e348 <USBD_SetConfig+0x148>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff f94c 	bl	800d580 <USBD_SetClassConfig>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e2ec:	7bfb      	ldrb	r3, [r7, #15]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00f      	beq.n	800e312 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f903 	bl	800e500 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff f958 	bl	800d5b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2202      	movs	r2, #2
 800e30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e310:	e014      	b.n	800e33c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 f9bf 	bl	800e696 <USBD_CtlSendStatus>
      break;
 800e318:	e010      	b.n	800e33c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f9bb 	bl	800e696 <USBD_CtlSendStatus>
      break;
 800e320:	e00c      	b.n	800e33c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 f8eb 	bl	800e500 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e32a:	4b07      	ldr	r3, [pc, #28]	; (800e348 <USBD_SetConfig+0x148>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	4619      	mov	r1, r3
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff f941 	bl	800d5b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e336:	2303      	movs	r3, #3
 800e338:	73fb      	strb	r3, [r7, #15]
      break;
 800e33a:	bf00      	nop
  }

  return ret;
 800e33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000be4 	.word	0x20000be4

0800e34c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	88db      	ldrh	r3, [r3, #6]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d004      	beq.n	800e368 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e35e:	6839      	ldr	r1, [r7, #0]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f8cd 	bl	800e500 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e366:	e023      	b.n	800e3b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	2b02      	cmp	r3, #2
 800e372:	dc02      	bgt.n	800e37a <USBD_GetConfig+0x2e>
 800e374:	2b00      	cmp	r3, #0
 800e376:	dc03      	bgt.n	800e380 <USBD_GetConfig+0x34>
 800e378:	e015      	b.n	800e3a6 <USBD_GetConfig+0x5a>
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d00b      	beq.n	800e396 <USBD_GetConfig+0x4a>
 800e37e:	e012      	b.n	800e3a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3308      	adds	r3, #8
 800e38a:	2201      	movs	r2, #1
 800e38c:	4619      	mov	r1, r3
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f927 	bl	800e5e2 <USBD_CtlSendData>
        break;
 800e394:	e00c      	b.n	800e3b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3304      	adds	r3, #4
 800e39a:	2201      	movs	r2, #1
 800e39c:	4619      	mov	r1, r3
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 f91f 	bl	800e5e2 <USBD_CtlSendData>
        break;
 800e3a4:	e004      	b.n	800e3b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f8a9 	bl	800e500 <USBD_CtlError>
        break;
 800e3ae:	bf00      	nop
}
 800e3b0:	bf00      	nop
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	d81e      	bhi.n	800e40e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	88db      	ldrh	r3, [r3, #6]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d004      	beq.n	800e3e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f890 	bl	800e500 <USBD_CtlError>
        break;
 800e3e0:	e01a      	b.n	800e418 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d005      	beq.n	800e3fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	f043 0202 	orr.w	r2, r3, #2
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	330c      	adds	r3, #12
 800e402:	2202      	movs	r2, #2
 800e404:	4619      	mov	r1, r3
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f8eb 	bl	800e5e2 <USBD_CtlSendData>
      break;
 800e40c:	e004      	b.n	800e418 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 f875 	bl	800e500 <USBD_CtlError>
      break;
 800e416:	bf00      	nop
  }
}
 800e418:	bf00      	nop
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	885b      	ldrh	r3, [r3, #2]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d106      	bne.n	800e440 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f92b 	bl	800e696 <USBD_CtlSendStatus>
  }
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	3b01      	subs	r3, #1
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d80b      	bhi.n	800e478 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	885b      	ldrh	r3, [r3, #2]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d10c      	bne.n	800e482 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 f910 	bl	800e696 <USBD_CtlSendStatus>
      }
      break;
 800e476:	e004      	b.n	800e482 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 f840 	bl	800e500 <USBD_CtlError>
      break;
 800e480:	e000      	b.n	800e484 <USBD_ClrFeature+0x3c>
      break;
 800e482:	bf00      	nop
  }
}
 800e484:	bf00      	nop
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	781a      	ldrb	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	781a      	ldrb	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7ff fa92 	bl	800d9e0 <SWAPBYTE>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	461a      	mov	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f7ff fa85 	bl	800d9e0 <SWAPBYTE>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	461a      	mov	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fa78 	bl	800d9e0 <SWAPBYTE>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	80da      	strh	r2, [r3, #6]
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e50a:	2180      	movs	r1, #128	; 0x80
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fc95 	bl	800ee3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e512:	2100      	movs	r1, #0
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fc91 	bl	800ee3c <USBD_LL_StallEP>
}
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b086      	sub	sp, #24
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	60b9      	str	r1, [r7, #8]
 800e52c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e52e:	2300      	movs	r3, #0
 800e530:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d036      	beq.n	800e5a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e53c:	6938      	ldr	r0, [r7, #16]
 800e53e:	f000 f836 	bl	800e5ae <USBD_GetLen>
 800e542:	4603      	mov	r3, r0
 800e544:	3301      	adds	r3, #1
 800e546:	b29b      	uxth	r3, r3
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	4413      	add	r3, r2
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	7812      	ldrb	r2, [r2, #0]
 800e55a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
 800e55e:	3301      	adds	r3, #1
 800e560:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e562:	7dfb      	ldrb	r3, [r7, #23]
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	4413      	add	r3, r2
 800e568:	2203      	movs	r2, #3
 800e56a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	3301      	adds	r3, #1
 800e570:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e572:	e013      	b.n	800e59c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e574:	7dfb      	ldrb	r3, [r7, #23]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	4413      	add	r3, r2
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	7812      	ldrb	r2, [r2, #0]
 800e57e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	3301      	adds	r3, #1
 800e584:	613b      	str	r3, [r7, #16]
    idx++;
 800e586:	7dfb      	ldrb	r3, [r7, #23]
 800e588:	3301      	adds	r3, #1
 800e58a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e58c:	7dfb      	ldrb	r3, [r7, #23]
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	4413      	add	r3, r2
 800e592:	2200      	movs	r2, #0
 800e594:	701a      	strb	r2, [r3, #0]
    idx++;
 800e596:	7dfb      	ldrb	r3, [r7, #23]
 800e598:	3301      	adds	r3, #1
 800e59a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1e7      	bne.n	800e574 <USBD_GetString+0x52>
 800e5a4:	e000      	b.n	800e5a8 <USBD_GetString+0x86>
    return;
 800e5a6:	bf00      	nop
  }
}
 800e5a8:	3718      	adds	r7, #24
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e5ae:	b480      	push	{r7}
 800e5b0:	b085      	sub	sp, #20
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e5be:	e005      	b.n	800e5cc <USBD_GetLen+0x1e>
  {
    len++;
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1f5      	bne.n	800e5c0 <USBD_GetLen+0x12>
  }

  return len;
 800e5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr

0800e5e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b084      	sub	sp, #16
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2202      	movs	r2, #2
 800e5f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	2100      	movs	r1, #0
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f000 fca0 	bl	800ef4e <USBD_LL_Transmit>

  return USBD_OK;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	2100      	movs	r1, #0
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f000 fc8f 	bl	800ef4e <USBD_LL_Transmit>

  return USBD_OK;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	60f8      	str	r0, [r7, #12]
 800e642:	60b9      	str	r1, [r7, #8]
 800e644:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2203      	movs	r2, #3
 800e64a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	2100      	movs	r1, #0
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f000 fc93 	bl	800ef90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	2100      	movs	r1, #0
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f000 fc82 	bl	800ef90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b082      	sub	sp, #8
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2204      	movs	r2, #4
 800e6a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fc4e 	bl	800ef4e <USBD_LL_Transmit>

  return USBD_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2205      	movs	r2, #5
 800e6c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fc5c 	bl	800ef90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	4912      	ldr	r1, [pc, #72]	; (800e734 <MX_USB_Device_Init+0x50>)
 800e6ec:	4812      	ldr	r0, [pc, #72]	; (800e738 <MX_USB_Device_Init+0x54>)
 800e6ee:	f7fe fed9 	bl	800d4a4 <USBD_Init>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d001      	beq.n	800e6fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e6f8:	f7f3 f82c 	bl	8001754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e6fc:	490f      	ldr	r1, [pc, #60]	; (800e73c <MX_USB_Device_Init+0x58>)
 800e6fe:	480e      	ldr	r0, [pc, #56]	; (800e738 <MX_USB_Device_Init+0x54>)
 800e700:	f7fe ff00 	bl	800d504 <USBD_RegisterClass>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d001      	beq.n	800e70e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e70a:	f7f3 f823 	bl	8001754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e70e:	490c      	ldr	r1, [pc, #48]	; (800e740 <MX_USB_Device_Init+0x5c>)
 800e710:	4809      	ldr	r0, [pc, #36]	; (800e738 <MX_USB_Device_Init+0x54>)
 800e712:	f7fe fe21 	bl	800d358 <USBD_CDC_RegisterInterface>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e71c:	f7f3 f81a 	bl	8001754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e720:	4805      	ldr	r0, [pc, #20]	; (800e738 <MX_USB_Device_Init+0x54>)
 800e722:	f7fe ff16 	bl	800d552 <USBD_Start>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e72c:	f7f3 f812 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e730:	bf00      	nop
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20000130 	.word	0x20000130
 800e738:	20000be8 	.word	0x20000be8
 800e73c:	20000018 	.word	0x20000018
 800e740:	2000011c 	.word	0x2000011c

0800e744 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e748:	2200      	movs	r2, #0
 800e74a:	4905      	ldr	r1, [pc, #20]	; (800e760 <CDC_Init_FS+0x1c>)
 800e74c:	4805      	ldr	r0, [pc, #20]	; (800e764 <CDC_Init_FS+0x20>)
 800e74e:	f7fe fe18 	bl	800d382 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e752:	4905      	ldr	r1, [pc, #20]	; (800e768 <CDC_Init_FS+0x24>)
 800e754:	4803      	ldr	r0, [pc, #12]	; (800e764 <CDC_Init_FS+0x20>)
 800e756:	f7fe fe32 	bl	800d3be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e75a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	200012b8 	.word	0x200012b8
 800e764:	20000be8 	.word	0x20000be8
 800e768:	20000eb8 	.word	0x20000eb8

0800e76c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e76c:	b480      	push	{r7}
 800e76e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e770:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e772:	4618      	mov	r0, r3
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	4603      	mov	r3, r0
 800e784:	6039      	str	r1, [r7, #0]
 800e786:	71fb      	strb	r3, [r7, #7]
 800e788:	4613      	mov	r3, r2
 800e78a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e78c:	79fb      	ldrb	r3, [r7, #7]
 800e78e:	2b23      	cmp	r3, #35	; 0x23
 800e790:	d84a      	bhi.n	800e828 <CDC_Control_FS+0xac>
 800e792:	a201      	add	r2, pc, #4	; (adr r2, 800e798 <CDC_Control_FS+0x1c>)
 800e794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e798:	0800e829 	.word	0x0800e829
 800e79c:	0800e829 	.word	0x0800e829
 800e7a0:	0800e829 	.word	0x0800e829
 800e7a4:	0800e829 	.word	0x0800e829
 800e7a8:	0800e829 	.word	0x0800e829
 800e7ac:	0800e829 	.word	0x0800e829
 800e7b0:	0800e829 	.word	0x0800e829
 800e7b4:	0800e829 	.word	0x0800e829
 800e7b8:	0800e829 	.word	0x0800e829
 800e7bc:	0800e829 	.word	0x0800e829
 800e7c0:	0800e829 	.word	0x0800e829
 800e7c4:	0800e829 	.word	0x0800e829
 800e7c8:	0800e829 	.word	0x0800e829
 800e7cc:	0800e829 	.word	0x0800e829
 800e7d0:	0800e829 	.word	0x0800e829
 800e7d4:	0800e829 	.word	0x0800e829
 800e7d8:	0800e829 	.word	0x0800e829
 800e7dc:	0800e829 	.word	0x0800e829
 800e7e0:	0800e829 	.word	0x0800e829
 800e7e4:	0800e829 	.word	0x0800e829
 800e7e8:	0800e829 	.word	0x0800e829
 800e7ec:	0800e829 	.word	0x0800e829
 800e7f0:	0800e829 	.word	0x0800e829
 800e7f4:	0800e829 	.word	0x0800e829
 800e7f8:	0800e829 	.word	0x0800e829
 800e7fc:	0800e829 	.word	0x0800e829
 800e800:	0800e829 	.word	0x0800e829
 800e804:	0800e829 	.word	0x0800e829
 800e808:	0800e829 	.word	0x0800e829
 800e80c:	0800e829 	.word	0x0800e829
 800e810:	0800e829 	.word	0x0800e829
 800e814:	0800e829 	.word	0x0800e829
 800e818:	0800e829 	.word	0x0800e829
 800e81c:	0800e829 	.word	0x0800e829
 800e820:	0800e829 	.word	0x0800e829
 800e824:	0800e829 	.word	0x0800e829
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e828:	bf00      	nop
  }

  return (USBD_OK);
 800e82a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e842:	6879      	ldr	r1, [r7, #4]
 800e844:	4805      	ldr	r0, [pc, #20]	; (800e85c <CDC_Receive_FS+0x24>)
 800e846:	f7fe fdba 	bl	800d3be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e84a:	4804      	ldr	r0, [pc, #16]	; (800e85c <CDC_Receive_FS+0x24>)
 800e84c:	f7fe fe00 	bl	800d450 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e850:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	20000be8 	.word	0x20000be8

0800e860 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	460b      	mov	r3, r1
 800e86a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e870:	4b0d      	ldr	r3, [pc, #52]	; (800e8a8 <CDC_Transmit_FS+0x48>)
 800e872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e876:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e882:	2301      	movs	r3, #1
 800e884:	e00b      	b.n	800e89e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e886:	887b      	ldrh	r3, [r7, #2]
 800e888:	461a      	mov	r2, r3
 800e88a:	6879      	ldr	r1, [r7, #4]
 800e88c:	4806      	ldr	r0, [pc, #24]	; (800e8a8 <CDC_Transmit_FS+0x48>)
 800e88e:	f7fe fd78 	bl	800d382 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e892:	4805      	ldr	r0, [pc, #20]	; (800e8a8 <CDC_Transmit_FS+0x48>)
 800e894:	f7fe fdac 	bl	800d3f0 <USBD_CDC_TransmitPacket>
 800e898:	4603      	mov	r3, r0
 800e89a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20000be8 	.word	0x20000be8

0800e8ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b087      	sub	sp, #28
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e8be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	371c      	adds	r7, #28
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
	...

0800e8d0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	6039      	str	r1, [r7, #0]
 800e8da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2212      	movs	r2, #18
 800e8e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e8e2:	4b03      	ldr	r3, [pc, #12]	; (800e8f0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	20000150 	.word	0x20000150

0800e8f4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	6039      	str	r1, [r7, #0]
 800e8fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2204      	movs	r2, #4
 800e904:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e906:	4b03      	ldr	r3, [pc, #12]	; (800e914 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e908:	4618      	mov	r0, r3
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	20000164 	.word	0x20000164

0800e918 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	6039      	str	r1, [r7, #0]
 800e922:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d105      	bne.n	800e936 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	4907      	ldr	r1, [pc, #28]	; (800e94c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e92e:	4808      	ldr	r0, [pc, #32]	; (800e950 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e930:	f7ff fdf7 	bl	800e522 <USBD_GetString>
 800e934:	e004      	b.n	800e940 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	4904      	ldr	r1, [pc, #16]	; (800e94c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e93a:	4805      	ldr	r0, [pc, #20]	; (800e950 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e93c:	f7ff fdf1 	bl	800e522 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e940:	4b02      	ldr	r3, [pc, #8]	; (800e94c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e942:	4618      	mov	r0, r3
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	200016b8 	.word	0x200016b8
 800e950:	08013b34 	.word	0x08013b34

0800e954 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	4603      	mov	r3, r0
 800e95c:	6039      	str	r1, [r7, #0]
 800e95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	4904      	ldr	r1, [pc, #16]	; (800e974 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e964:	4804      	ldr	r0, [pc, #16]	; (800e978 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e966:	f7ff fddc 	bl	800e522 <USBD_GetString>
  return USBD_StrDesc;
 800e96a:	4b02      	ldr	r3, [pc, #8]	; (800e974 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	200016b8 	.word	0x200016b8
 800e978:	08013b4c 	.word	0x08013b4c

0800e97c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	4603      	mov	r3, r0
 800e984:	6039      	str	r1, [r7, #0]
 800e986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	221a      	movs	r2, #26
 800e98c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e98e:	f000 f843 	bl	800ea18 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e992:	4b02      	ldr	r3, [pc, #8]	; (800e99c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	20000168 	.word	0x20000168

0800e9a0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	6039      	str	r1, [r7, #0]
 800e9aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e9ac:	79fb      	ldrb	r3, [r7, #7]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d105      	bne.n	800e9be <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	4907      	ldr	r1, [pc, #28]	; (800e9d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e9b6:	4808      	ldr	r0, [pc, #32]	; (800e9d8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e9b8:	f7ff fdb3 	bl	800e522 <USBD_GetString>
 800e9bc:	e004      	b.n	800e9c8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	4904      	ldr	r1, [pc, #16]	; (800e9d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e9c2:	4805      	ldr	r0, [pc, #20]	; (800e9d8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e9c4:	f7ff fdad 	bl	800e522 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9c8:	4b02      	ldr	r3, [pc, #8]	; (800e9d4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	200016b8 	.word	0x200016b8
 800e9d8:	08013b60 	.word	0x08013b60

0800e9dc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	6039      	str	r1, [r7, #0]
 800e9e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e9e8:	79fb      	ldrb	r3, [r7, #7]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d105      	bne.n	800e9fa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	4907      	ldr	r1, [pc, #28]	; (800ea10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e9f2:	4808      	ldr	r0, [pc, #32]	; (800ea14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e9f4:	f7ff fd95 	bl	800e522 <USBD_GetString>
 800e9f8:	e004      	b.n	800ea04 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	4904      	ldr	r1, [pc, #16]	; (800ea10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e9fe:	4805      	ldr	r0, [pc, #20]	; (800ea14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ea00:	f7ff fd8f 	bl	800e522 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea04:	4b02      	ldr	r3, [pc, #8]	; (800ea10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	200016b8 	.word	0x200016b8
 800ea14:	08013b6c 	.word	0x08013b6c

0800ea18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ea1e:	4b0f      	ldr	r3, [pc, #60]	; (800ea5c <Get_SerialNum+0x44>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ea24:	4b0e      	ldr	r3, [pc, #56]	; (800ea60 <Get_SerialNum+0x48>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ea2a:	4b0e      	ldr	r3, [pc, #56]	; (800ea64 <Get_SerialNum+0x4c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4413      	add	r3, r2
 800ea36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d009      	beq.n	800ea52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea3e:	2208      	movs	r2, #8
 800ea40:	4909      	ldr	r1, [pc, #36]	; (800ea68 <Get_SerialNum+0x50>)
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f000 f814 	bl	800ea70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea48:	2204      	movs	r2, #4
 800ea4a:	4908      	ldr	r1, [pc, #32]	; (800ea6c <Get_SerialNum+0x54>)
 800ea4c:	68b8      	ldr	r0, [r7, #8]
 800ea4e:	f000 f80f 	bl	800ea70 <IntToUnicode>
  }
}
 800ea52:	bf00      	nop
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	1fff7590 	.word	0x1fff7590
 800ea60:	1fff7594 	.word	0x1fff7594
 800ea64:	1fff7598 	.word	0x1fff7598
 800ea68:	2000016a 	.word	0x2000016a
 800ea6c:	2000017a 	.word	0x2000017a

0800ea70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea82:	2300      	movs	r3, #0
 800ea84:	75fb      	strb	r3, [r7, #23]
 800ea86:	e027      	b.n	800ead8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	0f1b      	lsrs	r3, r3, #28
 800ea8c:	2b09      	cmp	r3, #9
 800ea8e:	d80b      	bhi.n	800eaa8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	0f1b      	lsrs	r3, r3, #28
 800ea94:	b2da      	uxtb	r2, r3
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
 800ea98:	005b      	lsls	r3, r3, #1
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	440b      	add	r3, r1
 800eaa0:	3230      	adds	r2, #48	; 0x30
 800eaa2:	b2d2      	uxtb	r2, r2
 800eaa4:	701a      	strb	r2, [r3, #0]
 800eaa6:	e00a      	b.n	800eabe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	0f1b      	lsrs	r3, r3, #28
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	7dfb      	ldrb	r3, [r7, #23]
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	4619      	mov	r1, r3
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	440b      	add	r3, r1
 800eab8:	3237      	adds	r2, #55	; 0x37
 800eaba:	b2d2      	uxtb	r2, r2
 800eabc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	011b      	lsls	r3, r3, #4
 800eac2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eac4:	7dfb      	ldrb	r3, [r7, #23]
 800eac6:	005b      	lsls	r3, r3, #1
 800eac8:	3301      	adds	r3, #1
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	4413      	add	r3, r2
 800eace:	2200      	movs	r2, #0
 800ead0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	3301      	adds	r3, #1
 800ead6:	75fb      	strb	r3, [r7, #23]
 800ead8:	7dfa      	ldrb	r2, [r7, #23]
 800eada:	79fb      	ldrb	r3, [r7, #7]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d3d3      	bcc.n	800ea88 <IntToUnicode+0x18>
  }
}
 800eae0:	bf00      	nop
 800eae2:	bf00      	nop
 800eae4:	371c      	adds	r7, #28
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
	...

0800eaf0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b094      	sub	sp, #80	; 0x50
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800eaf8:	f107 030c 	add.w	r3, r7, #12
 800eafc:	2244      	movs	r2, #68	; 0x44
 800eafe:	2100      	movs	r1, #0
 800eb00:	4618      	mov	r0, r3
 800eb02:	f002 fa8a 	bl	801101a <memset>
  if(pcdHandle->Instance==USB)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a15      	ldr	r2, [pc, #84]	; (800eb60 <HAL_PCD_MspInit+0x70>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d123      	bne.n	800eb58 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800eb10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800eb16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb1a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eb1c:	f107 030c 	add.w	r3, r7, #12
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f8 fe71 	bl	8007808 <HAL_RCCEx_PeriphCLKConfig>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800eb2c:	f7f2 fe12 	bl	8001754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800eb30:	4b0c      	ldr	r3, [pc, #48]	; (800eb64 <HAL_PCD_MspInit+0x74>)
 800eb32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb34:	4a0b      	ldr	r2, [pc, #44]	; (800eb64 <HAL_PCD_MspInit+0x74>)
 800eb36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eb3a:	6593      	str	r3, [r2, #88]	; 0x58
 800eb3c:	4b09      	ldr	r3, [pc, #36]	; (800eb64 <HAL_PCD_MspInit+0x74>)
 800eb3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb44:	60bb      	str	r3, [r7, #8]
 800eb46:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	2014      	movs	r0, #20
 800eb4e:	f7f5 fd06 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800eb52:	2014      	movs	r0, #20
 800eb54:	f7f5 fd1d 	bl	8004592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800eb58:	bf00      	nop
 800eb5a:	3750      	adds	r7, #80	; 0x50
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	40005c00 	.word	0x40005c00
 800eb64:	40021000 	.word	0x40021000

0800eb68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	4610      	mov	r0, r2
 800eb80:	f7fe fd32 	bl	800d5e8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800eb9e:	78fa      	ldrb	r2, [r7, #3]
 800eba0:	6879      	ldr	r1, [r7, #4]
 800eba2:	4613      	mov	r3, r2
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	4413      	add	r3, r2
 800eba8:	00db      	lsls	r3, r3, #3
 800ebaa:	440b      	add	r3, r1
 800ebac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	78fb      	ldrb	r3, [r7, #3]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	f7fe fd6c 	bl	800d692 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ebd4:	78fa      	ldrb	r2, [r7, #3]
 800ebd6:	6879      	ldr	r1, [r7, #4]
 800ebd8:	4613      	mov	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	440b      	add	r3, r1
 800ebe2:	3324      	adds	r3, #36	; 0x24
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	78fb      	ldrb	r3, [r7, #3]
 800ebe8:	4619      	mov	r1, r3
 800ebea:	f7fe fdb5 	bl	800d758 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ebee:	bf00      	nop
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b082      	sub	sp, #8
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fe fec9 	bl	800d99c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ec0a:	bf00      	nop
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b084      	sub	sp, #16
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	795b      	ldrb	r3, [r3, #5]
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d001      	beq.n	800ec2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ec26:	f7f2 fd95 	bl	8001754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec30:	7bfa      	ldrb	r2, [r7, #15]
 800ec32:	4611      	mov	r1, r2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fe fe73 	bl	800d920 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe fe1f 	bl	800d884 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
	...

0800ec50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe fe6e 	bl	800d940 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	7a5b      	ldrb	r3, [r3, #9]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d005      	beq.n	800ec78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec6c:	4b04      	ldr	r3, [pc, #16]	; (800ec80 <HAL_PCD_SuspendCallback+0x30>)
 800ec6e:	691b      	ldr	r3, [r3, #16]
 800ec70:	4a03      	ldr	r2, [pc, #12]	; (800ec80 <HAL_PCD_SuspendCallback+0x30>)
 800ec72:	f043 0306 	orr.w	r3, r3, #6
 800ec76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ec78:	bf00      	nop
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	e000ed00 	.word	0xe000ed00

0800ec84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	7a5b      	ldrb	r3, [r3, #9]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d007      	beq.n	800eca4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec94:	4b08      	ldr	r3, [pc, #32]	; (800ecb8 <HAL_PCD_ResumeCallback+0x34>)
 800ec96:	691b      	ldr	r3, [r3, #16]
 800ec98:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <HAL_PCD_ResumeCallback+0x34>)
 800ec9a:	f023 0306 	bic.w	r3, r3, #6
 800ec9e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eca0:	f000 f9f8 	bl	800f094 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fe fe5e 	bl	800d96c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	e000ed00 	.word	0xe000ed00

0800ecbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ecc4:	4a2b      	ldr	r2, [pc, #172]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a29      	ldr	r2, [pc, #164]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ecd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ecd4:	4b27      	ldr	r3, [pc, #156]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ecd6:	4a28      	ldr	r2, [pc, #160]	; (800ed78 <USBD_LL_Init+0xbc>)
 800ecd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ecda:	4b26      	ldr	r3, [pc, #152]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ecdc:	2208      	movs	r2, #8
 800ecde:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ece0:	4b24      	ldr	r3, [pc, #144]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ece2:	2202      	movs	r2, #2
 800ece4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ece6:	4b23      	ldr	r3, [pc, #140]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ece8:	2202      	movs	r2, #2
 800ecea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ecec:	4b21      	ldr	r3, [pc, #132]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ecf2:	4b20      	ldr	r3, [pc, #128]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ecf8:	4b1e      	ldr	r3, [pc, #120]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ecfe:	4b1d      	ldr	r3, [pc, #116]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ed00:	2200      	movs	r2, #0
 800ed02:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ed04:	481b      	ldr	r0, [pc, #108]	; (800ed74 <USBD_LL_Init+0xb8>)
 800ed06:	f7f6 fa69 	bl	80051dc <HAL_PCD_Init>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ed10:	f7f2 fd20 	bl	8001754 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed1a:	2318      	movs	r3, #24
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	2100      	movs	r1, #0
 800ed20:	f7f7 ff23 	bl	8006b6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed2a:	2358      	movs	r3, #88	; 0x58
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	2180      	movs	r1, #128	; 0x80
 800ed30:	f7f7 ff1b 	bl	8006b6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed3a:	23c0      	movs	r3, #192	; 0xc0
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2181      	movs	r1, #129	; 0x81
 800ed40:	f7f7 ff13 	bl	8006b6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2101      	movs	r1, #1
 800ed52:	f7f7 ff0a 	bl	8006b6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed60:	2200      	movs	r2, #0
 800ed62:	2182      	movs	r1, #130	; 0x82
 800ed64:	f7f7 ff01 	bl	8006b6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	200018b8 	.word	0x200018b8
 800ed78:	40005c00 	.word	0x40005c00

0800ed7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7f6 faf0 	bl	8005378 <HAL_PCD_Start>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed9c:	7bfb      	ldrb	r3, [r7, #15]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 f97e 	bl	800f0a0 <USBD_Get_USB_Status>
 800eda4:	4603      	mov	r3, r0
 800eda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b084      	sub	sp, #16
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	4608      	mov	r0, r1
 800edbc:	4611      	mov	r1, r2
 800edbe:	461a      	mov	r2, r3
 800edc0:	4603      	mov	r3, r0
 800edc2:	70fb      	strb	r3, [r7, #3]
 800edc4:	460b      	mov	r3, r1
 800edc6:	70bb      	strb	r3, [r7, #2]
 800edc8:	4613      	mov	r3, r2
 800edca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800edda:	78bb      	ldrb	r3, [r7, #2]
 800eddc:	883a      	ldrh	r2, [r7, #0]
 800edde:	78f9      	ldrb	r1, [r7, #3]
 800ede0:	f7f6 fc37 	bl	8005652 <HAL_PCD_EP_Open>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
 800edea:	4618      	mov	r0, r3
 800edec:	f000 f958 	bl	800f0a0 <USBD_Get_USB_Status>
 800edf0:	4603      	mov	r3, r0
 800edf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	460b      	mov	r3, r1
 800ee08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee18:	78fa      	ldrb	r2, [r7, #3]
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7f6 fc75 	bl	800570c <HAL_PCD_EP_Close>
 800ee22:	4603      	mov	r3, r0
 800ee24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee26:	7bfb      	ldrb	r3, [r7, #15]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f000 f939 	bl	800f0a0 <USBD_Get_USB_Status>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	460b      	mov	r3, r1
 800ee46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee56:	78fa      	ldrb	r2, [r7, #3]
 800ee58:	4611      	mov	r1, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7f6 fd1e 	bl	800589c <HAL_PCD_EP_SetStall>
 800ee60:	4603      	mov	r3, r0
 800ee62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 f91a 	bl	800f0a0 <USBD_Get_USB_Status>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b084      	sub	sp, #16
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	460b      	mov	r3, r1
 800ee84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee94:	78fa      	ldrb	r2, [r7, #3]
 800ee96:	4611      	mov	r1, r2
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7f6 fd51 	bl	8005940 <HAL_PCD_EP_ClrStall>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eea2:	7bfb      	ldrb	r3, [r7, #15]
 800eea4:	4618      	mov	r0, r3
 800eea6:	f000 f8fb 	bl	800f0a0 <USBD_Get_USB_Status>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eeae:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3710      	adds	r7, #16
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b085      	sub	sp, #20
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	460b      	mov	r3, r1
 800eec2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eeca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	da0b      	bge.n	800eeec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eed4:	78fb      	ldrb	r3, [r7, #3]
 800eed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eeda:	68f9      	ldr	r1, [r7, #12]
 800eedc:	4613      	mov	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4413      	add	r3, r2
 800eee2:	00db      	lsls	r3, r3, #3
 800eee4:	440b      	add	r3, r1
 800eee6:	3312      	adds	r3, #18
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	e00b      	b.n	800ef04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eef2:	68f9      	ldr	r1, [r7, #12]
 800eef4:	4613      	mov	r3, r2
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	4413      	add	r3, r2
 800eefa:	00db      	lsls	r3, r3, #3
 800eefc:	440b      	add	r3, r1
 800eefe:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800ef02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef2a:	78fa      	ldrb	r2, [r7, #3]
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7f6 fb6b 	bl	800560a <HAL_PCD_SetAddress>
 800ef34:	4603      	mov	r3, r0
 800ef36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef38:	7bfb      	ldrb	r3, [r7, #15]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 f8b0 	bl	800f0a0 <USBD_Get_USB_Status>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b086      	sub	sp, #24
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	60f8      	str	r0, [r7, #12]
 800ef56:	607a      	str	r2, [r7, #4]
 800ef58:	603b      	str	r3, [r7, #0]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef6c:	7af9      	ldrb	r1, [r7, #11]
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	f7f6 fc5c 	bl	800582e <HAL_PCD_EP_Transmit>
 800ef76:	4603      	mov	r3, r0
 800ef78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef7a:	7dfb      	ldrb	r3, [r7, #23]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 f88f 	bl	800f0a0 <USBD_Get_USB_Status>
 800ef82:	4603      	mov	r3, r0
 800ef84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef86:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3718      	adds	r7, #24
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	607a      	str	r2, [r7, #4]
 800ef9a:	603b      	str	r3, [r7, #0]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa0:	2300      	movs	r3, #0
 800efa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800efae:	7af9      	ldrb	r1, [r7, #11]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	f7f6 fbf2 	bl	800579c <HAL_PCD_EP_Receive>
 800efb8:	4603      	mov	r3, r0
 800efba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f000 f86e 	bl	800f0a0 <USBD_Get_USB_Status>
 800efc4:	4603      	mov	r3, r0
 800efc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3718      	adds	r7, #24
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b082      	sub	sp, #8
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	460b      	mov	r3, r1
 800efdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efe4:	78fa      	ldrb	r2, [r7, #3]
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f7f6 fc08 	bl	80057fe <HAL_PCD_EP_GetRxCount>
 800efee:	4603      	mov	r3, r0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f004:	78fb      	ldrb	r3, [r7, #3]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d002      	beq.n	800f010 <HAL_PCDEx_LPM_Callback+0x18>
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d013      	beq.n	800f036 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f00e:	e023      	b.n	800f058 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	7a5b      	ldrb	r3, [r3, #9]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d007      	beq.n	800f028 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f018:	f000 f83c 	bl	800f094 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f01c:	4b10      	ldr	r3, [pc, #64]	; (800f060 <HAL_PCDEx_LPM_Callback+0x68>)
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	4a0f      	ldr	r2, [pc, #60]	; (800f060 <HAL_PCDEx_LPM_Callback+0x68>)
 800f022:	f023 0306 	bic.w	r3, r3, #6
 800f026:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fe fc9c 	bl	800d96c <USBD_LL_Resume>
    break;
 800f034:	e010      	b.n	800f058 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fe fc7f 	bl	800d940 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	7a5b      	ldrb	r3, [r3, #9]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d005      	beq.n	800f056 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f04a:	4b05      	ldr	r3, [pc, #20]	; (800f060 <HAL_PCDEx_LPM_Callback+0x68>)
 800f04c:	691b      	ldr	r3, [r3, #16]
 800f04e:	4a04      	ldr	r2, [pc, #16]	; (800f060 <HAL_PCDEx_LPM_Callback+0x68>)
 800f050:	f043 0306 	orr.w	r3, r3, #6
 800f054:	6113      	str	r3, [r2, #16]
    break;
 800f056:	bf00      	nop
}
 800f058:	bf00      	nop
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	e000ed00 	.word	0xe000ed00

0800f064 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f06c:	4b03      	ldr	r3, [pc, #12]	; (800f07c <USBD_static_malloc+0x18>)
}
 800f06e:	4618      	mov	r0, r3
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	20001b94 	.word	0x20001b94

0800f080 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]

}
 800f088:	bf00      	nop
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f098:	f7f2 fb10 	bl	80016bc <SystemClock_Config>
}
 800f09c:	bf00      	nop
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0ae:	79fb      	ldrb	r3, [r7, #7]
 800f0b0:	2b03      	cmp	r3, #3
 800f0b2:	d817      	bhi.n	800f0e4 <USBD_Get_USB_Status+0x44>
 800f0b4:	a201      	add	r2, pc, #4	; (adr r2, 800f0bc <USBD_Get_USB_Status+0x1c>)
 800f0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ba:	bf00      	nop
 800f0bc:	0800f0cd 	.word	0x0800f0cd
 800f0c0:	0800f0d3 	.word	0x0800f0d3
 800f0c4:	0800f0d9 	.word	0x0800f0d9
 800f0c8:	0800f0df 	.word	0x0800f0df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d0:	e00b      	b.n	800f0ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0d2:	2303      	movs	r3, #3
 800f0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d6:	e008      	b.n	800f0ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	73fb      	strb	r3, [r7, #15]
    break;
 800f0dc:	e005      	b.n	800f0ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f0e2:	e002      	b.n	800f0ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0e8:	bf00      	nop
  }
  return usb_status;
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3714      	adds	r7, #20
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <malloc>:
 800f0f8:	4b02      	ldr	r3, [pc, #8]	; (800f104 <malloc+0xc>)
 800f0fa:	4601      	mov	r1, r0
 800f0fc:	6818      	ldr	r0, [r3, #0]
 800f0fe:	f000 b82b 	b.w	800f158 <_malloc_r>
 800f102:	bf00      	nop
 800f104:	20000348 	.word	0x20000348

0800f108 <free>:
 800f108:	4b02      	ldr	r3, [pc, #8]	; (800f114 <free+0xc>)
 800f10a:	4601      	mov	r1, r0
 800f10c:	6818      	ldr	r0, [r3, #0]
 800f10e:	f002 bf55 	b.w	8011fbc <_free_r>
 800f112:	bf00      	nop
 800f114:	20000348 	.word	0x20000348

0800f118 <sbrk_aligned>:
 800f118:	b570      	push	{r4, r5, r6, lr}
 800f11a:	4e0e      	ldr	r6, [pc, #56]	; (800f154 <sbrk_aligned+0x3c>)
 800f11c:	460c      	mov	r4, r1
 800f11e:	6831      	ldr	r1, [r6, #0]
 800f120:	4605      	mov	r5, r0
 800f122:	b911      	cbnz	r1, 800f12a <sbrk_aligned+0x12>
 800f124:	f002 f83e 	bl	80111a4 <_sbrk_r>
 800f128:	6030      	str	r0, [r6, #0]
 800f12a:	4621      	mov	r1, r4
 800f12c:	4628      	mov	r0, r5
 800f12e:	f002 f839 	bl	80111a4 <_sbrk_r>
 800f132:	1c43      	adds	r3, r0, #1
 800f134:	d00a      	beq.n	800f14c <sbrk_aligned+0x34>
 800f136:	1cc4      	adds	r4, r0, #3
 800f138:	f024 0403 	bic.w	r4, r4, #3
 800f13c:	42a0      	cmp	r0, r4
 800f13e:	d007      	beq.n	800f150 <sbrk_aligned+0x38>
 800f140:	1a21      	subs	r1, r4, r0
 800f142:	4628      	mov	r0, r5
 800f144:	f002 f82e 	bl	80111a4 <_sbrk_r>
 800f148:	3001      	adds	r0, #1
 800f14a:	d101      	bne.n	800f150 <sbrk_aligned+0x38>
 800f14c:	f04f 34ff 	mov.w	r4, #4294967295
 800f150:	4620      	mov	r0, r4
 800f152:	bd70      	pop	{r4, r5, r6, pc}
 800f154:	20001db8 	.word	0x20001db8

0800f158 <_malloc_r>:
 800f158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f15c:	1ccd      	adds	r5, r1, #3
 800f15e:	f025 0503 	bic.w	r5, r5, #3
 800f162:	3508      	adds	r5, #8
 800f164:	2d0c      	cmp	r5, #12
 800f166:	bf38      	it	cc
 800f168:	250c      	movcc	r5, #12
 800f16a:	2d00      	cmp	r5, #0
 800f16c:	4607      	mov	r7, r0
 800f16e:	db01      	blt.n	800f174 <_malloc_r+0x1c>
 800f170:	42a9      	cmp	r1, r5
 800f172:	d905      	bls.n	800f180 <_malloc_r+0x28>
 800f174:	230c      	movs	r3, #12
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	2600      	movs	r6, #0
 800f17a:	4630      	mov	r0, r6
 800f17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f254 <_malloc_r+0xfc>
 800f184:	f000 f868 	bl	800f258 <__malloc_lock>
 800f188:	f8d8 3000 	ldr.w	r3, [r8]
 800f18c:	461c      	mov	r4, r3
 800f18e:	bb5c      	cbnz	r4, 800f1e8 <_malloc_r+0x90>
 800f190:	4629      	mov	r1, r5
 800f192:	4638      	mov	r0, r7
 800f194:	f7ff ffc0 	bl	800f118 <sbrk_aligned>
 800f198:	1c43      	adds	r3, r0, #1
 800f19a:	4604      	mov	r4, r0
 800f19c:	d155      	bne.n	800f24a <_malloc_r+0xf2>
 800f19e:	f8d8 4000 	ldr.w	r4, [r8]
 800f1a2:	4626      	mov	r6, r4
 800f1a4:	2e00      	cmp	r6, #0
 800f1a6:	d145      	bne.n	800f234 <_malloc_r+0xdc>
 800f1a8:	2c00      	cmp	r4, #0
 800f1aa:	d048      	beq.n	800f23e <_malloc_r+0xe6>
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	4631      	mov	r1, r6
 800f1b0:	4638      	mov	r0, r7
 800f1b2:	eb04 0903 	add.w	r9, r4, r3
 800f1b6:	f001 fff5 	bl	80111a4 <_sbrk_r>
 800f1ba:	4581      	cmp	r9, r0
 800f1bc:	d13f      	bne.n	800f23e <_malloc_r+0xe6>
 800f1be:	6821      	ldr	r1, [r4, #0]
 800f1c0:	1a6d      	subs	r5, r5, r1
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff ffa7 	bl	800f118 <sbrk_aligned>
 800f1ca:	3001      	adds	r0, #1
 800f1cc:	d037      	beq.n	800f23e <_malloc_r+0xe6>
 800f1ce:	6823      	ldr	r3, [r4, #0]
 800f1d0:	442b      	add	r3, r5
 800f1d2:	6023      	str	r3, [r4, #0]
 800f1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d038      	beq.n	800f24e <_malloc_r+0xf6>
 800f1dc:	685a      	ldr	r2, [r3, #4]
 800f1de:	42a2      	cmp	r2, r4
 800f1e0:	d12b      	bne.n	800f23a <_malloc_r+0xe2>
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	605a      	str	r2, [r3, #4]
 800f1e6:	e00f      	b.n	800f208 <_malloc_r+0xb0>
 800f1e8:	6822      	ldr	r2, [r4, #0]
 800f1ea:	1b52      	subs	r2, r2, r5
 800f1ec:	d41f      	bmi.n	800f22e <_malloc_r+0xd6>
 800f1ee:	2a0b      	cmp	r2, #11
 800f1f0:	d917      	bls.n	800f222 <_malloc_r+0xca>
 800f1f2:	1961      	adds	r1, r4, r5
 800f1f4:	42a3      	cmp	r3, r4
 800f1f6:	6025      	str	r5, [r4, #0]
 800f1f8:	bf18      	it	ne
 800f1fa:	6059      	strne	r1, [r3, #4]
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	bf08      	it	eq
 800f200:	f8c8 1000 	streq.w	r1, [r8]
 800f204:	5162      	str	r2, [r4, r5]
 800f206:	604b      	str	r3, [r1, #4]
 800f208:	4638      	mov	r0, r7
 800f20a:	f104 060b 	add.w	r6, r4, #11
 800f20e:	f000 f829 	bl	800f264 <__malloc_unlock>
 800f212:	f026 0607 	bic.w	r6, r6, #7
 800f216:	1d23      	adds	r3, r4, #4
 800f218:	1af2      	subs	r2, r6, r3
 800f21a:	d0ae      	beq.n	800f17a <_malloc_r+0x22>
 800f21c:	1b9b      	subs	r3, r3, r6
 800f21e:	50a3      	str	r3, [r4, r2]
 800f220:	e7ab      	b.n	800f17a <_malloc_r+0x22>
 800f222:	42a3      	cmp	r3, r4
 800f224:	6862      	ldr	r2, [r4, #4]
 800f226:	d1dd      	bne.n	800f1e4 <_malloc_r+0x8c>
 800f228:	f8c8 2000 	str.w	r2, [r8]
 800f22c:	e7ec      	b.n	800f208 <_malloc_r+0xb0>
 800f22e:	4623      	mov	r3, r4
 800f230:	6864      	ldr	r4, [r4, #4]
 800f232:	e7ac      	b.n	800f18e <_malloc_r+0x36>
 800f234:	4634      	mov	r4, r6
 800f236:	6876      	ldr	r6, [r6, #4]
 800f238:	e7b4      	b.n	800f1a4 <_malloc_r+0x4c>
 800f23a:	4613      	mov	r3, r2
 800f23c:	e7cc      	b.n	800f1d8 <_malloc_r+0x80>
 800f23e:	230c      	movs	r3, #12
 800f240:	603b      	str	r3, [r7, #0]
 800f242:	4638      	mov	r0, r7
 800f244:	f000 f80e 	bl	800f264 <__malloc_unlock>
 800f248:	e797      	b.n	800f17a <_malloc_r+0x22>
 800f24a:	6025      	str	r5, [r4, #0]
 800f24c:	e7dc      	b.n	800f208 <_malloc_r+0xb0>
 800f24e:	605b      	str	r3, [r3, #4]
 800f250:	deff      	udf	#255	; 0xff
 800f252:	bf00      	nop
 800f254:	20001db4 	.word	0x20001db4

0800f258 <__malloc_lock>:
 800f258:	4801      	ldr	r0, [pc, #4]	; (800f260 <__malloc_lock+0x8>)
 800f25a:	f001 bff0 	b.w	801123e <__retarget_lock_acquire_recursive>
 800f25e:	bf00      	nop
 800f260:	20001efc 	.word	0x20001efc

0800f264 <__malloc_unlock>:
 800f264:	4801      	ldr	r0, [pc, #4]	; (800f26c <__malloc_unlock+0x8>)
 800f266:	f001 bfeb 	b.w	8011240 <__retarget_lock_release_recursive>
 800f26a:	bf00      	nop
 800f26c:	20001efc 	.word	0x20001efc

0800f270 <sulp>:
 800f270:	b570      	push	{r4, r5, r6, lr}
 800f272:	4604      	mov	r4, r0
 800f274:	460d      	mov	r5, r1
 800f276:	ec45 4b10 	vmov	d0, r4, r5
 800f27a:	4616      	mov	r6, r2
 800f27c:	f003 fdc0 	bl	8012e00 <__ulp>
 800f280:	ec51 0b10 	vmov	r0, r1, d0
 800f284:	b17e      	cbz	r6, 800f2a6 <sulp+0x36>
 800f286:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f28a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f28e:	2b00      	cmp	r3, #0
 800f290:	dd09      	ble.n	800f2a6 <sulp+0x36>
 800f292:	051b      	lsls	r3, r3, #20
 800f294:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f298:	2400      	movs	r4, #0
 800f29a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f29e:	4622      	mov	r2, r4
 800f2a0:	462b      	mov	r3, r5
 800f2a2:	f7f1 f9d1 	bl	8000648 <__aeabi_dmul>
 800f2a6:	bd70      	pop	{r4, r5, r6, pc}

0800f2a8 <_strtod_l>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	ed2d 8b02 	vpush	{d8}
 800f2b0:	b09b      	sub	sp, #108	; 0x6c
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	9213      	str	r2, [sp, #76]	; 0x4c
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	9216      	str	r2, [sp, #88]	; 0x58
 800f2ba:	460d      	mov	r5, r1
 800f2bc:	f04f 0800 	mov.w	r8, #0
 800f2c0:	f04f 0900 	mov.w	r9, #0
 800f2c4:	460a      	mov	r2, r1
 800f2c6:	9215      	str	r2, [sp, #84]	; 0x54
 800f2c8:	7811      	ldrb	r1, [r2, #0]
 800f2ca:	292b      	cmp	r1, #43	; 0x2b
 800f2cc:	d04c      	beq.n	800f368 <_strtod_l+0xc0>
 800f2ce:	d83a      	bhi.n	800f346 <_strtod_l+0x9e>
 800f2d0:	290d      	cmp	r1, #13
 800f2d2:	d834      	bhi.n	800f33e <_strtod_l+0x96>
 800f2d4:	2908      	cmp	r1, #8
 800f2d6:	d834      	bhi.n	800f342 <_strtod_l+0x9a>
 800f2d8:	2900      	cmp	r1, #0
 800f2da:	d03d      	beq.n	800f358 <_strtod_l+0xb0>
 800f2dc:	2200      	movs	r2, #0
 800f2de:	920a      	str	r2, [sp, #40]	; 0x28
 800f2e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f2e2:	7832      	ldrb	r2, [r6, #0]
 800f2e4:	2a30      	cmp	r2, #48	; 0x30
 800f2e6:	f040 80b4 	bne.w	800f452 <_strtod_l+0x1aa>
 800f2ea:	7872      	ldrb	r2, [r6, #1]
 800f2ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f2f0:	2a58      	cmp	r2, #88	; 0x58
 800f2f2:	d170      	bne.n	800f3d6 <_strtod_l+0x12e>
 800f2f4:	9302      	str	r3, [sp, #8]
 800f2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f8:	9301      	str	r3, [sp, #4]
 800f2fa:	ab16      	add	r3, sp, #88	; 0x58
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	4a8e      	ldr	r2, [pc, #568]	; (800f538 <_strtod_l+0x290>)
 800f300:	ab17      	add	r3, sp, #92	; 0x5c
 800f302:	a915      	add	r1, sp, #84	; 0x54
 800f304:	4620      	mov	r0, r4
 800f306:	f002 ff0d 	bl	8012124 <__gethex>
 800f30a:	f010 070f 	ands.w	r7, r0, #15
 800f30e:	4605      	mov	r5, r0
 800f310:	d005      	beq.n	800f31e <_strtod_l+0x76>
 800f312:	2f06      	cmp	r7, #6
 800f314:	d12a      	bne.n	800f36c <_strtod_l+0xc4>
 800f316:	3601      	adds	r6, #1
 800f318:	2300      	movs	r3, #0
 800f31a:	9615      	str	r6, [sp, #84]	; 0x54
 800f31c:	930a      	str	r3, [sp, #40]	; 0x28
 800f31e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f320:	2b00      	cmp	r3, #0
 800f322:	f040 857f 	bne.w	800fe24 <_strtod_l+0xb7c>
 800f326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f328:	b1db      	cbz	r3, 800f362 <_strtod_l+0xba>
 800f32a:	4642      	mov	r2, r8
 800f32c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f330:	ec43 2b10 	vmov	d0, r2, r3
 800f334:	b01b      	add	sp, #108	; 0x6c
 800f336:	ecbd 8b02 	vpop	{d8}
 800f33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33e:	2920      	cmp	r1, #32
 800f340:	d1cc      	bne.n	800f2dc <_strtod_l+0x34>
 800f342:	3201      	adds	r2, #1
 800f344:	e7bf      	b.n	800f2c6 <_strtod_l+0x1e>
 800f346:	292d      	cmp	r1, #45	; 0x2d
 800f348:	d1c8      	bne.n	800f2dc <_strtod_l+0x34>
 800f34a:	2101      	movs	r1, #1
 800f34c:	910a      	str	r1, [sp, #40]	; 0x28
 800f34e:	1c51      	adds	r1, r2, #1
 800f350:	9115      	str	r1, [sp, #84]	; 0x54
 800f352:	7852      	ldrb	r2, [r2, #1]
 800f354:	2a00      	cmp	r2, #0
 800f356:	d1c3      	bne.n	800f2e0 <_strtod_l+0x38>
 800f358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f35a:	9515      	str	r5, [sp, #84]	; 0x54
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	f040 855f 	bne.w	800fe20 <_strtod_l+0xb78>
 800f362:	4642      	mov	r2, r8
 800f364:	464b      	mov	r3, r9
 800f366:	e7e3      	b.n	800f330 <_strtod_l+0x88>
 800f368:	2100      	movs	r1, #0
 800f36a:	e7ef      	b.n	800f34c <_strtod_l+0xa4>
 800f36c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f36e:	b13a      	cbz	r2, 800f380 <_strtod_l+0xd8>
 800f370:	2135      	movs	r1, #53	; 0x35
 800f372:	a818      	add	r0, sp, #96	; 0x60
 800f374:	f003 fe41 	bl	8012ffa <__copybits>
 800f378:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f37a:	4620      	mov	r0, r4
 800f37c:	f003 fa14 	bl	80127a8 <_Bfree>
 800f380:	3f01      	subs	r7, #1
 800f382:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f384:	2f04      	cmp	r7, #4
 800f386:	d806      	bhi.n	800f396 <_strtod_l+0xee>
 800f388:	e8df f007 	tbb	[pc, r7]
 800f38c:	201d0314 	.word	0x201d0314
 800f390:	14          	.byte	0x14
 800f391:	00          	.byte	0x00
 800f392:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800f396:	05e9      	lsls	r1, r5, #23
 800f398:	bf48      	it	mi
 800f39a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800f39e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f3a2:	0d1b      	lsrs	r3, r3, #20
 800f3a4:	051b      	lsls	r3, r3, #20
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1b9      	bne.n	800f31e <_strtod_l+0x76>
 800f3aa:	f001 ff1d 	bl	80111e8 <__errno>
 800f3ae:	2322      	movs	r3, #34	; 0x22
 800f3b0:	6003      	str	r3, [r0, #0]
 800f3b2:	e7b4      	b.n	800f31e <_strtod_l+0x76>
 800f3b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800f3b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f3bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f3c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f3c4:	e7e7      	b.n	800f396 <_strtod_l+0xee>
 800f3c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f540 <_strtod_l+0x298>
 800f3ca:	e7e4      	b.n	800f396 <_strtod_l+0xee>
 800f3cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f3d0:	f04f 38ff 	mov.w	r8, #4294967295
 800f3d4:	e7df      	b.n	800f396 <_strtod_l+0xee>
 800f3d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	9215      	str	r2, [sp, #84]	; 0x54
 800f3dc:	785b      	ldrb	r3, [r3, #1]
 800f3de:	2b30      	cmp	r3, #48	; 0x30
 800f3e0:	d0f9      	beq.n	800f3d6 <_strtod_l+0x12e>
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d09b      	beq.n	800f31e <_strtod_l+0x76>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	f04f 0a00 	mov.w	sl, #0
 800f3ec:	9304      	str	r3, [sp, #16]
 800f3ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f3f6:	46d3      	mov	fp, sl
 800f3f8:	220a      	movs	r2, #10
 800f3fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f3fc:	7806      	ldrb	r6, [r0, #0]
 800f3fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f402:	b2d9      	uxtb	r1, r3
 800f404:	2909      	cmp	r1, #9
 800f406:	d926      	bls.n	800f456 <_strtod_l+0x1ae>
 800f408:	494c      	ldr	r1, [pc, #304]	; (800f53c <_strtod_l+0x294>)
 800f40a:	2201      	movs	r2, #1
 800f40c:	f001 fe0d 	bl	801102a <strncmp>
 800f410:	2800      	cmp	r0, #0
 800f412:	d030      	beq.n	800f476 <_strtod_l+0x1ce>
 800f414:	2000      	movs	r0, #0
 800f416:	4632      	mov	r2, r6
 800f418:	9005      	str	r0, [sp, #20]
 800f41a:	465e      	mov	r6, fp
 800f41c:	4603      	mov	r3, r0
 800f41e:	2a65      	cmp	r2, #101	; 0x65
 800f420:	d001      	beq.n	800f426 <_strtod_l+0x17e>
 800f422:	2a45      	cmp	r2, #69	; 0x45
 800f424:	d113      	bne.n	800f44e <_strtod_l+0x1a6>
 800f426:	b91e      	cbnz	r6, 800f430 <_strtod_l+0x188>
 800f428:	9a04      	ldr	r2, [sp, #16]
 800f42a:	4302      	orrs	r2, r0
 800f42c:	d094      	beq.n	800f358 <_strtod_l+0xb0>
 800f42e:	2600      	movs	r6, #0
 800f430:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f432:	1c6a      	adds	r2, r5, #1
 800f434:	9215      	str	r2, [sp, #84]	; 0x54
 800f436:	786a      	ldrb	r2, [r5, #1]
 800f438:	2a2b      	cmp	r2, #43	; 0x2b
 800f43a:	d074      	beq.n	800f526 <_strtod_l+0x27e>
 800f43c:	2a2d      	cmp	r2, #45	; 0x2d
 800f43e:	d078      	beq.n	800f532 <_strtod_l+0x28a>
 800f440:	f04f 0c00 	mov.w	ip, #0
 800f444:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f448:	2909      	cmp	r1, #9
 800f44a:	d97f      	bls.n	800f54c <_strtod_l+0x2a4>
 800f44c:	9515      	str	r5, [sp, #84]	; 0x54
 800f44e:	2700      	movs	r7, #0
 800f450:	e09e      	b.n	800f590 <_strtod_l+0x2e8>
 800f452:	2300      	movs	r3, #0
 800f454:	e7c8      	b.n	800f3e8 <_strtod_l+0x140>
 800f456:	f1bb 0f08 	cmp.w	fp, #8
 800f45a:	bfd8      	it	le
 800f45c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f45e:	f100 0001 	add.w	r0, r0, #1
 800f462:	bfda      	itte	le
 800f464:	fb02 3301 	mlale	r3, r2, r1, r3
 800f468:	9309      	strle	r3, [sp, #36]	; 0x24
 800f46a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f46e:	f10b 0b01 	add.w	fp, fp, #1
 800f472:	9015      	str	r0, [sp, #84]	; 0x54
 800f474:	e7c1      	b.n	800f3fa <_strtod_l+0x152>
 800f476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f478:	1c5a      	adds	r2, r3, #1
 800f47a:	9215      	str	r2, [sp, #84]	; 0x54
 800f47c:	785a      	ldrb	r2, [r3, #1]
 800f47e:	f1bb 0f00 	cmp.w	fp, #0
 800f482:	d037      	beq.n	800f4f4 <_strtod_l+0x24c>
 800f484:	9005      	str	r0, [sp, #20]
 800f486:	465e      	mov	r6, fp
 800f488:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f48c:	2b09      	cmp	r3, #9
 800f48e:	d912      	bls.n	800f4b6 <_strtod_l+0x20e>
 800f490:	2301      	movs	r3, #1
 800f492:	e7c4      	b.n	800f41e <_strtod_l+0x176>
 800f494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	9215      	str	r2, [sp, #84]	; 0x54
 800f49a:	785a      	ldrb	r2, [r3, #1]
 800f49c:	3001      	adds	r0, #1
 800f49e:	2a30      	cmp	r2, #48	; 0x30
 800f4a0:	d0f8      	beq.n	800f494 <_strtod_l+0x1ec>
 800f4a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f4a6:	2b08      	cmp	r3, #8
 800f4a8:	f200 84c1 	bhi.w	800fe2e <_strtod_l+0xb86>
 800f4ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4ae:	9005      	str	r0, [sp, #20]
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	3a30      	subs	r2, #48	; 0x30
 800f4b8:	f100 0301 	add.w	r3, r0, #1
 800f4bc:	d014      	beq.n	800f4e8 <_strtod_l+0x240>
 800f4be:	9905      	ldr	r1, [sp, #20]
 800f4c0:	4419      	add	r1, r3
 800f4c2:	9105      	str	r1, [sp, #20]
 800f4c4:	4633      	mov	r3, r6
 800f4c6:	eb00 0c06 	add.w	ip, r0, r6
 800f4ca:	210a      	movs	r1, #10
 800f4cc:	4563      	cmp	r3, ip
 800f4ce:	d113      	bne.n	800f4f8 <_strtod_l+0x250>
 800f4d0:	1833      	adds	r3, r6, r0
 800f4d2:	2b08      	cmp	r3, #8
 800f4d4:	f106 0601 	add.w	r6, r6, #1
 800f4d8:	4406      	add	r6, r0
 800f4da:	dc1a      	bgt.n	800f512 <_strtod_l+0x26a>
 800f4dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4de:	230a      	movs	r3, #10
 800f4e0:	fb03 2301 	mla	r3, r3, r1, r2
 800f4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f4ea:	1c51      	adds	r1, r2, #1
 800f4ec:	9115      	str	r1, [sp, #84]	; 0x54
 800f4ee:	7852      	ldrb	r2, [r2, #1]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	e7c9      	b.n	800f488 <_strtod_l+0x1e0>
 800f4f4:	4658      	mov	r0, fp
 800f4f6:	e7d2      	b.n	800f49e <_strtod_l+0x1f6>
 800f4f8:	2b08      	cmp	r3, #8
 800f4fa:	f103 0301 	add.w	r3, r3, #1
 800f4fe:	dc03      	bgt.n	800f508 <_strtod_l+0x260>
 800f500:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f502:	434f      	muls	r7, r1
 800f504:	9709      	str	r7, [sp, #36]	; 0x24
 800f506:	e7e1      	b.n	800f4cc <_strtod_l+0x224>
 800f508:	2b10      	cmp	r3, #16
 800f50a:	bfd8      	it	le
 800f50c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800f510:	e7dc      	b.n	800f4cc <_strtod_l+0x224>
 800f512:	2e10      	cmp	r6, #16
 800f514:	bfdc      	itt	le
 800f516:	230a      	movle	r3, #10
 800f518:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800f51c:	e7e3      	b.n	800f4e6 <_strtod_l+0x23e>
 800f51e:	2300      	movs	r3, #0
 800f520:	9305      	str	r3, [sp, #20]
 800f522:	2301      	movs	r3, #1
 800f524:	e780      	b.n	800f428 <_strtod_l+0x180>
 800f526:	f04f 0c00 	mov.w	ip, #0
 800f52a:	1caa      	adds	r2, r5, #2
 800f52c:	9215      	str	r2, [sp, #84]	; 0x54
 800f52e:	78aa      	ldrb	r2, [r5, #2]
 800f530:	e788      	b.n	800f444 <_strtod_l+0x19c>
 800f532:	f04f 0c01 	mov.w	ip, #1
 800f536:	e7f8      	b.n	800f52a <_strtod_l+0x282>
 800f538:	08013bc0 	.word	0x08013bc0
 800f53c:	08013bbc 	.word	0x08013bbc
 800f540:	7ff00000 	.word	0x7ff00000
 800f544:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f546:	1c51      	adds	r1, r2, #1
 800f548:	9115      	str	r1, [sp, #84]	; 0x54
 800f54a:	7852      	ldrb	r2, [r2, #1]
 800f54c:	2a30      	cmp	r2, #48	; 0x30
 800f54e:	d0f9      	beq.n	800f544 <_strtod_l+0x29c>
 800f550:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f554:	2908      	cmp	r1, #8
 800f556:	f63f af7a 	bhi.w	800f44e <_strtod_l+0x1a6>
 800f55a:	3a30      	subs	r2, #48	; 0x30
 800f55c:	9208      	str	r2, [sp, #32]
 800f55e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f560:	920c      	str	r2, [sp, #48]	; 0x30
 800f562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f564:	1c57      	adds	r7, r2, #1
 800f566:	9715      	str	r7, [sp, #84]	; 0x54
 800f568:	7852      	ldrb	r2, [r2, #1]
 800f56a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f56e:	f1be 0f09 	cmp.w	lr, #9
 800f572:	d938      	bls.n	800f5e6 <_strtod_l+0x33e>
 800f574:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f576:	1a7f      	subs	r7, r7, r1
 800f578:	2f08      	cmp	r7, #8
 800f57a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f57e:	dc03      	bgt.n	800f588 <_strtod_l+0x2e0>
 800f580:	9908      	ldr	r1, [sp, #32]
 800f582:	428f      	cmp	r7, r1
 800f584:	bfa8      	it	ge
 800f586:	460f      	movge	r7, r1
 800f588:	f1bc 0f00 	cmp.w	ip, #0
 800f58c:	d000      	beq.n	800f590 <_strtod_l+0x2e8>
 800f58e:	427f      	negs	r7, r7
 800f590:	2e00      	cmp	r6, #0
 800f592:	d14f      	bne.n	800f634 <_strtod_l+0x38c>
 800f594:	9904      	ldr	r1, [sp, #16]
 800f596:	4301      	orrs	r1, r0
 800f598:	f47f aec1 	bne.w	800f31e <_strtod_l+0x76>
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f47f aedb 	bne.w	800f358 <_strtod_l+0xb0>
 800f5a2:	2a69      	cmp	r2, #105	; 0x69
 800f5a4:	d029      	beq.n	800f5fa <_strtod_l+0x352>
 800f5a6:	dc26      	bgt.n	800f5f6 <_strtod_l+0x34e>
 800f5a8:	2a49      	cmp	r2, #73	; 0x49
 800f5aa:	d026      	beq.n	800f5fa <_strtod_l+0x352>
 800f5ac:	2a4e      	cmp	r2, #78	; 0x4e
 800f5ae:	f47f aed3 	bne.w	800f358 <_strtod_l+0xb0>
 800f5b2:	499b      	ldr	r1, [pc, #620]	; (800f820 <_strtod_l+0x578>)
 800f5b4:	a815      	add	r0, sp, #84	; 0x54
 800f5b6:	f002 fff5 	bl	80125a4 <__match>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	f43f aecc 	beq.w	800f358 <_strtod_l+0xb0>
 800f5c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	2b28      	cmp	r3, #40	; 0x28
 800f5c6:	d12f      	bne.n	800f628 <_strtod_l+0x380>
 800f5c8:	4996      	ldr	r1, [pc, #600]	; (800f824 <_strtod_l+0x57c>)
 800f5ca:	aa18      	add	r2, sp, #96	; 0x60
 800f5cc:	a815      	add	r0, sp, #84	; 0x54
 800f5ce:	f002 fffd 	bl	80125cc <__hexnan>
 800f5d2:	2805      	cmp	r0, #5
 800f5d4:	d128      	bne.n	800f628 <_strtod_l+0x380>
 800f5d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f5d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f5dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f5e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f5e4:	e69b      	b.n	800f31e <_strtod_l+0x76>
 800f5e6:	9f08      	ldr	r7, [sp, #32]
 800f5e8:	210a      	movs	r1, #10
 800f5ea:	fb01 2107 	mla	r1, r1, r7, r2
 800f5ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f5f2:	9208      	str	r2, [sp, #32]
 800f5f4:	e7b5      	b.n	800f562 <_strtod_l+0x2ba>
 800f5f6:	2a6e      	cmp	r2, #110	; 0x6e
 800f5f8:	e7d9      	b.n	800f5ae <_strtod_l+0x306>
 800f5fa:	498b      	ldr	r1, [pc, #556]	; (800f828 <_strtod_l+0x580>)
 800f5fc:	a815      	add	r0, sp, #84	; 0x54
 800f5fe:	f002 ffd1 	bl	80125a4 <__match>
 800f602:	2800      	cmp	r0, #0
 800f604:	f43f aea8 	beq.w	800f358 <_strtod_l+0xb0>
 800f608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f60a:	4988      	ldr	r1, [pc, #544]	; (800f82c <_strtod_l+0x584>)
 800f60c:	3b01      	subs	r3, #1
 800f60e:	a815      	add	r0, sp, #84	; 0x54
 800f610:	9315      	str	r3, [sp, #84]	; 0x54
 800f612:	f002 ffc7 	bl	80125a4 <__match>
 800f616:	b910      	cbnz	r0, 800f61e <_strtod_l+0x376>
 800f618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f61a:	3301      	adds	r3, #1
 800f61c:	9315      	str	r3, [sp, #84]	; 0x54
 800f61e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f83c <_strtod_l+0x594>
 800f622:	f04f 0800 	mov.w	r8, #0
 800f626:	e67a      	b.n	800f31e <_strtod_l+0x76>
 800f628:	4881      	ldr	r0, [pc, #516]	; (800f830 <_strtod_l+0x588>)
 800f62a:	f001 fe21 	bl	8011270 <nan>
 800f62e:	ec59 8b10 	vmov	r8, r9, d0
 800f632:	e674      	b.n	800f31e <_strtod_l+0x76>
 800f634:	9b05      	ldr	r3, [sp, #20]
 800f636:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f638:	1afb      	subs	r3, r7, r3
 800f63a:	f1bb 0f00 	cmp.w	fp, #0
 800f63e:	bf08      	it	eq
 800f640:	46b3      	moveq	fp, r6
 800f642:	2e10      	cmp	r6, #16
 800f644:	9308      	str	r3, [sp, #32]
 800f646:	4635      	mov	r5, r6
 800f648:	bfa8      	it	ge
 800f64a:	2510      	movge	r5, #16
 800f64c:	f7f0 ff82 	bl	8000554 <__aeabi_ui2d>
 800f650:	2e09      	cmp	r6, #9
 800f652:	4680      	mov	r8, r0
 800f654:	4689      	mov	r9, r1
 800f656:	dd13      	ble.n	800f680 <_strtod_l+0x3d8>
 800f658:	4b76      	ldr	r3, [pc, #472]	; (800f834 <_strtod_l+0x58c>)
 800f65a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f65e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f662:	f7f0 fff1 	bl	8000648 <__aeabi_dmul>
 800f666:	4680      	mov	r8, r0
 800f668:	4650      	mov	r0, sl
 800f66a:	4689      	mov	r9, r1
 800f66c:	f7f0 ff72 	bl	8000554 <__aeabi_ui2d>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4640      	mov	r0, r8
 800f676:	4649      	mov	r1, r9
 800f678:	f7f0 fe30 	bl	80002dc <__adddf3>
 800f67c:	4680      	mov	r8, r0
 800f67e:	4689      	mov	r9, r1
 800f680:	2e0f      	cmp	r6, #15
 800f682:	dc38      	bgt.n	800f6f6 <_strtod_l+0x44e>
 800f684:	9b08      	ldr	r3, [sp, #32]
 800f686:	2b00      	cmp	r3, #0
 800f688:	f43f ae49 	beq.w	800f31e <_strtod_l+0x76>
 800f68c:	dd24      	ble.n	800f6d8 <_strtod_l+0x430>
 800f68e:	2b16      	cmp	r3, #22
 800f690:	dc0b      	bgt.n	800f6aa <_strtod_l+0x402>
 800f692:	4968      	ldr	r1, [pc, #416]	; (800f834 <_strtod_l+0x58c>)
 800f694:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69c:	4642      	mov	r2, r8
 800f69e:	464b      	mov	r3, r9
 800f6a0:	f7f0 ffd2 	bl	8000648 <__aeabi_dmul>
 800f6a4:	4680      	mov	r8, r0
 800f6a6:	4689      	mov	r9, r1
 800f6a8:	e639      	b.n	800f31e <_strtod_l+0x76>
 800f6aa:	9a08      	ldr	r2, [sp, #32]
 800f6ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	db20      	blt.n	800f6f6 <_strtod_l+0x44e>
 800f6b4:	4c5f      	ldr	r4, [pc, #380]	; (800f834 <_strtod_l+0x58c>)
 800f6b6:	f1c6 060f 	rsb	r6, r6, #15
 800f6ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f6be:	4642      	mov	r2, r8
 800f6c0:	464b      	mov	r3, r9
 800f6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6c6:	f7f0 ffbf 	bl	8000648 <__aeabi_dmul>
 800f6ca:	9b08      	ldr	r3, [sp, #32]
 800f6cc:	1b9e      	subs	r6, r3, r6
 800f6ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f6d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f6d6:	e7e3      	b.n	800f6a0 <_strtod_l+0x3f8>
 800f6d8:	9b08      	ldr	r3, [sp, #32]
 800f6da:	3316      	adds	r3, #22
 800f6dc:	db0b      	blt.n	800f6f6 <_strtod_l+0x44e>
 800f6de:	9b05      	ldr	r3, [sp, #20]
 800f6e0:	1bdf      	subs	r7, r3, r7
 800f6e2:	4b54      	ldr	r3, [pc, #336]	; (800f834 <_strtod_l+0x58c>)
 800f6e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6ec:	4640      	mov	r0, r8
 800f6ee:	4649      	mov	r1, r9
 800f6f0:	f7f1 f8d4 	bl	800089c <__aeabi_ddiv>
 800f6f4:	e7d6      	b.n	800f6a4 <_strtod_l+0x3fc>
 800f6f6:	9b08      	ldr	r3, [sp, #32]
 800f6f8:	1b75      	subs	r5, r6, r5
 800f6fa:	441d      	add	r5, r3
 800f6fc:	2d00      	cmp	r5, #0
 800f6fe:	dd70      	ble.n	800f7e2 <_strtod_l+0x53a>
 800f700:	f015 030f 	ands.w	r3, r5, #15
 800f704:	d00a      	beq.n	800f71c <_strtod_l+0x474>
 800f706:	494b      	ldr	r1, [pc, #300]	; (800f834 <_strtod_l+0x58c>)
 800f708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f70c:	4642      	mov	r2, r8
 800f70e:	464b      	mov	r3, r9
 800f710:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f714:	f7f0 ff98 	bl	8000648 <__aeabi_dmul>
 800f718:	4680      	mov	r8, r0
 800f71a:	4689      	mov	r9, r1
 800f71c:	f035 050f 	bics.w	r5, r5, #15
 800f720:	d04d      	beq.n	800f7be <_strtod_l+0x516>
 800f722:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f726:	dd22      	ble.n	800f76e <_strtod_l+0x4c6>
 800f728:	2500      	movs	r5, #0
 800f72a:	46ab      	mov	fp, r5
 800f72c:	9509      	str	r5, [sp, #36]	; 0x24
 800f72e:	9505      	str	r5, [sp, #20]
 800f730:	2322      	movs	r3, #34	; 0x22
 800f732:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f83c <_strtod_l+0x594>
 800f736:	6023      	str	r3, [r4, #0]
 800f738:	f04f 0800 	mov.w	r8, #0
 800f73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f43f aded 	beq.w	800f31e <_strtod_l+0x76>
 800f744:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f746:	4620      	mov	r0, r4
 800f748:	f003 f82e 	bl	80127a8 <_Bfree>
 800f74c:	9905      	ldr	r1, [sp, #20]
 800f74e:	4620      	mov	r0, r4
 800f750:	f003 f82a 	bl	80127a8 <_Bfree>
 800f754:	4659      	mov	r1, fp
 800f756:	4620      	mov	r0, r4
 800f758:	f003 f826 	bl	80127a8 <_Bfree>
 800f75c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f75e:	4620      	mov	r0, r4
 800f760:	f003 f822 	bl	80127a8 <_Bfree>
 800f764:	4629      	mov	r1, r5
 800f766:	4620      	mov	r0, r4
 800f768:	f003 f81e 	bl	80127a8 <_Bfree>
 800f76c:	e5d7      	b.n	800f31e <_strtod_l+0x76>
 800f76e:	4b32      	ldr	r3, [pc, #200]	; (800f838 <_strtod_l+0x590>)
 800f770:	9304      	str	r3, [sp, #16]
 800f772:	2300      	movs	r3, #0
 800f774:	112d      	asrs	r5, r5, #4
 800f776:	4640      	mov	r0, r8
 800f778:	4649      	mov	r1, r9
 800f77a:	469a      	mov	sl, r3
 800f77c:	2d01      	cmp	r5, #1
 800f77e:	dc21      	bgt.n	800f7c4 <_strtod_l+0x51c>
 800f780:	b10b      	cbz	r3, 800f786 <_strtod_l+0x4de>
 800f782:	4680      	mov	r8, r0
 800f784:	4689      	mov	r9, r1
 800f786:	492c      	ldr	r1, [pc, #176]	; (800f838 <_strtod_l+0x590>)
 800f788:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f78c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f790:	4642      	mov	r2, r8
 800f792:	464b      	mov	r3, r9
 800f794:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f798:	f7f0 ff56 	bl	8000648 <__aeabi_dmul>
 800f79c:	4b27      	ldr	r3, [pc, #156]	; (800f83c <_strtod_l+0x594>)
 800f79e:	460a      	mov	r2, r1
 800f7a0:	400b      	ands	r3, r1
 800f7a2:	4927      	ldr	r1, [pc, #156]	; (800f840 <_strtod_l+0x598>)
 800f7a4:	428b      	cmp	r3, r1
 800f7a6:	4680      	mov	r8, r0
 800f7a8:	d8be      	bhi.n	800f728 <_strtod_l+0x480>
 800f7aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f7ae:	428b      	cmp	r3, r1
 800f7b0:	bf86      	itte	hi
 800f7b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f844 <_strtod_l+0x59c>
 800f7b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800f7ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f7be:	2300      	movs	r3, #0
 800f7c0:	9304      	str	r3, [sp, #16]
 800f7c2:	e07b      	b.n	800f8bc <_strtod_l+0x614>
 800f7c4:	07ea      	lsls	r2, r5, #31
 800f7c6:	d505      	bpl.n	800f7d4 <_strtod_l+0x52c>
 800f7c8:	9b04      	ldr	r3, [sp, #16]
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	f7f0 ff3b 	bl	8000648 <__aeabi_dmul>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	9a04      	ldr	r2, [sp, #16]
 800f7d6:	3208      	adds	r2, #8
 800f7d8:	f10a 0a01 	add.w	sl, sl, #1
 800f7dc:	106d      	asrs	r5, r5, #1
 800f7de:	9204      	str	r2, [sp, #16]
 800f7e0:	e7cc      	b.n	800f77c <_strtod_l+0x4d4>
 800f7e2:	d0ec      	beq.n	800f7be <_strtod_l+0x516>
 800f7e4:	426d      	negs	r5, r5
 800f7e6:	f015 020f 	ands.w	r2, r5, #15
 800f7ea:	d00a      	beq.n	800f802 <_strtod_l+0x55a>
 800f7ec:	4b11      	ldr	r3, [pc, #68]	; (800f834 <_strtod_l+0x58c>)
 800f7ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	4649      	mov	r1, r9
 800f7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fa:	f7f1 f84f 	bl	800089c <__aeabi_ddiv>
 800f7fe:	4680      	mov	r8, r0
 800f800:	4689      	mov	r9, r1
 800f802:	112d      	asrs	r5, r5, #4
 800f804:	d0db      	beq.n	800f7be <_strtod_l+0x516>
 800f806:	2d1f      	cmp	r5, #31
 800f808:	dd1e      	ble.n	800f848 <_strtod_l+0x5a0>
 800f80a:	2500      	movs	r5, #0
 800f80c:	46ab      	mov	fp, r5
 800f80e:	9509      	str	r5, [sp, #36]	; 0x24
 800f810:	9505      	str	r5, [sp, #20]
 800f812:	2322      	movs	r3, #34	; 0x22
 800f814:	f04f 0800 	mov.w	r8, #0
 800f818:	f04f 0900 	mov.w	r9, #0
 800f81c:	6023      	str	r3, [r4, #0]
 800f81e:	e78d      	b.n	800f73c <_strtod_l+0x494>
 800f820:	08013d1e 	.word	0x08013d1e
 800f824:	08013bd4 	.word	0x08013bd4
 800f828:	08013d16 	.word	0x08013d16
 800f82c:	08013e02 	.word	0x08013e02
 800f830:	08013dfe 	.word	0x08013dfe
 800f834:	08013f58 	.word	0x08013f58
 800f838:	08013f30 	.word	0x08013f30
 800f83c:	7ff00000 	.word	0x7ff00000
 800f840:	7ca00000 	.word	0x7ca00000
 800f844:	7fefffff 	.word	0x7fefffff
 800f848:	f015 0310 	ands.w	r3, r5, #16
 800f84c:	bf18      	it	ne
 800f84e:	236a      	movne	r3, #106	; 0x6a
 800f850:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800fbf4 <_strtod_l+0x94c>
 800f854:	9304      	str	r3, [sp, #16]
 800f856:	4640      	mov	r0, r8
 800f858:	4649      	mov	r1, r9
 800f85a:	2300      	movs	r3, #0
 800f85c:	07ea      	lsls	r2, r5, #31
 800f85e:	d504      	bpl.n	800f86a <_strtod_l+0x5c2>
 800f860:	e9da 2300 	ldrd	r2, r3, [sl]
 800f864:	f7f0 fef0 	bl	8000648 <__aeabi_dmul>
 800f868:	2301      	movs	r3, #1
 800f86a:	106d      	asrs	r5, r5, #1
 800f86c:	f10a 0a08 	add.w	sl, sl, #8
 800f870:	d1f4      	bne.n	800f85c <_strtod_l+0x5b4>
 800f872:	b10b      	cbz	r3, 800f878 <_strtod_l+0x5d0>
 800f874:	4680      	mov	r8, r0
 800f876:	4689      	mov	r9, r1
 800f878:	9b04      	ldr	r3, [sp, #16]
 800f87a:	b1bb      	cbz	r3, 800f8ac <_strtod_l+0x604>
 800f87c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f880:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f884:	2b00      	cmp	r3, #0
 800f886:	4649      	mov	r1, r9
 800f888:	dd10      	ble.n	800f8ac <_strtod_l+0x604>
 800f88a:	2b1f      	cmp	r3, #31
 800f88c:	f340 811e 	ble.w	800facc <_strtod_l+0x824>
 800f890:	2b34      	cmp	r3, #52	; 0x34
 800f892:	bfde      	ittt	le
 800f894:	f04f 33ff 	movle.w	r3, #4294967295
 800f898:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f89c:	4093      	lslle	r3, r2
 800f89e:	f04f 0800 	mov.w	r8, #0
 800f8a2:	bfcc      	ite	gt
 800f8a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f8a8:	ea03 0901 	andle.w	r9, r3, r1
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	4649      	mov	r1, r9
 800f8b4:	f7f1 f930 	bl	8000b18 <__aeabi_dcmpeq>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d1a6      	bne.n	800f80a <_strtod_l+0x562>
 800f8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8c2:	4633      	mov	r3, r6
 800f8c4:	465a      	mov	r2, fp
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f002 ffd6 	bl	8012878 <__s2b>
 800f8cc:	9009      	str	r0, [sp, #36]	; 0x24
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	f43f af2a 	beq.w	800f728 <_strtod_l+0x480>
 800f8d4:	9a08      	ldr	r2, [sp, #32]
 800f8d6:	9b05      	ldr	r3, [sp, #20]
 800f8d8:	2a00      	cmp	r2, #0
 800f8da:	eba3 0307 	sub.w	r3, r3, r7
 800f8de:	bfa8      	it	ge
 800f8e0:	2300      	movge	r3, #0
 800f8e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f8e4:	2500      	movs	r5, #0
 800f8e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f8ea:	9312      	str	r3, [sp, #72]	; 0x48
 800f8ec:	46ab      	mov	fp, r5
 800f8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	6859      	ldr	r1, [r3, #4]
 800f8f4:	f002 ff18 	bl	8012728 <_Balloc>
 800f8f8:	9005      	str	r0, [sp, #20]
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	f43f af18 	beq.w	800f730 <_strtod_l+0x488>
 800f900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f902:	691a      	ldr	r2, [r3, #16]
 800f904:	3202      	adds	r2, #2
 800f906:	f103 010c 	add.w	r1, r3, #12
 800f90a:	0092      	lsls	r2, r2, #2
 800f90c:	300c      	adds	r0, #12
 800f90e:	f001 fca0 	bl	8011252 <memcpy>
 800f912:	ec49 8b10 	vmov	d0, r8, r9
 800f916:	aa18      	add	r2, sp, #96	; 0x60
 800f918:	a917      	add	r1, sp, #92	; 0x5c
 800f91a:	4620      	mov	r0, r4
 800f91c:	f003 fae0 	bl	8012ee0 <__d2b>
 800f920:	ec49 8b18 	vmov	d8, r8, r9
 800f924:	9016      	str	r0, [sp, #88]	; 0x58
 800f926:	2800      	cmp	r0, #0
 800f928:	f43f af02 	beq.w	800f730 <_strtod_l+0x488>
 800f92c:	2101      	movs	r1, #1
 800f92e:	4620      	mov	r0, r4
 800f930:	f003 f83a 	bl	80129a8 <__i2b>
 800f934:	4683      	mov	fp, r0
 800f936:	2800      	cmp	r0, #0
 800f938:	f43f aefa 	beq.w	800f730 <_strtod_l+0x488>
 800f93c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f93e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f940:	2e00      	cmp	r6, #0
 800f942:	bfab      	itete	ge
 800f944:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f946:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f948:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f94a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f94e:	bfac      	ite	ge
 800f950:	eb06 0a03 	addge.w	sl, r6, r3
 800f954:	1b9f      	sublt	r7, r3, r6
 800f956:	9b04      	ldr	r3, [sp, #16]
 800f958:	1af6      	subs	r6, r6, r3
 800f95a:	4416      	add	r6, r2
 800f95c:	4ba0      	ldr	r3, [pc, #640]	; (800fbe0 <_strtod_l+0x938>)
 800f95e:	3e01      	subs	r6, #1
 800f960:	429e      	cmp	r6, r3
 800f962:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f966:	f280 80c4 	bge.w	800faf2 <_strtod_l+0x84a>
 800f96a:	1b9b      	subs	r3, r3, r6
 800f96c:	2b1f      	cmp	r3, #31
 800f96e:	eba2 0203 	sub.w	r2, r2, r3
 800f972:	f04f 0101 	mov.w	r1, #1
 800f976:	f300 80b0 	bgt.w	800fada <_strtod_l+0x832>
 800f97a:	fa01 f303 	lsl.w	r3, r1, r3
 800f97e:	930e      	str	r3, [sp, #56]	; 0x38
 800f980:	2300      	movs	r3, #0
 800f982:	930d      	str	r3, [sp, #52]	; 0x34
 800f984:	eb0a 0602 	add.w	r6, sl, r2
 800f988:	9b04      	ldr	r3, [sp, #16]
 800f98a:	45b2      	cmp	sl, r6
 800f98c:	4417      	add	r7, r2
 800f98e:	441f      	add	r7, r3
 800f990:	4653      	mov	r3, sl
 800f992:	bfa8      	it	ge
 800f994:	4633      	movge	r3, r6
 800f996:	42bb      	cmp	r3, r7
 800f998:	bfa8      	it	ge
 800f99a:	463b      	movge	r3, r7
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfc2      	ittt	gt
 800f9a0:	1af6      	subgt	r6, r6, r3
 800f9a2:	1aff      	subgt	r7, r7, r3
 800f9a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f9a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	dd17      	ble.n	800f9de <_strtod_l+0x736>
 800f9ae:	4659      	mov	r1, fp
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f003 f8b8 	bl	8012b28 <__pow5mult>
 800f9b8:	4683      	mov	fp, r0
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	f43f aeb8 	beq.w	800f730 <_strtod_l+0x488>
 800f9c0:	4601      	mov	r1, r0
 800f9c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f003 f805 	bl	80129d4 <__multiply>
 800f9ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	f43f aeaf 	beq.w	800f730 <_strtod_l+0x488>
 800f9d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f002 fee7 	bl	80127a8 <_Bfree>
 800f9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9dc:	9316      	str	r3, [sp, #88]	; 0x58
 800f9de:	2e00      	cmp	r6, #0
 800f9e0:	f300 808c 	bgt.w	800fafc <_strtod_l+0x854>
 800f9e4:	9b08      	ldr	r3, [sp, #32]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dd08      	ble.n	800f9fc <_strtod_l+0x754>
 800f9ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9ec:	9905      	ldr	r1, [sp, #20]
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f003 f89a 	bl	8012b28 <__pow5mult>
 800f9f4:	9005      	str	r0, [sp, #20]
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	f43f ae9a 	beq.w	800f730 <_strtod_l+0x488>
 800f9fc:	2f00      	cmp	r7, #0
 800f9fe:	dd08      	ble.n	800fa12 <_strtod_l+0x76a>
 800fa00:	9905      	ldr	r1, [sp, #20]
 800fa02:	463a      	mov	r2, r7
 800fa04:	4620      	mov	r0, r4
 800fa06:	f003 f8e9 	bl	8012bdc <__lshift>
 800fa0a:	9005      	str	r0, [sp, #20]
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	f43f ae8f 	beq.w	800f730 <_strtod_l+0x488>
 800fa12:	f1ba 0f00 	cmp.w	sl, #0
 800fa16:	dd08      	ble.n	800fa2a <_strtod_l+0x782>
 800fa18:	4659      	mov	r1, fp
 800fa1a:	4652      	mov	r2, sl
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f003 f8dd 	bl	8012bdc <__lshift>
 800fa22:	4683      	mov	fp, r0
 800fa24:	2800      	cmp	r0, #0
 800fa26:	f43f ae83 	beq.w	800f730 <_strtod_l+0x488>
 800fa2a:	9a05      	ldr	r2, [sp, #20]
 800fa2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f003 f95c 	bl	8012cec <__mdiff>
 800fa34:	4605      	mov	r5, r0
 800fa36:	2800      	cmp	r0, #0
 800fa38:	f43f ae7a 	beq.w	800f730 <_strtod_l+0x488>
 800fa3c:	68c3      	ldr	r3, [r0, #12]
 800fa3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa40:	2300      	movs	r3, #0
 800fa42:	60c3      	str	r3, [r0, #12]
 800fa44:	4659      	mov	r1, fp
 800fa46:	f003 f935 	bl	8012cb4 <__mcmp>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	da60      	bge.n	800fb10 <_strtod_l+0x868>
 800fa4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa50:	ea53 0308 	orrs.w	r3, r3, r8
 800fa54:	f040 8084 	bne.w	800fb60 <_strtod_l+0x8b8>
 800fa58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d17f      	bne.n	800fb60 <_strtod_l+0x8b8>
 800fa60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa64:	0d1b      	lsrs	r3, r3, #20
 800fa66:	051b      	lsls	r3, r3, #20
 800fa68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa6c:	d978      	bls.n	800fb60 <_strtod_l+0x8b8>
 800fa6e:	696b      	ldr	r3, [r5, #20]
 800fa70:	b913      	cbnz	r3, 800fa78 <_strtod_l+0x7d0>
 800fa72:	692b      	ldr	r3, [r5, #16]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	dd73      	ble.n	800fb60 <_strtod_l+0x8b8>
 800fa78:	4629      	mov	r1, r5
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f003 f8ad 	bl	8012bdc <__lshift>
 800fa82:	4659      	mov	r1, fp
 800fa84:	4605      	mov	r5, r0
 800fa86:	f003 f915 	bl	8012cb4 <__mcmp>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	dd68      	ble.n	800fb60 <_strtod_l+0x8b8>
 800fa8e:	9904      	ldr	r1, [sp, #16]
 800fa90:	4a54      	ldr	r2, [pc, #336]	; (800fbe4 <_strtod_l+0x93c>)
 800fa92:	464b      	mov	r3, r9
 800fa94:	2900      	cmp	r1, #0
 800fa96:	f000 8084 	beq.w	800fba2 <_strtod_l+0x8fa>
 800fa9a:	ea02 0109 	and.w	r1, r2, r9
 800fa9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800faa2:	dc7e      	bgt.n	800fba2 <_strtod_l+0x8fa>
 800faa4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800faa8:	f77f aeb3 	ble.w	800f812 <_strtod_l+0x56a>
 800faac:	4b4e      	ldr	r3, [pc, #312]	; (800fbe8 <_strtod_l+0x940>)
 800faae:	4640      	mov	r0, r8
 800fab0:	4649      	mov	r1, r9
 800fab2:	2200      	movs	r2, #0
 800fab4:	f7f0 fdc8 	bl	8000648 <__aeabi_dmul>
 800fab8:	4b4a      	ldr	r3, [pc, #296]	; (800fbe4 <_strtod_l+0x93c>)
 800faba:	400b      	ands	r3, r1
 800fabc:	4680      	mov	r8, r0
 800fabe:	4689      	mov	r9, r1
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f47f ae3f 	bne.w	800f744 <_strtod_l+0x49c>
 800fac6:	2322      	movs	r3, #34	; 0x22
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	e63b      	b.n	800f744 <_strtod_l+0x49c>
 800facc:	f04f 32ff 	mov.w	r2, #4294967295
 800fad0:	fa02 f303 	lsl.w	r3, r2, r3
 800fad4:	ea03 0808 	and.w	r8, r3, r8
 800fad8:	e6e8      	b.n	800f8ac <_strtod_l+0x604>
 800fada:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800fade:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fae2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fae6:	36e2      	adds	r6, #226	; 0xe2
 800fae8:	fa01 f306 	lsl.w	r3, r1, r6
 800faec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800faf0:	e748      	b.n	800f984 <_strtod_l+0x6dc>
 800faf2:	2100      	movs	r1, #0
 800faf4:	2301      	movs	r3, #1
 800faf6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800fafa:	e743      	b.n	800f984 <_strtod_l+0x6dc>
 800fafc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fafe:	4632      	mov	r2, r6
 800fb00:	4620      	mov	r0, r4
 800fb02:	f003 f86b 	bl	8012bdc <__lshift>
 800fb06:	9016      	str	r0, [sp, #88]	; 0x58
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	f47f af6b 	bne.w	800f9e4 <_strtod_l+0x73c>
 800fb0e:	e60f      	b.n	800f730 <_strtod_l+0x488>
 800fb10:	46ca      	mov	sl, r9
 800fb12:	d171      	bne.n	800fbf8 <_strtod_l+0x950>
 800fb14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb1a:	b352      	cbz	r2, 800fb72 <_strtod_l+0x8ca>
 800fb1c:	4a33      	ldr	r2, [pc, #204]	; (800fbec <_strtod_l+0x944>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d12a      	bne.n	800fb78 <_strtod_l+0x8d0>
 800fb22:	9b04      	ldr	r3, [sp, #16]
 800fb24:	4641      	mov	r1, r8
 800fb26:	b1fb      	cbz	r3, 800fb68 <_strtod_l+0x8c0>
 800fb28:	4b2e      	ldr	r3, [pc, #184]	; (800fbe4 <_strtod_l+0x93c>)
 800fb2a:	ea09 0303 	and.w	r3, r9, r3
 800fb2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb32:	f04f 32ff 	mov.w	r2, #4294967295
 800fb36:	d81a      	bhi.n	800fb6e <_strtod_l+0x8c6>
 800fb38:	0d1b      	lsrs	r3, r3, #20
 800fb3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb3e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb42:	4299      	cmp	r1, r3
 800fb44:	d118      	bne.n	800fb78 <_strtod_l+0x8d0>
 800fb46:	4b2a      	ldr	r3, [pc, #168]	; (800fbf0 <_strtod_l+0x948>)
 800fb48:	459a      	cmp	sl, r3
 800fb4a:	d102      	bne.n	800fb52 <_strtod_l+0x8aa>
 800fb4c:	3101      	adds	r1, #1
 800fb4e:	f43f adef 	beq.w	800f730 <_strtod_l+0x488>
 800fb52:	4b24      	ldr	r3, [pc, #144]	; (800fbe4 <_strtod_l+0x93c>)
 800fb54:	ea0a 0303 	and.w	r3, sl, r3
 800fb58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fb5c:	f04f 0800 	mov.w	r8, #0
 800fb60:	9b04      	ldr	r3, [sp, #16]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d1a2      	bne.n	800faac <_strtod_l+0x804>
 800fb66:	e5ed      	b.n	800f744 <_strtod_l+0x49c>
 800fb68:	f04f 33ff 	mov.w	r3, #4294967295
 800fb6c:	e7e9      	b.n	800fb42 <_strtod_l+0x89a>
 800fb6e:	4613      	mov	r3, r2
 800fb70:	e7e7      	b.n	800fb42 <_strtod_l+0x89a>
 800fb72:	ea53 0308 	orrs.w	r3, r3, r8
 800fb76:	d08a      	beq.n	800fa8e <_strtod_l+0x7e6>
 800fb78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb7a:	b1e3      	cbz	r3, 800fbb6 <_strtod_l+0x90e>
 800fb7c:	ea13 0f0a 	tst.w	r3, sl
 800fb80:	d0ee      	beq.n	800fb60 <_strtod_l+0x8b8>
 800fb82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb84:	9a04      	ldr	r2, [sp, #16]
 800fb86:	4640      	mov	r0, r8
 800fb88:	4649      	mov	r1, r9
 800fb8a:	b1c3      	cbz	r3, 800fbbe <_strtod_l+0x916>
 800fb8c:	f7ff fb70 	bl	800f270 <sulp>
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	ec51 0b18 	vmov	r0, r1, d8
 800fb98:	f7f0 fba0 	bl	80002dc <__adddf3>
 800fb9c:	4680      	mov	r8, r0
 800fb9e:	4689      	mov	r9, r1
 800fba0:	e7de      	b.n	800fb60 <_strtod_l+0x8b8>
 800fba2:	4013      	ands	r3, r2
 800fba4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fba8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fbac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fbb0:	f04f 38ff 	mov.w	r8, #4294967295
 800fbb4:	e7d4      	b.n	800fb60 <_strtod_l+0x8b8>
 800fbb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbb8:	ea13 0f08 	tst.w	r3, r8
 800fbbc:	e7e0      	b.n	800fb80 <_strtod_l+0x8d8>
 800fbbe:	f7ff fb57 	bl	800f270 <sulp>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	ec51 0b18 	vmov	r0, r1, d8
 800fbca:	f7f0 fb85 	bl	80002d8 <__aeabi_dsub>
 800fbce:	2200      	movs	r2, #0
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	4680      	mov	r8, r0
 800fbd4:	4689      	mov	r9, r1
 800fbd6:	f7f0 ff9f 	bl	8000b18 <__aeabi_dcmpeq>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d0c0      	beq.n	800fb60 <_strtod_l+0x8b8>
 800fbde:	e618      	b.n	800f812 <_strtod_l+0x56a>
 800fbe0:	fffffc02 	.word	0xfffffc02
 800fbe4:	7ff00000 	.word	0x7ff00000
 800fbe8:	39500000 	.word	0x39500000
 800fbec:	000fffff 	.word	0x000fffff
 800fbf0:	7fefffff 	.word	0x7fefffff
 800fbf4:	08013be8 	.word	0x08013be8
 800fbf8:	4659      	mov	r1, fp
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f003 f9ca 	bl	8012f94 <__ratio>
 800fc00:	ec57 6b10 	vmov	r6, r7, d0
 800fc04:	ee10 0a10 	vmov	r0, s0
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc0e:	4639      	mov	r1, r7
 800fc10:	f7f0 ff96 	bl	8000b40 <__aeabi_dcmple>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d071      	beq.n	800fcfc <_strtod_l+0xa54>
 800fc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d17c      	bne.n	800fd18 <_strtod_l+0xa70>
 800fc1e:	f1b8 0f00 	cmp.w	r8, #0
 800fc22:	d15a      	bne.n	800fcda <_strtod_l+0xa32>
 800fc24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d15d      	bne.n	800fce8 <_strtod_l+0xa40>
 800fc2c:	4b90      	ldr	r3, [pc, #576]	; (800fe70 <_strtod_l+0xbc8>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	4630      	mov	r0, r6
 800fc32:	4639      	mov	r1, r7
 800fc34:	f7f0 ff7a 	bl	8000b2c <__aeabi_dcmplt>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	d15c      	bne.n	800fcf6 <_strtod_l+0xa4e>
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	4639      	mov	r1, r7
 800fc40:	4b8c      	ldr	r3, [pc, #560]	; (800fe74 <_strtod_l+0xbcc>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	f7f0 fd00 	bl	8000648 <__aeabi_dmul>
 800fc48:	4606      	mov	r6, r0
 800fc4a:	460f      	mov	r7, r1
 800fc4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800fc50:	9606      	str	r6, [sp, #24]
 800fc52:	9307      	str	r3, [sp, #28]
 800fc54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fc5c:	4b86      	ldr	r3, [pc, #536]	; (800fe78 <_strtod_l+0xbd0>)
 800fc5e:	ea0a 0303 	and.w	r3, sl, r3
 800fc62:	930d      	str	r3, [sp, #52]	; 0x34
 800fc64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc66:	4b85      	ldr	r3, [pc, #532]	; (800fe7c <_strtod_l+0xbd4>)
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	f040 8090 	bne.w	800fd8e <_strtod_l+0xae6>
 800fc6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800fc72:	ec49 8b10 	vmov	d0, r8, r9
 800fc76:	f003 f8c3 	bl	8012e00 <__ulp>
 800fc7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc7e:	ec51 0b10 	vmov	r0, r1, d0
 800fc82:	f7f0 fce1 	bl	8000648 <__aeabi_dmul>
 800fc86:	4642      	mov	r2, r8
 800fc88:	464b      	mov	r3, r9
 800fc8a:	f7f0 fb27 	bl	80002dc <__adddf3>
 800fc8e:	460b      	mov	r3, r1
 800fc90:	4979      	ldr	r1, [pc, #484]	; (800fe78 <_strtod_l+0xbd0>)
 800fc92:	4a7b      	ldr	r2, [pc, #492]	; (800fe80 <_strtod_l+0xbd8>)
 800fc94:	4019      	ands	r1, r3
 800fc96:	4291      	cmp	r1, r2
 800fc98:	4680      	mov	r8, r0
 800fc9a:	d944      	bls.n	800fd26 <_strtod_l+0xa7e>
 800fc9c:	ee18 2a90 	vmov	r2, s17
 800fca0:	4b78      	ldr	r3, [pc, #480]	; (800fe84 <_strtod_l+0xbdc>)
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d104      	bne.n	800fcb0 <_strtod_l+0xa08>
 800fca6:	ee18 3a10 	vmov	r3, s16
 800fcaa:	3301      	adds	r3, #1
 800fcac:	f43f ad40 	beq.w	800f730 <_strtod_l+0x488>
 800fcb0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800fe84 <_strtod_l+0xbdc>
 800fcb4:	f04f 38ff 	mov.w	r8, #4294967295
 800fcb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f002 fd74 	bl	80127a8 <_Bfree>
 800fcc0:	9905      	ldr	r1, [sp, #20]
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f002 fd70 	bl	80127a8 <_Bfree>
 800fcc8:	4659      	mov	r1, fp
 800fcca:	4620      	mov	r0, r4
 800fccc:	f002 fd6c 	bl	80127a8 <_Bfree>
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f002 fd68 	bl	80127a8 <_Bfree>
 800fcd8:	e609      	b.n	800f8ee <_strtod_l+0x646>
 800fcda:	f1b8 0f01 	cmp.w	r8, #1
 800fcde:	d103      	bne.n	800fce8 <_strtod_l+0xa40>
 800fce0:	f1b9 0f00 	cmp.w	r9, #0
 800fce4:	f43f ad95 	beq.w	800f812 <_strtod_l+0x56a>
 800fce8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800fe40 <_strtod_l+0xb98>
 800fcec:	4f60      	ldr	r7, [pc, #384]	; (800fe70 <_strtod_l+0xbc8>)
 800fcee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fcf2:	2600      	movs	r6, #0
 800fcf4:	e7ae      	b.n	800fc54 <_strtod_l+0x9ac>
 800fcf6:	4f5f      	ldr	r7, [pc, #380]	; (800fe74 <_strtod_l+0xbcc>)
 800fcf8:	2600      	movs	r6, #0
 800fcfa:	e7a7      	b.n	800fc4c <_strtod_l+0x9a4>
 800fcfc:	4b5d      	ldr	r3, [pc, #372]	; (800fe74 <_strtod_l+0xbcc>)
 800fcfe:	4630      	mov	r0, r6
 800fd00:	4639      	mov	r1, r7
 800fd02:	2200      	movs	r2, #0
 800fd04:	f7f0 fca0 	bl	8000648 <__aeabi_dmul>
 800fd08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	460f      	mov	r7, r1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d09c      	beq.n	800fc4c <_strtod_l+0x9a4>
 800fd12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fd16:	e79d      	b.n	800fc54 <_strtod_l+0x9ac>
 800fd18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fe48 <_strtod_l+0xba0>
 800fd1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd20:	ec57 6b17 	vmov	r6, r7, d7
 800fd24:	e796      	b.n	800fc54 <_strtod_l+0x9ac>
 800fd26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fd2a:	9b04      	ldr	r3, [sp, #16]
 800fd2c:	46ca      	mov	sl, r9
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1c2      	bne.n	800fcb8 <_strtod_l+0xa10>
 800fd32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd38:	0d1b      	lsrs	r3, r3, #20
 800fd3a:	051b      	lsls	r3, r3, #20
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d1bb      	bne.n	800fcb8 <_strtod_l+0xa10>
 800fd40:	4630      	mov	r0, r6
 800fd42:	4639      	mov	r1, r7
 800fd44:	f7f0 ffe0 	bl	8000d08 <__aeabi_d2lz>
 800fd48:	f7f0 fc50 	bl	80005ec <__aeabi_l2d>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	460b      	mov	r3, r1
 800fd50:	4630      	mov	r0, r6
 800fd52:	4639      	mov	r1, r7
 800fd54:	f7f0 fac0 	bl	80002d8 <__aeabi_dsub>
 800fd58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd5e:	ea43 0308 	orr.w	r3, r3, r8
 800fd62:	4313      	orrs	r3, r2
 800fd64:	4606      	mov	r6, r0
 800fd66:	460f      	mov	r7, r1
 800fd68:	d054      	beq.n	800fe14 <_strtod_l+0xb6c>
 800fd6a:	a339      	add	r3, pc, #228	; (adr r3, 800fe50 <_strtod_l+0xba8>)
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	f7f0 fedc 	bl	8000b2c <__aeabi_dcmplt>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	f47f ace5 	bne.w	800f744 <_strtod_l+0x49c>
 800fd7a:	a337      	add	r3, pc, #220	; (adr r3, 800fe58 <_strtod_l+0xbb0>)
 800fd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd80:	4630      	mov	r0, r6
 800fd82:	4639      	mov	r1, r7
 800fd84:	f7f0 fef0 	bl	8000b68 <__aeabi_dcmpgt>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d095      	beq.n	800fcb8 <_strtod_l+0xa10>
 800fd8c:	e4da      	b.n	800f744 <_strtod_l+0x49c>
 800fd8e:	9b04      	ldr	r3, [sp, #16]
 800fd90:	b333      	cbz	r3, 800fde0 <_strtod_l+0xb38>
 800fd92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fd98:	d822      	bhi.n	800fde0 <_strtod_l+0xb38>
 800fd9a:	a331      	add	r3, pc, #196	; (adr r3, 800fe60 <_strtod_l+0xbb8>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	4630      	mov	r0, r6
 800fda2:	4639      	mov	r1, r7
 800fda4:	f7f0 fecc 	bl	8000b40 <__aeabi_dcmple>
 800fda8:	b1a0      	cbz	r0, 800fdd4 <_strtod_l+0xb2c>
 800fdaa:	4639      	mov	r1, r7
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7f0 ff23 	bl	8000bf8 <__aeabi_d2uiz>
 800fdb2:	2801      	cmp	r0, #1
 800fdb4:	bf38      	it	cc
 800fdb6:	2001      	movcc	r0, #1
 800fdb8:	f7f0 fbcc 	bl	8000554 <__aeabi_ui2d>
 800fdbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	460f      	mov	r7, r1
 800fdc2:	bb23      	cbnz	r3, 800fe0e <_strtod_l+0xb66>
 800fdc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdc8:	9010      	str	r0, [sp, #64]	; 0x40
 800fdca:	9311      	str	r3, [sp, #68]	; 0x44
 800fdcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fdd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fdd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fddc:	1a9b      	subs	r3, r3, r2
 800fdde:	930f      	str	r3, [sp, #60]	; 0x3c
 800fde0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fde4:	eeb0 0a48 	vmov.f32	s0, s16
 800fde8:	eef0 0a68 	vmov.f32	s1, s17
 800fdec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fdf0:	f003 f806 	bl	8012e00 <__ulp>
 800fdf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fdf8:	ec53 2b10 	vmov	r2, r3, d0
 800fdfc:	f7f0 fc24 	bl	8000648 <__aeabi_dmul>
 800fe00:	ec53 2b18 	vmov	r2, r3, d8
 800fe04:	f7f0 fa6a 	bl	80002dc <__adddf3>
 800fe08:	4680      	mov	r8, r0
 800fe0a:	4689      	mov	r9, r1
 800fe0c:	e78d      	b.n	800fd2a <_strtod_l+0xa82>
 800fe0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fe12:	e7db      	b.n	800fdcc <_strtod_l+0xb24>
 800fe14:	a314      	add	r3, pc, #80	; (adr r3, 800fe68 <_strtod_l+0xbc0>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	f7f0 fe87 	bl	8000b2c <__aeabi_dcmplt>
 800fe1e:	e7b3      	b.n	800fd88 <_strtod_l+0xae0>
 800fe20:	2300      	movs	r3, #0
 800fe22:	930a      	str	r3, [sp, #40]	; 0x28
 800fe24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe28:	6013      	str	r3, [r2, #0]
 800fe2a:	f7ff ba7c 	b.w	800f326 <_strtod_l+0x7e>
 800fe2e:	2a65      	cmp	r2, #101	; 0x65
 800fe30:	f43f ab75 	beq.w	800f51e <_strtod_l+0x276>
 800fe34:	2a45      	cmp	r2, #69	; 0x45
 800fe36:	f43f ab72 	beq.w	800f51e <_strtod_l+0x276>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	f7ff bbaa 	b.w	800f594 <_strtod_l+0x2ec>
 800fe40:	00000000 	.word	0x00000000
 800fe44:	bff00000 	.word	0xbff00000
 800fe48:	00000000 	.word	0x00000000
 800fe4c:	3ff00000 	.word	0x3ff00000
 800fe50:	94a03595 	.word	0x94a03595
 800fe54:	3fdfffff 	.word	0x3fdfffff
 800fe58:	35afe535 	.word	0x35afe535
 800fe5c:	3fe00000 	.word	0x3fe00000
 800fe60:	ffc00000 	.word	0xffc00000
 800fe64:	41dfffff 	.word	0x41dfffff
 800fe68:	94a03595 	.word	0x94a03595
 800fe6c:	3fcfffff 	.word	0x3fcfffff
 800fe70:	3ff00000 	.word	0x3ff00000
 800fe74:	3fe00000 	.word	0x3fe00000
 800fe78:	7ff00000 	.word	0x7ff00000
 800fe7c:	7fe00000 	.word	0x7fe00000
 800fe80:	7c9fffff 	.word	0x7c9fffff
 800fe84:	7fefffff 	.word	0x7fefffff

0800fe88 <_strtod_r>:
 800fe88:	4b01      	ldr	r3, [pc, #4]	; (800fe90 <_strtod_r+0x8>)
 800fe8a:	f7ff ba0d 	b.w	800f2a8 <_strtod_l>
 800fe8e:	bf00      	nop
 800fe90:	20000190 	.word	0x20000190

0800fe94 <strtof>:
 800fe94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe98:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ff5c <strtof+0xc8>
 800fe9c:	4b2a      	ldr	r3, [pc, #168]	; (800ff48 <strtof+0xb4>)
 800fe9e:	460a      	mov	r2, r1
 800fea0:	ed2d 8b02 	vpush	{d8}
 800fea4:	4601      	mov	r1, r0
 800fea6:	f8d8 0000 	ldr.w	r0, [r8]
 800feaa:	f7ff f9fd 	bl	800f2a8 <_strtod_l>
 800feae:	ec55 4b10 	vmov	r4, r5, d0
 800feb2:	ee10 2a10 	vmov	r2, s0
 800feb6:	ee10 0a10 	vmov	r0, s0
 800feba:	462b      	mov	r3, r5
 800febc:	4629      	mov	r1, r5
 800febe:	f7f0 fe5d 	bl	8000b7c <__aeabi_dcmpun>
 800fec2:	b190      	cbz	r0, 800feea <strtof+0x56>
 800fec4:	2d00      	cmp	r5, #0
 800fec6:	4821      	ldr	r0, [pc, #132]	; (800ff4c <strtof+0xb8>)
 800fec8:	da09      	bge.n	800fede <strtof+0x4a>
 800feca:	f001 f9d9 	bl	8011280 <nanf>
 800fece:	eeb1 8a40 	vneg.f32	s16, s0
 800fed2:	eeb0 0a48 	vmov.f32	s0, s16
 800fed6:	ecbd 8b02 	vpop	{d8}
 800feda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fede:	ecbd 8b02 	vpop	{d8}
 800fee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fee6:	f001 b9cb 	b.w	8011280 <nanf>
 800feea:	4620      	mov	r0, r4
 800feec:	4629      	mov	r1, r5
 800feee:	f7f0 fea3 	bl	8000c38 <__aeabi_d2f>
 800fef2:	ee08 0a10 	vmov	s16, r0
 800fef6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ff50 <strtof+0xbc>
 800fefa:	eeb0 7ac8 	vabs.f32	s14, s16
 800fefe:	eeb4 7a67 	vcmp.f32	s14, s15
 800ff02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff06:	dd11      	ble.n	800ff2c <strtof+0x98>
 800ff08:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800ff0c:	4b11      	ldr	r3, [pc, #68]	; (800ff54 <strtof+0xc0>)
 800ff0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff12:	4620      	mov	r0, r4
 800ff14:	4639      	mov	r1, r7
 800ff16:	f7f0 fe31 	bl	8000b7c <__aeabi_dcmpun>
 800ff1a:	b980      	cbnz	r0, 800ff3e <strtof+0xaa>
 800ff1c:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <strtof+0xc0>)
 800ff1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff22:	4620      	mov	r0, r4
 800ff24:	4639      	mov	r1, r7
 800ff26:	f7f0 fe0b 	bl	8000b40 <__aeabi_dcmple>
 800ff2a:	b940      	cbnz	r0, 800ff3e <strtof+0xaa>
 800ff2c:	ee18 3a10 	vmov	r3, s16
 800ff30:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ff34:	d1cd      	bne.n	800fed2 <strtof+0x3e>
 800ff36:	4b08      	ldr	r3, [pc, #32]	; (800ff58 <strtof+0xc4>)
 800ff38:	402b      	ands	r3, r5
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d0c9      	beq.n	800fed2 <strtof+0x3e>
 800ff3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff42:	2222      	movs	r2, #34	; 0x22
 800ff44:	601a      	str	r2, [r3, #0]
 800ff46:	e7c4      	b.n	800fed2 <strtof+0x3e>
 800ff48:	20000190 	.word	0x20000190
 800ff4c:	08013dfe 	.word	0x08013dfe
 800ff50:	7f7fffff 	.word	0x7f7fffff
 800ff54:	7fefffff 	.word	0x7fefffff
 800ff58:	7ff00000 	.word	0x7ff00000
 800ff5c:	20000348 	.word	0x20000348

0800ff60 <_strtol_l.constprop.0>:
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff66:	d001      	beq.n	800ff6c <_strtol_l.constprop.0+0xc>
 800ff68:	2b24      	cmp	r3, #36	; 0x24
 800ff6a:	d906      	bls.n	800ff7a <_strtol_l.constprop.0+0x1a>
 800ff6c:	f001 f93c 	bl	80111e8 <__errno>
 800ff70:	2316      	movs	r3, #22
 800ff72:	6003      	str	r3, [r0, #0]
 800ff74:	2000      	movs	r0, #0
 800ff76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010060 <_strtol_l.constprop.0+0x100>
 800ff7e:	460d      	mov	r5, r1
 800ff80:	462e      	mov	r6, r5
 800ff82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ff8a:	f017 0708 	ands.w	r7, r7, #8
 800ff8e:	d1f7      	bne.n	800ff80 <_strtol_l.constprop.0+0x20>
 800ff90:	2c2d      	cmp	r4, #45	; 0x2d
 800ff92:	d132      	bne.n	800fffa <_strtol_l.constprop.0+0x9a>
 800ff94:	782c      	ldrb	r4, [r5, #0]
 800ff96:	2701      	movs	r7, #1
 800ff98:	1cb5      	adds	r5, r6, #2
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d05b      	beq.n	8010056 <_strtol_l.constprop.0+0xf6>
 800ff9e:	2b10      	cmp	r3, #16
 800ffa0:	d109      	bne.n	800ffb6 <_strtol_l.constprop.0+0x56>
 800ffa2:	2c30      	cmp	r4, #48	; 0x30
 800ffa4:	d107      	bne.n	800ffb6 <_strtol_l.constprop.0+0x56>
 800ffa6:	782c      	ldrb	r4, [r5, #0]
 800ffa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ffac:	2c58      	cmp	r4, #88	; 0x58
 800ffae:	d14d      	bne.n	801004c <_strtol_l.constprop.0+0xec>
 800ffb0:	786c      	ldrb	r4, [r5, #1]
 800ffb2:	2310      	movs	r3, #16
 800ffb4:	3502      	adds	r5, #2
 800ffb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ffba:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffbe:	f04f 0e00 	mov.w	lr, #0
 800ffc2:	fbb8 f9f3 	udiv	r9, r8, r3
 800ffc6:	4676      	mov	r6, lr
 800ffc8:	fb03 8a19 	mls	sl, r3, r9, r8
 800ffcc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ffd0:	f1bc 0f09 	cmp.w	ip, #9
 800ffd4:	d816      	bhi.n	8010004 <_strtol_l.constprop.0+0xa4>
 800ffd6:	4664      	mov	r4, ip
 800ffd8:	42a3      	cmp	r3, r4
 800ffda:	dd24      	ble.n	8010026 <_strtol_l.constprop.0+0xc6>
 800ffdc:	f1be 3fff 	cmp.w	lr, #4294967295
 800ffe0:	d008      	beq.n	800fff4 <_strtol_l.constprop.0+0x94>
 800ffe2:	45b1      	cmp	r9, r6
 800ffe4:	d31c      	bcc.n	8010020 <_strtol_l.constprop.0+0xc0>
 800ffe6:	d101      	bne.n	800ffec <_strtol_l.constprop.0+0x8c>
 800ffe8:	45a2      	cmp	sl, r4
 800ffea:	db19      	blt.n	8010020 <_strtol_l.constprop.0+0xc0>
 800ffec:	fb06 4603 	mla	r6, r6, r3, r4
 800fff0:	f04f 0e01 	mov.w	lr, #1
 800fff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fff8:	e7e8      	b.n	800ffcc <_strtol_l.constprop.0+0x6c>
 800fffa:	2c2b      	cmp	r4, #43	; 0x2b
 800fffc:	bf04      	itt	eq
 800fffe:	782c      	ldrbeq	r4, [r5, #0]
 8010000:	1cb5      	addeq	r5, r6, #2
 8010002:	e7ca      	b.n	800ff9a <_strtol_l.constprop.0+0x3a>
 8010004:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010008:	f1bc 0f19 	cmp.w	ip, #25
 801000c:	d801      	bhi.n	8010012 <_strtol_l.constprop.0+0xb2>
 801000e:	3c37      	subs	r4, #55	; 0x37
 8010010:	e7e2      	b.n	800ffd8 <_strtol_l.constprop.0+0x78>
 8010012:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010016:	f1bc 0f19 	cmp.w	ip, #25
 801001a:	d804      	bhi.n	8010026 <_strtol_l.constprop.0+0xc6>
 801001c:	3c57      	subs	r4, #87	; 0x57
 801001e:	e7db      	b.n	800ffd8 <_strtol_l.constprop.0+0x78>
 8010020:	f04f 3eff 	mov.w	lr, #4294967295
 8010024:	e7e6      	b.n	800fff4 <_strtol_l.constprop.0+0x94>
 8010026:	f1be 3fff 	cmp.w	lr, #4294967295
 801002a:	d105      	bne.n	8010038 <_strtol_l.constprop.0+0xd8>
 801002c:	2322      	movs	r3, #34	; 0x22
 801002e:	6003      	str	r3, [r0, #0]
 8010030:	4646      	mov	r6, r8
 8010032:	b942      	cbnz	r2, 8010046 <_strtol_l.constprop.0+0xe6>
 8010034:	4630      	mov	r0, r6
 8010036:	e79e      	b.n	800ff76 <_strtol_l.constprop.0+0x16>
 8010038:	b107      	cbz	r7, 801003c <_strtol_l.constprop.0+0xdc>
 801003a:	4276      	negs	r6, r6
 801003c:	2a00      	cmp	r2, #0
 801003e:	d0f9      	beq.n	8010034 <_strtol_l.constprop.0+0xd4>
 8010040:	f1be 0f00 	cmp.w	lr, #0
 8010044:	d000      	beq.n	8010048 <_strtol_l.constprop.0+0xe8>
 8010046:	1e69      	subs	r1, r5, #1
 8010048:	6011      	str	r1, [r2, #0]
 801004a:	e7f3      	b.n	8010034 <_strtol_l.constprop.0+0xd4>
 801004c:	2430      	movs	r4, #48	; 0x30
 801004e:	2b00      	cmp	r3, #0
 8010050:	d1b1      	bne.n	800ffb6 <_strtol_l.constprop.0+0x56>
 8010052:	2308      	movs	r3, #8
 8010054:	e7af      	b.n	800ffb6 <_strtol_l.constprop.0+0x56>
 8010056:	2c30      	cmp	r4, #48	; 0x30
 8010058:	d0a5      	beq.n	800ffa6 <_strtol_l.constprop.0+0x46>
 801005a:	230a      	movs	r3, #10
 801005c:	e7ab      	b.n	800ffb6 <_strtol_l.constprop.0+0x56>
 801005e:	bf00      	nop
 8010060:	08013c11 	.word	0x08013c11

08010064 <_strtol_r>:
 8010064:	f7ff bf7c 	b.w	800ff60 <_strtol_l.constprop.0>

08010068 <strtol>:
 8010068:	4613      	mov	r3, r2
 801006a:	460a      	mov	r2, r1
 801006c:	4601      	mov	r1, r0
 801006e:	4802      	ldr	r0, [pc, #8]	; (8010078 <strtol+0x10>)
 8010070:	6800      	ldr	r0, [r0, #0]
 8010072:	f7ff bf75 	b.w	800ff60 <_strtol_l.constprop.0>
 8010076:	bf00      	nop
 8010078:	20000348 	.word	0x20000348

0801007c <__cvt>:
 801007c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010080:	ec55 4b10 	vmov	r4, r5, d0
 8010084:	2d00      	cmp	r5, #0
 8010086:	460e      	mov	r6, r1
 8010088:	4619      	mov	r1, r3
 801008a:	462b      	mov	r3, r5
 801008c:	bfbb      	ittet	lt
 801008e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010092:	461d      	movlt	r5, r3
 8010094:	2300      	movge	r3, #0
 8010096:	232d      	movlt	r3, #45	; 0x2d
 8010098:	700b      	strb	r3, [r1, #0]
 801009a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801009c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80100a0:	4691      	mov	r9, r2
 80100a2:	f023 0820 	bic.w	r8, r3, #32
 80100a6:	bfbc      	itt	lt
 80100a8:	4622      	movlt	r2, r4
 80100aa:	4614      	movlt	r4, r2
 80100ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100b0:	d005      	beq.n	80100be <__cvt+0x42>
 80100b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80100b6:	d100      	bne.n	80100ba <__cvt+0x3e>
 80100b8:	3601      	adds	r6, #1
 80100ba:	2102      	movs	r1, #2
 80100bc:	e000      	b.n	80100c0 <__cvt+0x44>
 80100be:	2103      	movs	r1, #3
 80100c0:	ab03      	add	r3, sp, #12
 80100c2:	9301      	str	r3, [sp, #4]
 80100c4:	ab02      	add	r3, sp, #8
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	ec45 4b10 	vmov	d0, r4, r5
 80100cc:	4653      	mov	r3, sl
 80100ce:	4632      	mov	r2, r6
 80100d0:	f001 f982 	bl	80113d8 <_dtoa_r>
 80100d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80100d8:	4607      	mov	r7, r0
 80100da:	d102      	bne.n	80100e2 <__cvt+0x66>
 80100dc:	f019 0f01 	tst.w	r9, #1
 80100e0:	d022      	beq.n	8010128 <__cvt+0xac>
 80100e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100e6:	eb07 0906 	add.w	r9, r7, r6
 80100ea:	d110      	bne.n	801010e <__cvt+0x92>
 80100ec:	783b      	ldrb	r3, [r7, #0]
 80100ee:	2b30      	cmp	r3, #48	; 0x30
 80100f0:	d10a      	bne.n	8010108 <__cvt+0x8c>
 80100f2:	2200      	movs	r2, #0
 80100f4:	2300      	movs	r3, #0
 80100f6:	4620      	mov	r0, r4
 80100f8:	4629      	mov	r1, r5
 80100fa:	f7f0 fd0d 	bl	8000b18 <__aeabi_dcmpeq>
 80100fe:	b918      	cbnz	r0, 8010108 <__cvt+0x8c>
 8010100:	f1c6 0601 	rsb	r6, r6, #1
 8010104:	f8ca 6000 	str.w	r6, [sl]
 8010108:	f8da 3000 	ldr.w	r3, [sl]
 801010c:	4499      	add	r9, r3
 801010e:	2200      	movs	r2, #0
 8010110:	2300      	movs	r3, #0
 8010112:	4620      	mov	r0, r4
 8010114:	4629      	mov	r1, r5
 8010116:	f7f0 fcff 	bl	8000b18 <__aeabi_dcmpeq>
 801011a:	b108      	cbz	r0, 8010120 <__cvt+0xa4>
 801011c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010120:	2230      	movs	r2, #48	; 0x30
 8010122:	9b03      	ldr	r3, [sp, #12]
 8010124:	454b      	cmp	r3, r9
 8010126:	d307      	bcc.n	8010138 <__cvt+0xbc>
 8010128:	9b03      	ldr	r3, [sp, #12]
 801012a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801012c:	1bdb      	subs	r3, r3, r7
 801012e:	4638      	mov	r0, r7
 8010130:	6013      	str	r3, [r2, #0]
 8010132:	b004      	add	sp, #16
 8010134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010138:	1c59      	adds	r1, r3, #1
 801013a:	9103      	str	r1, [sp, #12]
 801013c:	701a      	strb	r2, [r3, #0]
 801013e:	e7f0      	b.n	8010122 <__cvt+0xa6>

08010140 <__exponent>:
 8010140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010142:	4603      	mov	r3, r0
 8010144:	2900      	cmp	r1, #0
 8010146:	bfb8      	it	lt
 8010148:	4249      	neglt	r1, r1
 801014a:	f803 2b02 	strb.w	r2, [r3], #2
 801014e:	bfb4      	ite	lt
 8010150:	222d      	movlt	r2, #45	; 0x2d
 8010152:	222b      	movge	r2, #43	; 0x2b
 8010154:	2909      	cmp	r1, #9
 8010156:	7042      	strb	r2, [r0, #1]
 8010158:	dd2a      	ble.n	80101b0 <__exponent+0x70>
 801015a:	f10d 0207 	add.w	r2, sp, #7
 801015e:	4617      	mov	r7, r2
 8010160:	260a      	movs	r6, #10
 8010162:	4694      	mov	ip, r2
 8010164:	fb91 f5f6 	sdiv	r5, r1, r6
 8010168:	fb06 1415 	mls	r4, r6, r5, r1
 801016c:	3430      	adds	r4, #48	; 0x30
 801016e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010172:	460c      	mov	r4, r1
 8010174:	2c63      	cmp	r4, #99	; 0x63
 8010176:	f102 32ff 	add.w	r2, r2, #4294967295
 801017a:	4629      	mov	r1, r5
 801017c:	dcf1      	bgt.n	8010162 <__exponent+0x22>
 801017e:	3130      	adds	r1, #48	; 0x30
 8010180:	f1ac 0402 	sub.w	r4, ip, #2
 8010184:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010188:	1c41      	adds	r1, r0, #1
 801018a:	4622      	mov	r2, r4
 801018c:	42ba      	cmp	r2, r7
 801018e:	d30a      	bcc.n	80101a6 <__exponent+0x66>
 8010190:	f10d 0209 	add.w	r2, sp, #9
 8010194:	eba2 020c 	sub.w	r2, r2, ip
 8010198:	42bc      	cmp	r4, r7
 801019a:	bf88      	it	hi
 801019c:	2200      	movhi	r2, #0
 801019e:	4413      	add	r3, r2
 80101a0:	1a18      	subs	r0, r3, r0
 80101a2:	b003      	add	sp, #12
 80101a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80101aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80101ae:	e7ed      	b.n	801018c <__exponent+0x4c>
 80101b0:	2330      	movs	r3, #48	; 0x30
 80101b2:	3130      	adds	r1, #48	; 0x30
 80101b4:	7083      	strb	r3, [r0, #2]
 80101b6:	70c1      	strb	r1, [r0, #3]
 80101b8:	1d03      	adds	r3, r0, #4
 80101ba:	e7f1      	b.n	80101a0 <__exponent+0x60>

080101bc <_printf_float>:
 80101bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c0:	ed2d 8b02 	vpush	{d8}
 80101c4:	b08d      	sub	sp, #52	; 0x34
 80101c6:	460c      	mov	r4, r1
 80101c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80101cc:	4616      	mov	r6, r2
 80101ce:	461f      	mov	r7, r3
 80101d0:	4605      	mov	r5, r0
 80101d2:	f000 ffaf 	bl	8011134 <_localeconv_r>
 80101d6:	f8d0 a000 	ldr.w	sl, [r0]
 80101da:	4650      	mov	r0, sl
 80101dc:	f7f0 f870 	bl	80002c0 <strlen>
 80101e0:	2300      	movs	r3, #0
 80101e2:	930a      	str	r3, [sp, #40]	; 0x28
 80101e4:	6823      	ldr	r3, [r4, #0]
 80101e6:	9305      	str	r3, [sp, #20]
 80101e8:	f8d8 3000 	ldr.w	r3, [r8]
 80101ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80101f0:	3307      	adds	r3, #7
 80101f2:	f023 0307 	bic.w	r3, r3, #7
 80101f6:	f103 0208 	add.w	r2, r3, #8
 80101fa:	f8c8 2000 	str.w	r2, [r8]
 80101fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010202:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010206:	9307      	str	r3, [sp, #28]
 8010208:	f8cd 8018 	str.w	r8, [sp, #24]
 801020c:	ee08 0a10 	vmov	s16, r0
 8010210:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010218:	4b9e      	ldr	r3, [pc, #632]	; (8010494 <_printf_float+0x2d8>)
 801021a:	f04f 32ff 	mov.w	r2, #4294967295
 801021e:	f7f0 fcad 	bl	8000b7c <__aeabi_dcmpun>
 8010222:	bb88      	cbnz	r0, 8010288 <_printf_float+0xcc>
 8010224:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010228:	4b9a      	ldr	r3, [pc, #616]	; (8010494 <_printf_float+0x2d8>)
 801022a:	f04f 32ff 	mov.w	r2, #4294967295
 801022e:	f7f0 fc87 	bl	8000b40 <__aeabi_dcmple>
 8010232:	bb48      	cbnz	r0, 8010288 <_printf_float+0xcc>
 8010234:	2200      	movs	r2, #0
 8010236:	2300      	movs	r3, #0
 8010238:	4640      	mov	r0, r8
 801023a:	4649      	mov	r1, r9
 801023c:	f7f0 fc76 	bl	8000b2c <__aeabi_dcmplt>
 8010240:	b110      	cbz	r0, 8010248 <_printf_float+0x8c>
 8010242:	232d      	movs	r3, #45	; 0x2d
 8010244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010248:	4a93      	ldr	r2, [pc, #588]	; (8010498 <_printf_float+0x2dc>)
 801024a:	4b94      	ldr	r3, [pc, #592]	; (801049c <_printf_float+0x2e0>)
 801024c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010250:	bf94      	ite	ls
 8010252:	4690      	movls	r8, r2
 8010254:	4698      	movhi	r8, r3
 8010256:	2303      	movs	r3, #3
 8010258:	6123      	str	r3, [r4, #16]
 801025a:	9b05      	ldr	r3, [sp, #20]
 801025c:	f023 0304 	bic.w	r3, r3, #4
 8010260:	6023      	str	r3, [r4, #0]
 8010262:	f04f 0900 	mov.w	r9, #0
 8010266:	9700      	str	r7, [sp, #0]
 8010268:	4633      	mov	r3, r6
 801026a:	aa0b      	add	r2, sp, #44	; 0x2c
 801026c:	4621      	mov	r1, r4
 801026e:	4628      	mov	r0, r5
 8010270:	f000 f9da 	bl	8010628 <_printf_common>
 8010274:	3001      	adds	r0, #1
 8010276:	f040 8090 	bne.w	801039a <_printf_float+0x1de>
 801027a:	f04f 30ff 	mov.w	r0, #4294967295
 801027e:	b00d      	add	sp, #52	; 0x34
 8010280:	ecbd 8b02 	vpop	{d8}
 8010284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010288:	4642      	mov	r2, r8
 801028a:	464b      	mov	r3, r9
 801028c:	4640      	mov	r0, r8
 801028e:	4649      	mov	r1, r9
 8010290:	f7f0 fc74 	bl	8000b7c <__aeabi_dcmpun>
 8010294:	b140      	cbz	r0, 80102a8 <_printf_float+0xec>
 8010296:	464b      	mov	r3, r9
 8010298:	2b00      	cmp	r3, #0
 801029a:	bfbc      	itt	lt
 801029c:	232d      	movlt	r3, #45	; 0x2d
 801029e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80102a2:	4a7f      	ldr	r2, [pc, #508]	; (80104a0 <_printf_float+0x2e4>)
 80102a4:	4b7f      	ldr	r3, [pc, #508]	; (80104a4 <_printf_float+0x2e8>)
 80102a6:	e7d1      	b.n	801024c <_printf_float+0x90>
 80102a8:	6863      	ldr	r3, [r4, #4]
 80102aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80102ae:	9206      	str	r2, [sp, #24]
 80102b0:	1c5a      	adds	r2, r3, #1
 80102b2:	d13f      	bne.n	8010334 <_printf_float+0x178>
 80102b4:	2306      	movs	r3, #6
 80102b6:	6063      	str	r3, [r4, #4]
 80102b8:	9b05      	ldr	r3, [sp, #20]
 80102ba:	6861      	ldr	r1, [r4, #4]
 80102bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80102c0:	2300      	movs	r3, #0
 80102c2:	9303      	str	r3, [sp, #12]
 80102c4:	ab0a      	add	r3, sp, #40	; 0x28
 80102c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80102ca:	ab09      	add	r3, sp, #36	; 0x24
 80102cc:	ec49 8b10 	vmov	d0, r8, r9
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	6022      	str	r2, [r4, #0]
 80102d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102d8:	4628      	mov	r0, r5
 80102da:	f7ff fecf 	bl	801007c <__cvt>
 80102de:	9b06      	ldr	r3, [sp, #24]
 80102e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102e2:	2b47      	cmp	r3, #71	; 0x47
 80102e4:	4680      	mov	r8, r0
 80102e6:	d108      	bne.n	80102fa <_printf_float+0x13e>
 80102e8:	1cc8      	adds	r0, r1, #3
 80102ea:	db02      	blt.n	80102f2 <_printf_float+0x136>
 80102ec:	6863      	ldr	r3, [r4, #4]
 80102ee:	4299      	cmp	r1, r3
 80102f0:	dd41      	ble.n	8010376 <_printf_float+0x1ba>
 80102f2:	f1ab 0302 	sub.w	r3, fp, #2
 80102f6:	fa5f fb83 	uxtb.w	fp, r3
 80102fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102fe:	d820      	bhi.n	8010342 <_printf_float+0x186>
 8010300:	3901      	subs	r1, #1
 8010302:	465a      	mov	r2, fp
 8010304:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010308:	9109      	str	r1, [sp, #36]	; 0x24
 801030a:	f7ff ff19 	bl	8010140 <__exponent>
 801030e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010310:	1813      	adds	r3, r2, r0
 8010312:	2a01      	cmp	r2, #1
 8010314:	4681      	mov	r9, r0
 8010316:	6123      	str	r3, [r4, #16]
 8010318:	dc02      	bgt.n	8010320 <_printf_float+0x164>
 801031a:	6822      	ldr	r2, [r4, #0]
 801031c:	07d2      	lsls	r2, r2, #31
 801031e:	d501      	bpl.n	8010324 <_printf_float+0x168>
 8010320:	3301      	adds	r3, #1
 8010322:	6123      	str	r3, [r4, #16]
 8010324:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010328:	2b00      	cmp	r3, #0
 801032a:	d09c      	beq.n	8010266 <_printf_float+0xaa>
 801032c:	232d      	movs	r3, #45	; 0x2d
 801032e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010332:	e798      	b.n	8010266 <_printf_float+0xaa>
 8010334:	9a06      	ldr	r2, [sp, #24]
 8010336:	2a47      	cmp	r2, #71	; 0x47
 8010338:	d1be      	bne.n	80102b8 <_printf_float+0xfc>
 801033a:	2b00      	cmp	r3, #0
 801033c:	d1bc      	bne.n	80102b8 <_printf_float+0xfc>
 801033e:	2301      	movs	r3, #1
 8010340:	e7b9      	b.n	80102b6 <_printf_float+0xfa>
 8010342:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010346:	d118      	bne.n	801037a <_printf_float+0x1be>
 8010348:	2900      	cmp	r1, #0
 801034a:	6863      	ldr	r3, [r4, #4]
 801034c:	dd0b      	ble.n	8010366 <_printf_float+0x1aa>
 801034e:	6121      	str	r1, [r4, #16]
 8010350:	b913      	cbnz	r3, 8010358 <_printf_float+0x19c>
 8010352:	6822      	ldr	r2, [r4, #0]
 8010354:	07d0      	lsls	r0, r2, #31
 8010356:	d502      	bpl.n	801035e <_printf_float+0x1a2>
 8010358:	3301      	adds	r3, #1
 801035a:	440b      	add	r3, r1
 801035c:	6123      	str	r3, [r4, #16]
 801035e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010360:	f04f 0900 	mov.w	r9, #0
 8010364:	e7de      	b.n	8010324 <_printf_float+0x168>
 8010366:	b913      	cbnz	r3, 801036e <_printf_float+0x1b2>
 8010368:	6822      	ldr	r2, [r4, #0]
 801036a:	07d2      	lsls	r2, r2, #31
 801036c:	d501      	bpl.n	8010372 <_printf_float+0x1b6>
 801036e:	3302      	adds	r3, #2
 8010370:	e7f4      	b.n	801035c <_printf_float+0x1a0>
 8010372:	2301      	movs	r3, #1
 8010374:	e7f2      	b.n	801035c <_printf_float+0x1a0>
 8010376:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801037a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801037c:	4299      	cmp	r1, r3
 801037e:	db05      	blt.n	801038c <_printf_float+0x1d0>
 8010380:	6823      	ldr	r3, [r4, #0]
 8010382:	6121      	str	r1, [r4, #16]
 8010384:	07d8      	lsls	r0, r3, #31
 8010386:	d5ea      	bpl.n	801035e <_printf_float+0x1a2>
 8010388:	1c4b      	adds	r3, r1, #1
 801038a:	e7e7      	b.n	801035c <_printf_float+0x1a0>
 801038c:	2900      	cmp	r1, #0
 801038e:	bfd4      	ite	le
 8010390:	f1c1 0202 	rsble	r2, r1, #2
 8010394:	2201      	movgt	r2, #1
 8010396:	4413      	add	r3, r2
 8010398:	e7e0      	b.n	801035c <_printf_float+0x1a0>
 801039a:	6823      	ldr	r3, [r4, #0]
 801039c:	055a      	lsls	r2, r3, #21
 801039e:	d407      	bmi.n	80103b0 <_printf_float+0x1f4>
 80103a0:	6923      	ldr	r3, [r4, #16]
 80103a2:	4642      	mov	r2, r8
 80103a4:	4631      	mov	r1, r6
 80103a6:	4628      	mov	r0, r5
 80103a8:	47b8      	blx	r7
 80103aa:	3001      	adds	r0, #1
 80103ac:	d12c      	bne.n	8010408 <_printf_float+0x24c>
 80103ae:	e764      	b.n	801027a <_printf_float+0xbe>
 80103b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80103b4:	f240 80e0 	bls.w	8010578 <_printf_float+0x3bc>
 80103b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80103bc:	2200      	movs	r2, #0
 80103be:	2300      	movs	r3, #0
 80103c0:	f7f0 fbaa 	bl	8000b18 <__aeabi_dcmpeq>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d034      	beq.n	8010432 <_printf_float+0x276>
 80103c8:	4a37      	ldr	r2, [pc, #220]	; (80104a8 <_printf_float+0x2ec>)
 80103ca:	2301      	movs	r3, #1
 80103cc:	4631      	mov	r1, r6
 80103ce:	4628      	mov	r0, r5
 80103d0:	47b8      	blx	r7
 80103d2:	3001      	adds	r0, #1
 80103d4:	f43f af51 	beq.w	801027a <_printf_float+0xbe>
 80103d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103dc:	429a      	cmp	r2, r3
 80103de:	db02      	blt.n	80103e6 <_printf_float+0x22a>
 80103e0:	6823      	ldr	r3, [r4, #0]
 80103e2:	07d8      	lsls	r0, r3, #31
 80103e4:	d510      	bpl.n	8010408 <_printf_float+0x24c>
 80103e6:	ee18 3a10 	vmov	r3, s16
 80103ea:	4652      	mov	r2, sl
 80103ec:	4631      	mov	r1, r6
 80103ee:	4628      	mov	r0, r5
 80103f0:	47b8      	blx	r7
 80103f2:	3001      	adds	r0, #1
 80103f4:	f43f af41 	beq.w	801027a <_printf_float+0xbe>
 80103f8:	f04f 0800 	mov.w	r8, #0
 80103fc:	f104 091a 	add.w	r9, r4, #26
 8010400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010402:	3b01      	subs	r3, #1
 8010404:	4543      	cmp	r3, r8
 8010406:	dc09      	bgt.n	801041c <_printf_float+0x260>
 8010408:	6823      	ldr	r3, [r4, #0]
 801040a:	079b      	lsls	r3, r3, #30
 801040c:	f100 8107 	bmi.w	801061e <_printf_float+0x462>
 8010410:	68e0      	ldr	r0, [r4, #12]
 8010412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010414:	4298      	cmp	r0, r3
 8010416:	bfb8      	it	lt
 8010418:	4618      	movlt	r0, r3
 801041a:	e730      	b.n	801027e <_printf_float+0xc2>
 801041c:	2301      	movs	r3, #1
 801041e:	464a      	mov	r2, r9
 8010420:	4631      	mov	r1, r6
 8010422:	4628      	mov	r0, r5
 8010424:	47b8      	blx	r7
 8010426:	3001      	adds	r0, #1
 8010428:	f43f af27 	beq.w	801027a <_printf_float+0xbe>
 801042c:	f108 0801 	add.w	r8, r8, #1
 8010430:	e7e6      	b.n	8010400 <_printf_float+0x244>
 8010432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010434:	2b00      	cmp	r3, #0
 8010436:	dc39      	bgt.n	80104ac <_printf_float+0x2f0>
 8010438:	4a1b      	ldr	r2, [pc, #108]	; (80104a8 <_printf_float+0x2ec>)
 801043a:	2301      	movs	r3, #1
 801043c:	4631      	mov	r1, r6
 801043e:	4628      	mov	r0, r5
 8010440:	47b8      	blx	r7
 8010442:	3001      	adds	r0, #1
 8010444:	f43f af19 	beq.w	801027a <_printf_float+0xbe>
 8010448:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801044c:	4313      	orrs	r3, r2
 801044e:	d102      	bne.n	8010456 <_printf_float+0x29a>
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	07d9      	lsls	r1, r3, #31
 8010454:	d5d8      	bpl.n	8010408 <_printf_float+0x24c>
 8010456:	ee18 3a10 	vmov	r3, s16
 801045a:	4652      	mov	r2, sl
 801045c:	4631      	mov	r1, r6
 801045e:	4628      	mov	r0, r5
 8010460:	47b8      	blx	r7
 8010462:	3001      	adds	r0, #1
 8010464:	f43f af09 	beq.w	801027a <_printf_float+0xbe>
 8010468:	f04f 0900 	mov.w	r9, #0
 801046c:	f104 0a1a 	add.w	sl, r4, #26
 8010470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010472:	425b      	negs	r3, r3
 8010474:	454b      	cmp	r3, r9
 8010476:	dc01      	bgt.n	801047c <_printf_float+0x2c0>
 8010478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801047a:	e792      	b.n	80103a2 <_printf_float+0x1e6>
 801047c:	2301      	movs	r3, #1
 801047e:	4652      	mov	r2, sl
 8010480:	4631      	mov	r1, r6
 8010482:	4628      	mov	r0, r5
 8010484:	47b8      	blx	r7
 8010486:	3001      	adds	r0, #1
 8010488:	f43f aef7 	beq.w	801027a <_printf_float+0xbe>
 801048c:	f109 0901 	add.w	r9, r9, #1
 8010490:	e7ee      	b.n	8010470 <_printf_float+0x2b4>
 8010492:	bf00      	nop
 8010494:	7fefffff 	.word	0x7fefffff
 8010498:	08013d11 	.word	0x08013d11
 801049c:	08013d15 	.word	0x08013d15
 80104a0:	08013d19 	.word	0x08013d19
 80104a4:	08013d1d 	.word	0x08013d1d
 80104a8:	08013d21 	.word	0x08013d21
 80104ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104b0:	429a      	cmp	r2, r3
 80104b2:	bfa8      	it	ge
 80104b4:	461a      	movge	r2, r3
 80104b6:	2a00      	cmp	r2, #0
 80104b8:	4691      	mov	r9, r2
 80104ba:	dc37      	bgt.n	801052c <_printf_float+0x370>
 80104bc:	f04f 0b00 	mov.w	fp, #0
 80104c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104c4:	f104 021a 	add.w	r2, r4, #26
 80104c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104ca:	9305      	str	r3, [sp, #20]
 80104cc:	eba3 0309 	sub.w	r3, r3, r9
 80104d0:	455b      	cmp	r3, fp
 80104d2:	dc33      	bgt.n	801053c <_printf_float+0x380>
 80104d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104d8:	429a      	cmp	r2, r3
 80104da:	db3b      	blt.n	8010554 <_printf_float+0x398>
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	07da      	lsls	r2, r3, #31
 80104e0:	d438      	bmi.n	8010554 <_printf_float+0x398>
 80104e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80104e6:	eba2 0903 	sub.w	r9, r2, r3
 80104ea:	9b05      	ldr	r3, [sp, #20]
 80104ec:	1ad2      	subs	r2, r2, r3
 80104ee:	4591      	cmp	r9, r2
 80104f0:	bfa8      	it	ge
 80104f2:	4691      	movge	r9, r2
 80104f4:	f1b9 0f00 	cmp.w	r9, #0
 80104f8:	dc35      	bgt.n	8010566 <_printf_float+0x3aa>
 80104fa:	f04f 0800 	mov.w	r8, #0
 80104fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010502:	f104 0a1a 	add.w	sl, r4, #26
 8010506:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801050a:	1a9b      	subs	r3, r3, r2
 801050c:	eba3 0309 	sub.w	r3, r3, r9
 8010510:	4543      	cmp	r3, r8
 8010512:	f77f af79 	ble.w	8010408 <_printf_float+0x24c>
 8010516:	2301      	movs	r3, #1
 8010518:	4652      	mov	r2, sl
 801051a:	4631      	mov	r1, r6
 801051c:	4628      	mov	r0, r5
 801051e:	47b8      	blx	r7
 8010520:	3001      	adds	r0, #1
 8010522:	f43f aeaa 	beq.w	801027a <_printf_float+0xbe>
 8010526:	f108 0801 	add.w	r8, r8, #1
 801052a:	e7ec      	b.n	8010506 <_printf_float+0x34a>
 801052c:	4613      	mov	r3, r2
 801052e:	4631      	mov	r1, r6
 8010530:	4642      	mov	r2, r8
 8010532:	4628      	mov	r0, r5
 8010534:	47b8      	blx	r7
 8010536:	3001      	adds	r0, #1
 8010538:	d1c0      	bne.n	80104bc <_printf_float+0x300>
 801053a:	e69e      	b.n	801027a <_printf_float+0xbe>
 801053c:	2301      	movs	r3, #1
 801053e:	4631      	mov	r1, r6
 8010540:	4628      	mov	r0, r5
 8010542:	9205      	str	r2, [sp, #20]
 8010544:	47b8      	blx	r7
 8010546:	3001      	adds	r0, #1
 8010548:	f43f ae97 	beq.w	801027a <_printf_float+0xbe>
 801054c:	9a05      	ldr	r2, [sp, #20]
 801054e:	f10b 0b01 	add.w	fp, fp, #1
 8010552:	e7b9      	b.n	80104c8 <_printf_float+0x30c>
 8010554:	ee18 3a10 	vmov	r3, s16
 8010558:	4652      	mov	r2, sl
 801055a:	4631      	mov	r1, r6
 801055c:	4628      	mov	r0, r5
 801055e:	47b8      	blx	r7
 8010560:	3001      	adds	r0, #1
 8010562:	d1be      	bne.n	80104e2 <_printf_float+0x326>
 8010564:	e689      	b.n	801027a <_printf_float+0xbe>
 8010566:	9a05      	ldr	r2, [sp, #20]
 8010568:	464b      	mov	r3, r9
 801056a:	4442      	add	r2, r8
 801056c:	4631      	mov	r1, r6
 801056e:	4628      	mov	r0, r5
 8010570:	47b8      	blx	r7
 8010572:	3001      	adds	r0, #1
 8010574:	d1c1      	bne.n	80104fa <_printf_float+0x33e>
 8010576:	e680      	b.n	801027a <_printf_float+0xbe>
 8010578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801057a:	2a01      	cmp	r2, #1
 801057c:	dc01      	bgt.n	8010582 <_printf_float+0x3c6>
 801057e:	07db      	lsls	r3, r3, #31
 8010580:	d53a      	bpl.n	80105f8 <_printf_float+0x43c>
 8010582:	2301      	movs	r3, #1
 8010584:	4642      	mov	r2, r8
 8010586:	4631      	mov	r1, r6
 8010588:	4628      	mov	r0, r5
 801058a:	47b8      	blx	r7
 801058c:	3001      	adds	r0, #1
 801058e:	f43f ae74 	beq.w	801027a <_printf_float+0xbe>
 8010592:	ee18 3a10 	vmov	r3, s16
 8010596:	4652      	mov	r2, sl
 8010598:	4631      	mov	r1, r6
 801059a:	4628      	mov	r0, r5
 801059c:	47b8      	blx	r7
 801059e:	3001      	adds	r0, #1
 80105a0:	f43f ae6b 	beq.w	801027a <_printf_float+0xbe>
 80105a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80105a8:	2200      	movs	r2, #0
 80105aa:	2300      	movs	r3, #0
 80105ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80105b0:	f7f0 fab2 	bl	8000b18 <__aeabi_dcmpeq>
 80105b4:	b9d8      	cbnz	r0, 80105ee <_printf_float+0x432>
 80105b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80105ba:	f108 0201 	add.w	r2, r8, #1
 80105be:	4631      	mov	r1, r6
 80105c0:	4628      	mov	r0, r5
 80105c2:	47b8      	blx	r7
 80105c4:	3001      	adds	r0, #1
 80105c6:	d10e      	bne.n	80105e6 <_printf_float+0x42a>
 80105c8:	e657      	b.n	801027a <_printf_float+0xbe>
 80105ca:	2301      	movs	r3, #1
 80105cc:	4652      	mov	r2, sl
 80105ce:	4631      	mov	r1, r6
 80105d0:	4628      	mov	r0, r5
 80105d2:	47b8      	blx	r7
 80105d4:	3001      	adds	r0, #1
 80105d6:	f43f ae50 	beq.w	801027a <_printf_float+0xbe>
 80105da:	f108 0801 	add.w	r8, r8, #1
 80105de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105e0:	3b01      	subs	r3, #1
 80105e2:	4543      	cmp	r3, r8
 80105e4:	dcf1      	bgt.n	80105ca <_printf_float+0x40e>
 80105e6:	464b      	mov	r3, r9
 80105e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80105ec:	e6da      	b.n	80103a4 <_printf_float+0x1e8>
 80105ee:	f04f 0800 	mov.w	r8, #0
 80105f2:	f104 0a1a 	add.w	sl, r4, #26
 80105f6:	e7f2      	b.n	80105de <_printf_float+0x422>
 80105f8:	2301      	movs	r3, #1
 80105fa:	4642      	mov	r2, r8
 80105fc:	e7df      	b.n	80105be <_printf_float+0x402>
 80105fe:	2301      	movs	r3, #1
 8010600:	464a      	mov	r2, r9
 8010602:	4631      	mov	r1, r6
 8010604:	4628      	mov	r0, r5
 8010606:	47b8      	blx	r7
 8010608:	3001      	adds	r0, #1
 801060a:	f43f ae36 	beq.w	801027a <_printf_float+0xbe>
 801060e:	f108 0801 	add.w	r8, r8, #1
 8010612:	68e3      	ldr	r3, [r4, #12]
 8010614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010616:	1a5b      	subs	r3, r3, r1
 8010618:	4543      	cmp	r3, r8
 801061a:	dcf0      	bgt.n	80105fe <_printf_float+0x442>
 801061c:	e6f8      	b.n	8010410 <_printf_float+0x254>
 801061e:	f04f 0800 	mov.w	r8, #0
 8010622:	f104 0919 	add.w	r9, r4, #25
 8010626:	e7f4      	b.n	8010612 <_printf_float+0x456>

08010628 <_printf_common>:
 8010628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801062c:	4616      	mov	r6, r2
 801062e:	4699      	mov	r9, r3
 8010630:	688a      	ldr	r2, [r1, #8]
 8010632:	690b      	ldr	r3, [r1, #16]
 8010634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010638:	4293      	cmp	r3, r2
 801063a:	bfb8      	it	lt
 801063c:	4613      	movlt	r3, r2
 801063e:	6033      	str	r3, [r6, #0]
 8010640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010644:	4607      	mov	r7, r0
 8010646:	460c      	mov	r4, r1
 8010648:	b10a      	cbz	r2, 801064e <_printf_common+0x26>
 801064a:	3301      	adds	r3, #1
 801064c:	6033      	str	r3, [r6, #0]
 801064e:	6823      	ldr	r3, [r4, #0]
 8010650:	0699      	lsls	r1, r3, #26
 8010652:	bf42      	ittt	mi
 8010654:	6833      	ldrmi	r3, [r6, #0]
 8010656:	3302      	addmi	r3, #2
 8010658:	6033      	strmi	r3, [r6, #0]
 801065a:	6825      	ldr	r5, [r4, #0]
 801065c:	f015 0506 	ands.w	r5, r5, #6
 8010660:	d106      	bne.n	8010670 <_printf_common+0x48>
 8010662:	f104 0a19 	add.w	sl, r4, #25
 8010666:	68e3      	ldr	r3, [r4, #12]
 8010668:	6832      	ldr	r2, [r6, #0]
 801066a:	1a9b      	subs	r3, r3, r2
 801066c:	42ab      	cmp	r3, r5
 801066e:	dc26      	bgt.n	80106be <_printf_common+0x96>
 8010670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010674:	1e13      	subs	r3, r2, #0
 8010676:	6822      	ldr	r2, [r4, #0]
 8010678:	bf18      	it	ne
 801067a:	2301      	movne	r3, #1
 801067c:	0692      	lsls	r2, r2, #26
 801067e:	d42b      	bmi.n	80106d8 <_printf_common+0xb0>
 8010680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010684:	4649      	mov	r1, r9
 8010686:	4638      	mov	r0, r7
 8010688:	47c0      	blx	r8
 801068a:	3001      	adds	r0, #1
 801068c:	d01e      	beq.n	80106cc <_printf_common+0xa4>
 801068e:	6823      	ldr	r3, [r4, #0]
 8010690:	6922      	ldr	r2, [r4, #16]
 8010692:	f003 0306 	and.w	r3, r3, #6
 8010696:	2b04      	cmp	r3, #4
 8010698:	bf02      	ittt	eq
 801069a:	68e5      	ldreq	r5, [r4, #12]
 801069c:	6833      	ldreq	r3, [r6, #0]
 801069e:	1aed      	subeq	r5, r5, r3
 80106a0:	68a3      	ldr	r3, [r4, #8]
 80106a2:	bf0c      	ite	eq
 80106a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106a8:	2500      	movne	r5, #0
 80106aa:	4293      	cmp	r3, r2
 80106ac:	bfc4      	itt	gt
 80106ae:	1a9b      	subgt	r3, r3, r2
 80106b0:	18ed      	addgt	r5, r5, r3
 80106b2:	2600      	movs	r6, #0
 80106b4:	341a      	adds	r4, #26
 80106b6:	42b5      	cmp	r5, r6
 80106b8:	d11a      	bne.n	80106f0 <_printf_common+0xc8>
 80106ba:	2000      	movs	r0, #0
 80106bc:	e008      	b.n	80106d0 <_printf_common+0xa8>
 80106be:	2301      	movs	r3, #1
 80106c0:	4652      	mov	r2, sl
 80106c2:	4649      	mov	r1, r9
 80106c4:	4638      	mov	r0, r7
 80106c6:	47c0      	blx	r8
 80106c8:	3001      	adds	r0, #1
 80106ca:	d103      	bne.n	80106d4 <_printf_common+0xac>
 80106cc:	f04f 30ff 	mov.w	r0, #4294967295
 80106d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106d4:	3501      	adds	r5, #1
 80106d6:	e7c6      	b.n	8010666 <_printf_common+0x3e>
 80106d8:	18e1      	adds	r1, r4, r3
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	2030      	movs	r0, #48	; 0x30
 80106de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106e2:	4422      	add	r2, r4
 80106e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106ec:	3302      	adds	r3, #2
 80106ee:	e7c7      	b.n	8010680 <_printf_common+0x58>
 80106f0:	2301      	movs	r3, #1
 80106f2:	4622      	mov	r2, r4
 80106f4:	4649      	mov	r1, r9
 80106f6:	4638      	mov	r0, r7
 80106f8:	47c0      	blx	r8
 80106fa:	3001      	adds	r0, #1
 80106fc:	d0e6      	beq.n	80106cc <_printf_common+0xa4>
 80106fe:	3601      	adds	r6, #1
 8010700:	e7d9      	b.n	80106b6 <_printf_common+0x8e>
	...

08010704 <_printf_i>:
 8010704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010708:	7e0f      	ldrb	r7, [r1, #24]
 801070a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801070c:	2f78      	cmp	r7, #120	; 0x78
 801070e:	4691      	mov	r9, r2
 8010710:	4680      	mov	r8, r0
 8010712:	460c      	mov	r4, r1
 8010714:	469a      	mov	sl, r3
 8010716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801071a:	d807      	bhi.n	801072c <_printf_i+0x28>
 801071c:	2f62      	cmp	r7, #98	; 0x62
 801071e:	d80a      	bhi.n	8010736 <_printf_i+0x32>
 8010720:	2f00      	cmp	r7, #0
 8010722:	f000 80d4 	beq.w	80108ce <_printf_i+0x1ca>
 8010726:	2f58      	cmp	r7, #88	; 0x58
 8010728:	f000 80c0 	beq.w	80108ac <_printf_i+0x1a8>
 801072c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010734:	e03a      	b.n	80107ac <_printf_i+0xa8>
 8010736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801073a:	2b15      	cmp	r3, #21
 801073c:	d8f6      	bhi.n	801072c <_printf_i+0x28>
 801073e:	a101      	add	r1, pc, #4	; (adr r1, 8010744 <_printf_i+0x40>)
 8010740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010744:	0801079d 	.word	0x0801079d
 8010748:	080107b1 	.word	0x080107b1
 801074c:	0801072d 	.word	0x0801072d
 8010750:	0801072d 	.word	0x0801072d
 8010754:	0801072d 	.word	0x0801072d
 8010758:	0801072d 	.word	0x0801072d
 801075c:	080107b1 	.word	0x080107b1
 8010760:	0801072d 	.word	0x0801072d
 8010764:	0801072d 	.word	0x0801072d
 8010768:	0801072d 	.word	0x0801072d
 801076c:	0801072d 	.word	0x0801072d
 8010770:	080108b5 	.word	0x080108b5
 8010774:	080107dd 	.word	0x080107dd
 8010778:	0801086f 	.word	0x0801086f
 801077c:	0801072d 	.word	0x0801072d
 8010780:	0801072d 	.word	0x0801072d
 8010784:	080108d7 	.word	0x080108d7
 8010788:	0801072d 	.word	0x0801072d
 801078c:	080107dd 	.word	0x080107dd
 8010790:	0801072d 	.word	0x0801072d
 8010794:	0801072d 	.word	0x0801072d
 8010798:	08010877 	.word	0x08010877
 801079c:	682b      	ldr	r3, [r5, #0]
 801079e:	1d1a      	adds	r2, r3, #4
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	602a      	str	r2, [r5, #0]
 80107a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107ac:	2301      	movs	r3, #1
 80107ae:	e09f      	b.n	80108f0 <_printf_i+0x1ec>
 80107b0:	6820      	ldr	r0, [r4, #0]
 80107b2:	682b      	ldr	r3, [r5, #0]
 80107b4:	0607      	lsls	r7, r0, #24
 80107b6:	f103 0104 	add.w	r1, r3, #4
 80107ba:	6029      	str	r1, [r5, #0]
 80107bc:	d501      	bpl.n	80107c2 <_printf_i+0xbe>
 80107be:	681e      	ldr	r6, [r3, #0]
 80107c0:	e003      	b.n	80107ca <_printf_i+0xc6>
 80107c2:	0646      	lsls	r6, r0, #25
 80107c4:	d5fb      	bpl.n	80107be <_printf_i+0xba>
 80107c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80107ca:	2e00      	cmp	r6, #0
 80107cc:	da03      	bge.n	80107d6 <_printf_i+0xd2>
 80107ce:	232d      	movs	r3, #45	; 0x2d
 80107d0:	4276      	negs	r6, r6
 80107d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107d6:	485a      	ldr	r0, [pc, #360]	; (8010940 <_printf_i+0x23c>)
 80107d8:	230a      	movs	r3, #10
 80107da:	e012      	b.n	8010802 <_printf_i+0xfe>
 80107dc:	682b      	ldr	r3, [r5, #0]
 80107de:	6820      	ldr	r0, [r4, #0]
 80107e0:	1d19      	adds	r1, r3, #4
 80107e2:	6029      	str	r1, [r5, #0]
 80107e4:	0605      	lsls	r5, r0, #24
 80107e6:	d501      	bpl.n	80107ec <_printf_i+0xe8>
 80107e8:	681e      	ldr	r6, [r3, #0]
 80107ea:	e002      	b.n	80107f2 <_printf_i+0xee>
 80107ec:	0641      	lsls	r1, r0, #25
 80107ee:	d5fb      	bpl.n	80107e8 <_printf_i+0xe4>
 80107f0:	881e      	ldrh	r6, [r3, #0]
 80107f2:	4853      	ldr	r0, [pc, #332]	; (8010940 <_printf_i+0x23c>)
 80107f4:	2f6f      	cmp	r7, #111	; 0x6f
 80107f6:	bf0c      	ite	eq
 80107f8:	2308      	moveq	r3, #8
 80107fa:	230a      	movne	r3, #10
 80107fc:	2100      	movs	r1, #0
 80107fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010802:	6865      	ldr	r5, [r4, #4]
 8010804:	60a5      	str	r5, [r4, #8]
 8010806:	2d00      	cmp	r5, #0
 8010808:	bfa2      	ittt	ge
 801080a:	6821      	ldrge	r1, [r4, #0]
 801080c:	f021 0104 	bicge.w	r1, r1, #4
 8010810:	6021      	strge	r1, [r4, #0]
 8010812:	b90e      	cbnz	r6, 8010818 <_printf_i+0x114>
 8010814:	2d00      	cmp	r5, #0
 8010816:	d04b      	beq.n	80108b0 <_printf_i+0x1ac>
 8010818:	4615      	mov	r5, r2
 801081a:	fbb6 f1f3 	udiv	r1, r6, r3
 801081e:	fb03 6711 	mls	r7, r3, r1, r6
 8010822:	5dc7      	ldrb	r7, [r0, r7]
 8010824:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010828:	4637      	mov	r7, r6
 801082a:	42bb      	cmp	r3, r7
 801082c:	460e      	mov	r6, r1
 801082e:	d9f4      	bls.n	801081a <_printf_i+0x116>
 8010830:	2b08      	cmp	r3, #8
 8010832:	d10b      	bne.n	801084c <_printf_i+0x148>
 8010834:	6823      	ldr	r3, [r4, #0]
 8010836:	07de      	lsls	r6, r3, #31
 8010838:	d508      	bpl.n	801084c <_printf_i+0x148>
 801083a:	6923      	ldr	r3, [r4, #16]
 801083c:	6861      	ldr	r1, [r4, #4]
 801083e:	4299      	cmp	r1, r3
 8010840:	bfde      	ittt	le
 8010842:	2330      	movle	r3, #48	; 0x30
 8010844:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010848:	f105 35ff 	addle.w	r5, r5, #4294967295
 801084c:	1b52      	subs	r2, r2, r5
 801084e:	6122      	str	r2, [r4, #16]
 8010850:	f8cd a000 	str.w	sl, [sp]
 8010854:	464b      	mov	r3, r9
 8010856:	aa03      	add	r2, sp, #12
 8010858:	4621      	mov	r1, r4
 801085a:	4640      	mov	r0, r8
 801085c:	f7ff fee4 	bl	8010628 <_printf_common>
 8010860:	3001      	adds	r0, #1
 8010862:	d14a      	bne.n	80108fa <_printf_i+0x1f6>
 8010864:	f04f 30ff 	mov.w	r0, #4294967295
 8010868:	b004      	add	sp, #16
 801086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801086e:	6823      	ldr	r3, [r4, #0]
 8010870:	f043 0320 	orr.w	r3, r3, #32
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	4833      	ldr	r0, [pc, #204]	; (8010944 <_printf_i+0x240>)
 8010878:	2778      	movs	r7, #120	; 0x78
 801087a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	6829      	ldr	r1, [r5, #0]
 8010882:	061f      	lsls	r7, r3, #24
 8010884:	f851 6b04 	ldr.w	r6, [r1], #4
 8010888:	d402      	bmi.n	8010890 <_printf_i+0x18c>
 801088a:	065f      	lsls	r7, r3, #25
 801088c:	bf48      	it	mi
 801088e:	b2b6      	uxthmi	r6, r6
 8010890:	07df      	lsls	r7, r3, #31
 8010892:	bf48      	it	mi
 8010894:	f043 0320 	orrmi.w	r3, r3, #32
 8010898:	6029      	str	r1, [r5, #0]
 801089a:	bf48      	it	mi
 801089c:	6023      	strmi	r3, [r4, #0]
 801089e:	b91e      	cbnz	r6, 80108a8 <_printf_i+0x1a4>
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	f023 0320 	bic.w	r3, r3, #32
 80108a6:	6023      	str	r3, [r4, #0]
 80108a8:	2310      	movs	r3, #16
 80108aa:	e7a7      	b.n	80107fc <_printf_i+0xf8>
 80108ac:	4824      	ldr	r0, [pc, #144]	; (8010940 <_printf_i+0x23c>)
 80108ae:	e7e4      	b.n	801087a <_printf_i+0x176>
 80108b0:	4615      	mov	r5, r2
 80108b2:	e7bd      	b.n	8010830 <_printf_i+0x12c>
 80108b4:	682b      	ldr	r3, [r5, #0]
 80108b6:	6826      	ldr	r6, [r4, #0]
 80108b8:	6961      	ldr	r1, [r4, #20]
 80108ba:	1d18      	adds	r0, r3, #4
 80108bc:	6028      	str	r0, [r5, #0]
 80108be:	0635      	lsls	r5, r6, #24
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	d501      	bpl.n	80108c8 <_printf_i+0x1c4>
 80108c4:	6019      	str	r1, [r3, #0]
 80108c6:	e002      	b.n	80108ce <_printf_i+0x1ca>
 80108c8:	0670      	lsls	r0, r6, #25
 80108ca:	d5fb      	bpl.n	80108c4 <_printf_i+0x1c0>
 80108cc:	8019      	strh	r1, [r3, #0]
 80108ce:	2300      	movs	r3, #0
 80108d0:	6123      	str	r3, [r4, #16]
 80108d2:	4615      	mov	r5, r2
 80108d4:	e7bc      	b.n	8010850 <_printf_i+0x14c>
 80108d6:	682b      	ldr	r3, [r5, #0]
 80108d8:	1d1a      	adds	r2, r3, #4
 80108da:	602a      	str	r2, [r5, #0]
 80108dc:	681d      	ldr	r5, [r3, #0]
 80108de:	6862      	ldr	r2, [r4, #4]
 80108e0:	2100      	movs	r1, #0
 80108e2:	4628      	mov	r0, r5
 80108e4:	f7ef fc9c 	bl	8000220 <memchr>
 80108e8:	b108      	cbz	r0, 80108ee <_printf_i+0x1ea>
 80108ea:	1b40      	subs	r0, r0, r5
 80108ec:	6060      	str	r0, [r4, #4]
 80108ee:	6863      	ldr	r3, [r4, #4]
 80108f0:	6123      	str	r3, [r4, #16]
 80108f2:	2300      	movs	r3, #0
 80108f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108f8:	e7aa      	b.n	8010850 <_printf_i+0x14c>
 80108fa:	6923      	ldr	r3, [r4, #16]
 80108fc:	462a      	mov	r2, r5
 80108fe:	4649      	mov	r1, r9
 8010900:	4640      	mov	r0, r8
 8010902:	47d0      	blx	sl
 8010904:	3001      	adds	r0, #1
 8010906:	d0ad      	beq.n	8010864 <_printf_i+0x160>
 8010908:	6823      	ldr	r3, [r4, #0]
 801090a:	079b      	lsls	r3, r3, #30
 801090c:	d413      	bmi.n	8010936 <_printf_i+0x232>
 801090e:	68e0      	ldr	r0, [r4, #12]
 8010910:	9b03      	ldr	r3, [sp, #12]
 8010912:	4298      	cmp	r0, r3
 8010914:	bfb8      	it	lt
 8010916:	4618      	movlt	r0, r3
 8010918:	e7a6      	b.n	8010868 <_printf_i+0x164>
 801091a:	2301      	movs	r3, #1
 801091c:	4632      	mov	r2, r6
 801091e:	4649      	mov	r1, r9
 8010920:	4640      	mov	r0, r8
 8010922:	47d0      	blx	sl
 8010924:	3001      	adds	r0, #1
 8010926:	d09d      	beq.n	8010864 <_printf_i+0x160>
 8010928:	3501      	adds	r5, #1
 801092a:	68e3      	ldr	r3, [r4, #12]
 801092c:	9903      	ldr	r1, [sp, #12]
 801092e:	1a5b      	subs	r3, r3, r1
 8010930:	42ab      	cmp	r3, r5
 8010932:	dcf2      	bgt.n	801091a <_printf_i+0x216>
 8010934:	e7eb      	b.n	801090e <_printf_i+0x20a>
 8010936:	2500      	movs	r5, #0
 8010938:	f104 0619 	add.w	r6, r4, #25
 801093c:	e7f5      	b.n	801092a <_printf_i+0x226>
 801093e:	bf00      	nop
 8010940:	08013d23 	.word	0x08013d23
 8010944:	08013d34 	.word	0x08013d34

08010948 <_scanf_float>:
 8010948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	b087      	sub	sp, #28
 801094e:	4617      	mov	r7, r2
 8010950:	9303      	str	r3, [sp, #12]
 8010952:	688b      	ldr	r3, [r1, #8]
 8010954:	1e5a      	subs	r2, r3, #1
 8010956:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801095a:	bf83      	ittte	hi
 801095c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010960:	195b      	addhi	r3, r3, r5
 8010962:	9302      	strhi	r3, [sp, #8]
 8010964:	2300      	movls	r3, #0
 8010966:	bf86      	itte	hi
 8010968:	f240 135d 	movwhi	r3, #349	; 0x15d
 801096c:	608b      	strhi	r3, [r1, #8]
 801096e:	9302      	strls	r3, [sp, #8]
 8010970:	680b      	ldr	r3, [r1, #0]
 8010972:	468b      	mov	fp, r1
 8010974:	2500      	movs	r5, #0
 8010976:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801097a:	f84b 3b1c 	str.w	r3, [fp], #28
 801097e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010982:	4680      	mov	r8, r0
 8010984:	460c      	mov	r4, r1
 8010986:	465e      	mov	r6, fp
 8010988:	46aa      	mov	sl, r5
 801098a:	46a9      	mov	r9, r5
 801098c:	9501      	str	r5, [sp, #4]
 801098e:	68a2      	ldr	r2, [r4, #8]
 8010990:	b152      	cbz	r2, 80109a8 <_scanf_float+0x60>
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	2b4e      	cmp	r3, #78	; 0x4e
 8010998:	d864      	bhi.n	8010a64 <_scanf_float+0x11c>
 801099a:	2b40      	cmp	r3, #64	; 0x40
 801099c:	d83c      	bhi.n	8010a18 <_scanf_float+0xd0>
 801099e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80109a2:	b2c8      	uxtb	r0, r1
 80109a4:	280e      	cmp	r0, #14
 80109a6:	d93a      	bls.n	8010a1e <_scanf_float+0xd6>
 80109a8:	f1b9 0f00 	cmp.w	r9, #0
 80109ac:	d003      	beq.n	80109b6 <_scanf_float+0x6e>
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109ba:	f1ba 0f01 	cmp.w	sl, #1
 80109be:	f200 8113 	bhi.w	8010be8 <_scanf_float+0x2a0>
 80109c2:	455e      	cmp	r6, fp
 80109c4:	f200 8105 	bhi.w	8010bd2 <_scanf_float+0x28a>
 80109c8:	2501      	movs	r5, #1
 80109ca:	4628      	mov	r0, r5
 80109cc:	b007      	add	sp, #28
 80109ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80109d6:	2a0d      	cmp	r2, #13
 80109d8:	d8e6      	bhi.n	80109a8 <_scanf_float+0x60>
 80109da:	a101      	add	r1, pc, #4	; (adr r1, 80109e0 <_scanf_float+0x98>)
 80109dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80109e0:	08010b1f 	.word	0x08010b1f
 80109e4:	080109a9 	.word	0x080109a9
 80109e8:	080109a9 	.word	0x080109a9
 80109ec:	080109a9 	.word	0x080109a9
 80109f0:	08010b7f 	.word	0x08010b7f
 80109f4:	08010b57 	.word	0x08010b57
 80109f8:	080109a9 	.word	0x080109a9
 80109fc:	080109a9 	.word	0x080109a9
 8010a00:	08010b2d 	.word	0x08010b2d
 8010a04:	080109a9 	.word	0x080109a9
 8010a08:	080109a9 	.word	0x080109a9
 8010a0c:	080109a9 	.word	0x080109a9
 8010a10:	080109a9 	.word	0x080109a9
 8010a14:	08010ae5 	.word	0x08010ae5
 8010a18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010a1c:	e7db      	b.n	80109d6 <_scanf_float+0x8e>
 8010a1e:	290e      	cmp	r1, #14
 8010a20:	d8c2      	bhi.n	80109a8 <_scanf_float+0x60>
 8010a22:	a001      	add	r0, pc, #4	; (adr r0, 8010a28 <_scanf_float+0xe0>)
 8010a24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010a28:	08010ad7 	.word	0x08010ad7
 8010a2c:	080109a9 	.word	0x080109a9
 8010a30:	08010ad7 	.word	0x08010ad7
 8010a34:	08010b6b 	.word	0x08010b6b
 8010a38:	080109a9 	.word	0x080109a9
 8010a3c:	08010a85 	.word	0x08010a85
 8010a40:	08010ac1 	.word	0x08010ac1
 8010a44:	08010ac1 	.word	0x08010ac1
 8010a48:	08010ac1 	.word	0x08010ac1
 8010a4c:	08010ac1 	.word	0x08010ac1
 8010a50:	08010ac1 	.word	0x08010ac1
 8010a54:	08010ac1 	.word	0x08010ac1
 8010a58:	08010ac1 	.word	0x08010ac1
 8010a5c:	08010ac1 	.word	0x08010ac1
 8010a60:	08010ac1 	.word	0x08010ac1
 8010a64:	2b6e      	cmp	r3, #110	; 0x6e
 8010a66:	d809      	bhi.n	8010a7c <_scanf_float+0x134>
 8010a68:	2b60      	cmp	r3, #96	; 0x60
 8010a6a:	d8b2      	bhi.n	80109d2 <_scanf_float+0x8a>
 8010a6c:	2b54      	cmp	r3, #84	; 0x54
 8010a6e:	d077      	beq.n	8010b60 <_scanf_float+0x218>
 8010a70:	2b59      	cmp	r3, #89	; 0x59
 8010a72:	d199      	bne.n	80109a8 <_scanf_float+0x60>
 8010a74:	2d07      	cmp	r5, #7
 8010a76:	d197      	bne.n	80109a8 <_scanf_float+0x60>
 8010a78:	2508      	movs	r5, #8
 8010a7a:	e029      	b.n	8010ad0 <_scanf_float+0x188>
 8010a7c:	2b74      	cmp	r3, #116	; 0x74
 8010a7e:	d06f      	beq.n	8010b60 <_scanf_float+0x218>
 8010a80:	2b79      	cmp	r3, #121	; 0x79
 8010a82:	e7f6      	b.n	8010a72 <_scanf_float+0x12a>
 8010a84:	6821      	ldr	r1, [r4, #0]
 8010a86:	05c8      	lsls	r0, r1, #23
 8010a88:	d51a      	bpl.n	8010ac0 <_scanf_float+0x178>
 8010a8a:	9b02      	ldr	r3, [sp, #8]
 8010a8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010a90:	6021      	str	r1, [r4, #0]
 8010a92:	f109 0901 	add.w	r9, r9, #1
 8010a96:	b11b      	cbz	r3, 8010aa0 <_scanf_float+0x158>
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	3201      	adds	r2, #1
 8010a9c:	9302      	str	r3, [sp, #8]
 8010a9e:	60a2      	str	r2, [r4, #8]
 8010aa0:	68a3      	ldr	r3, [r4, #8]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	60a3      	str	r3, [r4, #8]
 8010aa6:	6923      	ldr	r3, [r4, #16]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	6123      	str	r3, [r4, #16]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	607b      	str	r3, [r7, #4]
 8010ab4:	f340 8084 	ble.w	8010bc0 <_scanf_float+0x278>
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	3301      	adds	r3, #1
 8010abc:	603b      	str	r3, [r7, #0]
 8010abe:	e766      	b.n	801098e <_scanf_float+0x46>
 8010ac0:	eb1a 0f05 	cmn.w	sl, r5
 8010ac4:	f47f af70 	bne.w	80109a8 <_scanf_float+0x60>
 8010ac8:	6822      	ldr	r2, [r4, #0]
 8010aca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010ace:	6022      	str	r2, [r4, #0]
 8010ad0:	f806 3b01 	strb.w	r3, [r6], #1
 8010ad4:	e7e4      	b.n	8010aa0 <_scanf_float+0x158>
 8010ad6:	6822      	ldr	r2, [r4, #0]
 8010ad8:	0610      	lsls	r0, r2, #24
 8010ada:	f57f af65 	bpl.w	80109a8 <_scanf_float+0x60>
 8010ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ae2:	e7f4      	b.n	8010ace <_scanf_float+0x186>
 8010ae4:	f1ba 0f00 	cmp.w	sl, #0
 8010ae8:	d10e      	bne.n	8010b08 <_scanf_float+0x1c0>
 8010aea:	f1b9 0f00 	cmp.w	r9, #0
 8010aee:	d10e      	bne.n	8010b0e <_scanf_float+0x1c6>
 8010af0:	6822      	ldr	r2, [r4, #0]
 8010af2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010af6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010afa:	d108      	bne.n	8010b0e <_scanf_float+0x1c6>
 8010afc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b00:	6022      	str	r2, [r4, #0]
 8010b02:	f04f 0a01 	mov.w	sl, #1
 8010b06:	e7e3      	b.n	8010ad0 <_scanf_float+0x188>
 8010b08:	f1ba 0f02 	cmp.w	sl, #2
 8010b0c:	d055      	beq.n	8010bba <_scanf_float+0x272>
 8010b0e:	2d01      	cmp	r5, #1
 8010b10:	d002      	beq.n	8010b18 <_scanf_float+0x1d0>
 8010b12:	2d04      	cmp	r5, #4
 8010b14:	f47f af48 	bne.w	80109a8 <_scanf_float+0x60>
 8010b18:	3501      	adds	r5, #1
 8010b1a:	b2ed      	uxtb	r5, r5
 8010b1c:	e7d8      	b.n	8010ad0 <_scanf_float+0x188>
 8010b1e:	f1ba 0f01 	cmp.w	sl, #1
 8010b22:	f47f af41 	bne.w	80109a8 <_scanf_float+0x60>
 8010b26:	f04f 0a02 	mov.w	sl, #2
 8010b2a:	e7d1      	b.n	8010ad0 <_scanf_float+0x188>
 8010b2c:	b97d      	cbnz	r5, 8010b4e <_scanf_float+0x206>
 8010b2e:	f1b9 0f00 	cmp.w	r9, #0
 8010b32:	f47f af3c 	bne.w	80109ae <_scanf_float+0x66>
 8010b36:	6822      	ldr	r2, [r4, #0]
 8010b38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010b3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010b40:	f47f af39 	bne.w	80109b6 <_scanf_float+0x6e>
 8010b44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b48:	6022      	str	r2, [r4, #0]
 8010b4a:	2501      	movs	r5, #1
 8010b4c:	e7c0      	b.n	8010ad0 <_scanf_float+0x188>
 8010b4e:	2d03      	cmp	r5, #3
 8010b50:	d0e2      	beq.n	8010b18 <_scanf_float+0x1d0>
 8010b52:	2d05      	cmp	r5, #5
 8010b54:	e7de      	b.n	8010b14 <_scanf_float+0x1cc>
 8010b56:	2d02      	cmp	r5, #2
 8010b58:	f47f af26 	bne.w	80109a8 <_scanf_float+0x60>
 8010b5c:	2503      	movs	r5, #3
 8010b5e:	e7b7      	b.n	8010ad0 <_scanf_float+0x188>
 8010b60:	2d06      	cmp	r5, #6
 8010b62:	f47f af21 	bne.w	80109a8 <_scanf_float+0x60>
 8010b66:	2507      	movs	r5, #7
 8010b68:	e7b2      	b.n	8010ad0 <_scanf_float+0x188>
 8010b6a:	6822      	ldr	r2, [r4, #0]
 8010b6c:	0591      	lsls	r1, r2, #22
 8010b6e:	f57f af1b 	bpl.w	80109a8 <_scanf_float+0x60>
 8010b72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010b76:	6022      	str	r2, [r4, #0]
 8010b78:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b7c:	e7a8      	b.n	8010ad0 <_scanf_float+0x188>
 8010b7e:	6822      	ldr	r2, [r4, #0]
 8010b80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010b84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010b88:	d006      	beq.n	8010b98 <_scanf_float+0x250>
 8010b8a:	0550      	lsls	r0, r2, #21
 8010b8c:	f57f af0c 	bpl.w	80109a8 <_scanf_float+0x60>
 8010b90:	f1b9 0f00 	cmp.w	r9, #0
 8010b94:	f43f af0f 	beq.w	80109b6 <_scanf_float+0x6e>
 8010b98:	0591      	lsls	r1, r2, #22
 8010b9a:	bf58      	it	pl
 8010b9c:	9901      	ldrpl	r1, [sp, #4]
 8010b9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010ba2:	bf58      	it	pl
 8010ba4:	eba9 0101 	subpl.w	r1, r9, r1
 8010ba8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010bac:	bf58      	it	pl
 8010bae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010bb2:	6022      	str	r2, [r4, #0]
 8010bb4:	f04f 0900 	mov.w	r9, #0
 8010bb8:	e78a      	b.n	8010ad0 <_scanf_float+0x188>
 8010bba:	f04f 0a03 	mov.w	sl, #3
 8010bbe:	e787      	b.n	8010ad0 <_scanf_float+0x188>
 8010bc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010bc4:	4639      	mov	r1, r7
 8010bc6:	4640      	mov	r0, r8
 8010bc8:	4798      	blx	r3
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	f43f aedf 	beq.w	801098e <_scanf_float+0x46>
 8010bd0:	e6ea      	b.n	80109a8 <_scanf_float+0x60>
 8010bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010bda:	463a      	mov	r2, r7
 8010bdc:	4640      	mov	r0, r8
 8010bde:	4798      	blx	r3
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	6123      	str	r3, [r4, #16]
 8010be6:	e6ec      	b.n	80109c2 <_scanf_float+0x7a>
 8010be8:	1e6b      	subs	r3, r5, #1
 8010bea:	2b06      	cmp	r3, #6
 8010bec:	d825      	bhi.n	8010c3a <_scanf_float+0x2f2>
 8010bee:	2d02      	cmp	r5, #2
 8010bf0:	d836      	bhi.n	8010c60 <_scanf_float+0x318>
 8010bf2:	455e      	cmp	r6, fp
 8010bf4:	f67f aee8 	bls.w	80109c8 <_scanf_float+0x80>
 8010bf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bfc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010c00:	463a      	mov	r2, r7
 8010c02:	4640      	mov	r0, r8
 8010c04:	4798      	blx	r3
 8010c06:	6923      	ldr	r3, [r4, #16]
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	6123      	str	r3, [r4, #16]
 8010c0c:	e7f1      	b.n	8010bf2 <_scanf_float+0x2aa>
 8010c0e:	9802      	ldr	r0, [sp, #8]
 8010c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010c18:	9002      	str	r0, [sp, #8]
 8010c1a:	463a      	mov	r2, r7
 8010c1c:	4640      	mov	r0, r8
 8010c1e:	4798      	blx	r3
 8010c20:	6923      	ldr	r3, [r4, #16]
 8010c22:	3b01      	subs	r3, #1
 8010c24:	6123      	str	r3, [r4, #16]
 8010c26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c2a:	fa5f fa8a 	uxtb.w	sl, sl
 8010c2e:	f1ba 0f02 	cmp.w	sl, #2
 8010c32:	d1ec      	bne.n	8010c0e <_scanf_float+0x2c6>
 8010c34:	3d03      	subs	r5, #3
 8010c36:	b2ed      	uxtb	r5, r5
 8010c38:	1b76      	subs	r6, r6, r5
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	05da      	lsls	r2, r3, #23
 8010c3e:	d52f      	bpl.n	8010ca0 <_scanf_float+0x358>
 8010c40:	055b      	lsls	r3, r3, #21
 8010c42:	d510      	bpl.n	8010c66 <_scanf_float+0x31e>
 8010c44:	455e      	cmp	r6, fp
 8010c46:	f67f aebf 	bls.w	80109c8 <_scanf_float+0x80>
 8010c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010c52:	463a      	mov	r2, r7
 8010c54:	4640      	mov	r0, r8
 8010c56:	4798      	blx	r3
 8010c58:	6923      	ldr	r3, [r4, #16]
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	6123      	str	r3, [r4, #16]
 8010c5e:	e7f1      	b.n	8010c44 <_scanf_float+0x2fc>
 8010c60:	46aa      	mov	sl, r5
 8010c62:	9602      	str	r6, [sp, #8]
 8010c64:	e7df      	b.n	8010c26 <_scanf_float+0x2de>
 8010c66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010c6a:	6923      	ldr	r3, [r4, #16]
 8010c6c:	2965      	cmp	r1, #101	; 0x65
 8010c6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c72:	f106 35ff 	add.w	r5, r6, #4294967295
 8010c76:	6123      	str	r3, [r4, #16]
 8010c78:	d00c      	beq.n	8010c94 <_scanf_float+0x34c>
 8010c7a:	2945      	cmp	r1, #69	; 0x45
 8010c7c:	d00a      	beq.n	8010c94 <_scanf_float+0x34c>
 8010c7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c82:	463a      	mov	r2, r7
 8010c84:	4640      	mov	r0, r8
 8010c86:	4798      	blx	r3
 8010c88:	6923      	ldr	r3, [r4, #16]
 8010c8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	1eb5      	subs	r5, r6, #2
 8010c92:	6123      	str	r3, [r4, #16]
 8010c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c98:	463a      	mov	r2, r7
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	4798      	blx	r3
 8010c9e:	462e      	mov	r6, r5
 8010ca0:	6825      	ldr	r5, [r4, #0]
 8010ca2:	f015 0510 	ands.w	r5, r5, #16
 8010ca6:	d158      	bne.n	8010d5a <_scanf_float+0x412>
 8010ca8:	7035      	strb	r5, [r6, #0]
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cb4:	d11c      	bne.n	8010cf0 <_scanf_float+0x3a8>
 8010cb6:	9b01      	ldr	r3, [sp, #4]
 8010cb8:	454b      	cmp	r3, r9
 8010cba:	eba3 0209 	sub.w	r2, r3, r9
 8010cbe:	d124      	bne.n	8010d0a <_scanf_float+0x3c2>
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	4659      	mov	r1, fp
 8010cc4:	4640      	mov	r0, r8
 8010cc6:	f7ff f8df 	bl	800fe88 <_strtod_r>
 8010cca:	9b03      	ldr	r3, [sp, #12]
 8010ccc:	6821      	ldr	r1, [r4, #0]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f011 0f02 	tst.w	r1, #2
 8010cd4:	ec57 6b10 	vmov	r6, r7, d0
 8010cd8:	f103 0204 	add.w	r2, r3, #4
 8010cdc:	d020      	beq.n	8010d20 <_scanf_float+0x3d8>
 8010cde:	9903      	ldr	r1, [sp, #12]
 8010ce0:	600a      	str	r2, [r1, #0]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	e9c3 6700 	strd	r6, r7, [r3]
 8010ce8:	68e3      	ldr	r3, [r4, #12]
 8010cea:	3301      	adds	r3, #1
 8010cec:	60e3      	str	r3, [r4, #12]
 8010cee:	e66c      	b.n	80109ca <_scanf_float+0x82>
 8010cf0:	9b04      	ldr	r3, [sp, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d0e4      	beq.n	8010cc0 <_scanf_float+0x378>
 8010cf6:	9905      	ldr	r1, [sp, #20]
 8010cf8:	230a      	movs	r3, #10
 8010cfa:	462a      	mov	r2, r5
 8010cfc:	3101      	adds	r1, #1
 8010cfe:	4640      	mov	r0, r8
 8010d00:	f7ff f9b0 	bl	8010064 <_strtol_r>
 8010d04:	9b04      	ldr	r3, [sp, #16]
 8010d06:	9e05      	ldr	r6, [sp, #20]
 8010d08:	1ac2      	subs	r2, r0, r3
 8010d0a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010d0e:	429e      	cmp	r6, r3
 8010d10:	bf28      	it	cs
 8010d12:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010d16:	4912      	ldr	r1, [pc, #72]	; (8010d60 <_scanf_float+0x418>)
 8010d18:	4630      	mov	r0, r6
 8010d1a:	f000 f91b 	bl	8010f54 <siprintf>
 8010d1e:	e7cf      	b.n	8010cc0 <_scanf_float+0x378>
 8010d20:	f011 0f04 	tst.w	r1, #4
 8010d24:	9903      	ldr	r1, [sp, #12]
 8010d26:	600a      	str	r2, [r1, #0]
 8010d28:	d1db      	bne.n	8010ce2 <_scanf_float+0x39a>
 8010d2a:	f8d3 8000 	ldr.w	r8, [r3]
 8010d2e:	ee10 2a10 	vmov	r2, s0
 8010d32:	ee10 0a10 	vmov	r0, s0
 8010d36:	463b      	mov	r3, r7
 8010d38:	4639      	mov	r1, r7
 8010d3a:	f7ef ff1f 	bl	8000b7c <__aeabi_dcmpun>
 8010d3e:	b128      	cbz	r0, 8010d4c <_scanf_float+0x404>
 8010d40:	4808      	ldr	r0, [pc, #32]	; (8010d64 <_scanf_float+0x41c>)
 8010d42:	f000 fa9d 	bl	8011280 <nanf>
 8010d46:	ed88 0a00 	vstr	s0, [r8]
 8010d4a:	e7cd      	b.n	8010ce8 <_scanf_float+0x3a0>
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	4639      	mov	r1, r7
 8010d50:	f7ef ff72 	bl	8000c38 <__aeabi_d2f>
 8010d54:	f8c8 0000 	str.w	r0, [r8]
 8010d58:	e7c6      	b.n	8010ce8 <_scanf_float+0x3a0>
 8010d5a:	2500      	movs	r5, #0
 8010d5c:	e635      	b.n	80109ca <_scanf_float+0x82>
 8010d5e:	bf00      	nop
 8010d60:	08013d45 	.word	0x08013d45
 8010d64:	08013dfe 	.word	0x08013dfe

08010d68 <std>:
 8010d68:	2300      	movs	r3, #0
 8010d6a:	b510      	push	{r4, lr}
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d76:	6083      	str	r3, [r0, #8]
 8010d78:	8181      	strh	r1, [r0, #12]
 8010d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8010d7c:	81c2      	strh	r2, [r0, #14]
 8010d7e:	6183      	str	r3, [r0, #24]
 8010d80:	4619      	mov	r1, r3
 8010d82:	2208      	movs	r2, #8
 8010d84:	305c      	adds	r0, #92	; 0x5c
 8010d86:	f000 f948 	bl	801101a <memset>
 8010d8a:	4b0d      	ldr	r3, [pc, #52]	; (8010dc0 <std+0x58>)
 8010d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d8e:	4b0d      	ldr	r3, [pc, #52]	; (8010dc4 <std+0x5c>)
 8010d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d92:	4b0d      	ldr	r3, [pc, #52]	; (8010dc8 <std+0x60>)
 8010d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d96:	4b0d      	ldr	r3, [pc, #52]	; (8010dcc <std+0x64>)
 8010d98:	6323      	str	r3, [r4, #48]	; 0x30
 8010d9a:	4b0d      	ldr	r3, [pc, #52]	; (8010dd0 <std+0x68>)
 8010d9c:	6224      	str	r4, [r4, #32]
 8010d9e:	429c      	cmp	r4, r3
 8010da0:	d006      	beq.n	8010db0 <std+0x48>
 8010da2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010da6:	4294      	cmp	r4, r2
 8010da8:	d002      	beq.n	8010db0 <std+0x48>
 8010daa:	33d0      	adds	r3, #208	; 0xd0
 8010dac:	429c      	cmp	r4, r3
 8010dae:	d105      	bne.n	8010dbc <std+0x54>
 8010db0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010db8:	f000 ba40 	b.w	801123c <__retarget_lock_init_recursive>
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	bf00      	nop
 8010dc0:	08010f95 	.word	0x08010f95
 8010dc4:	08010fb7 	.word	0x08010fb7
 8010dc8:	08010fef 	.word	0x08010fef
 8010dcc:	08011013 	.word	0x08011013
 8010dd0:	20001dbc 	.word	0x20001dbc

08010dd4 <stdio_exit_handler>:
 8010dd4:	4a02      	ldr	r2, [pc, #8]	; (8010de0 <stdio_exit_handler+0xc>)
 8010dd6:	4903      	ldr	r1, [pc, #12]	; (8010de4 <stdio_exit_handler+0x10>)
 8010dd8:	4803      	ldr	r0, [pc, #12]	; (8010de8 <stdio_exit_handler+0x14>)
 8010dda:	f000 b869 	b.w	8010eb0 <_fwalk_sglue>
 8010dde:	bf00      	nop
 8010de0:	20000184 	.word	0x20000184
 8010de4:	08013459 	.word	0x08013459
 8010de8:	200002fc 	.word	0x200002fc

08010dec <cleanup_stdio>:
 8010dec:	6841      	ldr	r1, [r0, #4]
 8010dee:	4b0c      	ldr	r3, [pc, #48]	; (8010e20 <cleanup_stdio+0x34>)
 8010df0:	4299      	cmp	r1, r3
 8010df2:	b510      	push	{r4, lr}
 8010df4:	4604      	mov	r4, r0
 8010df6:	d001      	beq.n	8010dfc <cleanup_stdio+0x10>
 8010df8:	f002 fb2e 	bl	8013458 <_fflush_r>
 8010dfc:	68a1      	ldr	r1, [r4, #8]
 8010dfe:	4b09      	ldr	r3, [pc, #36]	; (8010e24 <cleanup_stdio+0x38>)
 8010e00:	4299      	cmp	r1, r3
 8010e02:	d002      	beq.n	8010e0a <cleanup_stdio+0x1e>
 8010e04:	4620      	mov	r0, r4
 8010e06:	f002 fb27 	bl	8013458 <_fflush_r>
 8010e0a:	68e1      	ldr	r1, [r4, #12]
 8010e0c:	4b06      	ldr	r3, [pc, #24]	; (8010e28 <cleanup_stdio+0x3c>)
 8010e0e:	4299      	cmp	r1, r3
 8010e10:	d004      	beq.n	8010e1c <cleanup_stdio+0x30>
 8010e12:	4620      	mov	r0, r4
 8010e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e18:	f002 bb1e 	b.w	8013458 <_fflush_r>
 8010e1c:	bd10      	pop	{r4, pc}
 8010e1e:	bf00      	nop
 8010e20:	20001dbc 	.word	0x20001dbc
 8010e24:	20001e24 	.word	0x20001e24
 8010e28:	20001e8c 	.word	0x20001e8c

08010e2c <global_stdio_init.part.0>:
 8010e2c:	b510      	push	{r4, lr}
 8010e2e:	4b0b      	ldr	r3, [pc, #44]	; (8010e5c <global_stdio_init.part.0+0x30>)
 8010e30:	4c0b      	ldr	r4, [pc, #44]	; (8010e60 <global_stdio_init.part.0+0x34>)
 8010e32:	4a0c      	ldr	r2, [pc, #48]	; (8010e64 <global_stdio_init.part.0+0x38>)
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	4620      	mov	r0, r4
 8010e38:	2200      	movs	r2, #0
 8010e3a:	2104      	movs	r1, #4
 8010e3c:	f7ff ff94 	bl	8010d68 <std>
 8010e40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010e44:	2201      	movs	r2, #1
 8010e46:	2109      	movs	r1, #9
 8010e48:	f7ff ff8e 	bl	8010d68 <std>
 8010e4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010e50:	2202      	movs	r2, #2
 8010e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e56:	2112      	movs	r1, #18
 8010e58:	f7ff bf86 	b.w	8010d68 <std>
 8010e5c:	20001ef4 	.word	0x20001ef4
 8010e60:	20001dbc 	.word	0x20001dbc
 8010e64:	08010dd5 	.word	0x08010dd5

08010e68 <__sfp_lock_acquire>:
 8010e68:	4801      	ldr	r0, [pc, #4]	; (8010e70 <__sfp_lock_acquire+0x8>)
 8010e6a:	f000 b9e8 	b.w	801123e <__retarget_lock_acquire_recursive>
 8010e6e:	bf00      	nop
 8010e70:	20001efd 	.word	0x20001efd

08010e74 <__sfp_lock_release>:
 8010e74:	4801      	ldr	r0, [pc, #4]	; (8010e7c <__sfp_lock_release+0x8>)
 8010e76:	f000 b9e3 	b.w	8011240 <__retarget_lock_release_recursive>
 8010e7a:	bf00      	nop
 8010e7c:	20001efd 	.word	0x20001efd

08010e80 <__sinit>:
 8010e80:	b510      	push	{r4, lr}
 8010e82:	4604      	mov	r4, r0
 8010e84:	f7ff fff0 	bl	8010e68 <__sfp_lock_acquire>
 8010e88:	6a23      	ldr	r3, [r4, #32]
 8010e8a:	b11b      	cbz	r3, 8010e94 <__sinit+0x14>
 8010e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e90:	f7ff bff0 	b.w	8010e74 <__sfp_lock_release>
 8010e94:	4b04      	ldr	r3, [pc, #16]	; (8010ea8 <__sinit+0x28>)
 8010e96:	6223      	str	r3, [r4, #32]
 8010e98:	4b04      	ldr	r3, [pc, #16]	; (8010eac <__sinit+0x2c>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1f5      	bne.n	8010e8c <__sinit+0xc>
 8010ea0:	f7ff ffc4 	bl	8010e2c <global_stdio_init.part.0>
 8010ea4:	e7f2      	b.n	8010e8c <__sinit+0xc>
 8010ea6:	bf00      	nop
 8010ea8:	08010ded 	.word	0x08010ded
 8010eac:	20001ef4 	.word	0x20001ef4

08010eb0 <_fwalk_sglue>:
 8010eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb4:	4607      	mov	r7, r0
 8010eb6:	4688      	mov	r8, r1
 8010eb8:	4614      	mov	r4, r2
 8010eba:	2600      	movs	r6, #0
 8010ebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8010ec4:	d505      	bpl.n	8010ed2 <_fwalk_sglue+0x22>
 8010ec6:	6824      	ldr	r4, [r4, #0]
 8010ec8:	2c00      	cmp	r4, #0
 8010eca:	d1f7      	bne.n	8010ebc <_fwalk_sglue+0xc>
 8010ecc:	4630      	mov	r0, r6
 8010ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ed2:	89ab      	ldrh	r3, [r5, #12]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d907      	bls.n	8010ee8 <_fwalk_sglue+0x38>
 8010ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010edc:	3301      	adds	r3, #1
 8010ede:	d003      	beq.n	8010ee8 <_fwalk_sglue+0x38>
 8010ee0:	4629      	mov	r1, r5
 8010ee2:	4638      	mov	r0, r7
 8010ee4:	47c0      	blx	r8
 8010ee6:	4306      	orrs	r6, r0
 8010ee8:	3568      	adds	r5, #104	; 0x68
 8010eea:	e7e9      	b.n	8010ec0 <_fwalk_sglue+0x10>

08010eec <sniprintf>:
 8010eec:	b40c      	push	{r2, r3}
 8010eee:	b530      	push	{r4, r5, lr}
 8010ef0:	4b17      	ldr	r3, [pc, #92]	; (8010f50 <sniprintf+0x64>)
 8010ef2:	1e0c      	subs	r4, r1, #0
 8010ef4:	681d      	ldr	r5, [r3, #0]
 8010ef6:	b09d      	sub	sp, #116	; 0x74
 8010ef8:	da08      	bge.n	8010f0c <sniprintf+0x20>
 8010efa:	238b      	movs	r3, #139	; 0x8b
 8010efc:	602b      	str	r3, [r5, #0]
 8010efe:	f04f 30ff 	mov.w	r0, #4294967295
 8010f02:	b01d      	add	sp, #116	; 0x74
 8010f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f08:	b002      	add	sp, #8
 8010f0a:	4770      	bx	lr
 8010f0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010f14:	bf14      	ite	ne
 8010f16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010f1a:	4623      	moveq	r3, r4
 8010f1c:	9304      	str	r3, [sp, #16]
 8010f1e:	9307      	str	r3, [sp, #28]
 8010f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f24:	9002      	str	r0, [sp, #8]
 8010f26:	9006      	str	r0, [sp, #24]
 8010f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010f2e:	ab21      	add	r3, sp, #132	; 0x84
 8010f30:	a902      	add	r1, sp, #8
 8010f32:	4628      	mov	r0, r5
 8010f34:	9301      	str	r3, [sp, #4]
 8010f36:	f002 f90b 	bl	8013150 <_svfiprintf_r>
 8010f3a:	1c43      	adds	r3, r0, #1
 8010f3c:	bfbc      	itt	lt
 8010f3e:	238b      	movlt	r3, #139	; 0x8b
 8010f40:	602b      	strlt	r3, [r5, #0]
 8010f42:	2c00      	cmp	r4, #0
 8010f44:	d0dd      	beq.n	8010f02 <sniprintf+0x16>
 8010f46:	9b02      	ldr	r3, [sp, #8]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	701a      	strb	r2, [r3, #0]
 8010f4c:	e7d9      	b.n	8010f02 <sniprintf+0x16>
 8010f4e:	bf00      	nop
 8010f50:	20000348 	.word	0x20000348

08010f54 <siprintf>:
 8010f54:	b40e      	push	{r1, r2, r3}
 8010f56:	b500      	push	{lr}
 8010f58:	b09c      	sub	sp, #112	; 0x70
 8010f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8010f5c:	9002      	str	r0, [sp, #8]
 8010f5e:	9006      	str	r0, [sp, #24]
 8010f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f64:	4809      	ldr	r0, [pc, #36]	; (8010f8c <siprintf+0x38>)
 8010f66:	9107      	str	r1, [sp, #28]
 8010f68:	9104      	str	r1, [sp, #16]
 8010f6a:	4909      	ldr	r1, [pc, #36]	; (8010f90 <siprintf+0x3c>)
 8010f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f70:	9105      	str	r1, [sp, #20]
 8010f72:	6800      	ldr	r0, [r0, #0]
 8010f74:	9301      	str	r3, [sp, #4]
 8010f76:	a902      	add	r1, sp, #8
 8010f78:	f002 f8ea 	bl	8013150 <_svfiprintf_r>
 8010f7c:	9b02      	ldr	r3, [sp, #8]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	701a      	strb	r2, [r3, #0]
 8010f82:	b01c      	add	sp, #112	; 0x70
 8010f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f88:	b003      	add	sp, #12
 8010f8a:	4770      	bx	lr
 8010f8c:	20000348 	.word	0x20000348
 8010f90:	ffff0208 	.word	0xffff0208

08010f94 <__sread>:
 8010f94:	b510      	push	{r4, lr}
 8010f96:	460c      	mov	r4, r1
 8010f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f9c:	f000 f8f0 	bl	8011180 <_read_r>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	bfab      	itete	ge
 8010fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8010fa8:	181b      	addge	r3, r3, r0
 8010faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010fae:	bfac      	ite	ge
 8010fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010fb2:	81a3      	strhlt	r3, [r4, #12]
 8010fb4:	bd10      	pop	{r4, pc}

08010fb6 <__swrite>:
 8010fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	461f      	mov	r7, r3
 8010fbc:	898b      	ldrh	r3, [r1, #12]
 8010fbe:	05db      	lsls	r3, r3, #23
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	4616      	mov	r6, r2
 8010fc6:	d505      	bpl.n	8010fd4 <__swrite+0x1e>
 8010fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fcc:	2302      	movs	r3, #2
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f000 f8c4 	bl	801115c <_lseek_r>
 8010fd4:	89a3      	ldrh	r3, [r4, #12]
 8010fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fde:	81a3      	strh	r3, [r4, #12]
 8010fe0:	4632      	mov	r2, r6
 8010fe2:	463b      	mov	r3, r7
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fea:	f000 b8eb 	b.w	80111c4 <_write_r>

08010fee <__sseek>:
 8010fee:	b510      	push	{r4, lr}
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ff6:	f000 f8b1 	bl	801115c <_lseek_r>
 8010ffa:	1c43      	adds	r3, r0, #1
 8010ffc:	89a3      	ldrh	r3, [r4, #12]
 8010ffe:	bf15      	itete	ne
 8011000:	6560      	strne	r0, [r4, #84]	; 0x54
 8011002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801100a:	81a3      	strheq	r3, [r4, #12]
 801100c:	bf18      	it	ne
 801100e:	81a3      	strhne	r3, [r4, #12]
 8011010:	bd10      	pop	{r4, pc}

08011012 <__sclose>:
 8011012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011016:	f000 b891 	b.w	801113c <_close_r>

0801101a <memset>:
 801101a:	4402      	add	r2, r0
 801101c:	4603      	mov	r3, r0
 801101e:	4293      	cmp	r3, r2
 8011020:	d100      	bne.n	8011024 <memset+0xa>
 8011022:	4770      	bx	lr
 8011024:	f803 1b01 	strb.w	r1, [r3], #1
 8011028:	e7f9      	b.n	801101e <memset+0x4>

0801102a <strncmp>:
 801102a:	b510      	push	{r4, lr}
 801102c:	b16a      	cbz	r2, 801104a <strncmp+0x20>
 801102e:	3901      	subs	r1, #1
 8011030:	1884      	adds	r4, r0, r2
 8011032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011036:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801103a:	429a      	cmp	r2, r3
 801103c:	d103      	bne.n	8011046 <strncmp+0x1c>
 801103e:	42a0      	cmp	r0, r4
 8011040:	d001      	beq.n	8011046 <strncmp+0x1c>
 8011042:	2a00      	cmp	r2, #0
 8011044:	d1f5      	bne.n	8011032 <strncmp+0x8>
 8011046:	1ad0      	subs	r0, r2, r3
 8011048:	bd10      	pop	{r4, pc}
 801104a:	4610      	mov	r0, r2
 801104c:	e7fc      	b.n	8011048 <strncmp+0x1e>
	...

08011050 <strtok>:
 8011050:	4b16      	ldr	r3, [pc, #88]	; (80110ac <strtok+0x5c>)
 8011052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011054:	681e      	ldr	r6, [r3, #0]
 8011056:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011058:	4605      	mov	r5, r0
 801105a:	b9fc      	cbnz	r4, 801109c <strtok+0x4c>
 801105c:	2050      	movs	r0, #80	; 0x50
 801105e:	9101      	str	r1, [sp, #4]
 8011060:	f7fe f84a 	bl	800f0f8 <malloc>
 8011064:	9901      	ldr	r1, [sp, #4]
 8011066:	6470      	str	r0, [r6, #68]	; 0x44
 8011068:	4602      	mov	r2, r0
 801106a:	b920      	cbnz	r0, 8011076 <strtok+0x26>
 801106c:	4b10      	ldr	r3, [pc, #64]	; (80110b0 <strtok+0x60>)
 801106e:	4811      	ldr	r0, [pc, #68]	; (80110b4 <strtok+0x64>)
 8011070:	215b      	movs	r1, #91	; 0x5b
 8011072:	f000 f90b 	bl	801128c <__assert_func>
 8011076:	e9c0 4400 	strd	r4, r4, [r0]
 801107a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801107e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011082:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011086:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801108a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801108e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011092:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011096:	6184      	str	r4, [r0, #24]
 8011098:	7704      	strb	r4, [r0, #28]
 801109a:	6244      	str	r4, [r0, #36]	; 0x24
 801109c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801109e:	2301      	movs	r3, #1
 80110a0:	4628      	mov	r0, r5
 80110a2:	b002      	add	sp, #8
 80110a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110a8:	f000 b806 	b.w	80110b8 <__strtok_r>
 80110ac:	20000348 	.word	0x20000348
 80110b0:	08013d4a 	.word	0x08013d4a
 80110b4:	08013d61 	.word	0x08013d61

080110b8 <__strtok_r>:
 80110b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ba:	b908      	cbnz	r0, 80110c0 <__strtok_r+0x8>
 80110bc:	6810      	ldr	r0, [r2, #0]
 80110be:	b188      	cbz	r0, 80110e4 <__strtok_r+0x2c>
 80110c0:	4604      	mov	r4, r0
 80110c2:	4620      	mov	r0, r4
 80110c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80110c8:	460f      	mov	r7, r1
 80110ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80110ce:	b91e      	cbnz	r6, 80110d8 <__strtok_r+0x20>
 80110d0:	b965      	cbnz	r5, 80110ec <__strtok_r+0x34>
 80110d2:	6015      	str	r5, [r2, #0]
 80110d4:	4628      	mov	r0, r5
 80110d6:	e005      	b.n	80110e4 <__strtok_r+0x2c>
 80110d8:	42b5      	cmp	r5, r6
 80110da:	d1f6      	bne.n	80110ca <__strtok_r+0x12>
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1f0      	bne.n	80110c2 <__strtok_r+0xa>
 80110e0:	6014      	str	r4, [r2, #0]
 80110e2:	7003      	strb	r3, [r0, #0]
 80110e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e6:	461c      	mov	r4, r3
 80110e8:	e00c      	b.n	8011104 <__strtok_r+0x4c>
 80110ea:	b915      	cbnz	r5, 80110f2 <__strtok_r+0x3a>
 80110ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80110f0:	460e      	mov	r6, r1
 80110f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80110f6:	42ab      	cmp	r3, r5
 80110f8:	d1f7      	bne.n	80110ea <__strtok_r+0x32>
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d0f3      	beq.n	80110e6 <__strtok_r+0x2e>
 80110fe:	2300      	movs	r3, #0
 8011100:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011104:	6014      	str	r4, [r2, #0]
 8011106:	e7ed      	b.n	80110e4 <__strtok_r+0x2c>

08011108 <strstr>:
 8011108:	780a      	ldrb	r2, [r1, #0]
 801110a:	b570      	push	{r4, r5, r6, lr}
 801110c:	b96a      	cbnz	r2, 801112a <strstr+0x22>
 801110e:	bd70      	pop	{r4, r5, r6, pc}
 8011110:	429a      	cmp	r2, r3
 8011112:	d109      	bne.n	8011128 <strstr+0x20>
 8011114:	460c      	mov	r4, r1
 8011116:	4605      	mov	r5, r0
 8011118:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801111c:	2b00      	cmp	r3, #0
 801111e:	d0f6      	beq.n	801110e <strstr+0x6>
 8011120:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011124:	429e      	cmp	r6, r3
 8011126:	d0f7      	beq.n	8011118 <strstr+0x10>
 8011128:	3001      	adds	r0, #1
 801112a:	7803      	ldrb	r3, [r0, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d1ef      	bne.n	8011110 <strstr+0x8>
 8011130:	4618      	mov	r0, r3
 8011132:	e7ec      	b.n	801110e <strstr+0x6>

08011134 <_localeconv_r>:
 8011134:	4800      	ldr	r0, [pc, #0]	; (8011138 <_localeconv_r+0x4>)
 8011136:	4770      	bx	lr
 8011138:	20000280 	.word	0x20000280

0801113c <_close_r>:
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	4d06      	ldr	r5, [pc, #24]	; (8011158 <_close_r+0x1c>)
 8011140:	2300      	movs	r3, #0
 8011142:	4604      	mov	r4, r0
 8011144:	4608      	mov	r0, r1
 8011146:	602b      	str	r3, [r5, #0]
 8011148:	f7f1 f847 	bl	80021da <_close>
 801114c:	1c43      	adds	r3, r0, #1
 801114e:	d102      	bne.n	8011156 <_close_r+0x1a>
 8011150:	682b      	ldr	r3, [r5, #0]
 8011152:	b103      	cbz	r3, 8011156 <_close_r+0x1a>
 8011154:	6023      	str	r3, [r4, #0]
 8011156:	bd38      	pop	{r3, r4, r5, pc}
 8011158:	20001ef8 	.word	0x20001ef8

0801115c <_lseek_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4d07      	ldr	r5, [pc, #28]	; (801117c <_lseek_r+0x20>)
 8011160:	4604      	mov	r4, r0
 8011162:	4608      	mov	r0, r1
 8011164:	4611      	mov	r1, r2
 8011166:	2200      	movs	r2, #0
 8011168:	602a      	str	r2, [r5, #0]
 801116a:	461a      	mov	r2, r3
 801116c:	f7f1 f85c 	bl	8002228 <_lseek>
 8011170:	1c43      	adds	r3, r0, #1
 8011172:	d102      	bne.n	801117a <_lseek_r+0x1e>
 8011174:	682b      	ldr	r3, [r5, #0]
 8011176:	b103      	cbz	r3, 801117a <_lseek_r+0x1e>
 8011178:	6023      	str	r3, [r4, #0]
 801117a:	bd38      	pop	{r3, r4, r5, pc}
 801117c:	20001ef8 	.word	0x20001ef8

08011180 <_read_r>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	4d07      	ldr	r5, [pc, #28]	; (80111a0 <_read_r+0x20>)
 8011184:	4604      	mov	r4, r0
 8011186:	4608      	mov	r0, r1
 8011188:	4611      	mov	r1, r2
 801118a:	2200      	movs	r2, #0
 801118c:	602a      	str	r2, [r5, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	f7f0 ffea 	bl	8002168 <_read>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_read_r+0x1e>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_read_r+0x1e>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	20001ef8 	.word	0x20001ef8

080111a4 <_sbrk_r>:
 80111a4:	b538      	push	{r3, r4, r5, lr}
 80111a6:	4d06      	ldr	r5, [pc, #24]	; (80111c0 <_sbrk_r+0x1c>)
 80111a8:	2300      	movs	r3, #0
 80111aa:	4604      	mov	r4, r0
 80111ac:	4608      	mov	r0, r1
 80111ae:	602b      	str	r3, [r5, #0]
 80111b0:	f7f1 f848 	bl	8002244 <_sbrk>
 80111b4:	1c43      	adds	r3, r0, #1
 80111b6:	d102      	bne.n	80111be <_sbrk_r+0x1a>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	b103      	cbz	r3, 80111be <_sbrk_r+0x1a>
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	bd38      	pop	{r3, r4, r5, pc}
 80111c0:	20001ef8 	.word	0x20001ef8

080111c4 <_write_r>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	4d07      	ldr	r5, [pc, #28]	; (80111e4 <_write_r+0x20>)
 80111c8:	4604      	mov	r4, r0
 80111ca:	4608      	mov	r0, r1
 80111cc:	4611      	mov	r1, r2
 80111ce:	2200      	movs	r2, #0
 80111d0:	602a      	str	r2, [r5, #0]
 80111d2:	461a      	mov	r2, r3
 80111d4:	f7f0 ffe5 	bl	80021a2 <_write>
 80111d8:	1c43      	adds	r3, r0, #1
 80111da:	d102      	bne.n	80111e2 <_write_r+0x1e>
 80111dc:	682b      	ldr	r3, [r5, #0]
 80111de:	b103      	cbz	r3, 80111e2 <_write_r+0x1e>
 80111e0:	6023      	str	r3, [r4, #0]
 80111e2:	bd38      	pop	{r3, r4, r5, pc}
 80111e4:	20001ef8 	.word	0x20001ef8

080111e8 <__errno>:
 80111e8:	4b01      	ldr	r3, [pc, #4]	; (80111f0 <__errno+0x8>)
 80111ea:	6818      	ldr	r0, [r3, #0]
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	20000348 	.word	0x20000348

080111f4 <__libc_init_array>:
 80111f4:	b570      	push	{r4, r5, r6, lr}
 80111f6:	4d0d      	ldr	r5, [pc, #52]	; (801122c <__libc_init_array+0x38>)
 80111f8:	4c0d      	ldr	r4, [pc, #52]	; (8011230 <__libc_init_array+0x3c>)
 80111fa:	1b64      	subs	r4, r4, r5
 80111fc:	10a4      	asrs	r4, r4, #2
 80111fe:	2600      	movs	r6, #0
 8011200:	42a6      	cmp	r6, r4
 8011202:	d109      	bne.n	8011218 <__libc_init_array+0x24>
 8011204:	4d0b      	ldr	r5, [pc, #44]	; (8011234 <__libc_init_array+0x40>)
 8011206:	4c0c      	ldr	r4, [pc, #48]	; (8011238 <__libc_init_array+0x44>)
 8011208:	f002 fc70 	bl	8013aec <_init>
 801120c:	1b64      	subs	r4, r4, r5
 801120e:	10a4      	asrs	r4, r4, #2
 8011210:	2600      	movs	r6, #0
 8011212:	42a6      	cmp	r6, r4
 8011214:	d105      	bne.n	8011222 <__libc_init_array+0x2e>
 8011216:	bd70      	pop	{r4, r5, r6, pc}
 8011218:	f855 3b04 	ldr.w	r3, [r5], #4
 801121c:	4798      	blx	r3
 801121e:	3601      	adds	r6, #1
 8011220:	e7ee      	b.n	8011200 <__libc_init_array+0xc>
 8011222:	f855 3b04 	ldr.w	r3, [r5], #4
 8011226:	4798      	blx	r3
 8011228:	3601      	adds	r6, #1
 801122a:	e7f2      	b.n	8011212 <__libc_init_array+0x1e>
 801122c:	08014048 	.word	0x08014048
 8011230:	08014048 	.word	0x08014048
 8011234:	08014048 	.word	0x08014048
 8011238:	0801404c 	.word	0x0801404c

0801123c <__retarget_lock_init_recursive>:
 801123c:	4770      	bx	lr

0801123e <__retarget_lock_acquire_recursive>:
 801123e:	4770      	bx	lr

08011240 <__retarget_lock_release_recursive>:
 8011240:	4770      	bx	lr

08011242 <strcpy>:
 8011242:	4603      	mov	r3, r0
 8011244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011248:	f803 2b01 	strb.w	r2, [r3], #1
 801124c:	2a00      	cmp	r2, #0
 801124e:	d1f9      	bne.n	8011244 <strcpy+0x2>
 8011250:	4770      	bx	lr

08011252 <memcpy>:
 8011252:	440a      	add	r2, r1
 8011254:	4291      	cmp	r1, r2
 8011256:	f100 33ff 	add.w	r3, r0, #4294967295
 801125a:	d100      	bne.n	801125e <memcpy+0xc>
 801125c:	4770      	bx	lr
 801125e:	b510      	push	{r4, lr}
 8011260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011268:	4291      	cmp	r1, r2
 801126a:	d1f9      	bne.n	8011260 <memcpy+0xe>
 801126c:	bd10      	pop	{r4, pc}
	...

08011270 <nan>:
 8011270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011278 <nan+0x8>
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop
 8011278:	00000000 	.word	0x00000000
 801127c:	7ff80000 	.word	0x7ff80000

08011280 <nanf>:
 8011280:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011288 <nanf+0x8>
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	7fc00000 	.word	0x7fc00000

0801128c <__assert_func>:
 801128c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801128e:	4614      	mov	r4, r2
 8011290:	461a      	mov	r2, r3
 8011292:	4b09      	ldr	r3, [pc, #36]	; (80112b8 <__assert_func+0x2c>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4605      	mov	r5, r0
 8011298:	68d8      	ldr	r0, [r3, #12]
 801129a:	b14c      	cbz	r4, 80112b0 <__assert_func+0x24>
 801129c:	4b07      	ldr	r3, [pc, #28]	; (80112bc <__assert_func+0x30>)
 801129e:	9100      	str	r1, [sp, #0]
 80112a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112a4:	4906      	ldr	r1, [pc, #24]	; (80112c0 <__assert_func+0x34>)
 80112a6:	462b      	mov	r3, r5
 80112a8:	f002 f8fe 	bl	80134a8 <fiprintf>
 80112ac:	f002 f928 	bl	8013500 <abort>
 80112b0:	4b04      	ldr	r3, [pc, #16]	; (80112c4 <__assert_func+0x38>)
 80112b2:	461c      	mov	r4, r3
 80112b4:	e7f3      	b.n	801129e <__assert_func+0x12>
 80112b6:	bf00      	nop
 80112b8:	20000348 	.word	0x20000348
 80112bc:	08013dc3 	.word	0x08013dc3
 80112c0:	08013dd0 	.word	0x08013dd0
 80112c4:	08013dfe 	.word	0x08013dfe

080112c8 <quorem>:
 80112c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112cc:	6903      	ldr	r3, [r0, #16]
 80112ce:	690c      	ldr	r4, [r1, #16]
 80112d0:	42a3      	cmp	r3, r4
 80112d2:	4607      	mov	r7, r0
 80112d4:	db7e      	blt.n	80113d4 <quorem+0x10c>
 80112d6:	3c01      	subs	r4, #1
 80112d8:	f101 0814 	add.w	r8, r1, #20
 80112dc:	f100 0514 	add.w	r5, r0, #20
 80112e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112e4:	9301      	str	r3, [sp, #4]
 80112e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80112ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112ee:	3301      	adds	r3, #1
 80112f0:	429a      	cmp	r2, r3
 80112f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80112f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80112fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80112fe:	d331      	bcc.n	8011364 <quorem+0x9c>
 8011300:	f04f 0e00 	mov.w	lr, #0
 8011304:	4640      	mov	r0, r8
 8011306:	46ac      	mov	ip, r5
 8011308:	46f2      	mov	sl, lr
 801130a:	f850 2b04 	ldr.w	r2, [r0], #4
 801130e:	b293      	uxth	r3, r2
 8011310:	fb06 e303 	mla	r3, r6, r3, lr
 8011314:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011318:	0c1a      	lsrs	r2, r3, #16
 801131a:	b29b      	uxth	r3, r3
 801131c:	ebaa 0303 	sub.w	r3, sl, r3
 8011320:	f8dc a000 	ldr.w	sl, [ip]
 8011324:	fa13 f38a 	uxtah	r3, r3, sl
 8011328:	fb06 220e 	mla	r2, r6, lr, r2
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	9b00      	ldr	r3, [sp, #0]
 8011330:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011334:	b292      	uxth	r2, r2
 8011336:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801133a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801133e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011342:	4581      	cmp	r9, r0
 8011344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011348:	f84c 3b04 	str.w	r3, [ip], #4
 801134c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011350:	d2db      	bcs.n	801130a <quorem+0x42>
 8011352:	f855 300b 	ldr.w	r3, [r5, fp]
 8011356:	b92b      	cbnz	r3, 8011364 <quorem+0x9c>
 8011358:	9b01      	ldr	r3, [sp, #4]
 801135a:	3b04      	subs	r3, #4
 801135c:	429d      	cmp	r5, r3
 801135e:	461a      	mov	r2, r3
 8011360:	d32c      	bcc.n	80113bc <quorem+0xf4>
 8011362:	613c      	str	r4, [r7, #16]
 8011364:	4638      	mov	r0, r7
 8011366:	f001 fca5 	bl	8012cb4 <__mcmp>
 801136a:	2800      	cmp	r0, #0
 801136c:	db22      	blt.n	80113b4 <quorem+0xec>
 801136e:	3601      	adds	r6, #1
 8011370:	4629      	mov	r1, r5
 8011372:	2000      	movs	r0, #0
 8011374:	f858 2b04 	ldr.w	r2, [r8], #4
 8011378:	f8d1 c000 	ldr.w	ip, [r1]
 801137c:	b293      	uxth	r3, r2
 801137e:	1ac3      	subs	r3, r0, r3
 8011380:	0c12      	lsrs	r2, r2, #16
 8011382:	fa13 f38c 	uxtah	r3, r3, ip
 8011386:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801138a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801138e:	b29b      	uxth	r3, r3
 8011390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011394:	45c1      	cmp	r9, r8
 8011396:	f841 3b04 	str.w	r3, [r1], #4
 801139a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801139e:	d2e9      	bcs.n	8011374 <quorem+0xac>
 80113a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113a8:	b922      	cbnz	r2, 80113b4 <quorem+0xec>
 80113aa:	3b04      	subs	r3, #4
 80113ac:	429d      	cmp	r5, r3
 80113ae:	461a      	mov	r2, r3
 80113b0:	d30a      	bcc.n	80113c8 <quorem+0x100>
 80113b2:	613c      	str	r4, [r7, #16]
 80113b4:	4630      	mov	r0, r6
 80113b6:	b003      	add	sp, #12
 80113b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113bc:	6812      	ldr	r2, [r2, #0]
 80113be:	3b04      	subs	r3, #4
 80113c0:	2a00      	cmp	r2, #0
 80113c2:	d1ce      	bne.n	8011362 <quorem+0x9a>
 80113c4:	3c01      	subs	r4, #1
 80113c6:	e7c9      	b.n	801135c <quorem+0x94>
 80113c8:	6812      	ldr	r2, [r2, #0]
 80113ca:	3b04      	subs	r3, #4
 80113cc:	2a00      	cmp	r2, #0
 80113ce:	d1f0      	bne.n	80113b2 <quorem+0xea>
 80113d0:	3c01      	subs	r4, #1
 80113d2:	e7eb      	b.n	80113ac <quorem+0xe4>
 80113d4:	2000      	movs	r0, #0
 80113d6:	e7ee      	b.n	80113b6 <quorem+0xee>

080113d8 <_dtoa_r>:
 80113d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	ed2d 8b04 	vpush	{d8-d9}
 80113e0:	69c5      	ldr	r5, [r0, #28]
 80113e2:	b093      	sub	sp, #76	; 0x4c
 80113e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80113e8:	ec57 6b10 	vmov	r6, r7, d0
 80113ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80113f0:	9107      	str	r1, [sp, #28]
 80113f2:	4604      	mov	r4, r0
 80113f4:	920a      	str	r2, [sp, #40]	; 0x28
 80113f6:	930d      	str	r3, [sp, #52]	; 0x34
 80113f8:	b975      	cbnz	r5, 8011418 <_dtoa_r+0x40>
 80113fa:	2010      	movs	r0, #16
 80113fc:	f7fd fe7c 	bl	800f0f8 <malloc>
 8011400:	4602      	mov	r2, r0
 8011402:	61e0      	str	r0, [r4, #28]
 8011404:	b920      	cbnz	r0, 8011410 <_dtoa_r+0x38>
 8011406:	4bae      	ldr	r3, [pc, #696]	; (80116c0 <_dtoa_r+0x2e8>)
 8011408:	21ef      	movs	r1, #239	; 0xef
 801140a:	48ae      	ldr	r0, [pc, #696]	; (80116c4 <_dtoa_r+0x2ec>)
 801140c:	f7ff ff3e 	bl	801128c <__assert_func>
 8011410:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011414:	6005      	str	r5, [r0, #0]
 8011416:	60c5      	str	r5, [r0, #12]
 8011418:	69e3      	ldr	r3, [r4, #28]
 801141a:	6819      	ldr	r1, [r3, #0]
 801141c:	b151      	cbz	r1, 8011434 <_dtoa_r+0x5c>
 801141e:	685a      	ldr	r2, [r3, #4]
 8011420:	604a      	str	r2, [r1, #4]
 8011422:	2301      	movs	r3, #1
 8011424:	4093      	lsls	r3, r2
 8011426:	608b      	str	r3, [r1, #8]
 8011428:	4620      	mov	r0, r4
 801142a:	f001 f9bd 	bl	80127a8 <_Bfree>
 801142e:	69e3      	ldr	r3, [r4, #28]
 8011430:	2200      	movs	r2, #0
 8011432:	601a      	str	r2, [r3, #0]
 8011434:	1e3b      	subs	r3, r7, #0
 8011436:	bfbb      	ittet	lt
 8011438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801143c:	9303      	strlt	r3, [sp, #12]
 801143e:	2300      	movge	r3, #0
 8011440:	2201      	movlt	r2, #1
 8011442:	bfac      	ite	ge
 8011444:	f8c8 3000 	strge.w	r3, [r8]
 8011448:	f8c8 2000 	strlt.w	r2, [r8]
 801144c:	4b9e      	ldr	r3, [pc, #632]	; (80116c8 <_dtoa_r+0x2f0>)
 801144e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011452:	ea33 0308 	bics.w	r3, r3, r8
 8011456:	d11b      	bne.n	8011490 <_dtoa_r+0xb8>
 8011458:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801145a:	f242 730f 	movw	r3, #9999	; 0x270f
 801145e:	6013      	str	r3, [r2, #0]
 8011460:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011464:	4333      	orrs	r3, r6
 8011466:	f000 8593 	beq.w	8011f90 <_dtoa_r+0xbb8>
 801146a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801146c:	b963      	cbnz	r3, 8011488 <_dtoa_r+0xb0>
 801146e:	4b97      	ldr	r3, [pc, #604]	; (80116cc <_dtoa_r+0x2f4>)
 8011470:	e027      	b.n	80114c2 <_dtoa_r+0xea>
 8011472:	4b97      	ldr	r3, [pc, #604]	; (80116d0 <_dtoa_r+0x2f8>)
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	3308      	adds	r3, #8
 8011478:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801147a:	6013      	str	r3, [r2, #0]
 801147c:	9800      	ldr	r0, [sp, #0]
 801147e:	b013      	add	sp, #76	; 0x4c
 8011480:	ecbd 8b04 	vpop	{d8-d9}
 8011484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011488:	4b90      	ldr	r3, [pc, #576]	; (80116cc <_dtoa_r+0x2f4>)
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	3303      	adds	r3, #3
 801148e:	e7f3      	b.n	8011478 <_dtoa_r+0xa0>
 8011490:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011494:	2200      	movs	r2, #0
 8011496:	ec51 0b17 	vmov	r0, r1, d7
 801149a:	eeb0 8a47 	vmov.f32	s16, s14
 801149e:	eef0 8a67 	vmov.f32	s17, s15
 80114a2:	2300      	movs	r3, #0
 80114a4:	f7ef fb38 	bl	8000b18 <__aeabi_dcmpeq>
 80114a8:	4681      	mov	r9, r0
 80114aa:	b160      	cbz	r0, 80114c6 <_dtoa_r+0xee>
 80114ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80114ae:	2301      	movs	r3, #1
 80114b0:	6013      	str	r3, [r2, #0]
 80114b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f000 8568 	beq.w	8011f8a <_dtoa_r+0xbb2>
 80114ba:	4b86      	ldr	r3, [pc, #536]	; (80116d4 <_dtoa_r+0x2fc>)
 80114bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	3b01      	subs	r3, #1
 80114c2:	9300      	str	r3, [sp, #0]
 80114c4:	e7da      	b.n	801147c <_dtoa_r+0xa4>
 80114c6:	aa10      	add	r2, sp, #64	; 0x40
 80114c8:	a911      	add	r1, sp, #68	; 0x44
 80114ca:	4620      	mov	r0, r4
 80114cc:	eeb0 0a48 	vmov.f32	s0, s16
 80114d0:	eef0 0a68 	vmov.f32	s1, s17
 80114d4:	f001 fd04 	bl	8012ee0 <__d2b>
 80114d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80114dc:	4682      	mov	sl, r0
 80114de:	2d00      	cmp	r5, #0
 80114e0:	d07f      	beq.n	80115e2 <_dtoa_r+0x20a>
 80114e2:	ee18 3a90 	vmov	r3, s17
 80114e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80114ee:	ec51 0b18 	vmov	r0, r1, d8
 80114f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80114f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80114fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80114fe:	4619      	mov	r1, r3
 8011500:	2200      	movs	r2, #0
 8011502:	4b75      	ldr	r3, [pc, #468]	; (80116d8 <_dtoa_r+0x300>)
 8011504:	f7ee fee8 	bl	80002d8 <__aeabi_dsub>
 8011508:	a367      	add	r3, pc, #412	; (adr r3, 80116a8 <_dtoa_r+0x2d0>)
 801150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150e:	f7ef f89b 	bl	8000648 <__aeabi_dmul>
 8011512:	a367      	add	r3, pc, #412	; (adr r3, 80116b0 <_dtoa_r+0x2d8>)
 8011514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011518:	f7ee fee0 	bl	80002dc <__adddf3>
 801151c:	4606      	mov	r6, r0
 801151e:	4628      	mov	r0, r5
 8011520:	460f      	mov	r7, r1
 8011522:	f7ef f827 	bl	8000574 <__aeabi_i2d>
 8011526:	a364      	add	r3, pc, #400	; (adr r3, 80116b8 <_dtoa_r+0x2e0>)
 8011528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152c:	f7ef f88c 	bl	8000648 <__aeabi_dmul>
 8011530:	4602      	mov	r2, r0
 8011532:	460b      	mov	r3, r1
 8011534:	4630      	mov	r0, r6
 8011536:	4639      	mov	r1, r7
 8011538:	f7ee fed0 	bl	80002dc <__adddf3>
 801153c:	4606      	mov	r6, r0
 801153e:	460f      	mov	r7, r1
 8011540:	f7ef fb32 	bl	8000ba8 <__aeabi_d2iz>
 8011544:	2200      	movs	r2, #0
 8011546:	4683      	mov	fp, r0
 8011548:	2300      	movs	r3, #0
 801154a:	4630      	mov	r0, r6
 801154c:	4639      	mov	r1, r7
 801154e:	f7ef faed 	bl	8000b2c <__aeabi_dcmplt>
 8011552:	b148      	cbz	r0, 8011568 <_dtoa_r+0x190>
 8011554:	4658      	mov	r0, fp
 8011556:	f7ef f80d 	bl	8000574 <__aeabi_i2d>
 801155a:	4632      	mov	r2, r6
 801155c:	463b      	mov	r3, r7
 801155e:	f7ef fadb 	bl	8000b18 <__aeabi_dcmpeq>
 8011562:	b908      	cbnz	r0, 8011568 <_dtoa_r+0x190>
 8011564:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011568:	f1bb 0f16 	cmp.w	fp, #22
 801156c:	d857      	bhi.n	801161e <_dtoa_r+0x246>
 801156e:	4b5b      	ldr	r3, [pc, #364]	; (80116dc <_dtoa_r+0x304>)
 8011570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011578:	ec51 0b18 	vmov	r0, r1, d8
 801157c:	f7ef fad6 	bl	8000b2c <__aeabi_dcmplt>
 8011580:	2800      	cmp	r0, #0
 8011582:	d04e      	beq.n	8011622 <_dtoa_r+0x24a>
 8011584:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011588:	2300      	movs	r3, #0
 801158a:	930c      	str	r3, [sp, #48]	; 0x30
 801158c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801158e:	1b5b      	subs	r3, r3, r5
 8011590:	1e5a      	subs	r2, r3, #1
 8011592:	bf45      	ittet	mi
 8011594:	f1c3 0301 	rsbmi	r3, r3, #1
 8011598:	9305      	strmi	r3, [sp, #20]
 801159a:	2300      	movpl	r3, #0
 801159c:	2300      	movmi	r3, #0
 801159e:	9206      	str	r2, [sp, #24]
 80115a0:	bf54      	ite	pl
 80115a2:	9305      	strpl	r3, [sp, #20]
 80115a4:	9306      	strmi	r3, [sp, #24]
 80115a6:	f1bb 0f00 	cmp.w	fp, #0
 80115aa:	db3c      	blt.n	8011626 <_dtoa_r+0x24e>
 80115ac:	9b06      	ldr	r3, [sp, #24]
 80115ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80115b2:	445b      	add	r3, fp
 80115b4:	9306      	str	r3, [sp, #24]
 80115b6:	2300      	movs	r3, #0
 80115b8:	9308      	str	r3, [sp, #32]
 80115ba:	9b07      	ldr	r3, [sp, #28]
 80115bc:	2b09      	cmp	r3, #9
 80115be:	d868      	bhi.n	8011692 <_dtoa_r+0x2ba>
 80115c0:	2b05      	cmp	r3, #5
 80115c2:	bfc4      	itt	gt
 80115c4:	3b04      	subgt	r3, #4
 80115c6:	9307      	strgt	r3, [sp, #28]
 80115c8:	9b07      	ldr	r3, [sp, #28]
 80115ca:	f1a3 0302 	sub.w	r3, r3, #2
 80115ce:	bfcc      	ite	gt
 80115d0:	2500      	movgt	r5, #0
 80115d2:	2501      	movle	r5, #1
 80115d4:	2b03      	cmp	r3, #3
 80115d6:	f200 8085 	bhi.w	80116e4 <_dtoa_r+0x30c>
 80115da:	e8df f003 	tbb	[pc, r3]
 80115de:	3b2e      	.short	0x3b2e
 80115e0:	5839      	.short	0x5839
 80115e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80115e6:	441d      	add	r5, r3
 80115e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80115ec:	2b20      	cmp	r3, #32
 80115ee:	bfc1      	itttt	gt
 80115f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80115f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80115f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80115fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011600:	bfd6      	itet	le
 8011602:	f1c3 0320 	rsble	r3, r3, #32
 8011606:	ea48 0003 	orrgt.w	r0, r8, r3
 801160a:	fa06 f003 	lslle.w	r0, r6, r3
 801160e:	f7ee ffa1 	bl	8000554 <__aeabi_ui2d>
 8011612:	2201      	movs	r2, #1
 8011614:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011618:	3d01      	subs	r5, #1
 801161a:	920e      	str	r2, [sp, #56]	; 0x38
 801161c:	e76f      	b.n	80114fe <_dtoa_r+0x126>
 801161e:	2301      	movs	r3, #1
 8011620:	e7b3      	b.n	801158a <_dtoa_r+0x1b2>
 8011622:	900c      	str	r0, [sp, #48]	; 0x30
 8011624:	e7b2      	b.n	801158c <_dtoa_r+0x1b4>
 8011626:	9b05      	ldr	r3, [sp, #20]
 8011628:	eba3 030b 	sub.w	r3, r3, fp
 801162c:	9305      	str	r3, [sp, #20]
 801162e:	f1cb 0300 	rsb	r3, fp, #0
 8011632:	9308      	str	r3, [sp, #32]
 8011634:	2300      	movs	r3, #0
 8011636:	930b      	str	r3, [sp, #44]	; 0x2c
 8011638:	e7bf      	b.n	80115ba <_dtoa_r+0x1e2>
 801163a:	2300      	movs	r3, #0
 801163c:	9309      	str	r3, [sp, #36]	; 0x24
 801163e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011640:	2b00      	cmp	r3, #0
 8011642:	dc52      	bgt.n	80116ea <_dtoa_r+0x312>
 8011644:	2301      	movs	r3, #1
 8011646:	9301      	str	r3, [sp, #4]
 8011648:	9304      	str	r3, [sp, #16]
 801164a:	461a      	mov	r2, r3
 801164c:	920a      	str	r2, [sp, #40]	; 0x28
 801164e:	e00b      	b.n	8011668 <_dtoa_r+0x290>
 8011650:	2301      	movs	r3, #1
 8011652:	e7f3      	b.n	801163c <_dtoa_r+0x264>
 8011654:	2300      	movs	r3, #0
 8011656:	9309      	str	r3, [sp, #36]	; 0x24
 8011658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801165a:	445b      	add	r3, fp
 801165c:	9301      	str	r3, [sp, #4]
 801165e:	3301      	adds	r3, #1
 8011660:	2b01      	cmp	r3, #1
 8011662:	9304      	str	r3, [sp, #16]
 8011664:	bfb8      	it	lt
 8011666:	2301      	movlt	r3, #1
 8011668:	69e0      	ldr	r0, [r4, #28]
 801166a:	2100      	movs	r1, #0
 801166c:	2204      	movs	r2, #4
 801166e:	f102 0614 	add.w	r6, r2, #20
 8011672:	429e      	cmp	r6, r3
 8011674:	d93d      	bls.n	80116f2 <_dtoa_r+0x31a>
 8011676:	6041      	str	r1, [r0, #4]
 8011678:	4620      	mov	r0, r4
 801167a:	f001 f855 	bl	8012728 <_Balloc>
 801167e:	9000      	str	r0, [sp, #0]
 8011680:	2800      	cmp	r0, #0
 8011682:	d139      	bne.n	80116f8 <_dtoa_r+0x320>
 8011684:	4b16      	ldr	r3, [pc, #88]	; (80116e0 <_dtoa_r+0x308>)
 8011686:	4602      	mov	r2, r0
 8011688:	f240 11af 	movw	r1, #431	; 0x1af
 801168c:	e6bd      	b.n	801140a <_dtoa_r+0x32>
 801168e:	2301      	movs	r3, #1
 8011690:	e7e1      	b.n	8011656 <_dtoa_r+0x27e>
 8011692:	2501      	movs	r5, #1
 8011694:	2300      	movs	r3, #0
 8011696:	9307      	str	r3, [sp, #28]
 8011698:	9509      	str	r5, [sp, #36]	; 0x24
 801169a:	f04f 33ff 	mov.w	r3, #4294967295
 801169e:	9301      	str	r3, [sp, #4]
 80116a0:	9304      	str	r3, [sp, #16]
 80116a2:	2200      	movs	r2, #0
 80116a4:	2312      	movs	r3, #18
 80116a6:	e7d1      	b.n	801164c <_dtoa_r+0x274>
 80116a8:	636f4361 	.word	0x636f4361
 80116ac:	3fd287a7 	.word	0x3fd287a7
 80116b0:	8b60c8b3 	.word	0x8b60c8b3
 80116b4:	3fc68a28 	.word	0x3fc68a28
 80116b8:	509f79fb 	.word	0x509f79fb
 80116bc:	3fd34413 	.word	0x3fd34413
 80116c0:	08013d4a 	.word	0x08013d4a
 80116c4:	08013e0c 	.word	0x08013e0c
 80116c8:	7ff00000 	.word	0x7ff00000
 80116cc:	08013e08 	.word	0x08013e08
 80116d0:	08013dff 	.word	0x08013dff
 80116d4:	08013d22 	.word	0x08013d22
 80116d8:	3ff80000 	.word	0x3ff80000
 80116dc:	08013f58 	.word	0x08013f58
 80116e0:	08013e64 	.word	0x08013e64
 80116e4:	2301      	movs	r3, #1
 80116e6:	9309      	str	r3, [sp, #36]	; 0x24
 80116e8:	e7d7      	b.n	801169a <_dtoa_r+0x2c2>
 80116ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116ec:	9301      	str	r3, [sp, #4]
 80116ee:	9304      	str	r3, [sp, #16]
 80116f0:	e7ba      	b.n	8011668 <_dtoa_r+0x290>
 80116f2:	3101      	adds	r1, #1
 80116f4:	0052      	lsls	r2, r2, #1
 80116f6:	e7ba      	b.n	801166e <_dtoa_r+0x296>
 80116f8:	69e3      	ldr	r3, [r4, #28]
 80116fa:	9a00      	ldr	r2, [sp, #0]
 80116fc:	601a      	str	r2, [r3, #0]
 80116fe:	9b04      	ldr	r3, [sp, #16]
 8011700:	2b0e      	cmp	r3, #14
 8011702:	f200 80a8 	bhi.w	8011856 <_dtoa_r+0x47e>
 8011706:	2d00      	cmp	r5, #0
 8011708:	f000 80a5 	beq.w	8011856 <_dtoa_r+0x47e>
 801170c:	f1bb 0f00 	cmp.w	fp, #0
 8011710:	dd38      	ble.n	8011784 <_dtoa_r+0x3ac>
 8011712:	4bc0      	ldr	r3, [pc, #768]	; (8011a14 <_dtoa_r+0x63c>)
 8011714:	f00b 020f 	and.w	r2, fp, #15
 8011718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801171c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011720:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011724:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011728:	d019      	beq.n	801175e <_dtoa_r+0x386>
 801172a:	4bbb      	ldr	r3, [pc, #748]	; (8011a18 <_dtoa_r+0x640>)
 801172c:	ec51 0b18 	vmov	r0, r1, d8
 8011730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011734:	f7ef f8b2 	bl	800089c <__aeabi_ddiv>
 8011738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801173c:	f008 080f 	and.w	r8, r8, #15
 8011740:	2503      	movs	r5, #3
 8011742:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011a18 <_dtoa_r+0x640>
 8011746:	f1b8 0f00 	cmp.w	r8, #0
 801174a:	d10a      	bne.n	8011762 <_dtoa_r+0x38a>
 801174c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011750:	4632      	mov	r2, r6
 8011752:	463b      	mov	r3, r7
 8011754:	f7ef f8a2 	bl	800089c <__aeabi_ddiv>
 8011758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801175c:	e02b      	b.n	80117b6 <_dtoa_r+0x3de>
 801175e:	2502      	movs	r5, #2
 8011760:	e7ef      	b.n	8011742 <_dtoa_r+0x36a>
 8011762:	f018 0f01 	tst.w	r8, #1
 8011766:	d008      	beq.n	801177a <_dtoa_r+0x3a2>
 8011768:	4630      	mov	r0, r6
 801176a:	4639      	mov	r1, r7
 801176c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011770:	f7ee ff6a 	bl	8000648 <__aeabi_dmul>
 8011774:	3501      	adds	r5, #1
 8011776:	4606      	mov	r6, r0
 8011778:	460f      	mov	r7, r1
 801177a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801177e:	f109 0908 	add.w	r9, r9, #8
 8011782:	e7e0      	b.n	8011746 <_dtoa_r+0x36e>
 8011784:	f000 809f 	beq.w	80118c6 <_dtoa_r+0x4ee>
 8011788:	f1cb 0600 	rsb	r6, fp, #0
 801178c:	4ba1      	ldr	r3, [pc, #644]	; (8011a14 <_dtoa_r+0x63c>)
 801178e:	4fa2      	ldr	r7, [pc, #648]	; (8011a18 <_dtoa_r+0x640>)
 8011790:	f006 020f 	and.w	r2, r6, #15
 8011794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179c:	ec51 0b18 	vmov	r0, r1, d8
 80117a0:	f7ee ff52 	bl	8000648 <__aeabi_dmul>
 80117a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117a8:	1136      	asrs	r6, r6, #4
 80117aa:	2300      	movs	r3, #0
 80117ac:	2502      	movs	r5, #2
 80117ae:	2e00      	cmp	r6, #0
 80117b0:	d17e      	bne.n	80118b0 <_dtoa_r+0x4d8>
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1d0      	bne.n	8011758 <_dtoa_r+0x380>
 80117b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f000 8084 	beq.w	80118ca <_dtoa_r+0x4f2>
 80117c2:	4b96      	ldr	r3, [pc, #600]	; (8011a1c <_dtoa_r+0x644>)
 80117c4:	2200      	movs	r2, #0
 80117c6:	4640      	mov	r0, r8
 80117c8:	4649      	mov	r1, r9
 80117ca:	f7ef f9af 	bl	8000b2c <__aeabi_dcmplt>
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d07b      	beq.n	80118ca <_dtoa_r+0x4f2>
 80117d2:	9b04      	ldr	r3, [sp, #16]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d078      	beq.n	80118ca <_dtoa_r+0x4f2>
 80117d8:	9b01      	ldr	r3, [sp, #4]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	dd39      	ble.n	8011852 <_dtoa_r+0x47a>
 80117de:	4b90      	ldr	r3, [pc, #576]	; (8011a20 <_dtoa_r+0x648>)
 80117e0:	2200      	movs	r2, #0
 80117e2:	4640      	mov	r0, r8
 80117e4:	4649      	mov	r1, r9
 80117e6:	f7ee ff2f 	bl	8000648 <__aeabi_dmul>
 80117ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117ee:	9e01      	ldr	r6, [sp, #4]
 80117f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80117f4:	3501      	adds	r5, #1
 80117f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80117fa:	4628      	mov	r0, r5
 80117fc:	f7ee feba 	bl	8000574 <__aeabi_i2d>
 8011800:	4642      	mov	r2, r8
 8011802:	464b      	mov	r3, r9
 8011804:	f7ee ff20 	bl	8000648 <__aeabi_dmul>
 8011808:	4b86      	ldr	r3, [pc, #536]	; (8011a24 <_dtoa_r+0x64c>)
 801180a:	2200      	movs	r2, #0
 801180c:	f7ee fd66 	bl	80002dc <__adddf3>
 8011810:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011818:	9303      	str	r3, [sp, #12]
 801181a:	2e00      	cmp	r6, #0
 801181c:	d158      	bne.n	80118d0 <_dtoa_r+0x4f8>
 801181e:	4b82      	ldr	r3, [pc, #520]	; (8011a28 <_dtoa_r+0x650>)
 8011820:	2200      	movs	r2, #0
 8011822:	4640      	mov	r0, r8
 8011824:	4649      	mov	r1, r9
 8011826:	f7ee fd57 	bl	80002d8 <__aeabi_dsub>
 801182a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801182e:	4680      	mov	r8, r0
 8011830:	4689      	mov	r9, r1
 8011832:	f7ef f999 	bl	8000b68 <__aeabi_dcmpgt>
 8011836:	2800      	cmp	r0, #0
 8011838:	f040 8296 	bne.w	8011d68 <_dtoa_r+0x990>
 801183c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011840:	4640      	mov	r0, r8
 8011842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011846:	4649      	mov	r1, r9
 8011848:	f7ef f970 	bl	8000b2c <__aeabi_dcmplt>
 801184c:	2800      	cmp	r0, #0
 801184e:	f040 8289 	bne.w	8011d64 <_dtoa_r+0x98c>
 8011852:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011858:	2b00      	cmp	r3, #0
 801185a:	f2c0 814e 	blt.w	8011afa <_dtoa_r+0x722>
 801185e:	f1bb 0f0e 	cmp.w	fp, #14
 8011862:	f300 814a 	bgt.w	8011afa <_dtoa_r+0x722>
 8011866:	4b6b      	ldr	r3, [pc, #428]	; (8011a14 <_dtoa_r+0x63c>)
 8011868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801186c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011872:	2b00      	cmp	r3, #0
 8011874:	f280 80dc 	bge.w	8011a30 <_dtoa_r+0x658>
 8011878:	9b04      	ldr	r3, [sp, #16]
 801187a:	2b00      	cmp	r3, #0
 801187c:	f300 80d8 	bgt.w	8011a30 <_dtoa_r+0x658>
 8011880:	f040 826f 	bne.w	8011d62 <_dtoa_r+0x98a>
 8011884:	4b68      	ldr	r3, [pc, #416]	; (8011a28 <_dtoa_r+0x650>)
 8011886:	2200      	movs	r2, #0
 8011888:	4640      	mov	r0, r8
 801188a:	4649      	mov	r1, r9
 801188c:	f7ee fedc 	bl	8000648 <__aeabi_dmul>
 8011890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011894:	f7ef f95e 	bl	8000b54 <__aeabi_dcmpge>
 8011898:	9e04      	ldr	r6, [sp, #16]
 801189a:	4637      	mov	r7, r6
 801189c:	2800      	cmp	r0, #0
 801189e:	f040 8245 	bne.w	8011d2c <_dtoa_r+0x954>
 80118a2:	9d00      	ldr	r5, [sp, #0]
 80118a4:	2331      	movs	r3, #49	; 0x31
 80118a6:	f805 3b01 	strb.w	r3, [r5], #1
 80118aa:	f10b 0b01 	add.w	fp, fp, #1
 80118ae:	e241      	b.n	8011d34 <_dtoa_r+0x95c>
 80118b0:	07f2      	lsls	r2, r6, #31
 80118b2:	d505      	bpl.n	80118c0 <_dtoa_r+0x4e8>
 80118b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118b8:	f7ee fec6 	bl	8000648 <__aeabi_dmul>
 80118bc:	3501      	adds	r5, #1
 80118be:	2301      	movs	r3, #1
 80118c0:	1076      	asrs	r6, r6, #1
 80118c2:	3708      	adds	r7, #8
 80118c4:	e773      	b.n	80117ae <_dtoa_r+0x3d6>
 80118c6:	2502      	movs	r5, #2
 80118c8:	e775      	b.n	80117b6 <_dtoa_r+0x3de>
 80118ca:	9e04      	ldr	r6, [sp, #16]
 80118cc:	465f      	mov	r7, fp
 80118ce:	e792      	b.n	80117f6 <_dtoa_r+0x41e>
 80118d0:	9900      	ldr	r1, [sp, #0]
 80118d2:	4b50      	ldr	r3, [pc, #320]	; (8011a14 <_dtoa_r+0x63c>)
 80118d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118d8:	4431      	add	r1, r6
 80118da:	9102      	str	r1, [sp, #8]
 80118dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118de:	eeb0 9a47 	vmov.f32	s18, s14
 80118e2:	eef0 9a67 	vmov.f32	s19, s15
 80118e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80118ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80118ee:	2900      	cmp	r1, #0
 80118f0:	d044      	beq.n	801197c <_dtoa_r+0x5a4>
 80118f2:	494e      	ldr	r1, [pc, #312]	; (8011a2c <_dtoa_r+0x654>)
 80118f4:	2000      	movs	r0, #0
 80118f6:	f7ee ffd1 	bl	800089c <__aeabi_ddiv>
 80118fa:	ec53 2b19 	vmov	r2, r3, d9
 80118fe:	f7ee fceb 	bl	80002d8 <__aeabi_dsub>
 8011902:	9d00      	ldr	r5, [sp, #0]
 8011904:	ec41 0b19 	vmov	d9, r0, r1
 8011908:	4649      	mov	r1, r9
 801190a:	4640      	mov	r0, r8
 801190c:	f7ef f94c 	bl	8000ba8 <__aeabi_d2iz>
 8011910:	4606      	mov	r6, r0
 8011912:	f7ee fe2f 	bl	8000574 <__aeabi_i2d>
 8011916:	4602      	mov	r2, r0
 8011918:	460b      	mov	r3, r1
 801191a:	4640      	mov	r0, r8
 801191c:	4649      	mov	r1, r9
 801191e:	f7ee fcdb 	bl	80002d8 <__aeabi_dsub>
 8011922:	3630      	adds	r6, #48	; 0x30
 8011924:	f805 6b01 	strb.w	r6, [r5], #1
 8011928:	ec53 2b19 	vmov	r2, r3, d9
 801192c:	4680      	mov	r8, r0
 801192e:	4689      	mov	r9, r1
 8011930:	f7ef f8fc 	bl	8000b2c <__aeabi_dcmplt>
 8011934:	2800      	cmp	r0, #0
 8011936:	d164      	bne.n	8011a02 <_dtoa_r+0x62a>
 8011938:	4642      	mov	r2, r8
 801193a:	464b      	mov	r3, r9
 801193c:	4937      	ldr	r1, [pc, #220]	; (8011a1c <_dtoa_r+0x644>)
 801193e:	2000      	movs	r0, #0
 8011940:	f7ee fcca 	bl	80002d8 <__aeabi_dsub>
 8011944:	ec53 2b19 	vmov	r2, r3, d9
 8011948:	f7ef f8f0 	bl	8000b2c <__aeabi_dcmplt>
 801194c:	2800      	cmp	r0, #0
 801194e:	f040 80b6 	bne.w	8011abe <_dtoa_r+0x6e6>
 8011952:	9b02      	ldr	r3, [sp, #8]
 8011954:	429d      	cmp	r5, r3
 8011956:	f43f af7c 	beq.w	8011852 <_dtoa_r+0x47a>
 801195a:	4b31      	ldr	r3, [pc, #196]	; (8011a20 <_dtoa_r+0x648>)
 801195c:	ec51 0b19 	vmov	r0, r1, d9
 8011960:	2200      	movs	r2, #0
 8011962:	f7ee fe71 	bl	8000648 <__aeabi_dmul>
 8011966:	4b2e      	ldr	r3, [pc, #184]	; (8011a20 <_dtoa_r+0x648>)
 8011968:	ec41 0b19 	vmov	d9, r0, r1
 801196c:	2200      	movs	r2, #0
 801196e:	4640      	mov	r0, r8
 8011970:	4649      	mov	r1, r9
 8011972:	f7ee fe69 	bl	8000648 <__aeabi_dmul>
 8011976:	4680      	mov	r8, r0
 8011978:	4689      	mov	r9, r1
 801197a:	e7c5      	b.n	8011908 <_dtoa_r+0x530>
 801197c:	ec51 0b17 	vmov	r0, r1, d7
 8011980:	f7ee fe62 	bl	8000648 <__aeabi_dmul>
 8011984:	9b02      	ldr	r3, [sp, #8]
 8011986:	9d00      	ldr	r5, [sp, #0]
 8011988:	930f      	str	r3, [sp, #60]	; 0x3c
 801198a:	ec41 0b19 	vmov	d9, r0, r1
 801198e:	4649      	mov	r1, r9
 8011990:	4640      	mov	r0, r8
 8011992:	f7ef f909 	bl	8000ba8 <__aeabi_d2iz>
 8011996:	4606      	mov	r6, r0
 8011998:	f7ee fdec 	bl	8000574 <__aeabi_i2d>
 801199c:	3630      	adds	r6, #48	; 0x30
 801199e:	4602      	mov	r2, r0
 80119a0:	460b      	mov	r3, r1
 80119a2:	4640      	mov	r0, r8
 80119a4:	4649      	mov	r1, r9
 80119a6:	f7ee fc97 	bl	80002d8 <__aeabi_dsub>
 80119aa:	f805 6b01 	strb.w	r6, [r5], #1
 80119ae:	9b02      	ldr	r3, [sp, #8]
 80119b0:	429d      	cmp	r5, r3
 80119b2:	4680      	mov	r8, r0
 80119b4:	4689      	mov	r9, r1
 80119b6:	f04f 0200 	mov.w	r2, #0
 80119ba:	d124      	bne.n	8011a06 <_dtoa_r+0x62e>
 80119bc:	4b1b      	ldr	r3, [pc, #108]	; (8011a2c <_dtoa_r+0x654>)
 80119be:	ec51 0b19 	vmov	r0, r1, d9
 80119c2:	f7ee fc8b 	bl	80002dc <__adddf3>
 80119c6:	4602      	mov	r2, r0
 80119c8:	460b      	mov	r3, r1
 80119ca:	4640      	mov	r0, r8
 80119cc:	4649      	mov	r1, r9
 80119ce:	f7ef f8cb 	bl	8000b68 <__aeabi_dcmpgt>
 80119d2:	2800      	cmp	r0, #0
 80119d4:	d173      	bne.n	8011abe <_dtoa_r+0x6e6>
 80119d6:	ec53 2b19 	vmov	r2, r3, d9
 80119da:	4914      	ldr	r1, [pc, #80]	; (8011a2c <_dtoa_r+0x654>)
 80119dc:	2000      	movs	r0, #0
 80119de:	f7ee fc7b 	bl	80002d8 <__aeabi_dsub>
 80119e2:	4602      	mov	r2, r0
 80119e4:	460b      	mov	r3, r1
 80119e6:	4640      	mov	r0, r8
 80119e8:	4649      	mov	r1, r9
 80119ea:	f7ef f89f 	bl	8000b2c <__aeabi_dcmplt>
 80119ee:	2800      	cmp	r0, #0
 80119f0:	f43f af2f 	beq.w	8011852 <_dtoa_r+0x47a>
 80119f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80119f6:	1e6b      	subs	r3, r5, #1
 80119f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80119fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80119fe:	2b30      	cmp	r3, #48	; 0x30
 8011a00:	d0f8      	beq.n	80119f4 <_dtoa_r+0x61c>
 8011a02:	46bb      	mov	fp, r7
 8011a04:	e04a      	b.n	8011a9c <_dtoa_r+0x6c4>
 8011a06:	4b06      	ldr	r3, [pc, #24]	; (8011a20 <_dtoa_r+0x648>)
 8011a08:	f7ee fe1e 	bl	8000648 <__aeabi_dmul>
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	4689      	mov	r9, r1
 8011a10:	e7bd      	b.n	801198e <_dtoa_r+0x5b6>
 8011a12:	bf00      	nop
 8011a14:	08013f58 	.word	0x08013f58
 8011a18:	08013f30 	.word	0x08013f30
 8011a1c:	3ff00000 	.word	0x3ff00000
 8011a20:	40240000 	.word	0x40240000
 8011a24:	401c0000 	.word	0x401c0000
 8011a28:	40140000 	.word	0x40140000
 8011a2c:	3fe00000 	.word	0x3fe00000
 8011a30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011a34:	9d00      	ldr	r5, [sp, #0]
 8011a36:	4642      	mov	r2, r8
 8011a38:	464b      	mov	r3, r9
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	f7ee ff2d 	bl	800089c <__aeabi_ddiv>
 8011a42:	f7ef f8b1 	bl	8000ba8 <__aeabi_d2iz>
 8011a46:	9001      	str	r0, [sp, #4]
 8011a48:	f7ee fd94 	bl	8000574 <__aeabi_i2d>
 8011a4c:	4642      	mov	r2, r8
 8011a4e:	464b      	mov	r3, r9
 8011a50:	f7ee fdfa 	bl	8000648 <__aeabi_dmul>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	4630      	mov	r0, r6
 8011a5a:	4639      	mov	r1, r7
 8011a5c:	f7ee fc3c 	bl	80002d8 <__aeabi_dsub>
 8011a60:	9e01      	ldr	r6, [sp, #4]
 8011a62:	9f04      	ldr	r7, [sp, #16]
 8011a64:	3630      	adds	r6, #48	; 0x30
 8011a66:	f805 6b01 	strb.w	r6, [r5], #1
 8011a6a:	9e00      	ldr	r6, [sp, #0]
 8011a6c:	1bae      	subs	r6, r5, r6
 8011a6e:	42b7      	cmp	r7, r6
 8011a70:	4602      	mov	r2, r0
 8011a72:	460b      	mov	r3, r1
 8011a74:	d134      	bne.n	8011ae0 <_dtoa_r+0x708>
 8011a76:	f7ee fc31 	bl	80002dc <__adddf3>
 8011a7a:	4642      	mov	r2, r8
 8011a7c:	464b      	mov	r3, r9
 8011a7e:	4606      	mov	r6, r0
 8011a80:	460f      	mov	r7, r1
 8011a82:	f7ef f871 	bl	8000b68 <__aeabi_dcmpgt>
 8011a86:	b9c8      	cbnz	r0, 8011abc <_dtoa_r+0x6e4>
 8011a88:	4642      	mov	r2, r8
 8011a8a:	464b      	mov	r3, r9
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	4639      	mov	r1, r7
 8011a90:	f7ef f842 	bl	8000b18 <__aeabi_dcmpeq>
 8011a94:	b110      	cbz	r0, 8011a9c <_dtoa_r+0x6c4>
 8011a96:	9b01      	ldr	r3, [sp, #4]
 8011a98:	07db      	lsls	r3, r3, #31
 8011a9a:	d40f      	bmi.n	8011abc <_dtoa_r+0x6e4>
 8011a9c:	4651      	mov	r1, sl
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f000 fe82 	bl	80127a8 <_Bfree>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011aa8:	702b      	strb	r3, [r5, #0]
 8011aaa:	f10b 0301 	add.w	r3, fp, #1
 8011aae:	6013      	str	r3, [r2, #0]
 8011ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f43f ace2 	beq.w	801147c <_dtoa_r+0xa4>
 8011ab8:	601d      	str	r5, [r3, #0]
 8011aba:	e4df      	b.n	801147c <_dtoa_r+0xa4>
 8011abc:	465f      	mov	r7, fp
 8011abe:	462b      	mov	r3, r5
 8011ac0:	461d      	mov	r5, r3
 8011ac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ac6:	2a39      	cmp	r2, #57	; 0x39
 8011ac8:	d106      	bne.n	8011ad8 <_dtoa_r+0x700>
 8011aca:	9a00      	ldr	r2, [sp, #0]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d1f7      	bne.n	8011ac0 <_dtoa_r+0x6e8>
 8011ad0:	9900      	ldr	r1, [sp, #0]
 8011ad2:	2230      	movs	r2, #48	; 0x30
 8011ad4:	3701      	adds	r7, #1
 8011ad6:	700a      	strb	r2, [r1, #0]
 8011ad8:	781a      	ldrb	r2, [r3, #0]
 8011ada:	3201      	adds	r2, #1
 8011adc:	701a      	strb	r2, [r3, #0]
 8011ade:	e790      	b.n	8011a02 <_dtoa_r+0x62a>
 8011ae0:	4ba3      	ldr	r3, [pc, #652]	; (8011d70 <_dtoa_r+0x998>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	f7ee fdb0 	bl	8000648 <__aeabi_dmul>
 8011ae8:	2200      	movs	r2, #0
 8011aea:	2300      	movs	r3, #0
 8011aec:	4606      	mov	r6, r0
 8011aee:	460f      	mov	r7, r1
 8011af0:	f7ef f812 	bl	8000b18 <__aeabi_dcmpeq>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	d09e      	beq.n	8011a36 <_dtoa_r+0x65e>
 8011af8:	e7d0      	b.n	8011a9c <_dtoa_r+0x6c4>
 8011afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011afc:	2a00      	cmp	r2, #0
 8011afe:	f000 80ca 	beq.w	8011c96 <_dtoa_r+0x8be>
 8011b02:	9a07      	ldr	r2, [sp, #28]
 8011b04:	2a01      	cmp	r2, #1
 8011b06:	f300 80ad 	bgt.w	8011c64 <_dtoa_r+0x88c>
 8011b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b0c:	2a00      	cmp	r2, #0
 8011b0e:	f000 80a5 	beq.w	8011c5c <_dtoa_r+0x884>
 8011b12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011b16:	9e08      	ldr	r6, [sp, #32]
 8011b18:	9d05      	ldr	r5, [sp, #20]
 8011b1a:	9a05      	ldr	r2, [sp, #20]
 8011b1c:	441a      	add	r2, r3
 8011b1e:	9205      	str	r2, [sp, #20]
 8011b20:	9a06      	ldr	r2, [sp, #24]
 8011b22:	2101      	movs	r1, #1
 8011b24:	441a      	add	r2, r3
 8011b26:	4620      	mov	r0, r4
 8011b28:	9206      	str	r2, [sp, #24]
 8011b2a:	f000 ff3d 	bl	80129a8 <__i2b>
 8011b2e:	4607      	mov	r7, r0
 8011b30:	b165      	cbz	r5, 8011b4c <_dtoa_r+0x774>
 8011b32:	9b06      	ldr	r3, [sp, #24]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	dd09      	ble.n	8011b4c <_dtoa_r+0x774>
 8011b38:	42ab      	cmp	r3, r5
 8011b3a:	9a05      	ldr	r2, [sp, #20]
 8011b3c:	bfa8      	it	ge
 8011b3e:	462b      	movge	r3, r5
 8011b40:	1ad2      	subs	r2, r2, r3
 8011b42:	9205      	str	r2, [sp, #20]
 8011b44:	9a06      	ldr	r2, [sp, #24]
 8011b46:	1aed      	subs	r5, r5, r3
 8011b48:	1ad3      	subs	r3, r2, r3
 8011b4a:	9306      	str	r3, [sp, #24]
 8011b4c:	9b08      	ldr	r3, [sp, #32]
 8011b4e:	b1f3      	cbz	r3, 8011b8e <_dtoa_r+0x7b6>
 8011b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f000 80a3 	beq.w	8011c9e <_dtoa_r+0x8c6>
 8011b58:	2e00      	cmp	r6, #0
 8011b5a:	dd10      	ble.n	8011b7e <_dtoa_r+0x7a6>
 8011b5c:	4639      	mov	r1, r7
 8011b5e:	4632      	mov	r2, r6
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 ffe1 	bl	8012b28 <__pow5mult>
 8011b66:	4652      	mov	r2, sl
 8011b68:	4601      	mov	r1, r0
 8011b6a:	4607      	mov	r7, r0
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f000 ff31 	bl	80129d4 <__multiply>
 8011b72:	4651      	mov	r1, sl
 8011b74:	4680      	mov	r8, r0
 8011b76:	4620      	mov	r0, r4
 8011b78:	f000 fe16 	bl	80127a8 <_Bfree>
 8011b7c:	46c2      	mov	sl, r8
 8011b7e:	9b08      	ldr	r3, [sp, #32]
 8011b80:	1b9a      	subs	r2, r3, r6
 8011b82:	d004      	beq.n	8011b8e <_dtoa_r+0x7b6>
 8011b84:	4651      	mov	r1, sl
 8011b86:	4620      	mov	r0, r4
 8011b88:	f000 ffce 	bl	8012b28 <__pow5mult>
 8011b8c:	4682      	mov	sl, r0
 8011b8e:	2101      	movs	r1, #1
 8011b90:	4620      	mov	r0, r4
 8011b92:	f000 ff09 	bl	80129a8 <__i2b>
 8011b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	4606      	mov	r6, r0
 8011b9c:	f340 8081 	ble.w	8011ca2 <_dtoa_r+0x8ca>
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f000 ffbf 	bl	8012b28 <__pow5mult>
 8011baa:	9b07      	ldr	r3, [sp, #28]
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	4606      	mov	r6, r0
 8011bb0:	dd7a      	ble.n	8011ca8 <_dtoa_r+0x8d0>
 8011bb2:	f04f 0800 	mov.w	r8, #0
 8011bb6:	6933      	ldr	r3, [r6, #16]
 8011bb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011bbc:	6918      	ldr	r0, [r3, #16]
 8011bbe:	f000 fea5 	bl	801290c <__hi0bits>
 8011bc2:	f1c0 0020 	rsb	r0, r0, #32
 8011bc6:	9b06      	ldr	r3, [sp, #24]
 8011bc8:	4418      	add	r0, r3
 8011bca:	f010 001f 	ands.w	r0, r0, #31
 8011bce:	f000 8094 	beq.w	8011cfa <_dtoa_r+0x922>
 8011bd2:	f1c0 0320 	rsb	r3, r0, #32
 8011bd6:	2b04      	cmp	r3, #4
 8011bd8:	f340 8085 	ble.w	8011ce6 <_dtoa_r+0x90e>
 8011bdc:	9b05      	ldr	r3, [sp, #20]
 8011bde:	f1c0 001c 	rsb	r0, r0, #28
 8011be2:	4403      	add	r3, r0
 8011be4:	9305      	str	r3, [sp, #20]
 8011be6:	9b06      	ldr	r3, [sp, #24]
 8011be8:	4403      	add	r3, r0
 8011bea:	4405      	add	r5, r0
 8011bec:	9306      	str	r3, [sp, #24]
 8011bee:	9b05      	ldr	r3, [sp, #20]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	dd05      	ble.n	8011c00 <_dtoa_r+0x828>
 8011bf4:	4651      	mov	r1, sl
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f000 ffef 	bl	8012bdc <__lshift>
 8011bfe:	4682      	mov	sl, r0
 8011c00:	9b06      	ldr	r3, [sp, #24]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	dd05      	ble.n	8011c12 <_dtoa_r+0x83a>
 8011c06:	4631      	mov	r1, r6
 8011c08:	461a      	mov	r2, r3
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f000 ffe6 	bl	8012bdc <__lshift>
 8011c10:	4606      	mov	r6, r0
 8011c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d072      	beq.n	8011cfe <_dtoa_r+0x926>
 8011c18:	4631      	mov	r1, r6
 8011c1a:	4650      	mov	r0, sl
 8011c1c:	f001 f84a 	bl	8012cb4 <__mcmp>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	da6c      	bge.n	8011cfe <_dtoa_r+0x926>
 8011c24:	2300      	movs	r3, #0
 8011c26:	4651      	mov	r1, sl
 8011c28:	220a      	movs	r2, #10
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f000 fdde 	bl	80127ec <__multadd>
 8011c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c36:	4682      	mov	sl, r0
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	f000 81b0 	beq.w	8011f9e <_dtoa_r+0xbc6>
 8011c3e:	2300      	movs	r3, #0
 8011c40:	4639      	mov	r1, r7
 8011c42:	220a      	movs	r2, #10
 8011c44:	4620      	mov	r0, r4
 8011c46:	f000 fdd1 	bl	80127ec <__multadd>
 8011c4a:	9b01      	ldr	r3, [sp, #4]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	4607      	mov	r7, r0
 8011c50:	f300 8096 	bgt.w	8011d80 <_dtoa_r+0x9a8>
 8011c54:	9b07      	ldr	r3, [sp, #28]
 8011c56:	2b02      	cmp	r3, #2
 8011c58:	dc59      	bgt.n	8011d0e <_dtoa_r+0x936>
 8011c5a:	e091      	b.n	8011d80 <_dtoa_r+0x9a8>
 8011c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011c62:	e758      	b.n	8011b16 <_dtoa_r+0x73e>
 8011c64:	9b04      	ldr	r3, [sp, #16]
 8011c66:	1e5e      	subs	r6, r3, #1
 8011c68:	9b08      	ldr	r3, [sp, #32]
 8011c6a:	42b3      	cmp	r3, r6
 8011c6c:	bfbf      	itttt	lt
 8011c6e:	9b08      	ldrlt	r3, [sp, #32]
 8011c70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011c72:	9608      	strlt	r6, [sp, #32]
 8011c74:	1af3      	sublt	r3, r6, r3
 8011c76:	bfb4      	ite	lt
 8011c78:	18d2      	addlt	r2, r2, r3
 8011c7a:	1b9e      	subge	r6, r3, r6
 8011c7c:	9b04      	ldr	r3, [sp, #16]
 8011c7e:	bfbc      	itt	lt
 8011c80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011c82:	2600      	movlt	r6, #0
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	bfb7      	itett	lt
 8011c88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011c8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011c90:	1a9d      	sublt	r5, r3, r2
 8011c92:	2300      	movlt	r3, #0
 8011c94:	e741      	b.n	8011b1a <_dtoa_r+0x742>
 8011c96:	9e08      	ldr	r6, [sp, #32]
 8011c98:	9d05      	ldr	r5, [sp, #20]
 8011c9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011c9c:	e748      	b.n	8011b30 <_dtoa_r+0x758>
 8011c9e:	9a08      	ldr	r2, [sp, #32]
 8011ca0:	e770      	b.n	8011b84 <_dtoa_r+0x7ac>
 8011ca2:	9b07      	ldr	r3, [sp, #28]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	dc19      	bgt.n	8011cdc <_dtoa_r+0x904>
 8011ca8:	9b02      	ldr	r3, [sp, #8]
 8011caa:	b9bb      	cbnz	r3, 8011cdc <_dtoa_r+0x904>
 8011cac:	9b03      	ldr	r3, [sp, #12]
 8011cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011cb2:	b99b      	cbnz	r3, 8011cdc <_dtoa_r+0x904>
 8011cb4:	9b03      	ldr	r3, [sp, #12]
 8011cb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011cba:	0d1b      	lsrs	r3, r3, #20
 8011cbc:	051b      	lsls	r3, r3, #20
 8011cbe:	b183      	cbz	r3, 8011ce2 <_dtoa_r+0x90a>
 8011cc0:	9b05      	ldr	r3, [sp, #20]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	9305      	str	r3, [sp, #20]
 8011cc6:	9b06      	ldr	r3, [sp, #24]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	9306      	str	r3, [sp, #24]
 8011ccc:	f04f 0801 	mov.w	r8, #1
 8011cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	f47f af6f 	bne.w	8011bb6 <_dtoa_r+0x7de>
 8011cd8:	2001      	movs	r0, #1
 8011cda:	e774      	b.n	8011bc6 <_dtoa_r+0x7ee>
 8011cdc:	f04f 0800 	mov.w	r8, #0
 8011ce0:	e7f6      	b.n	8011cd0 <_dtoa_r+0x8f8>
 8011ce2:	4698      	mov	r8, r3
 8011ce4:	e7f4      	b.n	8011cd0 <_dtoa_r+0x8f8>
 8011ce6:	d082      	beq.n	8011bee <_dtoa_r+0x816>
 8011ce8:	9a05      	ldr	r2, [sp, #20]
 8011cea:	331c      	adds	r3, #28
 8011cec:	441a      	add	r2, r3
 8011cee:	9205      	str	r2, [sp, #20]
 8011cf0:	9a06      	ldr	r2, [sp, #24]
 8011cf2:	441a      	add	r2, r3
 8011cf4:	441d      	add	r5, r3
 8011cf6:	9206      	str	r2, [sp, #24]
 8011cf8:	e779      	b.n	8011bee <_dtoa_r+0x816>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	e7f4      	b.n	8011ce8 <_dtoa_r+0x910>
 8011cfe:	9b04      	ldr	r3, [sp, #16]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	dc37      	bgt.n	8011d74 <_dtoa_r+0x99c>
 8011d04:	9b07      	ldr	r3, [sp, #28]
 8011d06:	2b02      	cmp	r3, #2
 8011d08:	dd34      	ble.n	8011d74 <_dtoa_r+0x99c>
 8011d0a:	9b04      	ldr	r3, [sp, #16]
 8011d0c:	9301      	str	r3, [sp, #4]
 8011d0e:	9b01      	ldr	r3, [sp, #4]
 8011d10:	b963      	cbnz	r3, 8011d2c <_dtoa_r+0x954>
 8011d12:	4631      	mov	r1, r6
 8011d14:	2205      	movs	r2, #5
 8011d16:	4620      	mov	r0, r4
 8011d18:	f000 fd68 	bl	80127ec <__multadd>
 8011d1c:	4601      	mov	r1, r0
 8011d1e:	4606      	mov	r6, r0
 8011d20:	4650      	mov	r0, sl
 8011d22:	f000 ffc7 	bl	8012cb4 <__mcmp>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	f73f adbb 	bgt.w	80118a2 <_dtoa_r+0x4ca>
 8011d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d2e:	9d00      	ldr	r5, [sp, #0]
 8011d30:	ea6f 0b03 	mvn.w	fp, r3
 8011d34:	f04f 0800 	mov.w	r8, #0
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f000 fd34 	bl	80127a8 <_Bfree>
 8011d40:	2f00      	cmp	r7, #0
 8011d42:	f43f aeab 	beq.w	8011a9c <_dtoa_r+0x6c4>
 8011d46:	f1b8 0f00 	cmp.w	r8, #0
 8011d4a:	d005      	beq.n	8011d58 <_dtoa_r+0x980>
 8011d4c:	45b8      	cmp	r8, r7
 8011d4e:	d003      	beq.n	8011d58 <_dtoa_r+0x980>
 8011d50:	4641      	mov	r1, r8
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 fd28 	bl	80127a8 <_Bfree>
 8011d58:	4639      	mov	r1, r7
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f000 fd24 	bl	80127a8 <_Bfree>
 8011d60:	e69c      	b.n	8011a9c <_dtoa_r+0x6c4>
 8011d62:	2600      	movs	r6, #0
 8011d64:	4637      	mov	r7, r6
 8011d66:	e7e1      	b.n	8011d2c <_dtoa_r+0x954>
 8011d68:	46bb      	mov	fp, r7
 8011d6a:	4637      	mov	r7, r6
 8011d6c:	e599      	b.n	80118a2 <_dtoa_r+0x4ca>
 8011d6e:	bf00      	nop
 8011d70:	40240000 	.word	0x40240000
 8011d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f000 80c8 	beq.w	8011f0c <_dtoa_r+0xb34>
 8011d7c:	9b04      	ldr	r3, [sp, #16]
 8011d7e:	9301      	str	r3, [sp, #4]
 8011d80:	2d00      	cmp	r5, #0
 8011d82:	dd05      	ble.n	8011d90 <_dtoa_r+0x9b8>
 8011d84:	4639      	mov	r1, r7
 8011d86:	462a      	mov	r2, r5
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f000 ff27 	bl	8012bdc <__lshift>
 8011d8e:	4607      	mov	r7, r0
 8011d90:	f1b8 0f00 	cmp.w	r8, #0
 8011d94:	d05b      	beq.n	8011e4e <_dtoa_r+0xa76>
 8011d96:	6879      	ldr	r1, [r7, #4]
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f000 fcc5 	bl	8012728 <_Balloc>
 8011d9e:	4605      	mov	r5, r0
 8011da0:	b928      	cbnz	r0, 8011dae <_dtoa_r+0x9d6>
 8011da2:	4b83      	ldr	r3, [pc, #524]	; (8011fb0 <_dtoa_r+0xbd8>)
 8011da4:	4602      	mov	r2, r0
 8011da6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011daa:	f7ff bb2e 	b.w	801140a <_dtoa_r+0x32>
 8011dae:	693a      	ldr	r2, [r7, #16]
 8011db0:	3202      	adds	r2, #2
 8011db2:	0092      	lsls	r2, r2, #2
 8011db4:	f107 010c 	add.w	r1, r7, #12
 8011db8:	300c      	adds	r0, #12
 8011dba:	f7ff fa4a 	bl	8011252 <memcpy>
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	4629      	mov	r1, r5
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f000 ff0a 	bl	8012bdc <__lshift>
 8011dc8:	9b00      	ldr	r3, [sp, #0]
 8011dca:	3301      	adds	r3, #1
 8011dcc:	9304      	str	r3, [sp, #16]
 8011dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	9308      	str	r3, [sp, #32]
 8011dd6:	9b02      	ldr	r3, [sp, #8]
 8011dd8:	f003 0301 	and.w	r3, r3, #1
 8011ddc:	46b8      	mov	r8, r7
 8011dde:	9306      	str	r3, [sp, #24]
 8011de0:	4607      	mov	r7, r0
 8011de2:	9b04      	ldr	r3, [sp, #16]
 8011de4:	4631      	mov	r1, r6
 8011de6:	3b01      	subs	r3, #1
 8011de8:	4650      	mov	r0, sl
 8011dea:	9301      	str	r3, [sp, #4]
 8011dec:	f7ff fa6c 	bl	80112c8 <quorem>
 8011df0:	4641      	mov	r1, r8
 8011df2:	9002      	str	r0, [sp, #8]
 8011df4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011df8:	4650      	mov	r0, sl
 8011dfa:	f000 ff5b 	bl	8012cb4 <__mcmp>
 8011dfe:	463a      	mov	r2, r7
 8011e00:	9005      	str	r0, [sp, #20]
 8011e02:	4631      	mov	r1, r6
 8011e04:	4620      	mov	r0, r4
 8011e06:	f000 ff71 	bl	8012cec <__mdiff>
 8011e0a:	68c2      	ldr	r2, [r0, #12]
 8011e0c:	4605      	mov	r5, r0
 8011e0e:	bb02      	cbnz	r2, 8011e52 <_dtoa_r+0xa7a>
 8011e10:	4601      	mov	r1, r0
 8011e12:	4650      	mov	r0, sl
 8011e14:	f000 ff4e 	bl	8012cb4 <__mcmp>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8011e20:	f000 fcc2 	bl	80127a8 <_Bfree>
 8011e24:	9b07      	ldr	r3, [sp, #28]
 8011e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e28:	9d04      	ldr	r5, [sp, #16]
 8011e2a:	ea43 0102 	orr.w	r1, r3, r2
 8011e2e:	9b06      	ldr	r3, [sp, #24]
 8011e30:	4319      	orrs	r1, r3
 8011e32:	d110      	bne.n	8011e56 <_dtoa_r+0xa7e>
 8011e34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011e38:	d029      	beq.n	8011e8e <_dtoa_r+0xab6>
 8011e3a:	9b05      	ldr	r3, [sp, #20]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	dd02      	ble.n	8011e46 <_dtoa_r+0xa6e>
 8011e40:	9b02      	ldr	r3, [sp, #8]
 8011e42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011e46:	9b01      	ldr	r3, [sp, #4]
 8011e48:	f883 9000 	strb.w	r9, [r3]
 8011e4c:	e774      	b.n	8011d38 <_dtoa_r+0x960>
 8011e4e:	4638      	mov	r0, r7
 8011e50:	e7ba      	b.n	8011dc8 <_dtoa_r+0x9f0>
 8011e52:	2201      	movs	r2, #1
 8011e54:	e7e1      	b.n	8011e1a <_dtoa_r+0xa42>
 8011e56:	9b05      	ldr	r3, [sp, #20]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	db04      	blt.n	8011e66 <_dtoa_r+0xa8e>
 8011e5c:	9907      	ldr	r1, [sp, #28]
 8011e5e:	430b      	orrs	r3, r1
 8011e60:	9906      	ldr	r1, [sp, #24]
 8011e62:	430b      	orrs	r3, r1
 8011e64:	d120      	bne.n	8011ea8 <_dtoa_r+0xad0>
 8011e66:	2a00      	cmp	r2, #0
 8011e68:	dded      	ble.n	8011e46 <_dtoa_r+0xa6e>
 8011e6a:	4651      	mov	r1, sl
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	4620      	mov	r0, r4
 8011e70:	f000 feb4 	bl	8012bdc <__lshift>
 8011e74:	4631      	mov	r1, r6
 8011e76:	4682      	mov	sl, r0
 8011e78:	f000 ff1c 	bl	8012cb4 <__mcmp>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	dc03      	bgt.n	8011e88 <_dtoa_r+0xab0>
 8011e80:	d1e1      	bne.n	8011e46 <_dtoa_r+0xa6e>
 8011e82:	f019 0f01 	tst.w	r9, #1
 8011e86:	d0de      	beq.n	8011e46 <_dtoa_r+0xa6e>
 8011e88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011e8c:	d1d8      	bne.n	8011e40 <_dtoa_r+0xa68>
 8011e8e:	9a01      	ldr	r2, [sp, #4]
 8011e90:	2339      	movs	r3, #57	; 0x39
 8011e92:	7013      	strb	r3, [r2, #0]
 8011e94:	462b      	mov	r3, r5
 8011e96:	461d      	mov	r5, r3
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011e9e:	2a39      	cmp	r2, #57	; 0x39
 8011ea0:	d06c      	beq.n	8011f7c <_dtoa_r+0xba4>
 8011ea2:	3201      	adds	r2, #1
 8011ea4:	701a      	strb	r2, [r3, #0]
 8011ea6:	e747      	b.n	8011d38 <_dtoa_r+0x960>
 8011ea8:	2a00      	cmp	r2, #0
 8011eaa:	dd07      	ble.n	8011ebc <_dtoa_r+0xae4>
 8011eac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011eb0:	d0ed      	beq.n	8011e8e <_dtoa_r+0xab6>
 8011eb2:	9a01      	ldr	r2, [sp, #4]
 8011eb4:	f109 0301 	add.w	r3, r9, #1
 8011eb8:	7013      	strb	r3, [r2, #0]
 8011eba:	e73d      	b.n	8011d38 <_dtoa_r+0x960>
 8011ebc:	9b04      	ldr	r3, [sp, #16]
 8011ebe:	9a08      	ldr	r2, [sp, #32]
 8011ec0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d043      	beq.n	8011f50 <_dtoa_r+0xb78>
 8011ec8:	4651      	mov	r1, sl
 8011eca:	2300      	movs	r3, #0
 8011ecc:	220a      	movs	r2, #10
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f000 fc8c 	bl	80127ec <__multadd>
 8011ed4:	45b8      	cmp	r8, r7
 8011ed6:	4682      	mov	sl, r0
 8011ed8:	f04f 0300 	mov.w	r3, #0
 8011edc:	f04f 020a 	mov.w	r2, #10
 8011ee0:	4641      	mov	r1, r8
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	d107      	bne.n	8011ef6 <_dtoa_r+0xb1e>
 8011ee6:	f000 fc81 	bl	80127ec <__multadd>
 8011eea:	4680      	mov	r8, r0
 8011eec:	4607      	mov	r7, r0
 8011eee:	9b04      	ldr	r3, [sp, #16]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	9304      	str	r3, [sp, #16]
 8011ef4:	e775      	b.n	8011de2 <_dtoa_r+0xa0a>
 8011ef6:	f000 fc79 	bl	80127ec <__multadd>
 8011efa:	4639      	mov	r1, r7
 8011efc:	4680      	mov	r8, r0
 8011efe:	2300      	movs	r3, #0
 8011f00:	220a      	movs	r2, #10
 8011f02:	4620      	mov	r0, r4
 8011f04:	f000 fc72 	bl	80127ec <__multadd>
 8011f08:	4607      	mov	r7, r0
 8011f0a:	e7f0      	b.n	8011eee <_dtoa_r+0xb16>
 8011f0c:	9b04      	ldr	r3, [sp, #16]
 8011f0e:	9301      	str	r3, [sp, #4]
 8011f10:	9d00      	ldr	r5, [sp, #0]
 8011f12:	4631      	mov	r1, r6
 8011f14:	4650      	mov	r0, sl
 8011f16:	f7ff f9d7 	bl	80112c8 <quorem>
 8011f1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011f1e:	9b00      	ldr	r3, [sp, #0]
 8011f20:	f805 9b01 	strb.w	r9, [r5], #1
 8011f24:	1aea      	subs	r2, r5, r3
 8011f26:	9b01      	ldr	r3, [sp, #4]
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	dd07      	ble.n	8011f3c <_dtoa_r+0xb64>
 8011f2c:	4651      	mov	r1, sl
 8011f2e:	2300      	movs	r3, #0
 8011f30:	220a      	movs	r2, #10
 8011f32:	4620      	mov	r0, r4
 8011f34:	f000 fc5a 	bl	80127ec <__multadd>
 8011f38:	4682      	mov	sl, r0
 8011f3a:	e7ea      	b.n	8011f12 <_dtoa_r+0xb3a>
 8011f3c:	9b01      	ldr	r3, [sp, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	bfc8      	it	gt
 8011f42:	461d      	movgt	r5, r3
 8011f44:	9b00      	ldr	r3, [sp, #0]
 8011f46:	bfd8      	it	le
 8011f48:	2501      	movle	r5, #1
 8011f4a:	441d      	add	r5, r3
 8011f4c:	f04f 0800 	mov.w	r8, #0
 8011f50:	4651      	mov	r1, sl
 8011f52:	2201      	movs	r2, #1
 8011f54:	4620      	mov	r0, r4
 8011f56:	f000 fe41 	bl	8012bdc <__lshift>
 8011f5a:	4631      	mov	r1, r6
 8011f5c:	4682      	mov	sl, r0
 8011f5e:	f000 fea9 	bl	8012cb4 <__mcmp>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	dc96      	bgt.n	8011e94 <_dtoa_r+0xabc>
 8011f66:	d102      	bne.n	8011f6e <_dtoa_r+0xb96>
 8011f68:	f019 0f01 	tst.w	r9, #1
 8011f6c:	d192      	bne.n	8011e94 <_dtoa_r+0xabc>
 8011f6e:	462b      	mov	r3, r5
 8011f70:	461d      	mov	r5, r3
 8011f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f76:	2a30      	cmp	r2, #48	; 0x30
 8011f78:	d0fa      	beq.n	8011f70 <_dtoa_r+0xb98>
 8011f7a:	e6dd      	b.n	8011d38 <_dtoa_r+0x960>
 8011f7c:	9a00      	ldr	r2, [sp, #0]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d189      	bne.n	8011e96 <_dtoa_r+0xabe>
 8011f82:	f10b 0b01 	add.w	fp, fp, #1
 8011f86:	2331      	movs	r3, #49	; 0x31
 8011f88:	e796      	b.n	8011eb8 <_dtoa_r+0xae0>
 8011f8a:	4b0a      	ldr	r3, [pc, #40]	; (8011fb4 <_dtoa_r+0xbdc>)
 8011f8c:	f7ff ba99 	b.w	80114c2 <_dtoa_r+0xea>
 8011f90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	f47f aa6d 	bne.w	8011472 <_dtoa_r+0x9a>
 8011f98:	4b07      	ldr	r3, [pc, #28]	; (8011fb8 <_dtoa_r+0xbe0>)
 8011f9a:	f7ff ba92 	b.w	80114c2 <_dtoa_r+0xea>
 8011f9e:	9b01      	ldr	r3, [sp, #4]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	dcb5      	bgt.n	8011f10 <_dtoa_r+0xb38>
 8011fa4:	9b07      	ldr	r3, [sp, #28]
 8011fa6:	2b02      	cmp	r3, #2
 8011fa8:	f73f aeb1 	bgt.w	8011d0e <_dtoa_r+0x936>
 8011fac:	e7b0      	b.n	8011f10 <_dtoa_r+0xb38>
 8011fae:	bf00      	nop
 8011fb0:	08013e64 	.word	0x08013e64
 8011fb4:	08013d21 	.word	0x08013d21
 8011fb8:	08013dff 	.word	0x08013dff

08011fbc <_free_r>:
 8011fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fbe:	2900      	cmp	r1, #0
 8011fc0:	d044      	beq.n	801204c <_free_r+0x90>
 8011fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fc6:	9001      	str	r0, [sp, #4]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	f1a1 0404 	sub.w	r4, r1, #4
 8011fce:	bfb8      	it	lt
 8011fd0:	18e4      	addlt	r4, r4, r3
 8011fd2:	f7fd f941 	bl	800f258 <__malloc_lock>
 8011fd6:	4a1e      	ldr	r2, [pc, #120]	; (8012050 <_free_r+0x94>)
 8011fd8:	9801      	ldr	r0, [sp, #4]
 8011fda:	6813      	ldr	r3, [r2, #0]
 8011fdc:	b933      	cbnz	r3, 8011fec <_free_r+0x30>
 8011fde:	6063      	str	r3, [r4, #4]
 8011fe0:	6014      	str	r4, [r2, #0]
 8011fe2:	b003      	add	sp, #12
 8011fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fe8:	f7fd b93c 	b.w	800f264 <__malloc_unlock>
 8011fec:	42a3      	cmp	r3, r4
 8011fee:	d908      	bls.n	8012002 <_free_r+0x46>
 8011ff0:	6825      	ldr	r5, [r4, #0]
 8011ff2:	1961      	adds	r1, r4, r5
 8011ff4:	428b      	cmp	r3, r1
 8011ff6:	bf01      	itttt	eq
 8011ff8:	6819      	ldreq	r1, [r3, #0]
 8011ffa:	685b      	ldreq	r3, [r3, #4]
 8011ffc:	1949      	addeq	r1, r1, r5
 8011ffe:	6021      	streq	r1, [r4, #0]
 8012000:	e7ed      	b.n	8011fde <_free_r+0x22>
 8012002:	461a      	mov	r2, r3
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	b10b      	cbz	r3, 801200c <_free_r+0x50>
 8012008:	42a3      	cmp	r3, r4
 801200a:	d9fa      	bls.n	8012002 <_free_r+0x46>
 801200c:	6811      	ldr	r1, [r2, #0]
 801200e:	1855      	adds	r5, r2, r1
 8012010:	42a5      	cmp	r5, r4
 8012012:	d10b      	bne.n	801202c <_free_r+0x70>
 8012014:	6824      	ldr	r4, [r4, #0]
 8012016:	4421      	add	r1, r4
 8012018:	1854      	adds	r4, r2, r1
 801201a:	42a3      	cmp	r3, r4
 801201c:	6011      	str	r1, [r2, #0]
 801201e:	d1e0      	bne.n	8011fe2 <_free_r+0x26>
 8012020:	681c      	ldr	r4, [r3, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	6053      	str	r3, [r2, #4]
 8012026:	440c      	add	r4, r1
 8012028:	6014      	str	r4, [r2, #0]
 801202a:	e7da      	b.n	8011fe2 <_free_r+0x26>
 801202c:	d902      	bls.n	8012034 <_free_r+0x78>
 801202e:	230c      	movs	r3, #12
 8012030:	6003      	str	r3, [r0, #0]
 8012032:	e7d6      	b.n	8011fe2 <_free_r+0x26>
 8012034:	6825      	ldr	r5, [r4, #0]
 8012036:	1961      	adds	r1, r4, r5
 8012038:	428b      	cmp	r3, r1
 801203a:	bf04      	itt	eq
 801203c:	6819      	ldreq	r1, [r3, #0]
 801203e:	685b      	ldreq	r3, [r3, #4]
 8012040:	6063      	str	r3, [r4, #4]
 8012042:	bf04      	itt	eq
 8012044:	1949      	addeq	r1, r1, r5
 8012046:	6021      	streq	r1, [r4, #0]
 8012048:	6054      	str	r4, [r2, #4]
 801204a:	e7ca      	b.n	8011fe2 <_free_r+0x26>
 801204c:	b003      	add	sp, #12
 801204e:	bd30      	pop	{r4, r5, pc}
 8012050:	20001db4 	.word	0x20001db4

08012054 <rshift>:
 8012054:	6903      	ldr	r3, [r0, #16]
 8012056:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801205a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801205e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012062:	f100 0414 	add.w	r4, r0, #20
 8012066:	dd45      	ble.n	80120f4 <rshift+0xa0>
 8012068:	f011 011f 	ands.w	r1, r1, #31
 801206c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012070:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012074:	d10c      	bne.n	8012090 <rshift+0x3c>
 8012076:	f100 0710 	add.w	r7, r0, #16
 801207a:	4629      	mov	r1, r5
 801207c:	42b1      	cmp	r1, r6
 801207e:	d334      	bcc.n	80120ea <rshift+0x96>
 8012080:	1a9b      	subs	r3, r3, r2
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	1eea      	subs	r2, r5, #3
 8012086:	4296      	cmp	r6, r2
 8012088:	bf38      	it	cc
 801208a:	2300      	movcc	r3, #0
 801208c:	4423      	add	r3, r4
 801208e:	e015      	b.n	80120bc <rshift+0x68>
 8012090:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012094:	f1c1 0820 	rsb	r8, r1, #32
 8012098:	40cf      	lsrs	r7, r1
 801209a:	f105 0e04 	add.w	lr, r5, #4
 801209e:	46a1      	mov	r9, r4
 80120a0:	4576      	cmp	r6, lr
 80120a2:	46f4      	mov	ip, lr
 80120a4:	d815      	bhi.n	80120d2 <rshift+0x7e>
 80120a6:	1a9a      	subs	r2, r3, r2
 80120a8:	0092      	lsls	r2, r2, #2
 80120aa:	3a04      	subs	r2, #4
 80120ac:	3501      	adds	r5, #1
 80120ae:	42ae      	cmp	r6, r5
 80120b0:	bf38      	it	cc
 80120b2:	2200      	movcc	r2, #0
 80120b4:	18a3      	adds	r3, r4, r2
 80120b6:	50a7      	str	r7, [r4, r2]
 80120b8:	b107      	cbz	r7, 80120bc <rshift+0x68>
 80120ba:	3304      	adds	r3, #4
 80120bc:	1b1a      	subs	r2, r3, r4
 80120be:	42a3      	cmp	r3, r4
 80120c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80120c4:	bf08      	it	eq
 80120c6:	2300      	moveq	r3, #0
 80120c8:	6102      	str	r2, [r0, #16]
 80120ca:	bf08      	it	eq
 80120cc:	6143      	streq	r3, [r0, #20]
 80120ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120d2:	f8dc c000 	ldr.w	ip, [ip]
 80120d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80120da:	ea4c 0707 	orr.w	r7, ip, r7
 80120de:	f849 7b04 	str.w	r7, [r9], #4
 80120e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80120e6:	40cf      	lsrs	r7, r1
 80120e8:	e7da      	b.n	80120a0 <rshift+0x4c>
 80120ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80120ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80120f2:	e7c3      	b.n	801207c <rshift+0x28>
 80120f4:	4623      	mov	r3, r4
 80120f6:	e7e1      	b.n	80120bc <rshift+0x68>

080120f8 <__hexdig_fun>:
 80120f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80120fc:	2b09      	cmp	r3, #9
 80120fe:	d802      	bhi.n	8012106 <__hexdig_fun+0xe>
 8012100:	3820      	subs	r0, #32
 8012102:	b2c0      	uxtb	r0, r0
 8012104:	4770      	bx	lr
 8012106:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801210a:	2b05      	cmp	r3, #5
 801210c:	d801      	bhi.n	8012112 <__hexdig_fun+0x1a>
 801210e:	3847      	subs	r0, #71	; 0x47
 8012110:	e7f7      	b.n	8012102 <__hexdig_fun+0xa>
 8012112:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012116:	2b05      	cmp	r3, #5
 8012118:	d801      	bhi.n	801211e <__hexdig_fun+0x26>
 801211a:	3827      	subs	r0, #39	; 0x27
 801211c:	e7f1      	b.n	8012102 <__hexdig_fun+0xa>
 801211e:	2000      	movs	r0, #0
 8012120:	4770      	bx	lr
	...

08012124 <__gethex>:
 8012124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012128:	4617      	mov	r7, r2
 801212a:	680a      	ldr	r2, [r1, #0]
 801212c:	b085      	sub	sp, #20
 801212e:	f102 0b02 	add.w	fp, r2, #2
 8012132:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012136:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801213a:	4681      	mov	r9, r0
 801213c:	468a      	mov	sl, r1
 801213e:	9302      	str	r3, [sp, #8]
 8012140:	32fe      	adds	r2, #254	; 0xfe
 8012142:	eb02 030b 	add.w	r3, r2, fp
 8012146:	46d8      	mov	r8, fp
 8012148:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801214c:	9301      	str	r3, [sp, #4]
 801214e:	2830      	cmp	r0, #48	; 0x30
 8012150:	d0f7      	beq.n	8012142 <__gethex+0x1e>
 8012152:	f7ff ffd1 	bl	80120f8 <__hexdig_fun>
 8012156:	4604      	mov	r4, r0
 8012158:	2800      	cmp	r0, #0
 801215a:	d138      	bne.n	80121ce <__gethex+0xaa>
 801215c:	49a7      	ldr	r1, [pc, #668]	; (80123fc <__gethex+0x2d8>)
 801215e:	2201      	movs	r2, #1
 8012160:	4640      	mov	r0, r8
 8012162:	f7fe ff62 	bl	801102a <strncmp>
 8012166:	4606      	mov	r6, r0
 8012168:	2800      	cmp	r0, #0
 801216a:	d169      	bne.n	8012240 <__gethex+0x11c>
 801216c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012170:	465d      	mov	r5, fp
 8012172:	f7ff ffc1 	bl	80120f8 <__hexdig_fun>
 8012176:	2800      	cmp	r0, #0
 8012178:	d064      	beq.n	8012244 <__gethex+0x120>
 801217a:	465a      	mov	r2, fp
 801217c:	7810      	ldrb	r0, [r2, #0]
 801217e:	2830      	cmp	r0, #48	; 0x30
 8012180:	4690      	mov	r8, r2
 8012182:	f102 0201 	add.w	r2, r2, #1
 8012186:	d0f9      	beq.n	801217c <__gethex+0x58>
 8012188:	f7ff ffb6 	bl	80120f8 <__hexdig_fun>
 801218c:	2301      	movs	r3, #1
 801218e:	fab0 f480 	clz	r4, r0
 8012192:	0964      	lsrs	r4, r4, #5
 8012194:	465e      	mov	r6, fp
 8012196:	9301      	str	r3, [sp, #4]
 8012198:	4642      	mov	r2, r8
 801219a:	4615      	mov	r5, r2
 801219c:	3201      	adds	r2, #1
 801219e:	7828      	ldrb	r0, [r5, #0]
 80121a0:	f7ff ffaa 	bl	80120f8 <__hexdig_fun>
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d1f8      	bne.n	801219a <__gethex+0x76>
 80121a8:	4994      	ldr	r1, [pc, #592]	; (80123fc <__gethex+0x2d8>)
 80121aa:	2201      	movs	r2, #1
 80121ac:	4628      	mov	r0, r5
 80121ae:	f7fe ff3c 	bl	801102a <strncmp>
 80121b2:	b978      	cbnz	r0, 80121d4 <__gethex+0xb0>
 80121b4:	b946      	cbnz	r6, 80121c8 <__gethex+0xa4>
 80121b6:	1c6e      	adds	r6, r5, #1
 80121b8:	4632      	mov	r2, r6
 80121ba:	4615      	mov	r5, r2
 80121bc:	3201      	adds	r2, #1
 80121be:	7828      	ldrb	r0, [r5, #0]
 80121c0:	f7ff ff9a 	bl	80120f8 <__hexdig_fun>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d1f8      	bne.n	80121ba <__gethex+0x96>
 80121c8:	1b73      	subs	r3, r6, r5
 80121ca:	009e      	lsls	r6, r3, #2
 80121cc:	e004      	b.n	80121d8 <__gethex+0xb4>
 80121ce:	2400      	movs	r4, #0
 80121d0:	4626      	mov	r6, r4
 80121d2:	e7e1      	b.n	8012198 <__gethex+0x74>
 80121d4:	2e00      	cmp	r6, #0
 80121d6:	d1f7      	bne.n	80121c8 <__gethex+0xa4>
 80121d8:	782b      	ldrb	r3, [r5, #0]
 80121da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80121de:	2b50      	cmp	r3, #80	; 0x50
 80121e0:	d13d      	bne.n	801225e <__gethex+0x13a>
 80121e2:	786b      	ldrb	r3, [r5, #1]
 80121e4:	2b2b      	cmp	r3, #43	; 0x2b
 80121e6:	d02f      	beq.n	8012248 <__gethex+0x124>
 80121e8:	2b2d      	cmp	r3, #45	; 0x2d
 80121ea:	d031      	beq.n	8012250 <__gethex+0x12c>
 80121ec:	1c69      	adds	r1, r5, #1
 80121ee:	f04f 0b00 	mov.w	fp, #0
 80121f2:	7808      	ldrb	r0, [r1, #0]
 80121f4:	f7ff ff80 	bl	80120f8 <__hexdig_fun>
 80121f8:	1e42      	subs	r2, r0, #1
 80121fa:	b2d2      	uxtb	r2, r2
 80121fc:	2a18      	cmp	r2, #24
 80121fe:	d82e      	bhi.n	801225e <__gethex+0x13a>
 8012200:	f1a0 0210 	sub.w	r2, r0, #16
 8012204:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012208:	f7ff ff76 	bl	80120f8 <__hexdig_fun>
 801220c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012210:	fa5f fc8c 	uxtb.w	ip, ip
 8012214:	f1bc 0f18 	cmp.w	ip, #24
 8012218:	d91d      	bls.n	8012256 <__gethex+0x132>
 801221a:	f1bb 0f00 	cmp.w	fp, #0
 801221e:	d000      	beq.n	8012222 <__gethex+0xfe>
 8012220:	4252      	negs	r2, r2
 8012222:	4416      	add	r6, r2
 8012224:	f8ca 1000 	str.w	r1, [sl]
 8012228:	b1dc      	cbz	r4, 8012262 <__gethex+0x13e>
 801222a:	9b01      	ldr	r3, [sp, #4]
 801222c:	2b00      	cmp	r3, #0
 801222e:	bf14      	ite	ne
 8012230:	f04f 0800 	movne.w	r8, #0
 8012234:	f04f 0806 	moveq.w	r8, #6
 8012238:	4640      	mov	r0, r8
 801223a:	b005      	add	sp, #20
 801223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012240:	4645      	mov	r5, r8
 8012242:	4626      	mov	r6, r4
 8012244:	2401      	movs	r4, #1
 8012246:	e7c7      	b.n	80121d8 <__gethex+0xb4>
 8012248:	f04f 0b00 	mov.w	fp, #0
 801224c:	1ca9      	adds	r1, r5, #2
 801224e:	e7d0      	b.n	80121f2 <__gethex+0xce>
 8012250:	f04f 0b01 	mov.w	fp, #1
 8012254:	e7fa      	b.n	801224c <__gethex+0x128>
 8012256:	230a      	movs	r3, #10
 8012258:	fb03 0002 	mla	r0, r3, r2, r0
 801225c:	e7d0      	b.n	8012200 <__gethex+0xdc>
 801225e:	4629      	mov	r1, r5
 8012260:	e7e0      	b.n	8012224 <__gethex+0x100>
 8012262:	eba5 0308 	sub.w	r3, r5, r8
 8012266:	3b01      	subs	r3, #1
 8012268:	4621      	mov	r1, r4
 801226a:	2b07      	cmp	r3, #7
 801226c:	dc0a      	bgt.n	8012284 <__gethex+0x160>
 801226e:	4648      	mov	r0, r9
 8012270:	f000 fa5a 	bl	8012728 <_Balloc>
 8012274:	4604      	mov	r4, r0
 8012276:	b940      	cbnz	r0, 801228a <__gethex+0x166>
 8012278:	4b61      	ldr	r3, [pc, #388]	; (8012400 <__gethex+0x2dc>)
 801227a:	4602      	mov	r2, r0
 801227c:	21e4      	movs	r1, #228	; 0xe4
 801227e:	4861      	ldr	r0, [pc, #388]	; (8012404 <__gethex+0x2e0>)
 8012280:	f7ff f804 	bl	801128c <__assert_func>
 8012284:	3101      	adds	r1, #1
 8012286:	105b      	asrs	r3, r3, #1
 8012288:	e7ef      	b.n	801226a <__gethex+0x146>
 801228a:	f100 0a14 	add.w	sl, r0, #20
 801228e:	2300      	movs	r3, #0
 8012290:	495a      	ldr	r1, [pc, #360]	; (80123fc <__gethex+0x2d8>)
 8012292:	f8cd a004 	str.w	sl, [sp, #4]
 8012296:	469b      	mov	fp, r3
 8012298:	45a8      	cmp	r8, r5
 801229a:	d342      	bcc.n	8012322 <__gethex+0x1fe>
 801229c:	9801      	ldr	r0, [sp, #4]
 801229e:	f840 bb04 	str.w	fp, [r0], #4
 80122a2:	eba0 000a 	sub.w	r0, r0, sl
 80122a6:	1080      	asrs	r0, r0, #2
 80122a8:	6120      	str	r0, [r4, #16]
 80122aa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80122ae:	4658      	mov	r0, fp
 80122b0:	f000 fb2c 	bl	801290c <__hi0bits>
 80122b4:	683d      	ldr	r5, [r7, #0]
 80122b6:	eba8 0000 	sub.w	r0, r8, r0
 80122ba:	42a8      	cmp	r0, r5
 80122bc:	dd59      	ble.n	8012372 <__gethex+0x24e>
 80122be:	eba0 0805 	sub.w	r8, r0, r5
 80122c2:	4641      	mov	r1, r8
 80122c4:	4620      	mov	r0, r4
 80122c6:	f000 febb 	bl	8013040 <__any_on>
 80122ca:	4683      	mov	fp, r0
 80122cc:	b1b8      	cbz	r0, 80122fe <__gethex+0x1da>
 80122ce:	f108 33ff 	add.w	r3, r8, #4294967295
 80122d2:	1159      	asrs	r1, r3, #5
 80122d4:	f003 021f 	and.w	r2, r3, #31
 80122d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80122dc:	f04f 0b01 	mov.w	fp, #1
 80122e0:	fa0b f202 	lsl.w	r2, fp, r2
 80122e4:	420a      	tst	r2, r1
 80122e6:	d00a      	beq.n	80122fe <__gethex+0x1da>
 80122e8:	455b      	cmp	r3, fp
 80122ea:	dd06      	ble.n	80122fa <__gethex+0x1d6>
 80122ec:	f1a8 0102 	sub.w	r1, r8, #2
 80122f0:	4620      	mov	r0, r4
 80122f2:	f000 fea5 	bl	8013040 <__any_on>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d138      	bne.n	801236c <__gethex+0x248>
 80122fa:	f04f 0b02 	mov.w	fp, #2
 80122fe:	4641      	mov	r1, r8
 8012300:	4620      	mov	r0, r4
 8012302:	f7ff fea7 	bl	8012054 <rshift>
 8012306:	4446      	add	r6, r8
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	42b3      	cmp	r3, r6
 801230c:	da41      	bge.n	8012392 <__gethex+0x26e>
 801230e:	4621      	mov	r1, r4
 8012310:	4648      	mov	r0, r9
 8012312:	f000 fa49 	bl	80127a8 <_Bfree>
 8012316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012318:	2300      	movs	r3, #0
 801231a:	6013      	str	r3, [r2, #0]
 801231c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012320:	e78a      	b.n	8012238 <__gethex+0x114>
 8012322:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8012326:	2a2e      	cmp	r2, #46	; 0x2e
 8012328:	d014      	beq.n	8012354 <__gethex+0x230>
 801232a:	2b20      	cmp	r3, #32
 801232c:	d106      	bne.n	801233c <__gethex+0x218>
 801232e:	9b01      	ldr	r3, [sp, #4]
 8012330:	f843 bb04 	str.w	fp, [r3], #4
 8012334:	f04f 0b00 	mov.w	fp, #0
 8012338:	9301      	str	r3, [sp, #4]
 801233a:	465b      	mov	r3, fp
 801233c:	7828      	ldrb	r0, [r5, #0]
 801233e:	9303      	str	r3, [sp, #12]
 8012340:	f7ff feda 	bl	80120f8 <__hexdig_fun>
 8012344:	9b03      	ldr	r3, [sp, #12]
 8012346:	f000 000f 	and.w	r0, r0, #15
 801234a:	4098      	lsls	r0, r3
 801234c:	ea4b 0b00 	orr.w	fp, fp, r0
 8012350:	3304      	adds	r3, #4
 8012352:	e7a1      	b.n	8012298 <__gethex+0x174>
 8012354:	45a8      	cmp	r8, r5
 8012356:	d8e8      	bhi.n	801232a <__gethex+0x206>
 8012358:	2201      	movs	r2, #1
 801235a:	4628      	mov	r0, r5
 801235c:	9303      	str	r3, [sp, #12]
 801235e:	f7fe fe64 	bl	801102a <strncmp>
 8012362:	4926      	ldr	r1, [pc, #152]	; (80123fc <__gethex+0x2d8>)
 8012364:	9b03      	ldr	r3, [sp, #12]
 8012366:	2800      	cmp	r0, #0
 8012368:	d1df      	bne.n	801232a <__gethex+0x206>
 801236a:	e795      	b.n	8012298 <__gethex+0x174>
 801236c:	f04f 0b03 	mov.w	fp, #3
 8012370:	e7c5      	b.n	80122fe <__gethex+0x1da>
 8012372:	da0b      	bge.n	801238c <__gethex+0x268>
 8012374:	eba5 0800 	sub.w	r8, r5, r0
 8012378:	4621      	mov	r1, r4
 801237a:	4642      	mov	r2, r8
 801237c:	4648      	mov	r0, r9
 801237e:	f000 fc2d 	bl	8012bdc <__lshift>
 8012382:	eba6 0608 	sub.w	r6, r6, r8
 8012386:	4604      	mov	r4, r0
 8012388:	f100 0a14 	add.w	sl, r0, #20
 801238c:	f04f 0b00 	mov.w	fp, #0
 8012390:	e7ba      	b.n	8012308 <__gethex+0x1e4>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	42b3      	cmp	r3, r6
 8012396:	dd73      	ble.n	8012480 <__gethex+0x35c>
 8012398:	1b9e      	subs	r6, r3, r6
 801239a:	42b5      	cmp	r5, r6
 801239c:	dc34      	bgt.n	8012408 <__gethex+0x2e4>
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d023      	beq.n	80123ec <__gethex+0x2c8>
 80123a4:	2b03      	cmp	r3, #3
 80123a6:	d025      	beq.n	80123f4 <__gethex+0x2d0>
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d115      	bne.n	80123d8 <__gethex+0x2b4>
 80123ac:	42b5      	cmp	r5, r6
 80123ae:	d113      	bne.n	80123d8 <__gethex+0x2b4>
 80123b0:	2d01      	cmp	r5, #1
 80123b2:	d10b      	bne.n	80123cc <__gethex+0x2a8>
 80123b4:	9a02      	ldr	r2, [sp, #8]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6013      	str	r3, [r2, #0]
 80123ba:	2301      	movs	r3, #1
 80123bc:	6123      	str	r3, [r4, #16]
 80123be:	f8ca 3000 	str.w	r3, [sl]
 80123c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123c4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80123c8:	601c      	str	r4, [r3, #0]
 80123ca:	e735      	b.n	8012238 <__gethex+0x114>
 80123cc:	1e69      	subs	r1, r5, #1
 80123ce:	4620      	mov	r0, r4
 80123d0:	f000 fe36 	bl	8013040 <__any_on>
 80123d4:	2800      	cmp	r0, #0
 80123d6:	d1ed      	bne.n	80123b4 <__gethex+0x290>
 80123d8:	4621      	mov	r1, r4
 80123da:	4648      	mov	r0, r9
 80123dc:	f000 f9e4 	bl	80127a8 <_Bfree>
 80123e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123e2:	2300      	movs	r3, #0
 80123e4:	6013      	str	r3, [r2, #0]
 80123e6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80123ea:	e725      	b.n	8012238 <__gethex+0x114>
 80123ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d1f2      	bne.n	80123d8 <__gethex+0x2b4>
 80123f2:	e7df      	b.n	80123b4 <__gethex+0x290>
 80123f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d1dc      	bne.n	80123b4 <__gethex+0x290>
 80123fa:	e7ed      	b.n	80123d8 <__gethex+0x2b4>
 80123fc:	08013bbc 	.word	0x08013bbc
 8012400:	08013e64 	.word	0x08013e64
 8012404:	08013e75 	.word	0x08013e75
 8012408:	f106 38ff 	add.w	r8, r6, #4294967295
 801240c:	f1bb 0f00 	cmp.w	fp, #0
 8012410:	d133      	bne.n	801247a <__gethex+0x356>
 8012412:	f1b8 0f00 	cmp.w	r8, #0
 8012416:	d004      	beq.n	8012422 <__gethex+0x2fe>
 8012418:	4641      	mov	r1, r8
 801241a:	4620      	mov	r0, r4
 801241c:	f000 fe10 	bl	8013040 <__any_on>
 8012420:	4683      	mov	fp, r0
 8012422:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012426:	2301      	movs	r3, #1
 8012428:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801242c:	f008 081f 	and.w	r8, r8, #31
 8012430:	fa03 f308 	lsl.w	r3, r3, r8
 8012434:	4213      	tst	r3, r2
 8012436:	4631      	mov	r1, r6
 8012438:	4620      	mov	r0, r4
 801243a:	bf18      	it	ne
 801243c:	f04b 0b02 	orrne.w	fp, fp, #2
 8012440:	1bad      	subs	r5, r5, r6
 8012442:	f7ff fe07 	bl	8012054 <rshift>
 8012446:	687e      	ldr	r6, [r7, #4]
 8012448:	f04f 0802 	mov.w	r8, #2
 801244c:	f1bb 0f00 	cmp.w	fp, #0
 8012450:	d04a      	beq.n	80124e8 <__gethex+0x3c4>
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b02      	cmp	r3, #2
 8012456:	d016      	beq.n	8012486 <__gethex+0x362>
 8012458:	2b03      	cmp	r3, #3
 801245a:	d018      	beq.n	801248e <__gethex+0x36a>
 801245c:	2b01      	cmp	r3, #1
 801245e:	d109      	bne.n	8012474 <__gethex+0x350>
 8012460:	f01b 0f02 	tst.w	fp, #2
 8012464:	d006      	beq.n	8012474 <__gethex+0x350>
 8012466:	f8da 3000 	ldr.w	r3, [sl]
 801246a:	ea4b 0b03 	orr.w	fp, fp, r3
 801246e:	f01b 0f01 	tst.w	fp, #1
 8012472:	d10f      	bne.n	8012494 <__gethex+0x370>
 8012474:	f048 0810 	orr.w	r8, r8, #16
 8012478:	e036      	b.n	80124e8 <__gethex+0x3c4>
 801247a:	f04f 0b01 	mov.w	fp, #1
 801247e:	e7d0      	b.n	8012422 <__gethex+0x2fe>
 8012480:	f04f 0801 	mov.w	r8, #1
 8012484:	e7e2      	b.n	801244c <__gethex+0x328>
 8012486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012488:	f1c3 0301 	rsb	r3, r3, #1
 801248c:	930f      	str	r3, [sp, #60]	; 0x3c
 801248e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012490:	2b00      	cmp	r3, #0
 8012492:	d0ef      	beq.n	8012474 <__gethex+0x350>
 8012494:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012498:	f104 0214 	add.w	r2, r4, #20
 801249c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80124a0:	9301      	str	r3, [sp, #4]
 80124a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80124a6:	2300      	movs	r3, #0
 80124a8:	4694      	mov	ip, r2
 80124aa:	f852 1b04 	ldr.w	r1, [r2], #4
 80124ae:	f1b1 3fff 	cmp.w	r1, #4294967295
 80124b2:	d01e      	beq.n	80124f2 <__gethex+0x3ce>
 80124b4:	3101      	adds	r1, #1
 80124b6:	f8cc 1000 	str.w	r1, [ip]
 80124ba:	f1b8 0f02 	cmp.w	r8, #2
 80124be:	f104 0214 	add.w	r2, r4, #20
 80124c2:	d13d      	bne.n	8012540 <__gethex+0x41c>
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	3b01      	subs	r3, #1
 80124c8:	42ab      	cmp	r3, r5
 80124ca:	d10b      	bne.n	80124e4 <__gethex+0x3c0>
 80124cc:	1169      	asrs	r1, r5, #5
 80124ce:	2301      	movs	r3, #1
 80124d0:	f005 051f 	and.w	r5, r5, #31
 80124d4:	fa03 f505 	lsl.w	r5, r3, r5
 80124d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124dc:	421d      	tst	r5, r3
 80124de:	bf18      	it	ne
 80124e0:	f04f 0801 	movne.w	r8, #1
 80124e4:	f048 0820 	orr.w	r8, r8, #32
 80124e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124ea:	601c      	str	r4, [r3, #0]
 80124ec:	9b02      	ldr	r3, [sp, #8]
 80124ee:	601e      	str	r6, [r3, #0]
 80124f0:	e6a2      	b.n	8012238 <__gethex+0x114>
 80124f2:	4290      	cmp	r0, r2
 80124f4:	f842 3c04 	str.w	r3, [r2, #-4]
 80124f8:	d8d6      	bhi.n	80124a8 <__gethex+0x384>
 80124fa:	68a2      	ldr	r2, [r4, #8]
 80124fc:	4593      	cmp	fp, r2
 80124fe:	db17      	blt.n	8012530 <__gethex+0x40c>
 8012500:	6861      	ldr	r1, [r4, #4]
 8012502:	4648      	mov	r0, r9
 8012504:	3101      	adds	r1, #1
 8012506:	f000 f90f 	bl	8012728 <_Balloc>
 801250a:	4682      	mov	sl, r0
 801250c:	b918      	cbnz	r0, 8012516 <__gethex+0x3f2>
 801250e:	4b1b      	ldr	r3, [pc, #108]	; (801257c <__gethex+0x458>)
 8012510:	4602      	mov	r2, r0
 8012512:	2184      	movs	r1, #132	; 0x84
 8012514:	e6b3      	b.n	801227e <__gethex+0x15a>
 8012516:	6922      	ldr	r2, [r4, #16]
 8012518:	3202      	adds	r2, #2
 801251a:	f104 010c 	add.w	r1, r4, #12
 801251e:	0092      	lsls	r2, r2, #2
 8012520:	300c      	adds	r0, #12
 8012522:	f7fe fe96 	bl	8011252 <memcpy>
 8012526:	4621      	mov	r1, r4
 8012528:	4648      	mov	r0, r9
 801252a:	f000 f93d 	bl	80127a8 <_Bfree>
 801252e:	4654      	mov	r4, sl
 8012530:	6922      	ldr	r2, [r4, #16]
 8012532:	1c51      	adds	r1, r2, #1
 8012534:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012538:	6121      	str	r1, [r4, #16]
 801253a:	2101      	movs	r1, #1
 801253c:	6151      	str	r1, [r2, #20]
 801253e:	e7bc      	b.n	80124ba <__gethex+0x396>
 8012540:	6921      	ldr	r1, [r4, #16]
 8012542:	4559      	cmp	r1, fp
 8012544:	dd0b      	ble.n	801255e <__gethex+0x43a>
 8012546:	2101      	movs	r1, #1
 8012548:	4620      	mov	r0, r4
 801254a:	f7ff fd83 	bl	8012054 <rshift>
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	3601      	adds	r6, #1
 8012552:	42b3      	cmp	r3, r6
 8012554:	f6ff aedb 	blt.w	801230e <__gethex+0x1ea>
 8012558:	f04f 0801 	mov.w	r8, #1
 801255c:	e7c2      	b.n	80124e4 <__gethex+0x3c0>
 801255e:	f015 051f 	ands.w	r5, r5, #31
 8012562:	d0f9      	beq.n	8012558 <__gethex+0x434>
 8012564:	9b01      	ldr	r3, [sp, #4]
 8012566:	441a      	add	r2, r3
 8012568:	f1c5 0520 	rsb	r5, r5, #32
 801256c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012570:	f000 f9cc 	bl	801290c <__hi0bits>
 8012574:	42a8      	cmp	r0, r5
 8012576:	dbe6      	blt.n	8012546 <__gethex+0x422>
 8012578:	e7ee      	b.n	8012558 <__gethex+0x434>
 801257a:	bf00      	nop
 801257c:	08013e64 	.word	0x08013e64

08012580 <L_shift>:
 8012580:	f1c2 0208 	rsb	r2, r2, #8
 8012584:	0092      	lsls	r2, r2, #2
 8012586:	b570      	push	{r4, r5, r6, lr}
 8012588:	f1c2 0620 	rsb	r6, r2, #32
 801258c:	6843      	ldr	r3, [r0, #4]
 801258e:	6804      	ldr	r4, [r0, #0]
 8012590:	fa03 f506 	lsl.w	r5, r3, r6
 8012594:	432c      	orrs	r4, r5
 8012596:	40d3      	lsrs	r3, r2
 8012598:	6004      	str	r4, [r0, #0]
 801259a:	f840 3f04 	str.w	r3, [r0, #4]!
 801259e:	4288      	cmp	r0, r1
 80125a0:	d3f4      	bcc.n	801258c <L_shift+0xc>
 80125a2:	bd70      	pop	{r4, r5, r6, pc}

080125a4 <__match>:
 80125a4:	b530      	push	{r4, r5, lr}
 80125a6:	6803      	ldr	r3, [r0, #0]
 80125a8:	3301      	adds	r3, #1
 80125aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125ae:	b914      	cbnz	r4, 80125b6 <__match+0x12>
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	2001      	movs	r0, #1
 80125b4:	bd30      	pop	{r4, r5, pc}
 80125b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80125be:	2d19      	cmp	r5, #25
 80125c0:	bf98      	it	ls
 80125c2:	3220      	addls	r2, #32
 80125c4:	42a2      	cmp	r2, r4
 80125c6:	d0f0      	beq.n	80125aa <__match+0x6>
 80125c8:	2000      	movs	r0, #0
 80125ca:	e7f3      	b.n	80125b4 <__match+0x10>

080125cc <__hexnan>:
 80125cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d0:	680b      	ldr	r3, [r1, #0]
 80125d2:	6801      	ldr	r1, [r0, #0]
 80125d4:	115e      	asrs	r6, r3, #5
 80125d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125da:	f013 031f 	ands.w	r3, r3, #31
 80125de:	b087      	sub	sp, #28
 80125e0:	bf18      	it	ne
 80125e2:	3604      	addne	r6, #4
 80125e4:	2500      	movs	r5, #0
 80125e6:	1f37      	subs	r7, r6, #4
 80125e8:	4682      	mov	sl, r0
 80125ea:	4690      	mov	r8, r2
 80125ec:	9301      	str	r3, [sp, #4]
 80125ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80125f2:	46b9      	mov	r9, r7
 80125f4:	463c      	mov	r4, r7
 80125f6:	9502      	str	r5, [sp, #8]
 80125f8:	46ab      	mov	fp, r5
 80125fa:	784a      	ldrb	r2, [r1, #1]
 80125fc:	1c4b      	adds	r3, r1, #1
 80125fe:	9303      	str	r3, [sp, #12]
 8012600:	b342      	cbz	r2, 8012654 <__hexnan+0x88>
 8012602:	4610      	mov	r0, r2
 8012604:	9105      	str	r1, [sp, #20]
 8012606:	9204      	str	r2, [sp, #16]
 8012608:	f7ff fd76 	bl	80120f8 <__hexdig_fun>
 801260c:	2800      	cmp	r0, #0
 801260e:	d14f      	bne.n	80126b0 <__hexnan+0xe4>
 8012610:	9a04      	ldr	r2, [sp, #16]
 8012612:	9905      	ldr	r1, [sp, #20]
 8012614:	2a20      	cmp	r2, #32
 8012616:	d818      	bhi.n	801264a <__hexnan+0x7e>
 8012618:	9b02      	ldr	r3, [sp, #8]
 801261a:	459b      	cmp	fp, r3
 801261c:	dd13      	ble.n	8012646 <__hexnan+0x7a>
 801261e:	454c      	cmp	r4, r9
 8012620:	d206      	bcs.n	8012630 <__hexnan+0x64>
 8012622:	2d07      	cmp	r5, #7
 8012624:	dc04      	bgt.n	8012630 <__hexnan+0x64>
 8012626:	462a      	mov	r2, r5
 8012628:	4649      	mov	r1, r9
 801262a:	4620      	mov	r0, r4
 801262c:	f7ff ffa8 	bl	8012580 <L_shift>
 8012630:	4544      	cmp	r4, r8
 8012632:	d950      	bls.n	80126d6 <__hexnan+0x10a>
 8012634:	2300      	movs	r3, #0
 8012636:	f1a4 0904 	sub.w	r9, r4, #4
 801263a:	f844 3c04 	str.w	r3, [r4, #-4]
 801263e:	f8cd b008 	str.w	fp, [sp, #8]
 8012642:	464c      	mov	r4, r9
 8012644:	461d      	mov	r5, r3
 8012646:	9903      	ldr	r1, [sp, #12]
 8012648:	e7d7      	b.n	80125fa <__hexnan+0x2e>
 801264a:	2a29      	cmp	r2, #41	; 0x29
 801264c:	d155      	bne.n	80126fa <__hexnan+0x12e>
 801264e:	3102      	adds	r1, #2
 8012650:	f8ca 1000 	str.w	r1, [sl]
 8012654:	f1bb 0f00 	cmp.w	fp, #0
 8012658:	d04f      	beq.n	80126fa <__hexnan+0x12e>
 801265a:	454c      	cmp	r4, r9
 801265c:	d206      	bcs.n	801266c <__hexnan+0xa0>
 801265e:	2d07      	cmp	r5, #7
 8012660:	dc04      	bgt.n	801266c <__hexnan+0xa0>
 8012662:	462a      	mov	r2, r5
 8012664:	4649      	mov	r1, r9
 8012666:	4620      	mov	r0, r4
 8012668:	f7ff ff8a 	bl	8012580 <L_shift>
 801266c:	4544      	cmp	r4, r8
 801266e:	d934      	bls.n	80126da <__hexnan+0x10e>
 8012670:	f1a8 0204 	sub.w	r2, r8, #4
 8012674:	4623      	mov	r3, r4
 8012676:	f853 1b04 	ldr.w	r1, [r3], #4
 801267a:	f842 1f04 	str.w	r1, [r2, #4]!
 801267e:	429f      	cmp	r7, r3
 8012680:	d2f9      	bcs.n	8012676 <__hexnan+0xaa>
 8012682:	1b3b      	subs	r3, r7, r4
 8012684:	f023 0303 	bic.w	r3, r3, #3
 8012688:	3304      	adds	r3, #4
 801268a:	3e03      	subs	r6, #3
 801268c:	3401      	adds	r4, #1
 801268e:	42a6      	cmp	r6, r4
 8012690:	bf38      	it	cc
 8012692:	2304      	movcc	r3, #4
 8012694:	4443      	add	r3, r8
 8012696:	2200      	movs	r2, #0
 8012698:	f843 2b04 	str.w	r2, [r3], #4
 801269c:	429f      	cmp	r7, r3
 801269e:	d2fb      	bcs.n	8012698 <__hexnan+0xcc>
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	b91b      	cbnz	r3, 80126ac <__hexnan+0xe0>
 80126a4:	4547      	cmp	r7, r8
 80126a6:	d126      	bne.n	80126f6 <__hexnan+0x12a>
 80126a8:	2301      	movs	r3, #1
 80126aa:	603b      	str	r3, [r7, #0]
 80126ac:	2005      	movs	r0, #5
 80126ae:	e025      	b.n	80126fc <__hexnan+0x130>
 80126b0:	3501      	adds	r5, #1
 80126b2:	2d08      	cmp	r5, #8
 80126b4:	f10b 0b01 	add.w	fp, fp, #1
 80126b8:	dd06      	ble.n	80126c8 <__hexnan+0xfc>
 80126ba:	4544      	cmp	r4, r8
 80126bc:	d9c3      	bls.n	8012646 <__hexnan+0x7a>
 80126be:	2300      	movs	r3, #0
 80126c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80126c4:	2501      	movs	r5, #1
 80126c6:	3c04      	subs	r4, #4
 80126c8:	6822      	ldr	r2, [r4, #0]
 80126ca:	f000 000f 	and.w	r0, r0, #15
 80126ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126d2:	6020      	str	r0, [r4, #0]
 80126d4:	e7b7      	b.n	8012646 <__hexnan+0x7a>
 80126d6:	2508      	movs	r5, #8
 80126d8:	e7b5      	b.n	8012646 <__hexnan+0x7a>
 80126da:	9b01      	ldr	r3, [sp, #4]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d0df      	beq.n	80126a0 <__hexnan+0xd4>
 80126e0:	f1c3 0320 	rsb	r3, r3, #32
 80126e4:	f04f 32ff 	mov.w	r2, #4294967295
 80126e8:	40da      	lsrs	r2, r3
 80126ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80126ee:	4013      	ands	r3, r2
 80126f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80126f4:	e7d4      	b.n	80126a0 <__hexnan+0xd4>
 80126f6:	3f04      	subs	r7, #4
 80126f8:	e7d2      	b.n	80126a0 <__hexnan+0xd4>
 80126fa:	2004      	movs	r0, #4
 80126fc:	b007      	add	sp, #28
 80126fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012702 <__ascii_mbtowc>:
 8012702:	b082      	sub	sp, #8
 8012704:	b901      	cbnz	r1, 8012708 <__ascii_mbtowc+0x6>
 8012706:	a901      	add	r1, sp, #4
 8012708:	b142      	cbz	r2, 801271c <__ascii_mbtowc+0x1a>
 801270a:	b14b      	cbz	r3, 8012720 <__ascii_mbtowc+0x1e>
 801270c:	7813      	ldrb	r3, [r2, #0]
 801270e:	600b      	str	r3, [r1, #0]
 8012710:	7812      	ldrb	r2, [r2, #0]
 8012712:	1e10      	subs	r0, r2, #0
 8012714:	bf18      	it	ne
 8012716:	2001      	movne	r0, #1
 8012718:	b002      	add	sp, #8
 801271a:	4770      	bx	lr
 801271c:	4610      	mov	r0, r2
 801271e:	e7fb      	b.n	8012718 <__ascii_mbtowc+0x16>
 8012720:	f06f 0001 	mvn.w	r0, #1
 8012724:	e7f8      	b.n	8012718 <__ascii_mbtowc+0x16>
	...

08012728 <_Balloc>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	69c6      	ldr	r6, [r0, #28]
 801272c:	4604      	mov	r4, r0
 801272e:	460d      	mov	r5, r1
 8012730:	b976      	cbnz	r6, 8012750 <_Balloc+0x28>
 8012732:	2010      	movs	r0, #16
 8012734:	f7fc fce0 	bl	800f0f8 <malloc>
 8012738:	4602      	mov	r2, r0
 801273a:	61e0      	str	r0, [r4, #28]
 801273c:	b920      	cbnz	r0, 8012748 <_Balloc+0x20>
 801273e:	4b18      	ldr	r3, [pc, #96]	; (80127a0 <_Balloc+0x78>)
 8012740:	4818      	ldr	r0, [pc, #96]	; (80127a4 <_Balloc+0x7c>)
 8012742:	216b      	movs	r1, #107	; 0x6b
 8012744:	f7fe fda2 	bl	801128c <__assert_func>
 8012748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801274c:	6006      	str	r6, [r0, #0]
 801274e:	60c6      	str	r6, [r0, #12]
 8012750:	69e6      	ldr	r6, [r4, #28]
 8012752:	68f3      	ldr	r3, [r6, #12]
 8012754:	b183      	cbz	r3, 8012778 <_Balloc+0x50>
 8012756:	69e3      	ldr	r3, [r4, #28]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801275e:	b9b8      	cbnz	r0, 8012790 <_Balloc+0x68>
 8012760:	2101      	movs	r1, #1
 8012762:	fa01 f605 	lsl.w	r6, r1, r5
 8012766:	1d72      	adds	r2, r6, #5
 8012768:	0092      	lsls	r2, r2, #2
 801276a:	4620      	mov	r0, r4
 801276c:	f000 fecf 	bl	801350e <_calloc_r>
 8012770:	b160      	cbz	r0, 801278c <_Balloc+0x64>
 8012772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012776:	e00e      	b.n	8012796 <_Balloc+0x6e>
 8012778:	2221      	movs	r2, #33	; 0x21
 801277a:	2104      	movs	r1, #4
 801277c:	4620      	mov	r0, r4
 801277e:	f000 fec6 	bl	801350e <_calloc_r>
 8012782:	69e3      	ldr	r3, [r4, #28]
 8012784:	60f0      	str	r0, [r6, #12]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1e4      	bne.n	8012756 <_Balloc+0x2e>
 801278c:	2000      	movs	r0, #0
 801278e:	bd70      	pop	{r4, r5, r6, pc}
 8012790:	6802      	ldr	r2, [r0, #0]
 8012792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012796:	2300      	movs	r3, #0
 8012798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801279c:	e7f7      	b.n	801278e <_Balloc+0x66>
 801279e:	bf00      	nop
 80127a0:	08013d4a 	.word	0x08013d4a
 80127a4:	08013ed5 	.word	0x08013ed5

080127a8 <_Bfree>:
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	69c6      	ldr	r6, [r0, #28]
 80127ac:	4605      	mov	r5, r0
 80127ae:	460c      	mov	r4, r1
 80127b0:	b976      	cbnz	r6, 80127d0 <_Bfree+0x28>
 80127b2:	2010      	movs	r0, #16
 80127b4:	f7fc fca0 	bl	800f0f8 <malloc>
 80127b8:	4602      	mov	r2, r0
 80127ba:	61e8      	str	r0, [r5, #28]
 80127bc:	b920      	cbnz	r0, 80127c8 <_Bfree+0x20>
 80127be:	4b09      	ldr	r3, [pc, #36]	; (80127e4 <_Bfree+0x3c>)
 80127c0:	4809      	ldr	r0, [pc, #36]	; (80127e8 <_Bfree+0x40>)
 80127c2:	218f      	movs	r1, #143	; 0x8f
 80127c4:	f7fe fd62 	bl	801128c <__assert_func>
 80127c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127cc:	6006      	str	r6, [r0, #0]
 80127ce:	60c6      	str	r6, [r0, #12]
 80127d0:	b13c      	cbz	r4, 80127e2 <_Bfree+0x3a>
 80127d2:	69eb      	ldr	r3, [r5, #28]
 80127d4:	6862      	ldr	r2, [r4, #4]
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127dc:	6021      	str	r1, [r4, #0]
 80127de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127e2:	bd70      	pop	{r4, r5, r6, pc}
 80127e4:	08013d4a 	.word	0x08013d4a
 80127e8:	08013ed5 	.word	0x08013ed5

080127ec <__multadd>:
 80127ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f0:	690d      	ldr	r5, [r1, #16]
 80127f2:	4607      	mov	r7, r0
 80127f4:	460c      	mov	r4, r1
 80127f6:	461e      	mov	r6, r3
 80127f8:	f101 0c14 	add.w	ip, r1, #20
 80127fc:	2000      	movs	r0, #0
 80127fe:	f8dc 3000 	ldr.w	r3, [ip]
 8012802:	b299      	uxth	r1, r3
 8012804:	fb02 6101 	mla	r1, r2, r1, r6
 8012808:	0c1e      	lsrs	r6, r3, #16
 801280a:	0c0b      	lsrs	r3, r1, #16
 801280c:	fb02 3306 	mla	r3, r2, r6, r3
 8012810:	b289      	uxth	r1, r1
 8012812:	3001      	adds	r0, #1
 8012814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012818:	4285      	cmp	r5, r0
 801281a:	f84c 1b04 	str.w	r1, [ip], #4
 801281e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012822:	dcec      	bgt.n	80127fe <__multadd+0x12>
 8012824:	b30e      	cbz	r6, 801286a <__multadd+0x7e>
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	42ab      	cmp	r3, r5
 801282a:	dc19      	bgt.n	8012860 <__multadd+0x74>
 801282c:	6861      	ldr	r1, [r4, #4]
 801282e:	4638      	mov	r0, r7
 8012830:	3101      	adds	r1, #1
 8012832:	f7ff ff79 	bl	8012728 <_Balloc>
 8012836:	4680      	mov	r8, r0
 8012838:	b928      	cbnz	r0, 8012846 <__multadd+0x5a>
 801283a:	4602      	mov	r2, r0
 801283c:	4b0c      	ldr	r3, [pc, #48]	; (8012870 <__multadd+0x84>)
 801283e:	480d      	ldr	r0, [pc, #52]	; (8012874 <__multadd+0x88>)
 8012840:	21ba      	movs	r1, #186	; 0xba
 8012842:	f7fe fd23 	bl	801128c <__assert_func>
 8012846:	6922      	ldr	r2, [r4, #16]
 8012848:	3202      	adds	r2, #2
 801284a:	f104 010c 	add.w	r1, r4, #12
 801284e:	0092      	lsls	r2, r2, #2
 8012850:	300c      	adds	r0, #12
 8012852:	f7fe fcfe 	bl	8011252 <memcpy>
 8012856:	4621      	mov	r1, r4
 8012858:	4638      	mov	r0, r7
 801285a:	f7ff ffa5 	bl	80127a8 <_Bfree>
 801285e:	4644      	mov	r4, r8
 8012860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012864:	3501      	adds	r5, #1
 8012866:	615e      	str	r6, [r3, #20]
 8012868:	6125      	str	r5, [r4, #16]
 801286a:	4620      	mov	r0, r4
 801286c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012870:	08013e64 	.word	0x08013e64
 8012874:	08013ed5 	.word	0x08013ed5

08012878 <__s2b>:
 8012878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801287c:	460c      	mov	r4, r1
 801287e:	4615      	mov	r5, r2
 8012880:	461f      	mov	r7, r3
 8012882:	2209      	movs	r2, #9
 8012884:	3308      	adds	r3, #8
 8012886:	4606      	mov	r6, r0
 8012888:	fb93 f3f2 	sdiv	r3, r3, r2
 801288c:	2100      	movs	r1, #0
 801288e:	2201      	movs	r2, #1
 8012890:	429a      	cmp	r2, r3
 8012892:	db09      	blt.n	80128a8 <__s2b+0x30>
 8012894:	4630      	mov	r0, r6
 8012896:	f7ff ff47 	bl	8012728 <_Balloc>
 801289a:	b940      	cbnz	r0, 80128ae <__s2b+0x36>
 801289c:	4602      	mov	r2, r0
 801289e:	4b19      	ldr	r3, [pc, #100]	; (8012904 <__s2b+0x8c>)
 80128a0:	4819      	ldr	r0, [pc, #100]	; (8012908 <__s2b+0x90>)
 80128a2:	21d3      	movs	r1, #211	; 0xd3
 80128a4:	f7fe fcf2 	bl	801128c <__assert_func>
 80128a8:	0052      	lsls	r2, r2, #1
 80128aa:	3101      	adds	r1, #1
 80128ac:	e7f0      	b.n	8012890 <__s2b+0x18>
 80128ae:	9b08      	ldr	r3, [sp, #32]
 80128b0:	6143      	str	r3, [r0, #20]
 80128b2:	2d09      	cmp	r5, #9
 80128b4:	f04f 0301 	mov.w	r3, #1
 80128b8:	6103      	str	r3, [r0, #16]
 80128ba:	dd16      	ble.n	80128ea <__s2b+0x72>
 80128bc:	f104 0909 	add.w	r9, r4, #9
 80128c0:	46c8      	mov	r8, r9
 80128c2:	442c      	add	r4, r5
 80128c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128c8:	4601      	mov	r1, r0
 80128ca:	3b30      	subs	r3, #48	; 0x30
 80128cc:	220a      	movs	r2, #10
 80128ce:	4630      	mov	r0, r6
 80128d0:	f7ff ff8c 	bl	80127ec <__multadd>
 80128d4:	45a0      	cmp	r8, r4
 80128d6:	d1f5      	bne.n	80128c4 <__s2b+0x4c>
 80128d8:	f1a5 0408 	sub.w	r4, r5, #8
 80128dc:	444c      	add	r4, r9
 80128de:	1b2d      	subs	r5, r5, r4
 80128e0:	1963      	adds	r3, r4, r5
 80128e2:	42bb      	cmp	r3, r7
 80128e4:	db04      	blt.n	80128f0 <__s2b+0x78>
 80128e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ea:	340a      	adds	r4, #10
 80128ec:	2509      	movs	r5, #9
 80128ee:	e7f6      	b.n	80128de <__s2b+0x66>
 80128f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128f4:	4601      	mov	r1, r0
 80128f6:	3b30      	subs	r3, #48	; 0x30
 80128f8:	220a      	movs	r2, #10
 80128fa:	4630      	mov	r0, r6
 80128fc:	f7ff ff76 	bl	80127ec <__multadd>
 8012900:	e7ee      	b.n	80128e0 <__s2b+0x68>
 8012902:	bf00      	nop
 8012904:	08013e64 	.word	0x08013e64
 8012908:	08013ed5 	.word	0x08013ed5

0801290c <__hi0bits>:
 801290c:	0c03      	lsrs	r3, r0, #16
 801290e:	041b      	lsls	r3, r3, #16
 8012910:	b9d3      	cbnz	r3, 8012948 <__hi0bits+0x3c>
 8012912:	0400      	lsls	r0, r0, #16
 8012914:	2310      	movs	r3, #16
 8012916:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801291a:	bf04      	itt	eq
 801291c:	0200      	lsleq	r0, r0, #8
 801291e:	3308      	addeq	r3, #8
 8012920:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012924:	bf04      	itt	eq
 8012926:	0100      	lsleq	r0, r0, #4
 8012928:	3304      	addeq	r3, #4
 801292a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801292e:	bf04      	itt	eq
 8012930:	0080      	lsleq	r0, r0, #2
 8012932:	3302      	addeq	r3, #2
 8012934:	2800      	cmp	r0, #0
 8012936:	db05      	blt.n	8012944 <__hi0bits+0x38>
 8012938:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801293c:	f103 0301 	add.w	r3, r3, #1
 8012940:	bf08      	it	eq
 8012942:	2320      	moveq	r3, #32
 8012944:	4618      	mov	r0, r3
 8012946:	4770      	bx	lr
 8012948:	2300      	movs	r3, #0
 801294a:	e7e4      	b.n	8012916 <__hi0bits+0xa>

0801294c <__lo0bits>:
 801294c:	6803      	ldr	r3, [r0, #0]
 801294e:	f013 0207 	ands.w	r2, r3, #7
 8012952:	d00c      	beq.n	801296e <__lo0bits+0x22>
 8012954:	07d9      	lsls	r1, r3, #31
 8012956:	d422      	bmi.n	801299e <__lo0bits+0x52>
 8012958:	079a      	lsls	r2, r3, #30
 801295a:	bf49      	itett	mi
 801295c:	085b      	lsrmi	r3, r3, #1
 801295e:	089b      	lsrpl	r3, r3, #2
 8012960:	6003      	strmi	r3, [r0, #0]
 8012962:	2201      	movmi	r2, #1
 8012964:	bf5c      	itt	pl
 8012966:	6003      	strpl	r3, [r0, #0]
 8012968:	2202      	movpl	r2, #2
 801296a:	4610      	mov	r0, r2
 801296c:	4770      	bx	lr
 801296e:	b299      	uxth	r1, r3
 8012970:	b909      	cbnz	r1, 8012976 <__lo0bits+0x2a>
 8012972:	0c1b      	lsrs	r3, r3, #16
 8012974:	2210      	movs	r2, #16
 8012976:	b2d9      	uxtb	r1, r3
 8012978:	b909      	cbnz	r1, 801297e <__lo0bits+0x32>
 801297a:	3208      	adds	r2, #8
 801297c:	0a1b      	lsrs	r3, r3, #8
 801297e:	0719      	lsls	r1, r3, #28
 8012980:	bf04      	itt	eq
 8012982:	091b      	lsreq	r3, r3, #4
 8012984:	3204      	addeq	r2, #4
 8012986:	0799      	lsls	r1, r3, #30
 8012988:	bf04      	itt	eq
 801298a:	089b      	lsreq	r3, r3, #2
 801298c:	3202      	addeq	r2, #2
 801298e:	07d9      	lsls	r1, r3, #31
 8012990:	d403      	bmi.n	801299a <__lo0bits+0x4e>
 8012992:	085b      	lsrs	r3, r3, #1
 8012994:	f102 0201 	add.w	r2, r2, #1
 8012998:	d003      	beq.n	80129a2 <__lo0bits+0x56>
 801299a:	6003      	str	r3, [r0, #0]
 801299c:	e7e5      	b.n	801296a <__lo0bits+0x1e>
 801299e:	2200      	movs	r2, #0
 80129a0:	e7e3      	b.n	801296a <__lo0bits+0x1e>
 80129a2:	2220      	movs	r2, #32
 80129a4:	e7e1      	b.n	801296a <__lo0bits+0x1e>
	...

080129a8 <__i2b>:
 80129a8:	b510      	push	{r4, lr}
 80129aa:	460c      	mov	r4, r1
 80129ac:	2101      	movs	r1, #1
 80129ae:	f7ff febb 	bl	8012728 <_Balloc>
 80129b2:	4602      	mov	r2, r0
 80129b4:	b928      	cbnz	r0, 80129c2 <__i2b+0x1a>
 80129b6:	4b05      	ldr	r3, [pc, #20]	; (80129cc <__i2b+0x24>)
 80129b8:	4805      	ldr	r0, [pc, #20]	; (80129d0 <__i2b+0x28>)
 80129ba:	f240 1145 	movw	r1, #325	; 0x145
 80129be:	f7fe fc65 	bl	801128c <__assert_func>
 80129c2:	2301      	movs	r3, #1
 80129c4:	6144      	str	r4, [r0, #20]
 80129c6:	6103      	str	r3, [r0, #16]
 80129c8:	bd10      	pop	{r4, pc}
 80129ca:	bf00      	nop
 80129cc:	08013e64 	.word	0x08013e64
 80129d0:	08013ed5 	.word	0x08013ed5

080129d4 <__multiply>:
 80129d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d8:	4691      	mov	r9, r2
 80129da:	690a      	ldr	r2, [r1, #16]
 80129dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	bfb8      	it	lt
 80129e4:	460b      	movlt	r3, r1
 80129e6:	460c      	mov	r4, r1
 80129e8:	bfbc      	itt	lt
 80129ea:	464c      	movlt	r4, r9
 80129ec:	4699      	movlt	r9, r3
 80129ee:	6927      	ldr	r7, [r4, #16]
 80129f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80129f4:	68a3      	ldr	r3, [r4, #8]
 80129f6:	6861      	ldr	r1, [r4, #4]
 80129f8:	eb07 060a 	add.w	r6, r7, sl
 80129fc:	42b3      	cmp	r3, r6
 80129fe:	b085      	sub	sp, #20
 8012a00:	bfb8      	it	lt
 8012a02:	3101      	addlt	r1, #1
 8012a04:	f7ff fe90 	bl	8012728 <_Balloc>
 8012a08:	b930      	cbnz	r0, 8012a18 <__multiply+0x44>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	4b44      	ldr	r3, [pc, #272]	; (8012b20 <__multiply+0x14c>)
 8012a0e:	4845      	ldr	r0, [pc, #276]	; (8012b24 <__multiply+0x150>)
 8012a10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012a14:	f7fe fc3a 	bl	801128c <__assert_func>
 8012a18:	f100 0514 	add.w	r5, r0, #20
 8012a1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a20:	462b      	mov	r3, r5
 8012a22:	2200      	movs	r2, #0
 8012a24:	4543      	cmp	r3, r8
 8012a26:	d321      	bcc.n	8012a6c <__multiply+0x98>
 8012a28:	f104 0314 	add.w	r3, r4, #20
 8012a2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012a30:	f109 0314 	add.w	r3, r9, #20
 8012a34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a38:	9202      	str	r2, [sp, #8]
 8012a3a:	1b3a      	subs	r2, r7, r4
 8012a3c:	3a15      	subs	r2, #21
 8012a3e:	f022 0203 	bic.w	r2, r2, #3
 8012a42:	3204      	adds	r2, #4
 8012a44:	f104 0115 	add.w	r1, r4, #21
 8012a48:	428f      	cmp	r7, r1
 8012a4a:	bf38      	it	cc
 8012a4c:	2204      	movcc	r2, #4
 8012a4e:	9201      	str	r2, [sp, #4]
 8012a50:	9a02      	ldr	r2, [sp, #8]
 8012a52:	9303      	str	r3, [sp, #12]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d80c      	bhi.n	8012a72 <__multiply+0x9e>
 8012a58:	2e00      	cmp	r6, #0
 8012a5a:	dd03      	ble.n	8012a64 <__multiply+0x90>
 8012a5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d05b      	beq.n	8012b1c <__multiply+0x148>
 8012a64:	6106      	str	r6, [r0, #16]
 8012a66:	b005      	add	sp, #20
 8012a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a6c:	f843 2b04 	str.w	r2, [r3], #4
 8012a70:	e7d8      	b.n	8012a24 <__multiply+0x50>
 8012a72:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a76:	f1ba 0f00 	cmp.w	sl, #0
 8012a7a:	d024      	beq.n	8012ac6 <__multiply+0xf2>
 8012a7c:	f104 0e14 	add.w	lr, r4, #20
 8012a80:	46a9      	mov	r9, r5
 8012a82:	f04f 0c00 	mov.w	ip, #0
 8012a86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012a8a:	f8d9 1000 	ldr.w	r1, [r9]
 8012a8e:	fa1f fb82 	uxth.w	fp, r2
 8012a92:	b289      	uxth	r1, r1
 8012a94:	fb0a 110b 	mla	r1, sl, fp, r1
 8012a98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8012aa0:	4461      	add	r1, ip
 8012aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012aa6:	fb0a c20b 	mla	r2, sl, fp, ip
 8012aaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012aae:	b289      	uxth	r1, r1
 8012ab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012ab4:	4577      	cmp	r7, lr
 8012ab6:	f849 1b04 	str.w	r1, [r9], #4
 8012aba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012abe:	d8e2      	bhi.n	8012a86 <__multiply+0xb2>
 8012ac0:	9a01      	ldr	r2, [sp, #4]
 8012ac2:	f845 c002 	str.w	ip, [r5, r2]
 8012ac6:	9a03      	ldr	r2, [sp, #12]
 8012ac8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012acc:	3304      	adds	r3, #4
 8012ace:	f1b9 0f00 	cmp.w	r9, #0
 8012ad2:	d021      	beq.n	8012b18 <__multiply+0x144>
 8012ad4:	6829      	ldr	r1, [r5, #0]
 8012ad6:	f104 0c14 	add.w	ip, r4, #20
 8012ada:	46ae      	mov	lr, r5
 8012adc:	f04f 0a00 	mov.w	sl, #0
 8012ae0:	f8bc b000 	ldrh.w	fp, [ip]
 8012ae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012ae8:	fb09 220b 	mla	r2, r9, fp, r2
 8012aec:	4452      	add	r2, sl
 8012aee:	b289      	uxth	r1, r1
 8012af0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012af4:	f84e 1b04 	str.w	r1, [lr], #4
 8012af8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012afc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b00:	f8be 1000 	ldrh.w	r1, [lr]
 8012b04:	fb09 110a 	mla	r1, r9, sl, r1
 8012b08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012b0c:	4567      	cmp	r7, ip
 8012b0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b12:	d8e5      	bhi.n	8012ae0 <__multiply+0x10c>
 8012b14:	9a01      	ldr	r2, [sp, #4]
 8012b16:	50a9      	str	r1, [r5, r2]
 8012b18:	3504      	adds	r5, #4
 8012b1a:	e799      	b.n	8012a50 <__multiply+0x7c>
 8012b1c:	3e01      	subs	r6, #1
 8012b1e:	e79b      	b.n	8012a58 <__multiply+0x84>
 8012b20:	08013e64 	.word	0x08013e64
 8012b24:	08013ed5 	.word	0x08013ed5

08012b28 <__pow5mult>:
 8012b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b2c:	4615      	mov	r5, r2
 8012b2e:	f012 0203 	ands.w	r2, r2, #3
 8012b32:	4606      	mov	r6, r0
 8012b34:	460f      	mov	r7, r1
 8012b36:	d007      	beq.n	8012b48 <__pow5mult+0x20>
 8012b38:	4c25      	ldr	r4, [pc, #148]	; (8012bd0 <__pow5mult+0xa8>)
 8012b3a:	3a01      	subs	r2, #1
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b42:	f7ff fe53 	bl	80127ec <__multadd>
 8012b46:	4607      	mov	r7, r0
 8012b48:	10ad      	asrs	r5, r5, #2
 8012b4a:	d03d      	beq.n	8012bc8 <__pow5mult+0xa0>
 8012b4c:	69f4      	ldr	r4, [r6, #28]
 8012b4e:	b97c      	cbnz	r4, 8012b70 <__pow5mult+0x48>
 8012b50:	2010      	movs	r0, #16
 8012b52:	f7fc fad1 	bl	800f0f8 <malloc>
 8012b56:	4602      	mov	r2, r0
 8012b58:	61f0      	str	r0, [r6, #28]
 8012b5a:	b928      	cbnz	r0, 8012b68 <__pow5mult+0x40>
 8012b5c:	4b1d      	ldr	r3, [pc, #116]	; (8012bd4 <__pow5mult+0xac>)
 8012b5e:	481e      	ldr	r0, [pc, #120]	; (8012bd8 <__pow5mult+0xb0>)
 8012b60:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012b64:	f7fe fb92 	bl	801128c <__assert_func>
 8012b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b6c:	6004      	str	r4, [r0, #0]
 8012b6e:	60c4      	str	r4, [r0, #12]
 8012b70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b78:	b94c      	cbnz	r4, 8012b8e <__pow5mult+0x66>
 8012b7a:	f240 2171 	movw	r1, #625	; 0x271
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f7ff ff12 	bl	80129a8 <__i2b>
 8012b84:	2300      	movs	r3, #0
 8012b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	6003      	str	r3, [r0, #0]
 8012b8e:	f04f 0900 	mov.w	r9, #0
 8012b92:	07eb      	lsls	r3, r5, #31
 8012b94:	d50a      	bpl.n	8012bac <__pow5mult+0x84>
 8012b96:	4639      	mov	r1, r7
 8012b98:	4622      	mov	r2, r4
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f7ff ff1a 	bl	80129d4 <__multiply>
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	4680      	mov	r8, r0
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	f7ff fdff 	bl	80127a8 <_Bfree>
 8012baa:	4647      	mov	r7, r8
 8012bac:	106d      	asrs	r5, r5, #1
 8012bae:	d00b      	beq.n	8012bc8 <__pow5mult+0xa0>
 8012bb0:	6820      	ldr	r0, [r4, #0]
 8012bb2:	b938      	cbnz	r0, 8012bc4 <__pow5mult+0x9c>
 8012bb4:	4622      	mov	r2, r4
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f7ff ff0b 	bl	80129d4 <__multiply>
 8012bbe:	6020      	str	r0, [r4, #0]
 8012bc0:	f8c0 9000 	str.w	r9, [r0]
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	e7e4      	b.n	8012b92 <__pow5mult+0x6a>
 8012bc8:	4638      	mov	r0, r7
 8012bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bce:	bf00      	nop
 8012bd0:	08014020 	.word	0x08014020
 8012bd4:	08013d4a 	.word	0x08013d4a
 8012bd8:	08013ed5 	.word	0x08013ed5

08012bdc <__lshift>:
 8012bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012be0:	460c      	mov	r4, r1
 8012be2:	6849      	ldr	r1, [r1, #4]
 8012be4:	6923      	ldr	r3, [r4, #16]
 8012be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bea:	68a3      	ldr	r3, [r4, #8]
 8012bec:	4607      	mov	r7, r0
 8012bee:	4691      	mov	r9, r2
 8012bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bf4:	f108 0601 	add.w	r6, r8, #1
 8012bf8:	42b3      	cmp	r3, r6
 8012bfa:	db0b      	blt.n	8012c14 <__lshift+0x38>
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	f7ff fd93 	bl	8012728 <_Balloc>
 8012c02:	4605      	mov	r5, r0
 8012c04:	b948      	cbnz	r0, 8012c1a <__lshift+0x3e>
 8012c06:	4602      	mov	r2, r0
 8012c08:	4b28      	ldr	r3, [pc, #160]	; (8012cac <__lshift+0xd0>)
 8012c0a:	4829      	ldr	r0, [pc, #164]	; (8012cb0 <__lshift+0xd4>)
 8012c0c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012c10:	f7fe fb3c 	bl	801128c <__assert_func>
 8012c14:	3101      	adds	r1, #1
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	e7ee      	b.n	8012bf8 <__lshift+0x1c>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	f100 0114 	add.w	r1, r0, #20
 8012c20:	f100 0210 	add.w	r2, r0, #16
 8012c24:	4618      	mov	r0, r3
 8012c26:	4553      	cmp	r3, sl
 8012c28:	db33      	blt.n	8012c92 <__lshift+0xb6>
 8012c2a:	6920      	ldr	r0, [r4, #16]
 8012c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c30:	f104 0314 	add.w	r3, r4, #20
 8012c34:	f019 091f 	ands.w	r9, r9, #31
 8012c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c40:	d02b      	beq.n	8012c9a <__lshift+0xbe>
 8012c42:	f1c9 0e20 	rsb	lr, r9, #32
 8012c46:	468a      	mov	sl, r1
 8012c48:	2200      	movs	r2, #0
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8012c50:	4310      	orrs	r0, r2
 8012c52:	f84a 0b04 	str.w	r0, [sl], #4
 8012c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c5a:	459c      	cmp	ip, r3
 8012c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c60:	d8f3      	bhi.n	8012c4a <__lshift+0x6e>
 8012c62:	ebac 0304 	sub.w	r3, ip, r4
 8012c66:	3b15      	subs	r3, #21
 8012c68:	f023 0303 	bic.w	r3, r3, #3
 8012c6c:	3304      	adds	r3, #4
 8012c6e:	f104 0015 	add.w	r0, r4, #21
 8012c72:	4584      	cmp	ip, r0
 8012c74:	bf38      	it	cc
 8012c76:	2304      	movcc	r3, #4
 8012c78:	50ca      	str	r2, [r1, r3]
 8012c7a:	b10a      	cbz	r2, 8012c80 <__lshift+0xa4>
 8012c7c:	f108 0602 	add.w	r6, r8, #2
 8012c80:	3e01      	subs	r6, #1
 8012c82:	4638      	mov	r0, r7
 8012c84:	612e      	str	r6, [r5, #16]
 8012c86:	4621      	mov	r1, r4
 8012c88:	f7ff fd8e 	bl	80127a8 <_Bfree>
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c96:	3301      	adds	r3, #1
 8012c98:	e7c5      	b.n	8012c26 <__lshift+0x4a>
 8012c9a:	3904      	subs	r1, #4
 8012c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ca4:	459c      	cmp	ip, r3
 8012ca6:	d8f9      	bhi.n	8012c9c <__lshift+0xc0>
 8012ca8:	e7ea      	b.n	8012c80 <__lshift+0xa4>
 8012caa:	bf00      	nop
 8012cac:	08013e64 	.word	0x08013e64
 8012cb0:	08013ed5 	.word	0x08013ed5

08012cb4 <__mcmp>:
 8012cb4:	b530      	push	{r4, r5, lr}
 8012cb6:	6902      	ldr	r2, [r0, #16]
 8012cb8:	690c      	ldr	r4, [r1, #16]
 8012cba:	1b12      	subs	r2, r2, r4
 8012cbc:	d10e      	bne.n	8012cdc <__mcmp+0x28>
 8012cbe:	f100 0314 	add.w	r3, r0, #20
 8012cc2:	3114      	adds	r1, #20
 8012cc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012cc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012cd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012cd4:	42a5      	cmp	r5, r4
 8012cd6:	d003      	beq.n	8012ce0 <__mcmp+0x2c>
 8012cd8:	d305      	bcc.n	8012ce6 <__mcmp+0x32>
 8012cda:	2201      	movs	r2, #1
 8012cdc:	4610      	mov	r0, r2
 8012cde:	bd30      	pop	{r4, r5, pc}
 8012ce0:	4283      	cmp	r3, r0
 8012ce2:	d3f3      	bcc.n	8012ccc <__mcmp+0x18>
 8012ce4:	e7fa      	b.n	8012cdc <__mcmp+0x28>
 8012ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cea:	e7f7      	b.n	8012cdc <__mcmp+0x28>

08012cec <__mdiff>:
 8012cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf0:	460c      	mov	r4, r1
 8012cf2:	4606      	mov	r6, r0
 8012cf4:	4611      	mov	r1, r2
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	4690      	mov	r8, r2
 8012cfa:	f7ff ffdb 	bl	8012cb4 <__mcmp>
 8012cfe:	1e05      	subs	r5, r0, #0
 8012d00:	d110      	bne.n	8012d24 <__mdiff+0x38>
 8012d02:	4629      	mov	r1, r5
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7ff fd0f 	bl	8012728 <_Balloc>
 8012d0a:	b930      	cbnz	r0, 8012d1a <__mdiff+0x2e>
 8012d0c:	4b3a      	ldr	r3, [pc, #232]	; (8012df8 <__mdiff+0x10c>)
 8012d0e:	4602      	mov	r2, r0
 8012d10:	f240 2137 	movw	r1, #567	; 0x237
 8012d14:	4839      	ldr	r0, [pc, #228]	; (8012dfc <__mdiff+0x110>)
 8012d16:	f7fe fab9 	bl	801128c <__assert_func>
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d24:	bfa4      	itt	ge
 8012d26:	4643      	movge	r3, r8
 8012d28:	46a0      	movge	r8, r4
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d30:	bfa6      	itte	ge
 8012d32:	461c      	movge	r4, r3
 8012d34:	2500      	movge	r5, #0
 8012d36:	2501      	movlt	r5, #1
 8012d38:	f7ff fcf6 	bl	8012728 <_Balloc>
 8012d3c:	b920      	cbnz	r0, 8012d48 <__mdiff+0x5c>
 8012d3e:	4b2e      	ldr	r3, [pc, #184]	; (8012df8 <__mdiff+0x10c>)
 8012d40:	4602      	mov	r2, r0
 8012d42:	f240 2145 	movw	r1, #581	; 0x245
 8012d46:	e7e5      	b.n	8012d14 <__mdiff+0x28>
 8012d48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d4c:	6926      	ldr	r6, [r4, #16]
 8012d4e:	60c5      	str	r5, [r0, #12]
 8012d50:	f104 0914 	add.w	r9, r4, #20
 8012d54:	f108 0514 	add.w	r5, r8, #20
 8012d58:	f100 0e14 	add.w	lr, r0, #20
 8012d5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012d60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012d64:	f108 0210 	add.w	r2, r8, #16
 8012d68:	46f2      	mov	sl, lr
 8012d6a:	2100      	movs	r1, #0
 8012d6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d74:	fa11 f88b 	uxtah	r8, r1, fp
 8012d78:	b299      	uxth	r1, r3
 8012d7a:	0c1b      	lsrs	r3, r3, #16
 8012d7c:	eba8 0801 	sub.w	r8, r8, r1
 8012d80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d88:	fa1f f888 	uxth.w	r8, r8
 8012d8c:	1419      	asrs	r1, r3, #16
 8012d8e:	454e      	cmp	r6, r9
 8012d90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d94:	f84a 3b04 	str.w	r3, [sl], #4
 8012d98:	d8e8      	bhi.n	8012d6c <__mdiff+0x80>
 8012d9a:	1b33      	subs	r3, r6, r4
 8012d9c:	3b15      	subs	r3, #21
 8012d9e:	f023 0303 	bic.w	r3, r3, #3
 8012da2:	3304      	adds	r3, #4
 8012da4:	3415      	adds	r4, #21
 8012da6:	42a6      	cmp	r6, r4
 8012da8:	bf38      	it	cc
 8012daa:	2304      	movcc	r3, #4
 8012dac:	441d      	add	r5, r3
 8012dae:	4473      	add	r3, lr
 8012db0:	469e      	mov	lr, r3
 8012db2:	462e      	mov	r6, r5
 8012db4:	4566      	cmp	r6, ip
 8012db6:	d30e      	bcc.n	8012dd6 <__mdiff+0xea>
 8012db8:	f10c 0203 	add.w	r2, ip, #3
 8012dbc:	1b52      	subs	r2, r2, r5
 8012dbe:	f022 0203 	bic.w	r2, r2, #3
 8012dc2:	3d03      	subs	r5, #3
 8012dc4:	45ac      	cmp	ip, r5
 8012dc6:	bf38      	it	cc
 8012dc8:	2200      	movcc	r2, #0
 8012dca:	4413      	add	r3, r2
 8012dcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012dd0:	b17a      	cbz	r2, 8012df2 <__mdiff+0x106>
 8012dd2:	6107      	str	r7, [r0, #16]
 8012dd4:	e7a4      	b.n	8012d20 <__mdiff+0x34>
 8012dd6:	f856 8b04 	ldr.w	r8, [r6], #4
 8012dda:	fa11 f288 	uxtah	r2, r1, r8
 8012dde:	1414      	asrs	r4, r2, #16
 8012de0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012de4:	b292      	uxth	r2, r2
 8012de6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012dea:	f84e 2b04 	str.w	r2, [lr], #4
 8012dee:	1421      	asrs	r1, r4, #16
 8012df0:	e7e0      	b.n	8012db4 <__mdiff+0xc8>
 8012df2:	3f01      	subs	r7, #1
 8012df4:	e7ea      	b.n	8012dcc <__mdiff+0xe0>
 8012df6:	bf00      	nop
 8012df8:	08013e64 	.word	0x08013e64
 8012dfc:	08013ed5 	.word	0x08013ed5

08012e00 <__ulp>:
 8012e00:	b082      	sub	sp, #8
 8012e02:	ed8d 0b00 	vstr	d0, [sp]
 8012e06:	9a01      	ldr	r2, [sp, #4]
 8012e08:	4b0f      	ldr	r3, [pc, #60]	; (8012e48 <__ulp+0x48>)
 8012e0a:	4013      	ands	r3, r2
 8012e0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	dc08      	bgt.n	8012e26 <__ulp+0x26>
 8012e14:	425b      	negs	r3, r3
 8012e16:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012e1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012e1e:	da04      	bge.n	8012e2a <__ulp+0x2a>
 8012e20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012e24:	4113      	asrs	r3, r2
 8012e26:	2200      	movs	r2, #0
 8012e28:	e008      	b.n	8012e3c <__ulp+0x3c>
 8012e2a:	f1a2 0314 	sub.w	r3, r2, #20
 8012e2e:	2b1e      	cmp	r3, #30
 8012e30:	bfda      	itte	le
 8012e32:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012e36:	40da      	lsrle	r2, r3
 8012e38:	2201      	movgt	r2, #1
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	4610      	mov	r0, r2
 8012e40:	ec41 0b10 	vmov	d0, r0, r1
 8012e44:	b002      	add	sp, #8
 8012e46:	4770      	bx	lr
 8012e48:	7ff00000 	.word	0x7ff00000

08012e4c <__b2d>:
 8012e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e50:	6906      	ldr	r6, [r0, #16]
 8012e52:	f100 0814 	add.w	r8, r0, #20
 8012e56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012e5a:	1f37      	subs	r7, r6, #4
 8012e5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012e60:	4610      	mov	r0, r2
 8012e62:	f7ff fd53 	bl	801290c <__hi0bits>
 8012e66:	f1c0 0320 	rsb	r3, r0, #32
 8012e6a:	280a      	cmp	r0, #10
 8012e6c:	600b      	str	r3, [r1, #0]
 8012e6e:	491b      	ldr	r1, [pc, #108]	; (8012edc <__b2d+0x90>)
 8012e70:	dc15      	bgt.n	8012e9e <__b2d+0x52>
 8012e72:	f1c0 0c0b 	rsb	ip, r0, #11
 8012e76:	fa22 f30c 	lsr.w	r3, r2, ip
 8012e7a:	45b8      	cmp	r8, r7
 8012e7c:	ea43 0501 	orr.w	r5, r3, r1
 8012e80:	bf34      	ite	cc
 8012e82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e86:	2300      	movcs	r3, #0
 8012e88:	3015      	adds	r0, #21
 8012e8a:	fa02 f000 	lsl.w	r0, r2, r0
 8012e8e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012e92:	4303      	orrs	r3, r0
 8012e94:	461c      	mov	r4, r3
 8012e96:	ec45 4b10 	vmov	d0, r4, r5
 8012e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e9e:	45b8      	cmp	r8, r7
 8012ea0:	bf3a      	itte	cc
 8012ea2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012ea6:	f1a6 0708 	subcc.w	r7, r6, #8
 8012eaa:	2300      	movcs	r3, #0
 8012eac:	380b      	subs	r0, #11
 8012eae:	d012      	beq.n	8012ed6 <__b2d+0x8a>
 8012eb0:	f1c0 0120 	rsb	r1, r0, #32
 8012eb4:	fa23 f401 	lsr.w	r4, r3, r1
 8012eb8:	4082      	lsls	r2, r0
 8012eba:	4322      	orrs	r2, r4
 8012ebc:	4547      	cmp	r7, r8
 8012ebe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012ec2:	bf8c      	ite	hi
 8012ec4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012ec8:	2200      	movls	r2, #0
 8012eca:	4083      	lsls	r3, r0
 8012ecc:	40ca      	lsrs	r2, r1
 8012ece:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	e7de      	b.n	8012e94 <__b2d+0x48>
 8012ed6:	ea42 0501 	orr.w	r5, r2, r1
 8012eda:	e7db      	b.n	8012e94 <__b2d+0x48>
 8012edc:	3ff00000 	.word	0x3ff00000

08012ee0 <__d2b>:
 8012ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ee4:	460f      	mov	r7, r1
 8012ee6:	2101      	movs	r1, #1
 8012ee8:	ec59 8b10 	vmov	r8, r9, d0
 8012eec:	4616      	mov	r6, r2
 8012eee:	f7ff fc1b 	bl	8012728 <_Balloc>
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	b930      	cbnz	r0, 8012f04 <__d2b+0x24>
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	4b24      	ldr	r3, [pc, #144]	; (8012f8c <__d2b+0xac>)
 8012efa:	4825      	ldr	r0, [pc, #148]	; (8012f90 <__d2b+0xb0>)
 8012efc:	f240 310f 	movw	r1, #783	; 0x30f
 8012f00:	f7fe f9c4 	bl	801128c <__assert_func>
 8012f04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f0c:	bb2d      	cbnz	r5, 8012f5a <__d2b+0x7a>
 8012f0e:	9301      	str	r3, [sp, #4]
 8012f10:	f1b8 0300 	subs.w	r3, r8, #0
 8012f14:	d026      	beq.n	8012f64 <__d2b+0x84>
 8012f16:	4668      	mov	r0, sp
 8012f18:	9300      	str	r3, [sp, #0]
 8012f1a:	f7ff fd17 	bl	801294c <__lo0bits>
 8012f1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012f22:	b1e8      	cbz	r0, 8012f60 <__d2b+0x80>
 8012f24:	f1c0 0320 	rsb	r3, r0, #32
 8012f28:	fa02 f303 	lsl.w	r3, r2, r3
 8012f2c:	430b      	orrs	r3, r1
 8012f2e:	40c2      	lsrs	r2, r0
 8012f30:	6163      	str	r3, [r4, #20]
 8012f32:	9201      	str	r2, [sp, #4]
 8012f34:	9b01      	ldr	r3, [sp, #4]
 8012f36:	61a3      	str	r3, [r4, #24]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	bf14      	ite	ne
 8012f3c:	2202      	movne	r2, #2
 8012f3e:	2201      	moveq	r2, #1
 8012f40:	6122      	str	r2, [r4, #16]
 8012f42:	b1bd      	cbz	r5, 8012f74 <__d2b+0x94>
 8012f44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012f48:	4405      	add	r5, r0
 8012f4a:	603d      	str	r5, [r7, #0]
 8012f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f50:	6030      	str	r0, [r6, #0]
 8012f52:	4620      	mov	r0, r4
 8012f54:	b003      	add	sp, #12
 8012f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f5e:	e7d6      	b.n	8012f0e <__d2b+0x2e>
 8012f60:	6161      	str	r1, [r4, #20]
 8012f62:	e7e7      	b.n	8012f34 <__d2b+0x54>
 8012f64:	a801      	add	r0, sp, #4
 8012f66:	f7ff fcf1 	bl	801294c <__lo0bits>
 8012f6a:	9b01      	ldr	r3, [sp, #4]
 8012f6c:	6163      	str	r3, [r4, #20]
 8012f6e:	3020      	adds	r0, #32
 8012f70:	2201      	movs	r2, #1
 8012f72:	e7e5      	b.n	8012f40 <__d2b+0x60>
 8012f74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f7c:	6038      	str	r0, [r7, #0]
 8012f7e:	6918      	ldr	r0, [r3, #16]
 8012f80:	f7ff fcc4 	bl	801290c <__hi0bits>
 8012f84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f88:	e7e2      	b.n	8012f50 <__d2b+0x70>
 8012f8a:	bf00      	nop
 8012f8c:	08013e64 	.word	0x08013e64
 8012f90:	08013ed5 	.word	0x08013ed5

08012f94 <__ratio>:
 8012f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f98:	4688      	mov	r8, r1
 8012f9a:	4669      	mov	r1, sp
 8012f9c:	4681      	mov	r9, r0
 8012f9e:	f7ff ff55 	bl	8012e4c <__b2d>
 8012fa2:	a901      	add	r1, sp, #4
 8012fa4:	4640      	mov	r0, r8
 8012fa6:	ec55 4b10 	vmov	r4, r5, d0
 8012faa:	f7ff ff4f 	bl	8012e4c <__b2d>
 8012fae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012fb6:	eba3 0c02 	sub.w	ip, r3, r2
 8012fba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012fbe:	1a9b      	subs	r3, r3, r2
 8012fc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012fc4:	ec51 0b10 	vmov	r0, r1, d0
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	bfd6      	itet	le
 8012fcc:	460a      	movle	r2, r1
 8012fce:	462a      	movgt	r2, r5
 8012fd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012fd4:	468b      	mov	fp, r1
 8012fd6:	462f      	mov	r7, r5
 8012fd8:	bfd4      	ite	le
 8012fda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012fde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	ee10 2a10 	vmov	r2, s0
 8012fe8:	465b      	mov	r3, fp
 8012fea:	4639      	mov	r1, r7
 8012fec:	f7ed fc56 	bl	800089c <__aeabi_ddiv>
 8012ff0:	ec41 0b10 	vmov	d0, r0, r1
 8012ff4:	b003      	add	sp, #12
 8012ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ffa <__copybits>:
 8012ffa:	3901      	subs	r1, #1
 8012ffc:	b570      	push	{r4, r5, r6, lr}
 8012ffe:	1149      	asrs	r1, r1, #5
 8013000:	6914      	ldr	r4, [r2, #16]
 8013002:	3101      	adds	r1, #1
 8013004:	f102 0314 	add.w	r3, r2, #20
 8013008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801300c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013010:	1f05      	subs	r5, r0, #4
 8013012:	42a3      	cmp	r3, r4
 8013014:	d30c      	bcc.n	8013030 <__copybits+0x36>
 8013016:	1aa3      	subs	r3, r4, r2
 8013018:	3b11      	subs	r3, #17
 801301a:	f023 0303 	bic.w	r3, r3, #3
 801301e:	3211      	adds	r2, #17
 8013020:	42a2      	cmp	r2, r4
 8013022:	bf88      	it	hi
 8013024:	2300      	movhi	r3, #0
 8013026:	4418      	add	r0, r3
 8013028:	2300      	movs	r3, #0
 801302a:	4288      	cmp	r0, r1
 801302c:	d305      	bcc.n	801303a <__copybits+0x40>
 801302e:	bd70      	pop	{r4, r5, r6, pc}
 8013030:	f853 6b04 	ldr.w	r6, [r3], #4
 8013034:	f845 6f04 	str.w	r6, [r5, #4]!
 8013038:	e7eb      	b.n	8013012 <__copybits+0x18>
 801303a:	f840 3b04 	str.w	r3, [r0], #4
 801303e:	e7f4      	b.n	801302a <__copybits+0x30>

08013040 <__any_on>:
 8013040:	f100 0214 	add.w	r2, r0, #20
 8013044:	6900      	ldr	r0, [r0, #16]
 8013046:	114b      	asrs	r3, r1, #5
 8013048:	4298      	cmp	r0, r3
 801304a:	b510      	push	{r4, lr}
 801304c:	db11      	blt.n	8013072 <__any_on+0x32>
 801304e:	dd0a      	ble.n	8013066 <__any_on+0x26>
 8013050:	f011 011f 	ands.w	r1, r1, #31
 8013054:	d007      	beq.n	8013066 <__any_on+0x26>
 8013056:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801305a:	fa24 f001 	lsr.w	r0, r4, r1
 801305e:	fa00 f101 	lsl.w	r1, r0, r1
 8013062:	428c      	cmp	r4, r1
 8013064:	d10b      	bne.n	801307e <__any_on+0x3e>
 8013066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801306a:	4293      	cmp	r3, r2
 801306c:	d803      	bhi.n	8013076 <__any_on+0x36>
 801306e:	2000      	movs	r0, #0
 8013070:	bd10      	pop	{r4, pc}
 8013072:	4603      	mov	r3, r0
 8013074:	e7f7      	b.n	8013066 <__any_on+0x26>
 8013076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801307a:	2900      	cmp	r1, #0
 801307c:	d0f5      	beq.n	801306a <__any_on+0x2a>
 801307e:	2001      	movs	r0, #1
 8013080:	e7f6      	b.n	8013070 <__any_on+0x30>

08013082 <__ascii_wctomb>:
 8013082:	b149      	cbz	r1, 8013098 <__ascii_wctomb+0x16>
 8013084:	2aff      	cmp	r2, #255	; 0xff
 8013086:	bf85      	ittet	hi
 8013088:	238a      	movhi	r3, #138	; 0x8a
 801308a:	6003      	strhi	r3, [r0, #0]
 801308c:	700a      	strbls	r2, [r1, #0]
 801308e:	f04f 30ff 	movhi.w	r0, #4294967295
 8013092:	bf98      	it	ls
 8013094:	2001      	movls	r0, #1
 8013096:	4770      	bx	lr
 8013098:	4608      	mov	r0, r1
 801309a:	4770      	bx	lr

0801309c <__ssputs_r>:
 801309c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130a0:	688e      	ldr	r6, [r1, #8]
 80130a2:	461f      	mov	r7, r3
 80130a4:	42be      	cmp	r6, r7
 80130a6:	680b      	ldr	r3, [r1, #0]
 80130a8:	4682      	mov	sl, r0
 80130aa:	460c      	mov	r4, r1
 80130ac:	4690      	mov	r8, r2
 80130ae:	d82c      	bhi.n	801310a <__ssputs_r+0x6e>
 80130b0:	898a      	ldrh	r2, [r1, #12]
 80130b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80130b6:	d026      	beq.n	8013106 <__ssputs_r+0x6a>
 80130b8:	6965      	ldr	r5, [r4, #20]
 80130ba:	6909      	ldr	r1, [r1, #16]
 80130bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130c0:	eba3 0901 	sub.w	r9, r3, r1
 80130c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80130c8:	1c7b      	adds	r3, r7, #1
 80130ca:	444b      	add	r3, r9
 80130cc:	106d      	asrs	r5, r5, #1
 80130ce:	429d      	cmp	r5, r3
 80130d0:	bf38      	it	cc
 80130d2:	461d      	movcc	r5, r3
 80130d4:	0553      	lsls	r3, r2, #21
 80130d6:	d527      	bpl.n	8013128 <__ssputs_r+0x8c>
 80130d8:	4629      	mov	r1, r5
 80130da:	f7fc f83d 	bl	800f158 <_malloc_r>
 80130de:	4606      	mov	r6, r0
 80130e0:	b360      	cbz	r0, 801313c <__ssputs_r+0xa0>
 80130e2:	6921      	ldr	r1, [r4, #16]
 80130e4:	464a      	mov	r2, r9
 80130e6:	f7fe f8b4 	bl	8011252 <memcpy>
 80130ea:	89a3      	ldrh	r3, [r4, #12]
 80130ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80130f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130f4:	81a3      	strh	r3, [r4, #12]
 80130f6:	6126      	str	r6, [r4, #16]
 80130f8:	6165      	str	r5, [r4, #20]
 80130fa:	444e      	add	r6, r9
 80130fc:	eba5 0509 	sub.w	r5, r5, r9
 8013100:	6026      	str	r6, [r4, #0]
 8013102:	60a5      	str	r5, [r4, #8]
 8013104:	463e      	mov	r6, r7
 8013106:	42be      	cmp	r6, r7
 8013108:	d900      	bls.n	801310c <__ssputs_r+0x70>
 801310a:	463e      	mov	r6, r7
 801310c:	6820      	ldr	r0, [r4, #0]
 801310e:	4632      	mov	r2, r6
 8013110:	4641      	mov	r1, r8
 8013112:	f000 f9db 	bl	80134cc <memmove>
 8013116:	68a3      	ldr	r3, [r4, #8]
 8013118:	1b9b      	subs	r3, r3, r6
 801311a:	60a3      	str	r3, [r4, #8]
 801311c:	6823      	ldr	r3, [r4, #0]
 801311e:	4433      	add	r3, r6
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	2000      	movs	r0, #0
 8013124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013128:	462a      	mov	r2, r5
 801312a:	f000 fa06 	bl	801353a <_realloc_r>
 801312e:	4606      	mov	r6, r0
 8013130:	2800      	cmp	r0, #0
 8013132:	d1e0      	bne.n	80130f6 <__ssputs_r+0x5a>
 8013134:	6921      	ldr	r1, [r4, #16]
 8013136:	4650      	mov	r0, sl
 8013138:	f7fe ff40 	bl	8011fbc <_free_r>
 801313c:	230c      	movs	r3, #12
 801313e:	f8ca 3000 	str.w	r3, [sl]
 8013142:	89a3      	ldrh	r3, [r4, #12]
 8013144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013148:	81a3      	strh	r3, [r4, #12]
 801314a:	f04f 30ff 	mov.w	r0, #4294967295
 801314e:	e7e9      	b.n	8013124 <__ssputs_r+0x88>

08013150 <_svfiprintf_r>:
 8013150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013154:	4698      	mov	r8, r3
 8013156:	898b      	ldrh	r3, [r1, #12]
 8013158:	061b      	lsls	r3, r3, #24
 801315a:	b09d      	sub	sp, #116	; 0x74
 801315c:	4607      	mov	r7, r0
 801315e:	460d      	mov	r5, r1
 8013160:	4614      	mov	r4, r2
 8013162:	d50e      	bpl.n	8013182 <_svfiprintf_r+0x32>
 8013164:	690b      	ldr	r3, [r1, #16]
 8013166:	b963      	cbnz	r3, 8013182 <_svfiprintf_r+0x32>
 8013168:	2140      	movs	r1, #64	; 0x40
 801316a:	f7fb fff5 	bl	800f158 <_malloc_r>
 801316e:	6028      	str	r0, [r5, #0]
 8013170:	6128      	str	r0, [r5, #16]
 8013172:	b920      	cbnz	r0, 801317e <_svfiprintf_r+0x2e>
 8013174:	230c      	movs	r3, #12
 8013176:	603b      	str	r3, [r7, #0]
 8013178:	f04f 30ff 	mov.w	r0, #4294967295
 801317c:	e0d0      	b.n	8013320 <_svfiprintf_r+0x1d0>
 801317e:	2340      	movs	r3, #64	; 0x40
 8013180:	616b      	str	r3, [r5, #20]
 8013182:	2300      	movs	r3, #0
 8013184:	9309      	str	r3, [sp, #36]	; 0x24
 8013186:	2320      	movs	r3, #32
 8013188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801318c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013190:	2330      	movs	r3, #48	; 0x30
 8013192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013338 <_svfiprintf_r+0x1e8>
 8013196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801319a:	f04f 0901 	mov.w	r9, #1
 801319e:	4623      	mov	r3, r4
 80131a0:	469a      	mov	sl, r3
 80131a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131a6:	b10a      	cbz	r2, 80131ac <_svfiprintf_r+0x5c>
 80131a8:	2a25      	cmp	r2, #37	; 0x25
 80131aa:	d1f9      	bne.n	80131a0 <_svfiprintf_r+0x50>
 80131ac:	ebba 0b04 	subs.w	fp, sl, r4
 80131b0:	d00b      	beq.n	80131ca <_svfiprintf_r+0x7a>
 80131b2:	465b      	mov	r3, fp
 80131b4:	4622      	mov	r2, r4
 80131b6:	4629      	mov	r1, r5
 80131b8:	4638      	mov	r0, r7
 80131ba:	f7ff ff6f 	bl	801309c <__ssputs_r>
 80131be:	3001      	adds	r0, #1
 80131c0:	f000 80a9 	beq.w	8013316 <_svfiprintf_r+0x1c6>
 80131c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131c6:	445a      	add	r2, fp
 80131c8:	9209      	str	r2, [sp, #36]	; 0x24
 80131ca:	f89a 3000 	ldrb.w	r3, [sl]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	f000 80a1 	beq.w	8013316 <_svfiprintf_r+0x1c6>
 80131d4:	2300      	movs	r3, #0
 80131d6:	f04f 32ff 	mov.w	r2, #4294967295
 80131da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131de:	f10a 0a01 	add.w	sl, sl, #1
 80131e2:	9304      	str	r3, [sp, #16]
 80131e4:	9307      	str	r3, [sp, #28]
 80131e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131ea:	931a      	str	r3, [sp, #104]	; 0x68
 80131ec:	4654      	mov	r4, sl
 80131ee:	2205      	movs	r2, #5
 80131f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f4:	4850      	ldr	r0, [pc, #320]	; (8013338 <_svfiprintf_r+0x1e8>)
 80131f6:	f7ed f813 	bl	8000220 <memchr>
 80131fa:	9a04      	ldr	r2, [sp, #16]
 80131fc:	b9d8      	cbnz	r0, 8013236 <_svfiprintf_r+0xe6>
 80131fe:	06d0      	lsls	r0, r2, #27
 8013200:	bf44      	itt	mi
 8013202:	2320      	movmi	r3, #32
 8013204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013208:	0711      	lsls	r1, r2, #28
 801320a:	bf44      	itt	mi
 801320c:	232b      	movmi	r3, #43	; 0x2b
 801320e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013212:	f89a 3000 	ldrb.w	r3, [sl]
 8013216:	2b2a      	cmp	r3, #42	; 0x2a
 8013218:	d015      	beq.n	8013246 <_svfiprintf_r+0xf6>
 801321a:	9a07      	ldr	r2, [sp, #28]
 801321c:	4654      	mov	r4, sl
 801321e:	2000      	movs	r0, #0
 8013220:	f04f 0c0a 	mov.w	ip, #10
 8013224:	4621      	mov	r1, r4
 8013226:	f811 3b01 	ldrb.w	r3, [r1], #1
 801322a:	3b30      	subs	r3, #48	; 0x30
 801322c:	2b09      	cmp	r3, #9
 801322e:	d94d      	bls.n	80132cc <_svfiprintf_r+0x17c>
 8013230:	b1b0      	cbz	r0, 8013260 <_svfiprintf_r+0x110>
 8013232:	9207      	str	r2, [sp, #28]
 8013234:	e014      	b.n	8013260 <_svfiprintf_r+0x110>
 8013236:	eba0 0308 	sub.w	r3, r0, r8
 801323a:	fa09 f303 	lsl.w	r3, r9, r3
 801323e:	4313      	orrs	r3, r2
 8013240:	9304      	str	r3, [sp, #16]
 8013242:	46a2      	mov	sl, r4
 8013244:	e7d2      	b.n	80131ec <_svfiprintf_r+0x9c>
 8013246:	9b03      	ldr	r3, [sp, #12]
 8013248:	1d19      	adds	r1, r3, #4
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	9103      	str	r1, [sp, #12]
 801324e:	2b00      	cmp	r3, #0
 8013250:	bfbb      	ittet	lt
 8013252:	425b      	neglt	r3, r3
 8013254:	f042 0202 	orrlt.w	r2, r2, #2
 8013258:	9307      	strge	r3, [sp, #28]
 801325a:	9307      	strlt	r3, [sp, #28]
 801325c:	bfb8      	it	lt
 801325e:	9204      	strlt	r2, [sp, #16]
 8013260:	7823      	ldrb	r3, [r4, #0]
 8013262:	2b2e      	cmp	r3, #46	; 0x2e
 8013264:	d10c      	bne.n	8013280 <_svfiprintf_r+0x130>
 8013266:	7863      	ldrb	r3, [r4, #1]
 8013268:	2b2a      	cmp	r3, #42	; 0x2a
 801326a:	d134      	bne.n	80132d6 <_svfiprintf_r+0x186>
 801326c:	9b03      	ldr	r3, [sp, #12]
 801326e:	1d1a      	adds	r2, r3, #4
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	9203      	str	r2, [sp, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	bfb8      	it	lt
 8013278:	f04f 33ff 	movlt.w	r3, #4294967295
 801327c:	3402      	adds	r4, #2
 801327e:	9305      	str	r3, [sp, #20]
 8013280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013348 <_svfiprintf_r+0x1f8>
 8013284:	7821      	ldrb	r1, [r4, #0]
 8013286:	2203      	movs	r2, #3
 8013288:	4650      	mov	r0, sl
 801328a:	f7ec ffc9 	bl	8000220 <memchr>
 801328e:	b138      	cbz	r0, 80132a0 <_svfiprintf_r+0x150>
 8013290:	9b04      	ldr	r3, [sp, #16]
 8013292:	eba0 000a 	sub.w	r0, r0, sl
 8013296:	2240      	movs	r2, #64	; 0x40
 8013298:	4082      	lsls	r2, r0
 801329a:	4313      	orrs	r3, r2
 801329c:	3401      	adds	r4, #1
 801329e:	9304      	str	r3, [sp, #16]
 80132a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a4:	4825      	ldr	r0, [pc, #148]	; (801333c <_svfiprintf_r+0x1ec>)
 80132a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132aa:	2206      	movs	r2, #6
 80132ac:	f7ec ffb8 	bl	8000220 <memchr>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d038      	beq.n	8013326 <_svfiprintf_r+0x1d6>
 80132b4:	4b22      	ldr	r3, [pc, #136]	; (8013340 <_svfiprintf_r+0x1f0>)
 80132b6:	bb1b      	cbnz	r3, 8013300 <_svfiprintf_r+0x1b0>
 80132b8:	9b03      	ldr	r3, [sp, #12]
 80132ba:	3307      	adds	r3, #7
 80132bc:	f023 0307 	bic.w	r3, r3, #7
 80132c0:	3308      	adds	r3, #8
 80132c2:	9303      	str	r3, [sp, #12]
 80132c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132c6:	4433      	add	r3, r6
 80132c8:	9309      	str	r3, [sp, #36]	; 0x24
 80132ca:	e768      	b.n	801319e <_svfiprintf_r+0x4e>
 80132cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80132d0:	460c      	mov	r4, r1
 80132d2:	2001      	movs	r0, #1
 80132d4:	e7a6      	b.n	8013224 <_svfiprintf_r+0xd4>
 80132d6:	2300      	movs	r3, #0
 80132d8:	3401      	adds	r4, #1
 80132da:	9305      	str	r3, [sp, #20]
 80132dc:	4619      	mov	r1, r3
 80132de:	f04f 0c0a 	mov.w	ip, #10
 80132e2:	4620      	mov	r0, r4
 80132e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132e8:	3a30      	subs	r2, #48	; 0x30
 80132ea:	2a09      	cmp	r2, #9
 80132ec:	d903      	bls.n	80132f6 <_svfiprintf_r+0x1a6>
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0c6      	beq.n	8013280 <_svfiprintf_r+0x130>
 80132f2:	9105      	str	r1, [sp, #20]
 80132f4:	e7c4      	b.n	8013280 <_svfiprintf_r+0x130>
 80132f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80132fa:	4604      	mov	r4, r0
 80132fc:	2301      	movs	r3, #1
 80132fe:	e7f0      	b.n	80132e2 <_svfiprintf_r+0x192>
 8013300:	ab03      	add	r3, sp, #12
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	462a      	mov	r2, r5
 8013306:	4b0f      	ldr	r3, [pc, #60]	; (8013344 <_svfiprintf_r+0x1f4>)
 8013308:	a904      	add	r1, sp, #16
 801330a:	4638      	mov	r0, r7
 801330c:	f7fc ff56 	bl	80101bc <_printf_float>
 8013310:	1c42      	adds	r2, r0, #1
 8013312:	4606      	mov	r6, r0
 8013314:	d1d6      	bne.n	80132c4 <_svfiprintf_r+0x174>
 8013316:	89ab      	ldrh	r3, [r5, #12]
 8013318:	065b      	lsls	r3, r3, #25
 801331a:	f53f af2d 	bmi.w	8013178 <_svfiprintf_r+0x28>
 801331e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013320:	b01d      	add	sp, #116	; 0x74
 8013322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013326:	ab03      	add	r3, sp, #12
 8013328:	9300      	str	r3, [sp, #0]
 801332a:	462a      	mov	r2, r5
 801332c:	4b05      	ldr	r3, [pc, #20]	; (8013344 <_svfiprintf_r+0x1f4>)
 801332e:	a904      	add	r1, sp, #16
 8013330:	4638      	mov	r0, r7
 8013332:	f7fd f9e7 	bl	8010704 <_printf_i>
 8013336:	e7eb      	b.n	8013310 <_svfiprintf_r+0x1c0>
 8013338:	0801402c 	.word	0x0801402c
 801333c:	08014036 	.word	0x08014036
 8013340:	080101bd 	.word	0x080101bd
 8013344:	0801309d 	.word	0x0801309d
 8013348:	08014032 	.word	0x08014032

0801334c <__sflush_r>:
 801334c:	898a      	ldrh	r2, [r1, #12]
 801334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013352:	4605      	mov	r5, r0
 8013354:	0710      	lsls	r0, r2, #28
 8013356:	460c      	mov	r4, r1
 8013358:	d458      	bmi.n	801340c <__sflush_r+0xc0>
 801335a:	684b      	ldr	r3, [r1, #4]
 801335c:	2b00      	cmp	r3, #0
 801335e:	dc05      	bgt.n	801336c <__sflush_r+0x20>
 8013360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013362:	2b00      	cmp	r3, #0
 8013364:	dc02      	bgt.n	801336c <__sflush_r+0x20>
 8013366:	2000      	movs	r0, #0
 8013368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801336c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801336e:	2e00      	cmp	r6, #0
 8013370:	d0f9      	beq.n	8013366 <__sflush_r+0x1a>
 8013372:	2300      	movs	r3, #0
 8013374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013378:	682f      	ldr	r7, [r5, #0]
 801337a:	6a21      	ldr	r1, [r4, #32]
 801337c:	602b      	str	r3, [r5, #0]
 801337e:	d032      	beq.n	80133e6 <__sflush_r+0x9a>
 8013380:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	075a      	lsls	r2, r3, #29
 8013386:	d505      	bpl.n	8013394 <__sflush_r+0x48>
 8013388:	6863      	ldr	r3, [r4, #4]
 801338a:	1ac0      	subs	r0, r0, r3
 801338c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801338e:	b10b      	cbz	r3, 8013394 <__sflush_r+0x48>
 8013390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013392:	1ac0      	subs	r0, r0, r3
 8013394:	2300      	movs	r3, #0
 8013396:	4602      	mov	r2, r0
 8013398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801339a:	6a21      	ldr	r1, [r4, #32]
 801339c:	4628      	mov	r0, r5
 801339e:	47b0      	blx	r6
 80133a0:	1c43      	adds	r3, r0, #1
 80133a2:	89a3      	ldrh	r3, [r4, #12]
 80133a4:	d106      	bne.n	80133b4 <__sflush_r+0x68>
 80133a6:	6829      	ldr	r1, [r5, #0]
 80133a8:	291d      	cmp	r1, #29
 80133aa:	d82b      	bhi.n	8013404 <__sflush_r+0xb8>
 80133ac:	4a29      	ldr	r2, [pc, #164]	; (8013454 <__sflush_r+0x108>)
 80133ae:	410a      	asrs	r2, r1
 80133b0:	07d6      	lsls	r6, r2, #31
 80133b2:	d427      	bmi.n	8013404 <__sflush_r+0xb8>
 80133b4:	2200      	movs	r2, #0
 80133b6:	6062      	str	r2, [r4, #4]
 80133b8:	04d9      	lsls	r1, r3, #19
 80133ba:	6922      	ldr	r2, [r4, #16]
 80133bc:	6022      	str	r2, [r4, #0]
 80133be:	d504      	bpl.n	80133ca <__sflush_r+0x7e>
 80133c0:	1c42      	adds	r2, r0, #1
 80133c2:	d101      	bne.n	80133c8 <__sflush_r+0x7c>
 80133c4:	682b      	ldr	r3, [r5, #0]
 80133c6:	b903      	cbnz	r3, 80133ca <__sflush_r+0x7e>
 80133c8:	6560      	str	r0, [r4, #84]	; 0x54
 80133ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133cc:	602f      	str	r7, [r5, #0]
 80133ce:	2900      	cmp	r1, #0
 80133d0:	d0c9      	beq.n	8013366 <__sflush_r+0x1a>
 80133d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133d6:	4299      	cmp	r1, r3
 80133d8:	d002      	beq.n	80133e0 <__sflush_r+0x94>
 80133da:	4628      	mov	r0, r5
 80133dc:	f7fe fdee 	bl	8011fbc <_free_r>
 80133e0:	2000      	movs	r0, #0
 80133e2:	6360      	str	r0, [r4, #52]	; 0x34
 80133e4:	e7c0      	b.n	8013368 <__sflush_r+0x1c>
 80133e6:	2301      	movs	r3, #1
 80133e8:	4628      	mov	r0, r5
 80133ea:	47b0      	blx	r6
 80133ec:	1c41      	adds	r1, r0, #1
 80133ee:	d1c8      	bne.n	8013382 <__sflush_r+0x36>
 80133f0:	682b      	ldr	r3, [r5, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d0c5      	beq.n	8013382 <__sflush_r+0x36>
 80133f6:	2b1d      	cmp	r3, #29
 80133f8:	d001      	beq.n	80133fe <__sflush_r+0xb2>
 80133fa:	2b16      	cmp	r3, #22
 80133fc:	d101      	bne.n	8013402 <__sflush_r+0xb6>
 80133fe:	602f      	str	r7, [r5, #0]
 8013400:	e7b1      	b.n	8013366 <__sflush_r+0x1a>
 8013402:	89a3      	ldrh	r3, [r4, #12]
 8013404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013408:	81a3      	strh	r3, [r4, #12]
 801340a:	e7ad      	b.n	8013368 <__sflush_r+0x1c>
 801340c:	690f      	ldr	r7, [r1, #16]
 801340e:	2f00      	cmp	r7, #0
 8013410:	d0a9      	beq.n	8013366 <__sflush_r+0x1a>
 8013412:	0793      	lsls	r3, r2, #30
 8013414:	680e      	ldr	r6, [r1, #0]
 8013416:	bf08      	it	eq
 8013418:	694b      	ldreq	r3, [r1, #20]
 801341a:	600f      	str	r7, [r1, #0]
 801341c:	bf18      	it	ne
 801341e:	2300      	movne	r3, #0
 8013420:	eba6 0807 	sub.w	r8, r6, r7
 8013424:	608b      	str	r3, [r1, #8]
 8013426:	f1b8 0f00 	cmp.w	r8, #0
 801342a:	dd9c      	ble.n	8013366 <__sflush_r+0x1a>
 801342c:	6a21      	ldr	r1, [r4, #32]
 801342e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013430:	4643      	mov	r3, r8
 8013432:	463a      	mov	r2, r7
 8013434:	4628      	mov	r0, r5
 8013436:	47b0      	blx	r6
 8013438:	2800      	cmp	r0, #0
 801343a:	dc06      	bgt.n	801344a <__sflush_r+0xfe>
 801343c:	89a3      	ldrh	r3, [r4, #12]
 801343e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013442:	81a3      	strh	r3, [r4, #12]
 8013444:	f04f 30ff 	mov.w	r0, #4294967295
 8013448:	e78e      	b.n	8013368 <__sflush_r+0x1c>
 801344a:	4407      	add	r7, r0
 801344c:	eba8 0800 	sub.w	r8, r8, r0
 8013450:	e7e9      	b.n	8013426 <__sflush_r+0xda>
 8013452:	bf00      	nop
 8013454:	dfbffffe 	.word	0xdfbffffe

08013458 <_fflush_r>:
 8013458:	b538      	push	{r3, r4, r5, lr}
 801345a:	690b      	ldr	r3, [r1, #16]
 801345c:	4605      	mov	r5, r0
 801345e:	460c      	mov	r4, r1
 8013460:	b913      	cbnz	r3, 8013468 <_fflush_r+0x10>
 8013462:	2500      	movs	r5, #0
 8013464:	4628      	mov	r0, r5
 8013466:	bd38      	pop	{r3, r4, r5, pc}
 8013468:	b118      	cbz	r0, 8013472 <_fflush_r+0x1a>
 801346a:	6a03      	ldr	r3, [r0, #32]
 801346c:	b90b      	cbnz	r3, 8013472 <_fflush_r+0x1a>
 801346e:	f7fd fd07 	bl	8010e80 <__sinit>
 8013472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d0f3      	beq.n	8013462 <_fflush_r+0xa>
 801347a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801347c:	07d0      	lsls	r0, r2, #31
 801347e:	d404      	bmi.n	801348a <_fflush_r+0x32>
 8013480:	0599      	lsls	r1, r3, #22
 8013482:	d402      	bmi.n	801348a <_fflush_r+0x32>
 8013484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013486:	f7fd feda 	bl	801123e <__retarget_lock_acquire_recursive>
 801348a:	4628      	mov	r0, r5
 801348c:	4621      	mov	r1, r4
 801348e:	f7ff ff5d 	bl	801334c <__sflush_r>
 8013492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013494:	07da      	lsls	r2, r3, #31
 8013496:	4605      	mov	r5, r0
 8013498:	d4e4      	bmi.n	8013464 <_fflush_r+0xc>
 801349a:	89a3      	ldrh	r3, [r4, #12]
 801349c:	059b      	lsls	r3, r3, #22
 801349e:	d4e1      	bmi.n	8013464 <_fflush_r+0xc>
 80134a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134a2:	f7fd fecd 	bl	8011240 <__retarget_lock_release_recursive>
 80134a6:	e7dd      	b.n	8013464 <_fflush_r+0xc>

080134a8 <fiprintf>:
 80134a8:	b40e      	push	{r1, r2, r3}
 80134aa:	b503      	push	{r0, r1, lr}
 80134ac:	4601      	mov	r1, r0
 80134ae:	ab03      	add	r3, sp, #12
 80134b0:	4805      	ldr	r0, [pc, #20]	; (80134c8 <fiprintf+0x20>)
 80134b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80134b6:	6800      	ldr	r0, [r0, #0]
 80134b8:	9301      	str	r3, [sp, #4]
 80134ba:	f000 f897 	bl	80135ec <_vfiprintf_r>
 80134be:	b002      	add	sp, #8
 80134c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80134c4:	b003      	add	sp, #12
 80134c6:	4770      	bx	lr
 80134c8:	20000348 	.word	0x20000348

080134cc <memmove>:
 80134cc:	4288      	cmp	r0, r1
 80134ce:	b510      	push	{r4, lr}
 80134d0:	eb01 0402 	add.w	r4, r1, r2
 80134d4:	d902      	bls.n	80134dc <memmove+0x10>
 80134d6:	4284      	cmp	r4, r0
 80134d8:	4623      	mov	r3, r4
 80134da:	d807      	bhi.n	80134ec <memmove+0x20>
 80134dc:	1e43      	subs	r3, r0, #1
 80134de:	42a1      	cmp	r1, r4
 80134e0:	d008      	beq.n	80134f4 <memmove+0x28>
 80134e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134ea:	e7f8      	b.n	80134de <memmove+0x12>
 80134ec:	4402      	add	r2, r0
 80134ee:	4601      	mov	r1, r0
 80134f0:	428a      	cmp	r2, r1
 80134f2:	d100      	bne.n	80134f6 <memmove+0x2a>
 80134f4:	bd10      	pop	{r4, pc}
 80134f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134fe:	e7f7      	b.n	80134f0 <memmove+0x24>

08013500 <abort>:
 8013500:	b508      	push	{r3, lr}
 8013502:	2006      	movs	r0, #6
 8013504:	f000 fa4a 	bl	801399c <raise>
 8013508:	2001      	movs	r0, #1
 801350a:	f7ee fe23 	bl	8002154 <_exit>

0801350e <_calloc_r>:
 801350e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013510:	fba1 2402 	umull	r2, r4, r1, r2
 8013514:	b94c      	cbnz	r4, 801352a <_calloc_r+0x1c>
 8013516:	4611      	mov	r1, r2
 8013518:	9201      	str	r2, [sp, #4]
 801351a:	f7fb fe1d 	bl	800f158 <_malloc_r>
 801351e:	9a01      	ldr	r2, [sp, #4]
 8013520:	4605      	mov	r5, r0
 8013522:	b930      	cbnz	r0, 8013532 <_calloc_r+0x24>
 8013524:	4628      	mov	r0, r5
 8013526:	b003      	add	sp, #12
 8013528:	bd30      	pop	{r4, r5, pc}
 801352a:	220c      	movs	r2, #12
 801352c:	6002      	str	r2, [r0, #0]
 801352e:	2500      	movs	r5, #0
 8013530:	e7f8      	b.n	8013524 <_calloc_r+0x16>
 8013532:	4621      	mov	r1, r4
 8013534:	f7fd fd71 	bl	801101a <memset>
 8013538:	e7f4      	b.n	8013524 <_calloc_r+0x16>

0801353a <_realloc_r>:
 801353a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801353e:	4680      	mov	r8, r0
 8013540:	4614      	mov	r4, r2
 8013542:	460e      	mov	r6, r1
 8013544:	b921      	cbnz	r1, 8013550 <_realloc_r+0x16>
 8013546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801354a:	4611      	mov	r1, r2
 801354c:	f7fb be04 	b.w	800f158 <_malloc_r>
 8013550:	b92a      	cbnz	r2, 801355e <_realloc_r+0x24>
 8013552:	f7fe fd33 	bl	8011fbc <_free_r>
 8013556:	4625      	mov	r5, r4
 8013558:	4628      	mov	r0, r5
 801355a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801355e:	f000 fa39 	bl	80139d4 <_malloc_usable_size_r>
 8013562:	4284      	cmp	r4, r0
 8013564:	4607      	mov	r7, r0
 8013566:	d802      	bhi.n	801356e <_realloc_r+0x34>
 8013568:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801356c:	d812      	bhi.n	8013594 <_realloc_r+0x5a>
 801356e:	4621      	mov	r1, r4
 8013570:	4640      	mov	r0, r8
 8013572:	f7fb fdf1 	bl	800f158 <_malloc_r>
 8013576:	4605      	mov	r5, r0
 8013578:	2800      	cmp	r0, #0
 801357a:	d0ed      	beq.n	8013558 <_realloc_r+0x1e>
 801357c:	42bc      	cmp	r4, r7
 801357e:	4622      	mov	r2, r4
 8013580:	4631      	mov	r1, r6
 8013582:	bf28      	it	cs
 8013584:	463a      	movcs	r2, r7
 8013586:	f7fd fe64 	bl	8011252 <memcpy>
 801358a:	4631      	mov	r1, r6
 801358c:	4640      	mov	r0, r8
 801358e:	f7fe fd15 	bl	8011fbc <_free_r>
 8013592:	e7e1      	b.n	8013558 <_realloc_r+0x1e>
 8013594:	4635      	mov	r5, r6
 8013596:	e7df      	b.n	8013558 <_realloc_r+0x1e>

08013598 <__sfputc_r>:
 8013598:	6893      	ldr	r3, [r2, #8]
 801359a:	3b01      	subs	r3, #1
 801359c:	2b00      	cmp	r3, #0
 801359e:	b410      	push	{r4}
 80135a0:	6093      	str	r3, [r2, #8]
 80135a2:	da08      	bge.n	80135b6 <__sfputc_r+0x1e>
 80135a4:	6994      	ldr	r4, [r2, #24]
 80135a6:	42a3      	cmp	r3, r4
 80135a8:	db01      	blt.n	80135ae <__sfputc_r+0x16>
 80135aa:	290a      	cmp	r1, #10
 80135ac:	d103      	bne.n	80135b6 <__sfputc_r+0x1e>
 80135ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135b2:	f000 b935 	b.w	8013820 <__swbuf_r>
 80135b6:	6813      	ldr	r3, [r2, #0]
 80135b8:	1c58      	adds	r0, r3, #1
 80135ba:	6010      	str	r0, [r2, #0]
 80135bc:	7019      	strb	r1, [r3, #0]
 80135be:	4608      	mov	r0, r1
 80135c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <__sfputs_r>:
 80135c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c8:	4606      	mov	r6, r0
 80135ca:	460f      	mov	r7, r1
 80135cc:	4614      	mov	r4, r2
 80135ce:	18d5      	adds	r5, r2, r3
 80135d0:	42ac      	cmp	r4, r5
 80135d2:	d101      	bne.n	80135d8 <__sfputs_r+0x12>
 80135d4:	2000      	movs	r0, #0
 80135d6:	e007      	b.n	80135e8 <__sfputs_r+0x22>
 80135d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135dc:	463a      	mov	r2, r7
 80135de:	4630      	mov	r0, r6
 80135e0:	f7ff ffda 	bl	8013598 <__sfputc_r>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d1f3      	bne.n	80135d0 <__sfputs_r+0xa>
 80135e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135ec <_vfiprintf_r>:
 80135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	460d      	mov	r5, r1
 80135f2:	b09d      	sub	sp, #116	; 0x74
 80135f4:	4614      	mov	r4, r2
 80135f6:	4698      	mov	r8, r3
 80135f8:	4606      	mov	r6, r0
 80135fa:	b118      	cbz	r0, 8013604 <_vfiprintf_r+0x18>
 80135fc:	6a03      	ldr	r3, [r0, #32]
 80135fe:	b90b      	cbnz	r3, 8013604 <_vfiprintf_r+0x18>
 8013600:	f7fd fc3e 	bl	8010e80 <__sinit>
 8013604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013606:	07d9      	lsls	r1, r3, #31
 8013608:	d405      	bmi.n	8013616 <_vfiprintf_r+0x2a>
 801360a:	89ab      	ldrh	r3, [r5, #12]
 801360c:	059a      	lsls	r2, r3, #22
 801360e:	d402      	bmi.n	8013616 <_vfiprintf_r+0x2a>
 8013610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013612:	f7fd fe14 	bl	801123e <__retarget_lock_acquire_recursive>
 8013616:	89ab      	ldrh	r3, [r5, #12]
 8013618:	071b      	lsls	r3, r3, #28
 801361a:	d501      	bpl.n	8013620 <_vfiprintf_r+0x34>
 801361c:	692b      	ldr	r3, [r5, #16]
 801361e:	b99b      	cbnz	r3, 8013648 <_vfiprintf_r+0x5c>
 8013620:	4629      	mov	r1, r5
 8013622:	4630      	mov	r0, r6
 8013624:	f000 f93a 	bl	801389c <__swsetup_r>
 8013628:	b170      	cbz	r0, 8013648 <_vfiprintf_r+0x5c>
 801362a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801362c:	07dc      	lsls	r4, r3, #31
 801362e:	d504      	bpl.n	801363a <_vfiprintf_r+0x4e>
 8013630:	f04f 30ff 	mov.w	r0, #4294967295
 8013634:	b01d      	add	sp, #116	; 0x74
 8013636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801363a:	89ab      	ldrh	r3, [r5, #12]
 801363c:	0598      	lsls	r0, r3, #22
 801363e:	d4f7      	bmi.n	8013630 <_vfiprintf_r+0x44>
 8013640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013642:	f7fd fdfd 	bl	8011240 <__retarget_lock_release_recursive>
 8013646:	e7f3      	b.n	8013630 <_vfiprintf_r+0x44>
 8013648:	2300      	movs	r3, #0
 801364a:	9309      	str	r3, [sp, #36]	; 0x24
 801364c:	2320      	movs	r3, #32
 801364e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013652:	f8cd 800c 	str.w	r8, [sp, #12]
 8013656:	2330      	movs	r3, #48	; 0x30
 8013658:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801380c <_vfiprintf_r+0x220>
 801365c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013660:	f04f 0901 	mov.w	r9, #1
 8013664:	4623      	mov	r3, r4
 8013666:	469a      	mov	sl, r3
 8013668:	f813 2b01 	ldrb.w	r2, [r3], #1
 801366c:	b10a      	cbz	r2, 8013672 <_vfiprintf_r+0x86>
 801366e:	2a25      	cmp	r2, #37	; 0x25
 8013670:	d1f9      	bne.n	8013666 <_vfiprintf_r+0x7a>
 8013672:	ebba 0b04 	subs.w	fp, sl, r4
 8013676:	d00b      	beq.n	8013690 <_vfiprintf_r+0xa4>
 8013678:	465b      	mov	r3, fp
 801367a:	4622      	mov	r2, r4
 801367c:	4629      	mov	r1, r5
 801367e:	4630      	mov	r0, r6
 8013680:	f7ff ffa1 	bl	80135c6 <__sfputs_r>
 8013684:	3001      	adds	r0, #1
 8013686:	f000 80a9 	beq.w	80137dc <_vfiprintf_r+0x1f0>
 801368a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801368c:	445a      	add	r2, fp
 801368e:	9209      	str	r2, [sp, #36]	; 0x24
 8013690:	f89a 3000 	ldrb.w	r3, [sl]
 8013694:	2b00      	cmp	r3, #0
 8013696:	f000 80a1 	beq.w	80137dc <_vfiprintf_r+0x1f0>
 801369a:	2300      	movs	r3, #0
 801369c:	f04f 32ff 	mov.w	r2, #4294967295
 80136a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136a4:	f10a 0a01 	add.w	sl, sl, #1
 80136a8:	9304      	str	r3, [sp, #16]
 80136aa:	9307      	str	r3, [sp, #28]
 80136ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136b0:	931a      	str	r3, [sp, #104]	; 0x68
 80136b2:	4654      	mov	r4, sl
 80136b4:	2205      	movs	r2, #5
 80136b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136ba:	4854      	ldr	r0, [pc, #336]	; (801380c <_vfiprintf_r+0x220>)
 80136bc:	f7ec fdb0 	bl	8000220 <memchr>
 80136c0:	9a04      	ldr	r2, [sp, #16]
 80136c2:	b9d8      	cbnz	r0, 80136fc <_vfiprintf_r+0x110>
 80136c4:	06d1      	lsls	r1, r2, #27
 80136c6:	bf44      	itt	mi
 80136c8:	2320      	movmi	r3, #32
 80136ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136ce:	0713      	lsls	r3, r2, #28
 80136d0:	bf44      	itt	mi
 80136d2:	232b      	movmi	r3, #43	; 0x2b
 80136d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136d8:	f89a 3000 	ldrb.w	r3, [sl]
 80136dc:	2b2a      	cmp	r3, #42	; 0x2a
 80136de:	d015      	beq.n	801370c <_vfiprintf_r+0x120>
 80136e0:	9a07      	ldr	r2, [sp, #28]
 80136e2:	4654      	mov	r4, sl
 80136e4:	2000      	movs	r0, #0
 80136e6:	f04f 0c0a 	mov.w	ip, #10
 80136ea:	4621      	mov	r1, r4
 80136ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136f0:	3b30      	subs	r3, #48	; 0x30
 80136f2:	2b09      	cmp	r3, #9
 80136f4:	d94d      	bls.n	8013792 <_vfiprintf_r+0x1a6>
 80136f6:	b1b0      	cbz	r0, 8013726 <_vfiprintf_r+0x13a>
 80136f8:	9207      	str	r2, [sp, #28]
 80136fa:	e014      	b.n	8013726 <_vfiprintf_r+0x13a>
 80136fc:	eba0 0308 	sub.w	r3, r0, r8
 8013700:	fa09 f303 	lsl.w	r3, r9, r3
 8013704:	4313      	orrs	r3, r2
 8013706:	9304      	str	r3, [sp, #16]
 8013708:	46a2      	mov	sl, r4
 801370a:	e7d2      	b.n	80136b2 <_vfiprintf_r+0xc6>
 801370c:	9b03      	ldr	r3, [sp, #12]
 801370e:	1d19      	adds	r1, r3, #4
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	9103      	str	r1, [sp, #12]
 8013714:	2b00      	cmp	r3, #0
 8013716:	bfbb      	ittet	lt
 8013718:	425b      	neglt	r3, r3
 801371a:	f042 0202 	orrlt.w	r2, r2, #2
 801371e:	9307      	strge	r3, [sp, #28]
 8013720:	9307      	strlt	r3, [sp, #28]
 8013722:	bfb8      	it	lt
 8013724:	9204      	strlt	r2, [sp, #16]
 8013726:	7823      	ldrb	r3, [r4, #0]
 8013728:	2b2e      	cmp	r3, #46	; 0x2e
 801372a:	d10c      	bne.n	8013746 <_vfiprintf_r+0x15a>
 801372c:	7863      	ldrb	r3, [r4, #1]
 801372e:	2b2a      	cmp	r3, #42	; 0x2a
 8013730:	d134      	bne.n	801379c <_vfiprintf_r+0x1b0>
 8013732:	9b03      	ldr	r3, [sp, #12]
 8013734:	1d1a      	adds	r2, r3, #4
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	9203      	str	r2, [sp, #12]
 801373a:	2b00      	cmp	r3, #0
 801373c:	bfb8      	it	lt
 801373e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013742:	3402      	adds	r4, #2
 8013744:	9305      	str	r3, [sp, #20]
 8013746:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801381c <_vfiprintf_r+0x230>
 801374a:	7821      	ldrb	r1, [r4, #0]
 801374c:	2203      	movs	r2, #3
 801374e:	4650      	mov	r0, sl
 8013750:	f7ec fd66 	bl	8000220 <memchr>
 8013754:	b138      	cbz	r0, 8013766 <_vfiprintf_r+0x17a>
 8013756:	9b04      	ldr	r3, [sp, #16]
 8013758:	eba0 000a 	sub.w	r0, r0, sl
 801375c:	2240      	movs	r2, #64	; 0x40
 801375e:	4082      	lsls	r2, r0
 8013760:	4313      	orrs	r3, r2
 8013762:	3401      	adds	r4, #1
 8013764:	9304      	str	r3, [sp, #16]
 8013766:	f814 1b01 	ldrb.w	r1, [r4], #1
 801376a:	4829      	ldr	r0, [pc, #164]	; (8013810 <_vfiprintf_r+0x224>)
 801376c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013770:	2206      	movs	r2, #6
 8013772:	f7ec fd55 	bl	8000220 <memchr>
 8013776:	2800      	cmp	r0, #0
 8013778:	d03f      	beq.n	80137fa <_vfiprintf_r+0x20e>
 801377a:	4b26      	ldr	r3, [pc, #152]	; (8013814 <_vfiprintf_r+0x228>)
 801377c:	bb1b      	cbnz	r3, 80137c6 <_vfiprintf_r+0x1da>
 801377e:	9b03      	ldr	r3, [sp, #12]
 8013780:	3307      	adds	r3, #7
 8013782:	f023 0307 	bic.w	r3, r3, #7
 8013786:	3308      	adds	r3, #8
 8013788:	9303      	str	r3, [sp, #12]
 801378a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801378c:	443b      	add	r3, r7
 801378e:	9309      	str	r3, [sp, #36]	; 0x24
 8013790:	e768      	b.n	8013664 <_vfiprintf_r+0x78>
 8013792:	fb0c 3202 	mla	r2, ip, r2, r3
 8013796:	460c      	mov	r4, r1
 8013798:	2001      	movs	r0, #1
 801379a:	e7a6      	b.n	80136ea <_vfiprintf_r+0xfe>
 801379c:	2300      	movs	r3, #0
 801379e:	3401      	adds	r4, #1
 80137a0:	9305      	str	r3, [sp, #20]
 80137a2:	4619      	mov	r1, r3
 80137a4:	f04f 0c0a 	mov.w	ip, #10
 80137a8:	4620      	mov	r0, r4
 80137aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137ae:	3a30      	subs	r2, #48	; 0x30
 80137b0:	2a09      	cmp	r2, #9
 80137b2:	d903      	bls.n	80137bc <_vfiprintf_r+0x1d0>
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d0c6      	beq.n	8013746 <_vfiprintf_r+0x15a>
 80137b8:	9105      	str	r1, [sp, #20]
 80137ba:	e7c4      	b.n	8013746 <_vfiprintf_r+0x15a>
 80137bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80137c0:	4604      	mov	r4, r0
 80137c2:	2301      	movs	r3, #1
 80137c4:	e7f0      	b.n	80137a8 <_vfiprintf_r+0x1bc>
 80137c6:	ab03      	add	r3, sp, #12
 80137c8:	9300      	str	r3, [sp, #0]
 80137ca:	462a      	mov	r2, r5
 80137cc:	4b12      	ldr	r3, [pc, #72]	; (8013818 <_vfiprintf_r+0x22c>)
 80137ce:	a904      	add	r1, sp, #16
 80137d0:	4630      	mov	r0, r6
 80137d2:	f7fc fcf3 	bl	80101bc <_printf_float>
 80137d6:	4607      	mov	r7, r0
 80137d8:	1c78      	adds	r0, r7, #1
 80137da:	d1d6      	bne.n	801378a <_vfiprintf_r+0x19e>
 80137dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137de:	07d9      	lsls	r1, r3, #31
 80137e0:	d405      	bmi.n	80137ee <_vfiprintf_r+0x202>
 80137e2:	89ab      	ldrh	r3, [r5, #12]
 80137e4:	059a      	lsls	r2, r3, #22
 80137e6:	d402      	bmi.n	80137ee <_vfiprintf_r+0x202>
 80137e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137ea:	f7fd fd29 	bl	8011240 <__retarget_lock_release_recursive>
 80137ee:	89ab      	ldrh	r3, [r5, #12]
 80137f0:	065b      	lsls	r3, r3, #25
 80137f2:	f53f af1d 	bmi.w	8013630 <_vfiprintf_r+0x44>
 80137f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137f8:	e71c      	b.n	8013634 <_vfiprintf_r+0x48>
 80137fa:	ab03      	add	r3, sp, #12
 80137fc:	9300      	str	r3, [sp, #0]
 80137fe:	462a      	mov	r2, r5
 8013800:	4b05      	ldr	r3, [pc, #20]	; (8013818 <_vfiprintf_r+0x22c>)
 8013802:	a904      	add	r1, sp, #16
 8013804:	4630      	mov	r0, r6
 8013806:	f7fc ff7d 	bl	8010704 <_printf_i>
 801380a:	e7e4      	b.n	80137d6 <_vfiprintf_r+0x1ea>
 801380c:	0801402c 	.word	0x0801402c
 8013810:	08014036 	.word	0x08014036
 8013814:	080101bd 	.word	0x080101bd
 8013818:	080135c7 	.word	0x080135c7
 801381c:	08014032 	.word	0x08014032

08013820 <__swbuf_r>:
 8013820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013822:	460e      	mov	r6, r1
 8013824:	4614      	mov	r4, r2
 8013826:	4605      	mov	r5, r0
 8013828:	b118      	cbz	r0, 8013832 <__swbuf_r+0x12>
 801382a:	6a03      	ldr	r3, [r0, #32]
 801382c:	b90b      	cbnz	r3, 8013832 <__swbuf_r+0x12>
 801382e:	f7fd fb27 	bl	8010e80 <__sinit>
 8013832:	69a3      	ldr	r3, [r4, #24]
 8013834:	60a3      	str	r3, [r4, #8]
 8013836:	89a3      	ldrh	r3, [r4, #12]
 8013838:	071a      	lsls	r2, r3, #28
 801383a:	d525      	bpl.n	8013888 <__swbuf_r+0x68>
 801383c:	6923      	ldr	r3, [r4, #16]
 801383e:	b31b      	cbz	r3, 8013888 <__swbuf_r+0x68>
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	6922      	ldr	r2, [r4, #16]
 8013844:	1a98      	subs	r0, r3, r2
 8013846:	6963      	ldr	r3, [r4, #20]
 8013848:	b2f6      	uxtb	r6, r6
 801384a:	4283      	cmp	r3, r0
 801384c:	4637      	mov	r7, r6
 801384e:	dc04      	bgt.n	801385a <__swbuf_r+0x3a>
 8013850:	4621      	mov	r1, r4
 8013852:	4628      	mov	r0, r5
 8013854:	f7ff fe00 	bl	8013458 <_fflush_r>
 8013858:	b9e0      	cbnz	r0, 8013894 <__swbuf_r+0x74>
 801385a:	68a3      	ldr	r3, [r4, #8]
 801385c:	3b01      	subs	r3, #1
 801385e:	60a3      	str	r3, [r4, #8]
 8013860:	6823      	ldr	r3, [r4, #0]
 8013862:	1c5a      	adds	r2, r3, #1
 8013864:	6022      	str	r2, [r4, #0]
 8013866:	701e      	strb	r6, [r3, #0]
 8013868:	6962      	ldr	r2, [r4, #20]
 801386a:	1c43      	adds	r3, r0, #1
 801386c:	429a      	cmp	r2, r3
 801386e:	d004      	beq.n	801387a <__swbuf_r+0x5a>
 8013870:	89a3      	ldrh	r3, [r4, #12]
 8013872:	07db      	lsls	r3, r3, #31
 8013874:	d506      	bpl.n	8013884 <__swbuf_r+0x64>
 8013876:	2e0a      	cmp	r6, #10
 8013878:	d104      	bne.n	8013884 <__swbuf_r+0x64>
 801387a:	4621      	mov	r1, r4
 801387c:	4628      	mov	r0, r5
 801387e:	f7ff fdeb 	bl	8013458 <_fflush_r>
 8013882:	b938      	cbnz	r0, 8013894 <__swbuf_r+0x74>
 8013884:	4638      	mov	r0, r7
 8013886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013888:	4621      	mov	r1, r4
 801388a:	4628      	mov	r0, r5
 801388c:	f000 f806 	bl	801389c <__swsetup_r>
 8013890:	2800      	cmp	r0, #0
 8013892:	d0d5      	beq.n	8013840 <__swbuf_r+0x20>
 8013894:	f04f 37ff 	mov.w	r7, #4294967295
 8013898:	e7f4      	b.n	8013884 <__swbuf_r+0x64>
	...

0801389c <__swsetup_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4b2a      	ldr	r3, [pc, #168]	; (8013948 <__swsetup_r+0xac>)
 80138a0:	4605      	mov	r5, r0
 80138a2:	6818      	ldr	r0, [r3, #0]
 80138a4:	460c      	mov	r4, r1
 80138a6:	b118      	cbz	r0, 80138b0 <__swsetup_r+0x14>
 80138a8:	6a03      	ldr	r3, [r0, #32]
 80138aa:	b90b      	cbnz	r3, 80138b0 <__swsetup_r+0x14>
 80138ac:	f7fd fae8 	bl	8010e80 <__sinit>
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138b6:	0718      	lsls	r0, r3, #28
 80138b8:	d422      	bmi.n	8013900 <__swsetup_r+0x64>
 80138ba:	06d9      	lsls	r1, r3, #27
 80138bc:	d407      	bmi.n	80138ce <__swsetup_r+0x32>
 80138be:	2309      	movs	r3, #9
 80138c0:	602b      	str	r3, [r5, #0]
 80138c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80138c6:	81a3      	strh	r3, [r4, #12]
 80138c8:	f04f 30ff 	mov.w	r0, #4294967295
 80138cc:	e034      	b.n	8013938 <__swsetup_r+0x9c>
 80138ce:	0758      	lsls	r0, r3, #29
 80138d0:	d512      	bpl.n	80138f8 <__swsetup_r+0x5c>
 80138d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138d4:	b141      	cbz	r1, 80138e8 <__swsetup_r+0x4c>
 80138d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138da:	4299      	cmp	r1, r3
 80138dc:	d002      	beq.n	80138e4 <__swsetup_r+0x48>
 80138de:	4628      	mov	r0, r5
 80138e0:	f7fe fb6c 	bl	8011fbc <_free_r>
 80138e4:	2300      	movs	r3, #0
 80138e6:	6363      	str	r3, [r4, #52]	; 0x34
 80138e8:	89a3      	ldrh	r3, [r4, #12]
 80138ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80138ee:	81a3      	strh	r3, [r4, #12]
 80138f0:	2300      	movs	r3, #0
 80138f2:	6063      	str	r3, [r4, #4]
 80138f4:	6923      	ldr	r3, [r4, #16]
 80138f6:	6023      	str	r3, [r4, #0]
 80138f8:	89a3      	ldrh	r3, [r4, #12]
 80138fa:	f043 0308 	orr.w	r3, r3, #8
 80138fe:	81a3      	strh	r3, [r4, #12]
 8013900:	6923      	ldr	r3, [r4, #16]
 8013902:	b94b      	cbnz	r3, 8013918 <__swsetup_r+0x7c>
 8013904:	89a3      	ldrh	r3, [r4, #12]
 8013906:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801390a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801390e:	d003      	beq.n	8013918 <__swsetup_r+0x7c>
 8013910:	4621      	mov	r1, r4
 8013912:	4628      	mov	r0, r5
 8013914:	f000 f88c 	bl	8013a30 <__smakebuf_r>
 8013918:	89a0      	ldrh	r0, [r4, #12]
 801391a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801391e:	f010 0301 	ands.w	r3, r0, #1
 8013922:	d00a      	beq.n	801393a <__swsetup_r+0x9e>
 8013924:	2300      	movs	r3, #0
 8013926:	60a3      	str	r3, [r4, #8]
 8013928:	6963      	ldr	r3, [r4, #20]
 801392a:	425b      	negs	r3, r3
 801392c:	61a3      	str	r3, [r4, #24]
 801392e:	6923      	ldr	r3, [r4, #16]
 8013930:	b943      	cbnz	r3, 8013944 <__swsetup_r+0xa8>
 8013932:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013936:	d1c4      	bne.n	80138c2 <__swsetup_r+0x26>
 8013938:	bd38      	pop	{r3, r4, r5, pc}
 801393a:	0781      	lsls	r1, r0, #30
 801393c:	bf58      	it	pl
 801393e:	6963      	ldrpl	r3, [r4, #20]
 8013940:	60a3      	str	r3, [r4, #8]
 8013942:	e7f4      	b.n	801392e <__swsetup_r+0x92>
 8013944:	2000      	movs	r0, #0
 8013946:	e7f7      	b.n	8013938 <__swsetup_r+0x9c>
 8013948:	20000348 	.word	0x20000348

0801394c <_raise_r>:
 801394c:	291f      	cmp	r1, #31
 801394e:	b538      	push	{r3, r4, r5, lr}
 8013950:	4604      	mov	r4, r0
 8013952:	460d      	mov	r5, r1
 8013954:	d904      	bls.n	8013960 <_raise_r+0x14>
 8013956:	2316      	movs	r3, #22
 8013958:	6003      	str	r3, [r0, #0]
 801395a:	f04f 30ff 	mov.w	r0, #4294967295
 801395e:	bd38      	pop	{r3, r4, r5, pc}
 8013960:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013962:	b112      	cbz	r2, 801396a <_raise_r+0x1e>
 8013964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013968:	b94b      	cbnz	r3, 801397e <_raise_r+0x32>
 801396a:	4620      	mov	r0, r4
 801396c:	f000 f830 	bl	80139d0 <_getpid_r>
 8013970:	462a      	mov	r2, r5
 8013972:	4601      	mov	r1, r0
 8013974:	4620      	mov	r0, r4
 8013976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801397a:	f000 b817 	b.w	80139ac <_kill_r>
 801397e:	2b01      	cmp	r3, #1
 8013980:	d00a      	beq.n	8013998 <_raise_r+0x4c>
 8013982:	1c59      	adds	r1, r3, #1
 8013984:	d103      	bne.n	801398e <_raise_r+0x42>
 8013986:	2316      	movs	r3, #22
 8013988:	6003      	str	r3, [r0, #0]
 801398a:	2001      	movs	r0, #1
 801398c:	e7e7      	b.n	801395e <_raise_r+0x12>
 801398e:	2400      	movs	r4, #0
 8013990:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013994:	4628      	mov	r0, r5
 8013996:	4798      	blx	r3
 8013998:	2000      	movs	r0, #0
 801399a:	e7e0      	b.n	801395e <_raise_r+0x12>

0801399c <raise>:
 801399c:	4b02      	ldr	r3, [pc, #8]	; (80139a8 <raise+0xc>)
 801399e:	4601      	mov	r1, r0
 80139a0:	6818      	ldr	r0, [r3, #0]
 80139a2:	f7ff bfd3 	b.w	801394c <_raise_r>
 80139a6:	bf00      	nop
 80139a8:	20000348 	.word	0x20000348

080139ac <_kill_r>:
 80139ac:	b538      	push	{r3, r4, r5, lr}
 80139ae:	4d07      	ldr	r5, [pc, #28]	; (80139cc <_kill_r+0x20>)
 80139b0:	2300      	movs	r3, #0
 80139b2:	4604      	mov	r4, r0
 80139b4:	4608      	mov	r0, r1
 80139b6:	4611      	mov	r1, r2
 80139b8:	602b      	str	r3, [r5, #0]
 80139ba:	f7ee fbbb 	bl	8002134 <_kill>
 80139be:	1c43      	adds	r3, r0, #1
 80139c0:	d102      	bne.n	80139c8 <_kill_r+0x1c>
 80139c2:	682b      	ldr	r3, [r5, #0]
 80139c4:	b103      	cbz	r3, 80139c8 <_kill_r+0x1c>
 80139c6:	6023      	str	r3, [r4, #0]
 80139c8:	bd38      	pop	{r3, r4, r5, pc}
 80139ca:	bf00      	nop
 80139cc:	20001ef8 	.word	0x20001ef8

080139d0 <_getpid_r>:
 80139d0:	f7ee bba8 	b.w	8002124 <_getpid>

080139d4 <_malloc_usable_size_r>:
 80139d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139d8:	1f18      	subs	r0, r3, #4
 80139da:	2b00      	cmp	r3, #0
 80139dc:	bfbc      	itt	lt
 80139de:	580b      	ldrlt	r3, [r1, r0]
 80139e0:	18c0      	addlt	r0, r0, r3
 80139e2:	4770      	bx	lr

080139e4 <__swhatbuf_r>:
 80139e4:	b570      	push	{r4, r5, r6, lr}
 80139e6:	460c      	mov	r4, r1
 80139e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139ec:	2900      	cmp	r1, #0
 80139ee:	b096      	sub	sp, #88	; 0x58
 80139f0:	4615      	mov	r5, r2
 80139f2:	461e      	mov	r6, r3
 80139f4:	da0d      	bge.n	8013a12 <__swhatbuf_r+0x2e>
 80139f6:	89a3      	ldrh	r3, [r4, #12]
 80139f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80139fc:	f04f 0100 	mov.w	r1, #0
 8013a00:	bf0c      	ite	eq
 8013a02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013a06:	2340      	movne	r3, #64	; 0x40
 8013a08:	2000      	movs	r0, #0
 8013a0a:	6031      	str	r1, [r6, #0]
 8013a0c:	602b      	str	r3, [r5, #0]
 8013a0e:	b016      	add	sp, #88	; 0x58
 8013a10:	bd70      	pop	{r4, r5, r6, pc}
 8013a12:	466a      	mov	r2, sp
 8013a14:	f000 f848 	bl	8013aa8 <_fstat_r>
 8013a18:	2800      	cmp	r0, #0
 8013a1a:	dbec      	blt.n	80139f6 <__swhatbuf_r+0x12>
 8013a1c:	9901      	ldr	r1, [sp, #4]
 8013a1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013a22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013a26:	4259      	negs	r1, r3
 8013a28:	4159      	adcs	r1, r3
 8013a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a2e:	e7eb      	b.n	8013a08 <__swhatbuf_r+0x24>

08013a30 <__smakebuf_r>:
 8013a30:	898b      	ldrh	r3, [r1, #12]
 8013a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a34:	079d      	lsls	r5, r3, #30
 8013a36:	4606      	mov	r6, r0
 8013a38:	460c      	mov	r4, r1
 8013a3a:	d507      	bpl.n	8013a4c <__smakebuf_r+0x1c>
 8013a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013a40:	6023      	str	r3, [r4, #0]
 8013a42:	6123      	str	r3, [r4, #16]
 8013a44:	2301      	movs	r3, #1
 8013a46:	6163      	str	r3, [r4, #20]
 8013a48:	b002      	add	sp, #8
 8013a4a:	bd70      	pop	{r4, r5, r6, pc}
 8013a4c:	ab01      	add	r3, sp, #4
 8013a4e:	466a      	mov	r2, sp
 8013a50:	f7ff ffc8 	bl	80139e4 <__swhatbuf_r>
 8013a54:	9900      	ldr	r1, [sp, #0]
 8013a56:	4605      	mov	r5, r0
 8013a58:	4630      	mov	r0, r6
 8013a5a:	f7fb fb7d 	bl	800f158 <_malloc_r>
 8013a5e:	b948      	cbnz	r0, 8013a74 <__smakebuf_r+0x44>
 8013a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a64:	059a      	lsls	r2, r3, #22
 8013a66:	d4ef      	bmi.n	8013a48 <__smakebuf_r+0x18>
 8013a68:	f023 0303 	bic.w	r3, r3, #3
 8013a6c:	f043 0302 	orr.w	r3, r3, #2
 8013a70:	81a3      	strh	r3, [r4, #12]
 8013a72:	e7e3      	b.n	8013a3c <__smakebuf_r+0xc>
 8013a74:	89a3      	ldrh	r3, [r4, #12]
 8013a76:	6020      	str	r0, [r4, #0]
 8013a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a7c:	81a3      	strh	r3, [r4, #12]
 8013a7e:	9b00      	ldr	r3, [sp, #0]
 8013a80:	6163      	str	r3, [r4, #20]
 8013a82:	9b01      	ldr	r3, [sp, #4]
 8013a84:	6120      	str	r0, [r4, #16]
 8013a86:	b15b      	cbz	r3, 8013aa0 <__smakebuf_r+0x70>
 8013a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	f000 f81d 	bl	8013acc <_isatty_r>
 8013a92:	b128      	cbz	r0, 8013aa0 <__smakebuf_r+0x70>
 8013a94:	89a3      	ldrh	r3, [r4, #12]
 8013a96:	f023 0303 	bic.w	r3, r3, #3
 8013a9a:	f043 0301 	orr.w	r3, r3, #1
 8013a9e:	81a3      	strh	r3, [r4, #12]
 8013aa0:	89a3      	ldrh	r3, [r4, #12]
 8013aa2:	431d      	orrs	r5, r3
 8013aa4:	81a5      	strh	r5, [r4, #12]
 8013aa6:	e7cf      	b.n	8013a48 <__smakebuf_r+0x18>

08013aa8 <_fstat_r>:
 8013aa8:	b538      	push	{r3, r4, r5, lr}
 8013aaa:	4d07      	ldr	r5, [pc, #28]	; (8013ac8 <_fstat_r+0x20>)
 8013aac:	2300      	movs	r3, #0
 8013aae:	4604      	mov	r4, r0
 8013ab0:	4608      	mov	r0, r1
 8013ab2:	4611      	mov	r1, r2
 8013ab4:	602b      	str	r3, [r5, #0]
 8013ab6:	f7ee fb9c 	bl	80021f2 <_fstat>
 8013aba:	1c43      	adds	r3, r0, #1
 8013abc:	d102      	bne.n	8013ac4 <_fstat_r+0x1c>
 8013abe:	682b      	ldr	r3, [r5, #0]
 8013ac0:	b103      	cbz	r3, 8013ac4 <_fstat_r+0x1c>
 8013ac2:	6023      	str	r3, [r4, #0]
 8013ac4:	bd38      	pop	{r3, r4, r5, pc}
 8013ac6:	bf00      	nop
 8013ac8:	20001ef8 	.word	0x20001ef8

08013acc <_isatty_r>:
 8013acc:	b538      	push	{r3, r4, r5, lr}
 8013ace:	4d06      	ldr	r5, [pc, #24]	; (8013ae8 <_isatty_r+0x1c>)
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	4608      	mov	r0, r1
 8013ad6:	602b      	str	r3, [r5, #0]
 8013ad8:	f7ee fb9b 	bl	8002212 <_isatty>
 8013adc:	1c43      	adds	r3, r0, #1
 8013ade:	d102      	bne.n	8013ae6 <_isatty_r+0x1a>
 8013ae0:	682b      	ldr	r3, [r5, #0]
 8013ae2:	b103      	cbz	r3, 8013ae6 <_isatty_r+0x1a>
 8013ae4:	6023      	str	r3, [r4, #0]
 8013ae6:	bd38      	pop	{r3, r4, r5, pc}
 8013ae8:	20001ef8 	.word	0x20001ef8

08013aec <_init>:
 8013aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aee:	bf00      	nop
 8013af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013af2:	bc08      	pop	{r3}
 8013af4:	469e      	mov	lr, r3
 8013af6:	4770      	bx	lr

08013af8 <_fini>:
 8013af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afa:	bf00      	nop
 8013afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013afe:	bc08      	pop	{r3}
 8013b00:	469e      	mov	lr, r3
 8013b02:	4770      	bx	lr
