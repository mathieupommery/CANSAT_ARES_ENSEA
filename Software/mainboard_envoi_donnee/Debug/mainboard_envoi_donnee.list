
mainboard_envoi_donnee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011460  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08011640  08011640  00012640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b78  08011b78  000131f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011b78  08011b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b80  08011b80  000131f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b80  08011b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011b84  08011b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08011b88  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012dc  200001f4  08011d7c  000131f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014d0  08011d7c  000134d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028f7d  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005997  00000000  00000000  0003c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002230  00000000  00000000  00041b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a6d  00000000  00000000  00043d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d75  00000000  00000000  000457d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e8ab  00000000  00000000  0006c54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d65  00000000  00000000  0009adf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182b5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a584  00000000  00000000  00182ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0018d124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011628 	.word	0x08011628

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	08011628 	.word	0x08011628

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <read_sensor_axis.0>:
    static char buffer[42]; // Buffer statique pour stocker les données formatées
    HAL_StatusTypeDef status;
    uint8_t low_byte, high_byte;

    // Fonction pour lire une valeur 16 bits à partir de deux adresses
    int16_t read_sensor_axis(uint8_t base_addr, uint8_t axis_index) {
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
 8001044:	4664      	mov	r4, ip
 8001046:	f8c7 c000 	str.w	ip, [r7]
        uint8_t low_addr = base_addr + axis_index * 2;
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4413      	add	r3, r2
 8001054:	73fb      	strb	r3, [r7, #15]
        uint8_t high_addr = low_addr + 1;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	3301      	adds	r3, #1
 800105a:	73bb      	strb	r3, [r7, #14]

        // Lire l'octet bas
        status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	b29a      	uxth	r2, r3
 8001060:	1ca3      	adds	r3, r4, #2
 8001062:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001066:	9102      	str	r1, [sp, #8]
 8001068:	2101      	movs	r1, #1
 800106a:	9101      	str	r1, [sp, #4]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	21d6      	movs	r1, #214	@ 0xd6
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <read_sensor_axis.0+0x98>)
 8001074:	f004 fcda 	bl	8005a2c <HAL_I2C_Mem_Read>
 8001078:	4603      	mov	r3, r0
 800107a:	7063      	strb	r3, [r4, #1]
        if (status != HAL_OK) return -1; // Retourner une erreur en cas d'échec
 800107c:	7863      	ldrb	r3, [r4, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <read_sensor_axis.0+0x54>
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001086:	e01c      	b.n	80010c2 <read_sensor_axis.0+0x8e>

        // Lire l'octet haut
        status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	b29a      	uxth	r2, r3
 800108c:	4621      	mov	r1, r4
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2301      	movs	r3, #1
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	9100      	str	r1, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	21d6      	movs	r1, #214	@ 0xd6
 800109e:	480b      	ldr	r0, [pc, #44]	@ (80010cc <read_sensor_axis.0+0x98>)
 80010a0:	f004 fcc4 	bl	8005a2c <HAL_I2C_Mem_Read>
 80010a4:	4603      	mov	r3, r0
 80010a6:	7063      	strb	r3, [r4, #1]
        if (status != HAL_OK) return -1; // Retourner une erreur en cas d'échec
 80010a8:	7863      	ldrb	r3, [r4, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <read_sensor_axis.0+0x80>
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b2:	e006      	b.n	80010c2 <read_sensor_axis.0+0x8e>

        // Combiner les octets
        return (int16_t)((high_byte << 8) | low_byte);
 80010b4:	7823      	ldrb	r3, [r4, #0]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	78a3      	ldrb	r3, [r4, #2]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
    }
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000444 	.word	0x20000444

080010d0 <Read_sensor_data>:
char *Read_sensor_data() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	60bb      	str	r3, [r7, #8]
            value /= 10;
        }
    }

    // Lire les données des gyroscopes
    for (int i = 0; i < 3; i++) {
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e029      	b.n	8001136 <Read_sensor_data+0x66>
        int16_t gyro_value = read_sensor_axis(G_X_OUT_L, i);
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	1d3a      	adds	r2, r7, #4
 80010e8:	4694      	mov	ip, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	2022      	movs	r0, #34	@ 0x22
 80010ee:	f7ff ffa1 	bl	8001034 <read_sensor_axis.0>
 80010f2:	4603      	mov	r3, r0
 80010f4:	81bb      	strh	r3, [r7, #12]
        if (gyro_value == -1) return NULL; // Retourner NULL en cas d'erreur
 80010f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010fe:	d101      	bne.n	8001104 <Read_sensor_data+0x34>
 8001100:	2300      	movs	r3, #0
 8001102:	e059      	b.n	80011b8 <Read_sensor_data+0xe8>

        // Décomposer et copier dans le buffer
        decompose_to_buffer(gyro_value, &buffer[7 * i]);
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	4a2c      	ldr	r2, [pc, #176]	@ (80011c0 <Read_sensor_data+0xf0>)
 800110e:	441a      	add	r2, r3
 8001110:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001114:	1d39      	adds	r1, r7, #4
 8001116:	468c      	mov	ip, r1
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f852 	bl	80011c4 <decompose_to_buffer.1>
        buffer[6 + 7 * i] = ','; // Ajouter une virgule
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	3306      	adds	r3, #6
 800112a:	4a25      	ldr	r2, [pc, #148]	@ (80011c0 <Read_sensor_data+0xf0>)
 800112c:	212c      	movs	r1, #44	@ 0x2c
 800112e:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 3; i++) {
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b02      	cmp	r3, #2
 800113a:	ddd2      	ble.n	80010e2 <Read_sensor_data+0x12>
    }

    // Lire les données des accéléromètres
    for (int i = 0; i < 3; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	e036      	b.n	80011b0 <Read_sensor_data+0xe0>
        int16_t accel_value = read_sensor_axis(XL_X_OUT_L, i);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	1d3a      	adds	r2, r7, #4
 8001148:	4694      	mov	ip, r2
 800114a:	4619      	mov	r1, r3
 800114c:	2028      	movs	r0, #40	@ 0x28
 800114e:	f7ff ff71 	bl	8001034 <read_sensor_axis.0>
 8001152:	4603      	mov	r3, r0
 8001154:	81fb      	strh	r3, [r7, #14]
        if (accel_value == -1) return NULL; // Retourner NULL en cas d'erreur
 8001156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800115e:	d101      	bne.n	8001164 <Read_sensor_data+0x94>
 8001160:	2300      	movs	r3, #0
 8001162:	e029      	b.n	80011b8 <Read_sensor_data+0xe8>

        // Décomposer et copier dans le buffer
        decompose_to_buffer(accel_value, &buffer[21 + 7 * i]);
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	3315      	adds	r3, #21
 800116e:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <Read_sensor_data+0xf0>)
 8001170:	441a      	add	r2, r3
 8001172:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001176:	1d39      	adds	r1, r7, #4
 8001178:	468c      	mov	ip, r1
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f821 	bl	80011c4 <decompose_to_buffer.1>
        if (i != 2) {
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d008      	beq.n	800119a <Read_sensor_data+0xca>
            buffer[27 + 7 * i] = ','; // Ajouter une virgule (sauf après le dernier élément)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	331b      	adds	r3, #27
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <Read_sensor_data+0xf0>)
 8001194:	212c      	movs	r1, #44	@ 0x2c
 8001196:	54d1      	strb	r1, [r2, r3]
 8001198:	e007      	b.n	80011aa <Read_sensor_data+0xda>
        } else {
            buffer[27 + 7 * i] = '\0'; // Ajouter le caractère de fin de chaîne
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	331b      	adds	r3, #27
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <Read_sensor_data+0xf0>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 3; i++) {
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3301      	adds	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	ddc5      	ble.n	8001142 <Read_sensor_data+0x72>
        }
    }

    return buffer; // Retourner le buffer contenant les données formatées
 80011b6:	4b02      	ldr	r3, [pc, #8]	@ (80011c0 <Read_sensor_data+0xf0>)
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000210 	.word	0x20000210

080011c4 <decompose_to_buffer.1>:
    void decompose_to_buffer(int16_t value, char *buffer_offset) {
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	81fb      	strh	r3, [r7, #14]
 80011d0:	f8c7 c004 	str.w	ip, [r7, #4]
        for (int i = 0; i < 6; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e023      	b.n	8001222 <decompose_to_buffer.1+0x5e>
            buffer_offset[5 - i] = (value % 10) + '0'; // Convertir en caractère ASCII
 80011da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <decompose_to_buffer.1+0x74>)
 80011e0:	fb83 1302 	smull	r1, r3, r3, r2
 80011e4:	1099      	asrs	r1, r3, #2
 80011e6:	17d3      	asrs	r3, r2, #31
 80011e8:	1ac9      	subs	r1, r1, r3
 80011ea:	460b      	mov	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f1c3 0305 	rsb	r3, r3, #5
 80011fe:	4619      	mov	r1, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	440b      	add	r3, r1
 8001204:	3230      	adds	r2, #48	@ 0x30
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
            value /= 10;
 800120a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <decompose_to_buffer.1+0x74>)
 8001210:	fb82 1203 	smull	r1, r2, r2, r3
 8001214:	1092      	asrs	r2, r2, #2
 8001216:	17db      	asrs	r3, r3, #31
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 6; i++) {
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b05      	cmp	r3, #5
 8001226:	ddd8      	ble.n	80011da <decompose_to_buffer.1+0x16>
    }
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	66666667 	.word	0x66666667

0800123c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	@ 0x30
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2220      	movs	r2, #32
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f00d fd11 	bl	800ec7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800125a:	4b48      	ldr	r3, [pc, #288]	@ (800137c <MX_ADC1_Init+0x140>)
 800125c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001260:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001262:	4b46      	ldr	r3, [pc, #280]	@ (800137c <MX_ADC1_Init+0x140>)
 8001264:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001268:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126a:	4b44      	ldr	r3, [pc, #272]	@ (800137c <MX_ADC1_Init+0x140>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001270:	4b42      	ldr	r3, [pc, #264]	@ (800137c <MX_ADC1_Init+0x140>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001276:	4b41      	ldr	r3, [pc, #260]	@ (800137c <MX_ADC1_Init+0x140>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800127c:	4b3f      	ldr	r3, [pc, #252]	@ (800137c <MX_ADC1_Init+0x140>)
 800127e:	2201      	movs	r2, #1
 8001280:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001282:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <MX_ADC1_Init+0x140>)
 8001284:	2208      	movs	r2, #8
 8001286:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001288:	4b3c      	ldr	r3, [pc, #240]	@ (800137c <MX_ADC1_Init+0x140>)
 800128a:	2200      	movs	r2, #0
 800128c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800128e:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <MX_ADC1_Init+0x140>)
 8001290:	2201      	movs	r2, #1
 8001292:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001294:	4b39      	ldr	r3, [pc, #228]	@ (800137c <MX_ADC1_Init+0x140>)
 8001296:	2204      	movs	r2, #4
 8001298:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <MX_ADC1_Init+0x140>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80012a2:	4b36      	ldr	r3, [pc, #216]	@ (800137c <MX_ADC1_Init+0x140>)
 80012a4:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80012a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012aa:	4b34      	ldr	r3, [pc, #208]	@ (800137c <MX_ADC1_Init+0x140>)
 80012ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b2:	4b32      	ldr	r3, [pc, #200]	@ (800137c <MX_ADC1_Init+0x140>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ba:	4b30      	ldr	r3, [pc, #192]	@ (800137c <MX_ADC1_Init+0x140>)
 80012bc:	2200      	movs	r2, #0
 80012be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012c0:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <MX_ADC1_Init+0x140>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c8:	482c      	ldr	r0, [pc, #176]	@ (800137c <MX_ADC1_Init+0x140>)
 80012ca:	f002 fce9 	bl	8003ca0 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80012d4:	f001 faf6 	bl	80028c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4826      	ldr	r0, [pc, #152]	@ (800137c <MX_ADC1_Init+0x140>)
 80012e4:	f003 fc58 	bl	8004b98 <HAL_ADCEx_MultiModeConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80012ee:	f001 fae9 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <MX_ADC1_Init+0x144>)
 80012f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f6:	2306      	movs	r3, #6
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012fa:	2307      	movs	r3, #7
 80012fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012fe:	237f      	movs	r3, #127	@ 0x7f
 8001300:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001302:	2304      	movs	r3, #4
 8001304:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	481b      	ldr	r0, [pc, #108]	@ (800137c <MX_ADC1_Init+0x140>)
 8001310:	f002 ff12 	bl	8004138 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800131a:	f001 fad3 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_ADC1_Init+0x148>)
 8001320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001322:	230c      	movs	r3, #12
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4814      	ldr	r0, [pc, #80]	@ (800137c <MX_ADC1_Init+0x140>)
 800132c:	f002 ff04 	bl	8004138 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001336:	f001 fac5 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <MX_ADC1_Init+0x14c>)
 800133c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800133e:	2312      	movs	r3, #18
 8001340:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	@ (800137c <MX_ADC1_Init+0x140>)
 8001348:	f002 fef6 	bl	8004138 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001352:	f001 fab7 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001356:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <MX_ADC1_Init+0x150>)
 8001358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800135a:	2318      	movs	r3, #24
 800135c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	@ (800137c <MX_ADC1_Init+0x140>)
 8001364:	f002 fee8 	bl	8004138 <HAL_ADC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800136e:	f001 faa9 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3730      	adds	r7, #48	@ 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000023c 	.word	0x2000023c
 8001380:	cb840000 	.word	0xcb840000
 8001384:	c3210000 	.word	0xc3210000
 8001388:	08600004 	.word	0x08600004
 800138c:	0c900008 	.word	0x0c900008

08001390 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2220      	movs	r2, #32
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00d fc6d 	bl	800ec7c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001458 <MX_ADC2_Init+0xc8>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b6:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013ca:	2204      	movs	r2, #4
 80013cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013dc:	2201      	movs	r2, #1
 80013de:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013ea:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80013ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_ADC2_Init+0xc4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_ADC2_Init+0xc4>)
 8001402:	2200      	movs	r2, #0
 8001404:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_ADC2_Init+0xc4>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800140e:	4811      	ldr	r0, [pc, #68]	@ (8001454 <MX_ADC2_Init+0xc4>)
 8001410:	f002 fc46 	bl	8003ca0 <HAL_ADC_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f001 fa53 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_ADC2_Init+0xcc>)
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001422:	2306      	movs	r3, #6
 8001424:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001426:	2307      	movs	r3, #7
 8001428:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142a:	237f      	movs	r3, #127	@ 0x7f
 800142c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800142e:	2304      	movs	r3, #4
 8001430:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	@ (8001454 <MX_ADC2_Init+0xc4>)
 800143c:	f002 fe7c 	bl	8004138 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001446:	f001 fa3d 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002a8 	.word	0x200002a8
 8001458:	50000100 	.word	0x50000100
 800145c:	47520000 	.word	0x47520000

08001460 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09c      	sub	sp, #112	@ 0x70
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	2244      	movs	r2, #68	@ 0x44
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f00d fbfb 	bl	800ec7c <memset>
  if(adcHandle->Instance==ADC1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800148e:	d169      	bne.n	8001564 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001494:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001496:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800149a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 fdb9 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014ac:	f001 fa0a 	bl	80028c4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014b0:	4b65      	ldr	r3, [pc, #404]	@ (8001648 <HAL_ADC_MspInit+0x1e8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a64      	ldr	r2, [pc, #400]	@ (8001648 <HAL_ADC_MspInit+0x1e8>)
 80014b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <HAL_ADC_MspInit+0x1e8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d10b      	bne.n	80014da <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014c2:	4b62      	ldr	r3, [pc, #392]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	4a61      	ldr	r2, [pc, #388]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80014c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ce:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b5c      	ldr	r3, [pc, #368]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a5b      	ldr	r2, [pc, #364]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b59      	ldr	r3, [pc, #356]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80014f2:	2306      	movs	r3, #6
 80014f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001508:	f004 f838 	bl	800557c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800150c:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 800150e:	4a51      	ldr	r2, [pc, #324]	@ (8001654 <HAL_ADC_MspInit+0x1f4>)
 8001510:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001512:	4b4f      	ldr	r3, [pc, #316]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 8001514:	2205      	movs	r2, #5
 8001516:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001518:	4b4d      	ldr	r3, [pc, #308]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b4c      	ldr	r3, [pc, #304]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 800152c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001530:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001532:	4b47      	ldr	r3, [pc, #284]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 8001534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001538:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800153a:	4b45      	ldr	r3, [pc, #276]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 800153c:	2220      	movs	r2, #32
 800153e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001546:	4842      	ldr	r0, [pc, #264]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 8001548:	f003 fcda 	bl	8004f00 <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001552:	f001 f9b7 	bl	80028c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a3d      	ldr	r2, [pc, #244]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 800155a:	655a      	str	r2, [r3, #84]	@ 0x54
 800155c:	4a3c      	ldr	r2, [pc, #240]	@ (8001650 <HAL_ADC_MspInit+0x1f0>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001562:	e06d      	b.n	8001640 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a3b      	ldr	r2, [pc, #236]	@ (8001658 <HAL_ADC_MspInit+0x1f8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d168      	bne.n	8001640 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800156e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001572:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001574:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001578:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4618      	mov	r0, r3
 8001580:	f005 fd4a 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800158a:	f001 f99b 	bl	80028c4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800158e:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <HAL_ADC_MspInit+0x1e8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a2c      	ldr	r2, [pc, #176]	@ (8001648 <HAL_ADC_MspInit+0x1e8>)
 8001596:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001598:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_ADC_MspInit+0x1e8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10b      	bne.n	80015b8 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a4:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80015a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	4a23      	ldr	r2, [pc, #140]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_ADC_MspInit+0x1ec>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015d0:	2310      	movs	r3, #16
 80015d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d4:	2303      	movs	r3, #3
 80015d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e6:	f003 ffc9 	bl	800557c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_ADC_MspInit+0x200>)
 80015ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 80015f2:	2224      	movs	r2, #36	@ 0x24
 80015f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 800160a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800160e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 8001612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001616:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001618:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 800161a:	2220      	movs	r2, #32
 800161c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001624:	480d      	ldr	r0, [pc, #52]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 8001626:	f003 fc6b 	bl	8004f00 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8001630:	f001 f948 	bl	80028c4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <HAL_ADC_MspInit+0x1fc>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001640:	bf00      	nop
 8001642:	3770      	adds	r7, #112	@ 0x70
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200003d4 	.word	0x200003d4
 800164c:	40021000 	.word	0x40021000
 8001650:	20000314 	.word	0x20000314
 8001654:	40020030 	.word	0x40020030
 8001658:	50000100 	.word	0x50000100
 800165c:	20000374 	.word	0x20000374
 8001660:	40020058 	.word	0x40020058
 8001664:	00000000 	.word	0x00000000

08001668 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800167a:	f040 80cd 	bne.w	8001818 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 800167e:	4b80      	ldr	r3, [pc, #512]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x218>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff76 	bl	8000574 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	a178      	add	r1, pc, #480	@ (adr r1, 8001870 <HAL_ADC_ConvCpltCallback+0x208>)
 800168e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001692:	f7ff f903 	bl	800089c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff facb 	bl	8000c38 <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a77      	ldr	r2, [pc, #476]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x21c>)
 80016a6:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80016a8:	4b77      	ldr	r3, [pc, #476]	@ (8001888 <HAL_ADC_ConvCpltCallback+0x220>)
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	4b77      	ldr	r3, [pc, #476]	@ (800188c <HAL_ADC_ConvCpltCallback+0x224>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	ee17 0a90 	vmov	r0, s15
 80016bc:	f7fe ff6c 	bl	8000598 <__aeabi_f2d>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	4971      	ldr	r1, [pc, #452]	@ (8001890 <HAL_ADC_ConvCpltCallback+0x228>)
 80016ca:	f7ff f8e7 	bl	800089c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4690      	mov	r8, r2
 80016d4:	4699      	mov	r9, r3
 80016d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x218>)
 80016d8:	885b      	ldrh	r3, [r3, #2]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff4a 	bl	8000574 <__aeabi_i2d>
 80016e0:	4604      	mov	r4, r0
 80016e2:	460d      	mov	r5, r1
 80016e4:	4b67      	ldr	r3, [pc, #412]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x21c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff55 	bl	8000598 <__aeabi_f2d>
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b68      	ldr	r3, [pc, #416]	@ (8001894 <HAL_ADC_ConvCpltCallback+0x22c>)
 80016f4:	f7ff f8d2 	bl	800089c <__aeabi_ddiv>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe ffa2 	bl	8000648 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	4b5f      	ldr	r3, [pc, #380]	@ (800188c <HAL_ADC_ConvCpltCallback+0x224>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff41 	bl	8000598 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4620      	mov	r0, r4
 800171c:	4629      	mov	r1, r5
 800171e:	f7fe fddb 	bl	80002d8 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4640      	mov	r0, r8
 8001728:	4649      	mov	r1, r9
 800172a:	f7fe ff8d 	bl	8000648 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa7f 	bl	8000c38 <__aeabi_d2f>
 800173a:	ee07 0a10 	vmov	s14, r0
 800173e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	4b54      	ldr	r3, [pc, #336]	@ (8001898 <HAL_ADC_ConvCpltCallback+0x230>)
 8001748:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 800174c:	4b4c      	ldr	r3, [pc, #304]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x218>)
 800174e:	88db      	ldrh	r3, [r3, #6]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff0f 	bl	8000574 <__aeabi_i2d>
 8001756:	a348      	add	r3, pc, #288	@ (adr r3, 8001878 <HAL_ADC_ConvCpltCallback+0x210>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7ff f89e 	bl	800089c <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b49      	ldr	r3, [pc, #292]	@ (8001894 <HAL_ADC_ConvCpltCallback+0x22c>)
 800176e:	f7fe ff6b 	bl	8000648 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4614      	mov	r4, r2
 8001778:	461d      	mov	r5, r3
 800177a:	4b42      	ldr	r3, [pc, #264]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x21c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff0a 	bl	8000598 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe ff5c 	bl	8000648 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa4e 	bl	8000c38 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a3f      	ldr	r2, [pc, #252]	@ (800189c <HAL_ADC_ConvCpltCallback+0x234>)
 80017a0:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 80017a2:	4b37      	ldr	r3, [pc, #220]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x218>)
 80017a4:	889b      	ldrh	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fee4 	bl	8000574 <__aeabi_i2d>
 80017ac:	a332      	add	r3, pc, #200	@ (adr r3, 8001878 <HAL_ADC_ConvCpltCallback+0x210>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7ff f873 	bl	800089c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	4b37      	ldr	r3, [pc, #220]	@ (80018a0 <HAL_ADC_ConvCpltCallback+0x238>)
 80017c4:	f7fe ff40 	bl	8000648 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x21c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fedf 	bl	8000598 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	f7fe ff31 	bl	8000648 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fa23 	bl	8000c38 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a2b      	ldr	r2, [pc, #172]	@ (80018a4 <HAL_ADC_ConvCpltCallback+0x23c>)
 80017f6:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 80017f8:	4b28      	ldr	r3, [pc, #160]	@ (800189c <HAL_ADC_ConvCpltCallback+0x234>)
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <HAL_ADC_ConvCpltCallback+0x23c>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001808:	4b27      	ldr	r3, [pc, #156]	@ (80018a8 <HAL_ADC_ConvCpltCallback+0x240>)
 800180a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 800180e:	2204      	movs	r2, #4
 8001810:	491b      	ldr	r1, [pc, #108]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x218>)
 8001812:	4826      	ldr	r0, [pc, #152]	@ (80018ac <HAL_ADC_ConvCpltCallback+0x244>)
 8001814:	f002 fbc8 	bl	8003fa8 <HAL_ADC_Start_DMA>

	}
	if(hadc->Instance==ADC2){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a24      	ldr	r2, [pc, #144]	@ (80018b0 <HAL_ADC_ConvCpltCallback+0x248>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d11f      	bne.n	8001862 <HAL_ADC_ConvCpltCallback+0x1fa>
		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x218>)
 8001824:	891b      	ldrh	r3, [r3, #8]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fea4 	bl	8000574 <__aeabi_i2d>
 800182c:	a312      	add	r3, pc, #72	@ (adr r3, 8001878 <HAL_ADC_ConvCpltCallback+0x210>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7ff f833 	bl	800089c <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f9fb 	bl	8000c38 <__aeabi_d2f>
 8001842:	ee07 0a10 	vmov	s14, r0
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_ADC_ConvCpltCallback+0x24c>)
 8001852:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_ADC_ConvCpltCallback+0x250>)
 8001858:	2201      	movs	r2, #1
 800185a:	4619      	mov	r1, r3
 800185c:	4817      	ldr	r0, [pc, #92]	@ (80018bc <HAL_ADC_ConvCpltCallback+0x254>)
 800185e:	f002 fba3 	bl	8003fa8 <HAL_ADC_Start_DMA>

	}

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800186c:	f3af 8000 	nop.w
 8001870:	d70a3d70 	.word	0xd70a3d70
 8001874:	40b36323 	.word	0x40b36323
 8001878:	00000000 	.word	0x00000000
 800187c:	40affe00 	.word	0x40affe00
 8001880:	20000c50 	.word	0x20000c50
 8001884:	20000c60 	.word	0x20000c60
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004
 8001890:	40590000 	.word	0x40590000
 8001894:	40080000 	.word	0x40080000
 8001898:	20000c5c 	.word	0x20000c5c
 800189c:	20000c64 	.word	0x20000c64
 80018a0:	404e0000 	.word	0x404e0000
 80018a4:	20000c68 	.word	0x20000c68
 80018a8:	20000c6c 	.word	0x20000c6c
 80018ac:	2000023c 	.word	0x2000023c
 80018b0:	50000100 	.word	0x50000100
 80018b4:	20000c70 	.word	0x20000c70
 80018b8:	20000c58 	.word	0x20000c58
 80018bc:	200002a8 	.word	0x200002a8

080018c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <MX_DMA_Init+0x90>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <MX_DMA_Init+0x90>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <MX_DMA_Init+0x90>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_DMA_Init+0x90>)
 80018e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001950 <MX_DMA_Init+0x90>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_DMA_Init+0x90>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	200b      	movs	r0, #11
 80018fc:	f003 facb 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001900:	200b      	movs	r0, #11
 8001902:	f003 fae2 	bl	8004eca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	200c      	movs	r0, #12
 800190c:	f003 fac3 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001910:	200c      	movs	r0, #12
 8001912:	f003 fada 	bl	8004eca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	200d      	movs	r0, #13
 800191c:	f003 fabb 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001920:	200d      	movs	r0, #13
 8001922:	f003 fad2 	bl	8004eca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	200e      	movs	r0, #14
 800192c:	f003 fab3 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001930:	200e      	movs	r0, #14
 8001932:	f003 faca 	bl	8004eca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	200f      	movs	r0, #15
 800193c:	f003 faab 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001940:	200f      	movs	r0, #15
 8001942:	f003 fac2 	bl	8004eca <HAL_NVIC_EnableIRQ>

}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000

08001954 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2110      	movs	r1, #16
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <SELECT+0x14>)
 800195e:	f003 ff8f 	bl	8005880 <HAL_GPIO_WritePin>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	48000800 	.word	0x48000800

0800196c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2110      	movs	r1, #16
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DESELECT+0x14>)
 8001976:	f003 ff83 	bl	8005880 <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	48000800 	.word	0x48000800

08001984 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800198e:	bf00      	nop
 8001990:	4808      	ldr	r0, [pc, #32]	@ (80019b4 <SPI_TxByte+0x30>)
 8001992:	f006 f971 	bl	8007c78 <HAL_SPI_GetState>
 8001996:	4603      	mov	r3, r0
 8001998:	2b01      	cmp	r3, #1
 800199a:	d1f9      	bne.n	8001990 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800199c:	1df9      	adds	r1, r7, #7
 800199e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a2:	2201      	movs	r2, #1
 80019a4:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <SPI_TxByte+0x30>)
 80019a6:	f005 fdd2 	bl	800754e <HAL_SPI_Transmit>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000d10 	.word	0x20000d10

080019b8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80019be:	23ff      	movs	r3, #255	@ 0xff
 80019c0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80019c6:	bf00      	nop
 80019c8:	4809      	ldr	r0, [pc, #36]	@ (80019f0 <SPI_RxByte+0x38>)
 80019ca:	f006 f955 	bl	8007c78 <HAL_SPI_GetState>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d1f9      	bne.n	80019c8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80019d4:	1dba      	adds	r2, r7, #6
 80019d6:	1df9      	adds	r1, r7, #7
 80019d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <SPI_RxByte+0x38>)
 80019e2:	f005 ff2a 	bl	800783a <HAL_SPI_TransmitReceive>

  return data;
 80019e6:	79bb      	ldrb	r3, [r7, #6]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000d10 	.word	0x20000d10

080019f4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80019fc:	f7ff ffdc 	bl	80019b8 <SPI_RxByte>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	701a      	strb	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <SD_ReadyWait+0x34>)
 8001a18:	2232      	movs	r2, #50	@ 0x32
 8001a1a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001a1c:	f7ff ffcc 	bl	80019b8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001a20:	f7ff ffca 	bl	80019b8 <SPI_RxByte>
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	2bff      	cmp	r3, #255	@ 0xff
 8001a2c:	d004      	beq.n	8001a38 <SD_ReadyWait+0x28>
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <SD_ReadyWait+0x34>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f3      	bne.n	8001a20 <SD_ReadyWait+0x10>

  return res;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200003d9 	.word	0x200003d9

08001a48 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001a4e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001a52:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001a54:	f7ff ff8a 	bl	800196c <DESELECT>

  for(int i = 0; i < 10; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e005      	b.n	8001a6a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001a5e:	20ff      	movs	r0, #255	@ 0xff
 8001a60:	f7ff ff90 	bl	8001984 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	3301      	adds	r3, #1
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	ddf6      	ble.n	8001a5e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001a70:	f7ff ff70 	bl	8001954 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001a74:	2340      	movs	r3, #64	@ 0x40
 8001a76:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001a88:	2395      	movs	r3, #149	@ 0x95
 8001a8a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e009      	b.n	8001aa6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001a92:	1d3a      	adds	r2, r7, #4
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff72 	bl	8001984 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	ddf2      	ble.n	8001a92 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001aac:	e002      	b.n	8001ab4 <SD_PowerOn+0x6c>
  {
    Count--;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001ab4:	f7ff ff80 	bl	80019b8 <SPI_RxByte>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d002      	beq.n	8001ac4 <SD_PowerOn+0x7c>
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f4      	bne.n	8001aae <SD_PowerOn+0x66>
  }

  DESELECT();
 8001ac4:	f7ff ff52 	bl	800196c <DESELECT>
  SPI_TxByte(0XFF);
 8001ac8:	20ff      	movs	r0, #255	@ 0xff
 8001aca:	f7ff ff5b 	bl	8001984 <SPI_TxByte>

  PowerFlag = 1;
 8001ace:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <SD_PowerOn+0x94>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200003db 	.word	0x200003db

08001ae0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <SD_PowerOff+0x14>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	200003db 	.word	0x200003db

08001af8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <SD_CheckPower+0x14>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	200003db 	.word	0x200003db

08001b10 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <SD_RxDataBlock+0x68>)
 8001b1c:	220a      	movs	r2, #10
 8001b1e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001b20:	f7ff ff4a 	bl	80019b8 <SPI_RxByte>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2bff      	cmp	r3, #255	@ 0xff
 8001b2c:	d104      	bne.n	8001b38 <SD_RxDataBlock+0x28>
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <SD_RxDataBlock+0x68>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f3      	bne.n	8001b20 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b3c:	d001      	beq.n	8001b42 <SD_RxDataBlock+0x32>
    return FALSE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e016      	b.n	8001b70 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff53 	bl	80019f4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff4d 	bl	80019f4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	3b02      	subs	r3, #2
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ed      	bne.n	8001b42 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001b66:	f7ff ff27 	bl	80019b8 <SPI_RxByte>
  SPI_RxByte();
 8001b6a:	f7ff ff25 	bl	80019b8 <SPI_RxByte>

  return TRUE;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200003d8 	.word	0x200003d8

08001b7c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001b8c:	f7ff ff40 	bl	8001a10 <SD_ReadyWait>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2bff      	cmp	r3, #255	@ 0xff
 8001b94:	d001      	beq.n	8001b9a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e040      	b.n	8001c1c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fef1 	bl	8001984 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	2bfd      	cmp	r3, #253	@ 0xfd
 8001ba6:	d031      	beq.n	8001c0c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fee5 	bl	8001984 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fede 	bl	8001984 <SPI_TxByte>
    } while (--wc);
 8001bc8:	7bbb      	ldrb	r3, [r7, #14]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	73bb      	strb	r3, [r7, #14]
 8001bce:	7bbb      	ldrb	r3, [r7, #14]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1eb      	bne.n	8001bac <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001bd4:	f7ff fef0 	bl	80019b8 <SPI_RxByte>
    SPI_RxByte();
 8001bd8:	f7ff feee 	bl	80019b8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001bdc:	e00b      	b.n	8001bf6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001bde:	f7ff feeb 	bl	80019b8 <SPI_RxByte>
 8001be2:	4603      	mov	r3, r0
 8001be4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d006      	beq.n	8001bfe <SD_TxDataBlock+0x82>
        break;

      i++;
 8001bf0:	7b7b      	ldrb	r3, [r7, #13]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001bf6:	7b7b      	ldrb	r3, [r7, #13]
 8001bf8:	2b40      	cmp	r3, #64	@ 0x40
 8001bfa:	d9f0      	bls.n	8001bde <SD_TxDataBlock+0x62>
 8001bfc:	e000      	b.n	8001c00 <SD_TxDataBlock+0x84>
        break;
 8001bfe:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001c00:	bf00      	nop
 8001c02:	f7ff fed9 	bl	80019b8 <SPI_RxByte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0fa      	beq.n	8001c02 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d101      	bne.n	8001c1a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001c30:	f7ff feee 	bl	8001a10 <SD_ReadyWait>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2bff      	cmp	r3, #255	@ 0xff
 8001c38:	d001      	beq.n	8001c3e <SD_SendCmd+0x1a>
    return 0xFF;
 8001c3a:	23ff      	movs	r3, #255	@ 0xff
 8001c3c:	e040      	b.n	8001cc0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fe9f 	bl	8001984 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	0e1b      	lsrs	r3, r3, #24
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fe99 	bl	8001984 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fe93 	bl	8001984 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fe8d 	bl	8001984 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe88 	bl	8001984 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b40      	cmp	r3, #64	@ 0x40
 8001c7c:	d101      	bne.n	8001c82 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001c7e:	2395      	movs	r3, #149	@ 0x95
 8001c80:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b48      	cmp	r3, #72	@ 0x48
 8001c86:	d101      	bne.n	8001c8c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001c88:	2387      	movs	r3, #135	@ 0x87
 8001c8a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fe78 	bl	8001984 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b4c      	cmp	r3, #76	@ 0x4c
 8001c98:	d101      	bne.n	8001c9e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001c9a:	f7ff fe8d 	bl	80019b8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001ca2:	f7ff fe89 	bl	80019b8 <SPI_RxByte>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001caa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da05      	bge.n	8001cbe <SD_SendCmd+0x9a>
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	73bb      	strb	r3, [r7, #14]
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f1      	bne.n	8001ca2 <SD_SendCmd+0x7e>

  return res;
 8001cbe:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0d5      	b.n	8001e88 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8001e90 <SD_disk_initialize+0x1c8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <SD_disk_initialize+0x2a>
    return Stat;
 8001cea:	4b69      	ldr	r3, [pc, #420]	@ (8001e90 <SD_disk_initialize+0x1c8>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e0ca      	b.n	8001e88 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001cf2:	f7ff fea9 	bl	8001a48 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001cf6:	f7ff fe2d 	bl	8001954 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2040      	movs	r0, #64	@ 0x40
 8001d02:	f7ff ff8f 	bl	8001c24 <SD_SendCmd>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f040 80a5 	bne.w	8001e58 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001d0e:	4b61      	ldr	r3, [pc, #388]	@ (8001e94 <SD_disk_initialize+0x1cc>)
 8001d10:	2264      	movs	r2, #100	@ 0x64
 8001d12:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001d14:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001d18:	2048      	movs	r0, #72	@ 0x48
 8001d1a:	f7ff ff83 	bl	8001c24 <SD_SendCmd>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d158      	bne.n	8001dd6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e00c      	b.n	8001d44 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001d2a:	7bfc      	ldrb	r4, [r7, #15]
 8001d2c:	f7ff fe44 	bl	80019b8 <SPI_RxByte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	f104 0310 	add.w	r3, r4, #16
 8001d38:	443b      	add	r3, r7
 8001d3a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	3301      	adds	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d9ef      	bls.n	8001d2a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001d4a:	7abb      	ldrb	r3, [r7, #10]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	f040 8083 	bne.w	8001e58 <SD_disk_initialize+0x190>
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	2baa      	cmp	r3, #170	@ 0xaa
 8001d56:	d17f      	bne.n	8001e58 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2077      	movs	r0, #119	@ 0x77
 8001d5c:	f7ff ff62 	bl	8001c24 <SD_SendCmd>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d807      	bhi.n	8001d76 <SD_disk_initialize+0xae>
 8001d66:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d6a:	2069      	movs	r0, #105	@ 0x69
 8001d6c:	f7ff ff5a 	bl	8001c24 <SD_SendCmd>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001d76:	4b47      	ldr	r3, [pc, #284]	@ (8001e94 <SD_disk_initialize+0x1cc>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1eb      	bne.n	8001d58 <SD_disk_initialize+0x90>
 8001d80:	e000      	b.n	8001d84 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001d82:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001d84:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <SD_disk_initialize+0x1cc>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d064      	beq.n	8001e58 <SD_disk_initialize+0x190>
 8001d8e:	2100      	movs	r1, #0
 8001d90:	207a      	movs	r0, #122	@ 0x7a
 8001d92:	f7ff ff47 	bl	8001c24 <SD_SendCmd>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d15d      	bne.n	8001e58 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e00c      	b.n	8001dbc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001da2:	7bfc      	ldrb	r4, [r7, #15]
 8001da4:	f7ff fe08 	bl	80019b8 <SPI_RxByte>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	f104 0310 	add.w	r3, r4, #16
 8001db0:	443b      	add	r3, r7
 8001db2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	3301      	adds	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d9ef      	bls.n	8001da2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001dc2:	7a3b      	ldrb	r3, [r7, #8]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <SD_disk_initialize+0x108>
 8001dcc:	2306      	movs	r3, #6
 8001dce:	e000      	b.n	8001dd2 <SD_disk_initialize+0x10a>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	73bb      	strb	r3, [r7, #14]
 8001dd4:	e040      	b.n	8001e58 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2077      	movs	r0, #119	@ 0x77
 8001dda:	f7ff ff23 	bl	8001c24 <SD_SendCmd>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d808      	bhi.n	8001df6 <SD_disk_initialize+0x12e>
 8001de4:	2100      	movs	r1, #0
 8001de6:	2069      	movs	r0, #105	@ 0x69
 8001de8:	f7ff ff1c 	bl	8001c24 <SD_SendCmd>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d801      	bhi.n	8001df6 <SD_disk_initialize+0x12e>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e000      	b.n	8001df8 <SD_disk_initialize+0x130>
 8001df6:	2301      	movs	r3, #1
 8001df8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001dfa:	7bbb      	ldrb	r3, [r7, #14]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d10e      	bne.n	8001e1e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001e00:	2100      	movs	r1, #0
 8001e02:	2077      	movs	r0, #119	@ 0x77
 8001e04:	f7ff ff0e 	bl	8001c24 <SD_SendCmd>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d80e      	bhi.n	8001e2c <SD_disk_initialize+0x164>
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2069      	movs	r0, #105	@ 0x69
 8001e12:	f7ff ff07 	bl	8001c24 <SD_SendCmd>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001e1c:	e00d      	b.n	8001e3a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2041      	movs	r0, #65	@ 0x41
 8001e22:	f7ff feff 	bl	8001c24 <SD_SendCmd>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <SD_disk_initialize+0x1cc>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e1      	bne.n	8001dfa <SD_disk_initialize+0x132>
 8001e36:	e000      	b.n	8001e3a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001e38:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <SD_disk_initialize+0x1cc>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <SD_disk_initialize+0x18c>
 8001e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e48:	2050      	movs	r0, #80	@ 0x50
 8001e4a:	f7ff feeb 	bl	8001c24 <SD_SendCmd>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001e58:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <SD_disk_initialize+0x1d0>)
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001e5e:	f7ff fd85 	bl	800196c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001e62:	f7ff fda9 	bl	80019b8 <SPI_RxByte>

  if (type)
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <SD_disk_initialize+0x1c8>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SD_disk_initialize+0x1c8>)
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	e001      	b.n	8001e82 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001e7e:	f7ff fe2f 	bl	8001ae0 <SD_PowerOff>
  }

  return Stat;
 8001e82:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <SD_disk_initialize+0x1c8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	20000008 	.word	0x20000008
 8001e94:	200003d8 	.word	0x200003d8
 8001e98:	200003da 	.word	0x200003da

08001e9c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e002      	b.n	8001eb6 <SD_disk_status+0x1a>

  return Stat;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <SD_disk_status+0x28>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <SD_disk_read+0x1c>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <SD_disk_read+0x20>
    return RES_PARERR;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	e051      	b.n	8001f8c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <SD_disk_read+0xcc>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e048      	b.n	8001f8c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001efa:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <SD_disk_read+0xd0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	607b      	str	r3, [r7, #4]

  SELECT();
 8001f0c:	f7ff fd22 	bl	8001954 <SELECT>

  if (count == 1)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d111      	bne.n	8001f3a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	2051      	movs	r0, #81	@ 0x51
 8001f1a:	f7ff fe83 	bl	8001c24 <SD_SendCmd>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d129      	bne.n	8001f78 <SD_disk_read+0xb0>
 8001f24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f28:	68b8      	ldr	r0, [r7, #8]
 8001f2a:	f7ff fdf1 	bl	8001b10 <SD_RxDataBlock>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d021      	beq.n	8001f78 <SD_disk_read+0xb0>
      count = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	e01e      	b.n	8001f78 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	2052      	movs	r0, #82	@ 0x52
 8001f3e:	f7ff fe71 	bl	8001c24 <SD_SendCmd>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d117      	bne.n	8001f78 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001f48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f4c:	68b8      	ldr	r0, [r7, #8]
 8001f4e:	f7ff fddf 	bl	8001b10 <SD_RxDataBlock>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001f5e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ed      	bne.n	8001f48 <SD_disk_read+0x80>
 8001f6c:	e000      	b.n	8001f70 <SD_disk_read+0xa8>
          break;
 8001f6e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001f70:	2100      	movs	r1, #0
 8001f72:	204c      	movs	r0, #76	@ 0x4c
 8001f74:	f7ff fe56 	bl	8001c24 <SD_SendCmd>
    }
  }

  DESELECT();
 8001f78:	f7ff fcf8 	bl	800196c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001f7c:	f7ff fd1c 	bl	80019b8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000008 	.word	0x20000008
 8001f98:	200003da 	.word	0x200003da

08001f9c <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	4603      	mov	r3, r0
 8001faa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <SD_disk_write+0x1c>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <SD_disk_write+0x20>
    return RES_PARERR;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e06b      	b.n	8002094 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001fbc:	4b37      	ldr	r3, [pc, #220]	@ (800209c <SD_disk_write+0x100>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e062      	b.n	8002094 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001fce:	4b33      	ldr	r3, [pc, #204]	@ (800209c <SD_disk_write+0x100>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e059      	b.n	8002094 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80020a0 <SD_disk_write+0x104>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	607b      	str	r3, [r7, #4]

  SELECT();
 8001ff2:	f7ff fcaf 	bl	8001954 <SELECT>

  if (count == 1)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d110      	bne.n	800201e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	2058      	movs	r0, #88	@ 0x58
 8002000:	f7ff fe10 	bl	8001c24 <SD_SendCmd>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13a      	bne.n	8002080 <SD_disk_write+0xe4>
 800200a:	21fe      	movs	r1, #254	@ 0xfe
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f7ff fdb5 	bl	8001b7c <SD_TxDataBlock>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d033      	beq.n	8002080 <SD_disk_write+0xe4>
      count = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	e030      	b.n	8002080 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <SD_disk_write+0x104>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800202a:	2100      	movs	r1, #0
 800202c:	2077      	movs	r0, #119	@ 0x77
 800202e:	f7ff fdf9 	bl	8001c24 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002032:	6839      	ldr	r1, [r7, #0]
 8002034:	2057      	movs	r0, #87	@ 0x57
 8002036:	f7ff fdf5 	bl	8001c24 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	2059      	movs	r0, #89	@ 0x59
 800203e:	f7ff fdf1 	bl	8001c24 <SD_SendCmd>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d11b      	bne.n	8002080 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002048:	21fc      	movs	r1, #252	@ 0xfc
 800204a:	68b8      	ldr	r0, [r7, #8]
 800204c:	f7ff fd96 	bl	8001b7c <SD_TxDataBlock>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800205c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3b01      	subs	r3, #1
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ee      	bne.n	8002048 <SD_disk_write+0xac>
 800206a:	e000      	b.n	800206e <SD_disk_write+0xd2>
          break;
 800206c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800206e:	21fd      	movs	r1, #253	@ 0xfd
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fd83 	bl	8001b7c <SD_TxDataBlock>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <SD_disk_write+0xe4>
      {
        count = 1;
 800207c:	2301      	movs	r3, #1
 800207e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002080:	f7ff fc74 	bl	800196c <DESELECT>
  SPI_RxByte();
 8002084:	f7ff fc98 	bl	80019b8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000008 	.word	0x20000008
 80020a0:	200003da 	.word	0x200003da

080020a4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	603a      	str	r2, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	460b      	mov	r3, r1
 80020b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80020be:	2304      	movs	r3, #4
 80020c0:	e119      	b.n	80022f6 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d129      	bne.n	8002122 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d017      	beq.n	8002106 <SD_disk_ioctl+0x62>
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	dc1f      	bgt.n	800211a <SD_disk_ioctl+0x76>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <SD_disk_ioctl+0x40>
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d00b      	beq.n	80020fa <SD_disk_ioctl+0x56>
 80020e2:	e01a      	b.n	800211a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80020e4:	f7ff fd08 	bl	8001af8 <SD_CheckPower>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80020ee:	f7ff fcf7 	bl	8001ae0 <SD_PowerOff>
      res = RES_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80020f8:	e0fb      	b.n	80022f2 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80020fa:	f7ff fca5 	bl	8001a48 <SD_PowerOn>
      res = RES_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002104:	e0f5      	b.n	80022f2 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	1c5c      	adds	r4, r3, #1
 800210a:	f7ff fcf5 	bl	8001af8 <SD_CheckPower>
 800210e:	4603      	mov	r3, r0
 8002110:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002118:	e0eb      	b.n	80022f2 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 800211a:	2304      	movs	r3, #4
 800211c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002120:	e0e7      	b.n	80022f2 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8002122:	4b77      	ldr	r3, [pc, #476]	@ (8002300 <SD_disk_ioctl+0x25c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002130:	2303      	movs	r3, #3
 8002132:	e0e0      	b.n	80022f6 <SD_disk_ioctl+0x252>

    SELECT();
 8002134:	f7ff fc0e 	bl	8001954 <SELECT>

    switch (ctrl)
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	2b0d      	cmp	r3, #13
 800213c:	f200 80ca 	bhi.w	80022d4 <SD_disk_ioctl+0x230>
 8002140:	a201      	add	r2, pc, #4	@ (adr r2, 8002148 <SD_disk_ioctl+0xa4>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	0800223f 	.word	0x0800223f
 800214c:	08002181 	.word	0x08002181
 8002150:	0800222f 	.word	0x0800222f
 8002154:	080022d5 	.word	0x080022d5
 8002158:	080022d5 	.word	0x080022d5
 800215c:	080022d5 	.word	0x080022d5
 8002160:	080022d5 	.word	0x080022d5
 8002164:	080022d5 	.word	0x080022d5
 8002168:	080022d5 	.word	0x080022d5
 800216c:	080022d5 	.word	0x080022d5
 8002170:	080022d5 	.word	0x080022d5
 8002174:	08002251 	.word	0x08002251
 8002178:	08002275 	.word	0x08002275
 800217c:	08002299 	.word	0x08002299
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002180:	2100      	movs	r1, #0
 8002182:	2049      	movs	r0, #73	@ 0x49
 8002184:	f7ff fd4e 	bl	8001c24 <SD_SendCmd>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 80a6 	bne.w	80022dc <SD_disk_ioctl+0x238>
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2110      	movs	r1, #16
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fcba 	bl	8001b10 <SD_RxDataBlock>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 809c 	beq.w	80022dc <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80021a4:	7b3b      	ldrb	r3, [r7, #12]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10d      	bne.n	80021ca <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80021ae:	7d7b      	ldrb	r3, [r7, #21]
 80021b0:	461a      	mov	r2, r3
 80021b2:	7d3b      	ldrb	r3, [r7, #20]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80021c0:	8bfb      	ldrh	r3, [r7, #30]
 80021c2:	029a      	lsls	r2, r3, #10
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e02d      	b.n	8002226 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80021ca:	7c7b      	ldrb	r3, [r7, #17]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	7dbb      	ldrb	r3, [r7, #22]
 80021d4:	09db      	lsrs	r3, r3, #7
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4413      	add	r3, r2
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	7d7b      	ldrb	r3, [r7, #21]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 0306 	and.w	r3, r3, #6
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3302      	adds	r3, #2
 80021ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80021f2:	7d3b      	ldrb	r3, [r7, #20]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4413      	add	r3, r2
 8002202:	b29a      	uxth	r2, r3
 8002204:	7cbb      	ldrb	r3, [r7, #18]
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	b29b      	uxth	r3, r3
 800220a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800220e:	b29b      	uxth	r3, r3
 8002210:	4413      	add	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002218:	8bfa      	ldrh	r2, [r7, #30]
 800221a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800221e:	3b09      	subs	r3, #9
 8002220:	409a      	lsls	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800222c:	e056      	b.n	80022dc <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002234:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800223c:	e055      	b.n	80022ea <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800223e:	f7ff fbe7 	bl	8001a10 <SD_ReadyWait>
 8002242:	4603      	mov	r3, r0
 8002244:	2bff      	cmp	r3, #255	@ 0xff
 8002246:	d14b      	bne.n	80022e0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800224e:	e047      	b.n	80022e0 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002250:	2100      	movs	r1, #0
 8002252:	2049      	movs	r0, #73	@ 0x49
 8002254:	f7ff fce6 	bl	8001c24 <SD_SendCmd>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d142      	bne.n	80022e4 <SD_disk_ioctl+0x240>
 800225e:	2110      	movs	r1, #16
 8002260:	6a38      	ldr	r0, [r7, #32]
 8002262:	f7ff fc55 	bl	8001b10 <SD_RxDataBlock>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d03b      	beq.n	80022e4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002272:	e037      	b.n	80022e4 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002274:	2100      	movs	r1, #0
 8002276:	204a      	movs	r0, #74	@ 0x4a
 8002278:	f7ff fcd4 	bl	8001c24 <SD_SendCmd>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d132      	bne.n	80022e8 <SD_disk_ioctl+0x244>
 8002282:	2110      	movs	r1, #16
 8002284:	6a38      	ldr	r0, [r7, #32]
 8002286:	f7ff fc43 	bl	8001b10 <SD_RxDataBlock>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02b      	beq.n	80022e8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002296:	e027      	b.n	80022e8 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002298:	2100      	movs	r1, #0
 800229a:	207a      	movs	r0, #122	@ 0x7a
 800229c:	f7ff fcc2 	bl	8001c24 <SD_SendCmd>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80022ac:	e00b      	b.n	80022c6 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80022ae:	6a3c      	ldr	r4, [r7, #32]
 80022b0:	1c63      	adds	r3, r4, #1
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	f7ff fb80 	bl	80019b8 <SPI_RxByte>
 80022b8:	4603      	mov	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80022bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022c0:	3301      	adds	r3, #1
 80022c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80022c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d9ef      	bls.n	80022ae <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80022d4:	2304      	movs	r3, #4
 80022d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022da:	e006      	b.n	80022ea <SD_disk_ioctl+0x246>
      break;
 80022dc:	bf00      	nop
 80022de:	e004      	b.n	80022ea <SD_disk_ioctl+0x246>
      break;
 80022e0:	bf00      	nop
 80022e2:	e002      	b.n	80022ea <SD_disk_ioctl+0x246>
      break;
 80022e4:	bf00      	nop
 80022e6:	e000      	b.n	80022ea <SD_disk_ioctl+0x246>
      break;
 80022e8:	bf00      	nop
    }

    DESELECT();
 80022ea:	f7ff fb3f 	bl	800196c <DESELECT>
    SPI_RxByte();
 80022ee:	f7ff fb63 	bl	80019b8 <SPI_RxByte>
  }

  return res;
 80022f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	372c      	adds	r7, #44	@ 0x2c
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008

08002304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231a:	4b3c      	ldr	r3, [pc, #240]	@ (800240c <MX_GPIO_Init+0x108>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	4a3b      	ldr	r2, [pc, #236]	@ (800240c <MX_GPIO_Init+0x108>)
 8002320:	f043 0320 	orr.w	r3, r3, #32
 8002324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002326:	4b39      	ldr	r3, [pc, #228]	@ (800240c <MX_GPIO_Init+0x108>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b36      	ldr	r3, [pc, #216]	@ (800240c <MX_GPIO_Init+0x108>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	4a35      	ldr	r2, [pc, #212]	@ (800240c <MX_GPIO_Init+0x108>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233e:	4b33      	ldr	r3, [pc, #204]	@ (800240c <MX_GPIO_Init+0x108>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	4b30      	ldr	r3, [pc, #192]	@ (800240c <MX_GPIO_Init+0x108>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a2f      	ldr	r2, [pc, #188]	@ (800240c <MX_GPIO_Init+0x108>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b2d      	ldr	r3, [pc, #180]	@ (800240c <MX_GPIO_Init+0x108>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <MX_GPIO_Init+0x108>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	4a29      	ldr	r2, [pc, #164]	@ (800240c <MX_GPIO_Init+0x108>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236e:	4b27      	ldr	r3, [pc, #156]	@ (800240c <MX_GPIO_Init+0x108>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	2110      	movs	r1, #16
 800237e:	4824      	ldr	r0, [pc, #144]	@ (8002410 <MX_GPIO_Init+0x10c>)
 8002380:	f003 fa7e 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800238a:	4822      	ldr	r0, [pc, #136]	@ (8002414 <MX_GPIO_Init+0x110>)
 800238c:	f003 fa78 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002390:	2310      	movs	r3, #16
 8002392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	481a      	ldr	r0, [pc, #104]	@ (8002410 <MX_GPIO_Init+0x10c>)
 80023a8:	f003 f8e8 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80023ac:	2306      	movs	r3, #6
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4814      	ldr	r0, [pc, #80]	@ (8002414 <MX_GPIO_Init+0x110>)
 80023c2:	f003 f8db 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	480d      	ldr	r0, [pc, #52]	@ (8002414 <MX_GPIO_Init+0x110>)
 80023e0:	f003 f8cc 	bl	800557c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	2007      	movs	r0, #7
 80023ea:	f002 fd54 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023ee:	2007      	movs	r0, #7
 80023f0:	f002 fd6b 	bl	8004eca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2008      	movs	r0, #8
 80023fa:	f002 fd4c 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80023fe:	2008      	movs	r0, #8
 8002400:	f002 fd63 	bl	8004eca <HAL_NVIC_EnableIRQ>

}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	@ 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	48000800 	.word	0x48000800
 8002414:	48000400 	.word	0x48000400

08002418 <Get_Loc>:
#include <stdint.h>

char GPGGA[75];
char loc[26];

char Get_Loc(void){
 8002418:	b480      	push	{r7}
 800241a:	b08b      	sub	sp, #44	@ 0x2c
 800241c:	af00      	add	r7, sp, #0
	char loc[26];
	for (int i  =0 ; i<75 ; i++){
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
 8002422:	e022      	b.n	800246a <Get_Loc+0x52>
		if ((GPGGA[i]==0x78) || (GPGGA[i]==0x83)){
 8002424:	4a16      	ldr	r2, [pc, #88]	@ (8002480 <Get_Loc+0x68>)
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b78      	cmp	r3, #120	@ 0x78
 800242e:	d005      	beq.n	800243c <Get_Loc+0x24>
 8002430:	4a13      	ldr	r2, [pc, #76]	@ (8002480 <Get_Loc+0x68>)
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b83      	cmp	r3, #131	@ 0x83
 800243a:	d113      	bne.n	8002464 <Get_Loc+0x4c>
			for (int j = 0 ; j<26 ; j++){
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	e00d      	b.n	800245e <Get_Loc+0x46>
					loc[j]=GPGGA[j+i-11];
 8002442:	6a3a      	ldr	r2, [r7, #32]
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	4413      	add	r3, r2
 8002448:	3b0b      	subs	r3, #11
 800244a:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <Get_Loc+0x68>)
 800244c:	5cd1      	ldrb	r1, [r2, r3]
 800244e:	1d3a      	adds	r2, r7, #4
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	4413      	add	r3, r2
 8002454:	460a      	mov	r2, r1
 8002456:	701a      	strb	r2, [r3, #0]
			for (int j = 0 ; j<26 ; j++){
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	3301      	adds	r3, #1
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	2b19      	cmp	r3, #25
 8002462:	ddee      	ble.n	8002442 <Get_Loc+0x2a>
	for (int i  =0 ; i<75 ; i++){
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	3301      	adds	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	2b4a      	cmp	r3, #74	@ 0x4a
 800246e:	ddd9      	ble.n	8002424 <Get_Loc+0xc>
			}
		}

	}
	return loc ;
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	b2db      	uxtb	r3, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	372c      	adds	r7, #44	@ 0x2c
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200003dc 	.word	0x200003dc

08002484 <Get_Time>:

uint8_t Get_Time(void){
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
	uint8_t time[9];
	time[0]=GPGGA[0+7]-48;
 800248a:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <Get_Time+0xb0>)
 800248c:	79db      	ldrb	r3, [r3, #7]
 800248e:	3b30      	subs	r3, #48	@ 0x30
 8002490:	b2db      	uxtb	r3, r3
 8002492:	713b      	strb	r3, [r7, #4]
	time[1]=GPGGA[1+7]-48+2;
 8002494:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <Get_Time+0xb0>)
 8002496:	7a1b      	ldrb	r3, [r3, #8]
 8002498:	3b2e      	subs	r3, #46	@ 0x2e
 800249a:	b2db      	uxtb	r3, r3
 800249c:	717b      	strb	r3, [r7, #5]
	time[2]='h';
 800249e:	2368      	movs	r3, #104	@ 0x68
 80024a0:	71bb      	strb	r3, [r7, #6]
	time[3]=GPGGA[2+7]-48;
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <Get_Time+0xb0>)
 80024a4:	7a5b      	ldrb	r3, [r3, #9]
 80024a6:	3b30      	subs	r3, #48	@ 0x30
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	71fb      	strb	r3, [r7, #7]
	time[4]=GPGGA[3+7]-48;
 80024ac:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <Get_Time+0xb0>)
 80024ae:	7a9b      	ldrb	r3, [r3, #10]
 80024b0:	3b30      	subs	r3, #48	@ 0x30
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	723b      	strb	r3, [r7, #8]
	time[5]='m';
 80024b6:	236d      	movs	r3, #109	@ 0x6d
 80024b8:	727b      	strb	r3, [r7, #9]
	if (time[1]>9){
 80024ba:	797b      	ldrb	r3, [r7, #5]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d90d      	bls.n	80024dc <Get_Time+0x58>
			time[0]=2;
 80024c0:	2302      	movs	r3, #2
 80024c2:	713b      	strb	r3, [r7, #4]
			time[1]=time[1]%10;
 80024c4:	797a      	ldrb	r2, [r7, #5]
 80024c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002538 <Get_Time+0xb4>)
 80024c8:	fba3 1302 	umull	r1, r3, r3, r2
 80024cc:	08d9      	lsrs	r1, r3, #3
 80024ce:	460b      	mov	r3, r1
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	717b      	strb	r3, [r7, #5]
		}
	if ((time[0]*10+time[1])>24){
 80024dc:	793b      	ldrb	r3, [r7, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	461a      	mov	r2, r3
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	4413      	add	r3, r2
 80024ee:	2b18      	cmp	r3, #24
 80024f0:	dd17      	ble.n	8002522 <Get_Time+0x9e>
		time[0]=0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	713b      	strb	r3, [r7, #4]
		time[1]=(time[0]*10+time[1])%24;
 80024f6:	793b      	ldrb	r3, [r7, #4]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	461a      	mov	r2, r3
 8002504:	797b      	ldrb	r3, [r7, #5]
 8002506:	441a      	add	r2, r3
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <Get_Time+0xb8>)
 800250a:	fb83 1302 	smull	r1, r3, r3, r2
 800250e:	1099      	asrs	r1, r3, #2
 8002510:	17d3      	asrs	r3, r2, #31
 8002512:	1ac9      	subs	r1, r1, r3
 8002514:	460b      	mov	r3, r1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	440b      	add	r3, r1
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1ad1      	subs	r1, r2, r3
 800251e:	b2cb      	uxtb	r3, r1
 8002520:	717b      	strb	r3, [r7, #5]
	}
	return time;
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	b2db      	uxtb	r3, r3
	}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200003dc 	.word	0x200003dc
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	2aaaaaab 	.word	0x2aaaaaab

08002540 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002546:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <MX_I2C3_Init+0x78>)
 8002548:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0070597B;
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <MX_I2C3_Init+0x7c>)
 800254e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002558:	2201      	movs	r2, #1
 800255a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800255c:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002562:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800257a:	480e      	ldr	r0, [pc, #56]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800257c:	f003 f9bb 	bl	80058f6 <HAL_I2C_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002586:	f000 f99d 	bl	80028c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800258a:	2100      	movs	r1, #0
 800258c:	4809      	ldr	r0, [pc, #36]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800258e:	f003 fdd5 	bl	800613c <HAL_I2CEx_ConfigAnalogFilter>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002598:	f000 f994 	bl	80028c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800259c:	2100      	movs	r1, #0
 800259e:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_I2C3_Init+0x74>)
 80025a0:	f003 fe17 	bl	80061d2 <HAL_I2CEx_ConfigDigitalFilter>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80025aa:	f000 f98b 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000444 	.word	0x20000444
 80025b8:	40007800 	.word	0x40007800
 80025bc:	0070597b 	.word	0x0070597b

080025c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b09c      	sub	sp, #112	@ 0x70
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2244      	movs	r2, #68	@ 0x44
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00c fb4b 	bl	800ec7c <memset>
  if(i2cHandle->Instance==I2C3)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2e      	ldr	r2, [pc, #184]	@ (80026a4 <HAL_I2C_MspInit+0xe4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d155      	bne.n	800269c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80025f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fd0a 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800260a:	f000 f95b 	bl	80028c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a25      	ldr	r2, [pc, #148]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800263e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002642:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002650:	2302      	movs	r3, #2
 8002652:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265e:	f002 ff8d 	bl	800557c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002666:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002674:	2308      	movs	r3, #8
 8002676:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800267c:	4619      	mov	r1, r3
 800267e:	480b      	ldr	r0, [pc, #44]	@ (80026ac <HAL_I2C_MspInit+0xec>)
 8002680:	f002 ff7c 	bl	800557c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800268a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800268e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800269c:	bf00      	nop
 800269e:	3770      	adds	r7, #112	@ 0x70
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40007800 	.word	0x40007800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000800 	.word	0x48000800

080026b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b6:	f001 f842 	bl	800373e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ba:	f000 f8b1 	bl	8002820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026be:	f7ff fe21 	bl	8002304 <MX_GPIO_Init>
  MX_DMA_Init();
 80026c2:	f7ff f8fd 	bl	80018c0 <MX_DMA_Init>
  MX_SPI1_Init();
 80026c6:	f000 f903 	bl	80028d0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80026ca:	f000 ffb3 	bl	8003634 <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80026ce:	f008 fcad 	bl	800b02c <MX_FATFS_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <main+0x2c>
    Error_Handler();
 80026d8:	f000 f8f4 	bl	80028c4 <Error_Handler>
  }
  MX_I2C3_Init();
 80026dc:	f7ff ff30 	bl	8002540 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80026e0:	f000 fd20 	bl	8003124 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80026e4:	f7fe fdaa 	bl	800123c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80026e8:	f000 fd66 	bl	80031b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80026ec:	f000 fbe2 	bl	8002eb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80026f0:	f000 fc58 	bl	8002fa4 <MX_TIM4_Init>
  MX_ADC2_Init();
 80026f4:	f7fe fe4c 	bl	8001390 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 80026f8:	2205      	movs	r2, #5
 80026fa:	4933      	ldr	r1, [pc, #204]	@ (80027c8 <main+0x118>)
 80026fc:	4833      	ldr	r0, [pc, #204]	@ (80027cc <main+0x11c>)
 80026fe:	f001 fc53 	bl	8003fa8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 8002702:	4b33      	ldr	r3, [pc, #204]	@ (80027d0 <main+0x120>)
 8002704:	2201      	movs	r2, #1
 8002706:	4619      	mov	r1, r3
 8002708:	4832      	ldr	r0, [pc, #200]	@ (80027d4 <main+0x124>)
 800270a:	f001 fc4d 	bl	8003fa8 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800270e:	2100      	movs	r1, #0
 8002710:	4831      	ldr	r0, [pc, #196]	@ (80027d8 <main+0x128>)
 8002712:	f005 fcdb 	bl	80080cc <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800271c:	482f      	ldr	r0, [pc, #188]	@ (80027dc <main+0x12c>)
 800271e:	f003 f8af 	bl	8005880 <HAL_GPIO_WritePin>


  HAL_Delay(100);
 8002722:	2064      	movs	r0, #100	@ 0x64
 8002724:	f001 f87c 	bl	8003820 <HAL_Delay>
  HAL_UART_Abort(&huart1);
 8002728:	482d      	ldr	r0, [pc, #180]	@ (80027e0 <main+0x130>)
 800272a:	f006 ffa5 	bl	8009678 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 800272e:	2240      	movs	r2, #64	@ 0x40
 8002730:	492c      	ldr	r1, [pc, #176]	@ (80027e4 <main+0x134>)
 8002732:	482b      	ldr	r0, [pc, #172]	@ (80027e0 <main+0x130>)
 8002734:	f006 ff54 	bl	80095e0 <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 8002738:	2064      	movs	r0, #100	@ 0x64
 800273a:	f001 f871 	bl	8003820 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 800273e:	482a      	ldr	r0, [pc, #168]	@ (80027e8 <main+0x138>)
 8002740:	f006 ff9a 	bl	8009678 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 8002744:	2208      	movs	r2, #8
 8002746:	4929      	ldr	r1, [pc, #164]	@ (80027ec <main+0x13c>)
 8002748:	4827      	ldr	r0, [pc, #156]	@ (80027e8 <main+0x138>)
 800274a:	f006 ff49 	bl	80095e0 <HAL_UART_Receive_DMA>




  f_mount(&fs, "", 0);
 800274e:	2200      	movs	r2, #0
 8002750:	4927      	ldr	r1, [pc, #156]	@ (80027f0 <main+0x140>)
 8002752:	4828      	ldr	r0, [pc, #160]	@ (80027f4 <main+0x144>)
 8002754:	f00a f8e8 	bl	800c928 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
  int tarvosen=0;
 800275c:	2300      	movs	r3, #0
 800275e:	603b      	str	r3, [r7, #0]
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002760:	2213      	movs	r2, #19
 8002762:	4925      	ldr	r1, [pc, #148]	@ (80027f8 <main+0x148>)
 8002764:	4825      	ldr	r0, [pc, #148]	@ (80027fc <main+0x14c>)
 8002766:	f00a f925 	bl	800c9b4 <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 800276a:	4a25      	ldr	r2, [pc, #148]	@ (8002800 <main+0x150>)
 800276c:	4925      	ldr	r1, [pc, #148]	@ (8002804 <main+0x154>)
 800276e:	4820      	ldr	r0, [pc, #128]	@ (80027f0 <main+0x140>)
 8002770:	f00a fada 	bl	800cd28 <f_getfree>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_capteur == 1){
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <main+0x158>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d117      	bne.n	80027ac <main+0xfc>
			  strcpy(gyro, Read_sensor_data());
 800277c:	f7fe fca8 	bl	80010d0 <Read_sensor_data>
 8002780:	4603      	mov	r3, r0
 8002782:	4619      	mov	r1, r3
 8002784:	4821      	ldr	r0, [pc, #132]	@ (800280c <main+0x15c>)
 8002786:	f00c fad0 	bl	800ed2a <strcpy>
			  strcpy(time,Get_Time());
 800278a:	f7ff fe7b 	bl	8002484 <Get_Time>
 800278e:	4603      	mov	r3, r0
 8002790:	4619      	mov	r1, r3
 8002792:	481f      	ldr	r0, [pc, #124]	@ (8002810 <main+0x160>)
 8002794:	f00c fac9 	bl	800ed2a <strcpy>
			  strcpy(loc,Get_Loc());
 8002798:	f7ff fe3e 	bl	8002418 <Get_Loc>
 800279c:	4603      	mov	r3, r0
 800279e:	4619      	mov	r1, r3
 80027a0:	481c      	ldr	r0, [pc, #112]	@ (8002814 <main+0x164>)
 80027a2:	f00c fac2 	bl	800ed2a <strcpy>
	  		  flag_capteur = 0;
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <main+0x158>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
	  	 }
	 if (flag_envoi == 1){
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <main+0x168>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d1df      	bne.n	8002774 <main+0xc4>
		 SEND_DATA_NETW(buffer_envoi,0x82, 0x02, sizeof(buffer_envoi)); // on envoi à l'adresse 0x02
 80027b4:	2364      	movs	r3, #100	@ 0x64
 80027b6:	2202      	movs	r2, #2
 80027b8:	2182      	movs	r1, #130	@ 0x82
 80027ba:	4818      	ldr	r0, [pc, #96]	@ (800281c <main+0x16c>)
 80027bc:	f000 fb06 	bl	8002dcc <SEND_DATA_NETW>
		 flag_envoi = 0;
 80027c0:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <main+0x168>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
	  if (flag_capteur == 1){
 80027c6:	e7d5      	b.n	8002774 <main+0xc4>
 80027c8:	20000c50 	.word	0x20000c50
 80027cc:	2000023c 	.word	0x2000023c
 80027d0:	20000c58 	.word	0x20000c58
 80027d4:	200002a8 	.word	0x200002a8
 80027d8:	20000d88 	.word	0x20000d88
 80027dc:	48000400 	.word	0x48000400
 80027e0:	20000eb4 	.word	0x20000eb4
 80027e4:	20000c08 	.word	0x20000c08
 80027e8:	20000e20 	.word	0x20000e20
 80027ec:	20000a00 	.word	0x20000a00
 80027f0:	08011640 	.word	0x08011640
 80027f4:	20000498 	.word	0x20000498
 80027f8:	08011644 	.word	0x08011644
 80027fc:	200006cc 	.word	0x200006cc
 8002800:	200006c8 	.word	0x200006c8
 8002804:	200008fc 	.word	0x200008fc
 8002808:	20000d7c 	.word	0x20000d7c
 800280c:	20000c74 	.word	0x20000c74
 8002810:	20000ca0 	.word	0x20000ca0
 8002814:	20000428 	.word	0x20000428
 8002818:	20000d78 	.word	0x20000d78
 800281c:	20000cac 	.word	0x20000cac

08002820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b094      	sub	sp, #80	@ 0x50
 8002824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	2238      	movs	r2, #56	@ 0x38
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f00c fa24 	bl	800ec7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002842:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002846:	f003 fe09 	bl	800645c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 800284a:	2323      	movs	r3, #35	@ 0x23
 800284c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800284e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002852:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800285a:	2340      	movs	r3, #64	@ 0x40
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800285e:	2301      	movs	r3, #1
 8002860:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002862:	2302      	movs	r3, #2
 8002864:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002866:	2303      	movs	r3, #3
 8002868:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800286a:	2304      	movs	r3, #4
 800286c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 45;
 800286e:	232d      	movs	r3, #45	@ 0x2d
 8002870:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002872:	2302      	movs	r3, #2
 8002874:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002876:	2302      	movs	r3, #2
 8002878:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800287a:	2302      	movs	r3, #2
 800287c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800287e:	f107 0318 	add.w	r3, r7, #24
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fe9e 	bl	80065c4 <HAL_RCC_OscConfig>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800288e:	f000 f819 	bl	80028c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002892:	230f      	movs	r3, #15
 8002894:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002896:	2303      	movs	r3, #3
 8002898:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800289e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80028a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2102      	movs	r1, #2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f004 f99b 	bl	8006be8 <HAL_RCC_ClockConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80028b8:	f000 f804 	bl	80028c4 <Error_Handler>
  }
}
 80028bc:	bf00      	nop
 80028be:	3750      	adds	r7, #80	@ 0x50
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <Error_Handler+0x8>

080028d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <MX_SPI1_Init+0x74>)
 80028d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <MX_SPI1_Init+0x78>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <MX_SPI1_Init+0x74>)
 80028dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <MX_SPI1_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b16      	ldr	r3, [pc, #88]	@ (8002944 <MX_SPI1_Init+0x74>)
 80028ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f0:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <MX_SPI1_Init+0x74>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f6:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <MX_SPI1_Init+0x74>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <MX_SPI1_Init+0x74>)
 80028fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002902:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002904:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <MX_SPI1_Init+0x74>)
 8002906:	2210      	movs	r2, #16
 8002908:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <MX_SPI1_Init+0x74>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <MX_SPI1_Init+0x74>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <MX_SPI1_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <MX_SPI1_Init+0x74>)
 800291e:	2207      	movs	r2, #7
 8002920:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002922:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <MX_SPI1_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <MX_SPI1_Init+0x74>)
 800292a:	2208      	movs	r2, #8
 800292c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800292e:	4805      	ldr	r0, [pc, #20]	@ (8002944 <MX_SPI1_Init+0x74>)
 8002930:	f004 fd62 	bl	80073f8 <HAL_SPI_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800293a:	f7ff ffc3 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000d10 	.word	0x20000d10
 8002948:	40013000 	.word	0x40013000

0800294c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <HAL_SPI_MspInit+0x7c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d128      	bne.n	80029c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800296e:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_SPI_MspInit+0x80>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002972:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <HAL_SPI_MspInit+0x80>)
 8002974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002978:	6613      	str	r3, [r2, #96]	@ 0x60
 800297a:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <HAL_SPI_MspInit+0x80>)
 800297c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_SPI_MspInit+0x80>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	4a10      	ldr	r2, [pc, #64]	@ (80029cc <HAL_SPI_MspInit+0x80>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_SPI_MspInit+0x80>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800299e:	23e0      	movs	r3, #224	@ 0xe0
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ae:	2305      	movs	r3, #5
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029bc:	f002 fdde 	bl	800557c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029c0:	bf00      	nop
 80029c2:	3728      	adds	r7, #40	@ 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40013000 	.word	0x40013000
 80029cc:	40021000 	.word	0x40021000

080029d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <HAL_MspInit+0x44>)
 80029d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029da:	4a0e      	ldr	r2, [pc, #56]	@ (8002a14 <HAL_MspInit+0x44>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80029e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <HAL_MspInit+0x44>)
 80029e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_MspInit+0x44>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	4a08      	ldr	r2, [pc, #32]	@ (8002a14 <HAL_MspInit+0x44>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_MspInit+0x44>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a06:	f003 fdcd 	bl	80065a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000

08002a18 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <SDTimer_Handler+0x40>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <SDTimer_Handler+0x1c>
    Timer1--;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <SDTimer_Handler+0x40>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <SDTimer_Handler+0x40>)
 8002a32:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <SDTimer_Handler+0x44>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <SDTimer_Handler+0x34>
    Timer2--;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <SDTimer_Handler+0x44>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <SDTimer_Handler+0x44>)
 8002a4a:	701a      	strb	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	200003d8 	.word	0x200003d8
 8002a5c:	200003d9 	.word	0x200003d9

08002a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <NMI_Handler+0x4>

08002a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <HardFault_Handler+0x4>

08002a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <MemManage_Handler+0x4>

08002a78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <BusFault_Handler+0x4>

08002a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <UsageFault_Handler+0x4>

08002a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <SysTick_Handler+0x30>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <SysTick_Handler+0x30>)
 8002ac4:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002ac6:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <SysTick_Handler+0x30>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d904      	bls.n	8002ada <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <SysTick_Handler+0x30>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002ad6:	f7ff ff9f 	bl	8002a18 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ada:	f000 fe83 	bl	80037e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000d80 	.word	0x20000d80

08002ae8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002aec:	2002      	movs	r0, #2
 8002aee:	f002 fedf 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002afa:	2004      	movs	r0, #4
 8002afc:	f002 fed8 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <DMA1_Channel1_IRQHandler+0x10>)
 8002b0a:	f002 fbdc 	bl	80052c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000f48 	.word	0x20000f48

08002b18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002b1c:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <DMA1_Channel2_IRQHandler+0x10>)
 8002b1e:	f002 fbd2 	bl	80052c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000fa8 	.word	0x20000fa8

08002b2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b30:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <DMA1_Channel3_IRQHandler+0x10>)
 8002b32:	f002 fbc8 	bl	80052c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000314 	.word	0x20000314

08002b40 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b44:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <DMA1_Channel4_IRQHandler+0x10>)
 8002b46:	f002 fbbe 	bl	80052c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20001008 	.word	0x20001008

08002b54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b58:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <DMA1_Channel5_IRQHandler+0x10>)
 8002b5a:	f002 fbb4 	bl	80052c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000374 	.word	0x20000374

08002b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b6c:	480d      	ldr	r0, [pc, #52]	@ (8002ba4 <TIM3_IRQHandler+0x3c>)
 8002b6e:	f005 fbad 	bl	80082cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if (compteur != 4){
 8002b72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <TIM3_IRQHandler+0x40>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d007      	beq.n	8002b8a <TIM3_IRQHandler+0x22>
	  flag_capteur = 1;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <TIM3_IRQHandler+0x44>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
	  compteur ++;
 8002b80:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <TIM3_IRQHandler+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <TIM3_IRQHandler+0x40>)
 8002b88:	6013      	str	r3, [r2, #0]
  }
  if (compteur==4){
 8002b8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <TIM3_IRQHandler+0x40>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d105      	bne.n	8002b9e <TIM3_IRQHandler+0x36>
	  flag_envoi = 1;
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <TIM3_IRQHandler+0x48>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
	  compteur = 0;
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <TIM3_IRQHandler+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000d88 	.word	0x20000d88
 8002ba8:	20000d74 	.word	0x20000d74
 8002bac:	20000d7c 	.word	0x20000d7c
 8002bb0:	20000d78 	.word	0x20000d78

08002bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bb8:	4802      	ldr	r0, [pc, #8]	@ (8002bc4 <USART1_IRQHandler+0x10>)
 8002bba:	f006 fe6b 	bl	8009894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000eb4 	.word	0x20000eb4

08002bc8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002bcc:	4802      	ldr	r0, [pc, #8]	@ (8002bd8 <LPUART1_IRQHandler+0x10>)
 8002bce:	f006 fe61 	bl	8009894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000e20 	.word	0x20000e20

08002bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <_kill>:

int _kill(int pid, int sig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bf6:	f00c f85d 	bl	800ecb4 <__errno>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2216      	movs	r2, #22
 8002bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_exit>:

void _exit (int status)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ffe7 	bl	8002bec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <_exit+0x12>

08002c22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e00a      	b.n	8002c4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c34:	f3af 8000 	nop.w
 8002c38:	4601      	mov	r1, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	60ba      	str	r2, [r7, #8]
 8002c40:	b2ca      	uxtb	r2, r1
 8002c42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3301      	adds	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	dbf0      	blt.n	8002c34 <_read+0x12>
  }

  return len;
 8002c52:	687b      	ldr	r3, [r7, #4]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e009      	b.n	8002c82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	60ba      	str	r2, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbf1      	blt.n	8002c6e <_write+0x12>
  }
  return len;
 8002c8a:	687b      	ldr	r3, [r7, #4]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_close>:

int _close(int file)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cbc:	605a      	str	r2, [r3, #4]
  return 0;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_isatty>:

int _isatty(int file)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	@ (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	@ (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f00b ffc2 	bl	800ecb4 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20008000 	.word	0x20008000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	20000d84 	.word	0x20000d84
 8002d64:	200014d0 	.word	0x200014d0

08002d68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <SystemInit+0x20>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	4a05      	ldr	r2, [pc, #20]	@ (8002d88 <SystemInit+0x20>)
 8002d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <Get_CRC8>:
		HAL_UART_Transmit(&hlpuart1,command,sizeof(command),500);
	}
}
//Calcule du CRC
uint8_t Get_CRC8(uint8_t * bufP, uint16_t len)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
uint8_t crc = 0x00;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	81bb      	strh	r3, [r7, #12]
 8002da0:	e009      	b.n	8002db6 <Get_CRC8+0x2a>
{
crc ^= bufP[i];
 8002da2:	89bb      	ldrh	r3, [r7, #12]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	4053      	eors	r3, r2
 8002dae:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8002db0:	89bb      	ldrh	r3, [r7, #12]
 8002db2:	3301      	adds	r3, #1
 8002db4:	81bb      	strh	r3, [r7, #12]
 8002db6:	89ba      	ldrh	r2, [r7, #12]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3f1      	bcc.n	8002da2 <Get_CRC8+0x16>
}
return crc;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <SEND_DATA_NETW>:

void SEND_DATA_NETW(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8002dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd0:	b088      	sub	sp, #32
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	72bb      	strb	r3, [r7, #10]
 8002de0:	466b      	mov	r3, sp
 8002de2:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	1d9e      	adds	r6, r3, #6
 8002de8:	1e73      	subs	r3, r6, #1
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	4632      	mov	r2, r6
 8002dee:	2300      	movs	r3, #0
 8002df0:	4690      	mov	r8, r2
 8002df2:	4699      	mov	r9, r3
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e08:	4632      	mov	r2, r6
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	461d      	mov	r5, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	00eb      	lsls	r3, r5, #3
 8002e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1e:	00e2      	lsls	r2, r4, #3
 8002e20:	4633      	mov	r3, r6
 8002e22:	3307      	adds	r3, #7
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	ebad 0d03 	sub.w	sp, sp, r3
 8002e2c:	466b      	mov	r3, sp
 8002e2e:	3300      	adds	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2202      	movs	r2, #2
 8002e36:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3302      	adds	r3, #2
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	7afa      	ldrb	r2, [r7, #11]
 8002e4e:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	7aba      	ldrb	r2, [r7, #10]
 8002e54:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8002e56:	2300      	movs	r3, #0
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e00a      	b.n	8002e72 <SEND_DATA_NETW+0xa6>
        trame[5 + i] = data[i];
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	441a      	add	r2, r3
 8002e62:	7ffb      	ldrb	r3, [r7, #31]
 8002e64:	3305      	adds	r3, #5
 8002e66:	7811      	ldrb	r1, [r2, #0]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8002e6c:	7ffb      	ldrb	r3, [r7, #31]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dcf0      	bgt.n	8002e5c <SEND_DATA_NETW+0x90>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3305      	adds	r3, #5
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1d5c      	adds	r4, r3, #5
 8002e86:	4611      	mov	r1, r2
 8002e88:	6978      	ldr	r0, [r7, #20]
 8002e8a:	f7ff ff7f 	bl	8002d8c <Get_CRC8>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 8002e96:	b2b2      	uxth	r2, r6
 8002e98:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e9c:	6979      	ldr	r1, [r7, #20]
 8002e9e:	4804      	ldr	r0, [pc, #16]	@ (8002eb0 <SEND_DATA_NETW+0xe4>)
 8002ea0:	f006 fb10 	bl	80094c4 <HAL_UART_Transmit>
 8002ea4:	46d5      	mov	sp, sl
}
 8002ea6:	bf00      	nop
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb0:	20000e20 	.word	0x20000e20

08002eb4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	@ 0x38
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
 8002ee0:	611a      	str	r2, [r3, #16]
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa0 <MX_TIM3_Init+0xec>)
 8002eea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 44;
 8002eec:	4b2b      	ldr	r3, [pc, #172]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002eee:	222c      	movs	r2, #44	@ 0x2c
 8002ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002ef8:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002efa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f00:	4b26      	ldr	r3, [pc, #152]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f06:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f0c:	4823      	ldr	r0, [pc, #140]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f0e:	f005 f825 	bl	8007f5c <HAL_TIM_Base_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f18:	f7ff fcd4 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f26:	4619      	mov	r1, r3
 8002f28:	481c      	ldr	r0, [pc, #112]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f2a:	f005 fc33 	bl	8008794 <HAL_TIM_ConfigClockSource>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f34:	f7ff fcc6 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f38:	4818      	ldr	r0, [pc, #96]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f3a:	f005 f866 	bl	800800a <HAL_TIM_PWM_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f44:	f7ff fcbe 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	4619      	mov	r1, r3
 8002f56:	4811      	ldr	r0, [pc, #68]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f58:	f006 f99c 	bl	8009294 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f62:	f7ff fcaf 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f66:	2360      	movs	r3, #96	@ 0x60
 8002f68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f76:	463b      	mov	r3, r7
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4807      	ldr	r0, [pc, #28]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f7e:	f005 faf5 	bl	800856c <HAL_TIM_PWM_ConfigChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f88:	f7ff fc9c 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f8c:	4803      	ldr	r0, [pc, #12]	@ (8002f9c <MX_TIM3_Init+0xe8>)
 8002f8e:	f000 f891 	bl	80030b4 <HAL_TIM_MspPostInit>

}
 8002f92:	bf00      	nop
 8002f94:	3738      	adds	r7, #56	@ 0x38
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000d88 	.word	0x20000d88
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002faa:	f107 0310 	add.w	r3, r7, #16
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <MX_TIM4_Init+0x94>)
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <MX_TIM4_Init+0x98>)
 8002fc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000-1;
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <MX_TIM4_Init+0x94>)
 8002fca:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8002fce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd0:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <MX_TIM4_Init+0x94>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002fd6:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <MX_TIM4_Init+0x94>)
 8002fd8:	2263      	movs	r2, #99	@ 0x63
 8002fda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <MX_TIM4_Init+0x94>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <MX_TIM4_Init+0x94>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fe8:	4813      	ldr	r0, [pc, #76]	@ (8003038 <MX_TIM4_Init+0x94>)
 8002fea:	f004 ffb7 	bl	8007f5c <HAL_TIM_Base_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ff4:	f7ff fc66 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ffe:	f107 0310 	add.w	r3, r7, #16
 8003002:	4619      	mov	r1, r3
 8003004:	480c      	ldr	r0, [pc, #48]	@ (8003038 <MX_TIM4_Init+0x94>)
 8003006:	f005 fbc5 	bl	8008794 <HAL_TIM_ConfigClockSource>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003010:	f7ff fc58 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003014:	2320      	movs	r3, #32
 8003016:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4805      	ldr	r0, [pc, #20]	@ (8003038 <MX_TIM4_Init+0x94>)
 8003022:	f006 f937 	bl	8009294 <HAL_TIMEx_MasterConfigSynchronization>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800302c:	f7ff fc4a 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000dd4 	.word	0x20000dd4
 800303c:	40000800 	.word	0x40000800

08003040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <HAL_TIM_Base_MspInit+0x68>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d114      	bne.n	800307c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003052:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <HAL_TIM_Base_MspInit+0x6c>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	4a15      	ldr	r2, [pc, #84]	@ (80030ac <HAL_TIM_Base_MspInit+0x6c>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	6593      	str	r3, [r2, #88]	@ 0x58
 800305e:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <HAL_TIM_Base_MspInit+0x6c>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	201d      	movs	r0, #29
 8003070:	f001 ff11 	bl	8004e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003074:	201d      	movs	r0, #29
 8003076:	f001 ff28 	bl	8004eca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800307a:	e010      	b.n	800309e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0b      	ldr	r2, [pc, #44]	@ (80030b0 <HAL_TIM_Base_MspInit+0x70>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10b      	bne.n	800309e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_TIM_Base_MspInit+0x6c>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308a:	4a08      	ldr	r2, [pc, #32]	@ (80030ac <HAL_TIM_Base_MspInit+0x6c>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6593      	str	r3, [r2, #88]	@ 0x58
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_TIM_Base_MspInit+0x6c>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40000800 	.word	0x40000800

080030b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a11      	ldr	r2, [pc, #68]	@ (8003118 <HAL_TIM_MspPostInit+0x64>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11b      	bne.n	800310e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_TIM_MspPostInit+0x68>)
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	4a10      	ldr	r2, [pc, #64]	@ (800311c <HAL_TIM_MspPostInit+0x68>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030e2:	4b0e      	ldr	r3, [pc, #56]	@ (800311c <HAL_TIM_MspPostInit+0x68>)
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030ee:	2340      	movs	r3, #64	@ 0x40
 80030f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030fe:	2302      	movs	r3, #2
 8003100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	4619      	mov	r1, r3
 8003108:	4805      	ldr	r0, [pc, #20]	@ (8003120 <HAL_TIM_MspPostInit+0x6c>)
 800310a:	f002 fa37 	bl	800557c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800310e:	bf00      	nop
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40000400 	.word	0x40000400
 800311c:	40021000 	.word	0x40021000
 8003120:	48000800 	.word	0x48000800

08003124 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003128:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 800312a:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <MX_LPUART1_UART_Init+0x90>)
 800312c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800312e:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 8003130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003134:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003136:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800313c:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003142:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003148:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 800314a:	220c      	movs	r2, #12
 800314c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314e:	4b18      	ldr	r3, [pc, #96]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003154:	4b16      	ldr	r3, [pc, #88]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 8003156:	2200      	movs	r2, #0
 8003158:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 800315c:	2200      	movs	r2, #0
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003160:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 8003162:	2200      	movs	r2, #0
 8003164:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003166:	4812      	ldr	r0, [pc, #72]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 8003168:	f006 f95c 	bl	8009424 <HAL_UART_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003172:	f7ff fba7 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003176:	2100      	movs	r1, #0
 8003178:	480d      	ldr	r0, [pc, #52]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 800317a:	f007 fe53 	bl	800ae24 <HAL_UARTEx_SetTxFifoThreshold>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003184:	f7ff fb9e 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003188:	2100      	movs	r1, #0
 800318a:	4809      	ldr	r0, [pc, #36]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 800318c:	f007 fe88 	bl	800aea0 <HAL_UARTEx_SetRxFifoThreshold>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003196:	f7ff fb95 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800319a:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <MX_LPUART1_UART_Init+0x8c>)
 800319c:	f007 fe09 	bl	800adb2 <HAL_UARTEx_DisableFifoMode>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80031a6:	f7ff fb8d 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000e20 	.word	0x20000e20
 80031b4:	40008000 	.word	0x40008000

080031b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031be:	4a23      	ldr	r2, [pc, #140]	@ (800324c <MX_USART1_UART_Init+0x94>)
 80031c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80031c2:	4b21      	ldr	r3, [pc, #132]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80031c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031de:	220c      	movs	r2, #12
 80031e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e2:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e8:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031fa:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003200:	4811      	ldr	r0, [pc, #68]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 8003202:	f006 f90f 	bl	8009424 <HAL_UART_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800320c:	f7ff fb5a 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003210:	2100      	movs	r1, #0
 8003212:	480d      	ldr	r0, [pc, #52]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 8003214:	f007 fe06 	bl	800ae24 <HAL_UARTEx_SetTxFifoThreshold>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800321e:	f7ff fb51 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003222:	2100      	movs	r1, #0
 8003224:	4808      	ldr	r0, [pc, #32]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 8003226:	f007 fe3b 	bl	800aea0 <HAL_UARTEx_SetRxFifoThreshold>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003230:	f7ff fb48 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <MX_USART1_UART_Init+0x90>)
 8003236:	f007 fdbc 	bl	800adb2 <HAL_UARTEx_DisableFifoMode>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003240:	f7ff fb40 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000eb4 	.word	0x20000eb4
 800324c:	40013800 	.word	0x40013800

08003250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b09e      	sub	sp, #120	@ 0x78
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003268:	f107 0320 	add.w	r3, r7, #32
 800326c:	2244      	movs	r2, #68	@ 0x44
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f00b fd03 	bl	800ec7c <memset>
  if(uartHandle->Instance==LPUART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a92      	ldr	r2, [pc, #584]	@ (80034c4 <HAL_UART_MspInit+0x274>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 80b0 	bne.w	80033e2 <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003282:	2320      	movs	r3, #32
 8003284:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003286:	2300      	movs	r3, #0
 8003288:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800328a:	f107 0320 	add.w	r3, r7, #32
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fec2 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800329a:	f7ff fb13 	bl	80028c4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800329e:	4b8a      	ldr	r3, [pc, #552]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	4a89      	ldr	r2, [pc, #548]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80032aa:	4b87      	ldr	r3, [pc, #540]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b6:	4b84      	ldr	r3, [pc, #528]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ba:	4a83      	ldr	r2, [pc, #524]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c2:	4b81      	ldr	r3, [pc, #516]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ce:	4b7e      	ldr	r3, [pc, #504]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	4a7d      	ldr	r2, [pc, #500]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032da:	4b7b      	ldr	r3, [pc, #492]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032e6:	2308      	movs	r3, #8
 80032e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f2:	2300      	movs	r3, #0
 80032f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80032f6:	230c      	movs	r3, #12
 80032f8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032fe:	4619      	mov	r1, r3
 8003300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003304:	f002 f93a 	bl	800557c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003308:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800330c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800331a:	2308      	movs	r3, #8
 800331c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003322:	4619      	mov	r1, r3
 8003324:	4869      	ldr	r0, [pc, #420]	@ (80034cc <HAL_UART_MspInit+0x27c>)
 8003326:	f002 f929 	bl	800557c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800332a:	4b69      	ldr	r3, [pc, #420]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 800332c:	4a69      	ldr	r2, [pc, #420]	@ (80034d4 <HAL_UART_MspInit+0x284>)
 800332e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003330:	4b67      	ldr	r3, [pc, #412]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 8003332:	2222      	movs	r2, #34	@ 0x22
 8003334:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003336:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333c:	4b64      	ldr	r3, [pc, #400]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003342:	4b63      	ldr	r3, [pc, #396]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 8003344:	2280      	movs	r2, #128	@ 0x80
 8003346:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003348:	4b61      	ldr	r3, [pc, #388]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 800334a:	2200      	movs	r2, #0
 800334c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800334e:	4b60      	ldr	r3, [pc, #384]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003354:	4b5e      	ldr	r3, [pc, #376]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 8003356:	2200      	movs	r2, #0
 8003358:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800335a:	4b5d      	ldr	r3, [pc, #372]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003360:	485b      	ldr	r0, [pc, #364]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 8003362:	f001 fdcd 	bl	8004f00 <HAL_DMA_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 800336c:	f7ff faaa 	bl	80028c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a57      	ldr	r2, [pc, #348]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 8003374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003378:	4a55      	ldr	r2, [pc, #340]	@ (80034d0 <HAL_UART_MspInit+0x280>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800337e:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 8003380:	4a56      	ldr	r2, [pc, #344]	@ (80034dc <HAL_UART_MspInit+0x28c>)
 8003382:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003384:	4b54      	ldr	r3, [pc, #336]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 8003386:	2223      	movs	r2, #35	@ 0x23
 8003388:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800338a:	4b53      	ldr	r3, [pc, #332]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 800338c:	2210      	movs	r2, #16
 800338e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003390:	4b51      	ldr	r3, [pc, #324]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 8003392:	2200      	movs	r2, #0
 8003394:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003396:	4b50      	ldr	r3, [pc, #320]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 8003398:	2280      	movs	r2, #128	@ 0x80
 800339a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800339c:	4b4e      	ldr	r3, [pc, #312]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 800339e:	2200      	movs	r2, #0
 80033a0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a2:	4b4d      	ldr	r3, [pc, #308]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80033a8:	4b4b      	ldr	r3, [pc, #300]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ae:	4b4a      	ldr	r3, [pc, #296]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80033b4:	4848      	ldr	r0, [pc, #288]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 80033b6:	f001 fda3 	bl	8004f00 <HAL_DMA_Init>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 80033c0:	f7ff fa80 	bl	80028c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a44      	ldr	r2, [pc, #272]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 80033c8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80033ca:	4a43      	ldr	r2, [pc, #268]	@ (80034d8 <HAL_UART_MspInit+0x288>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	205b      	movs	r0, #91	@ 0x5b
 80033d6:	f001 fd5e 	bl	8004e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80033da:	205b      	movs	r0, #91	@ 0x5b
 80033dc:	f001 fd75 	bl	8004eca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80033e0:	e06c      	b.n	80034bc <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a3e      	ldr	r2, [pc, #248]	@ (80034e0 <HAL_UART_MspInit+0x290>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d167      	bne.n	80034bc <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033ec:	2301      	movs	r3, #1
 80033ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80033f0:	2302      	movs	r3, #2
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f4:	f107 0320 	add.w	r3, r7, #32
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 fe0d 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8003404:	f7ff fa5e 	bl	80028c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003408:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 800340a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340c:	4a2e      	ldr	r2, [pc, #184]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 800340e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003412:	6613      	str	r3, [r2, #96]	@ 0x60
 8003414:	4b2c      	ldr	r3, [pc, #176]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 8003416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003420:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 8003422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003424:	4a28      	ldr	r2, [pc, #160]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 8003426:	f043 0302 	orr.w	r3, r3, #2
 800342a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800342c:	4b26      	ldr	r3, [pc, #152]	@ (80034c8 <HAL_UART_MspInit+0x278>)
 800342e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003438:	23c0      	movs	r3, #192	@ 0xc0
 800343a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	2300      	movs	r3, #0
 8003446:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003448:	2307      	movs	r3, #7
 800344a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003450:	4619      	mov	r1, r3
 8003452:	481e      	ldr	r0, [pc, #120]	@ (80034cc <HAL_UART_MspInit+0x27c>)
 8003454:	f002 f892 	bl	800557c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8003458:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 800345a:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <HAL_UART_MspInit+0x298>)
 800345c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800345e:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 8003460:	2218      	movs	r2, #24
 8003462:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003464:	4b1f      	ldr	r3, [pc, #124]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346a:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 800346c:	2200      	movs	r2, #0
 800346e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003470:	4b1c      	ldr	r3, [pc, #112]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 8003472:	2280      	movs	r2, #128	@ 0x80
 8003474:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003476:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800347c:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 800347e:	2200      	movs	r2, #0
 8003480:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003482:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 8003484:	2220      	movs	r2, #32
 8003486:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003488:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 800348a:	2200      	movs	r2, #0
 800348c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800348e:	4815      	ldr	r0, [pc, #84]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 8003490:	f001 fd36 	bl	8004f00 <HAL_DMA_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800349a:	f7ff fa13 	bl	80028c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 80034a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034a6:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <HAL_UART_MspInit+0x294>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	2025      	movs	r0, #37	@ 0x25
 80034b2:	f001 fcf0 	bl	8004e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034b6:	2025      	movs	r0, #37	@ 0x25
 80034b8:	f001 fd07 	bl	8004eca <HAL_NVIC_EnableIRQ>
}
 80034bc:	bf00      	nop
 80034be:	3778      	adds	r7, #120	@ 0x78
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40008000 	.word	0x40008000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	48000400 	.word	0x48000400
 80034d0:	20000f48 	.word	0x20000f48
 80034d4:	40020008 	.word	0x40020008
 80034d8:	20000fa8 	.word	0x20000fa8
 80034dc:	4002001c 	.word	0x4002001c
 80034e0:	40013800 	.word	0x40013800
 80034e4:	20001008 	.word	0x20001008
 80034e8:	40020044 	.word	0x40020044

080034ec <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a43      	ldr	r2, [pc, #268]	@ (8003608 <HAL_UART_RxCpltCallback+0x11c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d15b      	bne.n	80035b6 <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 80034fe:	4b43      	ldr	r3, [pc, #268]	@ (800360c <HAL_UART_RxCpltCallback+0x120>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a43      	ldr	r2, [pc, #268]	@ (8003610 <HAL_UART_RxCpltCallback+0x124>)
 8003504:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8003506:	4b42      	ldr	r3, [pc, #264]	@ (8003610 <HAL_UART_RxCpltCallback+0x124>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800350e:	dd22      	ble.n	8003556 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 8003510:	4b3f      	ldr	r3, [pc, #252]	@ (8003610 <HAL_UART_RxCpltCallback+0x124>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800351a:	817b      	strh	r3, [r7, #10]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 800351c:	4b3c      	ldr	r3, [pc, #240]	@ (8003610 <HAL_UART_RxCpltCallback+0x124>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b3c      	ldr	r3, [pc, #240]	@ (8003614 <HAL_UART_RxCpltCallback+0x128>)
 8003524:	4413      	add	r3, r2
 8003526:	897a      	ldrh	r2, [r7, #10]
 8003528:	493b      	ldr	r1, [pc, #236]	@ (8003618 <HAL_UART_RxCpltCallback+0x12c>)
 800352a:	4618      	mov	r0, r3
 800352c:	f00b fbef 	bl	800ed0e <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 8003530:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_UART_RxCpltCallback+0x124>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	4a37      	ldr	r2, [pc, #220]	@ (8003618 <HAL_UART_RxCpltCallback+0x12c>)
 800353a:	1899      	adds	r1, r3, r2
 800353c:	897b      	ldrh	r3, [r7, #10]
 800353e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003542:	461a      	mov	r2, r3
 8003544:	4833      	ldr	r0, [pc, #204]	@ (8003614 <HAL_UART_RxCpltCallback+0x128>)
 8003546:	f00b fbe2 	bl	800ed0e <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003550:	4a2e      	ldr	r2, [pc, #184]	@ (800360c <HAL_UART_RxCpltCallback+0x120>)
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e01d      	b.n	8003592 <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 8003556:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <HAL_UART_RxCpltCallback+0x124>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <HAL_UART_RxCpltCallback+0x128>)
 800355e:	441a      	add	r2, r3
 8003560:	4b2d      	ldr	r3, [pc, #180]	@ (8003618 <HAL_UART_RxCpltCallback+0x12c>)
 8003562:	4610      	mov	r0, r2
 8003564:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8003568:	4602      	mov	r2, r0
 800356a:	4619      	mov	r1, r3
 800356c:	f8d1 c000 	ldr.w	ip, [r1]
 8003570:	684e      	ldr	r6, [r1, #4]
 8003572:	688d      	ldr	r5, [r1, #8]
 8003574:	68c9      	ldr	r1, [r1, #12]
 8003576:	f8c2 c000 	str.w	ip, [r2]
 800357a:	6056      	str	r6, [r2, #4]
 800357c:	6095      	str	r5, [r2, #8]
 800357e:	60d1      	str	r1, [r2, #12]
 8003580:	3310      	adds	r3, #16
 8003582:	3010      	adds	r0, #16
 8003584:	42a3      	cmp	r3, r4
 8003586:	d1ef      	bne.n	8003568 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 8003588:	4b21      	ldr	r3, [pc, #132]	@ (8003610 <HAL_UART_RxCpltCallback+0x124>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3340      	adds	r3, #64	@ 0x40
 800358e:	4a1f      	ldr	r2, [pc, #124]	@ (800360c <HAL_UART_RxCpltCallback+0x120>)
 8003590:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8003592:	2240      	movs	r2, #64	@ 0x40
 8003594:	4920      	ldr	r1, [pc, #128]	@ (8003618 <HAL_UART_RxCpltCallback+0x12c>)
 8003596:	4821      	ldr	r0, [pc, #132]	@ (800361c <HAL_UART_RxCpltCallback+0x130>)
 8003598:	f006 f822 	bl	80095e0 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800359c:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <HAL_UART_RxCpltCallback+0x134>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <HAL_UART_RxCpltCallback+0x134>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 80035ac:	2240      	movs	r2, #64	@ 0x40
 80035ae:	491a      	ldr	r1, [pc, #104]	@ (8003618 <HAL_UART_RxCpltCallback+0x12c>)
 80035b0:	481a      	ldr	r0, [pc, #104]	@ (800361c <HAL_UART_RxCpltCallback+0x130>)
 80035b2:	f006 f815 	bl	80095e0 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_UART_RxCpltCallback+0x138>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d11f      	bne.n	8003600 <HAL_UART_RxCpltCallback+0x114>
			for(int i=0;i<TarvosRxTamponSize;i++){
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e014      	b.n	80035f0 <HAL_UART_RxCpltCallback+0x104>
				if (tarvos_RX_Tampon[i] == 0x02){
 80035c6:	4a18      	ldr	r2, [pc, #96]	@ (8003628 <HAL_UART_RxCpltCallback+0x13c>)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d10b      	bne.n	80035ea <HAL_UART_RxCpltCallback+0xfe>
					memcpy((uint8_t *)tarvos_RX_Buffer,(uint8_t *) tarvos_RX_Tampon + i, (int)tarvos_RX_Tampon[i+2]+4); //copy received data to the buffer
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <HAL_UART_RxCpltCallback+0x13c>)
 80035d6:	1899      	adds	r1, r3, r2
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3302      	adds	r3, #2
 80035dc:	4a12      	ldr	r2, [pc, #72]	@ (8003628 <HAL_UART_RxCpltCallback+0x13c>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	3304      	adds	r3, #4
 80035e2:	461a      	mov	r2, r3
 80035e4:	4811      	ldr	r0, [pc, #68]	@ (800362c <HAL_UART_RxCpltCallback+0x140>)
 80035e6:	f00b fb92 	bl	800ed0e <memcpy>
			for(int i=0;i<TarvosRxTamponSize;i++){
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3301      	adds	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	dde7      	ble.n	80035c6 <HAL_UART_RxCpltCallback+0xda>
				}
			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 80035f6:	2208      	movs	r2, #8
 80035f8:	490b      	ldr	r1, [pc, #44]	@ (8003628 <HAL_UART_RxCpltCallback+0x13c>)
 80035fa:	480d      	ldr	r0, [pc, #52]	@ (8003630 <HAL_UART_RxCpltCallback+0x144>)
 80035fc:	f005 fff0 	bl	80095e0 <HAL_UART_Receive_DMA>
	}
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003608:	40013800 	.word	0x40013800
 800360c:	20000c4c 	.word	0x20000c4c
 8003610:	20000c48 	.word	0x20000c48
 8003614:	20000a08 	.word	0x20000a08
 8003618:	20000c08 	.word	0x20000c08
 800361c:	20000eb4 	.word	0x20000eb4
 8003620:	20001008 	.word	0x20001008
 8003624:	40008000 	.word	0x40008000
 8003628:	20000a00 	.word	0x20000a00
 800362c:	20000900 	.word	0x20000900
 8003630:	20000e20 	.word	0x20000e20

08003634 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <MX_USB_PCD_Init+0x48>)
 800363a:	4a11      	ldr	r2, [pc, #68]	@ (8003680 <MX_USB_PCD_Init+0x4c>)
 800363c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800363e:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <MX_USB_PCD_Init+0x48>)
 8003640:	2208      	movs	r2, #8
 8003642:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <MX_USB_PCD_Init+0x48>)
 8003646:	2202      	movs	r2, #2
 8003648:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <MX_USB_PCD_Init+0x48>)
 800364c:	2202      	movs	r2, #2
 800364e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003650:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <MX_USB_PCD_Init+0x48>)
 8003652:	2200      	movs	r2, #0
 8003654:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <MX_USB_PCD_Init+0x48>)
 8003658:	2200      	movs	r2, #0
 800365a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800365c:	4b07      	ldr	r3, [pc, #28]	@ (800367c <MX_USB_PCD_Init+0x48>)
 800365e:	2200      	movs	r2, #0
 8003660:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <MX_USB_PCD_Init+0x48>)
 8003664:	2200      	movs	r2, #0
 8003666:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003668:	4804      	ldr	r0, [pc, #16]	@ (800367c <MX_USB_PCD_Init+0x48>)
 800366a:	f002 fdfe 	bl	800626a <HAL_PCD_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003674:	f7ff f926 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20001068 	.word	0x20001068
 8003680:	40005c00 	.word	0x40005c00

08003684 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b094      	sub	sp, #80	@ 0x50
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	2244      	movs	r2, #68	@ 0x44
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f00b faf1 	bl	800ec7c <memset>
  if(pcdHandle->Instance==USB)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a11      	ldr	r2, [pc, #68]	@ (80036e4 <HAL_PCD_MspInit+0x60>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d11a      	bne.n	80036da <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80036aa:	2300      	movs	r3, #0
 80036ac:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fcb0 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80036be:	f7ff f901 	bl	80028c4 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_PCD_MspInit+0x64>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c6:	4a08      	ldr	r2, [pc, #32]	@ (80036e8 <HAL_PCD_MspInit+0x64>)
 80036c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_PCD_MspInit+0x64>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80036da:	bf00      	nop
 80036dc:	3750      	adds	r7, #80	@ 0x50
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40005c00 	.word	0x40005c00
 80036e8:	40021000 	.word	0x40021000

080036ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036ec:	480d      	ldr	r0, [pc, #52]	@ (8003724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80036f0:	f7ff fb3a 	bl	8002d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036f4:	480c      	ldr	r0, [pc, #48]	@ (8003728 <LoopForever+0x6>)
  ldr r1, =_edata
 80036f6:	490d      	ldr	r1, [pc, #52]	@ (800372c <LoopForever+0xa>)
  ldr r2, =_sidata
 80036f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003730 <LoopForever+0xe>)
  movs r3, #0
 80036fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036fc:	e002      	b.n	8003704 <LoopCopyDataInit>

080036fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003702:	3304      	adds	r3, #4

08003704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003708:	d3f9      	bcc.n	80036fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800370a:	4a0a      	ldr	r2, [pc, #40]	@ (8003734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800370c:	4c0a      	ldr	r4, [pc, #40]	@ (8003738 <LoopForever+0x16>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003710:	e001      	b.n	8003716 <LoopFillZerobss>

08003712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003714:	3204      	adds	r2, #4

08003716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003718:	d3fb      	bcc.n	8003712 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800371a:	f00b fad1 	bl	800ecc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800371e:	f7fe ffc7 	bl	80026b0 <main>

08003722 <LoopForever>:

LoopForever:
    b LoopForever
 8003722:	e7fe      	b.n	8003722 <LoopForever>
  ldr   r0, =_estack
 8003724:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800372c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003730:	08011b88 	.word	0x08011b88
  ldr r2, =_sbss
 8003734:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003738:	200014d0 	.word	0x200014d0

0800373c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800373c:	e7fe      	b.n	800373c <ADC1_2_IRQHandler>

0800373e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003748:	2003      	movs	r0, #3
 800374a:	f001 fb99 	bl	8004e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800374e:	200f      	movs	r0, #15
 8003750:	f000 f80e 	bl	8003770 <HAL_InitTick>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	71fb      	strb	r3, [r7, #7]
 800375e:	e001      	b.n	8003764 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003760:	f7ff f936 	bl	80029d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003764:	79fb      	ldrb	r3, [r7, #7]

}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800377c:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <HAL_InitTick+0x68>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d022      	beq.n	80037ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003784:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <HAL_InitTick+0x6c>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <HAL_InitTick+0x68>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003790:	fbb1 f3f3 	udiv	r3, r1, r3
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fba4 	bl	8004ee6 <HAL_SYSTICK_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d809      	bhi.n	80037be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037aa:	2200      	movs	r2, #0
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037b2:	f001 fb70 	bl	8004e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037b6:	4a0a      	ldr	r2, [pc, #40]	@ (80037e0 <HAL_InitTick+0x70>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e007      	b.n	80037ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e004      	b.n	80037ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e001      	b.n	80037ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000014 	.word	0x20000014
 80037dc:	2000000c 	.word	0x2000000c
 80037e0:	20000010 	.word	0x20000010

080037e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_IncTick+0x1c>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <HAL_IncTick+0x20>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	4a03      	ldr	r2, [pc, #12]	@ (8003800 <HAL_IncTick+0x1c>)
 80037f4:	6013      	str	r3, [r2, #0]
}
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	20001344 	.word	0x20001344
 8003804:	20000014 	.word	0x20000014

08003808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return uwTick;
 800380c:	4b03      	ldr	r3, [pc, #12]	@ (800381c <HAL_GetTick+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20001344 	.word	0x20001344

08003820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff ffee 	bl	8003808 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003838:	d004      	beq.n	8003844 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_Delay+0x40>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003844:	bf00      	nop
 8003846:	f7ff ffdf 	bl	8003808 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	429a      	cmp	r2, r3
 8003854:	d8f7      	bhi.n	8003846 <HAL_Delay+0x26>
  {
  }
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000014 	.word	0x20000014

08003864 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	609a      	str	r2, [r3, #8]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3360      	adds	r3, #96	@ 0x60
 80038de:	461a      	mov	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <LL_ADC_SetOffset+0x44>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	03fff000 	.word	0x03fff000

08003914 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3360      	adds	r3, #96	@ 0x60
 8003922:	461a      	mov	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3360      	adds	r3, #96	@ 0x60
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003976:	b480      	push	{r7}
 8003978:	b087      	sub	sp, #28
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3360      	adds	r3, #96	@ 0x60
 8003986:	461a      	mov	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	431a      	orrs	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3360      	adds	r3, #96	@ 0x60
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	615a      	str	r2, [r3, #20]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b087      	sub	sp, #28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3330      	adds	r3, #48	@ 0x30
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	4413      	add	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	211f      	movs	r1, #31
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	401a      	ands	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	f003 011f 	and.w	r1, r3, #31
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	431a      	orrs	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3314      	adds	r3, #20
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	0e5b      	lsrs	r3, r3, #25
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	0d1b      	lsrs	r3, r3, #20
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	2107      	movs	r1, #7
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0d1b      	lsrs	r3, r3, #20
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	431a      	orrs	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af4:	43db      	mvns	r3, r3
 8003af6:	401a      	ands	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f003 0318 	and.w	r3, r3, #24
 8003afe:	4908      	ldr	r1, [pc, #32]	@ (8003b20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b00:	40d9      	lsrs	r1, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	400b      	ands	r3, r1
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	0007ffff 	.word	0x0007ffff

08003b24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 031f 	and.w	r3, r3, #31
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6093      	str	r3, [r2, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b78:	d101      	bne.n	8003b7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ba0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bc8:	d101      	bne.n	8003bce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bf0:	f043 0201 	orr.w	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <LL_ADC_IsEnabled+0x18>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <LL_ADC_IsEnabled+0x1a>
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c3e:	f043 0204 	orr.w	r2, r3, #4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d101      	bne.n	8003c6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d101      	bne.n	8003c90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b089      	sub	sp, #36	@ 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e167      	b.n	8003f8a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fd fbc9 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff3f 	bl	8003b64 <LL_ADC_IsDeepPowerDownEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff25 	bl	8003b40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff5a 	bl	8003bb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d115      	bne.n	8003d32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff3e 	bl	8003b8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d10:	4ba0      	ldr	r3, [pc, #640]	@ (8003f94 <HAL_ADC_Init+0x2f4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	4aa0      	ldr	r2, [pc, #640]	@ (8003f98 <HAL_ADC_Init+0x2f8>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d24:	e002      	b.n	8003d2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f9      	bne.n	8003d26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff3c 	bl	8003bb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff75 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003d68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 8100 	bne.w	8003f78 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 80fc 	bne.w	8003f78 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d88:	f043 0202 	orr.w	r2, r3, #2
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff ff35 	bl	8003c04 <LL_ADC_IsEnabled>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d111      	bne.n	8003dc4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003da0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003da4:	f7ff ff2e 	bl	8003c04 <LL_ADC_IsEnabled>
 8003da8:	4604      	mov	r4, r0
 8003daa:	487c      	ldr	r0, [pc, #496]	@ (8003f9c <HAL_ADC_Init+0x2fc>)
 8003dac:	f7ff ff2a 	bl	8003c04 <LL_ADC_IsEnabled>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4323      	orrs	r3, r4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4878      	ldr	r0, [pc, #480]	@ (8003fa0 <HAL_ADC_Init+0x300>)
 8003dc0:	f7ff fd50 	bl	8003864 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	7f5b      	ldrb	r3, [r3, #29]
 8003dc8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003dd4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dda:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d106      	bne.n	8003e00 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	3b01      	subs	r3, #1
 8003df8:	045b      	lsls	r3, r3, #17
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	4b60      	ldr	r3, [pc, #384]	@ (8003fa4 <HAL_ADC_Init+0x304>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff14 	bl	8003c78 <LL_ADC_INJ_IsConversionOngoing>
 8003e50:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d16d      	bne.n	8003f34 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d16a      	bne.n	8003f34 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e62:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e6a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e7a:	f023 0302 	bic.w	r3, r3, #2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	69b9      	ldr	r1, [r7, #24]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d017      	beq.n	8003ec0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ea8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6911      	ldr	r1, [r2, #16]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003ebe:	e013      	b.n	8003ee8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ece:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ee4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d118      	bne.n	8003f24 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f0e:	4311      	orrs	r1, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f14:	430a      	orrs	r2, r1
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	611a      	str	r2, [r3, #16]
 8003f22:	e007      	b.n	8003f34 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10c      	bne.n	8003f56 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	f023 010f 	bic.w	r1, r3, #15
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f54:	e007      	b.n	8003f66 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 020f 	bic.w	r2, r2, #15
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f76:	e007      	b.n	8003f88 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	f043 0210 	orr.w	r2, r3, #16
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3724      	adds	r7, #36	@ 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd90      	pop	{r4, r7, pc}
 8003f92:	bf00      	nop
 8003f94:	2000000c 	.word	0x2000000c
 8003f98:	053e2d63 	.word	0x053e2d63
 8003f9c:	50000100 	.word	0x50000100
 8003fa0:	50000300 	.word	0x50000300
 8003fa4:	fff04007 	.word	0xfff04007

08003fa8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fb4:	4851      	ldr	r0, [pc, #324]	@ (80040fc <HAL_ADC_Start_DMA+0x154>)
 8003fb6:	f7ff fdb5 	bl	8003b24 <LL_ADC_GetMultimode>
 8003fba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fe46 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 808f 	bne.w	80040ec <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_ADC_Start_DMA+0x34>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e08a      	b.n	80040f2 <HAL_ADC_Start_DMA+0x14a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d002      	beq.n	8003ff6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b09      	cmp	r3, #9
 8003ff4:	d173      	bne.n	80040de <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fc8e 	bl	8004918 <ADC_Enable>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d166      	bne.n	80040d4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a38      	ldr	r2, [pc, #224]	@ (8004100 <HAL_ADC_Start_DMA+0x158>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d002      	beq.n	800402a <HAL_ADC_Start_DMA+0x82>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	e001      	b.n	800402e <HAL_ADC_Start_DMA+0x86>
 800402a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	4293      	cmp	r3, r2
 8004034:	d002      	beq.n	800403c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004058:	f023 0206 	bic.w	r2, r3, #6
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004060:	e002      	b.n	8004068 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	4a25      	ldr	r2, [pc, #148]	@ (8004104 <HAL_ADC_Start_DMA+0x15c>)
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	4a24      	ldr	r2, [pc, #144]	@ (8004108 <HAL_ADC_Start_DMA+0x160>)
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	4a23      	ldr	r2, [pc, #140]	@ (800410c <HAL_ADC_Start_DMA+0x164>)
 800407e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	221c      	movs	r2, #28
 8004086:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0210 	orr.w	r2, r2, #16
 800409e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3340      	adds	r3, #64	@ 0x40
 80040ba:	4619      	mov	r1, r3
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f000 ffc6 	bl	8005050 <HAL_DMA_Start_IT>
 80040c4:	4603      	mov	r3, r0
 80040c6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fdac 	bl	8003c2a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80040d2:	e00d      	b.n	80040f0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80040dc:	e008      	b.n	80040f0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80040ea:	e001      	b.n	80040f0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
 80040ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	50000300 	.word	0x50000300
 8004100:	50000100 	.word	0x50000100
 8004104:	08004a25 	.word	0x08004a25
 8004108:	08004afd 	.word	0x08004afd
 800410c:	08004b19 	.word	0x08004b19

08004110 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b0b6      	sub	sp, #216	@ 0xd8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x22>
 8004156:	2302      	movs	r3, #2
 8004158:	e3c8      	b.n	80048ec <HAL_ADC_ConfigChannel+0x7b4>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fd73 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 83ad 	bne.w	80048ce <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	f7ff fc54 	bl	8003a2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fd61 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8004190:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fd6d 	bl	8003c78 <LL_ADC_INJ_IsConversionOngoing>
 800419e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 81d9 	bne.w	800455e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 81d4 	bne.w	800455e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041be:	d10f      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2200      	movs	r2, #0
 80041ca:	4619      	mov	r1, r3
 80041cc:	f7ff fc5b 	bl	8003a86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fc02 	bl	80039e2 <LL_ADC_SetSamplingTimeCommonConfig>
 80041de:	e00e      	b.n	80041fe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f7ff fc4a 	bl	8003a86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fbf2 	bl	80039e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d022      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6919      	ldr	r1, [r3, #16]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004230:	f7ff fb4c 	bl	80038cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	6919      	ldr	r1, [r3, #16]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	461a      	mov	r2, r3
 8004242:	f7ff fb98 	bl	8003976 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_ADC_ConfigChannel+0x124>
 8004256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800425a:	e000      	b.n	800425e <HAL_ADC_ConfigChannel+0x126>
 800425c:	2300      	movs	r3, #0
 800425e:	461a      	mov	r2, r3
 8004260:	f7ff fba4 	bl	80039ac <LL_ADC_SetOffsetSaturation>
 8004264:	e17b      	b.n	800455e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fb51 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004272:	4603      	mov	r3, r0
 8004274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x15a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fb46 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004288:	4603      	mov	r3, r0
 800428a:	0e9b      	lsrs	r3, r3, #26
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	e01e      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x198>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fb3b 	bl	8003914 <LL_ADC_GetOffsetChannel>
 800429e:	4603      	mov	r3, r0
 80042a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e004      	b.n	80042ce <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80042c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x1b0>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0e9b      	lsrs	r3, r3, #26
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	e018      	b.n	800431a <HAL_ADC_ConfigChannel+0x1e2>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80042fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e004      	b.n	800431a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004310:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800431a:	429a      	cmp	r2, r3
 800431c:	d106      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fb0a 	bl	8003940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2101      	movs	r1, #1
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff faee 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004338:	4603      	mov	r3, r0
 800433a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x220>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fae3 	bl	8003914 <LL_ADC_GetOffsetChannel>
 800434e:	4603      	mov	r3, r0
 8004350:	0e9b      	lsrs	r3, r3, #26
 8004352:	f003 021f 	and.w	r2, r3, #31
 8004356:	e01e      	b.n	8004396 <HAL_ADC_ConfigChannel+0x25e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2101      	movs	r1, #1
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fad8 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004364:	4603      	mov	r3, r0
 8004366:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800437a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800437e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004386:	2320      	movs	r3, #32
 8004388:	e004      	b.n	8004394 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800438a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x276>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0e9b      	lsrs	r3, r3, #26
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	e018      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x2a8>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80043c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80043ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80043d2:	2320      	movs	r3, #32
 80043d4:	e004      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80043d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d106      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff faa7 	bl	8003940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2102      	movs	r1, #2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fa8b 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80043fe:	4603      	mov	r3, r0
 8004400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <HAL_ADC_ConfigChannel+0x2e6>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fa80 	bl	8003914 <LL_ADC_GetOffsetChannel>
 8004414:	4603      	mov	r3, r0
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	f003 021f 	and.w	r2, r3, #31
 800441c:	e01e      	b.n	800445c <HAL_ADC_ConfigChannel+0x324>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fa75 	bl	8003914 <LL_ADC_GetOffsetChannel>
 800442a:	4603      	mov	r3, r0
 800442c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004434:	fa93 f3a3 	rbit	r3, r3
 8004438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800443c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004440:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004444:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800444c:	2320      	movs	r3, #32
 800444e:	e004      	b.n	800445a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004450:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004454:	fab3 f383 	clz	r3, r3
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x33c>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	e016      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x36a>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004480:	fa93 f3a3 	rbit	r3, r3
 8004484:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004486:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800448c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004494:	2320      	movs	r3, #32
 8004496:	e004      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d106      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	2102      	movs	r1, #2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fa46 	bl	8003940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2103      	movs	r1, #3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fa2a 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x3a8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2103      	movs	r1, #3
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fa1f 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80044d6:	4603      	mov	r3, r0
 80044d8:	0e9b      	lsrs	r3, r3, #26
 80044da:	f003 021f 	and.w	r2, r3, #31
 80044de:	e017      	b.n	8004510 <HAL_ADC_ConfigChannel+0x3d8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2103      	movs	r1, #3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fa14 	bl	8003914 <LL_ADC_GetOffsetChannel>
 80044ec:	4603      	mov	r3, r0
 80044ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80044f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044fa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80044fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004502:	2320      	movs	r3, #32
 8004504:	e003      	b.n	800450e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004508:	fab3 f383 	clz	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x3f0>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0e9b      	lsrs	r3, r3, #26
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	e011      	b.n	800454c <HAL_ADC_ConfigChannel+0x414>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004536:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004538:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800453a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004540:	2320      	movs	r3, #32
 8004542:	e003      	b.n	800454c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800454c:	429a      	cmp	r2, r3
 800454e:	d106      	bne.n	800455e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2200      	movs	r2, #0
 8004556:	2103      	movs	r1, #3
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff f9f1 	bl	8003940 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fb4e 	bl	8003c04 <LL_ADC_IsEnabled>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 8140 	bne.w	80047f0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	461a      	mov	r2, r3
 800457e:	f7ff faad 	bl	8003adc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a8f      	ldr	r2, [pc, #572]	@ (80047c4 <HAL_ADC_ConfigChannel+0x68c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	f040 8131 	bne.w	80047f0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x47e>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0e9b      	lsrs	r3, r3, #26
 80045a4:	3301      	adds	r3, #1
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2b09      	cmp	r3, #9
 80045ac:	bf94      	ite	ls
 80045ae:	2301      	movls	r3, #1
 80045b0:	2300      	movhi	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e019      	b.n	80045ea <HAL_ADC_ConfigChannel+0x4b2>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80045c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045c6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80045c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80045ce:	2320      	movs	r3, #32
 80045d0:	e003      	b.n	80045da <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80045d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2b09      	cmp	r3, #9
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d079      	beq.n	80046e2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d107      	bne.n	800460a <HAL_ADC_ConfigChannel+0x4d2>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0e9b      	lsrs	r3, r3, #26
 8004600:	3301      	adds	r3, #1
 8004602:	069b      	lsls	r3, r3, #26
 8004604:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004608:	e015      	b.n	8004636 <HAL_ADC_ConfigChannel+0x4fe>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800461c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004622:	2320      	movs	r3, #32
 8004624:	e003      	b.n	800462e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004628:	fab3 f383 	clz	r3, r3
 800462c:	b2db      	uxtb	r3, r3
 800462e:	3301      	adds	r3, #1
 8004630:	069b      	lsls	r3, r3, #26
 8004632:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x51e>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	0e9b      	lsrs	r3, r3, #26
 8004648:	3301      	adds	r3, #1
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	e017      	b.n	8004686 <HAL_ADC_ConfigChannel+0x54e>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004666:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800466e:	2320      	movs	r3, #32
 8004670:	e003      	b.n	800467a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2101      	movs	r1, #1
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	ea42 0103 	orr.w	r1, r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x574>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	0e9b      	lsrs	r3, r3, #26
 800469c:	3301      	adds	r3, #1
 800469e:	f003 021f 	and.w	r2, r3, #31
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	051b      	lsls	r3, r3, #20
 80046aa:	e018      	b.n	80046de <HAL_ADC_ConfigChannel+0x5a6>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80046be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80046c4:	2320      	movs	r3, #32
 80046c6:	e003      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80046c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f003 021f 	and.w	r2, r3, #31
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046de:	430b      	orrs	r3, r1
 80046e0:	e081      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d107      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x5c6>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	0e9b      	lsrs	r3, r3, #26
 80046f4:	3301      	adds	r3, #1
 80046f6:	069b      	lsls	r3, r3, #26
 80046f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046fc:	e015      	b.n	800472a <HAL_ADC_ConfigChannel+0x5f2>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004716:	2320      	movs	r3, #32
 8004718:	e003      	b.n	8004722 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3301      	adds	r3, #1
 8004724:	069b      	lsls	r3, r3, #26
 8004726:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <HAL_ADC_ConfigChannel+0x612>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	3301      	adds	r3, #1
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	e017      	b.n	800477a <HAL_ADC_ConfigChannel+0x642>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	61fb      	str	r3, [r7, #28]
  return result;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004762:	2320      	movs	r3, #32
 8004764:	e003      	b.n	800476e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	3301      	adds	r3, #1
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f303 	lsl.w	r3, r1, r3
 800477a:	ea42 0103 	orr.w	r1, r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x66e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	0e9b      	lsrs	r3, r3, #26
 8004790:	3301      	adds	r3, #1
 8004792:	f003 021f 	and.w	r2, r3, #31
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	3b1e      	subs	r3, #30
 800479e:	051b      	lsls	r3, r3, #20
 80047a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047a4:	e01e      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x6ac>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	613b      	str	r3, [r7, #16]
  return result;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80047be:	2320      	movs	r3, #32
 80047c0:	e006      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x698>
 80047c2:	bf00      	nop
 80047c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	f003 021f 	and.w	r2, r3, #31
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	3b1e      	subs	r3, #30
 80047de:	051b      	lsls	r3, r3, #20
 80047e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ea:	4619      	mov	r1, r3
 80047ec:	f7ff f94b 	bl	8003a86 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b3f      	ldr	r3, [pc, #252]	@ (80048f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d071      	beq.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047fc:	483e      	ldr	r0, [pc, #248]	@ (80048f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80047fe:	f7ff f857 	bl	80038b0 <LL_ADC_GetCommonPathInternalCh>
 8004802:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a3c      	ldr	r2, [pc, #240]	@ (80048fc <HAL_ADC_ConfigChannel+0x7c4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_ADC_ConfigChannel+0x6e2>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a3a      	ldr	r2, [pc, #232]	@ (8004900 <HAL_ADC_ConfigChannel+0x7c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d127      	bne.n	800486a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800481a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800481e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d121      	bne.n	800486a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800482e:	d157      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004834:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004838:	4619      	mov	r1, r3
 800483a:	482f      	ldr	r0, [pc, #188]	@ (80048f8 <HAL_ADC_ConfigChannel+0x7c0>)
 800483c:	f7ff f825 	bl	800388a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004840:	4b30      	ldr	r3, [pc, #192]	@ (8004904 <HAL_ADC_ConfigChannel+0x7cc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <HAL_ADC_ConfigChannel+0x7d0>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800485a:	e002      	b.n	8004862 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3b01      	subs	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f9      	bne.n	800485c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004868:	e03a      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a27      	ldr	r2, [pc, #156]	@ (800490c <HAL_ADC_ConfigChannel+0x7d4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d113      	bne.n	800489c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a22      	ldr	r2, [pc, #136]	@ (8004910 <HAL_ADC_ConfigChannel+0x7d8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d02a      	beq.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800488a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800488e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004892:	4619      	mov	r1, r3
 8004894:	4818      	ldr	r0, [pc, #96]	@ (80048f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004896:	f7fe fff8 	bl	800388a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800489a:	e021      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004914 <HAL_ADC_ConfigChannel+0x7dc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d11c      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d116      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a16      	ldr	r2, [pc, #88]	@ (8004910 <HAL_ADC_ConfigChannel+0x7d8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d011      	beq.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048c4:	4619      	mov	r1, r3
 80048c6:	480c      	ldr	r0, [pc, #48]	@ (80048f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80048c8:	f7fe ffdf 	bl	800388a <LL_ADC_SetCommonPathInternalCh>
 80048cc:	e008      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	37d8      	adds	r7, #216	@ 0xd8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	80080000 	.word	0x80080000
 80048f8:	50000300 	.word	0x50000300
 80048fc:	c3210000 	.word	0xc3210000
 8004900:	90c00010 	.word	0x90c00010
 8004904:	2000000c 	.word	0x2000000c
 8004908:	053e2d63 	.word	0x053e2d63
 800490c:	c7520000 	.word	0xc7520000
 8004910:	50000100 	.word	0x50000100
 8004914:	cb840000 	.word	0xcb840000

08004918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff f96b 	bl	8003c04 <LL_ADC_IsEnabled>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d169      	bne.n	8004a08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <ADC_Enable+0xfc>)
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004946:	f043 0210 	orr.w	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004952:	f043 0201 	orr.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e055      	b.n	8004a0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff f93a 	bl	8003bdc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004968:	482b      	ldr	r0, [pc, #172]	@ (8004a18 <ADC_Enable+0x100>)
 800496a:	f7fe ffa1 	bl	80038b0 <LL_ADC_GetCommonPathInternalCh>
 800496e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004978:	4b28      	ldr	r3, [pc, #160]	@ (8004a1c <ADC_Enable+0x104>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	099b      	lsrs	r3, r3, #6
 800497e:	4a28      	ldr	r2, [pc, #160]	@ (8004a20 <ADC_Enable+0x108>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004992:	e002      	b.n	800499a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3b01      	subs	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f9      	bne.n	8004994 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049a0:	f7fe ff32 	bl	8003808 <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049a6:	e028      	b.n	80049fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff f929 	bl	8003c04 <LL_ADC_IsEnabled>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d104      	bne.n	80049c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff f90d 	bl	8003bdc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049c2:	f7fe ff21 	bl	8003808 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d914      	bls.n	80049fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d00d      	beq.n	80049fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e2:	f043 0210 	orr.w	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	f043 0201 	orr.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e007      	b.n	8004a0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d1cf      	bne.n	80049a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	8000003f 	.word	0x8000003f
 8004a18:	50000300 	.word	0x50000300
 8004a1c:	2000000c 	.word	0x2000000c
 8004a20:	053e2d63 	.word	0x053e2d63

08004a24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d14b      	bne.n	8004ad6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d021      	beq.n	8004a9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe ffd3 	bl	8003a08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d032      	beq.n	8004ace <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d12b      	bne.n	8004ace <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11f      	bne.n	8004ace <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a9a:	e018      	b.n	8004ace <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d111      	bne.n	8004ace <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7fc fdca 	bl	8001668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ad4:	e00e      	b.n	8004af4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fb1e 	bl	8004124 <HAL_ADC_ErrorCallback>
}
 8004ae8:	e004      	b.n	8004af4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7ff fb00 	bl	8004110 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff faf0 	bl	8004124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <LL_ADC_IsEnabled>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <LL_ADC_IsEnabled+0x18>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <LL_ADC_IsEnabled+0x1a>
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d101      	bne.n	8004b8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b0a1      	sub	sp, #132	@ 0x84
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e08b      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bce:	d102      	bne.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bd0:	4b41      	ldr	r3, [pc, #260]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	e001      	b.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e06a      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff ffb9 	bl	8004b72 <LL_ADC_REG_IsConversionOngoing>
 8004c00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff ffb3 	bl	8004b72 <LL_ADC_REG_IsConversionOngoing>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d14c      	bne.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d149      	bne.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c18:	4b30      	ldr	r3, [pc, #192]	@ (8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004c1a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d028      	beq.n	8004c76 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c36:	035b      	lsls	r3, r3, #13
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c44:	f7ff ff82 	bl	8004b4c <LL_ADC_IsEnabled>
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4823      	ldr	r0, [pc, #140]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c4c:	f7ff ff7e 	bl	8004b4c <LL_ADC_IsEnabled>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4323      	orrs	r3, r4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d133      	bne.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c60:	f023 030f 	bic.w	r3, r3, #15
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	6811      	ldr	r1, [r2, #0]
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	6892      	ldr	r2, [r2, #8]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c72:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c74:	e024      	b.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c82:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c86:	f7ff ff61 	bl	8004b4c <LL_ADC_IsEnabled>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4812      	ldr	r0, [pc, #72]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c8e:	f7ff ff5d 	bl	8004b4c <LL_ADC_IsEnabled>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4323      	orrs	r3, r4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d112      	bne.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ca2:	f023 030f 	bic.w	r3, r3, #15
 8004ca6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ca8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004caa:	e009      	b.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb0:	f043 0220 	orr.w	r2, r3, #32
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004cbe:	e000      	b.n	8004cc2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3784      	adds	r7, #132	@ 0x84
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd90      	pop	{r4, r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	50000100 	.word	0x50000100
 8004cdc:	50000300 	.word	0x50000300

08004ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d24 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d12:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <__NVIC_SetPriorityGrouping+0x44>)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	60d3      	str	r3, [r2, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d2c:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <__NVIC_GetPriorityGrouping+0x18>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	f003 0307 	and.w	r3, r3, #7
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	db0b      	blt.n	8004d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	f003 021f 	and.w	r2, r3, #31
 8004d5c:	4907      	ldr	r1, [pc, #28]	@ (8004d7c <__NVIC_EnableIRQ+0x38>)
 8004d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2001      	movs	r0, #1
 8004d66:	fa00 f202 	lsl.w	r2, r0, r2
 8004d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	e000e100 	.word	0xe000e100

08004d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	6039      	str	r1, [r7, #0]
 8004d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	db0a      	blt.n	8004daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	490c      	ldr	r1, [pc, #48]	@ (8004dcc <__NVIC_SetPriority+0x4c>)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	0112      	lsls	r2, r2, #4
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	440b      	add	r3, r1
 8004da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004da8:	e00a      	b.n	8004dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	4908      	ldr	r1, [pc, #32]	@ (8004dd0 <__NVIC_SetPriority+0x50>)
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	3b04      	subs	r3, #4
 8004db8:	0112      	lsls	r2, r2, #4
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	761a      	strb	r2, [r3, #24]
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000e100 	.word	0xe000e100
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	@ 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f1c3 0307 	rsb	r3, r3, #7
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	bf28      	it	cs
 8004df2:	2304      	movcs	r3, #4
 8004df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d902      	bls.n	8004e04 <NVIC_EncodePriority+0x30>
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3b03      	subs	r3, #3
 8004e02:	e000      	b.n	8004e06 <NVIC_EncodePriority+0x32>
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43da      	mvns	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	401a      	ands	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	43d9      	mvns	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e2c:	4313      	orrs	r3, r2
         );
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3724      	adds	r7, #36	@ 0x24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e4c:	d301      	bcc.n	8004e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e00f      	b.n	8004e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e52:	4a0a      	ldr	r2, [pc, #40]	@ (8004e7c <SysTick_Config+0x40>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e5a:	210f      	movs	r1, #15
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e60:	f7ff ff8e 	bl	8004d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <SysTick_Config+0x40>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e6a:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <SysTick_Config+0x40>)
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	e000e010 	.word	0xe000e010

08004e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ff29 	bl	8004ce0 <__NVIC_SetPriorityGrouping>
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ea4:	f7ff ff40 	bl	8004d28 <__NVIC_GetPriorityGrouping>
 8004ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	6978      	ldr	r0, [r7, #20]
 8004eb0:	f7ff ff90 	bl	8004dd4 <NVIC_EncodePriority>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ff5f 	bl	8004d80 <__NVIC_SetPriority>
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff33 	bl	8004d44 <__NVIC_EnableIRQ>
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ffa4 	bl	8004e3c <SysTick_Config>
 8004ef4:	4603      	mov	r3, r0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e08d      	b.n	800502e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b47      	ldr	r3, [pc, #284]	@ (8005038 <HAL_DMA_Init+0x138>)
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d80f      	bhi.n	8004f3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b45      	ldr	r3, [pc, #276]	@ (800503c <HAL_DMA_Init+0x13c>)
 8004f26:	4413      	add	r3, r2
 8004f28:	4a45      	ldr	r2, [pc, #276]	@ (8005040 <HAL_DMA_Init+0x140>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	009a      	lsls	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a42      	ldr	r2, [pc, #264]	@ (8005044 <HAL_DMA_Init+0x144>)
 8004f3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f3c:	e00e      	b.n	8004f5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	4b40      	ldr	r3, [pc, #256]	@ (8005048 <HAL_DMA_Init+0x148>)
 8004f46:	4413      	add	r3, r2
 8004f48:	4a3d      	ldr	r2, [pc, #244]	@ (8005040 <HAL_DMA_Init+0x140>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	009a      	lsls	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a3c      	ldr	r2, [pc, #240]	@ (800504c <HAL_DMA_Init+0x14c>)
 8004f5a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa82 	bl	80054b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fbc:	d102      	bne.n	8004fc4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fd8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d010      	beq.n	8005004 <HAL_DMA_Init+0x104>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d80c      	bhi.n	8005004 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 faa2 	bl	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	e008      	b.n	8005016 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40020407 	.word	0x40020407
 800503c:	bffdfff8 	.word	0xbffdfff8
 8005040:	cccccccd 	.word	0xcccccccd
 8005044:	40020000 	.word	0x40020000
 8005048:	bffdfbf8 	.word	0xbffdfbf8
 800504c:	40020400 	.word	0x40020400

08005050 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_DMA_Start_IT+0x20>
 800506c:	2302      	movs	r3, #2
 800506e:	e066      	b.n	800513e <HAL_DMA_Start_IT+0xee>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	d155      	bne.n	8005130 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f9c7 	bl	800543c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 020e 	orr.w	r2, r2, #14
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	e00f      	b.n	80050e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0204 	bic.w	r2, r2, #4
 80050d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 020a 	orr.w	r2, r2, #10
 80050e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005104:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e005      	b.n	800513c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005138:	2302      	movs	r3, #2
 800513a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d005      	beq.n	800516a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2204      	movs	r2, #4
 8005162:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	e037      	b.n	80051da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 020e 	bic.w	r2, r2, #14
 8005178:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005188:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519e:	f003 021f 	and.w	r2, r3, #31
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	2101      	movs	r1, #1
 80051a8:	fa01 f202 	lsl.w	r2, r1, r2
 80051ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00c      	beq.n	80051da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d00d      	beq.n	800522c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2204      	movs	r2, #4
 8005214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e047      	b.n	80052bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 020e 	bic.w	r2, r2, #14
 800523a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005256:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800525a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005260:	f003 021f 	and.w	r2, r3, #31
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	2101      	movs	r1, #1
 800526a:	fa01 f202 	lsl.w	r2, r1, r2
 800526e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005278:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005290:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800529a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
    }
  }
  return status;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	2204      	movs	r2, #4
 80052e8:	409a      	lsls	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d026      	beq.n	8005340 <HAL_DMA_IRQHandler+0x7a>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d021      	beq.n	8005340 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d107      	bne.n	800531a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0204 	bic.w	r2, r2, #4
 8005318:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	f003 021f 	and.w	r2, r3, #31
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	2104      	movs	r1, #4
 8005328:	fa01 f202 	lsl.w	r2, r1, r2
 800532c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	2b00      	cmp	r3, #0
 8005334:	d071      	beq.n	800541a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800533e:	e06c      	b.n	800541a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2202      	movs	r2, #2
 800534a:	409a      	lsls	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02e      	beq.n	80053b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d029      	beq.n	80053b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 020a 	bic.w	r2, r2, #10
 800537a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005388:	f003 021f 	and.w	r2, r3, #31
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	2102      	movs	r1, #2
 8005392:	fa01 f202 	lsl.w	r2, r1, r2
 8005396:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d038      	beq.n	800541a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053b0:	e033      	b.n	800541a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2208      	movs	r2, #8
 80053bc:	409a      	lsls	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d02a      	beq.n	800541c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d025      	beq.n	800541c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 020e 	bic.w	r2, r2, #14
 80053de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e4:	f003 021f 	and.w	r2, r3, #31
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f202 	lsl.w	r2, r1, r2
 80053f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800541a:	bf00      	nop
 800541c:	bf00      	nop
}
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005452:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005464:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f003 021f 	and.w	r2, r3, #31
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f202 	lsl.w	r2, r1, r2
 8005478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b10      	cmp	r3, #16
 8005488:	d108      	bne.n	800549c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800549a:	e007      	b.n	80054ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	4b16      	ldr	r3, [pc, #88]	@ (8005520 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d802      	bhi.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054cc:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e001      	b.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80054d2:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054d4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	3b08      	subs	r3, #8
 80054e2:	4a12      	ldr	r2, [pc, #72]	@ (800552c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	009a      	lsls	r2, r3, #2
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4413      	add	r3, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a0b      	ldr	r2, [pc, #44]	@ (8005530 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2201      	movs	r2, #1
 800550c:	409a      	lsls	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40020407 	.word	0x40020407
 8005524:	40020800 	.word	0x40020800
 8005528:	40020820 	.word	0x40020820
 800552c:	cccccccd 	.word	0xcccccccd
 8005530:	40020880 	.word	0x40020880

08005534 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	461a      	mov	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a08      	ldr	r2, [pc, #32]	@ (8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005556:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3b01      	subs	r3, #1
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	1000823f 	.word	0x1000823f
 8005578:	40020940 	.word	0x40020940

0800557c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800558a:	e15a      	b.n	8005842 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	2101      	movs	r1, #1
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 814c 	beq.w	800583c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d005      	beq.n	80055bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d130      	bne.n	800561e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	2203      	movs	r2, #3
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055f2:	2201      	movs	r2, #1
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 0201 	and.w	r2, r3, #1
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b03      	cmp	r3, #3
 8005628:	d017      	beq.n	800565a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	2203      	movs	r2, #3
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4013      	ands	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d123      	bne.n	80056ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	08da      	lsrs	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3208      	adds	r2, #8
 800566e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	220f      	movs	r2, #15
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4013      	ands	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	08da      	lsrs	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3208      	adds	r2, #8
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	2203      	movs	r2, #3
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0203 	and.w	r2, r3, #3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80a6 	beq.w	800583c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005860 <HAL_GPIO_Init+0x2e4>)
 80056f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005860 <HAL_GPIO_Init+0x2e4>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80056fc:	4b58      	ldr	r3, [pc, #352]	@ (8005860 <HAL_GPIO_Init+0x2e4>)
 80056fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005708:	4a56      	ldr	r2, [pc, #344]	@ (8005864 <HAL_GPIO_Init+0x2e8>)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	3302      	adds	r3, #2
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	220f      	movs	r2, #15
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005732:	d01f      	beq.n	8005774 <HAL_GPIO_Init+0x1f8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a4c      	ldr	r2, [pc, #304]	@ (8005868 <HAL_GPIO_Init+0x2ec>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d019      	beq.n	8005770 <HAL_GPIO_Init+0x1f4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a4b      	ldr	r2, [pc, #300]	@ (800586c <HAL_GPIO_Init+0x2f0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <HAL_GPIO_Init+0x1f0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a4a      	ldr	r2, [pc, #296]	@ (8005870 <HAL_GPIO_Init+0x2f4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00d      	beq.n	8005768 <HAL_GPIO_Init+0x1ec>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a49      	ldr	r2, [pc, #292]	@ (8005874 <HAL_GPIO_Init+0x2f8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <HAL_GPIO_Init+0x1e8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a48      	ldr	r2, [pc, #288]	@ (8005878 <HAL_GPIO_Init+0x2fc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <HAL_GPIO_Init+0x1e4>
 800575c:	2305      	movs	r3, #5
 800575e:	e00a      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005760:	2306      	movs	r3, #6
 8005762:	e008      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005764:	2304      	movs	r3, #4
 8005766:	e006      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005768:	2303      	movs	r3, #3
 800576a:	e004      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 800576c:	2302      	movs	r3, #2
 800576e:	e002      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005774:	2300      	movs	r3, #0
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	f002 0203 	and.w	r2, r2, #3
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	4093      	lsls	r3, r2
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005786:	4937      	ldr	r1, [pc, #220]	@ (8005864 <HAL_GPIO_Init+0x2e8>)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	089b      	lsrs	r3, r3, #2
 800578c:	3302      	adds	r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005794:	4b39      	ldr	r3, [pc, #228]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057b8:	4a30      	ldr	r2, [pc, #192]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057be:	4b2f      	ldr	r3, [pc, #188]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	43db      	mvns	r3, r3
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4013      	ands	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057e2:	4a26      	ldr	r2, [pc, #152]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057e8:	4b24      	ldr	r3, [pc, #144]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	43db      	mvns	r3, r3
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800580c:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_GPIO_Init+0x300>)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005812:	4b1a      	ldr	r3, [pc, #104]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	43db      	mvns	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4013      	ands	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005836:	4a11      	ldr	r2, [pc, #68]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3301      	adds	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f ae9d 	bne.w	800558c <HAL_GPIO_Init+0x10>
  }
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40021000 	.word	0x40021000
 8005864:	40010000 	.word	0x40010000
 8005868:	48000400 	.word	0x48000400
 800586c:	48000800 	.word	0x48000800
 8005870:	48000c00 	.word	0x48000c00
 8005874:	48001000 	.word	0x48001000
 8005878:	48001400 	.word	0x48001400
 800587c:	40010400 	.word	0x40010400

08005880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	807b      	strh	r3, [r7, #2]
 800588c:	4613      	mov	r3, r2
 800588e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005890:	787b      	ldrb	r3, [r7, #1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800589c:	e002      	b.n	80058a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058ba:	4b08      	ldr	r3, [pc, #32]	@ (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058c6:	4a05      	ldr	r2, [pc, #20]	@ (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f806 	bl	80058e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40010400 	.word	0x40010400

080058e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e08d      	b.n	8005a24 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fc fe4f 	bl	80025c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2224      	movs	r2, #36	@ 0x24
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005946:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005956:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d107      	bne.n	8005970 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800596c:	609a      	str	r2, [r3, #8]
 800596e:	e006      	b.n	800597e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800597c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d108      	bne.n	8005998 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	e007      	b.n	80059a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69d9      	ldr	r1, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	f040 80fd 	bne.w	8005c4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_I2C_Mem_Read+0x34>
 8005a5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0f1      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Mem_Read+0x4e>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e0ea      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a82:	f7fd fec1 	bl	8003808 <HAL_GetTick>
 8005a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2319      	movs	r3, #25
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f95b 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0d5      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2222      	movs	r2, #34	@ 0x22
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2240      	movs	r2, #64	@ 0x40
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005acc:	88f8      	ldrh	r0, [r7, #6]
 8005ace:	893a      	ldrh	r2, [r7, #8]
 8005ad0:	8979      	ldrh	r1, [r7, #10]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	4603      	mov	r3, r0
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f8bf 	bl	8005c60 <I2C_RequestMemoryRead>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0ad      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2bff      	cmp	r3, #255	@ 0xff
 8005afc:	d90e      	bls.n	8005b1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	@ 0xff
 8005b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	8979      	ldrh	r1, [r7, #10]
 8005b0c:	4b52      	ldr	r3, [pc, #328]	@ (8005c58 <HAL_I2C_Mem_Read+0x22c>)
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fadf 	bl	80060d8 <I2C_TransferConfig>
 8005b1a:	e00f      	b.n	8005b3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	8979      	ldrh	r1, [r7, #10]
 8005b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c58 <HAL_I2C_Mem_Read+0x22c>)
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 face 	bl	80060d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	2200      	movs	r2, #0
 8005b44:	2104      	movs	r1, #4
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f902 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e07c      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d034      	beq.n	8005bfc <HAL_I2C_Mem_Read+0x1d0>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d130      	bne.n	8005bfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2180      	movs	r1, #128	@ 0x80
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f8d3 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e04d      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2bff      	cmp	r3, #255	@ 0xff
 8005bbc:	d90e      	bls.n	8005bdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	22ff      	movs	r2, #255	@ 0xff
 8005bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	8979      	ldrh	r1, [r7, #10]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa7f 	bl	80060d8 <I2C_TransferConfig>
 8005bda:	e00f      	b.n	8005bfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	8979      	ldrh	r1, [r7, #10]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fa6e 	bl	80060d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d19a      	bne.n	8005b3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f940 	bl	8005e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e01a      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <HAL_I2C_Mem_Read+0x230>)
 8005c2e:	400b      	ands	r3, r1
 8005c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	80002400 	.word	0x80002400
 8005c5c:	fe00e800 	.word	0xfe00e800

08005c60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	817b      	strh	r3, [r7, #10]
 8005c72:	460b      	mov	r3, r1
 8005c74:	813b      	strh	r3, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	8979      	ldrh	r1, [r7, #10]
 8005c80:	4b20      	ldr	r3, [pc, #128]	@ (8005d04 <I2C_RequestMemoryRead+0xa4>)
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	2300      	movs	r3, #0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa26 	bl	80060d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	69b9      	ldr	r1, [r7, #24]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f8b6 	bl	8005e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e02c      	b.n	8005cfa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d105      	bne.n	8005cb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cb0:	e015      	b.n	8005cde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb2:	893b      	ldrh	r3, [r7, #8]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f89c 	bl	8005e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e012      	b.n	8005cfa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cd4:	893b      	ldrh	r3, [r7, #8]
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2140      	movs	r1, #64	@ 0x40
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f831 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	80002000 	.word	0x80002000

08005d08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d103      	bne.n	8005d26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d007      	beq.n	8005d44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	619a      	str	r2, [r3, #24]
  }
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d60:	e03b      	b.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f8d6 	bl	8005f18 <I2C_IsErrorOccurred>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e041      	b.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d7c:	d02d      	beq.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fd fd43 	bl	8003808 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d122      	bne.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d113      	bne.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e00f      	b.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4013      	ands	r3, r2
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	bf0c      	ite	eq
 8005dea:	2301      	moveq	r3, #1
 8005dec:	2300      	movne	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d0b4      	beq.n	8005d62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e0e:	e033      	b.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f87f 	bl	8005f18 <I2C_IsErrorOccurred>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e031      	b.n	8005e88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e2a:	d025      	beq.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2c:	f7fd fcec 	bl	8003808 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d11a      	bne.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d013      	beq.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e54:	f043 0220 	orr.w	r2, r3, #32
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e007      	b.n	8005e88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d1c4      	bne.n	8005e10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e9c:	e02f      	b.n	8005efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f838 	bl	8005f18 <I2C_IsErrorOccurred>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e02d      	b.n	8005f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb2:	f7fd fca9 	bl	8003808 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11a      	bne.n	8005efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d013      	beq.n	8005efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	f043 0220 	orr.w	r2, r3, #32
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e007      	b.n	8005f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d1c8      	bne.n	8005e9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	@ 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d068      	beq.n	8006016 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2210      	movs	r2, #16
 8005f4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f4c:	e049      	b.n	8005fe2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f54:	d045      	beq.n	8005fe2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f56:	f7fd fc57 	bl	8003808 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d302      	bcc.n	8005f6c <I2C_IsErrorOccurred+0x54>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d13a      	bne.n	8005fe2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f8e:	d121      	bne.n	8005fd4 <I2C_IsErrorOccurred+0xbc>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f96:	d01d      	beq.n	8005fd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d01a      	beq.n	8005fd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fae:	f7fd fc2b 	bl	8003808 <HAL_GetTick>
 8005fb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fb4:	e00e      	b.n	8005fd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fb6:	f7fd fc27 	bl	8003808 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b19      	cmp	r3, #25
 8005fc2:	d907      	bls.n	8005fd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f043 0320 	orr.w	r3, r3, #32
 8005fca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005fd2:	e006      	b.n	8005fe2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d1e9      	bne.n	8005fb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d003      	beq.n	8005ff8 <I2C_IsErrorOccurred+0xe0>
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0aa      	beq.n	8005f4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2220      	movs	r2, #32
 8006006:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f043 0304 	orr.w	r3, r3, #4
 800600e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f043 0308 	orr.w	r3, r3, #8
 8006050:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800605a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	f043 0302 	orr.w	r3, r3, #2
 8006072:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800607c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01c      	beq.n	80060c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff fe3b 	bl	8005d08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <I2C_IsErrorOccurred+0x1bc>)
 800609e:	400b      	ands	r3, r1
 80060a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80060c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3728      	adds	r7, #40	@ 0x28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	fe00e800 	.word	0xfe00e800

080060d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	817b      	strh	r3, [r7, #10]
 80060e6:	4613      	mov	r3, r2
 80060e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060ea:	897b      	ldrh	r3, [r7, #10]
 80060ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060f0:	7a7b      	ldrb	r3, [r7, #9]
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	4313      	orrs	r3, r2
 8006102:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006106:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	0d5b      	lsrs	r3, r3, #21
 8006112:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006116:	4b08      	ldr	r3, [pc, #32]	@ (8006138 <I2C_TransferConfig+0x60>)
 8006118:	430b      	orrs	r3, r1
 800611a:	43db      	mvns	r3, r3
 800611c:	ea02 0103 	and.w	r1, r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	03ff63ff 	.word	0x03ff63ff

0800613c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b20      	cmp	r3, #32
 8006150:	d138      	bne.n	80061c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800615c:	2302      	movs	r3, #2
 800615e:	e032      	b.n	80061c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2224      	movs	r2, #36	@ 0x24
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800618e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6819      	ldr	r1, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e000      	b.n	80061c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d139      	bne.n	800625c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e033      	b.n	800625e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2224      	movs	r2, #36	@ 0x24
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006224:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0c0      	b.n	80063fe <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fd f9f7 	bl	8003684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2203      	movs	r2, #3
 800629a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f004 fe88 	bl	800afb8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	e03e      	b.n	800632c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062ae:	7bfa      	ldrb	r2, [r7, #15]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	440b      	add	r3, r1
 80062bc:	3311      	adds	r3, #17
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062c2:	7bfa      	ldrb	r2, [r7, #15]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	440b      	add	r3, r1
 80062d0:	3310      	adds	r3, #16
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062d6:	7bfa      	ldrb	r2, [r7, #15]
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	440b      	add	r3, r1
 80062e4:	3313      	adds	r3, #19
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062ea:	7bfa      	ldrb	r2, [r7, #15]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	440b      	add	r3, r1
 80062f8:	3320      	adds	r3, #32
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062fe:	7bfa      	ldrb	r2, [r7, #15]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	440b      	add	r3, r1
 800630c:	3324      	adds	r3, #36	@ 0x24
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	440b      	add	r3, r1
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	3301      	adds	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	791b      	ldrb	r3, [r3, #4]
 8006330:	7bfa      	ldrb	r2, [r7, #15]
 8006332:	429a      	cmp	r2, r3
 8006334:	d3bb      	bcc.n	80062ae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
 800633a:	e044      	b.n	80063c6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800633c:	7bfa      	ldrb	r2, [r7, #15]
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	440b      	add	r3, r1
 800634a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800634e:	2200      	movs	r2, #0
 8006350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006352:	7bfa      	ldrb	r2, [r7, #15]
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	440b      	add	r3, r1
 8006360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006364:	7bfa      	ldrb	r2, [r7, #15]
 8006366:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006368:	7bfa      	ldrb	r2, [r7, #15]
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	440b      	add	r3, r1
 8006376:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800637e:	7bfa      	ldrb	r2, [r7, #15]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	440b      	add	r3, r1
 800638c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006394:	7bfa      	ldrb	r2, [r7, #15]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	440b      	add	r3, r1
 80063a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063aa:	7bfa      	ldrb	r2, [r7, #15]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	440b      	add	r3, r1
 80063b8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	3301      	adds	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	7bfa      	ldrb	r2, [r7, #15]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d3b5      	bcc.n	800633c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3304      	adds	r3, #4
 80063d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80063dc:	f004 fe07 	bl	800afee <USB_DevInit>

  hpcd->USB_Address = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7a9b      	ldrb	r3, [r3, #10]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d102      	bne.n	80063fc <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f805 	bl	8006406 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800642a:	b29b      	uxth	r3, r3
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800643e:	b29b      	uxth	r3, r3
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d141      	bne.n	80064ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800646a:	4b4b      	ldr	r3, [pc, #300]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006476:	d131      	bne.n	80064dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006478:	4b47      	ldr	r3, [pc, #284]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647e:	4a46      	ldr	r2, [pc, #280]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006488:	4b43      	ldr	r3, [pc, #268]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006490:	4a41      	ldr	r2, [pc, #260]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006496:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006498:	4b40      	ldr	r3, [pc, #256]	@ (800659c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2232      	movs	r2, #50	@ 0x32
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	4a3f      	ldr	r2, [pc, #252]	@ (80065a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064a4:	fba2 2303 	umull	r2, r3, r2, r3
 80064a8:	0c9b      	lsrs	r3, r3, #18
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064ae:	e002      	b.n	80064b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064b6:	4b38      	ldr	r3, [pc, #224]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c2:	d102      	bne.n	80064ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f2      	bne.n	80064b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064ca:	4b33      	ldr	r3, [pc, #204]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d6:	d158      	bne.n	800658a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e057      	b.n	800658c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80064ec:	e04d      	b.n	800658a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f4:	d141      	bne.n	800657a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064f6:	4b28      	ldr	r3, [pc, #160]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006502:	d131      	bne.n	8006568 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006504:	4b24      	ldr	r3, [pc, #144]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800650a:	4a23      	ldr	r2, [pc, #140]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800650c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006514:	4b20      	ldr	r3, [pc, #128]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800651c:	4a1e      	ldr	r2, [pc, #120]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800651e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006522:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006524:	4b1d      	ldr	r3, [pc, #116]	@ (800659c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2232      	movs	r2, #50	@ 0x32
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	4a1c      	ldr	r2, [pc, #112]	@ (80065a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	0c9b      	lsrs	r3, r3, #18
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800653a:	e002      	b.n	8006542 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3b01      	subs	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006542:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800654e:	d102      	bne.n	8006556 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f2      	bne.n	800653c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006556:	4b10      	ldr	r3, [pc, #64]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006562:	d112      	bne.n	800658a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e011      	b.n	800658c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006568:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800656e:	4a0a      	ldr	r2, [pc, #40]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006578:	e007      	b.n	800658a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800657a:	4b07      	ldr	r3, [pc, #28]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006582:	4a05      	ldr	r2, [pc, #20]	@ (8006598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006584:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006588:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40007000 	.word	0x40007000
 800659c:	2000000c 	.word	0x2000000c
 80065a0:	431bde83 	.word	0x431bde83

080065a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4a04      	ldr	r2, [pc, #16]	@ (80065c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065b2:	6093      	str	r3, [r2, #8]
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40007000 	.word	0x40007000

080065c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e2fe      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d075      	beq.n	80066ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065e2:	4b97      	ldr	r3, [pc, #604]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 030c 	and.w	r3, r3, #12
 80065ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065ec:	4b94      	ldr	r3, [pc, #592]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b0c      	cmp	r3, #12
 80065fa:	d102      	bne.n	8006602 <HAL_RCC_OscConfig+0x3e>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d002      	beq.n	8006608 <HAL_RCC_OscConfig+0x44>
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d10b      	bne.n	8006620 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006608:	4b8d      	ldr	r3, [pc, #564]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d05b      	beq.n	80066cc <HAL_RCC_OscConfig+0x108>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d157      	bne.n	80066cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e2d9      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006628:	d106      	bne.n	8006638 <HAL_RCC_OscConfig+0x74>
 800662a:	4b85      	ldr	r3, [pc, #532]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a84      	ldr	r2, [pc, #528]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e01d      	b.n	8006674 <HAL_RCC_OscConfig+0xb0>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006640:	d10c      	bne.n	800665c <HAL_RCC_OscConfig+0x98>
 8006642:	4b7f      	ldr	r3, [pc, #508]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a7e      	ldr	r2, [pc, #504]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	4b7c      	ldr	r3, [pc, #496]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a7b      	ldr	r2, [pc, #492]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	e00b      	b.n	8006674 <HAL_RCC_OscConfig+0xb0>
 800665c:	4b78      	ldr	r3, [pc, #480]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a77      	ldr	r2, [pc, #476]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	4b75      	ldr	r3, [pc, #468]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a74      	ldr	r2, [pc, #464]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800666e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d013      	beq.n	80066a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667c:	f7fd f8c4 	bl	8003808 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006684:	f7fd f8c0 	bl	8003808 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b64      	cmp	r3, #100	@ 0x64
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e29e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006696:	4b6a      	ldr	r3, [pc, #424]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f0      	beq.n	8006684 <HAL_RCC_OscConfig+0xc0>
 80066a2:	e014      	b.n	80066ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fd f8b0 	bl	8003808 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fd f8ac 	bl	8003808 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	@ 0x64
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e28a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066be:	4b60      	ldr	r3, [pc, #384]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0xe8>
 80066ca:	e000      	b.n	80066ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d075      	beq.n	80067c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066da:	4b59      	ldr	r3, [pc, #356]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 030c 	and.w	r3, r3, #12
 80066e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066e4:	4b56      	ldr	r3, [pc, #344]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b0c      	cmp	r3, #12
 80066f2:	d102      	bne.n	80066fa <HAL_RCC_OscConfig+0x136>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d002      	beq.n	8006700 <HAL_RCC_OscConfig+0x13c>
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d11f      	bne.n	8006740 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006700:	4b4f      	ldr	r3, [pc, #316]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCC_OscConfig+0x154>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e25d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006718:	4b49      	ldr	r3, [pc, #292]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	061b      	lsls	r3, r3, #24
 8006726:	4946      	ldr	r1, [pc, #280]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006728:	4313      	orrs	r3, r2
 800672a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800672c:	4b45      	ldr	r3, [pc, #276]	@ (8006844 <HAL_RCC_OscConfig+0x280>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f7fd f81d 	bl	8003770 <HAL_InitTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d043      	beq.n	80067c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e249      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d023      	beq.n	8006790 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006748:	4b3d      	ldr	r3, [pc, #244]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a3c      	ldr	r2, [pc, #240]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fd f858 	bl	8003808 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800675c:	f7fd f854 	bl	8003808 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e232      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800676e:	4b34      	ldr	r3, [pc, #208]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677a:	4b31      	ldr	r3, [pc, #196]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	061b      	lsls	r3, r3, #24
 8006788:	492d      	ldr	r1, [pc, #180]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800678a:	4313      	orrs	r3, r2
 800678c:	604b      	str	r3, [r1, #4]
 800678e:	e01a      	b.n	80067c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006790:	4b2b      	ldr	r3, [pc, #172]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a2a      	ldr	r2, [pc, #168]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006796:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800679a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fd f834 	bl	8003808 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a4:	f7fd f830 	bl	8003808 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e20e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067b6:	4b22      	ldr	r3, [pc, #136]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x1e0>
 80067c2:	e000      	b.n	80067c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d041      	beq.n	8006856 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d01c      	beq.n	8006814 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067da:	4b19      	ldr	r3, [pc, #100]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80067dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067e0:	4a17      	ldr	r2, [pc, #92]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ea:	f7fd f80d 	bl	8003808 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f2:	f7fd f809 	bl	8003808 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e1e7      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006804:	4b0e      	ldr	r3, [pc, #56]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0ef      	beq.n	80067f2 <HAL_RCC_OscConfig+0x22e>
 8006812:	e020      	b.n	8006856 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006814:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800681a:	4a09      	ldr	r2, [pc, #36]	@ (8006840 <HAL_RCC_OscConfig+0x27c>)
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006824:	f7fc fff0 	bl	8003808 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800682a:	e00d      	b.n	8006848 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682c:	f7fc ffec 	bl	8003808 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d906      	bls.n	8006848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e1ca      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
 800683e:	bf00      	nop
 8006840:	40021000 	.word	0x40021000
 8006844:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006848:	4b8c      	ldr	r3, [pc, #560]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 800684a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ea      	bne.n	800682c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a6 	beq.w	80069b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006864:	2300      	movs	r3, #0
 8006866:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006868:	4b84      	ldr	r3, [pc, #528]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 800686a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_OscConfig+0x2b4>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <HAL_RCC_OscConfig+0x2b6>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800687e:	4b7f      	ldr	r3, [pc, #508]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006882:	4a7e      	ldr	r2, [pc, #504]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006888:	6593      	str	r3, [r2, #88]	@ 0x58
 800688a:	4b7c      	ldr	r3, [pc, #496]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 800688c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006896:	2301      	movs	r3, #1
 8006898:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800689a:	4b79      	ldr	r3, [pc, #484]	@ (8006a80 <HAL_RCC_OscConfig+0x4bc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d118      	bne.n	80068d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068a6:	4b76      	ldr	r3, [pc, #472]	@ (8006a80 <HAL_RCC_OscConfig+0x4bc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a75      	ldr	r2, [pc, #468]	@ (8006a80 <HAL_RCC_OscConfig+0x4bc>)
 80068ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068b2:	f7fc ffa9 	bl	8003808 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ba:	f7fc ffa5 	bl	8003808 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e183      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006a80 <HAL_RCC_OscConfig+0x4bc>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0f0      	beq.n	80068ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d108      	bne.n	80068f2 <HAL_RCC_OscConfig+0x32e>
 80068e0:	4b66      	ldr	r3, [pc, #408]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	4a65      	ldr	r2, [pc, #404]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068f0:	e024      	b.n	800693c <HAL_RCC_OscConfig+0x378>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b05      	cmp	r3, #5
 80068f8:	d110      	bne.n	800691c <HAL_RCC_OscConfig+0x358>
 80068fa:	4b60      	ldr	r3, [pc, #384]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80068fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006900:	4a5e      	ldr	r2, [pc, #376]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006902:	f043 0304 	orr.w	r3, r3, #4
 8006906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800690a:	4b5c      	ldr	r3, [pc, #368]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006910:	4a5a      	ldr	r2, [pc, #360]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800691a:	e00f      	b.n	800693c <HAL_RCC_OscConfig+0x378>
 800691c:	4b57      	ldr	r3, [pc, #348]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	4a56      	ldr	r2, [pc, #344]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800692c:	4b53      	ldr	r3, [pc, #332]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006932:	4a52      	ldr	r2, [pc, #328]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006934:	f023 0304 	bic.w	r3, r3, #4
 8006938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d016      	beq.n	8006972 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fc ff60 	bl	8003808 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fc ff5c 	bl	8003808 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e138      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006962:	4b46      	ldr	r3, [pc, #280]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ed      	beq.n	800694c <HAL_RCC_OscConfig+0x388>
 8006970:	e015      	b.n	800699e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006972:	f7fc ff49 	bl	8003808 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006978:	e00a      	b.n	8006990 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800697a:	f7fc ff45 	bl	8003808 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006988:	4293      	cmp	r3, r2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e121      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006990:	4b3a      	ldr	r3, [pc, #232]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1ed      	bne.n	800697a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800699e:	7ffb      	ldrb	r3, [r7, #31]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d105      	bne.n	80069b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069a4:	4b35      	ldr	r3, [pc, #212]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80069a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a8:	4a34      	ldr	r2, [pc, #208]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80069aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d03c      	beq.n	8006a36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01c      	beq.n	80069fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069c4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80069c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ca:	4a2c      	ldr	r2, [pc, #176]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fc ff18 	bl	8003808 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069dc:	f7fc ff14 	bl	8003808 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0f2      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069ee:	4b23      	ldr	r3, [pc, #140]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 80069f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0ef      	beq.n	80069dc <HAL_RCC_OscConfig+0x418>
 80069fc:	e01b      	b.n	8006a36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069fe:	4b1f      	ldr	r3, [pc, #124]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a04:	4a1d      	ldr	r2, [pc, #116]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006a06:	f023 0301 	bic.w	r3, r3, #1
 8006a0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0e:	f7fc fefb 	bl	8003808 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a16:	f7fc fef7 	bl	8003808 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e0d5      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a28:	4b14      	ldr	r3, [pc, #80]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1ef      	bne.n	8006a16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80c9 	beq.w	8006bd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a40:	4b0e      	ldr	r3, [pc, #56]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 030c 	and.w	r3, r3, #12
 8006a48:	2b0c      	cmp	r3, #12
 8006a4a:	f000 8083 	beq.w	8006b54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d15e      	bne.n	8006b14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a56:	4b09      	ldr	r3, [pc, #36]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a08      	ldr	r2, [pc, #32]	@ (8006a7c <HAL_RCC_OscConfig+0x4b8>)
 8006a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a62:	f7fc fed1 	bl	8003808 <HAL_GetTick>
 8006a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a68:	e00c      	b.n	8006a84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6a:	f7fc fecd 	bl	8003808 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d905      	bls.n	8006a84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e0ab      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a84:	4b55      	ldr	r3, [pc, #340]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ec      	bne.n	8006a6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a90:	4b52      	ldr	r3, [pc, #328]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	4b52      	ldr	r3, [pc, #328]	@ (8006be0 <HAL_RCC_OscConfig+0x61c>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6a11      	ldr	r1, [r2, #32]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006aa0:	3a01      	subs	r2, #1
 8006aa2:	0112      	lsls	r2, r2, #4
 8006aa4:	4311      	orrs	r1, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006aaa:	0212      	lsls	r2, r2, #8
 8006aac:	4311      	orrs	r1, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ab2:	0852      	lsrs	r2, r2, #1
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	0552      	lsls	r2, r2, #21
 8006ab8:	4311      	orrs	r1, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006abe:	0852      	lsrs	r2, r2, #1
 8006ac0:	3a01      	subs	r2, #1
 8006ac2:	0652      	lsls	r2, r2, #25
 8006ac4:	4311      	orrs	r1, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006aca:	06d2      	lsls	r2, r2, #27
 8006acc:	430a      	orrs	r2, r1
 8006ace:	4943      	ldr	r1, [pc, #268]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ad4:	4b41      	ldr	r3, [pc, #260]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a40      	ldr	r2, [pc, #256]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ade:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aec:	f7fc fe8c 	bl	8003808 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af4:	f7fc fe88 	bl	8003808 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e066      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b06:	4b35      	ldr	r3, [pc, #212]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x530>
 8006b12:	e05e      	b.n	8006bd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b14:	4b31      	ldr	r3, [pc, #196]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a30      	ldr	r2, [pc, #192]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fc fe72 	bl	8003808 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b28:	f7fc fe6e 	bl	8003808 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e04c      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b3a:	4b28      	ldr	r3, [pc, #160]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006b46:	4b25      	ldr	r3, [pc, #148]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	4924      	ldr	r1, [pc, #144]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006b4c:	4b25      	ldr	r3, [pc, #148]	@ (8006be4 <HAL_RCC_OscConfig+0x620>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	60cb      	str	r3, [r1, #12]
 8006b52:	e03e      	b.n	8006bd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e039      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006b60:	4b1e      	ldr	r3, [pc, #120]	@ (8006bdc <HAL_RCC_OscConfig+0x618>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f003 0203 	and.w	r2, r3, #3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d12c      	bne.n	8006bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d123      	bne.n	8006bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d11b      	bne.n	8006bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d113      	bne.n	8006bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d109      	bne.n	8006bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d001      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	019f800c 	.word	0x019f800c
 8006be4:	feeefffc 	.word	0xfeeefffc

08006be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e11e      	b.n	8006e3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c00:	4b91      	ldr	r3, [pc, #580]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d910      	bls.n	8006c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0e:	4b8e      	ldr	r3, [pc, #568]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 020f 	bic.w	r2, r3, #15
 8006c16:	498c      	ldr	r1, [pc, #560]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e106      	b.n	8006e3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d073      	beq.n	8006d24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d129      	bne.n	8006c98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c44:	4b81      	ldr	r3, [pc, #516]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0f4      	b.n	8006e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006c54:	f000 f99c 	bl	8006f90 <RCC_GetSysClockFreqFromPLLSource>
 8006c58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8006e50 <HAL_RCC_ClockConfig+0x268>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d93f      	bls.n	8006ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c62:	4b7a      	ldr	r3, [pc, #488]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d009      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d033      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d12f      	bne.n	8006ce2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c82:	4b72      	ldr	r3, [pc, #456]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c8a:	4a70      	ldr	r2, [pc, #448]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c92:	2380      	movs	r3, #128	@ 0x80
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e024      	b.n	8006ce2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d109      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0c6      	b.n	8006e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cb0:	4b66      	ldr	r3, [pc, #408]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0be      	b.n	8006e3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006cc0:	f000 f8ce 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8006cc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4a61      	ldr	r2, [pc, #388]	@ (8006e50 <HAL_RCC_ClockConfig+0x268>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d909      	bls.n	8006ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cce:	4b5f      	ldr	r3, [pc, #380]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006cde:	2380      	movs	r3, #128	@ 0x80
 8006ce0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f023 0203 	bic.w	r2, r3, #3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	4957      	ldr	r1, [pc, #348]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf4:	f7fc fd88 	bl	8003808 <HAL_GetTick>
 8006cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cfa:	e00a      	b.n	8006d12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cfc:	f7fc fd84 	bl	8003808 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e095      	b.n	8006e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d12:	4b4e      	ldr	r3, [pc, #312]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 020c 	and.w	r2, r3, #12
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d1eb      	bne.n	8006cfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d023      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d3c:	4b43      	ldr	r3, [pc, #268]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a42      	ldr	r2, [pc, #264]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006d54:	4b3d      	ldr	r3, [pc, #244]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d5c:	4a3b      	ldr	r2, [pc, #236]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d64:	4b39      	ldr	r3, [pc, #228]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4936      	ldr	r1, [pc, #216]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b80      	cmp	r3, #128	@ 0x80
 8006d7c:	d105      	bne.n	8006d8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006d7e:	4b33      	ldr	r3, [pc, #204]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	4a32      	ldr	r2, [pc, #200]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006d84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d21d      	bcs.n	8006dd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d98:	4b2b      	ldr	r3, [pc, #172]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f023 020f 	bic.w	r2, r3, #15
 8006da0:	4929      	ldr	r1, [pc, #164]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006da8:	f7fc fd2e 	bl	8003808 <HAL_GetTick>
 8006dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db0:	f7fc fd2a 	bl	8003808 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e03b      	b.n	8006e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b20      	ldr	r3, [pc, #128]	@ (8006e48 <HAL_RCC_ClockConfig+0x260>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d1ed      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4917      	ldr	r1, [pc, #92]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dfe:	4b13      	ldr	r3, [pc, #76]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	490f      	ldr	r1, [pc, #60]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e12:	f000 f825 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b0c      	ldr	r3, [pc, #48]	@ (8006e4c <HAL_RCC_ClockConfig+0x264>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	091b      	lsrs	r3, r3, #4
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	490c      	ldr	r1, [pc, #48]	@ (8006e54 <HAL_RCC_ClockConfig+0x26c>)
 8006e24:	5ccb      	ldrb	r3, [r1, r3]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <HAL_RCC_ClockConfig+0x270>)
 8006e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006e32:	4b0a      	ldr	r3, [pc, #40]	@ (8006e5c <HAL_RCC_ClockConfig+0x274>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fc fc9a 	bl	8003770 <HAL_InitTick>
 8006e3c:	4603      	mov	r3, r0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40022000 	.word	0x40022000
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	04c4b400 	.word	0x04c4b400
 8006e54:	08011690 	.word	0x08011690
 8006e58:	2000000c 	.word	0x2000000c
 8006e5c:	20000010 	.word	0x20000010

08006e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006e66:	4b2c      	ldr	r3, [pc, #176]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d102      	bne.n	8006e78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e72:	4b2a      	ldr	r3, [pc, #168]	@ (8006f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	e047      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e78:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 030c 	and.w	r3, r3, #12
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d102      	bne.n	8006e8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e84:	4b25      	ldr	r3, [pc, #148]	@ (8006f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	e03e      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006e8a:	4b23      	ldr	r3, [pc, #140]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 030c 	and.w	r3, r3, #12
 8006e92:	2b0c      	cmp	r3, #12
 8006e94:	d136      	bne.n	8006f04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e96:	4b20      	ldr	r3, [pc, #128]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d10c      	bne.n	8006ece <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eb4:	4a19      	ldr	r2, [pc, #100]	@ (8006f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	4a16      	ldr	r2, [pc, #88]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ebe:	68d2      	ldr	r2, [r2, #12]
 8006ec0:	0a12      	lsrs	r2, r2, #8
 8006ec2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	617b      	str	r3, [r7, #20]
      break;
 8006ecc:	e00c      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ece:	4a13      	ldr	r2, [pc, #76]	@ (8006f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed6:	4a10      	ldr	r2, [pc, #64]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ed8:	68d2      	ldr	r2, [r2, #12]
 8006eda:	0a12      	lsrs	r2, r2, #8
 8006edc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	617b      	str	r3, [r7, #20]
      break;
 8006ee6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	0e5b      	lsrs	r3, r3, #25
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	e001      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f08:	693b      	ldr	r3, [r7, #16]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	00f42400 	.word	0x00f42400

08006f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f24:	4b03      	ldr	r3, [pc, #12]	@ (8006f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f26:	681b      	ldr	r3, [r3, #0]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	2000000c 	.word	0x2000000c

08006f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f3c:	f7ff fff0 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f40:	4602      	mov	r2, r0
 8006f42:	4b06      	ldr	r3, [pc, #24]	@ (8006f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	4904      	ldr	r1, [pc, #16]	@ (8006f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f4e:	5ccb      	ldrb	r3, [r1, r3]
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	080116a0 	.word	0x080116a0

08006f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f68:	f7ff ffda 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	4b06      	ldr	r3, [pc, #24]	@ (8006f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	0adb      	lsrs	r3, r3, #11
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	4904      	ldr	r1, [pc, #16]	@ (8006f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f7a:	5ccb      	ldrb	r3, [r1, r3]
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	080116a0 	.word	0x080116a0

08006f90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f96:	4b1e      	ldr	r3, [pc, #120]	@ (8007010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8007010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	3301      	adds	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d10c      	bne.n	8006fce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fb4:	4a17      	ldr	r2, [pc, #92]	@ (8007014 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	4a14      	ldr	r2, [pc, #80]	@ (8007010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fbe:	68d2      	ldr	r2, [r2, #12]
 8006fc0:	0a12      	lsrs	r2, r2, #8
 8006fc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	617b      	str	r3, [r7, #20]
    break;
 8006fcc:	e00c      	b.n	8006fe8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fce:	4a11      	ldr	r2, [pc, #68]	@ (8007014 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8007010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fd8:	68d2      	ldr	r2, [r2, #12]
 8006fda:	0a12      	lsrs	r2, r2, #8
 8006fdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fe0:	fb02 f303 	mul.w	r3, r2, r3
 8006fe4:	617b      	str	r3, [r7, #20]
    break;
 8006fe6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fe8:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	0e5b      	lsrs	r3, r3, #25
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007002:	687b      	ldr	r3, [r7, #4]
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	40021000 	.word	0x40021000
 8007014:	00f42400 	.word	0x00f42400

08007018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007020:	2300      	movs	r3, #0
 8007022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007024:	2300      	movs	r3, #0
 8007026:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8098 	beq.w	8007166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007036:	2300      	movs	r3, #0
 8007038:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800703a:	4b43      	ldr	r3, [pc, #268]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800703c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10d      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007046:	4b40      	ldr	r3, [pc, #256]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704a:	4a3f      	ldr	r2, [pc, #252]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800704c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007050:	6593      	str	r3, [r2, #88]	@ 0x58
 8007052:	4b3d      	ldr	r3, [pc, #244]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800705a:	60bb      	str	r3, [r7, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800705e:	2301      	movs	r3, #1
 8007060:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007062:	4b3a      	ldr	r3, [pc, #232]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a39      	ldr	r2, [pc, #228]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800706c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800706e:	f7fc fbcb 	bl	8003808 <HAL_GetTick>
 8007072:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007074:	e009      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007076:	f7fc fbc7 	bl	8003808 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d902      	bls.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	74fb      	strb	r3, [r7, #19]
        break;
 8007088:	e005      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800708a:	4b30      	ldr	r3, [pc, #192]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0ef      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007096:	7cfb      	ldrb	r3, [r7, #19]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d159      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800709c:	4b2a      	ldr	r3, [pc, #168]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01e      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d019      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070b8:	4b23      	ldr	r3, [pc, #140]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070c4:	4b20      	ldr	r3, [pc, #128]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070da:	4a1b      	ldr	r2, [pc, #108]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070e4:	4a18      	ldr	r2, [pc, #96]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d016      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f6:	f7fc fb87 	bl	8003808 <HAL_GetTick>
 80070fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070fc:	e00b      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070fe:	f7fc fb83 	bl	8003808 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800710c:	4293      	cmp	r3, r2
 800710e:	d902      	bls.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	74fb      	strb	r3, [r7, #19]
            break;
 8007114:	e006      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007116:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0ec      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007124:	7cfb      	ldrb	r3, [r7, #19]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10b      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800712a:	4b07      	ldr	r3, [pc, #28]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007138:	4903      	ldr	r1, [pc, #12]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007140:	e008      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007142:	7cfb      	ldrb	r3, [r7, #19]
 8007144:	74bb      	strb	r3, [r7, #18]
 8007146:	e005      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007148:	40021000 	.word	0x40021000
 800714c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007150:	7cfb      	ldrb	r3, [r7, #19]
 8007152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007154:	7c7b      	ldrb	r3, [r7, #17]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715a:	4ba6      	ldr	r3, [pc, #664]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800715c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715e:	4aa5      	ldr	r2, [pc, #660]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007164:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007172:	4ba0      	ldr	r3, [pc, #640]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007178:	f023 0203 	bic.w	r2, r3, #3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	499c      	ldr	r1, [pc, #624]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007194:	4b97      	ldr	r3, [pc, #604]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719a:	f023 020c 	bic.w	r2, r3, #12
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	4994      	ldr	r1, [pc, #592]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071b6:	4b8f      	ldr	r3, [pc, #572]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	498b      	ldr	r1, [pc, #556]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071d8:	4b86      	ldr	r3, [pc, #536]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4983      	ldr	r1, [pc, #524]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071fa:	4b7e      	ldr	r3, [pc, #504]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007200:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	497a      	ldr	r1, [pc, #488]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800721c:	4b75      	ldr	r3, [pc, #468]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007222:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	4972      	ldr	r1, [pc, #456]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800723e:	4b6d      	ldr	r3, [pc, #436]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007244:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	4969      	ldr	r1, [pc, #420]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007260:	4b64      	ldr	r3, [pc, #400]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007266:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	4961      	ldr	r1, [pc, #388]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007282:	4b5c      	ldr	r3, [pc, #368]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007290:	4958      	ldr	r1, [pc, #352]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d015      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072a4:	4b53      	ldr	r3, [pc, #332]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	4950      	ldr	r1, [pc, #320]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072c2:	d105      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072c4:	4b4b      	ldr	r3, [pc, #300]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	4a4a      	ldr	r2, [pc, #296]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d015      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072dc:	4b45      	ldr	r3, [pc, #276]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ea:	4942      	ldr	r1, [pc, #264]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072fa:	d105      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072fc:	4b3d      	ldr	r3, [pc, #244]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4a3c      	ldr	r2, [pc, #240]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007306:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d015      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007314:	4b37      	ldr	r3, [pc, #220]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	4934      	ldr	r1, [pc, #208]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007324:	4313      	orrs	r3, r2
 8007326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007332:	d105      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007334:	4b2f      	ldr	r3, [pc, #188]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4a2e      	ldr	r2, [pc, #184]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800733a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800733e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d015      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800734c:	4b29      	ldr	r3, [pc, #164]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800734e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735a:	4926      	ldr	r1, [pc, #152]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800735c:	4313      	orrs	r3, r2
 800735e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800736a:	d105      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800736c:	4b21      	ldr	r3, [pc, #132]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	4a20      	ldr	r2, [pc, #128]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d015      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007384:	4b1b      	ldr	r3, [pc, #108]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007392:	4918      	ldr	r1, [pc, #96]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073a2:	d105      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073a4:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4a12      	ldr	r2, [pc, #72]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d015      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ca:	490a      	ldr	r1, [pc, #40]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073da:	d105      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073dc:	4b05      	ldr	r3, [pc, #20]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4a04      	ldr	r2, [pc, #16]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80073e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40021000 	.word	0x40021000

080073f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e09d      	b.n	8007546 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d108      	bne.n	8007424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800741a:	d009      	beq.n	8007430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	61da      	str	r2, [r3, #28]
 8007422:	e005      	b.n	8007430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fb fa7e 	bl	800294c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007466:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007470:	d902      	bls.n	8007478 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e002      	b.n	800747e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800747c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007486:	d007      	beq.n	8007498 <HAL_SPI_Init+0xa0>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007490:	d002      	beq.n	8007498 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074da:	ea42 0103 	orr.w	r1, r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	0c1b      	lsrs	r3, r3, #16
 80074f4:	f003 0204 	and.w	r2, r3, #4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fc:	f003 0310 	and.w	r3, r3, #16
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007514:	ea42 0103 	orr.w	r1, r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b088      	sub	sp, #32
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	603b      	str	r3, [r7, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800755e:	f7fc f953 	bl	8003808 <HAL_GetTick>
 8007562:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d001      	beq.n	8007578 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007574:	2302      	movs	r3, #2
 8007576:	e15c      	b.n	8007832 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Transmit+0x36>
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e154      	b.n	8007832 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_SPI_Transmit+0x48>
 8007592:	2302      	movs	r3, #2
 8007594:	e14d      	b.n	8007832 <HAL_SPI_Transmit+0x2e4>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2203      	movs	r2, #3
 80075a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	88fa      	ldrh	r2, [r7, #6]
 80075bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075e8:	d10f      	bne.n	800760a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007608:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007614:	2b40      	cmp	r3, #64	@ 0x40
 8007616:	d007      	beq.n	8007628 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007630:	d952      	bls.n	80076d8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_SPI_Transmit+0xf2>
 800763a:	8b7b      	ldrh	r3, [r7, #26]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d145      	bne.n	80076cc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	881a      	ldrh	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007664:	e032      	b.n	80076cc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b02      	cmp	r3, #2
 8007672:	d112      	bne.n	800769a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007678:	881a      	ldrh	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007684:	1c9a      	adds	r2, r3, #2
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007698:	e018      	b.n	80076cc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800769a:	f7fc f8b5 	bl	8003808 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d803      	bhi.n	80076b2 <HAL_SPI_Transmit+0x164>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076b0:	d102      	bne.n	80076b8 <HAL_SPI_Transmit+0x16a>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e0b2      	b.n	8007832 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1c7      	bne.n	8007666 <HAL_SPI_Transmit+0x118>
 80076d6:	e083      	b.n	80077e0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_Transmit+0x198>
 80076e0:	8b7b      	ldrh	r3, [r7, #26]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d177      	bne.n	80077d6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d912      	bls.n	8007716 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f4:	881a      	ldrh	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b02      	subs	r3, #2
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007714:	e05f      	b.n	80077d6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	330c      	adds	r3, #12
 8007720:	7812      	ldrb	r2, [r2, #0]
 8007722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800773c:	e04b      	b.n	80077d6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b02      	cmp	r3, #2
 800774a:	d12b      	bne.n	80077a4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	d912      	bls.n	800777c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	881a      	ldrh	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	1c9a      	adds	r2, r3, #2
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b02      	subs	r3, #2
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800777a:	e02c      	b.n	80077d6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	7812      	ldrb	r2, [r2, #0]
 8007788:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077a2:	e018      	b.n	80077d6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a4:	f7fc f830 	bl	8003808 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d803      	bhi.n	80077bc <HAL_SPI_Transmit+0x26e>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ba:	d102      	bne.n	80077c2 <HAL_SPI_Transmit+0x274>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e02d      	b.n	8007832 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1ae      	bne.n	800773e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fb73 	bl	8007ed0 <SPI_EndRxTxTransaction>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007830:	2300      	movs	r3, #0
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b08a      	sub	sp, #40	@ 0x28
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007848:	2301      	movs	r3, #1
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800784c:	f7fb ffdc 	bl	8003808 <HAL_GetTick>
 8007850:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007858:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007864:	887b      	ldrh	r3, [r7, #2]
 8007866:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007868:	7ffb      	ldrb	r3, [r7, #31]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d00c      	beq.n	8007888 <HAL_SPI_TransmitReceive+0x4e>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007874:	d106      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x4a>
 800787e:	7ffb      	ldrb	r3, [r7, #31]
 8007880:	2b04      	cmp	r3, #4
 8007882:	d001      	beq.n	8007888 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
 8007886:	e1f3      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <HAL_SPI_TransmitReceive+0x60>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_SPI_TransmitReceive+0x60>
 8007894:	887b      	ldrh	r3, [r7, #2]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e1e8      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_SPI_TransmitReceive+0x72>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e1e1      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x436>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d003      	beq.n	80078c8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2205      	movs	r2, #5
 80078c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	887a      	ldrh	r2, [r7, #2]
 80078e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	887a      	ldrh	r2, [r7, #2]
 80078ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	887a      	ldrh	r2, [r7, #2]
 80078f4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800790a:	d802      	bhi.n	8007912 <HAL_SPI_TransmitReceive+0xd8>
 800790c:	8abb      	ldrh	r3, [r7, #20]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d908      	bls.n	8007924 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007920:	605a      	str	r2, [r3, #4]
 8007922:	e007      	b.n	8007934 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007932:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793e:	2b40      	cmp	r3, #64	@ 0x40
 8007940:	d007      	beq.n	8007952 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007950:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800795a:	f240 8083 	bls.w	8007a64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_SPI_TransmitReceive+0x132>
 8007966:	8afb      	ldrh	r3, [r7, #22]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d16f      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007970:	881a      	ldrh	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	1c9a      	adds	r2, r3, #2
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007990:	e05c      	b.n	8007a4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d11b      	bne.n	80079d8 <HAL_SPI_TransmitReceive+0x19e>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d016      	beq.n	80079d8 <HAL_SPI_TransmitReceive+0x19e>
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d113      	bne.n	80079d8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b4:	881a      	ldrh	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	1c9a      	adds	r2, r3, #2
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d11c      	bne.n	8007a20 <HAL_SPI_TransmitReceive+0x1e6>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d016      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	b292      	uxth	r2, r2
 80079fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a04:	1c9a      	adds	r2, r3, #2
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a20:	f7fb fef2 	bl	8003808 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d80d      	bhi.n	8007a4c <HAL_SPI_TransmitReceive+0x212>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a36:	d009      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e111      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d19d      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x158>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d197      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x158>
 8007a62:	e0e5      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_SPI_TransmitReceive+0x23a>
 8007a6c:	8afb      	ldrh	r3, [r7, #22]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	f040 80d1 	bne.w	8007c16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d912      	bls.n	8007aa4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a82:	881a      	ldrh	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8e:	1c9a      	adds	r2, r3, #2
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b02      	subs	r3, #2
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007aa2:	e0b8      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aca:	e0a4      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d134      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x30a>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d02f      	beq.n	8007b44 <HAL_SPI_TransmitReceive+0x30a>
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d12c      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d912      	bls.n	8007b1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af8:	881a      	ldrh	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b04:	1c9a      	adds	r2, r3, #2
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b02      	subs	r3, #2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b18:	e012      	b.n	8007b40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d148      	bne.n	8007be4 <HAL_SPI_TransmitReceive+0x3aa>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d042      	beq.n	8007be4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d923      	bls.n	8007bb2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b74:	b292      	uxth	r2, r2
 8007b76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7c:	1c9a      	adds	r2, r3, #2
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b02      	subs	r3, #2
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d81f      	bhi.n	8007be0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bae:	605a      	str	r2, [r3, #4]
 8007bb0:	e016      	b.n	8007be0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f103 020c 	add.w	r2, r3, #12
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbe:	7812      	ldrb	r2, [r2, #0]
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007be0:	2301      	movs	r3, #1
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007be4:	f7fb fe10 	bl	8003808 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d803      	bhi.n	8007bfc <HAL_SPI_TransmitReceive+0x3c2>
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bfa:	d102      	bne.n	8007c02 <HAL_SPI_TransmitReceive+0x3c8>
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e02c      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f47f af55 	bne.w	8007acc <HAL_SPI_TransmitReceive+0x292>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f47f af4e 	bne.w	8007acc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f94b 	bl	8007ed0 <SPI_EndRxTxTransaction>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d008      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e00e      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e000      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
  }
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3728      	adds	r7, #40	@ 0x28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c86:	b2db      	uxtb	r3, r3
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ca4:	f7fb fdb0 	bl	8003808 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cb4:	f7fb fda8 	bl	8003808 <HAL_GetTick>
 8007cb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cba:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	015b      	lsls	r3, r3, #5
 8007cc0:	0d1b      	lsrs	r3, r3, #20
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	fb02 f303 	mul.w	r3, r2, r3
 8007cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cca:	e054      	b.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd2:	d050      	beq.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cd4:	f7fb fd98 	bl	8003808 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d902      	bls.n	8007cea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d13d      	bne.n	8007d66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d02:	d111      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d0c:	d004      	beq.n	8007d18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d16:	d107      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d30:	d10f      	bne.n	8007d52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e017      	b.n	8007d96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	bf0c      	ite	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	2300      	movne	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d19b      	bne.n	8007ccc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	2000000c 	.word	0x2000000c

08007da4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	@ 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007db6:	f7fb fd27 	bl	8003808 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007dc6:	f7fb fd1f 	bl	8003808 <HAL_GetTick>
 8007dca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8007ecc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	00da      	lsls	r2, r3, #3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	0d1b      	lsrs	r3, r3, #20
 8007de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007dec:	e060      	b.n	8007eb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007df4:	d107      	bne.n	8007e06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e0c:	d050      	beq.n	8007eb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e0e:	f7fb fcfb 	bl	8003808 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d902      	bls.n	8007e24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d13d      	bne.n	8007ea0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e3c:	d111      	bne.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e46:	d004      	beq.n	8007e52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e50:	d107      	bne.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e6a:	d10f      	bne.n	8007e8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e010      	b.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d196      	bne.n	8007dee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3728      	adds	r7, #40	@ 0x28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	2000000c 	.word	0x2000000c

08007ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff ff5b 	bl	8007da4 <SPI_WaitFifoStateUntilTimeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e027      	b.n	8007f54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2180      	movs	r1, #128	@ 0x80
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fec0 	bl	8007c94 <SPI_WaitFlagStateUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f1e:	f043 0220 	orr.w	r2, r3, #32
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e014      	b.n	8007f54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff ff34 	bl	8007da4 <SPI_WaitFifoStateUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f46:	f043 0220 	orr.w	r2, r3, #32
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e000      	b.n	8007f54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e049      	b.n	8008002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fb f85c 	bl	8003040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f000 fd26 	bl	80089ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e049      	b.n	80080b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f841 	bl	80080b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f000 fccf 	bl	80089ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d109      	bne.n	80080f0 <HAL_TIM_PWM_Start+0x24>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	e03c      	b.n	800816a <HAL_TIM_PWM_Start+0x9e>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d109      	bne.n	800810a <HAL_TIM_PWM_Start+0x3e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b01      	cmp	r3, #1
 8008100:	bf14      	ite	ne
 8008102:	2301      	movne	r3, #1
 8008104:	2300      	moveq	r3, #0
 8008106:	b2db      	uxtb	r3, r3
 8008108:	e02f      	b.n	800816a <HAL_TIM_PWM_Start+0x9e>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d109      	bne.n	8008124 <HAL_TIM_PWM_Start+0x58>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	e022      	b.n	800816a <HAL_TIM_PWM_Start+0x9e>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2b0c      	cmp	r3, #12
 8008128:	d109      	bne.n	800813e <HAL_TIM_PWM_Start+0x72>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b01      	cmp	r3, #1
 8008134:	bf14      	ite	ne
 8008136:	2301      	movne	r3, #1
 8008138:	2300      	moveq	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	e015      	b.n	800816a <HAL_TIM_PWM_Start+0x9e>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b10      	cmp	r3, #16
 8008142:	d109      	bne.n	8008158 <HAL_TIM_PWM_Start+0x8c>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	bf14      	ite	ne
 8008150:	2301      	movne	r3, #1
 8008152:	2300      	moveq	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	e008      	b.n	800816a <HAL_TIM_PWM_Start+0x9e>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	bf14      	ite	ne
 8008164:	2301      	movne	r3, #1
 8008166:	2300      	moveq	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e097      	b.n	80082a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d104      	bne.n	8008182 <HAL_TIM_PWM_Start+0xb6>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008180:	e023      	b.n	80081ca <HAL_TIM_PWM_Start+0xfe>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b04      	cmp	r3, #4
 8008186:	d104      	bne.n	8008192 <HAL_TIM_PWM_Start+0xc6>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008190:	e01b      	b.n	80081ca <HAL_TIM_PWM_Start+0xfe>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b08      	cmp	r3, #8
 8008196:	d104      	bne.n	80081a2 <HAL_TIM_PWM_Start+0xd6>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081a0:	e013      	b.n	80081ca <HAL_TIM_PWM_Start+0xfe>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b0c      	cmp	r3, #12
 80081a6:	d104      	bne.n	80081b2 <HAL_TIM_PWM_Start+0xe6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081b0:	e00b      	b.n	80081ca <HAL_TIM_PWM_Start+0xfe>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b10      	cmp	r3, #16
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_PWM_Start+0xf6>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081c0:	e003      	b.n	80081ca <HAL_TIM_PWM_Start+0xfe>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2201      	movs	r2, #1
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 f838 	bl	8009248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a33      	ldr	r2, [pc, #204]	@ (80082ac <HAL_TIM_PWM_Start+0x1e0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <HAL_TIM_PWM_Start+0x13e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a32      	ldr	r2, [pc, #200]	@ (80082b0 <HAL_TIM_PWM_Start+0x1e4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00e      	beq.n	800820a <HAL_TIM_PWM_Start+0x13e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a30      	ldr	r2, [pc, #192]	@ (80082b4 <HAL_TIM_PWM_Start+0x1e8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d009      	beq.n	800820a <HAL_TIM_PWM_Start+0x13e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a2f      	ldr	r2, [pc, #188]	@ (80082b8 <HAL_TIM_PWM_Start+0x1ec>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d004      	beq.n	800820a <HAL_TIM_PWM_Start+0x13e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a2d      	ldr	r2, [pc, #180]	@ (80082bc <HAL_TIM_PWM_Start+0x1f0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d101      	bne.n	800820e <HAL_TIM_PWM_Start+0x142>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <HAL_TIM_PWM_Start+0x144>
 800820e:	2300      	movs	r3, #0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d007      	beq.n	8008224 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008222:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a20      	ldr	r2, [pc, #128]	@ (80082ac <HAL_TIM_PWM_Start+0x1e0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <HAL_TIM_PWM_Start+0x194>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008236:	d013      	beq.n	8008260 <HAL_TIM_PWM_Start+0x194>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a20      	ldr	r2, [pc, #128]	@ (80082c0 <HAL_TIM_PWM_Start+0x1f4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00e      	beq.n	8008260 <HAL_TIM_PWM_Start+0x194>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1f      	ldr	r2, [pc, #124]	@ (80082c4 <HAL_TIM_PWM_Start+0x1f8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_TIM_PWM_Start+0x194>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a17      	ldr	r2, [pc, #92]	@ (80082b0 <HAL_TIM_PWM_Start+0x1e4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_TIM_PWM_Start+0x194>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a16      	ldr	r2, [pc, #88]	@ (80082b4 <HAL_TIM_PWM_Start+0x1e8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d115      	bne.n	800828c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	4b18      	ldr	r3, [pc, #96]	@ (80082c8 <HAL_TIM_PWM_Start+0x1fc>)
 8008268:	4013      	ands	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b06      	cmp	r3, #6
 8008270:	d015      	beq.n	800829e <HAL_TIM_PWM_Start+0x1d2>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008278:	d011      	beq.n	800829e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f042 0201 	orr.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828a:	e008      	b.n	800829e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0201 	orr.w	r2, r2, #1
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	e000      	b.n	80082a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	40012c00 	.word	0x40012c00
 80082b0:	40013400 	.word	0x40013400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40014400 	.word	0x40014400
 80082bc:	40014800 	.word	0x40014800
 80082c0:	40000400 	.word	0x40000400
 80082c4:	40000800 	.word	0x40000800
 80082c8:	00010007 	.word	0x00010007

080082cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d020      	beq.n	8008330 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01b      	beq.n	8008330 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0202 	mvn.w	r2, #2
 8008300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb4a 	bl	80089b0 <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fb3c 	bl	800899c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fb4d 	bl	80089c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d020      	beq.n	800837c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01b      	beq.n	800837c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0204 	mvn.w	r2, #4
 800834c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2202      	movs	r2, #2
 8008352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb24 	bl	80089b0 <HAL_TIM_IC_CaptureCallback>
 8008368:	e005      	b.n	8008376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb16 	bl	800899c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fb27 	bl	80089c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d020      	beq.n	80083c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f003 0308 	and.w	r3, r3, #8
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01b      	beq.n	80083c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f06f 0208 	mvn.w	r2, #8
 8008398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2204      	movs	r2, #4
 800839e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	f003 0303 	and.w	r3, r3, #3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fafe 	bl	80089b0 <HAL_TIM_IC_CaptureCallback>
 80083b4:	e005      	b.n	80083c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 faf0 	bl	800899c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fb01 	bl	80089c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f003 0310 	and.w	r3, r3, #16
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d020      	beq.n	8008414 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01b      	beq.n	8008414 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0210 	mvn.w	r2, #16
 80083e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2208      	movs	r2, #8
 80083ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fad8 	bl	80089b0 <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 faca 	bl	800899c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fadb 	bl	80089c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00c      	beq.n	8008438 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f06f 0201 	mvn.w	r2, #1
 8008430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 faa8 	bl	8008988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00c      	beq.n	8008466 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d007      	beq.n	8008466 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800845e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 ffa3 	bl	80093ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00c      	beq.n	800848a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008476:	2b00      	cmp	r3, #0
 8008478:	d007      	beq.n	800848a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 ff9b 	bl	80093c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00c      	beq.n	80084ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fa95 	bl	80089d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d007      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f06f 0220 	mvn.w	r2, #32
 80084ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 ff63 	bl	8009398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00c      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80084ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 ff6f 	bl	80093d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00c      	beq.n	800851a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 ff67 	bl	80093e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 ff5f 	bl	80093fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00c      	beq.n	8008562 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800855a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 ff57 	bl	8009410 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008582:	2b01      	cmp	r3, #1
 8008584:	d101      	bne.n	800858a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008586:	2302      	movs	r3, #2
 8008588:	e0ff      	b.n	800878a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b14      	cmp	r3, #20
 8008596:	f200 80f0 	bhi.w	800877a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800859a:	a201      	add	r2, pc, #4	@ (adr r2, 80085a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085f5 	.word	0x080085f5
 80085a4:	0800877b 	.word	0x0800877b
 80085a8:	0800877b 	.word	0x0800877b
 80085ac:	0800877b 	.word	0x0800877b
 80085b0:	08008635 	.word	0x08008635
 80085b4:	0800877b 	.word	0x0800877b
 80085b8:	0800877b 	.word	0x0800877b
 80085bc:	0800877b 	.word	0x0800877b
 80085c0:	08008677 	.word	0x08008677
 80085c4:	0800877b 	.word	0x0800877b
 80085c8:	0800877b 	.word	0x0800877b
 80085cc:	0800877b 	.word	0x0800877b
 80085d0:	080086b7 	.word	0x080086b7
 80085d4:	0800877b 	.word	0x0800877b
 80085d8:	0800877b 	.word	0x0800877b
 80085dc:	0800877b 	.word	0x0800877b
 80085e0:	080086f9 	.word	0x080086f9
 80085e4:	0800877b 	.word	0x0800877b
 80085e8:	0800877b 	.word	0x0800877b
 80085ec:	0800877b 	.word	0x0800877b
 80085f0:	08008739 	.word	0x08008739
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68b9      	ldr	r1, [r7, #8]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fa92 	bl	8008b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0208 	orr.w	r2, r2, #8
 800860e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0204 	bic.w	r2, r2, #4
 800861e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6999      	ldr	r1, [r3, #24]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	691a      	ldr	r2, [r3, #16]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	619a      	str	r2, [r3, #24]
      break;
 8008632:	e0a5      	b.n	8008780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fb02 	bl	8008c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800864e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800865e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6999      	ldr	r1, [r3, #24]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	021a      	lsls	r2, r3, #8
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	619a      	str	r2, [r3, #24]
      break;
 8008674:	e084      	b.n	8008780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fb6b 	bl	8008d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0208 	orr.w	r2, r2, #8
 8008690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69da      	ldr	r2, [r3, #28]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0204 	bic.w	r2, r2, #4
 80086a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69d9      	ldr	r1, [r3, #28]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	691a      	ldr	r2, [r3, #16]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	61da      	str	r2, [r3, #28]
      break;
 80086b4:	e064      	b.n	8008780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68b9      	ldr	r1, [r7, #8]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fbd3 	bl	8008e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69da      	ldr	r2, [r3, #28]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69d9      	ldr	r1, [r3, #28]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	021a      	lsls	r2, r3, #8
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	61da      	str	r2, [r3, #28]
      break;
 80086f6:	e043      	b.n	8008780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fc3c 	bl	8008f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0208 	orr.w	r2, r2, #8
 8008712:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0204 	bic.w	r2, r2, #4
 8008722:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	691a      	ldr	r2, [r3, #16]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008736:	e023      	b.n	8008780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fc80 	bl	8009044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008752:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008762:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	021a      	lsls	r2, r3, #8
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	430a      	orrs	r2, r1
 8008776:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008778:	e002      	b.n	8008780 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	75fb      	strb	r3, [r7, #23]
      break;
 800877e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop

08008794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d101      	bne.n	80087b0 <HAL_TIM_ConfigClockSource+0x1c>
 80087ac:	2302      	movs	r3, #2
 80087ae:	e0de      	b.n	800896e <HAL_TIM_ConfigClockSource+0x1da>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80087ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a63      	ldr	r2, [pc, #396]	@ (8008978 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	f000 80a9 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 80087f0:	4a61      	ldr	r2, [pc, #388]	@ (8008978 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f200 80ae 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f8:	4a60      	ldr	r2, [pc, #384]	@ (800897c <HAL_TIM_ConfigClockSource+0x1e8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f000 80a1 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 8008800:	4a5e      	ldr	r2, [pc, #376]	@ (800897c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	f200 80a6 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008808:	4a5d      	ldr	r2, [pc, #372]	@ (8008980 <HAL_TIM_ConfigClockSource+0x1ec>)
 800880a:	4293      	cmp	r3, r2
 800880c:	f000 8099 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 8008810:	4a5b      	ldr	r2, [pc, #364]	@ (8008980 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f200 809e 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008818:	4a5a      	ldr	r2, [pc, #360]	@ (8008984 <HAL_TIM_ConfigClockSource+0x1f0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	f000 8091 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 8008820:	4a58      	ldr	r2, [pc, #352]	@ (8008984 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	f200 8096 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008828:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800882c:	f000 8089 	beq.w	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 8008830:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008834:	f200 808e 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800883c:	d03e      	beq.n	80088bc <HAL_TIM_ConfigClockSource+0x128>
 800883e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008842:	f200 8087 	bhi.w	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800884a:	f000 8086 	beq.w	800895a <HAL_TIM_ConfigClockSource+0x1c6>
 800884e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008852:	d87f      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008854:	2b70      	cmp	r3, #112	@ 0x70
 8008856:	d01a      	beq.n	800888e <HAL_TIM_ConfigClockSource+0xfa>
 8008858:	2b70      	cmp	r3, #112	@ 0x70
 800885a:	d87b      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 800885c:	2b60      	cmp	r3, #96	@ 0x60
 800885e:	d050      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x16e>
 8008860:	2b60      	cmp	r3, #96	@ 0x60
 8008862:	d877      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008864:	2b50      	cmp	r3, #80	@ 0x50
 8008866:	d03c      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x14e>
 8008868:	2b50      	cmp	r3, #80	@ 0x50
 800886a:	d873      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 800886c:	2b40      	cmp	r3, #64	@ 0x40
 800886e:	d058      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0x18e>
 8008870:	2b40      	cmp	r3, #64	@ 0x40
 8008872:	d86f      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008874:	2b30      	cmp	r3, #48	@ 0x30
 8008876:	d064      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 8008878:	2b30      	cmp	r3, #48	@ 0x30
 800887a:	d86b      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 800887c:	2b20      	cmp	r3, #32
 800887e:	d060      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d867      	bhi.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d05c      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 8008888:	2b10      	cmp	r3, #16
 800888a:	d05a      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x1ae>
 800888c:	e062      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800889e:	f000 fcb3 	bl	8009208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80088b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	609a      	str	r2, [r3, #8]
      break;
 80088ba:	e04f      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088cc:	f000 fc9c 	bl	8009208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088de:	609a      	str	r2, [r3, #8]
      break;
 80088e0:	e03c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ee:	461a      	mov	r2, r3
 80088f0:	f000 fc0e 	bl	8009110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2150      	movs	r1, #80	@ 0x50
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fc67 	bl	80091ce <TIM_ITRx_SetConfig>
      break;
 8008900:	e02c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800890e:	461a      	mov	r2, r3
 8008910:	f000 fc2d 	bl	800916e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2160      	movs	r1, #96	@ 0x60
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fc57 	bl	80091ce <TIM_ITRx_SetConfig>
      break;
 8008920:	e01c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800892e:	461a      	mov	r2, r3
 8008930:	f000 fbee 	bl	8009110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2140      	movs	r1, #64	@ 0x40
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fc47 	bl	80091ce <TIM_ITRx_SetConfig>
      break;
 8008940:	e00c      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f000 fc3e 	bl	80091ce <TIM_ITRx_SetConfig>
      break;
 8008952:	e003      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	e000      	b.n	800895c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800895a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	00100070 	.word	0x00100070
 800897c:	00100040 	.word	0x00100040
 8008980:	00100030 	.word	0x00100030
 8008984:	00100020 	.word	0x00100020

08008988 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a42      	ldr	r2, [pc, #264]	@ (8008b08 <TIM_Base_SetConfig+0x11c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00f      	beq.n	8008a24 <TIM_Base_SetConfig+0x38>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a0a:	d00b      	beq.n	8008a24 <TIM_Base_SetConfig+0x38>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8008b0c <TIM_Base_SetConfig+0x120>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d007      	beq.n	8008a24 <TIM_Base_SetConfig+0x38>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a3e      	ldr	r2, [pc, #248]	@ (8008b10 <TIM_Base_SetConfig+0x124>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_Base_SetConfig+0x38>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8008b14 <TIM_Base_SetConfig+0x128>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d108      	bne.n	8008a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a33      	ldr	r2, [pc, #204]	@ (8008b08 <TIM_Base_SetConfig+0x11c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d01b      	beq.n	8008a76 <TIM_Base_SetConfig+0x8a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a44:	d017      	beq.n	8008a76 <TIM_Base_SetConfig+0x8a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a30      	ldr	r2, [pc, #192]	@ (8008b0c <TIM_Base_SetConfig+0x120>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d013      	beq.n	8008a76 <TIM_Base_SetConfig+0x8a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a2f      	ldr	r2, [pc, #188]	@ (8008b10 <TIM_Base_SetConfig+0x124>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00f      	beq.n	8008a76 <TIM_Base_SetConfig+0x8a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a2e      	ldr	r2, [pc, #184]	@ (8008b14 <TIM_Base_SetConfig+0x128>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00b      	beq.n	8008a76 <TIM_Base_SetConfig+0x8a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a2d      	ldr	r2, [pc, #180]	@ (8008b18 <TIM_Base_SetConfig+0x12c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d007      	beq.n	8008a76 <TIM_Base_SetConfig+0x8a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a2c      	ldr	r2, [pc, #176]	@ (8008b1c <TIM_Base_SetConfig+0x130>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d003      	beq.n	8008a76 <TIM_Base_SetConfig+0x8a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a2b      	ldr	r2, [pc, #172]	@ (8008b20 <TIM_Base_SetConfig+0x134>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d108      	bne.n	8008a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a16      	ldr	r2, [pc, #88]	@ (8008b08 <TIM_Base_SetConfig+0x11c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00f      	beq.n	8008ad4 <TIM_Base_SetConfig+0xe8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	@ (8008b14 <TIM_Base_SetConfig+0x128>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00b      	beq.n	8008ad4 <TIM_Base_SetConfig+0xe8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a16      	ldr	r2, [pc, #88]	@ (8008b18 <TIM_Base_SetConfig+0x12c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d007      	beq.n	8008ad4 <TIM_Base_SetConfig+0xe8>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a15      	ldr	r2, [pc, #84]	@ (8008b1c <TIM_Base_SetConfig+0x130>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d003      	beq.n	8008ad4 <TIM_Base_SetConfig+0xe8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a14      	ldr	r2, [pc, #80]	@ (8008b20 <TIM_Base_SetConfig+0x134>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d103      	bne.n	8008adc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	691a      	ldr	r2, [r3, #16]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d105      	bne.n	8008afa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f023 0201 	bic.w	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	611a      	str	r2, [r3, #16]
  }
}
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	40000800 	.word	0x40000800
 8008b14:	40013400 	.word	0x40013400
 8008b18:	40014000 	.word	0x40014000
 8008b1c:	40014400 	.word	0x40014400
 8008b20:	40014800 	.word	0x40014800

08008b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	f023 0201 	bic.w	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f023 0302 	bic.w	r3, r3, #2
 8008b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8008c30 <TIM_OC1_SetConfig+0x10c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00f      	beq.n	8008ba4 <TIM_OC1_SetConfig+0x80>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a2b      	ldr	r2, [pc, #172]	@ (8008c34 <TIM_OC1_SetConfig+0x110>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00b      	beq.n	8008ba4 <TIM_OC1_SetConfig+0x80>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8008c38 <TIM_OC1_SetConfig+0x114>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d007      	beq.n	8008ba4 <TIM_OC1_SetConfig+0x80>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a29      	ldr	r2, [pc, #164]	@ (8008c3c <TIM_OC1_SetConfig+0x118>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d003      	beq.n	8008ba4 <TIM_OC1_SetConfig+0x80>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a28      	ldr	r2, [pc, #160]	@ (8008c40 <TIM_OC1_SetConfig+0x11c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d10c      	bne.n	8008bbe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f023 0308 	bic.w	r3, r3, #8
 8008baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f023 0304 	bic.w	r3, r3, #4
 8008bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8008c30 <TIM_OC1_SetConfig+0x10c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00f      	beq.n	8008be6 <TIM_OC1_SetConfig+0xc2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8008c34 <TIM_OC1_SetConfig+0x110>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00b      	beq.n	8008be6 <TIM_OC1_SetConfig+0xc2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a19      	ldr	r2, [pc, #100]	@ (8008c38 <TIM_OC1_SetConfig+0x114>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d007      	beq.n	8008be6 <TIM_OC1_SetConfig+0xc2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <TIM_OC1_SetConfig+0x118>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_OC1_SetConfig+0xc2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a17      	ldr	r2, [pc, #92]	@ (8008c40 <TIM_OC1_SetConfig+0x11c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d111      	bne.n	8008c0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	621a      	str	r2, [r3, #32]
}
 8008c24:	bf00      	nop
 8008c26:	371c      	adds	r7, #28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	40012c00 	.word	0x40012c00
 8008c34:	40013400 	.word	0x40013400
 8008c38:	40014000 	.word	0x40014000
 8008c3c:	40014400 	.word	0x40014400
 8008c40:	40014800 	.word	0x40014800

08008c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	f023 0210 	bic.w	r2, r3, #16
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f023 0320 	bic.w	r3, r3, #32
 8008c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a28      	ldr	r2, [pc, #160]	@ (8008d44 <TIM_OC2_SetConfig+0x100>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_OC2_SetConfig+0x6c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a27      	ldr	r2, [pc, #156]	@ (8008d48 <TIM_OC2_SetConfig+0x104>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d10d      	bne.n	8008ccc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a1d      	ldr	r2, [pc, #116]	@ (8008d44 <TIM_OC2_SetConfig+0x100>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_OC2_SetConfig+0xb0>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8008d48 <TIM_OC2_SetConfig+0x104>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_OC2_SetConfig+0xb0>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a1b      	ldr	r2, [pc, #108]	@ (8008d4c <TIM_OC2_SetConfig+0x108>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_OC2_SetConfig+0xb0>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d50 <TIM_OC2_SetConfig+0x10c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_OC2_SetConfig+0xb0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a19      	ldr	r2, [pc, #100]	@ (8008d54 <TIM_OC2_SetConfig+0x110>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d113      	bne.n	8008d1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	621a      	str	r2, [r3, #32]
}
 8008d36:	bf00      	nop
 8008d38:	371c      	adds	r7, #28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	40012c00 	.word	0x40012c00
 8008d48:	40013400 	.word	0x40013400
 8008d4c:	40014000 	.word	0x40014000
 8008d50:	40014400 	.word	0x40014400
 8008d54:	40014800 	.word	0x40014800

08008d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a27      	ldr	r2, [pc, #156]	@ (8008e54 <TIM_OC3_SetConfig+0xfc>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d003      	beq.n	8008dc2 <TIM_OC3_SetConfig+0x6a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a26      	ldr	r2, [pc, #152]	@ (8008e58 <TIM_OC3_SetConfig+0x100>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d10d      	bne.n	8008dde <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e54 <TIM_OC3_SetConfig+0xfc>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00f      	beq.n	8008e06 <TIM_OC3_SetConfig+0xae>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e58 <TIM_OC3_SetConfig+0x100>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00b      	beq.n	8008e06 <TIM_OC3_SetConfig+0xae>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e5c <TIM_OC3_SetConfig+0x104>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <TIM_OC3_SetConfig+0xae>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a19      	ldr	r2, [pc, #100]	@ (8008e60 <TIM_OC3_SetConfig+0x108>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d003      	beq.n	8008e06 <TIM_OC3_SetConfig+0xae>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a18      	ldr	r2, [pc, #96]	@ (8008e64 <TIM_OC3_SetConfig+0x10c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d113      	bne.n	8008e2e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	621a      	str	r2, [r3, #32]
}
 8008e48:	bf00      	nop
 8008e4a:	371c      	adds	r7, #28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	40012c00 	.word	0x40012c00
 8008e58:	40013400 	.word	0x40013400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	031b      	lsls	r3, r3, #12
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a28      	ldr	r2, [pc, #160]	@ (8008f68 <TIM_OC4_SetConfig+0x100>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC4_SetConfig+0x6c>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a27      	ldr	r2, [pc, #156]	@ (8008f6c <TIM_OC4_SetConfig+0x104>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d10d      	bne.n	8008ef0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	031b      	lsls	r3, r3, #12
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8008f68 <TIM_OC4_SetConfig+0x100>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d00f      	beq.n	8008f18 <TIM_OC4_SetConfig+0xb0>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a1c      	ldr	r2, [pc, #112]	@ (8008f6c <TIM_OC4_SetConfig+0x104>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00b      	beq.n	8008f18 <TIM_OC4_SetConfig+0xb0>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a1b      	ldr	r2, [pc, #108]	@ (8008f70 <TIM_OC4_SetConfig+0x108>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d007      	beq.n	8008f18 <TIM_OC4_SetConfig+0xb0>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008f74 <TIM_OC4_SetConfig+0x10c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_OC4_SetConfig+0xb0>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a19      	ldr	r2, [pc, #100]	@ (8008f78 <TIM_OC4_SetConfig+0x110>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d113      	bne.n	8008f40 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	019b      	lsls	r3, r3, #6
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	019b      	lsls	r3, r3, #6
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	621a      	str	r2, [r3, #32]
}
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40012c00 	.word	0x40012c00
 8008f6c:	40013400 	.word	0x40013400
 8008f70:	40014000 	.word	0x40014000
 8008f74:	40014400 	.word	0x40014400
 8008f78:	40014800 	.word	0x40014800

08008f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	041b      	lsls	r3, r3, #16
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a17      	ldr	r2, [pc, #92]	@ (8009030 <TIM_OC5_SetConfig+0xb4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d00f      	beq.n	8008ff6 <TIM_OC5_SetConfig+0x7a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a16      	ldr	r2, [pc, #88]	@ (8009034 <TIM_OC5_SetConfig+0xb8>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00b      	beq.n	8008ff6 <TIM_OC5_SetConfig+0x7a>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a15      	ldr	r2, [pc, #84]	@ (8009038 <TIM_OC5_SetConfig+0xbc>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d007      	beq.n	8008ff6 <TIM_OC5_SetConfig+0x7a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a14      	ldr	r2, [pc, #80]	@ (800903c <TIM_OC5_SetConfig+0xc0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d003      	beq.n	8008ff6 <TIM_OC5_SetConfig+0x7a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a13      	ldr	r2, [pc, #76]	@ (8009040 <TIM_OC5_SetConfig+0xc4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d109      	bne.n	800900a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	621a      	str	r2, [r3, #32]
}
 8009024:	bf00      	nop
 8009026:	371c      	adds	r7, #28
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	40012c00 	.word	0x40012c00
 8009034:	40013400 	.word	0x40013400
 8009038:	40014000 	.word	0x40014000
 800903c:	40014400 	.word	0x40014400
 8009040:	40014800 	.word	0x40014800

08009044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800908a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	051b      	lsls	r3, r3, #20
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	4313      	orrs	r3, r2
 8009096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a18      	ldr	r2, [pc, #96]	@ (80090fc <TIM_OC6_SetConfig+0xb8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00f      	beq.n	80090c0 <TIM_OC6_SetConfig+0x7c>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a17      	ldr	r2, [pc, #92]	@ (8009100 <TIM_OC6_SetConfig+0xbc>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00b      	beq.n	80090c0 <TIM_OC6_SetConfig+0x7c>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a16      	ldr	r2, [pc, #88]	@ (8009104 <TIM_OC6_SetConfig+0xc0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d007      	beq.n	80090c0 <TIM_OC6_SetConfig+0x7c>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a15      	ldr	r2, [pc, #84]	@ (8009108 <TIM_OC6_SetConfig+0xc4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_OC6_SetConfig+0x7c>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a14      	ldr	r2, [pc, #80]	@ (800910c <TIM_OC6_SetConfig+0xc8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d109      	bne.n	80090d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	029b      	lsls	r3, r3, #10
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	621a      	str	r2, [r3, #32]
}
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40012c00 	.word	0x40012c00
 8009100:	40013400 	.word	0x40013400
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800

08009110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	f023 0201 	bic.w	r2, r3, #1
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800913a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f023 030a 	bic.w	r3, r3, #10
 800914c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800916e:	b480      	push	{r7}
 8009170:	b087      	sub	sp, #28
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	f023 0210 	bic.w	r2, r3, #16
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	031b      	lsls	r3, r3, #12
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	621a      	str	r2, [r3, #32]
}
 80091c2:	bf00      	nop
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b085      	sub	sp, #20
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80091e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f043 0307 	orr.w	r3, r3, #7
 80091f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	609a      	str	r2, [r3, #8]
}
 80091fc:	bf00      	nop
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	021a      	lsls	r2, r3, #8
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	431a      	orrs	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4313      	orrs	r3, r2
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	4313      	orrs	r3, r2
 8009234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	bf00      	nop
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f003 031f 	and.w	r3, r3, #31
 800925a:	2201      	movs	r2, #1
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	43db      	mvns	r3, r3
 800926a:	401a      	ands	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6a1a      	ldr	r2, [r3, #32]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f003 031f 	and.w	r3, r3, #31
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	fa01 f303 	lsl.w	r3, r1, r3
 8009280:	431a      	orrs	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	621a      	str	r2, [r3, #32]
}
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d101      	bne.n	80092ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092a8:	2302      	movs	r3, #2
 80092aa:	e065      	b.n	8009378 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d004      	beq.n	80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a2b      	ldr	r2, [pc, #172]	@ (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d108      	bne.n	80092f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80092f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	4313      	orrs	r3, r2
 8009306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a1b      	ldr	r2, [pc, #108]	@ (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d018      	beq.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009322:	d013      	beq.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a18      	ldr	r2, [pc, #96]	@ (800938c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00e      	beq.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a17      	ldr	r2, [pc, #92]	@ (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d009      	beq.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a12      	ldr	r2, [pc, #72]	@ (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d004      	beq.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a13      	ldr	r2, [pc, #76]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d10c      	bne.n	8009366 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009352:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	4313      	orrs	r3, r2
 800935c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	40012c00 	.word	0x40012c00
 8009388:	40013400 	.word	0x40013400
 800938c:	40000400 	.word	0x40000400
 8009390:	40000800 	.word	0x40000800
 8009394:	40014000 	.word	0x40014000

08009398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e042      	b.n	80094bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943c:	2b00      	cmp	r3, #0
 800943e:	d106      	bne.n	800944e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7f9 ff01 	bl	8003250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2224      	movs	r2, #36	@ 0x24
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 f848 	bl	800a504 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fd79 	bl	8009f6c <UART_SetConfig>
 800947a:	4603      	mov	r3, r0
 800947c:	2b01      	cmp	r3, #1
 800947e:	d101      	bne.n	8009484 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e01b      	b.n	80094bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0201 	orr.w	r2, r2, #1
 80094b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f8c7 	bl	800a648 <UART_CheckIdleState>
 80094ba:	4603      	mov	r3, r0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b08a      	sub	sp, #40	@ 0x28
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	4613      	mov	r3, r2
 80094d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094da:	2b20      	cmp	r3, #32
 80094dc:	d17b      	bne.n	80095d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <HAL_UART_Transmit+0x26>
 80094e4:	88fb      	ldrh	r3, [r7, #6]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e074      	b.n	80095d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2221      	movs	r2, #33	@ 0x21
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094fe:	f7fa f983 	bl	8003808 <HAL_GetTick>
 8009502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	88fa      	ldrh	r2, [r7, #6]
 8009508:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	88fa      	ldrh	r2, [r7, #6]
 8009510:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800951c:	d108      	bne.n	8009530 <HAL_UART_Transmit+0x6c>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d104      	bne.n	8009530 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	61bb      	str	r3, [r7, #24]
 800952e:	e003      	b.n	8009538 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009534:	2300      	movs	r3, #0
 8009536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009538:	e030      	b.n	800959c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2200      	movs	r2, #0
 8009542:	2180      	movs	r1, #128	@ 0x80
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f001 f929 	bl	800a79c <UART_WaitOnFlagUntilTimeout>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2220      	movs	r2, #32
 8009554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e03d      	b.n	80095d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10b      	bne.n	800957a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009570:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	3302      	adds	r3, #2
 8009576:	61bb      	str	r3, [r7, #24]
 8009578:	e007      	b.n	800958a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	781a      	ldrb	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	3301      	adds	r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009590:	b29b      	uxth	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	b29a      	uxth	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1c8      	bne.n	800953a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2200      	movs	r2, #0
 80095b0:	2140      	movs	r1, #64	@ 0x40
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f001 f8f2 	bl	800a79c <UART_WaitOnFlagUntilTimeout>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d005      	beq.n	80095ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e006      	b.n	80095d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e000      	b.n	80095d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80095d6:	2302      	movs	r3, #2
  }
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08a      	sub	sp, #40	@ 0x28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d137      	bne.n	8009668 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <HAL_UART_Receive_DMA+0x24>
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e030      	b.n	800966a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a18      	ldr	r2, [pc, #96]	@ (8009674 <HAL_UART_Receive_DMA+0x94>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d01f      	beq.n	8009658 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d018      	beq.n	8009658 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	613b      	str	r3, [r7, #16]
   return(result);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009644:	623b      	str	r3, [r7, #32]
 8009646:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	6a3a      	ldr	r2, [r7, #32]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	61bb      	str	r3, [r7, #24]
   return(result);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e6      	bne.n	8009626 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009658:	88fb      	ldrh	r3, [r7, #6]
 800965a:	461a      	mov	r2, r3
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f001 f90a 	bl	800a878 <UART_Start_Receive_DMA>
 8009664:	4603      	mov	r3, r0
 8009666:	e000      	b.n	800966a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009668:	2302      	movs	r3, #2
  }
}
 800966a:	4618      	mov	r0, r3
 800966c:	3728      	adds	r7, #40	@ 0x28
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	40008000 	.word	0x40008000

08009678 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b0a0      	sub	sp, #128	@ 0x80
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800968e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009690:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8009694:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800969e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096a0:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80096a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80096ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e6      	bne.n	8009680 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c4:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 80096c8:	f023 0301 	bic.w	r3, r3, #1
 80096cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3308      	adds	r3, #8
 80096d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80096d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80096d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e3      	bne.n	80096b2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d118      	bne.n	8009724 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009702:	f023 0310 	bic.w	r3, r3, #16
 8009706:	677b      	str	r3, [r7, #116]	@ 0x74
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009710:	643b      	str	r3, [r7, #64]	@ 0x40
 8009712:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009718:	e841 2300 	strex	r3, r2, [r1]
 800971c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e6      	bne.n	80096f2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800972e:	2b80      	cmp	r3, #128	@ 0x80
 8009730:	d137      	bne.n	80097a2 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3308      	adds	r3, #8
 8009738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	61fb      	str	r3, [r7, #28]
   return(result);
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009748:	673b      	str	r3, [r7, #112]	@ 0x70
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3308      	adds	r3, #8
 8009750:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e5      	bne.n	8009732 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d019      	beq.n	80097a2 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009772:	2200      	movs	r2, #0
 8009774:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800977a:	4618      	mov	r0, r3
 800977c:	f7fb fce3 	bl	8005146 <HAL_DMA_Abort>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00d      	beq.n	80097a2 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800978a:	4618      	mov	r0, r3
 800978c:	f7fb fe4a 	bl	8005424 <HAL_DMA_GetError>
 8009790:	4603      	mov	r3, r0
 8009792:	2b20      	cmp	r3, #32
 8009794:	d105      	bne.n	80097a2 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2210      	movs	r2, #16
 800979a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e073      	b.n	800988a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ac:	2b40      	cmp	r3, #64	@ 0x40
 80097ae:	d13b      	bne.n	8009828 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	60bb      	str	r3, [r7, #8]
   return(result);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097d0:	61ba      	str	r2, [r7, #24]
 80097d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6979      	ldr	r1, [r7, #20]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	613b      	str	r3, [r7, #16]
   return(result);
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e5      	bne.n	80097b0 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01c      	beq.n	8009828 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f4:	2200      	movs	r2, #0
 80097f6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fb fca1 	bl	8005146 <HAL_DMA_Abort>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00e      	beq.n	8009828 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009810:	4618      	mov	r0, r3
 8009812:	f7fb fe07 	bl	8005424 <HAL_DMA_GetError>
 8009816:	4603      	mov	r3, r0
 8009818:	2b20      	cmp	r3, #32
 800981a:	d105      	bne.n	8009828 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2210      	movs	r2, #16
 8009820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e030      	b.n	800988a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	220f      	movs	r2, #15
 800983e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009848:	d107      	bne.n	800985a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	699a      	ldr	r2, [r3, #24]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0210 	orr.w	r2, r2, #16
 8009858:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f042 0208 	orr.w	r2, r2, #8
 8009868:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3780      	adds	r7, #128	@ 0x80
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b0ba      	sub	sp, #232	@ 0xe8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80098be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80098c2:	4013      	ands	r3, r2
 80098c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80098c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d11b      	bne.n	8009908 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d015      	beq.n	8009908 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098e0:	f003 0320 	and.w	r3, r3, #32
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d105      	bne.n	80098f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8300 	beq.w	8009efe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      }
      return;
 8009906:	e2fa      	b.n	8009efe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8123 	beq.w	8009b58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009912:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009916:	4b8d      	ldr	r3, [pc, #564]	@ (8009b4c <HAL_UART_IRQHandler+0x2b8>)
 8009918:	4013      	ands	r3, r2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800991e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009922:	4b8b      	ldr	r3, [pc, #556]	@ (8009b50 <HAL_UART_IRQHandler+0x2bc>)
 8009924:	4013      	ands	r3, r2
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8116 	beq.w	8009b58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	d011      	beq.n	800995c <HAL_UART_IRQHandler+0xc8>
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800993c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2201      	movs	r2, #1
 800994a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009952:	f043 0201 	orr.w	r2, r3, #1
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800995c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d011      	beq.n	800998c <HAL_UART_IRQHandler+0xf8>
 8009968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2202      	movs	r2, #2
 800997a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009982:	f043 0204 	orr.w	r2, r3, #4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800998c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d011      	beq.n	80099bc <HAL_UART_IRQHandler+0x128>
 8009998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2204      	movs	r2, #4
 80099aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b2:	f043 0202 	orr.w	r2, r3, #2
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d017      	beq.n	80099f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099d8:	4b5c      	ldr	r3, [pc, #368]	@ (8009b4c <HAL_UART_IRQHandler+0x2b8>)
 80099da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2208      	movs	r2, #8
 80099e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ee:	f043 0208 	orr.w	r2, r3, #8
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d012      	beq.n	8009a2a <HAL_UART_IRQHandler+0x196>
 8009a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00c      	beq.n	8009a2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a20:	f043 0220 	orr.w	r2, r3, #32
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8266 	beq.w	8009f02 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d013      	beq.n	8009a6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a7e:	2b40      	cmp	r3, #64	@ 0x40
 8009a80:	d005      	beq.n	8009a8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d054      	beq.n	8009b38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 ffd9 	bl	800aa46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9e:	2b40      	cmp	r3, #64	@ 0x40
 8009aa0:	d146      	bne.n	8009b30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ace:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1d9      	bne.n	8009aa2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d017      	beq.n	8009b28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009afe:	4a15      	ldr	r2, [pc, #84]	@ (8009b54 <HAL_UART_IRQHandler+0x2c0>)
 8009b00:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fb fb75 	bl	80051f8 <HAL_DMA_Abort_IT>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d019      	beq.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009b22:	4610      	mov	r0, r2
 8009b24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b26:	e00f      	b.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fa09 	bl	8009f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b2e:	e00b      	b.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa05 	bl	8009f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b36:	e007      	b.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa01 	bl	8009f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009b46:	e1dc      	b.n	8009f02 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b48:	bf00      	nop
    return;
 8009b4a:	e1da      	b.n	8009f02 <HAL_UART_IRQHandler+0x66e>
 8009b4c:	10000001 	.word	0x10000001
 8009b50:	04000120 	.word	0x04000120
 8009b54:	0800acfd 	.word	0x0800acfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	f040 8170 	bne.w	8009e42 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b66:	f003 0310 	and.w	r3, r3, #16
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8169 	beq.w	8009e42 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 8162 	beq.w	8009e42 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2210      	movs	r2, #16
 8009b84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b90:	2b40      	cmp	r3, #64	@ 0x40
 8009b92:	f040 80d8 	bne.w	8009d46 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 80af 	beq.w	8009d0c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	f080 80a7 	bcs.w	8009d0c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 8087 	bne.w	8009cea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009be8:	e853 3f00 	ldrex	r3, [r3]
 8009bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	461a      	mov	r2, r3
 8009c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1da      	bne.n	8009bdc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c30:	e853 3f00 	ldrex	r3, [r3]
 8009c34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c38:	f023 0301 	bic.w	r3, r3, #1
 8009c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3308      	adds	r3, #8
 8009c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c56:	e841 2300 	strex	r3, r2, [r1]
 8009c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e1      	bne.n	8009c26 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3308      	adds	r3, #8
 8009c68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3308      	adds	r3, #8
 8009c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e3      	bne.n	8009c62 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb8:	f023 0310 	bic.w	r3, r3, #16
 8009cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ccc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e4      	bne.n	8009ca8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fb fa2e 	bl	8005146 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2202      	movs	r2, #2
 8009cee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f925 	bl	8009f54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009d0a:	e0fc      	b.n	8009f06 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d16:	429a      	cmp	r2, r3
 8009d18:	f040 80f5 	bne.w	8009f06 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b20      	cmp	r3, #32
 8009d2c:	f040 80eb 	bne.w	8009f06 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f908 	bl	8009f54 <HAL_UARTEx_RxEventCallback>
      return;
 8009d44:	e0df      	b.n	8009f06 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 80d1 	beq.w	8009f0a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 80cc 	beq.w	8009f0a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e4      	bne.n	8009d72 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3308      	adds	r3, #8
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	623b      	str	r3, [r7, #32]
   return(result);
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dbe:	f023 0301 	bic.w	r3, r3, #1
 8009dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009dd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dd8:	e841 2300 	strex	r3, r2, [r1]
 8009ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e1      	bne.n	8009da8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2220      	movs	r2, #32
 8009de8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f023 0310 	bic.w	r3, r3, #16
 8009e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e1a:	61fb      	str	r3, [r7, #28]
 8009e1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	69b9      	ldr	r1, [r7, #24]
 8009e20:	69fa      	ldr	r2, [r7, #28]
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	617b      	str	r3, [r7, #20]
   return(result);
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e4      	bne.n	8009df8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2202      	movs	r2, #2
 8009e32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f88a 	bl	8009f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e40:	e063      	b.n	8009f0a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00e      	beq.n	8009e6c <HAL_UART_IRQHandler+0x5d8>
 8009e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d008      	beq.n	8009e6c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 ff86 	bl	800ad76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e6a:	e051      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d014      	beq.n	8009ea2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d008      	beq.n	8009ea2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d03a      	beq.n	8009f0e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
    }
    return;
 8009ea0:	e035      	b.n	8009f0e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d009      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x62e>
 8009eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 ff30 	bl	800ad20 <UART_EndTransmit_IT>
    return;
 8009ec0:	e026      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <HAL_UART_IRQHandler+0x64e>
 8009ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ed2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 ff5f 	bl	800ad9e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ee0:	e016      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ee6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d010      	beq.n	8009f10 <HAL_UART_IRQHandler+0x67c>
 8009eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	da0c      	bge.n	8009f10 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 ff47 	bl	800ad8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009efc:	e008      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
      return;
 8009efe:	bf00      	nop
 8009f00:	e006      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
    return;
 8009f02:	bf00      	nop
 8009f04:	e004      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
      return;
 8009f06:	bf00      	nop
 8009f08:	e002      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
      return;
 8009f0a:	bf00      	nop
 8009f0c:	e000      	b.n	8009f10 <HAL_UART_IRQHandler+0x67c>
    return;
 8009f0e:	bf00      	nop
  }
}
 8009f10:	37e8      	adds	r7, #232	@ 0xe8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop

08009f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f70:	b08c      	sub	sp, #48	@ 0x30
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	431a      	orrs	r2, r3
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	4bab      	ldr	r3, [pc, #684]	@ (800a248 <UART_SetConfig+0x2dc>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	6812      	ldr	r2, [r2, #0]
 8009fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4aa0      	ldr	r2, [pc, #640]	@ (800a24c <UART_SetConfig+0x2e0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d004      	beq.n	8009fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009fe2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	6812      	ldr	r2, [r2, #0]
 8009fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fec:	430b      	orrs	r3, r1
 8009fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff6:	f023 010f 	bic.w	r1, r3, #15
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a91      	ldr	r2, [pc, #580]	@ (800a250 <UART_SetConfig+0x2e4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d125      	bne.n	800a05c <UART_SetConfig+0xf0>
 800a010:	4b90      	ldr	r3, [pc, #576]	@ (800a254 <UART_SetConfig+0x2e8>)
 800a012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a016:	f003 0303 	and.w	r3, r3, #3
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d81a      	bhi.n	800a054 <UART_SetConfig+0xe8>
 800a01e:	a201      	add	r2, pc, #4	@ (adr r2, 800a024 <UART_SetConfig+0xb8>)
 800a020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a024:	0800a035 	.word	0x0800a035
 800a028:	0800a045 	.word	0x0800a045
 800a02c:	0800a03d 	.word	0x0800a03d
 800a030:	0800a04d 	.word	0x0800a04d
 800a034:	2301      	movs	r3, #1
 800a036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03a:	e0d6      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a03c:	2302      	movs	r3, #2
 800a03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a042:	e0d2      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a044:	2304      	movs	r3, #4
 800a046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04a:	e0ce      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a04c:	2308      	movs	r3, #8
 800a04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a052:	e0ca      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a054:	2310      	movs	r3, #16
 800a056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05a:	e0c6      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a7d      	ldr	r2, [pc, #500]	@ (800a258 <UART_SetConfig+0x2ec>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d138      	bne.n	800a0d8 <UART_SetConfig+0x16c>
 800a066:	4b7b      	ldr	r3, [pc, #492]	@ (800a254 <UART_SetConfig+0x2e8>)
 800a068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a06c:	f003 030c 	and.w	r3, r3, #12
 800a070:	2b0c      	cmp	r3, #12
 800a072:	d82d      	bhi.n	800a0d0 <UART_SetConfig+0x164>
 800a074:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <UART_SetConfig+0x110>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a0b1 	.word	0x0800a0b1
 800a080:	0800a0d1 	.word	0x0800a0d1
 800a084:	0800a0d1 	.word	0x0800a0d1
 800a088:	0800a0d1 	.word	0x0800a0d1
 800a08c:	0800a0c1 	.word	0x0800a0c1
 800a090:	0800a0d1 	.word	0x0800a0d1
 800a094:	0800a0d1 	.word	0x0800a0d1
 800a098:	0800a0d1 	.word	0x0800a0d1
 800a09c:	0800a0b9 	.word	0x0800a0b9
 800a0a0:	0800a0d1 	.word	0x0800a0d1
 800a0a4:	0800a0d1 	.word	0x0800a0d1
 800a0a8:	0800a0d1 	.word	0x0800a0d1
 800a0ac:	0800a0c9 	.word	0x0800a0c9
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b6:	e098      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0be:	e094      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a0c0:	2304      	movs	r3, #4
 800a0c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0c6:	e090      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a0c8:	2308      	movs	r3, #8
 800a0ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ce:	e08c      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a0d0:	2310      	movs	r3, #16
 800a0d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d6:	e088      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a5f      	ldr	r2, [pc, #380]	@ (800a25c <UART_SetConfig+0x2f0>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d125      	bne.n	800a12e <UART_SetConfig+0x1c2>
 800a0e2:	4b5c      	ldr	r3, [pc, #368]	@ (800a254 <UART_SetConfig+0x2e8>)
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0ec:	2b30      	cmp	r3, #48	@ 0x30
 800a0ee:	d016      	beq.n	800a11e <UART_SetConfig+0x1b2>
 800a0f0:	2b30      	cmp	r3, #48	@ 0x30
 800a0f2:	d818      	bhi.n	800a126 <UART_SetConfig+0x1ba>
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	d00a      	beq.n	800a10e <UART_SetConfig+0x1a2>
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	d814      	bhi.n	800a126 <UART_SetConfig+0x1ba>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <UART_SetConfig+0x19a>
 800a100:	2b10      	cmp	r3, #16
 800a102:	d008      	beq.n	800a116 <UART_SetConfig+0x1aa>
 800a104:	e00f      	b.n	800a126 <UART_SetConfig+0x1ba>
 800a106:	2300      	movs	r3, #0
 800a108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a10c:	e06d      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a10e:	2302      	movs	r3, #2
 800a110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a114:	e069      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a116:	2304      	movs	r3, #4
 800a118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a11c:	e065      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a11e:	2308      	movs	r3, #8
 800a120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a124:	e061      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a126:	2310      	movs	r3, #16
 800a128:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a12c:	e05d      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a4b      	ldr	r2, [pc, #300]	@ (800a260 <UART_SetConfig+0x2f4>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d125      	bne.n	800a184 <UART_SetConfig+0x218>
 800a138:	4b46      	ldr	r3, [pc, #280]	@ (800a254 <UART_SetConfig+0x2e8>)
 800a13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a13e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a142:	2bc0      	cmp	r3, #192	@ 0xc0
 800a144:	d016      	beq.n	800a174 <UART_SetConfig+0x208>
 800a146:	2bc0      	cmp	r3, #192	@ 0xc0
 800a148:	d818      	bhi.n	800a17c <UART_SetConfig+0x210>
 800a14a:	2b80      	cmp	r3, #128	@ 0x80
 800a14c:	d00a      	beq.n	800a164 <UART_SetConfig+0x1f8>
 800a14e:	2b80      	cmp	r3, #128	@ 0x80
 800a150:	d814      	bhi.n	800a17c <UART_SetConfig+0x210>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <UART_SetConfig+0x1f0>
 800a156:	2b40      	cmp	r3, #64	@ 0x40
 800a158:	d008      	beq.n	800a16c <UART_SetConfig+0x200>
 800a15a:	e00f      	b.n	800a17c <UART_SetConfig+0x210>
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a162:	e042      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a164:	2302      	movs	r3, #2
 800a166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16a:	e03e      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a16c:	2304      	movs	r3, #4
 800a16e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a172:	e03a      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a174:	2308      	movs	r3, #8
 800a176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17a:	e036      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a17c:	2310      	movs	r3, #16
 800a17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a182:	e032      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a30      	ldr	r2, [pc, #192]	@ (800a24c <UART_SetConfig+0x2e0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d12a      	bne.n	800a1e4 <UART_SetConfig+0x278>
 800a18e:	4b31      	ldr	r3, [pc, #196]	@ (800a254 <UART_SetConfig+0x2e8>)
 800a190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a194:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a19c:	d01a      	beq.n	800a1d4 <UART_SetConfig+0x268>
 800a19e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1a2:	d81b      	bhi.n	800a1dc <UART_SetConfig+0x270>
 800a1a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1a8:	d00c      	beq.n	800a1c4 <UART_SetConfig+0x258>
 800a1aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1ae:	d815      	bhi.n	800a1dc <UART_SetConfig+0x270>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d003      	beq.n	800a1bc <UART_SetConfig+0x250>
 800a1b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1b8:	d008      	beq.n	800a1cc <UART_SetConfig+0x260>
 800a1ba:	e00f      	b.n	800a1dc <UART_SetConfig+0x270>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c2:	e012      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ca:	e00e      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d2:	e00a      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1da:	e006      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a1dc:	2310      	movs	r3, #16
 800a1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1e2:	e002      	b.n	800a1ea <UART_SetConfig+0x27e>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a17      	ldr	r2, [pc, #92]	@ (800a24c <UART_SetConfig+0x2e0>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	f040 80a8 	bne.w	800a346 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1fa:	2b08      	cmp	r3, #8
 800a1fc:	d834      	bhi.n	800a268 <UART_SetConfig+0x2fc>
 800a1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <UART_SetConfig+0x298>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a269 	.word	0x0800a269
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a269 	.word	0x0800a269
 800a214:	0800a237 	.word	0x0800a237
 800a218:	0800a269 	.word	0x0800a269
 800a21c:	0800a269 	.word	0x0800a269
 800a220:	0800a269 	.word	0x0800a269
 800a224:	0800a23f 	.word	0x0800a23f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a228:	f7fc fe86 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 800a22c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a22e:	e021      	b.n	800a274 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a230:	4b0c      	ldr	r3, [pc, #48]	@ (800a264 <UART_SetConfig+0x2f8>)
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a234:	e01e      	b.n	800a274 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a236:	f7fc fe13 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 800a23a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a23c:	e01a      	b.n	800a274 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a23e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a244:	e016      	b.n	800a274 <UART_SetConfig+0x308>
 800a246:	bf00      	nop
 800a248:	cfff69f3 	.word	0xcfff69f3
 800a24c:	40008000 	.word	0x40008000
 800a250:	40013800 	.word	0x40013800
 800a254:	40021000 	.word	0x40021000
 800a258:	40004400 	.word	0x40004400
 800a25c:	40004800 	.word	0x40004800
 800a260:	40004c00 	.word	0x40004c00
 800a264:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a272:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 812a 	beq.w	800a4d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a280:	4a9e      	ldr	r2, [pc, #632]	@ (800a4fc <UART_SetConfig+0x590>)
 800a282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a286:	461a      	mov	r2, r3
 800a288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	4613      	mov	r3, r2
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	4413      	add	r3, r2
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d305      	bcc.n	800a2ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d903      	bls.n	800a2b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2b2:	e10d      	b.n	800a4d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
 800a2ba:	60fa      	str	r2, [r7, #12]
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c0:	4a8e      	ldr	r2, [pc, #568]	@ (800a4fc <UART_SetConfig+0x590>)
 800a2c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	603b      	str	r3, [r7, #0]
 800a2cc:	607a      	str	r2, [r7, #4]
 800a2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2d6:	f7f6 fcff 	bl	8000cd8 <__aeabi_uldivmod>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4610      	mov	r0, r2
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f04f 0200 	mov.w	r2, #0
 800a2e6:	f04f 0300 	mov.w	r3, #0
 800a2ea:	020b      	lsls	r3, r1, #8
 800a2ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2f0:	0202      	lsls	r2, r0, #8
 800a2f2:	6979      	ldr	r1, [r7, #20]
 800a2f4:	6849      	ldr	r1, [r1, #4]
 800a2f6:	0849      	lsrs	r1, r1, #1
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	eb12 0804 	adds.w	r8, r2, r4
 800a302:	eb43 0905 	adc.w	r9, r3, r5
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	469a      	mov	sl, r3
 800a30e:	4693      	mov	fp, r2
 800a310:	4652      	mov	r2, sl
 800a312:	465b      	mov	r3, fp
 800a314:	4640      	mov	r0, r8
 800a316:	4649      	mov	r1, r9
 800a318:	f7f6 fcde 	bl	8000cd8 <__aeabi_uldivmod>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4613      	mov	r3, r2
 800a322:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a32a:	d308      	bcc.n	800a33e <UART_SetConfig+0x3d2>
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a332:	d204      	bcs.n	800a33e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6a3a      	ldr	r2, [r7, #32]
 800a33a:	60da      	str	r2, [r3, #12]
 800a33c:	e0c8      	b.n	800a4d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a344:	e0c4      	b.n	800a4d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a34e:	d167      	bne.n	800a420 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a350:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a354:	2b08      	cmp	r3, #8
 800a356:	d828      	bhi.n	800a3aa <UART_SetConfig+0x43e>
 800a358:	a201      	add	r2, pc, #4	@ (adr r2, 800a360 <UART_SetConfig+0x3f4>)
 800a35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35e:	bf00      	nop
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a38d 	.word	0x0800a38d
 800a368:	0800a395 	.word	0x0800a395
 800a36c:	0800a3ab 	.word	0x0800a3ab
 800a370:	0800a39b 	.word	0x0800a39b
 800a374:	0800a3ab 	.word	0x0800a3ab
 800a378:	0800a3ab 	.word	0x0800a3ab
 800a37c:	0800a3ab 	.word	0x0800a3ab
 800a380:	0800a3a3 	.word	0x0800a3a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a384:	f7fc fdd8 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 800a388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a38a:	e014      	b.n	800a3b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a38c:	f7fc fdea 	bl	8006f64 <HAL_RCC_GetPCLK2Freq>
 800a390:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a392:	e010      	b.n	800a3b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a394:	4b5a      	ldr	r3, [pc, #360]	@ (800a500 <UART_SetConfig+0x594>)
 800a396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a398:	e00d      	b.n	800a3b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a39a:	f7fc fd61 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 800a39e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3a0:	e009      	b.n	800a3b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3a8:	e005      	b.n	800a3b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 8089 	beq.w	800a4d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c2:	4a4e      	ldr	r2, [pc, #312]	@ (800a4fc <UART_SetConfig+0x590>)
 800a3c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d0:	005a      	lsls	r2, r3, #1
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	085b      	lsrs	r3, r3, #1
 800a3d8:	441a      	add	r2, r3
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	2b0f      	cmp	r3, #15
 800a3e8:	d916      	bls.n	800a418 <UART_SetConfig+0x4ac>
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3f0:	d212      	bcs.n	800a418 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	f023 030f 	bic.w	r3, r3, #15
 800a3fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	085b      	lsrs	r3, r3, #1
 800a400:	b29b      	uxth	r3, r3
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	b29a      	uxth	r2, r3
 800a408:	8bfb      	ldrh	r3, [r7, #30]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	8bfa      	ldrh	r2, [r7, #30]
 800a414:	60da      	str	r2, [r3, #12]
 800a416:	e05b      	b.n	800a4d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a41e:	e057      	b.n	800a4d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a420:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a424:	2b08      	cmp	r3, #8
 800a426:	d828      	bhi.n	800a47a <UART_SetConfig+0x50e>
 800a428:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <UART_SetConfig+0x4c4>)
 800a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42e:	bf00      	nop
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a45d 	.word	0x0800a45d
 800a438:	0800a465 	.word	0x0800a465
 800a43c:	0800a47b 	.word	0x0800a47b
 800a440:	0800a46b 	.word	0x0800a46b
 800a444:	0800a47b 	.word	0x0800a47b
 800a448:	0800a47b 	.word	0x0800a47b
 800a44c:	0800a47b 	.word	0x0800a47b
 800a450:	0800a473 	.word	0x0800a473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a454:	f7fc fd70 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 800a458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a45a:	e014      	b.n	800a486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a45c:	f7fc fd82 	bl	8006f64 <HAL_RCC_GetPCLK2Freq>
 800a460:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a462:	e010      	b.n	800a486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a464:	4b26      	ldr	r3, [pc, #152]	@ (800a500 <UART_SetConfig+0x594>)
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a468:	e00d      	b.n	800a486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a46a:	f7fc fcf9 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 800a46e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a470:	e009      	b.n	800a486 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a478:	e005      	b.n	800a486 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a484:	bf00      	nop
    }

    if (pclk != 0U)
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d021      	beq.n	800a4d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a490:	4a1a      	ldr	r2, [pc, #104]	@ (800a4fc <UART_SetConfig+0x590>)
 800a492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a496:	461a      	mov	r2, r3
 800a498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	441a      	add	r2, r3
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	2b0f      	cmp	r3, #15
 800a4b4:	d909      	bls.n	800a4ca <UART_SetConfig+0x55e>
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4bc:	d205      	bcs.n	800a4ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60da      	str	r2, [r3, #12]
 800a4c8:	e002      	b.n	800a4d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3730      	adds	r7, #48	@ 0x30
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4fa:	bf00      	nop
 800a4fc:	080116a8 	.word	0x080116a8
 800a500:	00f42400 	.word	0x00f42400

0800a504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a510:	f003 0308 	and.w	r3, r3, #8
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00a      	beq.n	800a52e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00a      	beq.n	800a550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a554:	f003 0302 	and.w	r3, r3, #2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00a      	beq.n	800a572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	430a      	orrs	r2, r1
 800a570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a576:	f003 0304 	and.w	r3, r3, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	430a      	orrs	r2, r1
 800a592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a598:	f003 0310 	and.w	r3, r3, #16
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00a      	beq.n	800a5b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ba:	f003 0320 	and.w	r3, r3, #32
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01a      	beq.n	800a61a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a602:	d10a      	bne.n	800a61a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	605a      	str	r2, [r3, #4]
  }
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b098      	sub	sp, #96	@ 0x60
 800a64c:	af02      	add	r7, sp, #8
 800a64e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a658:	f7f9 f8d6 	bl	8003808 <HAL_GetTick>
 800a65c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d12f      	bne.n	800a6cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a66c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a674:	2200      	movs	r2, #0
 800a676:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f88e 	bl	800a79c <UART_WaitOnFlagUntilTimeout>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d022      	beq.n	800a6cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68e:	e853 3f00 	ldrex	r3, [r3]
 800a692:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a69a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6ac:	e841 2300 	strex	r3, r2, [r1]
 800a6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1e6      	bne.n	800a686 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2220      	movs	r2, #32
 800a6bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e063      	b.n	800a794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d149      	bne.n	800a76e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f857 	bl	800a79c <UART_WaitOnFlagUntilTimeout>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d03c      	beq.n	800a76e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	623b      	str	r3, [r7, #32]
   return(result);
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a712:	633b      	str	r3, [r7, #48]	@ 0x30
 800a714:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e6      	bne.n	800a6f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	60fb      	str	r3, [r7, #12]
   return(result);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f023 0301 	bic.w	r3, r3, #1
 800a73c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3308      	adds	r3, #8
 800a744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a746:	61fa      	str	r2, [r7, #28]
 800a748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	69b9      	ldr	r1, [r7, #24]
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	617b      	str	r3, [r7, #20]
   return(result);
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e5      	bne.n	800a726 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e012      	b.n	800a794 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3758      	adds	r7, #88	@ 0x58
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	603b      	str	r3, [r7, #0]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ac:	e04f      	b.n	800a84e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7b4:	d04b      	beq.n	800a84e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7b6:	f7f9 f827 	bl	8003808 <HAL_GetTick>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d302      	bcc.n	800a7cc <UART_WaitOnFlagUntilTimeout+0x30>
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e04e      	b.n	800a86e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0304 	and.w	r3, r3, #4
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d037      	beq.n	800a84e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b80      	cmp	r3, #128	@ 0x80
 800a7e2:	d034      	beq.n	800a84e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2b40      	cmp	r3, #64	@ 0x40
 800a7e8:	d031      	beq.n	800a84e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	d110      	bne.n	800a81a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2208      	movs	r2, #8
 800a7fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 f920 	bl	800aa46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2208      	movs	r2, #8
 800a80a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e029      	b.n	800a86e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69db      	ldr	r3, [r3, #28]
 800a820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a828:	d111      	bne.n	800a84e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f906 	bl	800aa46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e00f      	b.n	800a86e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69da      	ldr	r2, [r3, #28]
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	4013      	ands	r3, r2
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	bf0c      	ite	eq
 800a85e:	2301      	moveq	r3, #1
 800a860:	2300      	movne	r3, #0
 800a862:	b2db      	uxtb	r3, r3
 800a864:	461a      	mov	r2, r3
 800a866:	79fb      	ldrb	r3, [r7, #7]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d0a0      	beq.n	800a7ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b096      	sub	sp, #88	@ 0x58
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	88fa      	ldrh	r2, [r7, #6]
 800a890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2222      	movs	r2, #34	@ 0x22
 800a8a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d02d      	beq.n	800a90a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8b4:	4a40      	ldr	r2, [pc, #256]	@ (800a9b8 <UART_Start_Receive_DMA+0x140>)
 800a8b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8be:	4a3f      	ldr	r2, [pc, #252]	@ (800a9bc <UART_Start_Receive_DMA+0x144>)
 800a8c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c8:	4a3d      	ldr	r2, [pc, #244]	@ (800a9c0 <UART_Start_Receive_DMA+0x148>)
 800a8ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3324      	adds	r3, #36	@ 0x24
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	88fb      	ldrh	r3, [r7, #6]
 800a8ec:	f7fa fbb0 	bl	8005050 <HAL_DMA_Start_IT>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d009      	beq.n	800a90a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2210      	movs	r2, #16
 800a8fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2220      	movs	r2, #32
 800a902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e051      	b.n	800a9ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d018      	beq.n	800a944 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91a:	e853 3f00 	ldrex	r3, [r3]
 800a91e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a926:	657b      	str	r3, [r7, #84]	@ 0x54
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a930:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a932:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a938:	e841 2300 	strex	r3, r2, [r1]
 800a93c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a93e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1e6      	bne.n	800a912 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3308      	adds	r3, #8
 800a94a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3308      	adds	r3, #8
 800a962:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a964:	637a      	str	r2, [r7, #52]	@ 0x34
 800a966:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a96a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e5      	bne.n	800a944 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3308      	adds	r3, #8
 800a97e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	613b      	str	r3, [r7, #16]
   return(result);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3308      	adds	r3, #8
 800a996:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a998:	623a      	str	r2, [r7, #32]
 800a99a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	69f9      	ldr	r1, [r7, #28]
 800a99e:	6a3a      	ldr	r2, [r7, #32]
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e5      	bne.n	800a978 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3758      	adds	r7, #88	@ 0x58
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	0800ab13 	.word	0x0800ab13
 800a9bc:	0800ac3f 	.word	0x0800ac3f
 800a9c0:	0800ac7d 	.word	0x0800ac7d

0800a9c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b08f      	sub	sp, #60	@ 0x3c
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e6      	bne.n	800a9cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3308      	adds	r3, #8
 800aa04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa14:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa1e:	61ba      	str	r2, [r7, #24]
 800aa20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6979      	ldr	r1, [r7, #20]
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e5      	bne.n	800a9fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aa3a:	bf00      	nop
 800aa3c:	373c      	adds	r7, #60	@ 0x3c
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b095      	sub	sp, #84	@ 0x54
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e6      	bne.n	800aa4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3308      	adds	r3, #8
 800aa86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa96:	f023 0301 	bic.w	r3, r3, #1
 800aa9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aaa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aaa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaac:	e841 2300 	strex	r3, r2, [r1]
 800aab0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e3      	bne.n	800aa80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d118      	bne.n	800aaf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f023 0310 	bic.w	r3, r3, #16
 800aad4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aade:	61bb      	str	r3, [r7, #24]
 800aae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae2:	6979      	ldr	r1, [r7, #20]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	e841 2300 	strex	r3, r2, [r1]
 800aaea:	613b      	str	r3, [r7, #16]
   return(result);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1e6      	bne.n	800aac0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab06:	bf00      	nop
 800ab08:	3754      	adds	r7, #84	@ 0x54
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b09c      	sub	sp, #112	@ 0x70
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0320 	and.w	r3, r3, #32
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d171      	bne.n	800ac12 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ab2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab54:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab56:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e6      	bne.n	800ab36 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	e853 3f00 	ldrex	r3, [r3]
 800ab76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	f023 0301 	bic.w	r3, r3, #1
 800ab7e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3308      	adds	r3, #8
 800ab86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab88:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab8a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab90:	e841 2300 	strex	r3, r2, [r1]
 800ab94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1e5      	bne.n	800ab68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3308      	adds	r3, #8
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba6:	e853 3f00 	ldrex	r3, [r3]
 800abaa:	623b      	str	r3, [r7, #32]
   return(result);
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abb2:	663b      	str	r3, [r7, #96]	@ 0x60
 800abb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3308      	adds	r3, #8
 800abba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abbc:	633a      	str	r2, [r7, #48]	@ 0x30
 800abbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abc4:	e841 2300 	strex	r3, r2, [r1]
 800abc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e5      	bne.n	800ab9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abd2:	2220      	movs	r2, #32
 800abd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d118      	bne.n	800ac12 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	60fb      	str	r3, [r7, #12]
   return(result);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f023 0310 	bic.w	r3, r3, #16
 800abf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abfe:	61fb      	str	r3, [r7, #28]
 800ac00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac02:	69b9      	ldr	r1, [r7, #24]
 800ac04:	69fa      	ldr	r2, [r7, #28]
 800ac06:	e841 2300 	strex	r3, r2, [r1]
 800ac0a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e6      	bne.n	800abe0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac14:	2200      	movs	r2, #0
 800ac16:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d107      	bne.n	800ac30 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac26:	4619      	mov	r1, r3
 800ac28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac2a:	f7ff f993 	bl	8009f54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac2e:	e002      	b.n	800ac36 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ac30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac32:	f7f8 fc5b 	bl	80034ec <HAL_UART_RxCpltCallback>
}
 800ac36:	bf00      	nop
 800ac38:	3770      	adds	r7, #112	@ 0x70
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d109      	bne.n	800ac6e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac60:	085b      	lsrs	r3, r3, #1
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	4619      	mov	r1, r3
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff f974 	bl	8009f54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac6c:	e002      	b.n	800ac74 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f7ff f95c 	bl	8009f2c <HAL_UART_RxHalfCpltCallback>
}
 800ac74:	bf00      	nop
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aca4:	2b80      	cmp	r3, #128	@ 0x80
 800aca6:	d109      	bne.n	800acbc <UART_DMAError+0x40>
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2b21      	cmp	r3, #33	@ 0x21
 800acac:	d106      	bne.n	800acbc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800acb6:	6978      	ldr	r0, [r7, #20]
 800acb8:	f7ff fe84 	bl	800a9c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc6:	2b40      	cmp	r3, #64	@ 0x40
 800acc8:	d109      	bne.n	800acde <UART_DMAError+0x62>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b22      	cmp	r3, #34	@ 0x22
 800acce:	d106      	bne.n	800acde <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800acd8:	6978      	ldr	r0, [r7, #20]
 800acda:	f7ff feb4 	bl	800aa46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace4:	f043 0210 	orr.w	r2, r3, #16
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acee:	6978      	ldr	r0, [r7, #20]
 800acf0:	f7ff f926 	bl	8009f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acf4:	bf00      	nop
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7ff f914 	bl	8009f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad18:	bf00      	nop
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad3c:	61fb      	str	r3, [r7, #28]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	61bb      	str	r3, [r7, #24]
 800ad48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6979      	ldr	r1, [r7, #20]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	613b      	str	r3, [r7, #16]
   return(result);
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e6      	bne.n	800ad28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7ff f8d5 	bl	8009f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad6e:	bf00      	nop
 800ad70:	3720      	adds	r7, #32
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad7e:	bf00      	nop
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad92:	bf00      	nop
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d101      	bne.n	800adc8 <HAL_UARTEx_DisableFifoMode+0x16>
 800adc4:	2302      	movs	r3, #2
 800adc6:	e027      	b.n	800ae18 <HAL_UARTEx_DisableFifoMode+0x66>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2224      	movs	r2, #36	@ 0x24
 800add4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0201 	bic.w	r2, r2, #1
 800adee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800adf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d101      	bne.n	800ae3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae38:	2302      	movs	r3, #2
 800ae3a:	e02d      	b.n	800ae98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2224      	movs	r2, #36	@ 0x24
 800ae48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0201 	bic.w	r2, r2, #1
 800ae62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f84f 	bl	800af1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d101      	bne.n	800aeb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	e02d      	b.n	800af14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2224      	movs	r2, #36	@ 0x24
 800aec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 0201 	bic.w	r2, r2, #1
 800aede:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	430a      	orrs	r2, r1
 800aef2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f811 	bl	800af1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2220      	movs	r2, #32
 800af06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d108      	bne.n	800af3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af3c:	e031      	b.n	800afa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af3e:	2308      	movs	r3, #8
 800af40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af42:	2308      	movs	r3, #8
 800af44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	0e5b      	lsrs	r3, r3, #25
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 0307 	and.w	r3, r3, #7
 800af54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	0f5b      	lsrs	r3, r3, #29
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	7b3a      	ldrb	r2, [r7, #12]
 800af6a:	4911      	ldr	r1, [pc, #68]	@ (800afb0 <UARTEx_SetNbDataToProcess+0x94>)
 800af6c:	5c8a      	ldrb	r2, [r1, r2]
 800af6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af72:	7b3a      	ldrb	r2, [r7, #12]
 800af74:	490f      	ldr	r1, [pc, #60]	@ (800afb4 <UARTEx_SetNbDataToProcess+0x98>)
 800af76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af78:	fb93 f3f2 	sdiv	r3, r3, r2
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	7b7a      	ldrb	r2, [r7, #13]
 800af88:	4909      	ldr	r1, [pc, #36]	@ (800afb0 <UARTEx_SetNbDataToProcess+0x94>)
 800af8a:	5c8a      	ldrb	r2, [r1, r2]
 800af8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af90:	7b7a      	ldrb	r2, [r7, #13]
 800af92:	4908      	ldr	r1, [pc, #32]	@ (800afb4 <UARTEx_SetNbDataToProcess+0x98>)
 800af94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af96:	fb93 f3f2 	sdiv	r3, r3, r2
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	080116c0 	.word	0x080116c0
 800afb4:	080116c8 	.word	0x080116c8

0800afb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800afc0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800afc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	43db      	mvns	r3, r3
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	4013      	ands	r3, r2
 800afd8:	b29a      	uxth	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	1d3b      	adds	r3, r7, #4
 800aff8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2201      	movs	r2, #1
 800b000:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800b030:	4907      	ldr	r1, [pc, #28]	@ (800b050 <MX_FATFS_Init+0x24>)
 800b032:	4808      	ldr	r0, [pc, #32]	@ (800b054 <MX_FATFS_Init+0x28>)
 800b034:	f001 ff7a 	bl	800cf2c <FATFS_LinkDriver>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800b03e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b042:	e003      	b.n	800b04c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800b044:	4b04      	ldr	r3, [pc, #16]	@ (800b058 <MX_FATFS_Init+0x2c>)
 800b046:	2201      	movs	r2, #1
 800b048:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800b04a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	20001348 	.word	0x20001348
 800b054:	20000018 	.word	0x20000018
 800b058:	2000134c 	.word	0x2000134c

0800b05c <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b060:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b062:	4618      	mov	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800b076:	79fb      	ldrb	r3, [r7, #7]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f6 fe25 	bl	8001cc8 <SD_disk_initialize>
 800b07e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	4618      	mov	r0, r3
 800b096:	f7f6 ff01 	bl	8001e9c <SD_disk_status>
 800b09a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	607a      	str	r2, [r7, #4]
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800b0b4:	7bf8      	ldrb	r0, [r7, #15]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	f7f6 ff04 	bl	8001ec8 <SD_disk_read>
 800b0c0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	603b      	str	r3, [r7, #0]
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800b0da:	7bf8      	ldrb	r0, [r7, #15]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	f7f6 ff5b 	bl	8001f9c <SD_disk_write>
 800b0e6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	603a      	str	r2, [r7, #0]
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800b100:	79b9      	ldrb	r1, [r7, #6]
 800b102:	79fb      	ldrb	r3, [r7, #7]
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f7f6 ffcc 	bl	80020a4 <SD_disk_ioctl>
 800b10c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	4a08      	ldr	r2, [pc, #32]	@ (800b148 <disk_status+0x30>)
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	79fa      	ldrb	r2, [r7, #7]
 800b130:	4905      	ldr	r1, [pc, #20]	@ (800b148 <disk_status+0x30>)
 800b132:	440a      	add	r2, r1
 800b134:	7a12      	ldrb	r2, [r2, #8]
 800b136:	4610      	mov	r0, r2
 800b138:	4798      	blx	r3
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20001378 	.word	0x20001378

0800b14c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	4a0d      	ldr	r2, [pc, #52]	@ (800b194 <disk_initialize+0x48>)
 800b15e:	5cd3      	ldrb	r3, [r2, r3]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d111      	bne.n	800b188 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	4a0b      	ldr	r2, [pc, #44]	@ (800b194 <disk_initialize+0x48>)
 800b168:	2101      	movs	r1, #1
 800b16a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	4a09      	ldr	r2, [pc, #36]	@ (800b194 <disk_initialize+0x48>)
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	79fa      	ldrb	r2, [r7, #7]
 800b17a:	4906      	ldr	r1, [pc, #24]	@ (800b194 <disk_initialize+0x48>)
 800b17c:	440a      	add	r2, r1
 800b17e:	7a12      	ldrb	r2, [r2, #8]
 800b180:	4610      	mov	r0, r2
 800b182:	4798      	blx	r3
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b188:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20001378 	.word	0x20001378

0800b198 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b1d4 <disk_read+0x3c>)
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	689c      	ldr	r4, [r3, #8]
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	4a07      	ldr	r2, [pc, #28]	@ (800b1d4 <disk_read+0x3c>)
 800b1b8:	4413      	add	r3, r2
 800b1ba:	7a18      	ldrb	r0, [r3, #8]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	47a0      	blx	r4
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd90      	pop	{r4, r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20001378 	.word	0x20001378

0800b1d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b1d8:	b590      	push	{r4, r7, lr}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60b9      	str	r1, [r7, #8]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	603b      	str	r3, [r7, #0]
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b214 <disk_write+0x3c>)
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	68dc      	ldr	r4, [r3, #12]
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	4a07      	ldr	r2, [pc, #28]	@ (800b214 <disk_write+0x3c>)
 800b1f8:	4413      	add	r3, r2
 800b1fa:	7a18      	ldrb	r0, [r3, #8]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	47a0      	blx	r4
 800b204:	4603      	mov	r3, r0
 800b206:	75fb      	strb	r3, [r7, #23]
  return res;
 800b208:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	371c      	adds	r7, #28
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd90      	pop	{r4, r7, pc}
 800b212:	bf00      	nop
 800b214:	20001378 	.word	0x20001378

0800b218 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	3301      	adds	r3, #1
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b228:	89fb      	ldrh	r3, [r7, #14]
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	b21a      	sxth	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b21b      	sxth	r3, r3
 800b234:	4313      	orrs	r3, r2
 800b236:	b21b      	sxth	r3, r3
 800b238:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b23a:	89fb      	ldrh	r3, [r7, #14]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3303      	adds	r3, #3
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	021b      	lsls	r3, r3, #8
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	3202      	adds	r2, #2
 800b260:	7812      	ldrb	r2, [r2, #0]
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	021b      	lsls	r3, r3, #8
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	3201      	adds	r2, #1
 800b26e:	7812      	ldrb	r2, [r2, #0]
 800b270:	4313      	orrs	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	021b      	lsls	r3, r3, #8
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	7812      	ldrb	r2, [r2, #0]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b280:	68fb      	ldr	r3, [r7, #12]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	460b      	mov	r3, r1
 800b298:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	887a      	ldrh	r2, [r7, #2]
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	887b      	ldrh	r3, [r7, #2]
 800b2a8:	0a1b      	lsrs	r3, r3, #8
 800b2aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	887a      	ldrh	r2, [r7, #2]
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	b2d2      	uxtb	r2, r2
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	b2d2      	uxtb	r2, r2
 800b2ea:	701a      	strb	r2, [r3, #0]
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	0a1b      	lsrs	r3, r3, #8
 800b2f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	0a1b      	lsrs	r3, r3, #8
 800b302:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	607a      	str	r2, [r7, #4]
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b31c:	b480      	push	{r7}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00d      	beq.n	800b352 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	1c53      	adds	r3, r2, #1
 800b33a:	613b      	str	r3, [r7, #16]
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	1c59      	adds	r1, r3, #1
 800b340:	6179      	str	r1, [r7, #20]
 800b342:	7812      	ldrb	r2, [r2, #0]
 800b344:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3b01      	subs	r3, #1
 800b34a:	607b      	str	r3, [r7, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1f1      	bne.n	800b336 <mem_cpy+0x1a>
	}
}
 800b352:	bf00      	nop
 800b354:	371c      	adds	r7, #28
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b35e:	b480      	push	{r7}
 800b360:	b087      	sub	sp, #28
 800b362:	af00      	add	r7, sp, #0
 800b364:	60f8      	str	r0, [r7, #12]
 800b366:	60b9      	str	r1, [r7, #8]
 800b368:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	617a      	str	r2, [r7, #20]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	b2d2      	uxtb	r2, r2
 800b378:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	607b      	str	r3, [r7, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1f3      	bne.n	800b36e <mem_set+0x10>
}
 800b386:	bf00      	nop
 800b388:	bf00      	nop
 800b38a:	371c      	adds	r7, #28
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b394:	b480      	push	{r7}
 800b396:	b089      	sub	sp, #36	@ 0x24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	61fb      	str	r3, [r7, #28]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	1c5a      	adds	r2, r3, #1
 800b3b0:	61fa      	str	r2, [r7, #28]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	1c5a      	adds	r2, r3, #1
 800b3ba:	61ba      	str	r2, [r7, #24]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	1acb      	subs	r3, r1, r3
 800b3c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	607b      	str	r3, [r7, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <mem_cmp+0x40>
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d0eb      	beq.n	800b3ac <mem_cmp+0x18>

	return r;
 800b3d4:	697b      	ldr	r3, [r7, #20]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3724      	adds	r7, #36	@ 0x24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b3e2:	b480      	push	{r7}
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b3ec:	e002      	b.n	800b3f4 <chk_chr+0x12>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	607b      	str	r3, [r7, #4]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d005      	beq.n	800b408 <chk_chr+0x26>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	461a      	mov	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	4293      	cmp	r3, r2
 800b406:	d1f2      	bne.n	800b3ee <chk_chr+0xc>
	return *str;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	781b      	ldrb	r3, [r3, #0]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	60fb      	str	r3, [r7, #12]
 800b42a:	e029      	b.n	800b480 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b42c:	4a27      	ldr	r2, [pc, #156]	@ (800b4cc <chk_lock+0xb4>)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	011b      	lsls	r3, r3, #4
 800b432:	4413      	add	r3, r2
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d01d      	beq.n	800b476 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b43a:	4a24      	ldr	r2, [pc, #144]	@ (800b4cc <chk_lock+0xb4>)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	011b      	lsls	r3, r3, #4
 800b440:	4413      	add	r3, r2
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d116      	bne.n	800b47a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b44c:	4a1f      	ldr	r2, [pc, #124]	@ (800b4cc <chk_lock+0xb4>)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	011b      	lsls	r3, r3, #4
 800b452:	4413      	add	r3, r2
 800b454:	3304      	adds	r3, #4
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d10c      	bne.n	800b47a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b460:	4a1a      	ldr	r2, [pc, #104]	@ (800b4cc <chk_lock+0xb4>)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	011b      	lsls	r3, r3, #4
 800b466:	4413      	add	r3, r2
 800b468:	3308      	adds	r3, #8
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b470:	429a      	cmp	r2, r3
 800b472:	d102      	bne.n	800b47a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b474:	e007      	b.n	800b486 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b476:	2301      	movs	r3, #1
 800b478:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3301      	adds	r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d9d2      	bls.n	800b42c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d109      	bne.n	800b4a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d102      	bne.n	800b498 <chk_lock+0x80>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d101      	bne.n	800b49c <chk_lock+0x84>
 800b498:	2300      	movs	r3, #0
 800b49a:	e010      	b.n	800b4be <chk_lock+0xa6>
 800b49c:	2312      	movs	r3, #18
 800b49e:	e00e      	b.n	800b4be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d108      	bne.n	800b4b8 <chk_lock+0xa0>
 800b4a6:	4a09      	ldr	r2, [pc, #36]	@ (800b4cc <chk_lock+0xb4>)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	011b      	lsls	r3, r3, #4
 800b4ac:	4413      	add	r3, r2
 800b4ae:	330c      	adds	r3, #12
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4b6:	d101      	bne.n	800b4bc <chk_lock+0xa4>
 800b4b8:	2310      	movs	r3, #16
 800b4ba:	e000      	b.n	800b4be <chk_lock+0xa6>
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20001358 	.word	0x20001358

0800b4d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	607b      	str	r3, [r7, #4]
 800b4da:	e002      	b.n	800b4e2 <enq_lock+0x12>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	607b      	str	r3, [r7, #4]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d806      	bhi.n	800b4f6 <enq_lock+0x26>
 800b4e8:	4a09      	ldr	r2, [pc, #36]	@ (800b510 <enq_lock+0x40>)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	011b      	lsls	r3, r3, #4
 800b4ee:	4413      	add	r3, r2
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1f2      	bne.n	800b4dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	bf14      	ite	ne
 800b4fc:	2301      	movne	r3, #1
 800b4fe:	2300      	moveq	r3, #0
 800b500:	b2db      	uxtb	r3, r3
}
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	20001358 	.word	0x20001358

0800b514 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
 800b522:	e01f      	b.n	800b564 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b524:	4a41      	ldr	r2, [pc, #260]	@ (800b62c <inc_lock+0x118>)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	4413      	add	r3, r2
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d113      	bne.n	800b55e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b536:	4a3d      	ldr	r2, [pc, #244]	@ (800b62c <inc_lock+0x118>)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	4413      	add	r3, r2
 800b53e:	3304      	adds	r3, #4
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b546:	429a      	cmp	r2, r3
 800b548:	d109      	bne.n	800b55e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b54a:	4a38      	ldr	r2, [pc, #224]	@ (800b62c <inc_lock+0x118>)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	4413      	add	r3, r2
 800b552:	3308      	adds	r3, #8
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d006      	beq.n	800b56c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3301      	adds	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d9dc      	bls.n	800b524 <inc_lock+0x10>
 800b56a:	e000      	b.n	800b56e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b56c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b02      	cmp	r3, #2
 800b572:	d132      	bne.n	800b5da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	e002      	b.n	800b580 <inc_lock+0x6c>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d806      	bhi.n	800b594 <inc_lock+0x80>
 800b586:	4a29      	ldr	r2, [pc, #164]	@ (800b62c <inc_lock+0x118>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	4413      	add	r3, r2
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f2      	bne.n	800b57a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d101      	bne.n	800b59e <inc_lock+0x8a>
 800b59a:	2300      	movs	r3, #0
 800b59c:	e040      	b.n	800b620 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	4922      	ldr	r1, [pc, #136]	@ (800b62c <inc_lock+0x118>)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	011b      	lsls	r3, r3, #4
 800b5a8:	440b      	add	r3, r1
 800b5aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689a      	ldr	r2, [r3, #8]
 800b5b0:	491e      	ldr	r1, [pc, #120]	@ (800b62c <inc_lock+0x118>)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	011b      	lsls	r3, r3, #4
 800b5b6:	440b      	add	r3, r1
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	695a      	ldr	r2, [r3, #20]
 800b5c0:	491a      	ldr	r1, [pc, #104]	@ (800b62c <inc_lock+0x118>)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	440b      	add	r3, r1
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b5cc:	4a17      	ldr	r2, [pc, #92]	@ (800b62c <inc_lock+0x118>)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	011b      	lsls	r3, r3, #4
 800b5d2:	4413      	add	r3, r2
 800b5d4:	330c      	adds	r3, #12
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d009      	beq.n	800b5f4 <inc_lock+0xe0>
 800b5e0:	4a12      	ldr	r2, [pc, #72]	@ (800b62c <inc_lock+0x118>)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	011b      	lsls	r3, r3, #4
 800b5e6:	4413      	add	r3, r2
 800b5e8:	330c      	adds	r3, #12
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <inc_lock+0xe0>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e015      	b.n	800b620 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d108      	bne.n	800b60c <inc_lock+0xf8>
 800b5fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b62c <inc_lock+0x118>)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	011b      	lsls	r3, r3, #4
 800b600:	4413      	add	r3, r2
 800b602:	330c      	adds	r3, #12
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	3301      	adds	r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	e001      	b.n	800b610 <inc_lock+0xfc>
 800b60c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b610:	4906      	ldr	r1, [pc, #24]	@ (800b62c <inc_lock+0x118>)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	011b      	lsls	r3, r3, #4
 800b616:	440b      	add	r3, r1
 800b618:	330c      	adds	r3, #12
 800b61a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	3301      	adds	r3, #1
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	20001358 	.word	0x20001358

0800b630 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b638:	2300      	movs	r3, #0
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	e010      	b.n	800b660 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b63e:	4a0d      	ldr	r2, [pc, #52]	@ (800b674 <clear_lock+0x44>)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	011b      	lsls	r3, r3, #4
 800b644:	4413      	add	r3, r2
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d105      	bne.n	800b65a <clear_lock+0x2a>
 800b64e:	4a09      	ldr	r2, [pc, #36]	@ (800b674 <clear_lock+0x44>)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	011b      	lsls	r3, r3, #4
 800b654:	4413      	add	r3, r2
 800b656:	2200      	movs	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3301      	adds	r3, #1
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d9eb      	bls.n	800b63e <clear_lock+0xe>
	}
}
 800b666:	bf00      	nop
 800b668:	bf00      	nop
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	20001358 	.word	0x20001358

0800b678 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	78db      	ldrb	r3, [r3, #3]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d034      	beq.n	800b6f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b690:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	7858      	ldrb	r0, [r3, #1]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b69c:	2301      	movs	r3, #1
 800b69e:	697a      	ldr	r2, [r7, #20]
 800b6a0:	f7ff fd9a 	bl	800b1d8 <disk_write>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	73fb      	strb	r3, [r7, #15]
 800b6ae:	e022      	b.n	800b6f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	1ad2      	subs	r2, r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d217      	bcs.n	800b6f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	789b      	ldrb	r3, [r3, #2]
 800b6ca:	613b      	str	r3, [r7, #16]
 800b6cc:	e010      	b.n	800b6f0 <sync_window+0x78>
					wsect += fs->fsize;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7858      	ldrb	r0, [r3, #1]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	f7ff fd77 	bl	800b1d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	613b      	str	r3, [r7, #16]
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d8eb      	bhi.n	800b6ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d01b      	beq.n	800b750 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff ffad 	bl	800b678 <sync_window>
 800b71e:	4603      	mov	r3, r0
 800b720:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b722:	7bfb      	ldrb	r3, [r7, #15]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d113      	bne.n	800b750 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7858      	ldrb	r0, [r3, #1]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b732:	2301      	movs	r3, #1
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	f7ff fd2f 	bl	800b198 <disk_read>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d004      	beq.n	800b74a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b744:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b746:	2301      	movs	r3, #1
 800b748:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	3b02      	subs	r3, #2
 800b768:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	3b02      	subs	r3, #2
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d301      	bcc.n	800b77a <clust2sect+0x20>
 800b776:	2300      	movs	r3, #0
 800b778:	e008      	b.n	800b78c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	895b      	ldrh	r3, [r3, #10]
 800b77e:	461a      	mov	r2, r3
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	fb03 f202 	mul.w	r2, r3, r2
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78a:	4413      	add	r3, r2
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d904      	bls.n	800b7b8 <get_fat+0x20>
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d302      	bcc.n	800b7be <get_fat+0x26>
		val = 1;	/* Internal error */
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	e08e      	b.n	800b8dc <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b7be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7c2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d061      	beq.n	800b890 <get_fat+0xf8>
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	dc7b      	bgt.n	800b8c8 <get_fat+0x130>
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d002      	beq.n	800b7da <get_fat+0x42>
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d041      	beq.n	800b85c <get_fat+0xc4>
 800b7d8:	e076      	b.n	800b8c8 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	085b      	lsrs	r3, r3, #1
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6a1a      	ldr	r2, [r3, #32]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	0a5b      	lsrs	r3, r3, #9
 800b7f0:	4413      	add	r3, r2
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6938      	ldr	r0, [r7, #16]
 800b7f6:	f7ff ff83 	bl	800b700 <move_window>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d166      	bne.n	800b8ce <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	1c5a      	adds	r2, r3, #1
 800b804:	60fa      	str	r2, [r7, #12]
 800b806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	4413      	add	r3, r2
 800b80e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b812:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	6a1a      	ldr	r2, [r3, #32]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	0a5b      	lsrs	r3, r3, #9
 800b81c:	4413      	add	r3, r2
 800b81e:	4619      	mov	r1, r3
 800b820:	6938      	ldr	r0, [r7, #16]
 800b822:	f7ff ff6d 	bl	800b700 <move_window>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d152      	bne.n	800b8d2 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	4413      	add	r3, r2
 800b836:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b83a:	021b      	lsls	r3, r3, #8
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <get_fat+0xba>
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	091b      	lsrs	r3, r3, #4
 800b850:	e002      	b.n	800b858 <get_fat+0xc0>
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b858:	617b      	str	r3, [r7, #20]
			break;
 800b85a:	e03f      	b.n	800b8dc <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	6a1a      	ldr	r2, [r3, #32]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	0a1b      	lsrs	r3, r3, #8
 800b864:	4413      	add	r3, r2
 800b866:	4619      	mov	r1, r3
 800b868:	6938      	ldr	r0, [r7, #16]
 800b86a:	f7ff ff49 	bl	800b700 <move_window>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d130      	bne.n	800b8d6 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b882:	4413      	add	r3, r2
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff fcc7 	bl	800b218 <ld_word>
 800b88a:	4603      	mov	r3, r0
 800b88c:	617b      	str	r3, [r7, #20]
			break;
 800b88e:	e025      	b.n	800b8dc <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	6a1a      	ldr	r2, [r3, #32]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	09db      	lsrs	r3, r3, #7
 800b898:	4413      	add	r3, r2
 800b89a:	4619      	mov	r1, r3
 800b89c:	6938      	ldr	r0, [r7, #16]
 800b89e:	f7ff ff2f 	bl	800b700 <move_window>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d118      	bne.n	800b8da <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b8b6:	4413      	add	r3, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff fcc5 	bl	800b248 <ld_dword>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b8c4:	617b      	str	r3, [r7, #20]
			break;
 800b8c6:	e009      	b.n	800b8dc <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	e006      	b.n	800b8dc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8ce:	bf00      	nop
 800b8d0:	e004      	b.n	800b8dc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8d2:	bf00      	nop
 800b8d4:	e002      	b.n	800b8dc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b8d6:	bf00      	nop
 800b8d8:	e000      	b.n	800b8dc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8da:	bf00      	nop
		}
	}

	return val;
 800b8dc:	697b      	ldr	r3, [r7, #20]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b8e6:	b590      	push	{r4, r7, lr}
 800b8e8:	b089      	sub	sp, #36	@ 0x24
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	60b9      	str	r1, [r7, #8]
 800b8f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	f240 80d9 	bls.w	800bab0 <put_fat+0x1ca>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	429a      	cmp	r2, r3
 800b906:	f080 80d3 	bcs.w	800bab0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b03      	cmp	r3, #3
 800b910:	f000 8096 	beq.w	800ba40 <put_fat+0x15a>
 800b914:	2b03      	cmp	r3, #3
 800b916:	f300 80cb 	bgt.w	800bab0 <put_fat+0x1ca>
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d002      	beq.n	800b924 <put_fat+0x3e>
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d06e      	beq.n	800ba00 <put_fat+0x11a>
 800b922:	e0c5      	b.n	800bab0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	61bb      	str	r3, [r7, #24]
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	085b      	lsrs	r3, r3, #1
 800b92c:	69ba      	ldr	r2, [r7, #24]
 800b92e:	4413      	add	r3, r2
 800b930:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a1a      	ldr	r2, [r3, #32]
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	0a5b      	lsrs	r3, r3, #9
 800b93a:	4413      	add	r3, r2
 800b93c:	4619      	mov	r1, r3
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f7ff fede 	bl	800b700 <move_window>
 800b944:	4603      	mov	r3, r0
 800b946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b948:	7ffb      	ldrb	r3, [r7, #31]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f040 80a9 	bne.w	800baa2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	1c59      	adds	r1, r3, #1
 800b95a:	61b9      	str	r1, [r7, #24]
 800b95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b960:	4413      	add	r3, r2
 800b962:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00d      	beq.n	800b98a <put_fat+0xa4>
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	b25b      	sxtb	r3, r3
 800b974:	f003 030f 	and.w	r3, r3, #15
 800b978:	b25a      	sxtb	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	011b      	lsls	r3, r3, #4
 800b980:	b25b      	sxtb	r3, r3
 800b982:	4313      	orrs	r3, r2
 800b984:	b25b      	sxtb	r3, r3
 800b986:	b2db      	uxtb	r3, r3
 800b988:	e001      	b.n	800b98e <put_fat+0xa8>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2201      	movs	r2, #1
 800b996:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6a1a      	ldr	r2, [r3, #32]
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	0a5b      	lsrs	r3, r3, #9
 800b9a0:	4413      	add	r3, r2
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7ff feab 	bl	800b700 <move_window>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9ae:	7ffb      	ldrb	r3, [r7, #31]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d178      	bne.n	800baa6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c0:	4413      	add	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <put_fat+0xf0>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	091b      	lsrs	r3, r3, #4
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	e00e      	b.n	800b9f4 <put_fat+0x10e>
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	b25b      	sxtb	r3, r3
 800b9dc:	f023 030f 	bic.w	r3, r3, #15
 800b9e0:	b25a      	sxtb	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	0a1b      	lsrs	r3, r3, #8
 800b9e6:	b25b      	sxtb	r3, r3
 800b9e8:	f003 030f 	and.w	r3, r3, #15
 800b9ec:	b25b      	sxtb	r3, r3
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	b25b      	sxtb	r3, r3
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	70da      	strb	r2, [r3, #3]
			break;
 800b9fe:	e057      	b.n	800bab0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6a1a      	ldr	r2, [r3, #32]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	4413      	add	r3, r2
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff fe77 	bl	800b700 <move_window>
 800ba12:	4603      	mov	r3, r0
 800ba14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba16:	7ffb      	ldrb	r3, [r7, #31]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d146      	bne.n	800baaa <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	005b      	lsls	r3, r3, #1
 800ba26:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ba2a:	4413      	add	r3, r2
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	b292      	uxth	r2, r2
 800ba30:	4611      	mov	r1, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff fc2b 	bl	800b28e <st_word>
			fs->wflag = 1;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	70da      	strb	r2, [r3, #3]
			break;
 800ba3e:	e037      	b.n	800bab0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6a1a      	ldr	r2, [r3, #32]
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	09db      	lsrs	r3, r3, #7
 800ba48:	4413      	add	r3, r2
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f7ff fe57 	bl	800b700 <move_window>
 800ba52:	4603      	mov	r3, r0
 800ba54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba56:	7ffb      	ldrb	r3, [r7, #31]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d128      	bne.n	800baae <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ba70:	4413      	add	r3, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fbe8 	bl	800b248 <ld_dword>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ba7e:	4323      	orrs	r3, r4
 800ba80:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ba90:	4413      	add	r3, r2
 800ba92:	6879      	ldr	r1, [r7, #4]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7ff fc15 	bl	800b2c4 <st_dword>
			fs->wflag = 1;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	70da      	strb	r2, [r3, #3]
			break;
 800baa0:	e006      	b.n	800bab0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800baa2:	bf00      	nop
 800baa4:	e004      	b.n	800bab0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800baa6:	bf00      	nop
 800baa8:	e002      	b.n	800bab0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800baaa:	bf00      	nop
 800baac:	e000      	b.n	800bab0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800baae:	bf00      	nop
		}
	}
	return res;
 800bab0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3724      	adds	r7, #36	@ 0x24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd90      	pop	{r4, r7, pc}

0800baba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b088      	sub	sp, #32
 800babe:	af00      	add	r7, sp, #0
 800bac0:	60f8      	str	r0, [r7, #12]
 800bac2:	60b9      	str	r1, [r7, #8]
 800bac4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d904      	bls.n	800bae0 <remove_chain+0x26>
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	429a      	cmp	r2, r3
 800bade:	d301      	bcc.n	800bae4 <remove_chain+0x2a>
 800bae0:	2302      	movs	r3, #2
 800bae2:	e04b      	b.n	800bb7c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00c      	beq.n	800bb04 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800baea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800baee:	6879      	ldr	r1, [r7, #4]
 800baf0:	69b8      	ldr	r0, [r7, #24]
 800baf2:	f7ff fef8 	bl	800b8e6 <put_fat>
 800baf6:	4603      	mov	r3, r0
 800baf8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bafa:	7ffb      	ldrb	r3, [r7, #31]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <remove_chain+0x4a>
 800bb00:	7ffb      	ldrb	r3, [r7, #31]
 800bb02:	e03b      	b.n	800bb7c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff fe46 	bl	800b798 <get_fat>
 800bb0c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d031      	beq.n	800bb78 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d101      	bne.n	800bb1e <remove_chain+0x64>
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	e02e      	b.n	800bb7c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb24:	d101      	bne.n	800bb2a <remove_chain+0x70>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e028      	b.n	800bb7c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	68b9      	ldr	r1, [r7, #8]
 800bb2e:	69b8      	ldr	r0, [r7, #24]
 800bb30:	f7ff fed9 	bl	800b8e6 <put_fat>
 800bb34:	4603      	mov	r3, r0
 800bb36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bb38:	7ffb      	ldrb	r3, [r7, #31]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <remove_chain+0x88>
 800bb3e:	7ffb      	ldrb	r3, [r7, #31]
 800bb40:	e01c      	b.n	800bb7c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	691a      	ldr	r2, [r3, #16]
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	3b02      	subs	r3, #2
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d20b      	bcs.n	800bb68 <remove_chain+0xae>
			fs->free_clst++;
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	791b      	ldrb	r3, [r3, #4]
 800bb5e:	f043 0301 	orr.w	r3, r3, #1
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d3c6      	bcc.n	800bb04 <remove_chain+0x4a>
 800bb76:	e000      	b.n	800bb7a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bb78:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3720      	adds	r7, #32
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10d      	bne.n	800bbb6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d004      	beq.n	800bbb0 <create_chain+0x2c>
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d31b      	bcc.n	800bbe8 <create_chain+0x64>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	61bb      	str	r3, [r7, #24]
 800bbb4:	e018      	b.n	800bbe8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff fded 	bl	800b798 <get_fat>
 800bbbe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d801      	bhi.n	800bbca <create_chain+0x46>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e070      	b.n	800bcac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbd0:	d101      	bne.n	800bbd6 <create_chain+0x52>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	e06a      	b.n	800bcac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d201      	bcs.n	800bbe4 <create_chain+0x60>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	e063      	b.n	800bcac <create_chain+0x128>
		scl = clst;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	69fa      	ldr	r2, [r7, #28]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d307      	bcc.n	800bc0c <create_chain+0x88>
				ncl = 2;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bc00:	69fa      	ldr	r2, [r7, #28]
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d901      	bls.n	800bc0c <create_chain+0x88>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e04f      	b.n	800bcac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bc0c:	69f9      	ldr	r1, [r7, #28]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fdc2 	bl	800b798 <get_fat>
 800bc14:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00e      	beq.n	800bc3a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d003      	beq.n	800bc2a <create_chain+0xa6>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc28:	d101      	bne.n	800bc2e <create_chain+0xaa>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	e03e      	b.n	800bcac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bc2e:	69fa      	ldr	r2, [r7, #28]
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d1da      	bne.n	800bbec <create_chain+0x68>
 800bc36:	2300      	movs	r3, #0
 800bc38:	e038      	b.n	800bcac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bc3a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bc3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc40:	69f9      	ldr	r1, [r7, #28]
 800bc42:	6938      	ldr	r0, [r7, #16]
 800bc44:	f7ff fe4f 	bl	800b8e6 <put_fat>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d109      	bne.n	800bc66 <create_chain+0xe2>
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d006      	beq.n	800bc66 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bc58:	69fa      	ldr	r2, [r7, #28]
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6938      	ldr	r0, [r7, #16]
 800bc5e:	f7ff fe42 	bl	800b8e6 <put_fat>
 800bc62:	4603      	mov	r3, r0
 800bc64:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bc66:	7dfb      	ldrb	r3, [r7, #23]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d116      	bne.n	800bc9a <create_chain+0x116>
		fs->last_clst = ncl;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	69fa      	ldr	r2, [r7, #28]
 800bc70:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	691a      	ldr	r2, [r3, #16]
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	3b02      	subs	r3, #2
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d804      	bhi.n	800bc8a <create_chain+0x106>
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	1e5a      	subs	r2, r3, #1
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	791b      	ldrb	r3, [r3, #4]
 800bc8e:	f043 0301 	orr.w	r3, r3, #1
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	711a      	strb	r2, [r3, #4]
 800bc98:	e007      	b.n	800bcaa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d102      	bne.n	800bca6 <create_chain+0x122>
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bca4:	e000      	b.n	800bca8 <create_chain+0x124>
 800bca6:	2301      	movs	r3, #1
 800bca8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bcaa:	69fb      	ldr	r3, [r7, #28]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bcca:	d204      	bcs.n	800bcd6 <dir_sdi+0x22>
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	f003 031f 	and.w	r3, r3, #31
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <dir_sdi+0x26>
		return FR_INT_ERR;
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	e063      	b.n	800bda2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d106      	bne.n	800bcfa <dir_sdi+0x46>
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d902      	bls.n	800bcfa <dir_sdi+0x46>
		clst = fs->dirbase;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10c      	bne.n	800bd1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	095b      	lsrs	r3, r3, #5
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	8912      	ldrh	r2, [r2, #8]
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d301      	bcc.n	800bd10 <dir_sdi+0x5c>
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	e048      	b.n	800bda2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	61da      	str	r2, [r3, #28]
 800bd18:	e029      	b.n	800bd6e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	895b      	ldrh	r3, [r3, #10]
 800bd1e:	025b      	lsls	r3, r3, #9
 800bd20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd22:	e019      	b.n	800bd58 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6979      	ldr	r1, [r7, #20]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff fd35 	bl	800b798 <get_fat>
 800bd2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd36:	d101      	bne.n	800bd3c <dir_sdi+0x88>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e032      	b.n	800bda2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d904      	bls.n	800bd4c <dir_sdi+0x98>
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d301      	bcc.n	800bd50 <dir_sdi+0x9c>
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	e028      	b.n	800bda2 <dir_sdi+0xee>
			ofs -= csz;
 800bd50:	683a      	ldr	r2, [r7, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d2e1      	bcs.n	800bd24 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bd60:	6979      	ldr	r1, [r7, #20]
 800bd62:	6938      	ldr	r0, [r7, #16]
 800bd64:	f7ff fcf9 	bl	800b75a <clust2sect>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	69db      	ldr	r3, [r3, #28]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <dir_sdi+0xcc>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e010      	b.n	800bda2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	69da      	ldr	r2, [r3, #28]
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	0a5b      	lsrs	r3, r3, #9
 800bd88:	441a      	add	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9a:	441a      	add	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b086      	sub	sp, #24
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	3320      	adds	r3, #32
 800bdc0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <dir_next+0x28>
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdd0:	d301      	bcc.n	800bdd6 <dir_next+0x2c>
 800bdd2:	2304      	movs	r3, #4
 800bdd4:	e0aa      	b.n	800bf2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 8098 	bne.w	800bf12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10b      	bne.n	800be0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	095b      	lsrs	r3, r3, #5
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	8912      	ldrh	r2, [r2, #8]
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	f0c0 8088 	bcc.w	800bf12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	61da      	str	r2, [r3, #28]
 800be08:	2304      	movs	r3, #4
 800be0a:	e08f      	b.n	800bf2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	0a5b      	lsrs	r3, r3, #9
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	8952      	ldrh	r2, [r2, #10]
 800be14:	3a01      	subs	r2, #1
 800be16:	4013      	ands	r3, r2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d17a      	bne.n	800bf12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	4619      	mov	r1, r3
 800be24:	4610      	mov	r0, r2
 800be26:	f7ff fcb7 	bl	800b798 <get_fat>
 800be2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d801      	bhi.n	800be36 <dir_next+0x8c>
 800be32:	2302      	movs	r3, #2
 800be34:	e07a      	b.n	800bf2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be3c:	d101      	bne.n	800be42 <dir_next+0x98>
 800be3e:	2301      	movs	r3, #1
 800be40:	e074      	b.n	800bf2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d358      	bcc.n	800befe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	61da      	str	r2, [r3, #28]
 800be58:	2304      	movs	r3, #4
 800be5a:	e067      	b.n	800bf2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	4619      	mov	r1, r3
 800be64:	4610      	mov	r0, r2
 800be66:	f7ff fe8d 	bl	800bb84 <create_chain>
 800be6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <dir_next+0xcc>
 800be72:	2307      	movs	r3, #7
 800be74:	e05a      	b.n	800bf2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d101      	bne.n	800be80 <dir_next+0xd6>
 800be7c:	2302      	movs	r3, #2
 800be7e:	e055      	b.n	800bf2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be86:	d101      	bne.n	800be8c <dir_next+0xe2>
 800be88:	2301      	movs	r3, #1
 800be8a:	e04f      	b.n	800bf2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f7ff fbf3 	bl	800b678 <sync_window>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <dir_next+0xf2>
 800be98:	2301      	movs	r3, #1
 800be9a:	e047      	b.n	800bf2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3330      	adds	r3, #48	@ 0x30
 800bea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bea4:	2100      	movs	r1, #0
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff fa59 	bl	800b35e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800beac:	2300      	movs	r3, #0
 800beae:	613b      	str	r3, [r7, #16]
 800beb0:	6979      	ldr	r1, [r7, #20]
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7ff fc51 	bl	800b75a <clust2sect>
 800beb8:	4602      	mov	r2, r0
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bebe:	e012      	b.n	800bee6 <dir_next+0x13c>
						fs->wflag = 1;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2201      	movs	r2, #1
 800bec4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f7ff fbd6 	bl	800b678 <sync_window>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <dir_next+0x12c>
 800bed2:	2301      	movs	r3, #1
 800bed4:	e02a      	b.n	800bf2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	3301      	adds	r3, #1
 800beda:	613b      	str	r3, [r7, #16]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	895b      	ldrh	r3, [r3, #10]
 800beea:	461a      	mov	r2, r3
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	4293      	cmp	r3, r2
 800bef0:	d3e6      	bcc.n	800bec0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	1ad2      	subs	r2, r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	697a      	ldr	r2, [r7, #20]
 800bf02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bf04:	6979      	ldr	r1, [r7, #20]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f7ff fc27 	bl	800b75a <clust2sect>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf24:	441a      	add	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bf44:	2100      	movs	r1, #0
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff feb4 	bl	800bcb4 <dir_sdi>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d12b      	bne.n	800bfae <dir_alloc+0x7a>
		n = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	69db      	ldr	r3, [r3, #28]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f7ff fbcd 	bl	800b700 <move_window>
 800bf66:	4603      	mov	r3, r0
 800bf68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d11d      	bne.n	800bfac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	2be5      	cmp	r3, #229	@ 0xe5
 800bf78:	d004      	beq.n	800bf84 <dir_alloc+0x50>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d107      	bne.n	800bf94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	3301      	adds	r3, #1
 800bf88:	613b      	str	r3, [r7, #16]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d102      	bne.n	800bf98 <dir_alloc+0x64>
 800bf92:	e00c      	b.n	800bfae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bf94:	2300      	movs	r3, #0
 800bf96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bf98:	2101      	movs	r1, #1
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff ff05 	bl	800bdaa <dir_next>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d0d7      	beq.n	800bf5a <dir_alloc+0x26>
 800bfaa:	e000      	b.n	800bfae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bfac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d101      	bne.n	800bfb8 <dir_alloc+0x84>
 800bfb4:	2307      	movs	r3, #7
 800bfb6:	75fb      	strb	r3, [r7, #23]
	return res;
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	331a      	adds	r3, #26
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff f921 	bl	800b218 <ld_word>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d109      	bne.n	800bff6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	3314      	adds	r3, #20
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff f916 	bl	800b218 <ld_word>
 800bfec:	4603      	mov	r3, r0
 800bfee:	041b      	lsls	r3, r3, #16
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bff6:	68fb      	ldr	r3, [r7, #12]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	331a      	adds	r3, #26
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	b292      	uxth	r2, r2
 800c014:	4611      	mov	r1, r2
 800c016:	4618      	mov	r0, r3
 800c018:	f7ff f939 	bl	800b28e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	2b03      	cmp	r3, #3
 800c022:	d109      	bne.n	800c038 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f103 0214 	add.w	r2, r3, #20
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	0c1b      	lsrs	r3, r3, #16
 800c02e:	b29b      	uxth	r3, r3
 800c030:	4619      	mov	r1, r3
 800c032:	4610      	mov	r0, r2
 800c034:	f7ff f92b 	bl	800b28e <st_word>
	}
}
 800c038:	bf00      	nop
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c04e:	2100      	movs	r1, #0
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff fe2f 	bl	800bcb4 <dir_sdi>
 800c056:	4603      	mov	r3, r0
 800c058:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <dir_find+0x24>
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	e03e      	b.n	800c0e2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	4619      	mov	r1, r3
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f7ff fb48 	bl	800b700 <move_window>
 800c070:	4603      	mov	r3, r0
 800c072:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d12f      	bne.n	800c0da <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <dir_find+0x4e>
 800c088:	2304      	movs	r3, #4
 800c08a:	75fb      	strb	r3, [r7, #23]
 800c08c:	e028      	b.n	800c0e0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	330b      	adds	r3, #11
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	330b      	adds	r3, #11
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	f003 0308 	and.w	r3, r3, #8
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10a      	bne.n	800c0c6 <dir_find+0x86>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a18      	ldr	r0, [r3, #32]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3324      	adds	r3, #36	@ 0x24
 800c0b8:	220b      	movs	r2, #11
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	f7ff f96a 	bl	800b394 <mem_cmp>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00b      	beq.n	800c0de <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff fe6e 	bl	800bdaa <dir_next>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0c5      	beq.n	800c064 <dir_find+0x24>
 800c0d8:	e002      	b.n	800c0e0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c0da:	bf00      	nop
 800c0dc:	e000      	b.n	800c0e0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c0de:	bf00      	nop

	return res;
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7ff ff1a 	bl	800bf34 <dir_alloc>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d11c      	bne.n	800c144 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	4619      	mov	r1, r3
 800c110:	68b8      	ldr	r0, [r7, #8]
 800c112:	f7ff faf5 	bl	800b700 <move_window>
 800c116:	4603      	mov	r3, r0
 800c118:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d111      	bne.n	800c144 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	2220      	movs	r2, #32
 800c126:	2100      	movs	r1, #0
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff f918 	bl	800b35e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a18      	ldr	r0, [r3, #32]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3324      	adds	r3, #36	@ 0x24
 800c136:	220b      	movs	r2, #11
 800c138:	4619      	mov	r1, r3
 800c13a:	f7ff f8ef 	bl	800b31c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2201      	movs	r2, #1
 800c142:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c144:	7bfb      	ldrb	r3, [r7, #15]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
	...

0800c150 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3324      	adds	r3, #36	@ 0x24
 800c164:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c166:	220b      	movs	r2, #11
 800c168:	2120      	movs	r1, #32
 800c16a:	68b8      	ldr	r0, [r7, #8]
 800c16c:	f7ff f8f7 	bl	800b35e <mem_set>
	si = i = 0; ni = 8;
 800c170:	2300      	movs	r3, #0
 800c172:	613b      	str	r3, [r7, #16]
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	61fb      	str	r3, [r7, #28]
 800c178:	2308      	movs	r3, #8
 800c17a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	61fa      	str	r2, [r7, #28]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	4413      	add	r3, r2
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c18a:	7efb      	ldrb	r3, [r7, #27]
 800c18c:	2b20      	cmp	r3, #32
 800c18e:	d94e      	bls.n	800c22e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c190:	7efb      	ldrb	r3, [r7, #27]
 800c192:	2b2f      	cmp	r3, #47	@ 0x2f
 800c194:	d006      	beq.n	800c1a4 <create_name+0x54>
 800c196:	7efb      	ldrb	r3, [r7, #27]
 800c198:	2b5c      	cmp	r3, #92	@ 0x5c
 800c19a:	d110      	bne.n	800c1be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c19c:	e002      	b.n	800c1a4 <create_name+0x54>
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1ae:	d0f6      	beq.n	800c19e <create_name+0x4e>
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1ba:	d0f0      	beq.n	800c19e <create_name+0x4e>
			break;
 800c1bc:	e038      	b.n	800c230 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c1be:	7efb      	ldrb	r3, [r7, #27]
 800c1c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1c2:	d003      	beq.n	800c1cc <create_name+0x7c>
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d30c      	bcc.n	800c1e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	2b0b      	cmp	r3, #11
 800c1d0:	d002      	beq.n	800c1d8 <create_name+0x88>
 800c1d2:	7efb      	ldrb	r3, [r7, #27]
 800c1d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1d6:	d001      	beq.n	800c1dc <create_name+0x8c>
 800c1d8:	2306      	movs	r3, #6
 800c1da:	e044      	b.n	800c266 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c1dc:	2308      	movs	r3, #8
 800c1de:	613b      	str	r3, [r7, #16]
 800c1e0:	230b      	movs	r3, #11
 800c1e2:	617b      	str	r3, [r7, #20]
			continue;
 800c1e4:	e022      	b.n	800c22c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c1e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da04      	bge.n	800c1f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c1ee:	7efb      	ldrb	r3, [r7, #27]
 800c1f0:	3b80      	subs	r3, #128	@ 0x80
 800c1f2:	4a1f      	ldr	r2, [pc, #124]	@ (800c270 <create_name+0x120>)
 800c1f4:	5cd3      	ldrb	r3, [r2, r3]
 800c1f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c1f8:	7efb      	ldrb	r3, [r7, #27]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	481d      	ldr	r0, [pc, #116]	@ (800c274 <create_name+0x124>)
 800c1fe:	f7ff f8f0 	bl	800b3e2 <chk_chr>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <create_name+0xbc>
 800c208:	2306      	movs	r3, #6
 800c20a:	e02c      	b.n	800c266 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c20c:	7efb      	ldrb	r3, [r7, #27]
 800c20e:	2b60      	cmp	r3, #96	@ 0x60
 800c210:	d905      	bls.n	800c21e <create_name+0xce>
 800c212:	7efb      	ldrb	r3, [r7, #27]
 800c214:	2b7a      	cmp	r3, #122	@ 0x7a
 800c216:	d802      	bhi.n	800c21e <create_name+0xce>
 800c218:	7efb      	ldrb	r3, [r7, #27]
 800c21a:	3b20      	subs	r3, #32
 800c21c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	613a      	str	r2, [r7, #16]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	4413      	add	r3, r2
 800c228:	7efa      	ldrb	r2, [r7, #27]
 800c22a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c22c:	e7a6      	b.n	800c17c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c22e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	441a      	add	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <create_name+0xf4>
 800c240:	2306      	movs	r3, #6
 800c242:	e010      	b.n	800c266 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2be5      	cmp	r3, #229	@ 0xe5
 800c24a:	d102      	bne.n	800c252 <create_name+0x102>
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2205      	movs	r2, #5
 800c250:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c252:	7efb      	ldrb	r3, [r7, #27]
 800c254:	2b20      	cmp	r3, #32
 800c256:	d801      	bhi.n	800c25c <create_name+0x10c>
 800c258:	2204      	movs	r2, #4
 800c25a:	e000      	b.n	800c25e <create_name+0x10e>
 800c25c:	2200      	movs	r2, #0
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	330b      	adds	r3, #11
 800c262:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c264:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c266:	4618      	mov	r0, r3
 800c268:	3720      	adds	r7, #32
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	080116d0 	.word	0x080116d0
 800c274:	0801164c 	.word	0x0801164c

0800c278 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c28c:	e002      	b.n	800c294 <follow_path+0x1c>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	3301      	adds	r3, #1
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b2f      	cmp	r3, #47	@ 0x2f
 800c29a:	d0f8      	beq.n	800c28e <follow_path+0x16>
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2a2:	d0f4      	beq.n	800c28e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b1f      	cmp	r3, #31
 800c2b0:	d80a      	bhi.n	800c2c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2280      	movs	r2, #128	@ 0x80
 800c2b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7ff fcf9 	bl	800bcb4 <dir_sdi>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	75fb      	strb	r3, [r7, #23]
 800c2c6:	e043      	b.n	800c350 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c2c8:	463b      	mov	r3, r7
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff ff3f 	bl	800c150 <create_name>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d134      	bne.n	800c346 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff feaf 	bl	800c040 <dir_find>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c2ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00a      	beq.n	800c30a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
 800c2f6:	2b04      	cmp	r3, #4
 800c2f8:	d127      	bne.n	800c34a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c2fa:	7afb      	ldrb	r3, [r7, #11]
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	2b00      	cmp	r3, #0
 800c302:	d122      	bne.n	800c34a <follow_path+0xd2>
 800c304:	2305      	movs	r3, #5
 800c306:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c308:	e01f      	b.n	800c34a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c30a:	7afb      	ldrb	r3, [r7, #11]
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d11c      	bne.n	800c34e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	799b      	ldrb	r3, [r3, #6]
 800c318:	f003 0310 	and.w	r3, r3, #16
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d102      	bne.n	800c326 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c320:	2305      	movs	r3, #5
 800c322:	75fb      	strb	r3, [r7, #23]
 800c324:	e014      	b.n	800c350 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c334:	4413      	add	r3, r2
 800c336:	4619      	mov	r1, r3
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff fe42 	bl	800bfc2 <ld_clust>
 800c33e:	4602      	mov	r2, r0
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c344:	e7c0      	b.n	800c2c8 <follow_path+0x50>
			if (res != FR_OK) break;
 800c346:	bf00      	nop
 800c348:	e002      	b.n	800c350 <follow_path+0xd8>
				break;
 800c34a:	bf00      	nop
 800c34c:	e000      	b.n	800c350 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c34e:	bf00      	nop
			}
		}
	}

	return res;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b087      	sub	sp, #28
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c366:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d031      	beq.n	800c3d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	617b      	str	r3, [r7, #20]
 800c376:	e002      	b.n	800c37e <get_ldnumber+0x24>
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	3301      	adds	r3, #1
 800c37c:	617b      	str	r3, [r7, #20]
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b20      	cmp	r3, #32
 800c384:	d903      	bls.n	800c38e <get_ldnumber+0x34>
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	2b3a      	cmp	r3, #58	@ 0x3a
 800c38c:	d1f4      	bne.n	800c378 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	2b3a      	cmp	r3, #58	@ 0x3a
 800c394:	d11c      	bne.n	800c3d0 <get_ldnumber+0x76>
			tp = *path;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	60fa      	str	r2, [r7, #12]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	3b30      	subs	r3, #48	@ 0x30
 800c3a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2b09      	cmp	r3, #9
 800c3ac:	d80e      	bhi.n	800c3cc <get_ldnumber+0x72>
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d10a      	bne.n	800c3cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d107      	bne.n	800c3cc <get_ldnumber+0x72>
					vol = (int)i;
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	617b      	str	r3, [r7, #20]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	e002      	b.n	800c3d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c3d4:	693b      	ldr	r3, [r7, #16]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	371c      	adds	r7, #28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	70da      	strb	r2, [r3, #3]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff f97e 	bl	800b700 <move_window>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <check_fs+0x2a>
 800c40a:	2304      	movs	r3, #4
 800c40c:	e038      	b.n	800c480 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3330      	adds	r3, #48	@ 0x30
 800c412:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c416:	4618      	mov	r0, r3
 800c418:	f7fe fefe 	bl	800b218 <ld_word>
 800c41c:	4603      	mov	r3, r0
 800c41e:	461a      	mov	r2, r3
 800c420:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c424:	429a      	cmp	r2, r3
 800c426:	d001      	beq.n	800c42c <check_fs+0x48>
 800c428:	2303      	movs	r3, #3
 800c42a:	e029      	b.n	800c480 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c432:	2be9      	cmp	r3, #233	@ 0xe9
 800c434:	d009      	beq.n	800c44a <check_fs+0x66>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c43c:	2beb      	cmp	r3, #235	@ 0xeb
 800c43e:	d11e      	bne.n	800c47e <check_fs+0x9a>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c446:	2b90      	cmp	r3, #144	@ 0x90
 800c448:	d119      	bne.n	800c47e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3330      	adds	r3, #48	@ 0x30
 800c44e:	3336      	adds	r3, #54	@ 0x36
 800c450:	4618      	mov	r0, r3
 800c452:	f7fe fef9 	bl	800b248 <ld_dword>
 800c456:	4603      	mov	r3, r0
 800c458:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c45c:	4a0a      	ldr	r2, [pc, #40]	@ (800c488 <check_fs+0xa4>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d101      	bne.n	800c466 <check_fs+0x82>
 800c462:	2300      	movs	r3, #0
 800c464:	e00c      	b.n	800c480 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3330      	adds	r3, #48	@ 0x30
 800c46a:	3352      	adds	r3, #82	@ 0x52
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe feeb 	bl	800b248 <ld_dword>
 800c472:	4603      	mov	r3, r0
 800c474:	4a05      	ldr	r2, [pc, #20]	@ (800c48c <check_fs+0xa8>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d101      	bne.n	800c47e <check_fs+0x9a>
 800c47a:	2300      	movs	r3, #0
 800c47c:	e000      	b.n	800c480 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c47e:	2302      	movs	r3, #2
}
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	00544146 	.word	0x00544146
 800c48c:	33544146 	.word	0x33544146

0800c490 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b096      	sub	sp, #88	@ 0x58
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4613      	mov	r3, r2
 800c49c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f7ff ff58 	bl	800c35a <get_ldnumber>
 800c4aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	da01      	bge.n	800c4b6 <find_volume+0x26>
 800c4b2:	230b      	movs	r3, #11
 800c4b4:	e22d      	b.n	800c912 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c4b6:	4aa1      	ldr	r2, [pc, #644]	@ (800c73c <find_volume+0x2ac>)
 800c4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <find_volume+0x3a>
 800c4c6:	230c      	movs	r3, #12
 800c4c8:	e223      	b.n	800c912 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	f023 0301 	bic.w	r3, r3, #1
 800c4d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d01a      	beq.n	800c516 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e2:	785b      	ldrb	r3, [r3, #1]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe fe17 	bl	800b118 <disk_status>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c4f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10c      	bne.n	800c516 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c4fc:	79fb      	ldrb	r3, [r7, #7]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d007      	beq.n	800c512 <find_volume+0x82>
 800c502:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c506:	f003 0304 	and.w	r3, r3, #4
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c50e:	230a      	movs	r3, #10
 800c510:	e1ff      	b.n	800c912 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c512:	2300      	movs	r3, #0
 800c514:	e1fd      	b.n	800c912 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	2200      	movs	r2, #0
 800c51a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c522:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c526:	785b      	ldrb	r3, [r3, #1]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe fe0f 	bl	800b14c <disk_initialize>
 800c52e:	4603      	mov	r3, r0
 800c530:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c534:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c538:	f003 0301 	and.w	r3, r3, #1
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c540:	2303      	movs	r3, #3
 800c542:	e1e6      	b.n	800c912 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d007      	beq.n	800c55a <find_volume+0xca>
 800c54a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c54e:	f003 0304 	and.w	r3, r3, #4
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c556:	230a      	movs	r3, #10
 800c558:	e1db      	b.n	800c912 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c55e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c560:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c562:	f7ff ff3f 	bl	800c3e4 <check_fs>
 800c566:	4603      	mov	r3, r0
 800c568:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c56c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c570:	2b02      	cmp	r3, #2
 800c572:	d149      	bne.n	800c608 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c574:	2300      	movs	r3, #0
 800c576:	643b      	str	r3, [r7, #64]	@ 0x40
 800c578:	e01e      	b.n	800c5b8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c588:	4413      	add	r3, r2
 800c58a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58e:	3304      	adds	r3, #4
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d006      	beq.n	800c5a4 <find_volume+0x114>
 800c596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c598:	3308      	adds	r3, #8
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fe fe54 	bl	800b248 <ld_dword>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	e000      	b.n	800c5a6 <find_volume+0x116>
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	3358      	adds	r3, #88	@ 0x58
 800c5ac:	443b      	add	r3, r7
 800c5ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d9dd      	bls.n	800c57a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c5be:	2300      	movs	r3, #0
 800c5c0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c5c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <find_volume+0x13e>
 800c5c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	3358      	adds	r3, #88	@ 0x58
 800c5d4:	443b      	add	r3, r7
 800c5d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c5da:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c5dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d005      	beq.n	800c5ee <find_volume+0x15e>
 800c5e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c5e6:	f7ff fefd 	bl	800c3e4 <check_fs>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	e000      	b.n	800c5f0 <find_volume+0x160>
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c5f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d905      	bls.n	800c608 <find_volume+0x178>
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5fe:	3301      	adds	r3, #1
 800c600:	643b      	str	r3, [r7, #64]	@ 0x40
 800c602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c604:	2b03      	cmp	r3, #3
 800c606:	d9e2      	bls.n	800c5ce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c608:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c60c:	2b04      	cmp	r3, #4
 800c60e:	d101      	bne.n	800c614 <find_volume+0x184>
 800c610:	2301      	movs	r3, #1
 800c612:	e17e      	b.n	800c912 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c614:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d901      	bls.n	800c620 <find_volume+0x190>
 800c61c:	230d      	movs	r3, #13
 800c61e:	e178      	b.n	800c912 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c622:	3330      	adds	r3, #48	@ 0x30
 800c624:	330b      	adds	r3, #11
 800c626:	4618      	mov	r0, r3
 800c628:	f7fe fdf6 	bl	800b218 <ld_word>
 800c62c:	4603      	mov	r3, r0
 800c62e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c632:	d001      	beq.n	800c638 <find_volume+0x1a8>
 800c634:	230d      	movs	r3, #13
 800c636:	e16c      	b.n	800c912 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63a:	3330      	adds	r3, #48	@ 0x30
 800c63c:	3316      	adds	r3, #22
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fe fdea 	bl	800b218 <ld_word>
 800c644:	4603      	mov	r3, r0
 800c646:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <find_volume+0x1cc>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c650:	3330      	adds	r3, #48	@ 0x30
 800c652:	3324      	adds	r3, #36	@ 0x24
 800c654:	4618      	mov	r0, r3
 800c656:	f7fe fdf7 	bl	800b248 <ld_dword>
 800c65a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c660:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c664:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66e:	789b      	ldrb	r3, [r3, #2]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d005      	beq.n	800c680 <find_volume+0x1f0>
 800c674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c676:	789b      	ldrb	r3, [r3, #2]
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d001      	beq.n	800c680 <find_volume+0x1f0>
 800c67c:	230d      	movs	r3, #13
 800c67e:	e148      	b.n	800c912 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c682:	789b      	ldrb	r3, [r3, #2]
 800c684:	461a      	mov	r2, r3
 800c686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c688:	fb02 f303 	mul.w	r3, r2, r3
 800c68c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c694:	461a      	mov	r2, r3
 800c696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c698:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69c:	895b      	ldrh	r3, [r3, #10]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d008      	beq.n	800c6b4 <find_volume+0x224>
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a4:	895b      	ldrh	r3, [r3, #10]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6aa:	895b      	ldrh	r3, [r3, #10]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <find_volume+0x228>
 800c6b4:	230d      	movs	r3, #13
 800c6b6:	e12c      	b.n	800c912 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ba:	3330      	adds	r3, #48	@ 0x30
 800c6bc:	3311      	adds	r3, #17
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fdaa 	bl	800b218 <ld_word>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ce:	891b      	ldrh	r3, [r3, #8]
 800c6d0:	f003 030f 	and.w	r3, r3, #15
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <find_volume+0x24e>
 800c6da:	230d      	movs	r3, #13
 800c6dc:	e119      	b.n	800c912 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e0:	3330      	adds	r3, #48	@ 0x30
 800c6e2:	3313      	adds	r3, #19
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fe fd97 	bl	800b218 <ld_word>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c6ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d106      	bne.n	800c702 <find_volume+0x272>
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f6:	3330      	adds	r3, #48	@ 0x30
 800c6f8:	3320      	adds	r3, #32
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe fda4 	bl	800b248 <ld_dword>
 800c700:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c704:	3330      	adds	r3, #48	@ 0x30
 800c706:	330e      	adds	r3, #14
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fd85 	bl	800b218 <ld_word>
 800c70e:	4603      	mov	r3, r0
 800c710:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c712:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c714:	2b00      	cmp	r3, #0
 800c716:	d101      	bne.n	800c71c <find_volume+0x28c>
 800c718:	230d      	movs	r3, #13
 800c71a:	e0fa      	b.n	800c912 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c71c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c71e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c720:	4413      	add	r3, r2
 800c722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c724:	8912      	ldrh	r2, [r2, #8]
 800c726:	0912      	lsrs	r2, r2, #4
 800c728:	b292      	uxth	r2, r2
 800c72a:	4413      	add	r3, r2
 800c72c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c72e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c732:	429a      	cmp	r2, r3
 800c734:	d204      	bcs.n	800c740 <find_volume+0x2b0>
 800c736:	230d      	movs	r3, #13
 800c738:	e0eb      	b.n	800c912 <find_volume+0x482>
 800c73a:	bf00      	nop
 800c73c:	20001350 	.word	0x20001350
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c748:	8952      	ldrh	r2, [r2, #10]
 800c74a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c74e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	2b00      	cmp	r3, #0
 800c754:	d101      	bne.n	800c75a <find_volume+0x2ca>
 800c756:	230d      	movs	r3, #13
 800c758:	e0db      	b.n	800c912 <find_volume+0x482>
		fmt = FS_FAT32;
 800c75a:	2303      	movs	r3, #3
 800c75c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c762:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c766:	4293      	cmp	r3, r2
 800c768:	d802      	bhi.n	800c770 <find_volume+0x2e0>
 800c76a:	2302      	movs	r3, #2
 800c76c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c776:	4293      	cmp	r3, r2
 800c778:	d802      	bhi.n	800c780 <find_volume+0x2f0>
 800c77a:	2301      	movs	r3, #1
 800c77c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	1c9a      	adds	r2, r3, #2
 800c784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c786:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c78c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c78e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c792:	441a      	add	r2, r3
 800c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c796:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c798:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79c:	441a      	add	r2, r3
 800c79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c7a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d11e      	bne.n	800c7e8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ac:	3330      	adds	r3, #48	@ 0x30
 800c7ae:	332a      	adds	r3, #42	@ 0x2a
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe fd31 	bl	800b218 <ld_word>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <find_volume+0x330>
 800c7bc:	230d      	movs	r3, #13
 800c7be:	e0a8      	b.n	800c912 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c2:	891b      	ldrh	r3, [r3, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <find_volume+0x33c>
 800c7c8:	230d      	movs	r3, #13
 800c7ca:	e0a2      	b.n	800c912 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ce:	3330      	adds	r3, #48	@ 0x30
 800c7d0:	332c      	adds	r3, #44	@ 0x2c
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fd38 	bl	800b248 <ld_dword>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7dc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e0:	695b      	ldr	r3, [r3, #20]
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7e6:	e01f      	b.n	800c828 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ea:	891b      	ldrh	r3, [r3, #8]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <find_volume+0x364>
 800c7f0:	230d      	movs	r3, #13
 800c7f2:	e08e      	b.n	800c912 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f6:	6a1a      	ldr	r2, [r3, #32]
 800c7f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7fa:	441a      	add	r2, r3
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fe:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c800:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c804:	2b02      	cmp	r3, #2
 800c806:	d103      	bne.n	800c810 <find_volume+0x380>
 800c808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	e00a      	b.n	800c826 <find_volume+0x396>
 800c810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c812:	695a      	ldr	r2, [r3, #20]
 800c814:	4613      	mov	r3, r2
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	4413      	add	r3, r2
 800c81a:	085a      	lsrs	r2, r3, #1
 800c81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c826:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82a:	699a      	ldr	r2, [r3, #24]
 800c82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c82e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c832:	0a5b      	lsrs	r3, r3, #9
 800c834:	429a      	cmp	r2, r3
 800c836:	d201      	bcs.n	800c83c <find_volume+0x3ac>
 800c838:	230d      	movs	r3, #13
 800c83a:	e06a      	b.n	800c912 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c842:	611a      	str	r2, [r3, #16]
 800c844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c846:	691a      	ldr	r2, [r3, #16]
 800c848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84e:	2280      	movs	r2, #128	@ 0x80
 800c850:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c852:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c856:	2b03      	cmp	r3, #3
 800c858:	d149      	bne.n	800c8ee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85c:	3330      	adds	r3, #48	@ 0x30
 800c85e:	3330      	adds	r3, #48	@ 0x30
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fcd9 	bl	800b218 <ld_word>
 800c866:	4603      	mov	r3, r0
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d140      	bne.n	800c8ee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c86c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c86e:	3301      	adds	r3, #1
 800c870:	4619      	mov	r1, r3
 800c872:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c874:	f7fe ff44 	bl	800b700 <move_window>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d137      	bne.n	800c8ee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c880:	2200      	movs	r2, #0
 800c882:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c886:	3330      	adds	r3, #48	@ 0x30
 800c888:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fe fcc3 	bl	800b218 <ld_word>
 800c892:	4603      	mov	r3, r0
 800c894:	461a      	mov	r2, r3
 800c896:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d127      	bne.n	800c8ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a0:	3330      	adds	r3, #48	@ 0x30
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe fcd0 	bl	800b248 <ld_dword>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	4a1c      	ldr	r2, [pc, #112]	@ (800c91c <find_volume+0x48c>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d11e      	bne.n	800c8ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b2:	3330      	adds	r3, #48	@ 0x30
 800c8b4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fe fcc5 	bl	800b248 <ld_dword>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	4a17      	ldr	r2, [pc, #92]	@ (800c920 <find_volume+0x490>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d113      	bne.n	800c8ee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c8:	3330      	adds	r3, #48	@ 0x30
 800c8ca:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe fcba 	bl	800b248 <ld_dword>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8dc:	3330      	adds	r3, #48	@ 0x30
 800c8de:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fe fcb0 	bl	800b248 <ld_dword>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ec:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c8f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c924 <find_volume+0x494>)
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	4b09      	ldr	r3, [pc, #36]	@ (800c924 <find_volume+0x494>)
 800c900:	801a      	strh	r2, [r3, #0]
 800c902:	4b08      	ldr	r3, [pc, #32]	@ (800c924 <find_volume+0x494>)
 800c904:	881a      	ldrh	r2, [r3, #0]
 800c906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c908:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c90a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c90c:	f7fe fe90 	bl	800b630 <clear_lock>
#endif
	return FR_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3758      	adds	r7, #88	@ 0x58
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	41615252 	.word	0x41615252
 800c920:	61417272 	.word	0x61417272
 800c924:	20001354 	.word	0x20001354

0800c928 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b088      	sub	sp, #32
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c93a:	f107 0310 	add.w	r3, r7, #16
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff fd0b 	bl	800c35a <get_ldnumber>
 800c944:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	da01      	bge.n	800c950 <f_mount+0x28>
 800c94c:	230b      	movs	r3, #11
 800c94e:	e02b      	b.n	800c9a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c950:	4a17      	ldr	r2, [pc, #92]	@ (800c9b0 <f_mount+0x88>)
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c958:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c960:	69b8      	ldr	r0, [r7, #24]
 800c962:	f7fe fe65 	bl	800b630 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	2200      	movs	r2, #0
 800c96a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	490d      	ldr	r1, [pc, #52]	@ (800c9b0 <f_mount+0x88>)
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <f_mount+0x66>
 800c988:	79fb      	ldrb	r3, [r7, #7]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d001      	beq.n	800c992 <f_mount+0x6a>
 800c98e:	2300      	movs	r3, #0
 800c990:	e00a      	b.n	800c9a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c992:	f107 010c 	add.w	r1, r7, #12
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	2200      	movs	r2, #0
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7ff fd77 	bl	800c490 <find_volume>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3720      	adds	r7, #32
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20001350 	.word	0x20001350

0800c9b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b098      	sub	sp, #96	@ 0x60
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <f_open+0x18>
 800c9c8:	2309      	movs	r3, #9
 800c9ca:	e1a9      	b.n	800cd20 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c9cc:	79fb      	ldrb	r3, [r7, #7]
 800c9ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c9d4:	79fa      	ldrb	r2, [r7, #7]
 800c9d6:	f107 0110 	add.w	r1, r7, #16
 800c9da:	f107 0308 	add.w	r3, r7, #8
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7ff fd56 	bl	800c490 <find_volume>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c9ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f040 818d 	bne.w	800cd0e <f_open+0x35a>
		dj.obj.fs = fs;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	f107 0314 	add.w	r3, r7, #20
 800c9fe:	4611      	mov	r1, r2
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7ff fc39 	bl	800c278 <follow_path>
 800ca06:	4603      	mov	r3, r0
 800ca08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ca0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d118      	bne.n	800ca46 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ca14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ca18:	b25b      	sxtb	r3, r3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	da03      	bge.n	800ca26 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca1e:	2306      	movs	r3, #6
 800ca20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca24:	e00f      	b.n	800ca46 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca26:	79fb      	ldrb	r3, [r7, #7]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	bf8c      	ite	hi
 800ca2c:	2301      	movhi	r3, #1
 800ca2e:	2300      	movls	r3, #0
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	461a      	mov	r2, r3
 800ca34:	f107 0314 	add.w	r3, r7, #20
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fe fcec 	bl	800b418 <chk_lock>
 800ca40:	4603      	mov	r3, r0
 800ca42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	f003 031c 	and.w	r3, r3, #28
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d07f      	beq.n	800cb50 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ca50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d017      	beq.n	800ca88 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca5c:	2b04      	cmp	r3, #4
 800ca5e:	d10e      	bne.n	800ca7e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca60:	f7fe fd36 	bl	800b4d0 <enq_lock>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d006      	beq.n	800ca78 <f_open+0xc4>
 800ca6a:	f107 0314 	add.w	r3, r7, #20
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7ff fb3b 	bl	800c0ea <dir_register>
 800ca74:	4603      	mov	r3, r0
 800ca76:	e000      	b.n	800ca7a <f_open+0xc6>
 800ca78:	2312      	movs	r3, #18
 800ca7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	f043 0308 	orr.w	r3, r3, #8
 800ca84:	71fb      	strb	r3, [r7, #7]
 800ca86:	e010      	b.n	800caaa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca88:	7ebb      	ldrb	r3, [r7, #26]
 800ca8a:	f003 0311 	and.w	r3, r3, #17
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d003      	beq.n	800ca9a <f_open+0xe6>
					res = FR_DENIED;
 800ca92:	2307      	movs	r3, #7
 800ca94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca98:	e007      	b.n	800caaa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	f003 0304 	and.w	r3, r3, #4
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <f_open+0xf6>
 800caa4:	2308      	movs	r3, #8
 800caa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800caaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d168      	bne.n	800cb84 <f_open+0x1d0>
 800cab2:	79fb      	ldrb	r3, [r7, #7]
 800cab4:	f003 0308 	and.w	r3, r3, #8
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d063      	beq.n	800cb84 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cabc:	f7fe face 	bl	800b05c <get_fattime>
 800cac0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac4:	330e      	adds	r3, #14
 800cac6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fe fbfb 	bl	800b2c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad0:	3316      	adds	r3, #22
 800cad2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe fbf5 	bl	800b2c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cadc:	330b      	adds	r3, #11
 800cade:	2220      	movs	r2, #32
 800cae0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cae6:	4611      	mov	r1, r2
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff fa6a 	bl	800bfc2 <ld_clust>
 800caee:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800caf4:	2200      	movs	r2, #0
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fa82 	bl	800c000 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	331c      	adds	r3, #28
 800cb00:	2100      	movs	r1, #0
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fbde 	bl	800b2c4 <st_dword>
					fs->wflag = 1;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d037      	beq.n	800cb84 <f_open+0x1d0>
						dw = fs->winsect;
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb18:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cb1a:	f107 0314 	add.w	r3, r7, #20
 800cb1e:	2200      	movs	r2, #0
 800cb20:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe ffc9 	bl	800baba <remove_chain>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cb2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d126      	bne.n	800cb84 <f_open+0x1d0>
							res = move_window(fs, dw);
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fe fde0 	bl	800b700 <move_window>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb4a:	3a01      	subs	r2, #1
 800cb4c:	60da      	str	r2, [r3, #12]
 800cb4e:	e019      	b.n	800cb84 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d115      	bne.n	800cb84 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb58:	7ebb      	ldrb	r3, [r7, #26]
 800cb5a:	f003 0310 	and.w	r3, r3, #16
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <f_open+0x1b6>
					res = FR_NO_FILE;
 800cb62:	2304      	movs	r3, #4
 800cb64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb68:	e00c      	b.n	800cb84 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb6a:	79fb      	ldrb	r3, [r7, #7]
 800cb6c:	f003 0302 	and.w	r3, r3, #2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d007      	beq.n	800cb84 <f_open+0x1d0>
 800cb74:	7ebb      	ldrb	r3, [r7, #26]
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d002      	beq.n	800cb84 <f_open+0x1d0>
						res = FR_DENIED;
 800cb7e:	2307      	movs	r3, #7
 800cb80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cb84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d126      	bne.n	800cbda <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cb8c:	79fb      	ldrb	r3, [r7, #7]
 800cb8e:	f003 0308 	and.w	r3, r3, #8
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbac:	79fb      	ldrb	r3, [r7, #7]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	bf8c      	ite	hi
 800cbb2:	2301      	movhi	r3, #1
 800cbb4:	2300      	movls	r3, #0
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	461a      	mov	r2, r3
 800cbba:	f107 0314 	add.w	r3, r7, #20
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fe fca7 	bl	800b514 <inc_lock>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d102      	bne.n	800cbda <f_open+0x226>
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cbda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f040 8095 	bne.w	800cd0e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff f9e9 	bl	800bfc2 <ld_clust>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf8:	331c      	adds	r3, #28
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe fb24 	bl	800b248 <ld_dword>
 800cc00:	4602      	mov	r2, r0
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc0c:	693a      	ldr	r2, [r7, #16]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	88da      	ldrh	r2, [r3, #6]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	79fa      	ldrb	r2, [r7, #7]
 800cc1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3330      	adds	r3, #48	@ 0x30
 800cc36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fe fb8e 	bl	800b35e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	f003 0320 	and.w	r3, r3, #32
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d060      	beq.n	800cd0e <f_open+0x35a>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d05c      	beq.n	800cd0e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	68da      	ldr	r2, [r3, #12]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	895b      	ldrh	r3, [r3, #10]
 800cc60:	025b      	lsls	r3, r3, #9
 800cc62:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc70:	e016      	b.n	800cca0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe fd8e 	bl	800b798 <get_fat>
 800cc7c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cc7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d802      	bhi.n	800cc8a <f_open+0x2d6>
 800cc84:	2302      	movs	r3, #2
 800cc86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cc8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc90:	d102      	bne.n	800cc98 <f_open+0x2e4>
 800cc92:	2301      	movs	r3, #1
 800cc94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800cca0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d103      	bne.n	800ccb0 <f_open+0x2fc>
 800cca8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ccaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d8e0      	bhi.n	800cc72 <f_open+0x2be>
				}
				fp->clust = clst;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ccb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d127      	bne.n	800cd0e <f_open+0x35a>
 800ccbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d022      	beq.n	800cd0e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe fd44 	bl	800b75a <clust2sect>
 800ccd2:	6478      	str	r0, [r7, #68]	@ 0x44
 800ccd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d103      	bne.n	800cce2 <f_open+0x32e>
						res = FR_INT_ERR;
 800ccda:	2302      	movs	r3, #2
 800ccdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cce0:	e015      	b.n	800cd0e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce4:	0a5a      	lsrs	r2, r3, #9
 800cce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce8:	441a      	add	r2, r3
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	7858      	ldrb	r0, [r3, #1]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6a1a      	ldr	r2, [r3, #32]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f7fe fa4b 	bl	800b198 <disk_read>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <f_open+0x35a>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <f_open+0x368>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3760      	adds	r7, #96	@ 0x60
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b092      	sub	sp, #72	@ 0x48
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cd34:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800cd38:	f107 030c 	add.w	r3, r7, #12
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7ff fba6 	bl	800c490 <find_volume>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800cd4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f040 8099 	bne.w	800ce86 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800cd54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800cd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd5c:	691a      	ldr	r2, [r3, #16]
 800cd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	3b02      	subs	r3, #2
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d804      	bhi.n	800cd72 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800cd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6a:	691a      	ldr	r2, [r3, #16]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	e089      	b.n	800ce86 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800cd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d128      	bne.n	800cdd0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800cd7e:	2302      	movs	r3, #2
 800cd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd84:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800cd86:	f107 0314 	add.w	r3, r7, #20
 800cd8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe fd03 	bl	800b798 <get_fat>
 800cd92:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800cd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd9a:	d103      	bne.n	800cda4 <f_getfree+0x7c>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cda2:	e063      	b.n	800ce6c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800cda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d103      	bne.n	800cdb2 <f_getfree+0x8a>
 800cdaa:	2302      	movs	r3, #2
 800cdac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cdb0:	e05c      	b.n	800ce6c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800cdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d102      	bne.n	800cdbe <f_getfree+0x96>
 800cdb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdba:	3301      	adds	r3, #1
 800cdbc:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800cdbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d3db      	bcc.n	800cd86 <f_getfree+0x5e>
 800cdce:	e04d      	b.n	800ce6c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800cdd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd2:	695b      	ldr	r3, [r3, #20]
 800cdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	637b      	str	r3, [r7, #52]	@ 0x34
 800cde0:	2300      	movs	r3, #0
 800cde2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800cde4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d113      	bne.n	800ce12 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800cdea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f7fe fc84 	bl	800b700 <move_window>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800cdfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d131      	bne.n	800ce6a <f_getfree+0x142>
							p = fs->win;
 800ce06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce08:	3330      	adds	r3, #48	@ 0x30
 800ce0a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ce0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce10:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ce12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d10f      	bne.n	800ce3a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ce1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce1c:	f7fe f9fc 	bl	800b218 <ld_word>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <f_getfree+0x104>
 800ce26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce28:	3301      	adds	r3, #1
 800ce2a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2e:	3302      	adds	r3, #2
 800ce30:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce34:	3b02      	subs	r3, #2
 800ce36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce38:	e010      	b.n	800ce5c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ce3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce3c:	f7fe fa04 	bl	800b248 <ld_dword>
 800ce40:	4603      	mov	r3, r0
 800ce42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d102      	bne.n	800ce50 <f_getfree+0x128>
 800ce4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ce50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce52:	3304      	adds	r3, #4
 800ce54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce58:	3b04      	subs	r3, #4
 800ce5a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ce5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1bd      	bne.n	800cde4 <f_getfree+0xbc>
 800ce68:	e000      	b.n	800ce6c <f_getfree+0x144>
							if (res != FR_OK) break;
 800ce6a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce70:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ce72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce76:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ce78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7a:	791a      	ldrb	r2, [r3, #4]
 800ce7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7e:	f042 0201 	orr.w	r2, r2, #1
 800ce82:	b2d2      	uxtb	r2, r2
 800ce84:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ce86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3748      	adds	r7, #72	@ 0x48
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
	...

0800ce94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ceaa:	4b1f      	ldr	r3, [pc, #124]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceac:	7a5b      	ldrb	r3, [r3, #9]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d131      	bne.n	800cf18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ceb4:	4b1c      	ldr	r3, [pc, #112]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceb6:	7a5b      	ldrb	r3, [r3, #9]
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	461a      	mov	r2, r3
 800cebc:	4b1a      	ldr	r3, [pc, #104]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cebe:	2100      	movs	r1, #0
 800cec0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cec2:	4b19      	ldr	r3, [pc, #100]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cec4:	7a5b      	ldrb	r3, [r3, #9]
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	4a17      	ldr	r2, [pc, #92]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ced2:	4b15      	ldr	r3, [pc, #84]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ced4:	7a5b      	ldrb	r3, [r3, #9]
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	461a      	mov	r2, r3
 800ceda:	4b13      	ldr	r3, [pc, #76]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cedc:	4413      	add	r3, r2
 800cede:	79fa      	ldrb	r2, [r7, #7]
 800cee0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cee2:	4b11      	ldr	r3, [pc, #68]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cee4:	7a5b      	ldrb	r3, [r3, #9]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	b2d1      	uxtb	r1, r2
 800ceec:	4a0e      	ldr	r2, [pc, #56]	@ (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceee:	7251      	strb	r1, [r2, #9]
 800cef0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cef2:	7dbb      	ldrb	r3, [r7, #22]
 800cef4:	3330      	adds	r3, #48	@ 0x30
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	3301      	adds	r3, #1
 800cf00:	223a      	movs	r2, #58	@ 0x3a
 800cf02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	3302      	adds	r3, #2
 800cf08:	222f      	movs	r2, #47	@ 0x2f
 800cf0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	3303      	adds	r3, #3
 800cf10:	2200      	movs	r2, #0
 800cf12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	20001378 	.word	0x20001378

0800cf2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf36:	2200      	movs	r2, #0
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff ffaa 	bl	800ce94 <FATFS_LinkDriverEx>
 800cf40:	4603      	mov	r3, r0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <__cvt>:
 800cf4a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf4e:	ec57 6b10 	vmov	r6, r7, d0
 800cf52:	2f00      	cmp	r7, #0
 800cf54:	460c      	mov	r4, r1
 800cf56:	4619      	mov	r1, r3
 800cf58:	463b      	mov	r3, r7
 800cf5a:	bfbb      	ittet	lt
 800cf5c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cf60:	461f      	movlt	r7, r3
 800cf62:	2300      	movge	r3, #0
 800cf64:	232d      	movlt	r3, #45	@ 0x2d
 800cf66:	700b      	strb	r3, [r1, #0]
 800cf68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf6a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cf6e:	4691      	mov	r9, r2
 800cf70:	f023 0820 	bic.w	r8, r3, #32
 800cf74:	bfbc      	itt	lt
 800cf76:	4632      	movlt	r2, r6
 800cf78:	4616      	movlt	r6, r2
 800cf7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf7e:	d005      	beq.n	800cf8c <__cvt+0x42>
 800cf80:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf84:	d100      	bne.n	800cf88 <__cvt+0x3e>
 800cf86:	3401      	adds	r4, #1
 800cf88:	2102      	movs	r1, #2
 800cf8a:	e000      	b.n	800cf8e <__cvt+0x44>
 800cf8c:	2103      	movs	r1, #3
 800cf8e:	ab03      	add	r3, sp, #12
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	ab02      	add	r3, sp, #8
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	ec47 6b10 	vmov	d0, r6, r7
 800cf9a:	4653      	mov	r3, sl
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	f001 ff83 	bl	800eea8 <_dtoa_r>
 800cfa2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	d119      	bne.n	800cfde <__cvt+0x94>
 800cfaa:	f019 0f01 	tst.w	r9, #1
 800cfae:	d00e      	beq.n	800cfce <__cvt+0x84>
 800cfb0:	eb00 0904 	add.w	r9, r0, r4
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	4630      	mov	r0, r6
 800cfba:	4639      	mov	r1, r7
 800cfbc:	f7f3 fdac 	bl	8000b18 <__aeabi_dcmpeq>
 800cfc0:	b108      	cbz	r0, 800cfc6 <__cvt+0x7c>
 800cfc2:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfc6:	2230      	movs	r2, #48	@ 0x30
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	454b      	cmp	r3, r9
 800cfcc:	d31e      	bcc.n	800d00c <__cvt+0xc2>
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfd2:	1b5b      	subs	r3, r3, r5
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	b004      	add	sp, #16
 800cfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfde:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cfe2:	eb00 0904 	add.w	r9, r0, r4
 800cfe6:	d1e5      	bne.n	800cfb4 <__cvt+0x6a>
 800cfe8:	7803      	ldrb	r3, [r0, #0]
 800cfea:	2b30      	cmp	r3, #48	@ 0x30
 800cfec:	d10a      	bne.n	800d004 <__cvt+0xba>
 800cfee:	2200      	movs	r2, #0
 800cff0:	2300      	movs	r3, #0
 800cff2:	4630      	mov	r0, r6
 800cff4:	4639      	mov	r1, r7
 800cff6:	f7f3 fd8f 	bl	8000b18 <__aeabi_dcmpeq>
 800cffa:	b918      	cbnz	r0, 800d004 <__cvt+0xba>
 800cffc:	f1c4 0401 	rsb	r4, r4, #1
 800d000:	f8ca 4000 	str.w	r4, [sl]
 800d004:	f8da 3000 	ldr.w	r3, [sl]
 800d008:	4499      	add	r9, r3
 800d00a:	e7d3      	b.n	800cfb4 <__cvt+0x6a>
 800d00c:	1c59      	adds	r1, r3, #1
 800d00e:	9103      	str	r1, [sp, #12]
 800d010:	701a      	strb	r2, [r3, #0]
 800d012:	e7d9      	b.n	800cfc8 <__cvt+0x7e>

0800d014 <__exponent>:
 800d014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d016:	2900      	cmp	r1, #0
 800d018:	bfba      	itte	lt
 800d01a:	4249      	neglt	r1, r1
 800d01c:	232d      	movlt	r3, #45	@ 0x2d
 800d01e:	232b      	movge	r3, #43	@ 0x2b
 800d020:	2909      	cmp	r1, #9
 800d022:	7002      	strb	r2, [r0, #0]
 800d024:	7043      	strb	r3, [r0, #1]
 800d026:	dd29      	ble.n	800d07c <__exponent+0x68>
 800d028:	f10d 0307 	add.w	r3, sp, #7
 800d02c:	461d      	mov	r5, r3
 800d02e:	270a      	movs	r7, #10
 800d030:	461a      	mov	r2, r3
 800d032:	fbb1 f6f7 	udiv	r6, r1, r7
 800d036:	fb07 1416 	mls	r4, r7, r6, r1
 800d03a:	3430      	adds	r4, #48	@ 0x30
 800d03c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d040:	460c      	mov	r4, r1
 800d042:	2c63      	cmp	r4, #99	@ 0x63
 800d044:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d048:	4631      	mov	r1, r6
 800d04a:	dcf1      	bgt.n	800d030 <__exponent+0x1c>
 800d04c:	3130      	adds	r1, #48	@ 0x30
 800d04e:	1e94      	subs	r4, r2, #2
 800d050:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d054:	1c41      	adds	r1, r0, #1
 800d056:	4623      	mov	r3, r4
 800d058:	42ab      	cmp	r3, r5
 800d05a:	d30a      	bcc.n	800d072 <__exponent+0x5e>
 800d05c:	f10d 0309 	add.w	r3, sp, #9
 800d060:	1a9b      	subs	r3, r3, r2
 800d062:	42ac      	cmp	r4, r5
 800d064:	bf88      	it	hi
 800d066:	2300      	movhi	r3, #0
 800d068:	3302      	adds	r3, #2
 800d06a:	4403      	add	r3, r0
 800d06c:	1a18      	subs	r0, r3, r0
 800d06e:	b003      	add	sp, #12
 800d070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d072:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d076:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d07a:	e7ed      	b.n	800d058 <__exponent+0x44>
 800d07c:	2330      	movs	r3, #48	@ 0x30
 800d07e:	3130      	adds	r1, #48	@ 0x30
 800d080:	7083      	strb	r3, [r0, #2]
 800d082:	70c1      	strb	r1, [r0, #3]
 800d084:	1d03      	adds	r3, r0, #4
 800d086:	e7f1      	b.n	800d06c <__exponent+0x58>

0800d088 <_printf_float>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	b08d      	sub	sp, #52	@ 0x34
 800d08e:	460c      	mov	r4, r1
 800d090:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d094:	4616      	mov	r6, r2
 800d096:	461f      	mov	r7, r3
 800d098:	4605      	mov	r5, r0
 800d09a:	f001 fdf7 	bl	800ec8c <_localeconv_r>
 800d09e:	6803      	ldr	r3, [r0, #0]
 800d0a0:	9304      	str	r3, [sp, #16]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7f3 f90c 	bl	80002c0 <strlen>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d0b0:	9005      	str	r0, [sp, #20]
 800d0b2:	3307      	adds	r3, #7
 800d0b4:	f023 0307 	bic.w	r3, r3, #7
 800d0b8:	f103 0208 	add.w	r2, r3, #8
 800d0bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d0c0:	f8d4 b000 	ldr.w	fp, [r4]
 800d0c4:	f8c8 2000 	str.w	r2, [r8]
 800d0c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d0d0:	9307      	str	r3, [sp, #28]
 800d0d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800d0d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d0da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0de:	4b9c      	ldr	r3, [pc, #624]	@ (800d350 <_printf_float+0x2c8>)
 800d0e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0e4:	f7f3 fd4a 	bl	8000b7c <__aeabi_dcmpun>
 800d0e8:	bb70      	cbnz	r0, 800d148 <_printf_float+0xc0>
 800d0ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0ee:	4b98      	ldr	r3, [pc, #608]	@ (800d350 <_printf_float+0x2c8>)
 800d0f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0f4:	f7f3 fd24 	bl	8000b40 <__aeabi_dcmple>
 800d0f8:	bb30      	cbnz	r0, 800d148 <_printf_float+0xc0>
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	4640      	mov	r0, r8
 800d100:	4649      	mov	r1, r9
 800d102:	f7f3 fd13 	bl	8000b2c <__aeabi_dcmplt>
 800d106:	b110      	cbz	r0, 800d10e <_printf_float+0x86>
 800d108:	232d      	movs	r3, #45	@ 0x2d
 800d10a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d10e:	4a91      	ldr	r2, [pc, #580]	@ (800d354 <_printf_float+0x2cc>)
 800d110:	4b91      	ldr	r3, [pc, #580]	@ (800d358 <_printf_float+0x2d0>)
 800d112:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d116:	bf94      	ite	ls
 800d118:	4690      	movls	r8, r2
 800d11a:	4698      	movhi	r8, r3
 800d11c:	2303      	movs	r3, #3
 800d11e:	6123      	str	r3, [r4, #16]
 800d120:	f02b 0304 	bic.w	r3, fp, #4
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	f04f 0900 	mov.w	r9, #0
 800d12a:	9700      	str	r7, [sp, #0]
 800d12c:	4633      	mov	r3, r6
 800d12e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d130:	4621      	mov	r1, r4
 800d132:	4628      	mov	r0, r5
 800d134:	f000 fa7c 	bl	800d630 <_printf_common>
 800d138:	3001      	adds	r0, #1
 800d13a:	f040 808d 	bne.w	800d258 <_printf_float+0x1d0>
 800d13e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d142:	b00d      	add	sp, #52	@ 0x34
 800d144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d148:	4642      	mov	r2, r8
 800d14a:	464b      	mov	r3, r9
 800d14c:	4640      	mov	r0, r8
 800d14e:	4649      	mov	r1, r9
 800d150:	f7f3 fd14 	bl	8000b7c <__aeabi_dcmpun>
 800d154:	b140      	cbz	r0, 800d168 <_printf_float+0xe0>
 800d156:	464b      	mov	r3, r9
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bfbc      	itt	lt
 800d15c:	232d      	movlt	r3, #45	@ 0x2d
 800d15e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d162:	4a7e      	ldr	r2, [pc, #504]	@ (800d35c <_printf_float+0x2d4>)
 800d164:	4b7e      	ldr	r3, [pc, #504]	@ (800d360 <_printf_float+0x2d8>)
 800d166:	e7d4      	b.n	800d112 <_printf_float+0x8a>
 800d168:	6863      	ldr	r3, [r4, #4]
 800d16a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d16e:	9206      	str	r2, [sp, #24]
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	d13b      	bne.n	800d1ec <_printf_float+0x164>
 800d174:	2306      	movs	r3, #6
 800d176:	6063      	str	r3, [r4, #4]
 800d178:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d17c:	2300      	movs	r3, #0
 800d17e:	6022      	str	r2, [r4, #0]
 800d180:	9303      	str	r3, [sp, #12]
 800d182:	ab0a      	add	r3, sp, #40	@ 0x28
 800d184:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d188:	ab09      	add	r3, sp, #36	@ 0x24
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	6861      	ldr	r1, [r4, #4]
 800d18e:	ec49 8b10 	vmov	d0, r8, r9
 800d192:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d196:	4628      	mov	r0, r5
 800d198:	f7ff fed7 	bl	800cf4a <__cvt>
 800d19c:	9b06      	ldr	r3, [sp, #24]
 800d19e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1a0:	2b47      	cmp	r3, #71	@ 0x47
 800d1a2:	4680      	mov	r8, r0
 800d1a4:	d129      	bne.n	800d1fa <_printf_float+0x172>
 800d1a6:	1cc8      	adds	r0, r1, #3
 800d1a8:	db02      	blt.n	800d1b0 <_printf_float+0x128>
 800d1aa:	6863      	ldr	r3, [r4, #4]
 800d1ac:	4299      	cmp	r1, r3
 800d1ae:	dd41      	ble.n	800d234 <_printf_float+0x1ac>
 800d1b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800d1b4:	fa5f fa8a 	uxtb.w	sl, sl
 800d1b8:	3901      	subs	r1, #1
 800d1ba:	4652      	mov	r2, sl
 800d1bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d1c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800d1c2:	f7ff ff27 	bl	800d014 <__exponent>
 800d1c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1c8:	1813      	adds	r3, r2, r0
 800d1ca:	2a01      	cmp	r2, #1
 800d1cc:	4681      	mov	r9, r0
 800d1ce:	6123      	str	r3, [r4, #16]
 800d1d0:	dc02      	bgt.n	800d1d8 <_printf_float+0x150>
 800d1d2:	6822      	ldr	r2, [r4, #0]
 800d1d4:	07d2      	lsls	r2, r2, #31
 800d1d6:	d501      	bpl.n	800d1dc <_printf_float+0x154>
 800d1d8:	3301      	adds	r3, #1
 800d1da:	6123      	str	r3, [r4, #16]
 800d1dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d0a2      	beq.n	800d12a <_printf_float+0xa2>
 800d1e4:	232d      	movs	r3, #45	@ 0x2d
 800d1e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1ea:	e79e      	b.n	800d12a <_printf_float+0xa2>
 800d1ec:	9a06      	ldr	r2, [sp, #24]
 800d1ee:	2a47      	cmp	r2, #71	@ 0x47
 800d1f0:	d1c2      	bne.n	800d178 <_printf_float+0xf0>
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1c0      	bne.n	800d178 <_printf_float+0xf0>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e7bd      	b.n	800d176 <_printf_float+0xee>
 800d1fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1fe:	d9db      	bls.n	800d1b8 <_printf_float+0x130>
 800d200:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d204:	d118      	bne.n	800d238 <_printf_float+0x1b0>
 800d206:	2900      	cmp	r1, #0
 800d208:	6863      	ldr	r3, [r4, #4]
 800d20a:	dd0b      	ble.n	800d224 <_printf_float+0x19c>
 800d20c:	6121      	str	r1, [r4, #16]
 800d20e:	b913      	cbnz	r3, 800d216 <_printf_float+0x18e>
 800d210:	6822      	ldr	r2, [r4, #0]
 800d212:	07d0      	lsls	r0, r2, #31
 800d214:	d502      	bpl.n	800d21c <_printf_float+0x194>
 800d216:	3301      	adds	r3, #1
 800d218:	440b      	add	r3, r1
 800d21a:	6123      	str	r3, [r4, #16]
 800d21c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d21e:	f04f 0900 	mov.w	r9, #0
 800d222:	e7db      	b.n	800d1dc <_printf_float+0x154>
 800d224:	b913      	cbnz	r3, 800d22c <_printf_float+0x1a4>
 800d226:	6822      	ldr	r2, [r4, #0]
 800d228:	07d2      	lsls	r2, r2, #31
 800d22a:	d501      	bpl.n	800d230 <_printf_float+0x1a8>
 800d22c:	3302      	adds	r3, #2
 800d22e:	e7f4      	b.n	800d21a <_printf_float+0x192>
 800d230:	2301      	movs	r3, #1
 800d232:	e7f2      	b.n	800d21a <_printf_float+0x192>
 800d234:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d23a:	4299      	cmp	r1, r3
 800d23c:	db05      	blt.n	800d24a <_printf_float+0x1c2>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	6121      	str	r1, [r4, #16]
 800d242:	07d8      	lsls	r0, r3, #31
 800d244:	d5ea      	bpl.n	800d21c <_printf_float+0x194>
 800d246:	1c4b      	adds	r3, r1, #1
 800d248:	e7e7      	b.n	800d21a <_printf_float+0x192>
 800d24a:	2900      	cmp	r1, #0
 800d24c:	bfd4      	ite	le
 800d24e:	f1c1 0202 	rsble	r2, r1, #2
 800d252:	2201      	movgt	r2, #1
 800d254:	4413      	add	r3, r2
 800d256:	e7e0      	b.n	800d21a <_printf_float+0x192>
 800d258:	6823      	ldr	r3, [r4, #0]
 800d25a:	055a      	lsls	r2, r3, #21
 800d25c:	d407      	bmi.n	800d26e <_printf_float+0x1e6>
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	4642      	mov	r2, r8
 800d262:	4631      	mov	r1, r6
 800d264:	4628      	mov	r0, r5
 800d266:	47b8      	blx	r7
 800d268:	3001      	adds	r0, #1
 800d26a:	d12b      	bne.n	800d2c4 <_printf_float+0x23c>
 800d26c:	e767      	b.n	800d13e <_printf_float+0xb6>
 800d26e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d272:	f240 80dd 	bls.w	800d430 <_printf_float+0x3a8>
 800d276:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d27a:	2200      	movs	r2, #0
 800d27c:	2300      	movs	r3, #0
 800d27e:	f7f3 fc4b 	bl	8000b18 <__aeabi_dcmpeq>
 800d282:	2800      	cmp	r0, #0
 800d284:	d033      	beq.n	800d2ee <_printf_float+0x266>
 800d286:	4a37      	ldr	r2, [pc, #220]	@ (800d364 <_printf_float+0x2dc>)
 800d288:	2301      	movs	r3, #1
 800d28a:	4631      	mov	r1, r6
 800d28c:	4628      	mov	r0, r5
 800d28e:	47b8      	blx	r7
 800d290:	3001      	adds	r0, #1
 800d292:	f43f af54 	beq.w	800d13e <_printf_float+0xb6>
 800d296:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d29a:	4543      	cmp	r3, r8
 800d29c:	db02      	blt.n	800d2a4 <_printf_float+0x21c>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	07d8      	lsls	r0, r3, #31
 800d2a2:	d50f      	bpl.n	800d2c4 <_printf_float+0x23c>
 800d2a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f43f af45 	beq.w	800d13e <_printf_float+0xb6>
 800d2b4:	f04f 0900 	mov.w	r9, #0
 800d2b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d2bc:	f104 0a1a 	add.w	sl, r4, #26
 800d2c0:	45c8      	cmp	r8, r9
 800d2c2:	dc09      	bgt.n	800d2d8 <_printf_float+0x250>
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	079b      	lsls	r3, r3, #30
 800d2c8:	f100 8103 	bmi.w	800d4d2 <_printf_float+0x44a>
 800d2cc:	68e0      	ldr	r0, [r4, #12]
 800d2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2d0:	4298      	cmp	r0, r3
 800d2d2:	bfb8      	it	lt
 800d2d4:	4618      	movlt	r0, r3
 800d2d6:	e734      	b.n	800d142 <_printf_float+0xba>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	4652      	mov	r2, sl
 800d2dc:	4631      	mov	r1, r6
 800d2de:	4628      	mov	r0, r5
 800d2e0:	47b8      	blx	r7
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	f43f af2b 	beq.w	800d13e <_printf_float+0xb6>
 800d2e8:	f109 0901 	add.w	r9, r9, #1
 800d2ec:	e7e8      	b.n	800d2c0 <_printf_float+0x238>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	dc39      	bgt.n	800d368 <_printf_float+0x2e0>
 800d2f4:	4a1b      	ldr	r2, [pc, #108]	@ (800d364 <_printf_float+0x2dc>)
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	47b8      	blx	r7
 800d2fe:	3001      	adds	r0, #1
 800d300:	f43f af1d 	beq.w	800d13e <_printf_float+0xb6>
 800d304:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d308:	ea59 0303 	orrs.w	r3, r9, r3
 800d30c:	d102      	bne.n	800d314 <_printf_float+0x28c>
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	07d9      	lsls	r1, r3, #31
 800d312:	d5d7      	bpl.n	800d2c4 <_printf_float+0x23c>
 800d314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d318:	4631      	mov	r1, r6
 800d31a:	4628      	mov	r0, r5
 800d31c:	47b8      	blx	r7
 800d31e:	3001      	adds	r0, #1
 800d320:	f43f af0d 	beq.w	800d13e <_printf_float+0xb6>
 800d324:	f04f 0a00 	mov.w	sl, #0
 800d328:	f104 0b1a 	add.w	fp, r4, #26
 800d32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d32e:	425b      	negs	r3, r3
 800d330:	4553      	cmp	r3, sl
 800d332:	dc01      	bgt.n	800d338 <_printf_float+0x2b0>
 800d334:	464b      	mov	r3, r9
 800d336:	e793      	b.n	800d260 <_printf_float+0x1d8>
 800d338:	2301      	movs	r3, #1
 800d33a:	465a      	mov	r2, fp
 800d33c:	4631      	mov	r1, r6
 800d33e:	4628      	mov	r0, r5
 800d340:	47b8      	blx	r7
 800d342:	3001      	adds	r0, #1
 800d344:	f43f aefb 	beq.w	800d13e <_printf_float+0xb6>
 800d348:	f10a 0a01 	add.w	sl, sl, #1
 800d34c:	e7ee      	b.n	800d32c <_printf_float+0x2a4>
 800d34e:	bf00      	nop
 800d350:	7fefffff 	.word	0x7fefffff
 800d354:	08011750 	.word	0x08011750
 800d358:	08011754 	.word	0x08011754
 800d35c:	08011758 	.word	0x08011758
 800d360:	0801175c 	.word	0x0801175c
 800d364:	08011760 	.word	0x08011760
 800d368:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d36a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d36e:	4553      	cmp	r3, sl
 800d370:	bfa8      	it	ge
 800d372:	4653      	movge	r3, sl
 800d374:	2b00      	cmp	r3, #0
 800d376:	4699      	mov	r9, r3
 800d378:	dc36      	bgt.n	800d3e8 <_printf_float+0x360>
 800d37a:	f04f 0b00 	mov.w	fp, #0
 800d37e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d382:	f104 021a 	add.w	r2, r4, #26
 800d386:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d388:	9306      	str	r3, [sp, #24]
 800d38a:	eba3 0309 	sub.w	r3, r3, r9
 800d38e:	455b      	cmp	r3, fp
 800d390:	dc31      	bgt.n	800d3f6 <_printf_float+0x36e>
 800d392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d394:	459a      	cmp	sl, r3
 800d396:	dc3a      	bgt.n	800d40e <_printf_float+0x386>
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	07da      	lsls	r2, r3, #31
 800d39c:	d437      	bmi.n	800d40e <_printf_float+0x386>
 800d39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a0:	ebaa 0903 	sub.w	r9, sl, r3
 800d3a4:	9b06      	ldr	r3, [sp, #24]
 800d3a6:	ebaa 0303 	sub.w	r3, sl, r3
 800d3aa:	4599      	cmp	r9, r3
 800d3ac:	bfa8      	it	ge
 800d3ae:	4699      	movge	r9, r3
 800d3b0:	f1b9 0f00 	cmp.w	r9, #0
 800d3b4:	dc33      	bgt.n	800d41e <_printf_float+0x396>
 800d3b6:	f04f 0800 	mov.w	r8, #0
 800d3ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3be:	f104 0b1a 	add.w	fp, r4, #26
 800d3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3c4:	ebaa 0303 	sub.w	r3, sl, r3
 800d3c8:	eba3 0309 	sub.w	r3, r3, r9
 800d3cc:	4543      	cmp	r3, r8
 800d3ce:	f77f af79 	ble.w	800d2c4 <_printf_float+0x23c>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	465a      	mov	r2, fp
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	4628      	mov	r0, r5
 800d3da:	47b8      	blx	r7
 800d3dc:	3001      	adds	r0, #1
 800d3de:	f43f aeae 	beq.w	800d13e <_printf_float+0xb6>
 800d3e2:	f108 0801 	add.w	r8, r8, #1
 800d3e6:	e7ec      	b.n	800d3c2 <_printf_float+0x33a>
 800d3e8:	4642      	mov	r2, r8
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	47b8      	blx	r7
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d1c2      	bne.n	800d37a <_printf_float+0x2f2>
 800d3f4:	e6a3      	b.n	800d13e <_printf_float+0xb6>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	4631      	mov	r1, r6
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	9206      	str	r2, [sp, #24]
 800d3fe:	47b8      	blx	r7
 800d400:	3001      	adds	r0, #1
 800d402:	f43f ae9c 	beq.w	800d13e <_printf_float+0xb6>
 800d406:	9a06      	ldr	r2, [sp, #24]
 800d408:	f10b 0b01 	add.w	fp, fp, #1
 800d40c:	e7bb      	b.n	800d386 <_printf_float+0x2fe>
 800d40e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d412:	4631      	mov	r1, r6
 800d414:	4628      	mov	r0, r5
 800d416:	47b8      	blx	r7
 800d418:	3001      	adds	r0, #1
 800d41a:	d1c0      	bne.n	800d39e <_printf_float+0x316>
 800d41c:	e68f      	b.n	800d13e <_printf_float+0xb6>
 800d41e:	9a06      	ldr	r2, [sp, #24]
 800d420:	464b      	mov	r3, r9
 800d422:	4442      	add	r2, r8
 800d424:	4631      	mov	r1, r6
 800d426:	4628      	mov	r0, r5
 800d428:	47b8      	blx	r7
 800d42a:	3001      	adds	r0, #1
 800d42c:	d1c3      	bne.n	800d3b6 <_printf_float+0x32e>
 800d42e:	e686      	b.n	800d13e <_printf_float+0xb6>
 800d430:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d434:	f1ba 0f01 	cmp.w	sl, #1
 800d438:	dc01      	bgt.n	800d43e <_printf_float+0x3b6>
 800d43a:	07db      	lsls	r3, r3, #31
 800d43c:	d536      	bpl.n	800d4ac <_printf_float+0x424>
 800d43e:	2301      	movs	r3, #1
 800d440:	4642      	mov	r2, r8
 800d442:	4631      	mov	r1, r6
 800d444:	4628      	mov	r0, r5
 800d446:	47b8      	blx	r7
 800d448:	3001      	adds	r0, #1
 800d44a:	f43f ae78 	beq.w	800d13e <_printf_float+0xb6>
 800d44e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d452:	4631      	mov	r1, r6
 800d454:	4628      	mov	r0, r5
 800d456:	47b8      	blx	r7
 800d458:	3001      	adds	r0, #1
 800d45a:	f43f ae70 	beq.w	800d13e <_printf_float+0xb6>
 800d45e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d462:	2200      	movs	r2, #0
 800d464:	2300      	movs	r3, #0
 800d466:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d46a:	f7f3 fb55 	bl	8000b18 <__aeabi_dcmpeq>
 800d46e:	b9c0      	cbnz	r0, 800d4a2 <_printf_float+0x41a>
 800d470:	4653      	mov	r3, sl
 800d472:	f108 0201 	add.w	r2, r8, #1
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	47b8      	blx	r7
 800d47c:	3001      	adds	r0, #1
 800d47e:	d10c      	bne.n	800d49a <_printf_float+0x412>
 800d480:	e65d      	b.n	800d13e <_printf_float+0xb6>
 800d482:	2301      	movs	r3, #1
 800d484:	465a      	mov	r2, fp
 800d486:	4631      	mov	r1, r6
 800d488:	4628      	mov	r0, r5
 800d48a:	47b8      	blx	r7
 800d48c:	3001      	adds	r0, #1
 800d48e:	f43f ae56 	beq.w	800d13e <_printf_float+0xb6>
 800d492:	f108 0801 	add.w	r8, r8, #1
 800d496:	45d0      	cmp	r8, sl
 800d498:	dbf3      	blt.n	800d482 <_printf_float+0x3fa>
 800d49a:	464b      	mov	r3, r9
 800d49c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d4a0:	e6df      	b.n	800d262 <_printf_float+0x1da>
 800d4a2:	f04f 0800 	mov.w	r8, #0
 800d4a6:	f104 0b1a 	add.w	fp, r4, #26
 800d4aa:	e7f4      	b.n	800d496 <_printf_float+0x40e>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	4642      	mov	r2, r8
 800d4b0:	e7e1      	b.n	800d476 <_printf_float+0x3ee>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	464a      	mov	r2, r9
 800d4b6:	4631      	mov	r1, r6
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	47b8      	blx	r7
 800d4bc:	3001      	adds	r0, #1
 800d4be:	f43f ae3e 	beq.w	800d13e <_printf_float+0xb6>
 800d4c2:	f108 0801 	add.w	r8, r8, #1
 800d4c6:	68e3      	ldr	r3, [r4, #12]
 800d4c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4ca:	1a5b      	subs	r3, r3, r1
 800d4cc:	4543      	cmp	r3, r8
 800d4ce:	dcf0      	bgt.n	800d4b2 <_printf_float+0x42a>
 800d4d0:	e6fc      	b.n	800d2cc <_printf_float+0x244>
 800d4d2:	f04f 0800 	mov.w	r8, #0
 800d4d6:	f104 0919 	add.w	r9, r4, #25
 800d4da:	e7f4      	b.n	800d4c6 <_printf_float+0x43e>

0800d4dc <malloc>:
 800d4dc:	4b02      	ldr	r3, [pc, #8]	@ (800d4e8 <malloc+0xc>)
 800d4de:	4601      	mov	r1, r0
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	f000 b825 	b.w	800d530 <_malloc_r>
 800d4e6:	bf00      	nop
 800d4e8:	200001a4 	.word	0x200001a4

0800d4ec <sbrk_aligned>:
 800d4ec:	b570      	push	{r4, r5, r6, lr}
 800d4ee:	4e0f      	ldr	r6, [pc, #60]	@ (800d52c <sbrk_aligned+0x40>)
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	6831      	ldr	r1, [r6, #0]
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	b911      	cbnz	r1, 800d4fe <sbrk_aligned+0x12>
 800d4f8:	f001 fbcc 	bl	800ec94 <_sbrk_r>
 800d4fc:	6030      	str	r0, [r6, #0]
 800d4fe:	4621      	mov	r1, r4
 800d500:	4628      	mov	r0, r5
 800d502:	f001 fbc7 	bl	800ec94 <_sbrk_r>
 800d506:	1c43      	adds	r3, r0, #1
 800d508:	d103      	bne.n	800d512 <sbrk_aligned+0x26>
 800d50a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d50e:	4620      	mov	r0, r4
 800d510:	bd70      	pop	{r4, r5, r6, pc}
 800d512:	1cc4      	adds	r4, r0, #3
 800d514:	f024 0403 	bic.w	r4, r4, #3
 800d518:	42a0      	cmp	r0, r4
 800d51a:	d0f8      	beq.n	800d50e <sbrk_aligned+0x22>
 800d51c:	1a21      	subs	r1, r4, r0
 800d51e:	4628      	mov	r0, r5
 800d520:	f001 fbb8 	bl	800ec94 <_sbrk_r>
 800d524:	3001      	adds	r0, #1
 800d526:	d1f2      	bne.n	800d50e <sbrk_aligned+0x22>
 800d528:	e7ef      	b.n	800d50a <sbrk_aligned+0x1e>
 800d52a:	bf00      	nop
 800d52c:	20001384 	.word	0x20001384

0800d530 <_malloc_r>:
 800d530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d534:	1ccd      	adds	r5, r1, #3
 800d536:	f025 0503 	bic.w	r5, r5, #3
 800d53a:	3508      	adds	r5, #8
 800d53c:	2d0c      	cmp	r5, #12
 800d53e:	bf38      	it	cc
 800d540:	250c      	movcc	r5, #12
 800d542:	2d00      	cmp	r5, #0
 800d544:	4606      	mov	r6, r0
 800d546:	db01      	blt.n	800d54c <_malloc_r+0x1c>
 800d548:	42a9      	cmp	r1, r5
 800d54a:	d904      	bls.n	800d556 <_malloc_r+0x26>
 800d54c:	230c      	movs	r3, #12
 800d54e:	6033      	str	r3, [r6, #0]
 800d550:	2000      	movs	r0, #0
 800d552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d62c <_malloc_r+0xfc>
 800d55a:	f000 fc0b 	bl	800dd74 <__malloc_lock>
 800d55e:	f8d8 3000 	ldr.w	r3, [r8]
 800d562:	461c      	mov	r4, r3
 800d564:	bb44      	cbnz	r4, 800d5b8 <_malloc_r+0x88>
 800d566:	4629      	mov	r1, r5
 800d568:	4630      	mov	r0, r6
 800d56a:	f7ff ffbf 	bl	800d4ec <sbrk_aligned>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	4604      	mov	r4, r0
 800d572:	d158      	bne.n	800d626 <_malloc_r+0xf6>
 800d574:	f8d8 4000 	ldr.w	r4, [r8]
 800d578:	4627      	mov	r7, r4
 800d57a:	2f00      	cmp	r7, #0
 800d57c:	d143      	bne.n	800d606 <_malloc_r+0xd6>
 800d57e:	2c00      	cmp	r4, #0
 800d580:	d04b      	beq.n	800d61a <_malloc_r+0xea>
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	4639      	mov	r1, r7
 800d586:	4630      	mov	r0, r6
 800d588:	eb04 0903 	add.w	r9, r4, r3
 800d58c:	f001 fb82 	bl	800ec94 <_sbrk_r>
 800d590:	4581      	cmp	r9, r0
 800d592:	d142      	bne.n	800d61a <_malloc_r+0xea>
 800d594:	6821      	ldr	r1, [r4, #0]
 800d596:	1a6d      	subs	r5, r5, r1
 800d598:	4629      	mov	r1, r5
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7ff ffa6 	bl	800d4ec <sbrk_aligned>
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d03a      	beq.n	800d61a <_malloc_r+0xea>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	442b      	add	r3, r5
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	bb62      	cbnz	r2, 800d60c <_malloc_r+0xdc>
 800d5b2:	f8c8 7000 	str.w	r7, [r8]
 800d5b6:	e00f      	b.n	800d5d8 <_malloc_r+0xa8>
 800d5b8:	6822      	ldr	r2, [r4, #0]
 800d5ba:	1b52      	subs	r2, r2, r5
 800d5bc:	d420      	bmi.n	800d600 <_malloc_r+0xd0>
 800d5be:	2a0b      	cmp	r2, #11
 800d5c0:	d917      	bls.n	800d5f2 <_malloc_r+0xc2>
 800d5c2:	1961      	adds	r1, r4, r5
 800d5c4:	42a3      	cmp	r3, r4
 800d5c6:	6025      	str	r5, [r4, #0]
 800d5c8:	bf18      	it	ne
 800d5ca:	6059      	strne	r1, [r3, #4]
 800d5cc:	6863      	ldr	r3, [r4, #4]
 800d5ce:	bf08      	it	eq
 800d5d0:	f8c8 1000 	streq.w	r1, [r8]
 800d5d4:	5162      	str	r2, [r4, r5]
 800d5d6:	604b      	str	r3, [r1, #4]
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f000 fbd1 	bl	800dd80 <__malloc_unlock>
 800d5de:	f104 000b 	add.w	r0, r4, #11
 800d5e2:	1d23      	adds	r3, r4, #4
 800d5e4:	f020 0007 	bic.w	r0, r0, #7
 800d5e8:	1ac2      	subs	r2, r0, r3
 800d5ea:	bf1c      	itt	ne
 800d5ec:	1a1b      	subne	r3, r3, r0
 800d5ee:	50a3      	strne	r3, [r4, r2]
 800d5f0:	e7af      	b.n	800d552 <_malloc_r+0x22>
 800d5f2:	6862      	ldr	r2, [r4, #4]
 800d5f4:	42a3      	cmp	r3, r4
 800d5f6:	bf0c      	ite	eq
 800d5f8:	f8c8 2000 	streq.w	r2, [r8]
 800d5fc:	605a      	strne	r2, [r3, #4]
 800d5fe:	e7eb      	b.n	800d5d8 <_malloc_r+0xa8>
 800d600:	4623      	mov	r3, r4
 800d602:	6864      	ldr	r4, [r4, #4]
 800d604:	e7ae      	b.n	800d564 <_malloc_r+0x34>
 800d606:	463c      	mov	r4, r7
 800d608:	687f      	ldr	r7, [r7, #4]
 800d60a:	e7b6      	b.n	800d57a <_malloc_r+0x4a>
 800d60c:	461a      	mov	r2, r3
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	42a3      	cmp	r3, r4
 800d612:	d1fb      	bne.n	800d60c <_malloc_r+0xdc>
 800d614:	2300      	movs	r3, #0
 800d616:	6053      	str	r3, [r2, #4]
 800d618:	e7de      	b.n	800d5d8 <_malloc_r+0xa8>
 800d61a:	230c      	movs	r3, #12
 800d61c:	6033      	str	r3, [r6, #0]
 800d61e:	4630      	mov	r0, r6
 800d620:	f000 fbae 	bl	800dd80 <__malloc_unlock>
 800d624:	e794      	b.n	800d550 <_malloc_r+0x20>
 800d626:	6005      	str	r5, [r0, #0]
 800d628:	e7d6      	b.n	800d5d8 <_malloc_r+0xa8>
 800d62a:	bf00      	nop
 800d62c:	20001388 	.word	0x20001388

0800d630 <_printf_common>:
 800d630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d634:	4616      	mov	r6, r2
 800d636:	4698      	mov	r8, r3
 800d638:	688a      	ldr	r2, [r1, #8]
 800d63a:	690b      	ldr	r3, [r1, #16]
 800d63c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d640:	4293      	cmp	r3, r2
 800d642:	bfb8      	it	lt
 800d644:	4613      	movlt	r3, r2
 800d646:	6033      	str	r3, [r6, #0]
 800d648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d64c:	4607      	mov	r7, r0
 800d64e:	460c      	mov	r4, r1
 800d650:	b10a      	cbz	r2, 800d656 <_printf_common+0x26>
 800d652:	3301      	adds	r3, #1
 800d654:	6033      	str	r3, [r6, #0]
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	0699      	lsls	r1, r3, #26
 800d65a:	bf42      	ittt	mi
 800d65c:	6833      	ldrmi	r3, [r6, #0]
 800d65e:	3302      	addmi	r3, #2
 800d660:	6033      	strmi	r3, [r6, #0]
 800d662:	6825      	ldr	r5, [r4, #0]
 800d664:	f015 0506 	ands.w	r5, r5, #6
 800d668:	d106      	bne.n	800d678 <_printf_common+0x48>
 800d66a:	f104 0a19 	add.w	sl, r4, #25
 800d66e:	68e3      	ldr	r3, [r4, #12]
 800d670:	6832      	ldr	r2, [r6, #0]
 800d672:	1a9b      	subs	r3, r3, r2
 800d674:	42ab      	cmp	r3, r5
 800d676:	dc26      	bgt.n	800d6c6 <_printf_common+0x96>
 800d678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d67c:	6822      	ldr	r2, [r4, #0]
 800d67e:	3b00      	subs	r3, #0
 800d680:	bf18      	it	ne
 800d682:	2301      	movne	r3, #1
 800d684:	0692      	lsls	r2, r2, #26
 800d686:	d42b      	bmi.n	800d6e0 <_printf_common+0xb0>
 800d688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d68c:	4641      	mov	r1, r8
 800d68e:	4638      	mov	r0, r7
 800d690:	47c8      	blx	r9
 800d692:	3001      	adds	r0, #1
 800d694:	d01e      	beq.n	800d6d4 <_printf_common+0xa4>
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	6922      	ldr	r2, [r4, #16]
 800d69a:	f003 0306 	and.w	r3, r3, #6
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	bf02      	ittt	eq
 800d6a2:	68e5      	ldreq	r5, [r4, #12]
 800d6a4:	6833      	ldreq	r3, [r6, #0]
 800d6a6:	1aed      	subeq	r5, r5, r3
 800d6a8:	68a3      	ldr	r3, [r4, #8]
 800d6aa:	bf0c      	ite	eq
 800d6ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6b0:	2500      	movne	r5, #0
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	bfc4      	itt	gt
 800d6b6:	1a9b      	subgt	r3, r3, r2
 800d6b8:	18ed      	addgt	r5, r5, r3
 800d6ba:	2600      	movs	r6, #0
 800d6bc:	341a      	adds	r4, #26
 800d6be:	42b5      	cmp	r5, r6
 800d6c0:	d11a      	bne.n	800d6f8 <_printf_common+0xc8>
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	e008      	b.n	800d6d8 <_printf_common+0xa8>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	4652      	mov	r2, sl
 800d6ca:	4641      	mov	r1, r8
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	47c8      	blx	r9
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	d103      	bne.n	800d6dc <_printf_common+0xac>
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6dc:	3501      	adds	r5, #1
 800d6de:	e7c6      	b.n	800d66e <_printf_common+0x3e>
 800d6e0:	18e1      	adds	r1, r4, r3
 800d6e2:	1c5a      	adds	r2, r3, #1
 800d6e4:	2030      	movs	r0, #48	@ 0x30
 800d6e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6ea:	4422      	add	r2, r4
 800d6ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d6f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d6f4:	3302      	adds	r3, #2
 800d6f6:	e7c7      	b.n	800d688 <_printf_common+0x58>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	4622      	mov	r2, r4
 800d6fc:	4641      	mov	r1, r8
 800d6fe:	4638      	mov	r0, r7
 800d700:	47c8      	blx	r9
 800d702:	3001      	adds	r0, #1
 800d704:	d0e6      	beq.n	800d6d4 <_printf_common+0xa4>
 800d706:	3601      	adds	r6, #1
 800d708:	e7d9      	b.n	800d6be <_printf_common+0x8e>
	...

0800d70c <_printf_i>:
 800d70c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d710:	7e0f      	ldrb	r7, [r1, #24]
 800d712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d714:	2f78      	cmp	r7, #120	@ 0x78
 800d716:	4691      	mov	r9, r2
 800d718:	4680      	mov	r8, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	469a      	mov	sl, r3
 800d71e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d722:	d807      	bhi.n	800d734 <_printf_i+0x28>
 800d724:	2f62      	cmp	r7, #98	@ 0x62
 800d726:	d80a      	bhi.n	800d73e <_printf_i+0x32>
 800d728:	2f00      	cmp	r7, #0
 800d72a:	f000 80d2 	beq.w	800d8d2 <_printf_i+0x1c6>
 800d72e:	2f58      	cmp	r7, #88	@ 0x58
 800d730:	f000 80b9 	beq.w	800d8a6 <_printf_i+0x19a>
 800d734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d73c:	e03a      	b.n	800d7b4 <_printf_i+0xa8>
 800d73e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d742:	2b15      	cmp	r3, #21
 800d744:	d8f6      	bhi.n	800d734 <_printf_i+0x28>
 800d746:	a101      	add	r1, pc, #4	@ (adr r1, 800d74c <_printf_i+0x40>)
 800d748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d74c:	0800d7a5 	.word	0x0800d7a5
 800d750:	0800d7b9 	.word	0x0800d7b9
 800d754:	0800d735 	.word	0x0800d735
 800d758:	0800d735 	.word	0x0800d735
 800d75c:	0800d735 	.word	0x0800d735
 800d760:	0800d735 	.word	0x0800d735
 800d764:	0800d7b9 	.word	0x0800d7b9
 800d768:	0800d735 	.word	0x0800d735
 800d76c:	0800d735 	.word	0x0800d735
 800d770:	0800d735 	.word	0x0800d735
 800d774:	0800d735 	.word	0x0800d735
 800d778:	0800d8b9 	.word	0x0800d8b9
 800d77c:	0800d7e3 	.word	0x0800d7e3
 800d780:	0800d873 	.word	0x0800d873
 800d784:	0800d735 	.word	0x0800d735
 800d788:	0800d735 	.word	0x0800d735
 800d78c:	0800d8db 	.word	0x0800d8db
 800d790:	0800d735 	.word	0x0800d735
 800d794:	0800d7e3 	.word	0x0800d7e3
 800d798:	0800d735 	.word	0x0800d735
 800d79c:	0800d735 	.word	0x0800d735
 800d7a0:	0800d87b 	.word	0x0800d87b
 800d7a4:	6833      	ldr	r3, [r6, #0]
 800d7a6:	1d1a      	adds	r2, r3, #4
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	6032      	str	r2, [r6, #0]
 800d7ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e09d      	b.n	800d8f4 <_printf_i+0x1e8>
 800d7b8:	6833      	ldr	r3, [r6, #0]
 800d7ba:	6820      	ldr	r0, [r4, #0]
 800d7bc:	1d19      	adds	r1, r3, #4
 800d7be:	6031      	str	r1, [r6, #0]
 800d7c0:	0606      	lsls	r6, r0, #24
 800d7c2:	d501      	bpl.n	800d7c8 <_printf_i+0xbc>
 800d7c4:	681d      	ldr	r5, [r3, #0]
 800d7c6:	e003      	b.n	800d7d0 <_printf_i+0xc4>
 800d7c8:	0645      	lsls	r5, r0, #25
 800d7ca:	d5fb      	bpl.n	800d7c4 <_printf_i+0xb8>
 800d7cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7d0:	2d00      	cmp	r5, #0
 800d7d2:	da03      	bge.n	800d7dc <_printf_i+0xd0>
 800d7d4:	232d      	movs	r3, #45	@ 0x2d
 800d7d6:	426d      	negs	r5, r5
 800d7d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7dc:	4859      	ldr	r0, [pc, #356]	@ (800d944 <_printf_i+0x238>)
 800d7de:	230a      	movs	r3, #10
 800d7e0:	e011      	b.n	800d806 <_printf_i+0xfa>
 800d7e2:	6821      	ldr	r1, [r4, #0]
 800d7e4:	6833      	ldr	r3, [r6, #0]
 800d7e6:	0608      	lsls	r0, r1, #24
 800d7e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7ec:	d402      	bmi.n	800d7f4 <_printf_i+0xe8>
 800d7ee:	0649      	lsls	r1, r1, #25
 800d7f0:	bf48      	it	mi
 800d7f2:	b2ad      	uxthmi	r5, r5
 800d7f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d7f6:	4853      	ldr	r0, [pc, #332]	@ (800d944 <_printf_i+0x238>)
 800d7f8:	6033      	str	r3, [r6, #0]
 800d7fa:	bf14      	ite	ne
 800d7fc:	230a      	movne	r3, #10
 800d7fe:	2308      	moveq	r3, #8
 800d800:	2100      	movs	r1, #0
 800d802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d806:	6866      	ldr	r6, [r4, #4]
 800d808:	60a6      	str	r6, [r4, #8]
 800d80a:	2e00      	cmp	r6, #0
 800d80c:	bfa2      	ittt	ge
 800d80e:	6821      	ldrge	r1, [r4, #0]
 800d810:	f021 0104 	bicge.w	r1, r1, #4
 800d814:	6021      	strge	r1, [r4, #0]
 800d816:	b90d      	cbnz	r5, 800d81c <_printf_i+0x110>
 800d818:	2e00      	cmp	r6, #0
 800d81a:	d04b      	beq.n	800d8b4 <_printf_i+0x1a8>
 800d81c:	4616      	mov	r6, r2
 800d81e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d822:	fb03 5711 	mls	r7, r3, r1, r5
 800d826:	5dc7      	ldrb	r7, [r0, r7]
 800d828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d82c:	462f      	mov	r7, r5
 800d82e:	42bb      	cmp	r3, r7
 800d830:	460d      	mov	r5, r1
 800d832:	d9f4      	bls.n	800d81e <_printf_i+0x112>
 800d834:	2b08      	cmp	r3, #8
 800d836:	d10b      	bne.n	800d850 <_printf_i+0x144>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	07df      	lsls	r7, r3, #31
 800d83c:	d508      	bpl.n	800d850 <_printf_i+0x144>
 800d83e:	6923      	ldr	r3, [r4, #16]
 800d840:	6861      	ldr	r1, [r4, #4]
 800d842:	4299      	cmp	r1, r3
 800d844:	bfde      	ittt	le
 800d846:	2330      	movle	r3, #48	@ 0x30
 800d848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d84c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d850:	1b92      	subs	r2, r2, r6
 800d852:	6122      	str	r2, [r4, #16]
 800d854:	f8cd a000 	str.w	sl, [sp]
 800d858:	464b      	mov	r3, r9
 800d85a:	aa03      	add	r2, sp, #12
 800d85c:	4621      	mov	r1, r4
 800d85e:	4640      	mov	r0, r8
 800d860:	f7ff fee6 	bl	800d630 <_printf_common>
 800d864:	3001      	adds	r0, #1
 800d866:	d14a      	bne.n	800d8fe <_printf_i+0x1f2>
 800d868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d86c:	b004      	add	sp, #16
 800d86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	f043 0320 	orr.w	r3, r3, #32
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	4833      	ldr	r0, [pc, #204]	@ (800d948 <_printf_i+0x23c>)
 800d87c:	2778      	movs	r7, #120	@ 0x78
 800d87e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	6831      	ldr	r1, [r6, #0]
 800d886:	061f      	lsls	r7, r3, #24
 800d888:	f851 5b04 	ldr.w	r5, [r1], #4
 800d88c:	d402      	bmi.n	800d894 <_printf_i+0x188>
 800d88e:	065f      	lsls	r7, r3, #25
 800d890:	bf48      	it	mi
 800d892:	b2ad      	uxthmi	r5, r5
 800d894:	6031      	str	r1, [r6, #0]
 800d896:	07d9      	lsls	r1, r3, #31
 800d898:	bf44      	itt	mi
 800d89a:	f043 0320 	orrmi.w	r3, r3, #32
 800d89e:	6023      	strmi	r3, [r4, #0]
 800d8a0:	b11d      	cbz	r5, 800d8aa <_printf_i+0x19e>
 800d8a2:	2310      	movs	r3, #16
 800d8a4:	e7ac      	b.n	800d800 <_printf_i+0xf4>
 800d8a6:	4827      	ldr	r0, [pc, #156]	@ (800d944 <_printf_i+0x238>)
 800d8a8:	e7e9      	b.n	800d87e <_printf_i+0x172>
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	f023 0320 	bic.w	r3, r3, #32
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	e7f6      	b.n	800d8a2 <_printf_i+0x196>
 800d8b4:	4616      	mov	r6, r2
 800d8b6:	e7bd      	b.n	800d834 <_printf_i+0x128>
 800d8b8:	6833      	ldr	r3, [r6, #0]
 800d8ba:	6825      	ldr	r5, [r4, #0]
 800d8bc:	6961      	ldr	r1, [r4, #20]
 800d8be:	1d18      	adds	r0, r3, #4
 800d8c0:	6030      	str	r0, [r6, #0]
 800d8c2:	062e      	lsls	r6, r5, #24
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	d501      	bpl.n	800d8cc <_printf_i+0x1c0>
 800d8c8:	6019      	str	r1, [r3, #0]
 800d8ca:	e002      	b.n	800d8d2 <_printf_i+0x1c6>
 800d8cc:	0668      	lsls	r0, r5, #25
 800d8ce:	d5fb      	bpl.n	800d8c8 <_printf_i+0x1bc>
 800d8d0:	8019      	strh	r1, [r3, #0]
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	4616      	mov	r6, r2
 800d8d8:	e7bc      	b.n	800d854 <_printf_i+0x148>
 800d8da:	6833      	ldr	r3, [r6, #0]
 800d8dc:	1d1a      	adds	r2, r3, #4
 800d8de:	6032      	str	r2, [r6, #0]
 800d8e0:	681e      	ldr	r6, [r3, #0]
 800d8e2:	6862      	ldr	r2, [r4, #4]
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7f2 fc9a 	bl	8000220 <memchr>
 800d8ec:	b108      	cbz	r0, 800d8f2 <_printf_i+0x1e6>
 800d8ee:	1b80      	subs	r0, r0, r6
 800d8f0:	6060      	str	r0, [r4, #4]
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	6123      	str	r3, [r4, #16]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8fc:	e7aa      	b.n	800d854 <_printf_i+0x148>
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	4632      	mov	r2, r6
 800d902:	4649      	mov	r1, r9
 800d904:	4640      	mov	r0, r8
 800d906:	47d0      	blx	sl
 800d908:	3001      	adds	r0, #1
 800d90a:	d0ad      	beq.n	800d868 <_printf_i+0x15c>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	079b      	lsls	r3, r3, #30
 800d910:	d413      	bmi.n	800d93a <_printf_i+0x22e>
 800d912:	68e0      	ldr	r0, [r4, #12]
 800d914:	9b03      	ldr	r3, [sp, #12]
 800d916:	4298      	cmp	r0, r3
 800d918:	bfb8      	it	lt
 800d91a:	4618      	movlt	r0, r3
 800d91c:	e7a6      	b.n	800d86c <_printf_i+0x160>
 800d91e:	2301      	movs	r3, #1
 800d920:	4632      	mov	r2, r6
 800d922:	4649      	mov	r1, r9
 800d924:	4640      	mov	r0, r8
 800d926:	47d0      	blx	sl
 800d928:	3001      	adds	r0, #1
 800d92a:	d09d      	beq.n	800d868 <_printf_i+0x15c>
 800d92c:	3501      	adds	r5, #1
 800d92e:	68e3      	ldr	r3, [r4, #12]
 800d930:	9903      	ldr	r1, [sp, #12]
 800d932:	1a5b      	subs	r3, r3, r1
 800d934:	42ab      	cmp	r3, r5
 800d936:	dcf2      	bgt.n	800d91e <_printf_i+0x212>
 800d938:	e7eb      	b.n	800d912 <_printf_i+0x206>
 800d93a:	2500      	movs	r5, #0
 800d93c:	f104 0619 	add.w	r6, r4, #25
 800d940:	e7f5      	b.n	800d92e <_printf_i+0x222>
 800d942:	bf00      	nop
 800d944:	08011762 	.word	0x08011762
 800d948:	08011773 	.word	0x08011773

0800d94c <_scanf_float>:
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	b087      	sub	sp, #28
 800d952:	4617      	mov	r7, r2
 800d954:	9303      	str	r3, [sp, #12]
 800d956:	688b      	ldr	r3, [r1, #8]
 800d958:	1e5a      	subs	r2, r3, #1
 800d95a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d95e:	bf81      	itttt	hi
 800d960:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d964:	eb03 0b05 	addhi.w	fp, r3, r5
 800d968:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d96c:	608b      	strhi	r3, [r1, #8]
 800d96e:	680b      	ldr	r3, [r1, #0]
 800d970:	460a      	mov	r2, r1
 800d972:	f04f 0500 	mov.w	r5, #0
 800d976:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d97a:	f842 3b1c 	str.w	r3, [r2], #28
 800d97e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d982:	4680      	mov	r8, r0
 800d984:	460c      	mov	r4, r1
 800d986:	bf98      	it	ls
 800d988:	f04f 0b00 	movls.w	fp, #0
 800d98c:	9201      	str	r2, [sp, #4]
 800d98e:	4616      	mov	r6, r2
 800d990:	46aa      	mov	sl, r5
 800d992:	46a9      	mov	r9, r5
 800d994:	9502      	str	r5, [sp, #8]
 800d996:	68a2      	ldr	r2, [r4, #8]
 800d998:	b152      	cbz	r2, 800d9b0 <_scanf_float+0x64>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	2b4e      	cmp	r3, #78	@ 0x4e
 800d9a0:	d864      	bhi.n	800da6c <_scanf_float+0x120>
 800d9a2:	2b40      	cmp	r3, #64	@ 0x40
 800d9a4:	d83c      	bhi.n	800da20 <_scanf_float+0xd4>
 800d9a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d9aa:	b2c8      	uxtb	r0, r1
 800d9ac:	280e      	cmp	r0, #14
 800d9ae:	d93a      	bls.n	800da26 <_scanf_float+0xda>
 800d9b0:	f1b9 0f00 	cmp.w	r9, #0
 800d9b4:	d003      	beq.n	800d9be <_scanf_float+0x72>
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d9c2:	f1ba 0f01 	cmp.w	sl, #1
 800d9c6:	f200 8117 	bhi.w	800dbf8 <_scanf_float+0x2ac>
 800d9ca:	9b01      	ldr	r3, [sp, #4]
 800d9cc:	429e      	cmp	r6, r3
 800d9ce:	f200 8108 	bhi.w	800dbe2 <_scanf_float+0x296>
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	b007      	add	sp, #28
 800d9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9da:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d9de:	2a0d      	cmp	r2, #13
 800d9e0:	d8e6      	bhi.n	800d9b0 <_scanf_float+0x64>
 800d9e2:	a101      	add	r1, pc, #4	@ (adr r1, 800d9e8 <_scanf_float+0x9c>)
 800d9e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d9e8:	0800db2f 	.word	0x0800db2f
 800d9ec:	0800d9b1 	.word	0x0800d9b1
 800d9f0:	0800d9b1 	.word	0x0800d9b1
 800d9f4:	0800d9b1 	.word	0x0800d9b1
 800d9f8:	0800db8f 	.word	0x0800db8f
 800d9fc:	0800db67 	.word	0x0800db67
 800da00:	0800d9b1 	.word	0x0800d9b1
 800da04:	0800d9b1 	.word	0x0800d9b1
 800da08:	0800db3d 	.word	0x0800db3d
 800da0c:	0800d9b1 	.word	0x0800d9b1
 800da10:	0800d9b1 	.word	0x0800d9b1
 800da14:	0800d9b1 	.word	0x0800d9b1
 800da18:	0800d9b1 	.word	0x0800d9b1
 800da1c:	0800daf5 	.word	0x0800daf5
 800da20:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800da24:	e7db      	b.n	800d9de <_scanf_float+0x92>
 800da26:	290e      	cmp	r1, #14
 800da28:	d8c2      	bhi.n	800d9b0 <_scanf_float+0x64>
 800da2a:	a001      	add	r0, pc, #4	@ (adr r0, 800da30 <_scanf_float+0xe4>)
 800da2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800da30:	0800dae5 	.word	0x0800dae5
 800da34:	0800d9b1 	.word	0x0800d9b1
 800da38:	0800dae5 	.word	0x0800dae5
 800da3c:	0800db7b 	.word	0x0800db7b
 800da40:	0800d9b1 	.word	0x0800d9b1
 800da44:	0800da8d 	.word	0x0800da8d
 800da48:	0800dacb 	.word	0x0800dacb
 800da4c:	0800dacb 	.word	0x0800dacb
 800da50:	0800dacb 	.word	0x0800dacb
 800da54:	0800dacb 	.word	0x0800dacb
 800da58:	0800dacb 	.word	0x0800dacb
 800da5c:	0800dacb 	.word	0x0800dacb
 800da60:	0800dacb 	.word	0x0800dacb
 800da64:	0800dacb 	.word	0x0800dacb
 800da68:	0800dacb 	.word	0x0800dacb
 800da6c:	2b6e      	cmp	r3, #110	@ 0x6e
 800da6e:	d809      	bhi.n	800da84 <_scanf_float+0x138>
 800da70:	2b60      	cmp	r3, #96	@ 0x60
 800da72:	d8b2      	bhi.n	800d9da <_scanf_float+0x8e>
 800da74:	2b54      	cmp	r3, #84	@ 0x54
 800da76:	d07b      	beq.n	800db70 <_scanf_float+0x224>
 800da78:	2b59      	cmp	r3, #89	@ 0x59
 800da7a:	d199      	bne.n	800d9b0 <_scanf_float+0x64>
 800da7c:	2d07      	cmp	r5, #7
 800da7e:	d197      	bne.n	800d9b0 <_scanf_float+0x64>
 800da80:	2508      	movs	r5, #8
 800da82:	e02c      	b.n	800dade <_scanf_float+0x192>
 800da84:	2b74      	cmp	r3, #116	@ 0x74
 800da86:	d073      	beq.n	800db70 <_scanf_float+0x224>
 800da88:	2b79      	cmp	r3, #121	@ 0x79
 800da8a:	e7f6      	b.n	800da7a <_scanf_float+0x12e>
 800da8c:	6821      	ldr	r1, [r4, #0]
 800da8e:	05c8      	lsls	r0, r1, #23
 800da90:	d51b      	bpl.n	800daca <_scanf_float+0x17e>
 800da92:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800da96:	6021      	str	r1, [r4, #0]
 800da98:	f109 0901 	add.w	r9, r9, #1
 800da9c:	f1bb 0f00 	cmp.w	fp, #0
 800daa0:	d003      	beq.n	800daaa <_scanf_float+0x15e>
 800daa2:	3201      	adds	r2, #1
 800daa4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800daa8:	60a2      	str	r2, [r4, #8]
 800daaa:	68a3      	ldr	r3, [r4, #8]
 800daac:	3b01      	subs	r3, #1
 800daae:	60a3      	str	r3, [r4, #8]
 800dab0:	6923      	ldr	r3, [r4, #16]
 800dab2:	3301      	adds	r3, #1
 800dab4:	6123      	str	r3, [r4, #16]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	3b01      	subs	r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	607b      	str	r3, [r7, #4]
 800dabe:	f340 8087 	ble.w	800dbd0 <_scanf_float+0x284>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	3301      	adds	r3, #1
 800dac6:	603b      	str	r3, [r7, #0]
 800dac8:	e765      	b.n	800d996 <_scanf_float+0x4a>
 800daca:	eb1a 0105 	adds.w	r1, sl, r5
 800dace:	f47f af6f 	bne.w	800d9b0 <_scanf_float+0x64>
 800dad2:	6822      	ldr	r2, [r4, #0]
 800dad4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dad8:	6022      	str	r2, [r4, #0]
 800dada:	460d      	mov	r5, r1
 800dadc:	468a      	mov	sl, r1
 800dade:	f806 3b01 	strb.w	r3, [r6], #1
 800dae2:	e7e2      	b.n	800daaa <_scanf_float+0x15e>
 800dae4:	6822      	ldr	r2, [r4, #0]
 800dae6:	0610      	lsls	r0, r2, #24
 800dae8:	f57f af62 	bpl.w	800d9b0 <_scanf_float+0x64>
 800daec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800daf0:	6022      	str	r2, [r4, #0]
 800daf2:	e7f4      	b.n	800dade <_scanf_float+0x192>
 800daf4:	f1ba 0f00 	cmp.w	sl, #0
 800daf8:	d10e      	bne.n	800db18 <_scanf_float+0x1cc>
 800dafa:	f1b9 0f00 	cmp.w	r9, #0
 800dafe:	d10e      	bne.n	800db1e <_scanf_float+0x1d2>
 800db00:	6822      	ldr	r2, [r4, #0]
 800db02:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800db06:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800db0a:	d108      	bne.n	800db1e <_scanf_float+0x1d2>
 800db0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800db10:	6022      	str	r2, [r4, #0]
 800db12:	f04f 0a01 	mov.w	sl, #1
 800db16:	e7e2      	b.n	800dade <_scanf_float+0x192>
 800db18:	f1ba 0f02 	cmp.w	sl, #2
 800db1c:	d055      	beq.n	800dbca <_scanf_float+0x27e>
 800db1e:	2d01      	cmp	r5, #1
 800db20:	d002      	beq.n	800db28 <_scanf_float+0x1dc>
 800db22:	2d04      	cmp	r5, #4
 800db24:	f47f af44 	bne.w	800d9b0 <_scanf_float+0x64>
 800db28:	3501      	adds	r5, #1
 800db2a:	b2ed      	uxtb	r5, r5
 800db2c:	e7d7      	b.n	800dade <_scanf_float+0x192>
 800db2e:	f1ba 0f01 	cmp.w	sl, #1
 800db32:	f47f af3d 	bne.w	800d9b0 <_scanf_float+0x64>
 800db36:	f04f 0a02 	mov.w	sl, #2
 800db3a:	e7d0      	b.n	800dade <_scanf_float+0x192>
 800db3c:	b97d      	cbnz	r5, 800db5e <_scanf_float+0x212>
 800db3e:	f1b9 0f00 	cmp.w	r9, #0
 800db42:	f47f af38 	bne.w	800d9b6 <_scanf_float+0x6a>
 800db46:	6822      	ldr	r2, [r4, #0]
 800db48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800db4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800db50:	f040 8108 	bne.w	800dd64 <_scanf_float+0x418>
 800db54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800db58:	6022      	str	r2, [r4, #0]
 800db5a:	2501      	movs	r5, #1
 800db5c:	e7bf      	b.n	800dade <_scanf_float+0x192>
 800db5e:	2d03      	cmp	r5, #3
 800db60:	d0e2      	beq.n	800db28 <_scanf_float+0x1dc>
 800db62:	2d05      	cmp	r5, #5
 800db64:	e7de      	b.n	800db24 <_scanf_float+0x1d8>
 800db66:	2d02      	cmp	r5, #2
 800db68:	f47f af22 	bne.w	800d9b0 <_scanf_float+0x64>
 800db6c:	2503      	movs	r5, #3
 800db6e:	e7b6      	b.n	800dade <_scanf_float+0x192>
 800db70:	2d06      	cmp	r5, #6
 800db72:	f47f af1d 	bne.w	800d9b0 <_scanf_float+0x64>
 800db76:	2507      	movs	r5, #7
 800db78:	e7b1      	b.n	800dade <_scanf_float+0x192>
 800db7a:	6822      	ldr	r2, [r4, #0]
 800db7c:	0591      	lsls	r1, r2, #22
 800db7e:	f57f af17 	bpl.w	800d9b0 <_scanf_float+0x64>
 800db82:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800db86:	6022      	str	r2, [r4, #0]
 800db88:	f8cd 9008 	str.w	r9, [sp, #8]
 800db8c:	e7a7      	b.n	800dade <_scanf_float+0x192>
 800db8e:	6822      	ldr	r2, [r4, #0]
 800db90:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800db94:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800db98:	d006      	beq.n	800dba8 <_scanf_float+0x25c>
 800db9a:	0550      	lsls	r0, r2, #21
 800db9c:	f57f af08 	bpl.w	800d9b0 <_scanf_float+0x64>
 800dba0:	f1b9 0f00 	cmp.w	r9, #0
 800dba4:	f000 80de 	beq.w	800dd64 <_scanf_float+0x418>
 800dba8:	0591      	lsls	r1, r2, #22
 800dbaa:	bf58      	it	pl
 800dbac:	9902      	ldrpl	r1, [sp, #8]
 800dbae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dbb2:	bf58      	it	pl
 800dbb4:	eba9 0101 	subpl.w	r1, r9, r1
 800dbb8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dbbc:	bf58      	it	pl
 800dbbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dbc2:	6022      	str	r2, [r4, #0]
 800dbc4:	f04f 0900 	mov.w	r9, #0
 800dbc8:	e789      	b.n	800dade <_scanf_float+0x192>
 800dbca:	f04f 0a03 	mov.w	sl, #3
 800dbce:	e786      	b.n	800dade <_scanf_float+0x192>
 800dbd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dbd4:	4639      	mov	r1, r7
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	4798      	blx	r3
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	f43f aedb 	beq.w	800d996 <_scanf_float+0x4a>
 800dbe0:	e6e6      	b.n	800d9b0 <_scanf_float+0x64>
 800dbe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dbe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dbea:	463a      	mov	r2, r7
 800dbec:	4640      	mov	r0, r8
 800dbee:	4798      	blx	r3
 800dbf0:	6923      	ldr	r3, [r4, #16]
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	6123      	str	r3, [r4, #16]
 800dbf6:	e6e8      	b.n	800d9ca <_scanf_float+0x7e>
 800dbf8:	1e6b      	subs	r3, r5, #1
 800dbfa:	2b06      	cmp	r3, #6
 800dbfc:	d824      	bhi.n	800dc48 <_scanf_float+0x2fc>
 800dbfe:	2d02      	cmp	r5, #2
 800dc00:	d836      	bhi.n	800dc70 <_scanf_float+0x324>
 800dc02:	9b01      	ldr	r3, [sp, #4]
 800dc04:	429e      	cmp	r6, r3
 800dc06:	f67f aee4 	bls.w	800d9d2 <_scanf_float+0x86>
 800dc0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc12:	463a      	mov	r2, r7
 800dc14:	4640      	mov	r0, r8
 800dc16:	4798      	blx	r3
 800dc18:	6923      	ldr	r3, [r4, #16]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	6123      	str	r3, [r4, #16]
 800dc1e:	e7f0      	b.n	800dc02 <_scanf_float+0x2b6>
 800dc20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc24:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dc28:	463a      	mov	r2, r7
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	4798      	blx	r3
 800dc2e:	6923      	ldr	r3, [r4, #16]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	6123      	str	r3, [r4, #16]
 800dc34:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800dc38:	fa5f fa8a 	uxtb.w	sl, sl
 800dc3c:	f1ba 0f02 	cmp.w	sl, #2
 800dc40:	d1ee      	bne.n	800dc20 <_scanf_float+0x2d4>
 800dc42:	3d03      	subs	r5, #3
 800dc44:	b2ed      	uxtb	r5, r5
 800dc46:	1b76      	subs	r6, r6, r5
 800dc48:	6823      	ldr	r3, [r4, #0]
 800dc4a:	05da      	lsls	r2, r3, #23
 800dc4c:	d530      	bpl.n	800dcb0 <_scanf_float+0x364>
 800dc4e:	055b      	lsls	r3, r3, #21
 800dc50:	d511      	bpl.n	800dc76 <_scanf_float+0x32a>
 800dc52:	9b01      	ldr	r3, [sp, #4]
 800dc54:	429e      	cmp	r6, r3
 800dc56:	f67f aebc 	bls.w	800d9d2 <_scanf_float+0x86>
 800dc5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc62:	463a      	mov	r2, r7
 800dc64:	4640      	mov	r0, r8
 800dc66:	4798      	blx	r3
 800dc68:	6923      	ldr	r3, [r4, #16]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	6123      	str	r3, [r4, #16]
 800dc6e:	e7f0      	b.n	800dc52 <_scanf_float+0x306>
 800dc70:	46aa      	mov	sl, r5
 800dc72:	46b3      	mov	fp, r6
 800dc74:	e7de      	b.n	800dc34 <_scanf_float+0x2e8>
 800dc76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dc7a:	6923      	ldr	r3, [r4, #16]
 800dc7c:	2965      	cmp	r1, #101	@ 0x65
 800dc7e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800dc82:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800dc86:	6123      	str	r3, [r4, #16]
 800dc88:	d00c      	beq.n	800dca4 <_scanf_float+0x358>
 800dc8a:	2945      	cmp	r1, #69	@ 0x45
 800dc8c:	d00a      	beq.n	800dca4 <_scanf_float+0x358>
 800dc8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc92:	463a      	mov	r2, r7
 800dc94:	4640      	mov	r0, r8
 800dc96:	4798      	blx	r3
 800dc98:	6923      	ldr	r3, [r4, #16]
 800dc9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	1eb5      	subs	r5, r6, #2
 800dca2:	6123      	str	r3, [r4, #16]
 800dca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dca8:	463a      	mov	r2, r7
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4798      	blx	r3
 800dcae:	462e      	mov	r6, r5
 800dcb0:	6822      	ldr	r2, [r4, #0]
 800dcb2:	f012 0210 	ands.w	r2, r2, #16
 800dcb6:	d001      	beq.n	800dcbc <_scanf_float+0x370>
 800dcb8:	2000      	movs	r0, #0
 800dcba:	e68b      	b.n	800d9d4 <_scanf_float+0x88>
 800dcbc:	7032      	strb	r2, [r6, #0]
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dcc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcc8:	d11c      	bne.n	800dd04 <_scanf_float+0x3b8>
 800dcca:	9b02      	ldr	r3, [sp, #8]
 800dccc:	454b      	cmp	r3, r9
 800dcce:	eba3 0209 	sub.w	r2, r3, r9
 800dcd2:	d123      	bne.n	800dd1c <_scanf_float+0x3d0>
 800dcd4:	9901      	ldr	r1, [sp, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	4640      	mov	r0, r8
 800dcda:	f000 ff1d 	bl	800eb18 <_strtod_r>
 800dcde:	9b03      	ldr	r3, [sp, #12]
 800dce0:	6821      	ldr	r1, [r4, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f011 0f02 	tst.w	r1, #2
 800dce8:	ec57 6b10 	vmov	r6, r7, d0
 800dcec:	f103 0204 	add.w	r2, r3, #4
 800dcf0:	d01f      	beq.n	800dd32 <_scanf_float+0x3e6>
 800dcf2:	9903      	ldr	r1, [sp, #12]
 800dcf4:	600a      	str	r2, [r1, #0]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	e9c3 6700 	strd	r6, r7, [r3]
 800dcfc:	68e3      	ldr	r3, [r4, #12]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	60e3      	str	r3, [r4, #12]
 800dd02:	e7d9      	b.n	800dcb8 <_scanf_float+0x36c>
 800dd04:	9b04      	ldr	r3, [sp, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d0e4      	beq.n	800dcd4 <_scanf_float+0x388>
 800dd0a:	9905      	ldr	r1, [sp, #20]
 800dd0c:	230a      	movs	r3, #10
 800dd0e:	3101      	adds	r1, #1
 800dd10:	4640      	mov	r0, r8
 800dd12:	f000 ff81 	bl	800ec18 <_strtol_r>
 800dd16:	9b04      	ldr	r3, [sp, #16]
 800dd18:	9e05      	ldr	r6, [sp, #20]
 800dd1a:	1ac2      	subs	r2, r0, r3
 800dd1c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dd20:	429e      	cmp	r6, r3
 800dd22:	bf28      	it	cs
 800dd24:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dd28:	4910      	ldr	r1, [pc, #64]	@ (800dd6c <_scanf_float+0x420>)
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f000 f82e 	bl	800dd8c <siprintf>
 800dd30:	e7d0      	b.n	800dcd4 <_scanf_float+0x388>
 800dd32:	f011 0f04 	tst.w	r1, #4
 800dd36:	9903      	ldr	r1, [sp, #12]
 800dd38:	600a      	str	r2, [r1, #0]
 800dd3a:	d1dc      	bne.n	800dcf6 <_scanf_float+0x3aa>
 800dd3c:	681d      	ldr	r5, [r3, #0]
 800dd3e:	4632      	mov	r2, r6
 800dd40:	463b      	mov	r3, r7
 800dd42:	4630      	mov	r0, r6
 800dd44:	4639      	mov	r1, r7
 800dd46:	f7f2 ff19 	bl	8000b7c <__aeabi_dcmpun>
 800dd4a:	b128      	cbz	r0, 800dd58 <_scanf_float+0x40c>
 800dd4c:	4808      	ldr	r0, [pc, #32]	@ (800dd70 <_scanf_float+0x424>)
 800dd4e:	f000 ffff 	bl	800ed50 <nanf>
 800dd52:	ed85 0a00 	vstr	s0, [r5]
 800dd56:	e7d1      	b.n	800dcfc <_scanf_float+0x3b0>
 800dd58:	4630      	mov	r0, r6
 800dd5a:	4639      	mov	r1, r7
 800dd5c:	f7f2 ff6c 	bl	8000c38 <__aeabi_d2f>
 800dd60:	6028      	str	r0, [r5, #0]
 800dd62:	e7cb      	b.n	800dcfc <_scanf_float+0x3b0>
 800dd64:	f04f 0900 	mov.w	r9, #0
 800dd68:	e629      	b.n	800d9be <_scanf_float+0x72>
 800dd6a:	bf00      	nop
 800dd6c:	08011784 	.word	0x08011784
 800dd70:	08011924 	.word	0x08011924

0800dd74 <__malloc_lock>:
 800dd74:	4801      	ldr	r0, [pc, #4]	@ (800dd7c <__malloc_lock+0x8>)
 800dd76:	f000 bfc8 	b.w	800ed0a <__retarget_lock_acquire_recursive>
 800dd7a:	bf00      	nop
 800dd7c:	200014c8 	.word	0x200014c8

0800dd80 <__malloc_unlock>:
 800dd80:	4801      	ldr	r0, [pc, #4]	@ (800dd88 <__malloc_unlock+0x8>)
 800dd82:	f000 bfc3 	b.w	800ed0c <__retarget_lock_release_recursive>
 800dd86:	bf00      	nop
 800dd88:	200014c8 	.word	0x200014c8

0800dd8c <siprintf>:
 800dd8c:	b40e      	push	{r1, r2, r3}
 800dd8e:	b500      	push	{lr}
 800dd90:	b09c      	sub	sp, #112	@ 0x70
 800dd92:	ab1d      	add	r3, sp, #116	@ 0x74
 800dd94:	9002      	str	r0, [sp, #8]
 800dd96:	9006      	str	r0, [sp, #24]
 800dd98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dd9c:	4809      	ldr	r0, [pc, #36]	@ (800ddc4 <siprintf+0x38>)
 800dd9e:	9107      	str	r1, [sp, #28]
 800dda0:	9104      	str	r1, [sp, #16]
 800dda2:	4909      	ldr	r1, [pc, #36]	@ (800ddc8 <siprintf+0x3c>)
 800dda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dda8:	9105      	str	r1, [sp, #20]
 800ddaa:	6800      	ldr	r0, [r0, #0]
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	a902      	add	r1, sp, #8
 800ddb0:	f002 fa1c 	bl	80101ec <_svfiprintf_r>
 800ddb4:	9b02      	ldr	r3, [sp, #8]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	b01c      	add	sp, #112	@ 0x70
 800ddbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddc0:	b003      	add	sp, #12
 800ddc2:	4770      	bx	lr
 800ddc4:	200001a4 	.word	0x200001a4
 800ddc8:	ffff0208 	.word	0xffff0208

0800ddcc <std>:
 800ddcc:	2300      	movs	r3, #0
 800ddce:	b510      	push	{r4, lr}
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	e9c0 3300 	strd	r3, r3, [r0]
 800ddd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddda:	6083      	str	r3, [r0, #8]
 800dddc:	8181      	strh	r1, [r0, #12]
 800ddde:	6643      	str	r3, [r0, #100]	@ 0x64
 800dde0:	81c2      	strh	r2, [r0, #14]
 800dde2:	6183      	str	r3, [r0, #24]
 800dde4:	4619      	mov	r1, r3
 800dde6:	2208      	movs	r2, #8
 800dde8:	305c      	adds	r0, #92	@ 0x5c
 800ddea:	f000 ff47 	bl	800ec7c <memset>
 800ddee:	4b0d      	ldr	r3, [pc, #52]	@ (800de24 <std+0x58>)
 800ddf0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ddf2:	4b0d      	ldr	r3, [pc, #52]	@ (800de28 <std+0x5c>)
 800ddf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ddf6:	4b0d      	ldr	r3, [pc, #52]	@ (800de2c <std+0x60>)
 800ddf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ddfa:	4b0d      	ldr	r3, [pc, #52]	@ (800de30 <std+0x64>)
 800ddfc:	6323      	str	r3, [r4, #48]	@ 0x30
 800ddfe:	4b0d      	ldr	r3, [pc, #52]	@ (800de34 <std+0x68>)
 800de00:	6224      	str	r4, [r4, #32]
 800de02:	429c      	cmp	r4, r3
 800de04:	d006      	beq.n	800de14 <std+0x48>
 800de06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800de0a:	4294      	cmp	r4, r2
 800de0c:	d002      	beq.n	800de14 <std+0x48>
 800de0e:	33d0      	adds	r3, #208	@ 0xd0
 800de10:	429c      	cmp	r4, r3
 800de12:	d105      	bne.n	800de20 <std+0x54>
 800de14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800de18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de1c:	f000 bf74 	b.w	800ed08 <__retarget_lock_init_recursive>
 800de20:	bd10      	pop	{r4, pc}
 800de22:	bf00      	nop
 800de24:	08010ec5 	.word	0x08010ec5
 800de28:	08010ee7 	.word	0x08010ee7
 800de2c:	08010f1f 	.word	0x08010f1f
 800de30:	08010f43 	.word	0x08010f43
 800de34:	2000138c 	.word	0x2000138c

0800de38 <stdio_exit_handler>:
 800de38:	4a02      	ldr	r2, [pc, #8]	@ (800de44 <stdio_exit_handler+0xc>)
 800de3a:	4903      	ldr	r1, [pc, #12]	@ (800de48 <stdio_exit_handler+0x10>)
 800de3c:	4803      	ldr	r0, [pc, #12]	@ (800de4c <stdio_exit_handler+0x14>)
 800de3e:	f000 beed 	b.w	800ec1c <_fwalk_sglue>
 800de42:	bf00      	nop
 800de44:	2000002c 	.word	0x2000002c
 800de48:	08010511 	.word	0x08010511
 800de4c:	200001a8 	.word	0x200001a8

0800de50 <cleanup_stdio>:
 800de50:	6841      	ldr	r1, [r0, #4]
 800de52:	4b0c      	ldr	r3, [pc, #48]	@ (800de84 <cleanup_stdio+0x34>)
 800de54:	4299      	cmp	r1, r3
 800de56:	b510      	push	{r4, lr}
 800de58:	4604      	mov	r4, r0
 800de5a:	d001      	beq.n	800de60 <cleanup_stdio+0x10>
 800de5c:	f002 fb58 	bl	8010510 <_fflush_r>
 800de60:	68a1      	ldr	r1, [r4, #8]
 800de62:	4b09      	ldr	r3, [pc, #36]	@ (800de88 <cleanup_stdio+0x38>)
 800de64:	4299      	cmp	r1, r3
 800de66:	d002      	beq.n	800de6e <cleanup_stdio+0x1e>
 800de68:	4620      	mov	r0, r4
 800de6a:	f002 fb51 	bl	8010510 <_fflush_r>
 800de6e:	68e1      	ldr	r1, [r4, #12]
 800de70:	4b06      	ldr	r3, [pc, #24]	@ (800de8c <cleanup_stdio+0x3c>)
 800de72:	4299      	cmp	r1, r3
 800de74:	d004      	beq.n	800de80 <cleanup_stdio+0x30>
 800de76:	4620      	mov	r0, r4
 800de78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de7c:	f002 bb48 	b.w	8010510 <_fflush_r>
 800de80:	bd10      	pop	{r4, pc}
 800de82:	bf00      	nop
 800de84:	2000138c 	.word	0x2000138c
 800de88:	200013f4 	.word	0x200013f4
 800de8c:	2000145c 	.word	0x2000145c

0800de90 <global_stdio_init.part.0>:
 800de90:	b510      	push	{r4, lr}
 800de92:	4b0b      	ldr	r3, [pc, #44]	@ (800dec0 <global_stdio_init.part.0+0x30>)
 800de94:	4c0b      	ldr	r4, [pc, #44]	@ (800dec4 <global_stdio_init.part.0+0x34>)
 800de96:	4a0c      	ldr	r2, [pc, #48]	@ (800dec8 <global_stdio_init.part.0+0x38>)
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	4620      	mov	r0, r4
 800de9c:	2200      	movs	r2, #0
 800de9e:	2104      	movs	r1, #4
 800dea0:	f7ff ff94 	bl	800ddcc <std>
 800dea4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dea8:	2201      	movs	r2, #1
 800deaa:	2109      	movs	r1, #9
 800deac:	f7ff ff8e 	bl	800ddcc <std>
 800deb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800deb4:	2202      	movs	r2, #2
 800deb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deba:	2112      	movs	r1, #18
 800debc:	f7ff bf86 	b.w	800ddcc <std>
 800dec0:	200014c4 	.word	0x200014c4
 800dec4:	2000138c 	.word	0x2000138c
 800dec8:	0800de39 	.word	0x0800de39

0800decc <__sfp_lock_acquire>:
 800decc:	4801      	ldr	r0, [pc, #4]	@ (800ded4 <__sfp_lock_acquire+0x8>)
 800dece:	f000 bf1c 	b.w	800ed0a <__retarget_lock_acquire_recursive>
 800ded2:	bf00      	nop
 800ded4:	200014c9 	.word	0x200014c9

0800ded8 <__sfp_lock_release>:
 800ded8:	4801      	ldr	r0, [pc, #4]	@ (800dee0 <__sfp_lock_release+0x8>)
 800deda:	f000 bf17 	b.w	800ed0c <__retarget_lock_release_recursive>
 800dede:	bf00      	nop
 800dee0:	200014c9 	.word	0x200014c9

0800dee4 <__sinit>:
 800dee4:	b510      	push	{r4, lr}
 800dee6:	4604      	mov	r4, r0
 800dee8:	f7ff fff0 	bl	800decc <__sfp_lock_acquire>
 800deec:	6a23      	ldr	r3, [r4, #32]
 800deee:	b11b      	cbz	r3, 800def8 <__sinit+0x14>
 800def0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800def4:	f7ff bff0 	b.w	800ded8 <__sfp_lock_release>
 800def8:	4b04      	ldr	r3, [pc, #16]	@ (800df0c <__sinit+0x28>)
 800defa:	6223      	str	r3, [r4, #32]
 800defc:	4b04      	ldr	r3, [pc, #16]	@ (800df10 <__sinit+0x2c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1f5      	bne.n	800def0 <__sinit+0xc>
 800df04:	f7ff ffc4 	bl	800de90 <global_stdio_init.part.0>
 800df08:	e7f2      	b.n	800def0 <__sinit+0xc>
 800df0a:	bf00      	nop
 800df0c:	0800de51 	.word	0x0800de51
 800df10:	200014c4 	.word	0x200014c4

0800df14 <sulp>:
 800df14:	b570      	push	{r4, r5, r6, lr}
 800df16:	4604      	mov	r4, r0
 800df18:	460d      	mov	r5, r1
 800df1a:	ec45 4b10 	vmov	d0, r4, r5
 800df1e:	4616      	mov	r6, r2
 800df20:	f002 fe92 	bl	8010c48 <__ulp>
 800df24:	ec51 0b10 	vmov	r0, r1, d0
 800df28:	b17e      	cbz	r6, 800df4a <sulp+0x36>
 800df2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800df2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800df32:	2b00      	cmp	r3, #0
 800df34:	dd09      	ble.n	800df4a <sulp+0x36>
 800df36:	051b      	lsls	r3, r3, #20
 800df38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800df3c:	2400      	movs	r4, #0
 800df3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800df42:	4622      	mov	r2, r4
 800df44:	462b      	mov	r3, r5
 800df46:	f7f2 fb7f 	bl	8000648 <__aeabi_dmul>
 800df4a:	ec41 0b10 	vmov	d0, r0, r1
 800df4e:	bd70      	pop	{r4, r5, r6, pc}

0800df50 <_strtod_l>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	b09f      	sub	sp, #124	@ 0x7c
 800df56:	460c      	mov	r4, r1
 800df58:	9217      	str	r2, [sp, #92]	@ 0x5c
 800df5a:	2200      	movs	r2, #0
 800df5c:	921a      	str	r2, [sp, #104]	@ 0x68
 800df5e:	9005      	str	r0, [sp, #20]
 800df60:	f04f 0a00 	mov.w	sl, #0
 800df64:	f04f 0b00 	mov.w	fp, #0
 800df68:	460a      	mov	r2, r1
 800df6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800df6c:	7811      	ldrb	r1, [r2, #0]
 800df6e:	292b      	cmp	r1, #43	@ 0x2b
 800df70:	d04a      	beq.n	800e008 <_strtod_l+0xb8>
 800df72:	d838      	bhi.n	800dfe6 <_strtod_l+0x96>
 800df74:	290d      	cmp	r1, #13
 800df76:	d832      	bhi.n	800dfde <_strtod_l+0x8e>
 800df78:	2908      	cmp	r1, #8
 800df7a:	d832      	bhi.n	800dfe2 <_strtod_l+0x92>
 800df7c:	2900      	cmp	r1, #0
 800df7e:	d03b      	beq.n	800dff8 <_strtod_l+0xa8>
 800df80:	2200      	movs	r2, #0
 800df82:	920b      	str	r2, [sp, #44]	@ 0x2c
 800df84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800df86:	782a      	ldrb	r2, [r5, #0]
 800df88:	2a30      	cmp	r2, #48	@ 0x30
 800df8a:	f040 80b3 	bne.w	800e0f4 <_strtod_l+0x1a4>
 800df8e:	786a      	ldrb	r2, [r5, #1]
 800df90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df94:	2a58      	cmp	r2, #88	@ 0x58
 800df96:	d16e      	bne.n	800e076 <_strtod_l+0x126>
 800df98:	9302      	str	r3, [sp, #8]
 800df9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	ab1a      	add	r3, sp, #104	@ 0x68
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	4a8e      	ldr	r2, [pc, #568]	@ (800e1dc <_strtod_l+0x28c>)
 800dfa4:	9805      	ldr	r0, [sp, #20]
 800dfa6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dfa8:	a919      	add	r1, sp, #100	@ 0x64
 800dfaa:	f001 fdf3 	bl	800fb94 <__gethex>
 800dfae:	f010 060f 	ands.w	r6, r0, #15
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	d005      	beq.n	800dfc2 <_strtod_l+0x72>
 800dfb6:	2e06      	cmp	r6, #6
 800dfb8:	d128      	bne.n	800e00c <_strtod_l+0xbc>
 800dfba:	3501      	adds	r5, #1
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	9519      	str	r5, [sp, #100]	@ 0x64
 800dfc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f040 858e 	bne.w	800eae6 <_strtod_l+0xb96>
 800dfca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfcc:	b1cb      	cbz	r3, 800e002 <_strtod_l+0xb2>
 800dfce:	4652      	mov	r2, sl
 800dfd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dfd4:	ec43 2b10 	vmov	d0, r2, r3
 800dfd8:	b01f      	add	sp, #124	@ 0x7c
 800dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfde:	2920      	cmp	r1, #32
 800dfe0:	d1ce      	bne.n	800df80 <_strtod_l+0x30>
 800dfe2:	3201      	adds	r2, #1
 800dfe4:	e7c1      	b.n	800df6a <_strtod_l+0x1a>
 800dfe6:	292d      	cmp	r1, #45	@ 0x2d
 800dfe8:	d1ca      	bne.n	800df80 <_strtod_l+0x30>
 800dfea:	2101      	movs	r1, #1
 800dfec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dfee:	1c51      	adds	r1, r2, #1
 800dff0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dff2:	7852      	ldrb	r2, [r2, #1]
 800dff4:	2a00      	cmp	r2, #0
 800dff6:	d1c5      	bne.n	800df84 <_strtod_l+0x34>
 800dff8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dffa:	9419      	str	r4, [sp, #100]	@ 0x64
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f040 8570 	bne.w	800eae2 <_strtod_l+0xb92>
 800e002:	4652      	mov	r2, sl
 800e004:	465b      	mov	r3, fp
 800e006:	e7e5      	b.n	800dfd4 <_strtod_l+0x84>
 800e008:	2100      	movs	r1, #0
 800e00a:	e7ef      	b.n	800dfec <_strtod_l+0x9c>
 800e00c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e00e:	b13a      	cbz	r2, 800e020 <_strtod_l+0xd0>
 800e010:	2135      	movs	r1, #53	@ 0x35
 800e012:	a81c      	add	r0, sp, #112	@ 0x70
 800e014:	f002 ff12 	bl	8010e3c <__copybits>
 800e018:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e01a:	9805      	ldr	r0, [sp, #20]
 800e01c:	f002 fae0 	bl	80105e0 <_Bfree>
 800e020:	3e01      	subs	r6, #1
 800e022:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e024:	2e04      	cmp	r6, #4
 800e026:	d806      	bhi.n	800e036 <_strtod_l+0xe6>
 800e028:	e8df f006 	tbb	[pc, r6]
 800e02c:	201d0314 	.word	0x201d0314
 800e030:	14          	.byte	0x14
 800e031:	00          	.byte	0x00
 800e032:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e036:	05e1      	lsls	r1, r4, #23
 800e038:	bf48      	it	mi
 800e03a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e03e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e042:	0d1b      	lsrs	r3, r3, #20
 800e044:	051b      	lsls	r3, r3, #20
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1bb      	bne.n	800dfc2 <_strtod_l+0x72>
 800e04a:	f000 fe33 	bl	800ecb4 <__errno>
 800e04e:	2322      	movs	r3, #34	@ 0x22
 800e050:	6003      	str	r3, [r0, #0]
 800e052:	e7b6      	b.n	800dfc2 <_strtod_l+0x72>
 800e054:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e058:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e05c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e060:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e064:	e7e7      	b.n	800e036 <_strtod_l+0xe6>
 800e066:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e1e4 <_strtod_l+0x294>
 800e06a:	e7e4      	b.n	800e036 <_strtod_l+0xe6>
 800e06c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e070:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e074:	e7df      	b.n	800e036 <_strtod_l+0xe6>
 800e076:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e07c:	785b      	ldrb	r3, [r3, #1]
 800e07e:	2b30      	cmp	r3, #48	@ 0x30
 800e080:	d0f9      	beq.n	800e076 <_strtod_l+0x126>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d09d      	beq.n	800dfc2 <_strtod_l+0x72>
 800e086:	2301      	movs	r3, #1
 800e088:	9309      	str	r3, [sp, #36]	@ 0x24
 800e08a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e08c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e08e:	2300      	movs	r3, #0
 800e090:	9308      	str	r3, [sp, #32]
 800e092:	930a      	str	r3, [sp, #40]	@ 0x28
 800e094:	461f      	mov	r7, r3
 800e096:	220a      	movs	r2, #10
 800e098:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e09a:	7805      	ldrb	r5, [r0, #0]
 800e09c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e0a0:	b2d9      	uxtb	r1, r3
 800e0a2:	2909      	cmp	r1, #9
 800e0a4:	d928      	bls.n	800e0f8 <_strtod_l+0x1a8>
 800e0a6:	494e      	ldr	r1, [pc, #312]	@ (800e1e0 <_strtod_l+0x290>)
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	f000 fdd5 	bl	800ec58 <strncmp>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d032      	beq.n	800e118 <_strtod_l+0x1c8>
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	462a      	mov	r2, r5
 800e0b6:	4681      	mov	r9, r0
 800e0b8:	463d      	mov	r5, r7
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2a65      	cmp	r2, #101	@ 0x65
 800e0be:	d001      	beq.n	800e0c4 <_strtod_l+0x174>
 800e0c0:	2a45      	cmp	r2, #69	@ 0x45
 800e0c2:	d114      	bne.n	800e0ee <_strtod_l+0x19e>
 800e0c4:	b91d      	cbnz	r5, 800e0ce <_strtod_l+0x17e>
 800e0c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0c8:	4302      	orrs	r2, r0
 800e0ca:	d095      	beq.n	800dff8 <_strtod_l+0xa8>
 800e0cc:	2500      	movs	r5, #0
 800e0ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e0d0:	1c62      	adds	r2, r4, #1
 800e0d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e0d4:	7862      	ldrb	r2, [r4, #1]
 800e0d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e0d8:	d077      	beq.n	800e1ca <_strtod_l+0x27a>
 800e0da:	2a2d      	cmp	r2, #45	@ 0x2d
 800e0dc:	d07b      	beq.n	800e1d6 <_strtod_l+0x286>
 800e0de:	f04f 0c00 	mov.w	ip, #0
 800e0e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e0e6:	2909      	cmp	r1, #9
 800e0e8:	f240 8082 	bls.w	800e1f0 <_strtod_l+0x2a0>
 800e0ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800e0ee:	f04f 0800 	mov.w	r8, #0
 800e0f2:	e0a2      	b.n	800e23a <_strtod_l+0x2ea>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e7c7      	b.n	800e088 <_strtod_l+0x138>
 800e0f8:	2f08      	cmp	r7, #8
 800e0fa:	bfd5      	itete	le
 800e0fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e0fe:	9908      	ldrgt	r1, [sp, #32]
 800e100:	fb02 3301 	mlale	r3, r2, r1, r3
 800e104:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e108:	f100 0001 	add.w	r0, r0, #1
 800e10c:	bfd4      	ite	le
 800e10e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e110:	9308      	strgt	r3, [sp, #32]
 800e112:	3701      	adds	r7, #1
 800e114:	9019      	str	r0, [sp, #100]	@ 0x64
 800e116:	e7bf      	b.n	800e098 <_strtod_l+0x148>
 800e118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e11e:	785a      	ldrb	r2, [r3, #1]
 800e120:	b37f      	cbz	r7, 800e182 <_strtod_l+0x232>
 800e122:	4681      	mov	r9, r0
 800e124:	463d      	mov	r5, r7
 800e126:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e12a:	2b09      	cmp	r3, #9
 800e12c:	d912      	bls.n	800e154 <_strtod_l+0x204>
 800e12e:	2301      	movs	r3, #1
 800e130:	e7c4      	b.n	800e0bc <_strtod_l+0x16c>
 800e132:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	9219      	str	r2, [sp, #100]	@ 0x64
 800e138:	785a      	ldrb	r2, [r3, #1]
 800e13a:	3001      	adds	r0, #1
 800e13c:	2a30      	cmp	r2, #48	@ 0x30
 800e13e:	d0f8      	beq.n	800e132 <_strtod_l+0x1e2>
 800e140:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e144:	2b08      	cmp	r3, #8
 800e146:	f200 84d3 	bhi.w	800eaf0 <_strtod_l+0xba0>
 800e14a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e14c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e14e:	4681      	mov	r9, r0
 800e150:	2000      	movs	r0, #0
 800e152:	4605      	mov	r5, r0
 800e154:	3a30      	subs	r2, #48	@ 0x30
 800e156:	f100 0301 	add.w	r3, r0, #1
 800e15a:	d02a      	beq.n	800e1b2 <_strtod_l+0x262>
 800e15c:	4499      	add	r9, r3
 800e15e:	eb00 0c05 	add.w	ip, r0, r5
 800e162:	462b      	mov	r3, r5
 800e164:	210a      	movs	r1, #10
 800e166:	4563      	cmp	r3, ip
 800e168:	d10d      	bne.n	800e186 <_strtod_l+0x236>
 800e16a:	1c69      	adds	r1, r5, #1
 800e16c:	4401      	add	r1, r0
 800e16e:	4428      	add	r0, r5
 800e170:	2808      	cmp	r0, #8
 800e172:	dc16      	bgt.n	800e1a2 <_strtod_l+0x252>
 800e174:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e176:	230a      	movs	r3, #10
 800e178:	fb03 2300 	mla	r3, r3, r0, r2
 800e17c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e17e:	2300      	movs	r3, #0
 800e180:	e018      	b.n	800e1b4 <_strtod_l+0x264>
 800e182:	4638      	mov	r0, r7
 800e184:	e7da      	b.n	800e13c <_strtod_l+0x1ec>
 800e186:	2b08      	cmp	r3, #8
 800e188:	f103 0301 	add.w	r3, r3, #1
 800e18c:	dc03      	bgt.n	800e196 <_strtod_l+0x246>
 800e18e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e190:	434e      	muls	r6, r1
 800e192:	960a      	str	r6, [sp, #40]	@ 0x28
 800e194:	e7e7      	b.n	800e166 <_strtod_l+0x216>
 800e196:	2b10      	cmp	r3, #16
 800e198:	bfde      	ittt	le
 800e19a:	9e08      	ldrle	r6, [sp, #32]
 800e19c:	434e      	mulle	r6, r1
 800e19e:	9608      	strle	r6, [sp, #32]
 800e1a0:	e7e1      	b.n	800e166 <_strtod_l+0x216>
 800e1a2:	280f      	cmp	r0, #15
 800e1a4:	dceb      	bgt.n	800e17e <_strtod_l+0x22e>
 800e1a6:	9808      	ldr	r0, [sp, #32]
 800e1a8:	230a      	movs	r3, #10
 800e1aa:	fb03 2300 	mla	r3, r3, r0, r2
 800e1ae:	9308      	str	r3, [sp, #32]
 800e1b0:	e7e5      	b.n	800e17e <_strtod_l+0x22e>
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e1b6:	1c50      	adds	r0, r2, #1
 800e1b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800e1ba:	7852      	ldrb	r2, [r2, #1]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	460d      	mov	r5, r1
 800e1c0:	e7b1      	b.n	800e126 <_strtod_l+0x1d6>
 800e1c2:	f04f 0900 	mov.w	r9, #0
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e77d      	b.n	800e0c6 <_strtod_l+0x176>
 800e1ca:	f04f 0c00 	mov.w	ip, #0
 800e1ce:	1ca2      	adds	r2, r4, #2
 800e1d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1d2:	78a2      	ldrb	r2, [r4, #2]
 800e1d4:	e785      	b.n	800e0e2 <_strtod_l+0x192>
 800e1d6:	f04f 0c01 	mov.w	ip, #1
 800e1da:	e7f8      	b.n	800e1ce <_strtod_l+0x27e>
 800e1dc:	080117a0 	.word	0x080117a0
 800e1e0:	08011789 	.word	0x08011789
 800e1e4:	7ff00000 	.word	0x7ff00000
 800e1e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e1ea:	1c51      	adds	r1, r2, #1
 800e1ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800e1ee:	7852      	ldrb	r2, [r2, #1]
 800e1f0:	2a30      	cmp	r2, #48	@ 0x30
 800e1f2:	d0f9      	beq.n	800e1e8 <_strtod_l+0x298>
 800e1f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e1f8:	2908      	cmp	r1, #8
 800e1fa:	f63f af78 	bhi.w	800e0ee <_strtod_l+0x19e>
 800e1fe:	3a30      	subs	r2, #48	@ 0x30
 800e200:	920e      	str	r2, [sp, #56]	@ 0x38
 800e202:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e204:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e206:	f04f 080a 	mov.w	r8, #10
 800e20a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e20c:	1c56      	adds	r6, r2, #1
 800e20e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e210:	7852      	ldrb	r2, [r2, #1]
 800e212:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e216:	f1be 0f09 	cmp.w	lr, #9
 800e21a:	d939      	bls.n	800e290 <_strtod_l+0x340>
 800e21c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e21e:	1a76      	subs	r6, r6, r1
 800e220:	2e08      	cmp	r6, #8
 800e222:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e226:	dc03      	bgt.n	800e230 <_strtod_l+0x2e0>
 800e228:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e22a:	4588      	cmp	r8, r1
 800e22c:	bfa8      	it	ge
 800e22e:	4688      	movge	r8, r1
 800e230:	f1bc 0f00 	cmp.w	ip, #0
 800e234:	d001      	beq.n	800e23a <_strtod_l+0x2ea>
 800e236:	f1c8 0800 	rsb	r8, r8, #0
 800e23a:	2d00      	cmp	r5, #0
 800e23c:	d14e      	bne.n	800e2dc <_strtod_l+0x38c>
 800e23e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e240:	4308      	orrs	r0, r1
 800e242:	f47f aebe 	bne.w	800dfc2 <_strtod_l+0x72>
 800e246:	2b00      	cmp	r3, #0
 800e248:	f47f aed6 	bne.w	800dff8 <_strtod_l+0xa8>
 800e24c:	2a69      	cmp	r2, #105	@ 0x69
 800e24e:	d028      	beq.n	800e2a2 <_strtod_l+0x352>
 800e250:	dc25      	bgt.n	800e29e <_strtod_l+0x34e>
 800e252:	2a49      	cmp	r2, #73	@ 0x49
 800e254:	d025      	beq.n	800e2a2 <_strtod_l+0x352>
 800e256:	2a4e      	cmp	r2, #78	@ 0x4e
 800e258:	f47f aece 	bne.w	800dff8 <_strtod_l+0xa8>
 800e25c:	499b      	ldr	r1, [pc, #620]	@ (800e4cc <_strtod_l+0x57c>)
 800e25e:	a819      	add	r0, sp, #100	@ 0x64
 800e260:	f001 feba 	bl	800ffd8 <__match>
 800e264:	2800      	cmp	r0, #0
 800e266:	f43f aec7 	beq.w	800dff8 <_strtod_l+0xa8>
 800e26a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b28      	cmp	r3, #40	@ 0x28
 800e270:	d12e      	bne.n	800e2d0 <_strtod_l+0x380>
 800e272:	4997      	ldr	r1, [pc, #604]	@ (800e4d0 <_strtod_l+0x580>)
 800e274:	aa1c      	add	r2, sp, #112	@ 0x70
 800e276:	a819      	add	r0, sp, #100	@ 0x64
 800e278:	f001 fec2 	bl	8010000 <__hexnan>
 800e27c:	2805      	cmp	r0, #5
 800e27e:	d127      	bne.n	800e2d0 <_strtod_l+0x380>
 800e280:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e282:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e286:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e28a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e28e:	e698      	b.n	800dfc2 <_strtod_l+0x72>
 800e290:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e292:	fb08 2101 	mla	r1, r8, r1, r2
 800e296:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e29a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e29c:	e7b5      	b.n	800e20a <_strtod_l+0x2ba>
 800e29e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e2a0:	e7da      	b.n	800e258 <_strtod_l+0x308>
 800e2a2:	498c      	ldr	r1, [pc, #560]	@ (800e4d4 <_strtod_l+0x584>)
 800e2a4:	a819      	add	r0, sp, #100	@ 0x64
 800e2a6:	f001 fe97 	bl	800ffd8 <__match>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	f43f aea4 	beq.w	800dff8 <_strtod_l+0xa8>
 800e2b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2b2:	4989      	ldr	r1, [pc, #548]	@ (800e4d8 <_strtod_l+0x588>)
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	a819      	add	r0, sp, #100	@ 0x64
 800e2b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e2ba:	f001 fe8d 	bl	800ffd8 <__match>
 800e2be:	b910      	cbnz	r0, 800e2c6 <_strtod_l+0x376>
 800e2c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e2c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e4e8 <_strtod_l+0x598>
 800e2ca:	f04f 0a00 	mov.w	sl, #0
 800e2ce:	e678      	b.n	800dfc2 <_strtod_l+0x72>
 800e2d0:	4882      	ldr	r0, [pc, #520]	@ (800e4dc <_strtod_l+0x58c>)
 800e2d2:	f000 fd35 	bl	800ed40 <nan>
 800e2d6:	ec5b ab10 	vmov	sl, fp, d0
 800e2da:	e672      	b.n	800dfc2 <_strtod_l+0x72>
 800e2dc:	eba8 0309 	sub.w	r3, r8, r9
 800e2e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e4:	2f00      	cmp	r7, #0
 800e2e6:	bf08      	it	eq
 800e2e8:	462f      	moveq	r7, r5
 800e2ea:	2d10      	cmp	r5, #16
 800e2ec:	462c      	mov	r4, r5
 800e2ee:	bfa8      	it	ge
 800e2f0:	2410      	movge	r4, #16
 800e2f2:	f7f2 f92f 	bl	8000554 <__aeabi_ui2d>
 800e2f6:	2d09      	cmp	r5, #9
 800e2f8:	4682      	mov	sl, r0
 800e2fa:	468b      	mov	fp, r1
 800e2fc:	dc13      	bgt.n	800e326 <_strtod_l+0x3d6>
 800e2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e300:	2b00      	cmp	r3, #0
 800e302:	f43f ae5e 	beq.w	800dfc2 <_strtod_l+0x72>
 800e306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e308:	dd78      	ble.n	800e3fc <_strtod_l+0x4ac>
 800e30a:	2b16      	cmp	r3, #22
 800e30c:	dc5f      	bgt.n	800e3ce <_strtod_l+0x47e>
 800e30e:	4974      	ldr	r1, [pc, #464]	@ (800e4e0 <_strtod_l+0x590>)
 800e310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e314:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e318:	4652      	mov	r2, sl
 800e31a:	465b      	mov	r3, fp
 800e31c:	f7f2 f994 	bl	8000648 <__aeabi_dmul>
 800e320:	4682      	mov	sl, r0
 800e322:	468b      	mov	fp, r1
 800e324:	e64d      	b.n	800dfc2 <_strtod_l+0x72>
 800e326:	4b6e      	ldr	r3, [pc, #440]	@ (800e4e0 <_strtod_l+0x590>)
 800e328:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e32c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e330:	f7f2 f98a 	bl	8000648 <__aeabi_dmul>
 800e334:	4682      	mov	sl, r0
 800e336:	9808      	ldr	r0, [sp, #32]
 800e338:	468b      	mov	fp, r1
 800e33a:	f7f2 f90b 	bl	8000554 <__aeabi_ui2d>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	4650      	mov	r0, sl
 800e344:	4659      	mov	r1, fp
 800e346:	f7f1 ffc9 	bl	80002dc <__adddf3>
 800e34a:	2d0f      	cmp	r5, #15
 800e34c:	4682      	mov	sl, r0
 800e34e:	468b      	mov	fp, r1
 800e350:	ddd5      	ble.n	800e2fe <_strtod_l+0x3ae>
 800e352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e354:	1b2c      	subs	r4, r5, r4
 800e356:	441c      	add	r4, r3
 800e358:	2c00      	cmp	r4, #0
 800e35a:	f340 8096 	ble.w	800e48a <_strtod_l+0x53a>
 800e35e:	f014 030f 	ands.w	r3, r4, #15
 800e362:	d00a      	beq.n	800e37a <_strtod_l+0x42a>
 800e364:	495e      	ldr	r1, [pc, #376]	@ (800e4e0 <_strtod_l+0x590>)
 800e366:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e36a:	4652      	mov	r2, sl
 800e36c:	465b      	mov	r3, fp
 800e36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e372:	f7f2 f969 	bl	8000648 <__aeabi_dmul>
 800e376:	4682      	mov	sl, r0
 800e378:	468b      	mov	fp, r1
 800e37a:	f034 040f 	bics.w	r4, r4, #15
 800e37e:	d073      	beq.n	800e468 <_strtod_l+0x518>
 800e380:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e384:	dd48      	ble.n	800e418 <_strtod_l+0x4c8>
 800e386:	2400      	movs	r4, #0
 800e388:	46a0      	mov	r8, r4
 800e38a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e38c:	46a1      	mov	r9, r4
 800e38e:	9a05      	ldr	r2, [sp, #20]
 800e390:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e4e8 <_strtod_l+0x598>
 800e394:	2322      	movs	r3, #34	@ 0x22
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	f04f 0a00 	mov.w	sl, #0
 800e39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f43f ae0f 	beq.w	800dfc2 <_strtod_l+0x72>
 800e3a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e3a6:	9805      	ldr	r0, [sp, #20]
 800e3a8:	f002 f91a 	bl	80105e0 <_Bfree>
 800e3ac:	9805      	ldr	r0, [sp, #20]
 800e3ae:	4649      	mov	r1, r9
 800e3b0:	f002 f916 	bl	80105e0 <_Bfree>
 800e3b4:	9805      	ldr	r0, [sp, #20]
 800e3b6:	4641      	mov	r1, r8
 800e3b8:	f002 f912 	bl	80105e0 <_Bfree>
 800e3bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3be:	9805      	ldr	r0, [sp, #20]
 800e3c0:	f002 f90e 	bl	80105e0 <_Bfree>
 800e3c4:	9805      	ldr	r0, [sp, #20]
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	f002 f90a 	bl	80105e0 <_Bfree>
 800e3cc:	e5f9      	b.n	800dfc2 <_strtod_l+0x72>
 800e3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	dbbc      	blt.n	800e352 <_strtod_l+0x402>
 800e3d8:	4c41      	ldr	r4, [pc, #260]	@ (800e4e0 <_strtod_l+0x590>)
 800e3da:	f1c5 050f 	rsb	r5, r5, #15
 800e3de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e3e2:	4652      	mov	r2, sl
 800e3e4:	465b      	mov	r3, fp
 800e3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3ea:	f7f2 f92d 	bl	8000648 <__aeabi_dmul>
 800e3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3f0:	1b5d      	subs	r5, r3, r5
 800e3f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e3f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e3fa:	e78f      	b.n	800e31c <_strtod_l+0x3cc>
 800e3fc:	3316      	adds	r3, #22
 800e3fe:	dba8      	blt.n	800e352 <_strtod_l+0x402>
 800e400:	4b37      	ldr	r3, [pc, #220]	@ (800e4e0 <_strtod_l+0x590>)
 800e402:	eba9 0808 	sub.w	r8, r9, r8
 800e406:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e40a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e40e:	4650      	mov	r0, sl
 800e410:	4659      	mov	r1, fp
 800e412:	f7f2 fa43 	bl	800089c <__aeabi_ddiv>
 800e416:	e783      	b.n	800e320 <_strtod_l+0x3d0>
 800e418:	4b32      	ldr	r3, [pc, #200]	@ (800e4e4 <_strtod_l+0x594>)
 800e41a:	9308      	str	r3, [sp, #32]
 800e41c:	2300      	movs	r3, #0
 800e41e:	1124      	asrs	r4, r4, #4
 800e420:	4650      	mov	r0, sl
 800e422:	4659      	mov	r1, fp
 800e424:	461e      	mov	r6, r3
 800e426:	2c01      	cmp	r4, #1
 800e428:	dc21      	bgt.n	800e46e <_strtod_l+0x51e>
 800e42a:	b10b      	cbz	r3, 800e430 <_strtod_l+0x4e0>
 800e42c:	4682      	mov	sl, r0
 800e42e:	468b      	mov	fp, r1
 800e430:	492c      	ldr	r1, [pc, #176]	@ (800e4e4 <_strtod_l+0x594>)
 800e432:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e436:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e43a:	4652      	mov	r2, sl
 800e43c:	465b      	mov	r3, fp
 800e43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e442:	f7f2 f901 	bl	8000648 <__aeabi_dmul>
 800e446:	4b28      	ldr	r3, [pc, #160]	@ (800e4e8 <_strtod_l+0x598>)
 800e448:	460a      	mov	r2, r1
 800e44a:	400b      	ands	r3, r1
 800e44c:	4927      	ldr	r1, [pc, #156]	@ (800e4ec <_strtod_l+0x59c>)
 800e44e:	428b      	cmp	r3, r1
 800e450:	4682      	mov	sl, r0
 800e452:	d898      	bhi.n	800e386 <_strtod_l+0x436>
 800e454:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e458:	428b      	cmp	r3, r1
 800e45a:	bf86      	itte	hi
 800e45c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e4f0 <_strtod_l+0x5a0>
 800e460:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800e464:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e468:	2300      	movs	r3, #0
 800e46a:	9308      	str	r3, [sp, #32]
 800e46c:	e07a      	b.n	800e564 <_strtod_l+0x614>
 800e46e:	07e2      	lsls	r2, r4, #31
 800e470:	d505      	bpl.n	800e47e <_strtod_l+0x52e>
 800e472:	9b08      	ldr	r3, [sp, #32]
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f2 f8e6 	bl	8000648 <__aeabi_dmul>
 800e47c:	2301      	movs	r3, #1
 800e47e:	9a08      	ldr	r2, [sp, #32]
 800e480:	3208      	adds	r2, #8
 800e482:	3601      	adds	r6, #1
 800e484:	1064      	asrs	r4, r4, #1
 800e486:	9208      	str	r2, [sp, #32]
 800e488:	e7cd      	b.n	800e426 <_strtod_l+0x4d6>
 800e48a:	d0ed      	beq.n	800e468 <_strtod_l+0x518>
 800e48c:	4264      	negs	r4, r4
 800e48e:	f014 020f 	ands.w	r2, r4, #15
 800e492:	d00a      	beq.n	800e4aa <_strtod_l+0x55a>
 800e494:	4b12      	ldr	r3, [pc, #72]	@ (800e4e0 <_strtod_l+0x590>)
 800e496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e49a:	4650      	mov	r0, sl
 800e49c:	4659      	mov	r1, fp
 800e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a2:	f7f2 f9fb 	bl	800089c <__aeabi_ddiv>
 800e4a6:	4682      	mov	sl, r0
 800e4a8:	468b      	mov	fp, r1
 800e4aa:	1124      	asrs	r4, r4, #4
 800e4ac:	d0dc      	beq.n	800e468 <_strtod_l+0x518>
 800e4ae:	2c1f      	cmp	r4, #31
 800e4b0:	dd20      	ble.n	800e4f4 <_strtod_l+0x5a4>
 800e4b2:	2400      	movs	r4, #0
 800e4b4:	46a0      	mov	r8, r4
 800e4b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e4b8:	46a1      	mov	r9, r4
 800e4ba:	9a05      	ldr	r2, [sp, #20]
 800e4bc:	2322      	movs	r3, #34	@ 0x22
 800e4be:	f04f 0a00 	mov.w	sl, #0
 800e4c2:	f04f 0b00 	mov.w	fp, #0
 800e4c6:	6013      	str	r3, [r2, #0]
 800e4c8:	e768      	b.n	800e39c <_strtod_l+0x44c>
 800e4ca:	bf00      	nop
 800e4cc:	0801175d 	.word	0x0801175d
 800e4d0:	0801178c 	.word	0x0801178c
 800e4d4:	08011755 	.word	0x08011755
 800e4d8:	08011928 	.word	0x08011928
 800e4dc:	08011924 	.word	0x08011924
 800e4e0:	08011ab0 	.word	0x08011ab0
 800e4e4:	08011a88 	.word	0x08011a88
 800e4e8:	7ff00000 	.word	0x7ff00000
 800e4ec:	7ca00000 	.word	0x7ca00000
 800e4f0:	7fefffff 	.word	0x7fefffff
 800e4f4:	f014 0310 	ands.w	r3, r4, #16
 800e4f8:	bf18      	it	ne
 800e4fa:	236a      	movne	r3, #106	@ 0x6a
 800e4fc:	4ea9      	ldr	r6, [pc, #676]	@ (800e7a4 <_strtod_l+0x854>)
 800e4fe:	9308      	str	r3, [sp, #32]
 800e500:	4650      	mov	r0, sl
 800e502:	4659      	mov	r1, fp
 800e504:	2300      	movs	r3, #0
 800e506:	07e2      	lsls	r2, r4, #31
 800e508:	d504      	bpl.n	800e514 <_strtod_l+0x5c4>
 800e50a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e50e:	f7f2 f89b 	bl	8000648 <__aeabi_dmul>
 800e512:	2301      	movs	r3, #1
 800e514:	1064      	asrs	r4, r4, #1
 800e516:	f106 0608 	add.w	r6, r6, #8
 800e51a:	d1f4      	bne.n	800e506 <_strtod_l+0x5b6>
 800e51c:	b10b      	cbz	r3, 800e522 <_strtod_l+0x5d2>
 800e51e:	4682      	mov	sl, r0
 800e520:	468b      	mov	fp, r1
 800e522:	9b08      	ldr	r3, [sp, #32]
 800e524:	b1b3      	cbz	r3, 800e554 <_strtod_l+0x604>
 800e526:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e52a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e52e:	2b00      	cmp	r3, #0
 800e530:	4659      	mov	r1, fp
 800e532:	dd0f      	ble.n	800e554 <_strtod_l+0x604>
 800e534:	2b1f      	cmp	r3, #31
 800e536:	dd55      	ble.n	800e5e4 <_strtod_l+0x694>
 800e538:	2b34      	cmp	r3, #52	@ 0x34
 800e53a:	bfde      	ittt	le
 800e53c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800e540:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e544:	4093      	lslle	r3, r2
 800e546:	f04f 0a00 	mov.w	sl, #0
 800e54a:	bfcc      	ite	gt
 800e54c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e550:	ea03 0b01 	andle.w	fp, r3, r1
 800e554:	2200      	movs	r2, #0
 800e556:	2300      	movs	r3, #0
 800e558:	4650      	mov	r0, sl
 800e55a:	4659      	mov	r1, fp
 800e55c:	f7f2 fadc 	bl	8000b18 <__aeabi_dcmpeq>
 800e560:	2800      	cmp	r0, #0
 800e562:	d1a6      	bne.n	800e4b2 <_strtod_l+0x562>
 800e564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e56a:	9805      	ldr	r0, [sp, #20]
 800e56c:	462b      	mov	r3, r5
 800e56e:	463a      	mov	r2, r7
 800e570:	f002 f89e 	bl	80106b0 <__s2b>
 800e574:	900a      	str	r0, [sp, #40]	@ 0x28
 800e576:	2800      	cmp	r0, #0
 800e578:	f43f af05 	beq.w	800e386 <_strtod_l+0x436>
 800e57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e57e:	2a00      	cmp	r2, #0
 800e580:	eba9 0308 	sub.w	r3, r9, r8
 800e584:	bfa8      	it	ge
 800e586:	2300      	movge	r3, #0
 800e588:	9312      	str	r3, [sp, #72]	@ 0x48
 800e58a:	2400      	movs	r4, #0
 800e58c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e590:	9316      	str	r3, [sp, #88]	@ 0x58
 800e592:	46a0      	mov	r8, r4
 800e594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e596:	9805      	ldr	r0, [sp, #20]
 800e598:	6859      	ldr	r1, [r3, #4]
 800e59a:	f001 ffe1 	bl	8010560 <_Balloc>
 800e59e:	4681      	mov	r9, r0
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	f43f aef4 	beq.w	800e38e <_strtod_l+0x43e>
 800e5a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5a8:	691a      	ldr	r2, [r3, #16]
 800e5aa:	3202      	adds	r2, #2
 800e5ac:	f103 010c 	add.w	r1, r3, #12
 800e5b0:	0092      	lsls	r2, r2, #2
 800e5b2:	300c      	adds	r0, #12
 800e5b4:	f000 fbab 	bl	800ed0e <memcpy>
 800e5b8:	ec4b ab10 	vmov	d0, sl, fp
 800e5bc:	9805      	ldr	r0, [sp, #20]
 800e5be:	aa1c      	add	r2, sp, #112	@ 0x70
 800e5c0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e5c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e5c6:	f002 fbaf 	bl	8010d28 <__d2b>
 800e5ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	f43f aede 	beq.w	800e38e <_strtod_l+0x43e>
 800e5d2:	9805      	ldr	r0, [sp, #20]
 800e5d4:	2101      	movs	r1, #1
 800e5d6:	f002 f901 	bl	80107dc <__i2b>
 800e5da:	4680      	mov	r8, r0
 800e5dc:	b948      	cbnz	r0, 800e5f2 <_strtod_l+0x6a2>
 800e5de:	f04f 0800 	mov.w	r8, #0
 800e5e2:	e6d4      	b.n	800e38e <_strtod_l+0x43e>
 800e5e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ec:	ea03 0a0a 	and.w	sl, r3, sl
 800e5f0:	e7b0      	b.n	800e554 <_strtod_l+0x604>
 800e5f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e5f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e5f6:	2d00      	cmp	r5, #0
 800e5f8:	bfab      	itete	ge
 800e5fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e5fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e5fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e600:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e602:	bfac      	ite	ge
 800e604:	18ef      	addge	r7, r5, r3
 800e606:	1b5e      	sublt	r6, r3, r5
 800e608:	9b08      	ldr	r3, [sp, #32]
 800e60a:	1aed      	subs	r5, r5, r3
 800e60c:	4415      	add	r5, r2
 800e60e:	4b66      	ldr	r3, [pc, #408]	@ (800e7a8 <_strtod_l+0x858>)
 800e610:	3d01      	subs	r5, #1
 800e612:	429d      	cmp	r5, r3
 800e614:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e618:	da50      	bge.n	800e6bc <_strtod_l+0x76c>
 800e61a:	1b5b      	subs	r3, r3, r5
 800e61c:	2b1f      	cmp	r3, #31
 800e61e:	eba2 0203 	sub.w	r2, r2, r3
 800e622:	f04f 0101 	mov.w	r1, #1
 800e626:	dc3d      	bgt.n	800e6a4 <_strtod_l+0x754>
 800e628:	fa01 f303 	lsl.w	r3, r1, r3
 800e62c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e62e:	2300      	movs	r3, #0
 800e630:	9310      	str	r3, [sp, #64]	@ 0x40
 800e632:	18bd      	adds	r5, r7, r2
 800e634:	9b08      	ldr	r3, [sp, #32]
 800e636:	42af      	cmp	r7, r5
 800e638:	4416      	add	r6, r2
 800e63a:	441e      	add	r6, r3
 800e63c:	463b      	mov	r3, r7
 800e63e:	bfa8      	it	ge
 800e640:	462b      	movge	r3, r5
 800e642:	42b3      	cmp	r3, r6
 800e644:	bfa8      	it	ge
 800e646:	4633      	movge	r3, r6
 800e648:	2b00      	cmp	r3, #0
 800e64a:	bfc2      	ittt	gt
 800e64c:	1aed      	subgt	r5, r5, r3
 800e64e:	1af6      	subgt	r6, r6, r3
 800e650:	1aff      	subgt	r7, r7, r3
 800e652:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e654:	2b00      	cmp	r3, #0
 800e656:	dd16      	ble.n	800e686 <_strtod_l+0x736>
 800e658:	4641      	mov	r1, r8
 800e65a:	9805      	ldr	r0, [sp, #20]
 800e65c:	461a      	mov	r2, r3
 800e65e:	f002 f97d 	bl	801095c <__pow5mult>
 800e662:	4680      	mov	r8, r0
 800e664:	2800      	cmp	r0, #0
 800e666:	d0ba      	beq.n	800e5de <_strtod_l+0x68e>
 800e668:	4601      	mov	r1, r0
 800e66a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e66c:	9805      	ldr	r0, [sp, #20]
 800e66e:	f002 f8cb 	bl	8010808 <__multiply>
 800e672:	900e      	str	r0, [sp, #56]	@ 0x38
 800e674:	2800      	cmp	r0, #0
 800e676:	f43f ae8a 	beq.w	800e38e <_strtod_l+0x43e>
 800e67a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e67c:	9805      	ldr	r0, [sp, #20]
 800e67e:	f001 ffaf 	bl	80105e0 <_Bfree>
 800e682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e684:	931a      	str	r3, [sp, #104]	@ 0x68
 800e686:	2d00      	cmp	r5, #0
 800e688:	dc1d      	bgt.n	800e6c6 <_strtod_l+0x776>
 800e68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	dd23      	ble.n	800e6d8 <_strtod_l+0x788>
 800e690:	4649      	mov	r1, r9
 800e692:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e694:	9805      	ldr	r0, [sp, #20]
 800e696:	f002 f961 	bl	801095c <__pow5mult>
 800e69a:	4681      	mov	r9, r0
 800e69c:	b9e0      	cbnz	r0, 800e6d8 <_strtod_l+0x788>
 800e69e:	f04f 0900 	mov.w	r9, #0
 800e6a2:	e674      	b.n	800e38e <_strtod_l+0x43e>
 800e6a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e6a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e6ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e6b0:	35e2      	adds	r5, #226	@ 0xe2
 800e6b2:	fa01 f305 	lsl.w	r3, r1, r5
 800e6b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e6ba:	e7ba      	b.n	800e632 <_strtod_l+0x6e2>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e6c4:	e7b5      	b.n	800e632 <_strtod_l+0x6e2>
 800e6c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6c8:	9805      	ldr	r0, [sp, #20]
 800e6ca:	462a      	mov	r2, r5
 800e6cc:	f002 f9a0 	bl	8010a10 <__lshift>
 800e6d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d1d9      	bne.n	800e68a <_strtod_l+0x73a>
 800e6d6:	e65a      	b.n	800e38e <_strtod_l+0x43e>
 800e6d8:	2e00      	cmp	r6, #0
 800e6da:	dd07      	ble.n	800e6ec <_strtod_l+0x79c>
 800e6dc:	4649      	mov	r1, r9
 800e6de:	9805      	ldr	r0, [sp, #20]
 800e6e0:	4632      	mov	r2, r6
 800e6e2:	f002 f995 	bl	8010a10 <__lshift>
 800e6e6:	4681      	mov	r9, r0
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d0d8      	beq.n	800e69e <_strtod_l+0x74e>
 800e6ec:	2f00      	cmp	r7, #0
 800e6ee:	dd08      	ble.n	800e702 <_strtod_l+0x7b2>
 800e6f0:	4641      	mov	r1, r8
 800e6f2:	9805      	ldr	r0, [sp, #20]
 800e6f4:	463a      	mov	r2, r7
 800e6f6:	f002 f98b 	bl	8010a10 <__lshift>
 800e6fa:	4680      	mov	r8, r0
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	f43f ae46 	beq.w	800e38e <_strtod_l+0x43e>
 800e702:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e704:	9805      	ldr	r0, [sp, #20]
 800e706:	464a      	mov	r2, r9
 800e708:	f002 fa0a 	bl	8010b20 <__mdiff>
 800e70c:	4604      	mov	r4, r0
 800e70e:	2800      	cmp	r0, #0
 800e710:	f43f ae3d 	beq.w	800e38e <_strtod_l+0x43e>
 800e714:	68c3      	ldr	r3, [r0, #12]
 800e716:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e718:	2300      	movs	r3, #0
 800e71a:	60c3      	str	r3, [r0, #12]
 800e71c:	4641      	mov	r1, r8
 800e71e:	f002 f9e3 	bl	8010ae8 <__mcmp>
 800e722:	2800      	cmp	r0, #0
 800e724:	da46      	bge.n	800e7b4 <_strtod_l+0x864>
 800e726:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e728:	ea53 030a 	orrs.w	r3, r3, sl
 800e72c:	d16c      	bne.n	800e808 <_strtod_l+0x8b8>
 800e72e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e732:	2b00      	cmp	r3, #0
 800e734:	d168      	bne.n	800e808 <_strtod_l+0x8b8>
 800e736:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e73a:	0d1b      	lsrs	r3, r3, #20
 800e73c:	051b      	lsls	r3, r3, #20
 800e73e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e742:	d961      	bls.n	800e808 <_strtod_l+0x8b8>
 800e744:	6963      	ldr	r3, [r4, #20]
 800e746:	b913      	cbnz	r3, 800e74e <_strtod_l+0x7fe>
 800e748:	6923      	ldr	r3, [r4, #16]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	dd5c      	ble.n	800e808 <_strtod_l+0x8b8>
 800e74e:	4621      	mov	r1, r4
 800e750:	2201      	movs	r2, #1
 800e752:	9805      	ldr	r0, [sp, #20]
 800e754:	f002 f95c 	bl	8010a10 <__lshift>
 800e758:	4641      	mov	r1, r8
 800e75a:	4604      	mov	r4, r0
 800e75c:	f002 f9c4 	bl	8010ae8 <__mcmp>
 800e760:	2800      	cmp	r0, #0
 800e762:	dd51      	ble.n	800e808 <_strtod_l+0x8b8>
 800e764:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e768:	9a08      	ldr	r2, [sp, #32]
 800e76a:	0d1b      	lsrs	r3, r3, #20
 800e76c:	051b      	lsls	r3, r3, #20
 800e76e:	2a00      	cmp	r2, #0
 800e770:	d06b      	beq.n	800e84a <_strtod_l+0x8fa>
 800e772:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e776:	d868      	bhi.n	800e84a <_strtod_l+0x8fa>
 800e778:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e77c:	f67f ae9d 	bls.w	800e4ba <_strtod_l+0x56a>
 800e780:	4b0a      	ldr	r3, [pc, #40]	@ (800e7ac <_strtod_l+0x85c>)
 800e782:	4650      	mov	r0, sl
 800e784:	4659      	mov	r1, fp
 800e786:	2200      	movs	r2, #0
 800e788:	f7f1 ff5e 	bl	8000648 <__aeabi_dmul>
 800e78c:	4b08      	ldr	r3, [pc, #32]	@ (800e7b0 <_strtod_l+0x860>)
 800e78e:	400b      	ands	r3, r1
 800e790:	4682      	mov	sl, r0
 800e792:	468b      	mov	fp, r1
 800e794:	2b00      	cmp	r3, #0
 800e796:	f47f ae05 	bne.w	800e3a4 <_strtod_l+0x454>
 800e79a:	9a05      	ldr	r2, [sp, #20]
 800e79c:	2322      	movs	r3, #34	@ 0x22
 800e79e:	6013      	str	r3, [r2, #0]
 800e7a0:	e600      	b.n	800e3a4 <_strtod_l+0x454>
 800e7a2:	bf00      	nop
 800e7a4:	080117b8 	.word	0x080117b8
 800e7a8:	fffffc02 	.word	0xfffffc02
 800e7ac:	39500000 	.word	0x39500000
 800e7b0:	7ff00000 	.word	0x7ff00000
 800e7b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e7b8:	d165      	bne.n	800e886 <_strtod_l+0x936>
 800e7ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e7bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7c0:	b35a      	cbz	r2, 800e81a <_strtod_l+0x8ca>
 800e7c2:	4a9f      	ldr	r2, [pc, #636]	@ (800ea40 <_strtod_l+0xaf0>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d12b      	bne.n	800e820 <_strtod_l+0x8d0>
 800e7c8:	9b08      	ldr	r3, [sp, #32]
 800e7ca:	4651      	mov	r1, sl
 800e7cc:	b303      	cbz	r3, 800e810 <_strtod_l+0x8c0>
 800e7ce:	4b9d      	ldr	r3, [pc, #628]	@ (800ea44 <_strtod_l+0xaf4>)
 800e7d0:	465a      	mov	r2, fp
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e7d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e7dc:	d81b      	bhi.n	800e816 <_strtod_l+0x8c6>
 800e7de:	0d1b      	lsrs	r3, r3, #20
 800e7e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e8:	4299      	cmp	r1, r3
 800e7ea:	d119      	bne.n	800e820 <_strtod_l+0x8d0>
 800e7ec:	4b96      	ldr	r3, [pc, #600]	@ (800ea48 <_strtod_l+0xaf8>)
 800e7ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d102      	bne.n	800e7fa <_strtod_l+0x8aa>
 800e7f4:	3101      	adds	r1, #1
 800e7f6:	f43f adca 	beq.w	800e38e <_strtod_l+0x43e>
 800e7fa:	4b92      	ldr	r3, [pc, #584]	@ (800ea44 <_strtod_l+0xaf4>)
 800e7fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7fe:	401a      	ands	r2, r3
 800e800:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e804:	f04f 0a00 	mov.w	sl, #0
 800e808:	9b08      	ldr	r3, [sp, #32]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1b8      	bne.n	800e780 <_strtod_l+0x830>
 800e80e:	e5c9      	b.n	800e3a4 <_strtod_l+0x454>
 800e810:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e814:	e7e8      	b.n	800e7e8 <_strtod_l+0x898>
 800e816:	4613      	mov	r3, r2
 800e818:	e7e6      	b.n	800e7e8 <_strtod_l+0x898>
 800e81a:	ea53 030a 	orrs.w	r3, r3, sl
 800e81e:	d0a1      	beq.n	800e764 <_strtod_l+0x814>
 800e820:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e822:	b1db      	cbz	r3, 800e85c <_strtod_l+0x90c>
 800e824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e826:	4213      	tst	r3, r2
 800e828:	d0ee      	beq.n	800e808 <_strtod_l+0x8b8>
 800e82a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e82c:	9a08      	ldr	r2, [sp, #32]
 800e82e:	4650      	mov	r0, sl
 800e830:	4659      	mov	r1, fp
 800e832:	b1bb      	cbz	r3, 800e864 <_strtod_l+0x914>
 800e834:	f7ff fb6e 	bl	800df14 <sulp>
 800e838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e83c:	ec53 2b10 	vmov	r2, r3, d0
 800e840:	f7f1 fd4c 	bl	80002dc <__adddf3>
 800e844:	4682      	mov	sl, r0
 800e846:	468b      	mov	fp, r1
 800e848:	e7de      	b.n	800e808 <_strtod_l+0x8b8>
 800e84a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e84e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e852:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e856:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e85a:	e7d5      	b.n	800e808 <_strtod_l+0x8b8>
 800e85c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e85e:	ea13 0f0a 	tst.w	r3, sl
 800e862:	e7e1      	b.n	800e828 <_strtod_l+0x8d8>
 800e864:	f7ff fb56 	bl	800df14 <sulp>
 800e868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e86c:	ec53 2b10 	vmov	r2, r3, d0
 800e870:	f7f1 fd32 	bl	80002d8 <__aeabi_dsub>
 800e874:	2200      	movs	r2, #0
 800e876:	2300      	movs	r3, #0
 800e878:	4682      	mov	sl, r0
 800e87a:	468b      	mov	fp, r1
 800e87c:	f7f2 f94c 	bl	8000b18 <__aeabi_dcmpeq>
 800e880:	2800      	cmp	r0, #0
 800e882:	d0c1      	beq.n	800e808 <_strtod_l+0x8b8>
 800e884:	e619      	b.n	800e4ba <_strtod_l+0x56a>
 800e886:	4641      	mov	r1, r8
 800e888:	4620      	mov	r0, r4
 800e88a:	f002 faa5 	bl	8010dd8 <__ratio>
 800e88e:	ec57 6b10 	vmov	r6, r7, d0
 800e892:	2200      	movs	r2, #0
 800e894:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e898:	4630      	mov	r0, r6
 800e89a:	4639      	mov	r1, r7
 800e89c:	f7f2 f950 	bl	8000b40 <__aeabi_dcmple>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d06f      	beq.n	800e984 <_strtod_l+0xa34>
 800e8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d17a      	bne.n	800e9a0 <_strtod_l+0xa50>
 800e8aa:	f1ba 0f00 	cmp.w	sl, #0
 800e8ae:	d158      	bne.n	800e962 <_strtod_l+0xa12>
 800e8b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d15a      	bne.n	800e970 <_strtod_l+0xa20>
 800e8ba:	4b64      	ldr	r3, [pc, #400]	@ (800ea4c <_strtod_l+0xafc>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	4630      	mov	r0, r6
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	f7f2 f933 	bl	8000b2c <__aeabi_dcmplt>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d159      	bne.n	800e97e <_strtod_l+0xa2e>
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	4b60      	ldr	r3, [pc, #384]	@ (800ea50 <_strtod_l+0xb00>)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f7f1 feb9 	bl	8000648 <__aeabi_dmul>
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	460f      	mov	r7, r1
 800e8da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e8de:	9606      	str	r6, [sp, #24]
 800e8e0:	9307      	str	r3, [sp, #28]
 800e8e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8e6:	4d57      	ldr	r5, [pc, #348]	@ (800ea44 <_strtod_l+0xaf4>)
 800e8e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e8ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8ee:	401d      	ands	r5, r3
 800e8f0:	4b58      	ldr	r3, [pc, #352]	@ (800ea54 <_strtod_l+0xb04>)
 800e8f2:	429d      	cmp	r5, r3
 800e8f4:	f040 80b2 	bne.w	800ea5c <_strtod_l+0xb0c>
 800e8f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e8fe:	ec4b ab10 	vmov	d0, sl, fp
 800e902:	f002 f9a1 	bl	8010c48 <__ulp>
 800e906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e90a:	ec51 0b10 	vmov	r0, r1, d0
 800e90e:	f7f1 fe9b 	bl	8000648 <__aeabi_dmul>
 800e912:	4652      	mov	r2, sl
 800e914:	465b      	mov	r3, fp
 800e916:	f7f1 fce1 	bl	80002dc <__adddf3>
 800e91a:	460b      	mov	r3, r1
 800e91c:	4949      	ldr	r1, [pc, #292]	@ (800ea44 <_strtod_l+0xaf4>)
 800e91e:	4a4e      	ldr	r2, [pc, #312]	@ (800ea58 <_strtod_l+0xb08>)
 800e920:	4019      	ands	r1, r3
 800e922:	4291      	cmp	r1, r2
 800e924:	4682      	mov	sl, r0
 800e926:	d942      	bls.n	800e9ae <_strtod_l+0xa5e>
 800e928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e92a:	4b47      	ldr	r3, [pc, #284]	@ (800ea48 <_strtod_l+0xaf8>)
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d103      	bne.n	800e938 <_strtod_l+0x9e8>
 800e930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e932:	3301      	adds	r3, #1
 800e934:	f43f ad2b 	beq.w	800e38e <_strtod_l+0x43e>
 800e938:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ea48 <_strtod_l+0xaf8>
 800e93c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e940:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e942:	9805      	ldr	r0, [sp, #20]
 800e944:	f001 fe4c 	bl	80105e0 <_Bfree>
 800e948:	9805      	ldr	r0, [sp, #20]
 800e94a:	4649      	mov	r1, r9
 800e94c:	f001 fe48 	bl	80105e0 <_Bfree>
 800e950:	9805      	ldr	r0, [sp, #20]
 800e952:	4641      	mov	r1, r8
 800e954:	f001 fe44 	bl	80105e0 <_Bfree>
 800e958:	9805      	ldr	r0, [sp, #20]
 800e95a:	4621      	mov	r1, r4
 800e95c:	f001 fe40 	bl	80105e0 <_Bfree>
 800e960:	e618      	b.n	800e594 <_strtod_l+0x644>
 800e962:	f1ba 0f01 	cmp.w	sl, #1
 800e966:	d103      	bne.n	800e970 <_strtod_l+0xa20>
 800e968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f43f ada5 	beq.w	800e4ba <_strtod_l+0x56a>
 800e970:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ea20 <_strtod_l+0xad0>
 800e974:	4f35      	ldr	r7, [pc, #212]	@ (800ea4c <_strtod_l+0xafc>)
 800e976:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e97a:	2600      	movs	r6, #0
 800e97c:	e7b1      	b.n	800e8e2 <_strtod_l+0x992>
 800e97e:	4f34      	ldr	r7, [pc, #208]	@ (800ea50 <_strtod_l+0xb00>)
 800e980:	2600      	movs	r6, #0
 800e982:	e7aa      	b.n	800e8da <_strtod_l+0x98a>
 800e984:	4b32      	ldr	r3, [pc, #200]	@ (800ea50 <_strtod_l+0xb00>)
 800e986:	4630      	mov	r0, r6
 800e988:	4639      	mov	r1, r7
 800e98a:	2200      	movs	r2, #0
 800e98c:	f7f1 fe5c 	bl	8000648 <__aeabi_dmul>
 800e990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e992:	4606      	mov	r6, r0
 800e994:	460f      	mov	r7, r1
 800e996:	2b00      	cmp	r3, #0
 800e998:	d09f      	beq.n	800e8da <_strtod_l+0x98a>
 800e99a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e99e:	e7a0      	b.n	800e8e2 <_strtod_l+0x992>
 800e9a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ea28 <_strtod_l+0xad8>
 800e9a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e9a8:	ec57 6b17 	vmov	r6, r7, d7
 800e9ac:	e799      	b.n	800e8e2 <_strtod_l+0x992>
 800e9ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e9b2:	9b08      	ldr	r3, [sp, #32]
 800e9b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1c1      	bne.n	800e940 <_strtod_l+0x9f0>
 800e9bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9c0:	0d1b      	lsrs	r3, r3, #20
 800e9c2:	051b      	lsls	r3, r3, #20
 800e9c4:	429d      	cmp	r5, r3
 800e9c6:	d1bb      	bne.n	800e940 <_strtod_l+0x9f0>
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	4639      	mov	r1, r7
 800e9cc:	f7f2 f99c 	bl	8000d08 <__aeabi_d2lz>
 800e9d0:	f7f1 fe0c 	bl	80005ec <__aeabi_l2d>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4630      	mov	r0, r6
 800e9da:	4639      	mov	r1, r7
 800e9dc:	f7f1 fc7c 	bl	80002d8 <__aeabi_dsub>
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e9e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ee:	ea46 060a 	orr.w	r6, r6, sl
 800e9f2:	431e      	orrs	r6, r3
 800e9f4:	d06f      	beq.n	800ead6 <_strtod_l+0xb86>
 800e9f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ea30 <_strtod_l+0xae0>)
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	f7f2 f896 	bl	8000b2c <__aeabi_dcmplt>
 800ea00:	2800      	cmp	r0, #0
 800ea02:	f47f accf 	bne.w	800e3a4 <_strtod_l+0x454>
 800ea06:	a30c      	add	r3, pc, #48	@ (adr r3, 800ea38 <_strtod_l+0xae8>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea10:	f7f2 f8aa 	bl	8000b68 <__aeabi_dcmpgt>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d093      	beq.n	800e940 <_strtod_l+0x9f0>
 800ea18:	e4c4      	b.n	800e3a4 <_strtod_l+0x454>
 800ea1a:	bf00      	nop
 800ea1c:	f3af 8000 	nop.w
 800ea20:	00000000 	.word	0x00000000
 800ea24:	bff00000 	.word	0xbff00000
 800ea28:	00000000 	.word	0x00000000
 800ea2c:	3ff00000 	.word	0x3ff00000
 800ea30:	94a03595 	.word	0x94a03595
 800ea34:	3fdfffff 	.word	0x3fdfffff
 800ea38:	35afe535 	.word	0x35afe535
 800ea3c:	3fe00000 	.word	0x3fe00000
 800ea40:	000fffff 	.word	0x000fffff
 800ea44:	7ff00000 	.word	0x7ff00000
 800ea48:	7fefffff 	.word	0x7fefffff
 800ea4c:	3ff00000 	.word	0x3ff00000
 800ea50:	3fe00000 	.word	0x3fe00000
 800ea54:	7fe00000 	.word	0x7fe00000
 800ea58:	7c9fffff 	.word	0x7c9fffff
 800ea5c:	9b08      	ldr	r3, [sp, #32]
 800ea5e:	b323      	cbz	r3, 800eaaa <_strtod_l+0xb5a>
 800ea60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ea64:	d821      	bhi.n	800eaaa <_strtod_l+0xb5a>
 800ea66:	a328      	add	r3, pc, #160	@ (adr r3, 800eb08 <_strtod_l+0xbb8>)
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	4639      	mov	r1, r7
 800ea70:	f7f2 f866 	bl	8000b40 <__aeabi_dcmple>
 800ea74:	b1a0      	cbz	r0, 800eaa0 <_strtod_l+0xb50>
 800ea76:	4639      	mov	r1, r7
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f7f2 f8bd 	bl	8000bf8 <__aeabi_d2uiz>
 800ea7e:	2801      	cmp	r0, #1
 800ea80:	bf38      	it	cc
 800ea82:	2001      	movcc	r0, #1
 800ea84:	f7f1 fd66 	bl	8000554 <__aeabi_ui2d>
 800ea88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	460f      	mov	r7, r1
 800ea8e:	b9fb      	cbnz	r3, 800ead0 <_strtod_l+0xb80>
 800ea90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ea94:	9014      	str	r0, [sp, #80]	@ 0x50
 800ea96:	9315      	str	r3, [sp, #84]	@ 0x54
 800ea98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ea9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eaa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eaa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800eaa6:	1b5b      	subs	r3, r3, r5
 800eaa8:	9311      	str	r3, [sp, #68]	@ 0x44
 800eaaa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eaae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800eab2:	f002 f8c9 	bl	8010c48 <__ulp>
 800eab6:	4650      	mov	r0, sl
 800eab8:	ec53 2b10 	vmov	r2, r3, d0
 800eabc:	4659      	mov	r1, fp
 800eabe:	f7f1 fdc3 	bl	8000648 <__aeabi_dmul>
 800eac2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eac6:	f7f1 fc09 	bl	80002dc <__adddf3>
 800eaca:	4682      	mov	sl, r0
 800eacc:	468b      	mov	fp, r1
 800eace:	e770      	b.n	800e9b2 <_strtod_l+0xa62>
 800ead0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ead4:	e7e0      	b.n	800ea98 <_strtod_l+0xb48>
 800ead6:	a30e      	add	r3, pc, #56	@ (adr r3, 800eb10 <_strtod_l+0xbc0>)
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	f7f2 f826 	bl	8000b2c <__aeabi_dcmplt>
 800eae0:	e798      	b.n	800ea14 <_strtod_l+0xac4>
 800eae2:	2300      	movs	r3, #0
 800eae4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eae6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800eae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	f7ff ba6d 	b.w	800dfca <_strtod_l+0x7a>
 800eaf0:	2a65      	cmp	r2, #101	@ 0x65
 800eaf2:	f43f ab66 	beq.w	800e1c2 <_strtod_l+0x272>
 800eaf6:	2a45      	cmp	r2, #69	@ 0x45
 800eaf8:	f43f ab63 	beq.w	800e1c2 <_strtod_l+0x272>
 800eafc:	2301      	movs	r3, #1
 800eafe:	f7ff bb9e 	b.w	800e23e <_strtod_l+0x2ee>
 800eb02:	bf00      	nop
 800eb04:	f3af 8000 	nop.w
 800eb08:	ffc00000 	.word	0xffc00000
 800eb0c:	41dfffff 	.word	0x41dfffff
 800eb10:	94a03595 	.word	0x94a03595
 800eb14:	3fcfffff 	.word	0x3fcfffff

0800eb18 <_strtod_r>:
 800eb18:	4b01      	ldr	r3, [pc, #4]	@ (800eb20 <_strtod_r+0x8>)
 800eb1a:	f7ff ba19 	b.w	800df50 <_strtod_l>
 800eb1e:	bf00      	nop
 800eb20:	20000038 	.word	0x20000038

0800eb24 <_strtol_l.constprop.0>:
 800eb24:	2b24      	cmp	r3, #36	@ 0x24
 800eb26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb2a:	4686      	mov	lr, r0
 800eb2c:	4690      	mov	r8, r2
 800eb2e:	d801      	bhi.n	800eb34 <_strtol_l.constprop.0+0x10>
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d106      	bne.n	800eb42 <_strtol_l.constprop.0+0x1e>
 800eb34:	f000 f8be 	bl	800ecb4 <__errno>
 800eb38:	2316      	movs	r3, #22
 800eb3a:	6003      	str	r3, [r0, #0]
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb42:	4834      	ldr	r0, [pc, #208]	@ (800ec14 <_strtol_l.constprop.0+0xf0>)
 800eb44:	460d      	mov	r5, r1
 800eb46:	462a      	mov	r2, r5
 800eb48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb4c:	5d06      	ldrb	r6, [r0, r4]
 800eb4e:	f016 0608 	ands.w	r6, r6, #8
 800eb52:	d1f8      	bne.n	800eb46 <_strtol_l.constprop.0+0x22>
 800eb54:	2c2d      	cmp	r4, #45	@ 0x2d
 800eb56:	d12d      	bne.n	800ebb4 <_strtol_l.constprop.0+0x90>
 800eb58:	782c      	ldrb	r4, [r5, #0]
 800eb5a:	2601      	movs	r6, #1
 800eb5c:	1c95      	adds	r5, r2, #2
 800eb5e:	f033 0210 	bics.w	r2, r3, #16
 800eb62:	d109      	bne.n	800eb78 <_strtol_l.constprop.0+0x54>
 800eb64:	2c30      	cmp	r4, #48	@ 0x30
 800eb66:	d12a      	bne.n	800ebbe <_strtol_l.constprop.0+0x9a>
 800eb68:	782a      	ldrb	r2, [r5, #0]
 800eb6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eb6e:	2a58      	cmp	r2, #88	@ 0x58
 800eb70:	d125      	bne.n	800ebbe <_strtol_l.constprop.0+0x9a>
 800eb72:	786c      	ldrb	r4, [r5, #1]
 800eb74:	2310      	movs	r3, #16
 800eb76:	3502      	adds	r5, #2
 800eb78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eb7c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800eb80:	2200      	movs	r2, #0
 800eb82:	fbbc f9f3 	udiv	r9, ip, r3
 800eb86:	4610      	mov	r0, r2
 800eb88:	fb03 ca19 	mls	sl, r3, r9, ip
 800eb8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800eb90:	2f09      	cmp	r7, #9
 800eb92:	d81b      	bhi.n	800ebcc <_strtol_l.constprop.0+0xa8>
 800eb94:	463c      	mov	r4, r7
 800eb96:	42a3      	cmp	r3, r4
 800eb98:	dd27      	ble.n	800ebea <_strtol_l.constprop.0+0xc6>
 800eb9a:	1c57      	adds	r7, r2, #1
 800eb9c:	d007      	beq.n	800ebae <_strtol_l.constprop.0+0x8a>
 800eb9e:	4581      	cmp	r9, r0
 800eba0:	d320      	bcc.n	800ebe4 <_strtol_l.constprop.0+0xc0>
 800eba2:	d101      	bne.n	800eba8 <_strtol_l.constprop.0+0x84>
 800eba4:	45a2      	cmp	sl, r4
 800eba6:	db1d      	blt.n	800ebe4 <_strtol_l.constprop.0+0xc0>
 800eba8:	fb00 4003 	mla	r0, r0, r3, r4
 800ebac:	2201      	movs	r2, #1
 800ebae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebb2:	e7eb      	b.n	800eb8c <_strtol_l.constprop.0+0x68>
 800ebb4:	2c2b      	cmp	r4, #43	@ 0x2b
 800ebb6:	bf04      	itt	eq
 800ebb8:	782c      	ldrbeq	r4, [r5, #0]
 800ebba:	1c95      	addeq	r5, r2, #2
 800ebbc:	e7cf      	b.n	800eb5e <_strtol_l.constprop.0+0x3a>
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1da      	bne.n	800eb78 <_strtol_l.constprop.0+0x54>
 800ebc2:	2c30      	cmp	r4, #48	@ 0x30
 800ebc4:	bf0c      	ite	eq
 800ebc6:	2308      	moveq	r3, #8
 800ebc8:	230a      	movne	r3, #10
 800ebca:	e7d5      	b.n	800eb78 <_strtol_l.constprop.0+0x54>
 800ebcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ebd0:	2f19      	cmp	r7, #25
 800ebd2:	d801      	bhi.n	800ebd8 <_strtol_l.constprop.0+0xb4>
 800ebd4:	3c37      	subs	r4, #55	@ 0x37
 800ebd6:	e7de      	b.n	800eb96 <_strtol_l.constprop.0+0x72>
 800ebd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ebdc:	2f19      	cmp	r7, #25
 800ebde:	d804      	bhi.n	800ebea <_strtol_l.constprop.0+0xc6>
 800ebe0:	3c57      	subs	r4, #87	@ 0x57
 800ebe2:	e7d8      	b.n	800eb96 <_strtol_l.constprop.0+0x72>
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ebe8:	e7e1      	b.n	800ebae <_strtol_l.constprop.0+0x8a>
 800ebea:	1c53      	adds	r3, r2, #1
 800ebec:	d108      	bne.n	800ec00 <_strtol_l.constprop.0+0xdc>
 800ebee:	2322      	movs	r3, #34	@ 0x22
 800ebf0:	f8ce 3000 	str.w	r3, [lr]
 800ebf4:	4660      	mov	r0, ip
 800ebf6:	f1b8 0f00 	cmp.w	r8, #0
 800ebfa:	d0a0      	beq.n	800eb3e <_strtol_l.constprop.0+0x1a>
 800ebfc:	1e69      	subs	r1, r5, #1
 800ebfe:	e006      	b.n	800ec0e <_strtol_l.constprop.0+0xea>
 800ec00:	b106      	cbz	r6, 800ec04 <_strtol_l.constprop.0+0xe0>
 800ec02:	4240      	negs	r0, r0
 800ec04:	f1b8 0f00 	cmp.w	r8, #0
 800ec08:	d099      	beq.n	800eb3e <_strtol_l.constprop.0+0x1a>
 800ec0a:	2a00      	cmp	r2, #0
 800ec0c:	d1f6      	bne.n	800ebfc <_strtol_l.constprop.0+0xd8>
 800ec0e:	f8c8 1000 	str.w	r1, [r8]
 800ec12:	e794      	b.n	800eb3e <_strtol_l.constprop.0+0x1a>
 800ec14:	080117e9 	.word	0x080117e9

0800ec18 <_strtol_r>:
 800ec18:	f7ff bf84 	b.w	800eb24 <_strtol_l.constprop.0>

0800ec1c <_fwalk_sglue>:
 800ec1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec20:	4607      	mov	r7, r0
 800ec22:	4688      	mov	r8, r1
 800ec24:	4614      	mov	r4, r2
 800ec26:	2600      	movs	r6, #0
 800ec28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec2c:	f1b9 0901 	subs.w	r9, r9, #1
 800ec30:	d505      	bpl.n	800ec3e <_fwalk_sglue+0x22>
 800ec32:	6824      	ldr	r4, [r4, #0]
 800ec34:	2c00      	cmp	r4, #0
 800ec36:	d1f7      	bne.n	800ec28 <_fwalk_sglue+0xc>
 800ec38:	4630      	mov	r0, r6
 800ec3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec3e:	89ab      	ldrh	r3, [r5, #12]
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d907      	bls.n	800ec54 <_fwalk_sglue+0x38>
 800ec44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	d003      	beq.n	800ec54 <_fwalk_sglue+0x38>
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	4638      	mov	r0, r7
 800ec50:	47c0      	blx	r8
 800ec52:	4306      	orrs	r6, r0
 800ec54:	3568      	adds	r5, #104	@ 0x68
 800ec56:	e7e9      	b.n	800ec2c <_fwalk_sglue+0x10>

0800ec58 <strncmp>:
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	b16a      	cbz	r2, 800ec78 <strncmp+0x20>
 800ec5c:	3901      	subs	r1, #1
 800ec5e:	1884      	adds	r4, r0, r2
 800ec60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d103      	bne.n	800ec74 <strncmp+0x1c>
 800ec6c:	42a0      	cmp	r0, r4
 800ec6e:	d001      	beq.n	800ec74 <strncmp+0x1c>
 800ec70:	2a00      	cmp	r2, #0
 800ec72:	d1f5      	bne.n	800ec60 <strncmp+0x8>
 800ec74:	1ad0      	subs	r0, r2, r3
 800ec76:	bd10      	pop	{r4, pc}
 800ec78:	4610      	mov	r0, r2
 800ec7a:	e7fc      	b.n	800ec76 <strncmp+0x1e>

0800ec7c <memset>:
 800ec7c:	4402      	add	r2, r0
 800ec7e:	4603      	mov	r3, r0
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d100      	bne.n	800ec86 <memset+0xa>
 800ec84:	4770      	bx	lr
 800ec86:	f803 1b01 	strb.w	r1, [r3], #1
 800ec8a:	e7f9      	b.n	800ec80 <memset+0x4>

0800ec8c <_localeconv_r>:
 800ec8c:	4800      	ldr	r0, [pc, #0]	@ (800ec90 <_localeconv_r+0x4>)
 800ec8e:	4770      	bx	lr
 800ec90:	20000128 	.word	0x20000128

0800ec94 <_sbrk_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	4d06      	ldr	r5, [pc, #24]	@ (800ecb0 <_sbrk_r+0x1c>)
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	4608      	mov	r0, r1
 800ec9e:	602b      	str	r3, [r5, #0]
 800eca0:	f7f4 f82c 	bl	8002cfc <_sbrk>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_sbrk_r+0x1a>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_sbrk_r+0x1a>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	200014cc 	.word	0x200014cc

0800ecb4 <__errno>:
 800ecb4:	4b01      	ldr	r3, [pc, #4]	@ (800ecbc <__errno+0x8>)
 800ecb6:	6818      	ldr	r0, [r3, #0]
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	200001a4 	.word	0x200001a4

0800ecc0 <__libc_init_array>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	4d0d      	ldr	r5, [pc, #52]	@ (800ecf8 <__libc_init_array+0x38>)
 800ecc4:	4c0d      	ldr	r4, [pc, #52]	@ (800ecfc <__libc_init_array+0x3c>)
 800ecc6:	1b64      	subs	r4, r4, r5
 800ecc8:	10a4      	asrs	r4, r4, #2
 800ecca:	2600      	movs	r6, #0
 800eccc:	42a6      	cmp	r6, r4
 800ecce:	d109      	bne.n	800ece4 <__libc_init_array+0x24>
 800ecd0:	4d0b      	ldr	r5, [pc, #44]	@ (800ed00 <__libc_init_array+0x40>)
 800ecd2:	4c0c      	ldr	r4, [pc, #48]	@ (800ed04 <__libc_init_array+0x44>)
 800ecd4:	f002 fca8 	bl	8011628 <_init>
 800ecd8:	1b64      	subs	r4, r4, r5
 800ecda:	10a4      	asrs	r4, r4, #2
 800ecdc:	2600      	movs	r6, #0
 800ecde:	42a6      	cmp	r6, r4
 800ece0:	d105      	bne.n	800ecee <__libc_init_array+0x2e>
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ece8:	4798      	blx	r3
 800ecea:	3601      	adds	r6, #1
 800ecec:	e7ee      	b.n	800eccc <__libc_init_array+0xc>
 800ecee:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecf2:	4798      	blx	r3
 800ecf4:	3601      	adds	r6, #1
 800ecf6:	e7f2      	b.n	800ecde <__libc_init_array+0x1e>
 800ecf8:	08011b80 	.word	0x08011b80
 800ecfc:	08011b80 	.word	0x08011b80
 800ed00:	08011b80 	.word	0x08011b80
 800ed04:	08011b84 	.word	0x08011b84

0800ed08 <__retarget_lock_init_recursive>:
 800ed08:	4770      	bx	lr

0800ed0a <__retarget_lock_acquire_recursive>:
 800ed0a:	4770      	bx	lr

0800ed0c <__retarget_lock_release_recursive>:
 800ed0c:	4770      	bx	lr

0800ed0e <memcpy>:
 800ed0e:	440a      	add	r2, r1
 800ed10:	4291      	cmp	r1, r2
 800ed12:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ed16:	d100      	bne.n	800ed1a <memcpy+0xc>
 800ed18:	4770      	bx	lr
 800ed1a:	b510      	push	{r4, lr}
 800ed1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed24:	4291      	cmp	r1, r2
 800ed26:	d1f9      	bne.n	800ed1c <memcpy+0xe>
 800ed28:	bd10      	pop	{r4, pc}

0800ed2a <strcpy>:
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed30:	f803 2b01 	strb.w	r2, [r3], #1
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	d1f9      	bne.n	800ed2c <strcpy+0x2>
 800ed38:	4770      	bx	lr
 800ed3a:	0000      	movs	r0, r0
 800ed3c:	0000      	movs	r0, r0
	...

0800ed40 <nan>:
 800ed40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ed48 <nan+0x8>
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	00000000 	.word	0x00000000
 800ed4c:	7ff80000 	.word	0x7ff80000

0800ed50 <nanf>:
 800ed50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ed58 <nanf+0x8>
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	7fc00000 	.word	0x7fc00000

0800ed5c <__assert_func>:
 800ed5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed5e:	4614      	mov	r4, r2
 800ed60:	461a      	mov	r2, r3
 800ed62:	4b09      	ldr	r3, [pc, #36]	@ (800ed88 <__assert_func+0x2c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4605      	mov	r5, r0
 800ed68:	68d8      	ldr	r0, [r3, #12]
 800ed6a:	b954      	cbnz	r4, 800ed82 <__assert_func+0x26>
 800ed6c:	4b07      	ldr	r3, [pc, #28]	@ (800ed8c <__assert_func+0x30>)
 800ed6e:	461c      	mov	r4, r3
 800ed70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed74:	9100      	str	r1, [sp, #0]
 800ed76:	462b      	mov	r3, r5
 800ed78:	4905      	ldr	r1, [pc, #20]	@ (800ed90 <__assert_func+0x34>)
 800ed7a:	f002 f8e7 	bl	8010f4c <fiprintf>
 800ed7e:	f002 faab 	bl	80112d8 <abort>
 800ed82:	4b04      	ldr	r3, [pc, #16]	@ (800ed94 <__assert_func+0x38>)
 800ed84:	e7f4      	b.n	800ed70 <__assert_func+0x14>
 800ed86:	bf00      	nop
 800ed88:	200001a4 	.word	0x200001a4
 800ed8c:	08011924 	.word	0x08011924
 800ed90:	080118f6 	.word	0x080118f6
 800ed94:	080118e9 	.word	0x080118e9

0800ed98 <quorem>:
 800ed98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9c:	6903      	ldr	r3, [r0, #16]
 800ed9e:	690c      	ldr	r4, [r1, #16]
 800eda0:	42a3      	cmp	r3, r4
 800eda2:	4607      	mov	r7, r0
 800eda4:	db7e      	blt.n	800eea4 <quorem+0x10c>
 800eda6:	3c01      	subs	r4, #1
 800eda8:	f101 0814 	add.w	r8, r1, #20
 800edac:	00a3      	lsls	r3, r4, #2
 800edae:	f100 0514 	add.w	r5, r0, #20
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edb8:	9301      	str	r3, [sp, #4]
 800edba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800edbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edc2:	3301      	adds	r3, #1
 800edc4:	429a      	cmp	r2, r3
 800edc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800edca:	fbb2 f6f3 	udiv	r6, r2, r3
 800edce:	d32e      	bcc.n	800ee2e <quorem+0x96>
 800edd0:	f04f 0a00 	mov.w	sl, #0
 800edd4:	46c4      	mov	ip, r8
 800edd6:	46ae      	mov	lr, r5
 800edd8:	46d3      	mov	fp, sl
 800edda:	f85c 3b04 	ldr.w	r3, [ip], #4
 800edde:	b298      	uxth	r0, r3
 800ede0:	fb06 a000 	mla	r0, r6, r0, sl
 800ede4:	0c02      	lsrs	r2, r0, #16
 800ede6:	0c1b      	lsrs	r3, r3, #16
 800ede8:	fb06 2303 	mla	r3, r6, r3, r2
 800edec:	f8de 2000 	ldr.w	r2, [lr]
 800edf0:	b280      	uxth	r0, r0
 800edf2:	b292      	uxth	r2, r2
 800edf4:	1a12      	subs	r2, r2, r0
 800edf6:	445a      	add	r2, fp
 800edf8:	f8de 0000 	ldr.w	r0, [lr]
 800edfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ee06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ee0a:	b292      	uxth	r2, r2
 800ee0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ee10:	45e1      	cmp	r9, ip
 800ee12:	f84e 2b04 	str.w	r2, [lr], #4
 800ee16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ee1a:	d2de      	bcs.n	800edda <quorem+0x42>
 800ee1c:	9b00      	ldr	r3, [sp, #0]
 800ee1e:	58eb      	ldr	r3, [r5, r3]
 800ee20:	b92b      	cbnz	r3, 800ee2e <quorem+0x96>
 800ee22:	9b01      	ldr	r3, [sp, #4]
 800ee24:	3b04      	subs	r3, #4
 800ee26:	429d      	cmp	r5, r3
 800ee28:	461a      	mov	r2, r3
 800ee2a:	d32f      	bcc.n	800ee8c <quorem+0xf4>
 800ee2c:	613c      	str	r4, [r7, #16]
 800ee2e:	4638      	mov	r0, r7
 800ee30:	f001 fe5a 	bl	8010ae8 <__mcmp>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	db25      	blt.n	800ee84 <quorem+0xec>
 800ee38:	4629      	mov	r1, r5
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee40:	f8d1 c000 	ldr.w	ip, [r1]
 800ee44:	fa1f fe82 	uxth.w	lr, r2
 800ee48:	fa1f f38c 	uxth.w	r3, ip
 800ee4c:	eba3 030e 	sub.w	r3, r3, lr
 800ee50:	4403      	add	r3, r0
 800ee52:	0c12      	lsrs	r2, r2, #16
 800ee54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ee58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee62:	45c1      	cmp	r9, r8
 800ee64:	f841 3b04 	str.w	r3, [r1], #4
 800ee68:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ee6c:	d2e6      	bcs.n	800ee3c <quorem+0xa4>
 800ee6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee76:	b922      	cbnz	r2, 800ee82 <quorem+0xea>
 800ee78:	3b04      	subs	r3, #4
 800ee7a:	429d      	cmp	r5, r3
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	d30b      	bcc.n	800ee98 <quorem+0x100>
 800ee80:	613c      	str	r4, [r7, #16]
 800ee82:	3601      	adds	r6, #1
 800ee84:	4630      	mov	r0, r6
 800ee86:	b003      	add	sp, #12
 800ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8c:	6812      	ldr	r2, [r2, #0]
 800ee8e:	3b04      	subs	r3, #4
 800ee90:	2a00      	cmp	r2, #0
 800ee92:	d1cb      	bne.n	800ee2c <quorem+0x94>
 800ee94:	3c01      	subs	r4, #1
 800ee96:	e7c6      	b.n	800ee26 <quorem+0x8e>
 800ee98:	6812      	ldr	r2, [r2, #0]
 800ee9a:	3b04      	subs	r3, #4
 800ee9c:	2a00      	cmp	r2, #0
 800ee9e:	d1ef      	bne.n	800ee80 <quorem+0xe8>
 800eea0:	3c01      	subs	r4, #1
 800eea2:	e7ea      	b.n	800ee7a <quorem+0xe2>
 800eea4:	2000      	movs	r0, #0
 800eea6:	e7ee      	b.n	800ee86 <quorem+0xee>

0800eea8 <_dtoa_r>:
 800eea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeac:	69c7      	ldr	r7, [r0, #28]
 800eeae:	b099      	sub	sp, #100	@ 0x64
 800eeb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eeb4:	ec55 4b10 	vmov	r4, r5, d0
 800eeb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800eeba:	9109      	str	r1, [sp, #36]	@ 0x24
 800eebc:	4683      	mov	fp, r0
 800eebe:	920e      	str	r2, [sp, #56]	@ 0x38
 800eec0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eec2:	b97f      	cbnz	r7, 800eee4 <_dtoa_r+0x3c>
 800eec4:	2010      	movs	r0, #16
 800eec6:	f7fe fb09 	bl	800d4dc <malloc>
 800eeca:	4602      	mov	r2, r0
 800eecc:	f8cb 001c 	str.w	r0, [fp, #28]
 800eed0:	b920      	cbnz	r0, 800eedc <_dtoa_r+0x34>
 800eed2:	4ba7      	ldr	r3, [pc, #668]	@ (800f170 <_dtoa_r+0x2c8>)
 800eed4:	21ef      	movs	r1, #239	@ 0xef
 800eed6:	48a7      	ldr	r0, [pc, #668]	@ (800f174 <_dtoa_r+0x2cc>)
 800eed8:	f7ff ff40 	bl	800ed5c <__assert_func>
 800eedc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eee0:	6007      	str	r7, [r0, #0]
 800eee2:	60c7      	str	r7, [r0, #12]
 800eee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	b159      	cbz	r1, 800ef04 <_dtoa_r+0x5c>
 800eeec:	685a      	ldr	r2, [r3, #4]
 800eeee:	604a      	str	r2, [r1, #4]
 800eef0:	2301      	movs	r3, #1
 800eef2:	4093      	lsls	r3, r2
 800eef4:	608b      	str	r3, [r1, #8]
 800eef6:	4658      	mov	r0, fp
 800eef8:	f001 fb72 	bl	80105e0 <_Bfree>
 800eefc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ef00:	2200      	movs	r2, #0
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	1e2b      	subs	r3, r5, #0
 800ef06:	bfb9      	ittee	lt
 800ef08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ef0c:	9303      	strlt	r3, [sp, #12]
 800ef0e:	2300      	movge	r3, #0
 800ef10:	6033      	strge	r3, [r6, #0]
 800ef12:	9f03      	ldr	r7, [sp, #12]
 800ef14:	4b98      	ldr	r3, [pc, #608]	@ (800f178 <_dtoa_r+0x2d0>)
 800ef16:	bfbc      	itt	lt
 800ef18:	2201      	movlt	r2, #1
 800ef1a:	6032      	strlt	r2, [r6, #0]
 800ef1c:	43bb      	bics	r3, r7
 800ef1e:	d112      	bne.n	800ef46 <_dtoa_r+0x9e>
 800ef20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ef22:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ef2c:	4323      	orrs	r3, r4
 800ef2e:	f000 854d 	beq.w	800f9cc <_dtoa_r+0xb24>
 800ef32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f18c <_dtoa_r+0x2e4>
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 854f 	beq.w	800f9dc <_dtoa_r+0xb34>
 800ef3e:	f10a 0303 	add.w	r3, sl, #3
 800ef42:	f000 bd49 	b.w	800f9d8 <_dtoa_r+0xb30>
 800ef46:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	ec51 0b17 	vmov	r0, r1, d7
 800ef50:	2300      	movs	r3, #0
 800ef52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ef56:	f7f1 fddf 	bl	8000b18 <__aeabi_dcmpeq>
 800ef5a:	4680      	mov	r8, r0
 800ef5c:	b158      	cbz	r0, 800ef76 <_dtoa_r+0xce>
 800ef5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ef60:	2301      	movs	r3, #1
 800ef62:	6013      	str	r3, [r2, #0]
 800ef64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef66:	b113      	cbz	r3, 800ef6e <_dtoa_r+0xc6>
 800ef68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ef6a:	4b84      	ldr	r3, [pc, #528]	@ (800f17c <_dtoa_r+0x2d4>)
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f190 <_dtoa_r+0x2e8>
 800ef72:	f000 bd33 	b.w	800f9dc <_dtoa_r+0xb34>
 800ef76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ef7a:	aa16      	add	r2, sp, #88	@ 0x58
 800ef7c:	a917      	add	r1, sp, #92	@ 0x5c
 800ef7e:	4658      	mov	r0, fp
 800ef80:	f001 fed2 	bl	8010d28 <__d2b>
 800ef84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ef88:	4681      	mov	r9, r0
 800ef8a:	2e00      	cmp	r6, #0
 800ef8c:	d077      	beq.n	800f07e <_dtoa_r+0x1d6>
 800ef8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ef94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800efa0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800efa4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800efa8:	4619      	mov	r1, r3
 800efaa:	2200      	movs	r2, #0
 800efac:	4b74      	ldr	r3, [pc, #464]	@ (800f180 <_dtoa_r+0x2d8>)
 800efae:	f7f1 f993 	bl	80002d8 <__aeabi_dsub>
 800efb2:	a369      	add	r3, pc, #420	@ (adr r3, 800f158 <_dtoa_r+0x2b0>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	f7f1 fb46 	bl	8000648 <__aeabi_dmul>
 800efbc:	a368      	add	r3, pc, #416	@ (adr r3, 800f160 <_dtoa_r+0x2b8>)
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	f7f1 f98b 	bl	80002dc <__adddf3>
 800efc6:	4604      	mov	r4, r0
 800efc8:	4630      	mov	r0, r6
 800efca:	460d      	mov	r5, r1
 800efcc:	f7f1 fad2 	bl	8000574 <__aeabi_i2d>
 800efd0:	a365      	add	r3, pc, #404	@ (adr r3, 800f168 <_dtoa_r+0x2c0>)
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	f7f1 fb37 	bl	8000648 <__aeabi_dmul>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	4620      	mov	r0, r4
 800efe0:	4629      	mov	r1, r5
 800efe2:	f7f1 f97b 	bl	80002dc <__adddf3>
 800efe6:	4604      	mov	r4, r0
 800efe8:	460d      	mov	r5, r1
 800efea:	f7f1 fddd 	bl	8000ba8 <__aeabi_d2iz>
 800efee:	2200      	movs	r2, #0
 800eff0:	4607      	mov	r7, r0
 800eff2:	2300      	movs	r3, #0
 800eff4:	4620      	mov	r0, r4
 800eff6:	4629      	mov	r1, r5
 800eff8:	f7f1 fd98 	bl	8000b2c <__aeabi_dcmplt>
 800effc:	b140      	cbz	r0, 800f010 <_dtoa_r+0x168>
 800effe:	4638      	mov	r0, r7
 800f000:	f7f1 fab8 	bl	8000574 <__aeabi_i2d>
 800f004:	4622      	mov	r2, r4
 800f006:	462b      	mov	r3, r5
 800f008:	f7f1 fd86 	bl	8000b18 <__aeabi_dcmpeq>
 800f00c:	b900      	cbnz	r0, 800f010 <_dtoa_r+0x168>
 800f00e:	3f01      	subs	r7, #1
 800f010:	2f16      	cmp	r7, #22
 800f012:	d851      	bhi.n	800f0b8 <_dtoa_r+0x210>
 800f014:	4b5b      	ldr	r3, [pc, #364]	@ (800f184 <_dtoa_r+0x2dc>)
 800f016:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f022:	f7f1 fd83 	bl	8000b2c <__aeabi_dcmplt>
 800f026:	2800      	cmp	r0, #0
 800f028:	d048      	beq.n	800f0bc <_dtoa_r+0x214>
 800f02a:	3f01      	subs	r7, #1
 800f02c:	2300      	movs	r3, #0
 800f02e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f030:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f032:	1b9b      	subs	r3, r3, r6
 800f034:	1e5a      	subs	r2, r3, #1
 800f036:	bf44      	itt	mi
 800f038:	f1c3 0801 	rsbmi	r8, r3, #1
 800f03c:	2300      	movmi	r3, #0
 800f03e:	9208      	str	r2, [sp, #32]
 800f040:	bf54      	ite	pl
 800f042:	f04f 0800 	movpl.w	r8, #0
 800f046:	9308      	strmi	r3, [sp, #32]
 800f048:	2f00      	cmp	r7, #0
 800f04a:	db39      	blt.n	800f0c0 <_dtoa_r+0x218>
 800f04c:	9b08      	ldr	r3, [sp, #32]
 800f04e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f050:	443b      	add	r3, r7
 800f052:	9308      	str	r3, [sp, #32]
 800f054:	2300      	movs	r3, #0
 800f056:	930a      	str	r3, [sp, #40]	@ 0x28
 800f058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f05a:	2b09      	cmp	r3, #9
 800f05c:	d864      	bhi.n	800f128 <_dtoa_r+0x280>
 800f05e:	2b05      	cmp	r3, #5
 800f060:	bfc4      	itt	gt
 800f062:	3b04      	subgt	r3, #4
 800f064:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f068:	f1a3 0302 	sub.w	r3, r3, #2
 800f06c:	bfcc      	ite	gt
 800f06e:	2400      	movgt	r4, #0
 800f070:	2401      	movle	r4, #1
 800f072:	2b03      	cmp	r3, #3
 800f074:	d863      	bhi.n	800f13e <_dtoa_r+0x296>
 800f076:	e8df f003 	tbb	[pc, r3]
 800f07a:	372a      	.short	0x372a
 800f07c:	5535      	.short	0x5535
 800f07e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f082:	441e      	add	r6, r3
 800f084:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f088:	2b20      	cmp	r3, #32
 800f08a:	bfc1      	itttt	gt
 800f08c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f090:	409f      	lslgt	r7, r3
 800f092:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f096:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f09a:	bfd6      	itet	le
 800f09c:	f1c3 0320 	rsble	r3, r3, #32
 800f0a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f0a4:	fa04 f003 	lslle.w	r0, r4, r3
 800f0a8:	f7f1 fa54 	bl	8000554 <__aeabi_ui2d>
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f0b2:	3e01      	subs	r6, #1
 800f0b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f0b6:	e777      	b.n	800efa8 <_dtoa_r+0x100>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e7b8      	b.n	800f02e <_dtoa_r+0x186>
 800f0bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800f0be:	e7b7      	b.n	800f030 <_dtoa_r+0x188>
 800f0c0:	427b      	negs	r3, r7
 800f0c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	eba8 0807 	sub.w	r8, r8, r7
 800f0ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0cc:	e7c4      	b.n	800f058 <_dtoa_r+0x1b0>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dc35      	bgt.n	800f144 <_dtoa_r+0x29c>
 800f0d8:	2301      	movs	r3, #1
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	9307      	str	r3, [sp, #28]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f0e2:	e00b      	b.n	800f0fc <_dtoa_r+0x254>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e7f3      	b.n	800f0d0 <_dtoa_r+0x228>
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0ee:	18fb      	adds	r3, r7, r3
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	9307      	str	r3, [sp, #28]
 800f0f8:	bfb8      	it	lt
 800f0fa:	2301      	movlt	r3, #1
 800f0fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f100:	2100      	movs	r1, #0
 800f102:	2204      	movs	r2, #4
 800f104:	f102 0514 	add.w	r5, r2, #20
 800f108:	429d      	cmp	r5, r3
 800f10a:	d91f      	bls.n	800f14c <_dtoa_r+0x2a4>
 800f10c:	6041      	str	r1, [r0, #4]
 800f10e:	4658      	mov	r0, fp
 800f110:	f001 fa26 	bl	8010560 <_Balloc>
 800f114:	4682      	mov	sl, r0
 800f116:	2800      	cmp	r0, #0
 800f118:	d13c      	bne.n	800f194 <_dtoa_r+0x2ec>
 800f11a:	4b1b      	ldr	r3, [pc, #108]	@ (800f188 <_dtoa_r+0x2e0>)
 800f11c:	4602      	mov	r2, r0
 800f11e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f122:	e6d8      	b.n	800eed6 <_dtoa_r+0x2e>
 800f124:	2301      	movs	r3, #1
 800f126:	e7e0      	b.n	800f0ea <_dtoa_r+0x242>
 800f128:	2401      	movs	r4, #1
 800f12a:	2300      	movs	r3, #0
 800f12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f12e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f134:	9300      	str	r3, [sp, #0]
 800f136:	9307      	str	r3, [sp, #28]
 800f138:	2200      	movs	r2, #0
 800f13a:	2312      	movs	r3, #18
 800f13c:	e7d0      	b.n	800f0e0 <_dtoa_r+0x238>
 800f13e:	2301      	movs	r3, #1
 800f140:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f142:	e7f5      	b.n	800f130 <_dtoa_r+0x288>
 800f144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	9307      	str	r3, [sp, #28]
 800f14a:	e7d7      	b.n	800f0fc <_dtoa_r+0x254>
 800f14c:	3101      	adds	r1, #1
 800f14e:	0052      	lsls	r2, r2, #1
 800f150:	e7d8      	b.n	800f104 <_dtoa_r+0x25c>
 800f152:	bf00      	nop
 800f154:	f3af 8000 	nop.w
 800f158:	636f4361 	.word	0x636f4361
 800f15c:	3fd287a7 	.word	0x3fd287a7
 800f160:	8b60c8b3 	.word	0x8b60c8b3
 800f164:	3fc68a28 	.word	0x3fc68a28
 800f168:	509f79fb 	.word	0x509f79fb
 800f16c:	3fd34413 	.word	0x3fd34413
 800f170:	08011932 	.word	0x08011932
 800f174:	08011949 	.word	0x08011949
 800f178:	7ff00000 	.word	0x7ff00000
 800f17c:	08011761 	.word	0x08011761
 800f180:	3ff80000 	.word	0x3ff80000
 800f184:	08011ab0 	.word	0x08011ab0
 800f188:	080119a1 	.word	0x080119a1
 800f18c:	0801192e 	.word	0x0801192e
 800f190:	08011760 	.word	0x08011760
 800f194:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f198:	6018      	str	r0, [r3, #0]
 800f19a:	9b07      	ldr	r3, [sp, #28]
 800f19c:	2b0e      	cmp	r3, #14
 800f19e:	f200 80a4 	bhi.w	800f2ea <_dtoa_r+0x442>
 800f1a2:	2c00      	cmp	r4, #0
 800f1a4:	f000 80a1 	beq.w	800f2ea <_dtoa_r+0x442>
 800f1a8:	2f00      	cmp	r7, #0
 800f1aa:	dd33      	ble.n	800f214 <_dtoa_r+0x36c>
 800f1ac:	4bad      	ldr	r3, [pc, #692]	@ (800f464 <_dtoa_r+0x5bc>)
 800f1ae:	f007 020f 	and.w	r2, r7, #15
 800f1b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1b6:	ed93 7b00 	vldr	d7, [r3]
 800f1ba:	05f8      	lsls	r0, r7, #23
 800f1bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f1c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f1c4:	d516      	bpl.n	800f1f4 <_dtoa_r+0x34c>
 800f1c6:	4ba8      	ldr	r3, [pc, #672]	@ (800f468 <_dtoa_r+0x5c0>)
 800f1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f1d0:	f7f1 fb64 	bl	800089c <__aeabi_ddiv>
 800f1d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1d8:	f004 040f 	and.w	r4, r4, #15
 800f1dc:	2603      	movs	r6, #3
 800f1de:	4da2      	ldr	r5, [pc, #648]	@ (800f468 <_dtoa_r+0x5c0>)
 800f1e0:	b954      	cbnz	r4, 800f1f8 <_dtoa_r+0x350>
 800f1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1ea:	f7f1 fb57 	bl	800089c <__aeabi_ddiv>
 800f1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1f2:	e028      	b.n	800f246 <_dtoa_r+0x39e>
 800f1f4:	2602      	movs	r6, #2
 800f1f6:	e7f2      	b.n	800f1de <_dtoa_r+0x336>
 800f1f8:	07e1      	lsls	r1, r4, #31
 800f1fa:	d508      	bpl.n	800f20e <_dtoa_r+0x366>
 800f1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f200:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f204:	f7f1 fa20 	bl	8000648 <__aeabi_dmul>
 800f208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f20c:	3601      	adds	r6, #1
 800f20e:	1064      	asrs	r4, r4, #1
 800f210:	3508      	adds	r5, #8
 800f212:	e7e5      	b.n	800f1e0 <_dtoa_r+0x338>
 800f214:	f000 80d2 	beq.w	800f3bc <_dtoa_r+0x514>
 800f218:	427c      	negs	r4, r7
 800f21a:	4b92      	ldr	r3, [pc, #584]	@ (800f464 <_dtoa_r+0x5bc>)
 800f21c:	4d92      	ldr	r5, [pc, #584]	@ (800f468 <_dtoa_r+0x5c0>)
 800f21e:	f004 020f 	and.w	r2, r4, #15
 800f222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f22e:	f7f1 fa0b 	bl	8000648 <__aeabi_dmul>
 800f232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f236:	1124      	asrs	r4, r4, #4
 800f238:	2300      	movs	r3, #0
 800f23a:	2602      	movs	r6, #2
 800f23c:	2c00      	cmp	r4, #0
 800f23e:	f040 80b2 	bne.w	800f3a6 <_dtoa_r+0x4fe>
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1d3      	bne.n	800f1ee <_dtoa_r+0x346>
 800f246:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f248:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 80b7 	beq.w	800f3c0 <_dtoa_r+0x518>
 800f252:	4b86      	ldr	r3, [pc, #536]	@ (800f46c <_dtoa_r+0x5c4>)
 800f254:	2200      	movs	r2, #0
 800f256:	4620      	mov	r0, r4
 800f258:	4629      	mov	r1, r5
 800f25a:	f7f1 fc67 	bl	8000b2c <__aeabi_dcmplt>
 800f25e:	2800      	cmp	r0, #0
 800f260:	f000 80ae 	beq.w	800f3c0 <_dtoa_r+0x518>
 800f264:	9b07      	ldr	r3, [sp, #28]
 800f266:	2b00      	cmp	r3, #0
 800f268:	f000 80aa 	beq.w	800f3c0 <_dtoa_r+0x518>
 800f26c:	9b00      	ldr	r3, [sp, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	dd37      	ble.n	800f2e2 <_dtoa_r+0x43a>
 800f272:	1e7b      	subs	r3, r7, #1
 800f274:	9304      	str	r3, [sp, #16]
 800f276:	4620      	mov	r0, r4
 800f278:	4b7d      	ldr	r3, [pc, #500]	@ (800f470 <_dtoa_r+0x5c8>)
 800f27a:	2200      	movs	r2, #0
 800f27c:	4629      	mov	r1, r5
 800f27e:	f7f1 f9e3 	bl	8000648 <__aeabi_dmul>
 800f282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f286:	9c00      	ldr	r4, [sp, #0]
 800f288:	3601      	adds	r6, #1
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7f1 f972 	bl	8000574 <__aeabi_i2d>
 800f290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f294:	f7f1 f9d8 	bl	8000648 <__aeabi_dmul>
 800f298:	4b76      	ldr	r3, [pc, #472]	@ (800f474 <_dtoa_r+0x5cc>)
 800f29a:	2200      	movs	r2, #0
 800f29c:	f7f1 f81e 	bl	80002dc <__adddf3>
 800f2a0:	4605      	mov	r5, r0
 800f2a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f2a6:	2c00      	cmp	r4, #0
 800f2a8:	f040 808d 	bne.w	800f3c6 <_dtoa_r+0x51e>
 800f2ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2b0:	4b71      	ldr	r3, [pc, #452]	@ (800f478 <_dtoa_r+0x5d0>)
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f7f1 f810 	bl	80002d8 <__aeabi_dsub>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2c0:	462a      	mov	r2, r5
 800f2c2:	4633      	mov	r3, r6
 800f2c4:	f7f1 fc50 	bl	8000b68 <__aeabi_dcmpgt>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	f040 828b 	bne.w	800f7e4 <_dtoa_r+0x93c>
 800f2ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2d2:	462a      	mov	r2, r5
 800f2d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f2d8:	f7f1 fc28 	bl	8000b2c <__aeabi_dcmplt>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	f040 8128 	bne.w	800f532 <_dtoa_r+0x68a>
 800f2e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f2e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f2ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f2c0 815a 	blt.w	800f5a6 <_dtoa_r+0x6fe>
 800f2f2:	2f0e      	cmp	r7, #14
 800f2f4:	f300 8157 	bgt.w	800f5a6 <_dtoa_r+0x6fe>
 800f2f8:	4b5a      	ldr	r3, [pc, #360]	@ (800f464 <_dtoa_r+0x5bc>)
 800f2fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f2fe:	ed93 7b00 	vldr	d7, [r3]
 800f302:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f304:	2b00      	cmp	r3, #0
 800f306:	ed8d 7b00 	vstr	d7, [sp]
 800f30a:	da03      	bge.n	800f314 <_dtoa_r+0x46c>
 800f30c:	9b07      	ldr	r3, [sp, #28]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f340 8101 	ble.w	800f516 <_dtoa_r+0x66e>
 800f314:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f318:	4656      	mov	r6, sl
 800f31a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f31e:	4620      	mov	r0, r4
 800f320:	4629      	mov	r1, r5
 800f322:	f7f1 fabb 	bl	800089c <__aeabi_ddiv>
 800f326:	f7f1 fc3f 	bl	8000ba8 <__aeabi_d2iz>
 800f32a:	4680      	mov	r8, r0
 800f32c:	f7f1 f922 	bl	8000574 <__aeabi_i2d>
 800f330:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f334:	f7f1 f988 	bl	8000648 <__aeabi_dmul>
 800f338:	4602      	mov	r2, r0
 800f33a:	460b      	mov	r3, r1
 800f33c:	4620      	mov	r0, r4
 800f33e:	4629      	mov	r1, r5
 800f340:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f344:	f7f0 ffc8 	bl	80002d8 <__aeabi_dsub>
 800f348:	f806 4b01 	strb.w	r4, [r6], #1
 800f34c:	9d07      	ldr	r5, [sp, #28]
 800f34e:	eba6 040a 	sub.w	r4, r6, sl
 800f352:	42a5      	cmp	r5, r4
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	f040 8117 	bne.w	800f58a <_dtoa_r+0x6e2>
 800f35c:	f7f0 ffbe 	bl	80002dc <__adddf3>
 800f360:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f364:	4604      	mov	r4, r0
 800f366:	460d      	mov	r5, r1
 800f368:	f7f1 fbfe 	bl	8000b68 <__aeabi_dcmpgt>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	f040 80f9 	bne.w	800f564 <_dtoa_r+0x6bc>
 800f372:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f376:	4620      	mov	r0, r4
 800f378:	4629      	mov	r1, r5
 800f37a:	f7f1 fbcd 	bl	8000b18 <__aeabi_dcmpeq>
 800f37e:	b118      	cbz	r0, 800f388 <_dtoa_r+0x4e0>
 800f380:	f018 0f01 	tst.w	r8, #1
 800f384:	f040 80ee 	bne.w	800f564 <_dtoa_r+0x6bc>
 800f388:	4649      	mov	r1, r9
 800f38a:	4658      	mov	r0, fp
 800f38c:	f001 f928 	bl	80105e0 <_Bfree>
 800f390:	2300      	movs	r3, #0
 800f392:	7033      	strb	r3, [r6, #0]
 800f394:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f396:	3701      	adds	r7, #1
 800f398:	601f      	str	r7, [r3, #0]
 800f39a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 831d 	beq.w	800f9dc <_dtoa_r+0xb34>
 800f3a2:	601e      	str	r6, [r3, #0]
 800f3a4:	e31a      	b.n	800f9dc <_dtoa_r+0xb34>
 800f3a6:	07e2      	lsls	r2, r4, #31
 800f3a8:	d505      	bpl.n	800f3b6 <_dtoa_r+0x50e>
 800f3aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3ae:	f7f1 f94b 	bl	8000648 <__aeabi_dmul>
 800f3b2:	3601      	adds	r6, #1
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	1064      	asrs	r4, r4, #1
 800f3b8:	3508      	adds	r5, #8
 800f3ba:	e73f      	b.n	800f23c <_dtoa_r+0x394>
 800f3bc:	2602      	movs	r6, #2
 800f3be:	e742      	b.n	800f246 <_dtoa_r+0x39e>
 800f3c0:	9c07      	ldr	r4, [sp, #28]
 800f3c2:	9704      	str	r7, [sp, #16]
 800f3c4:	e761      	b.n	800f28a <_dtoa_r+0x3e2>
 800f3c6:	4b27      	ldr	r3, [pc, #156]	@ (800f464 <_dtoa_r+0x5bc>)
 800f3c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f3ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f3d2:	4454      	add	r4, sl
 800f3d4:	2900      	cmp	r1, #0
 800f3d6:	d053      	beq.n	800f480 <_dtoa_r+0x5d8>
 800f3d8:	4928      	ldr	r1, [pc, #160]	@ (800f47c <_dtoa_r+0x5d4>)
 800f3da:	2000      	movs	r0, #0
 800f3dc:	f7f1 fa5e 	bl	800089c <__aeabi_ddiv>
 800f3e0:	4633      	mov	r3, r6
 800f3e2:	462a      	mov	r2, r5
 800f3e4:	f7f0 ff78 	bl	80002d8 <__aeabi_dsub>
 800f3e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3ec:	4656      	mov	r6, sl
 800f3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3f2:	f7f1 fbd9 	bl	8000ba8 <__aeabi_d2iz>
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	f7f1 f8bc 	bl	8000574 <__aeabi_i2d>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	460b      	mov	r3, r1
 800f400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f404:	f7f0 ff68 	bl	80002d8 <__aeabi_dsub>
 800f408:	3530      	adds	r5, #48	@ 0x30
 800f40a:	4602      	mov	r2, r0
 800f40c:	460b      	mov	r3, r1
 800f40e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f412:	f806 5b01 	strb.w	r5, [r6], #1
 800f416:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f41a:	f7f1 fb87 	bl	8000b2c <__aeabi_dcmplt>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d171      	bne.n	800f506 <_dtoa_r+0x65e>
 800f422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f426:	4911      	ldr	r1, [pc, #68]	@ (800f46c <_dtoa_r+0x5c4>)
 800f428:	2000      	movs	r0, #0
 800f42a:	f7f0 ff55 	bl	80002d8 <__aeabi_dsub>
 800f42e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f432:	f7f1 fb7b 	bl	8000b2c <__aeabi_dcmplt>
 800f436:	2800      	cmp	r0, #0
 800f438:	f040 8095 	bne.w	800f566 <_dtoa_r+0x6be>
 800f43c:	42a6      	cmp	r6, r4
 800f43e:	f43f af50 	beq.w	800f2e2 <_dtoa_r+0x43a>
 800f442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f446:	4b0a      	ldr	r3, [pc, #40]	@ (800f470 <_dtoa_r+0x5c8>)
 800f448:	2200      	movs	r2, #0
 800f44a:	f7f1 f8fd 	bl	8000648 <__aeabi_dmul>
 800f44e:	4b08      	ldr	r3, [pc, #32]	@ (800f470 <_dtoa_r+0x5c8>)
 800f450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f454:	2200      	movs	r2, #0
 800f456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f45a:	f7f1 f8f5 	bl	8000648 <__aeabi_dmul>
 800f45e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f462:	e7c4      	b.n	800f3ee <_dtoa_r+0x546>
 800f464:	08011ab0 	.word	0x08011ab0
 800f468:	08011a88 	.word	0x08011a88
 800f46c:	3ff00000 	.word	0x3ff00000
 800f470:	40240000 	.word	0x40240000
 800f474:	401c0000 	.word	0x401c0000
 800f478:	40140000 	.word	0x40140000
 800f47c:	3fe00000 	.word	0x3fe00000
 800f480:	4631      	mov	r1, r6
 800f482:	4628      	mov	r0, r5
 800f484:	f7f1 f8e0 	bl	8000648 <__aeabi_dmul>
 800f488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f48c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f48e:	4656      	mov	r6, sl
 800f490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f494:	f7f1 fb88 	bl	8000ba8 <__aeabi_d2iz>
 800f498:	4605      	mov	r5, r0
 800f49a:	f7f1 f86b 	bl	8000574 <__aeabi_i2d>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4a6:	f7f0 ff17 	bl	80002d8 <__aeabi_dsub>
 800f4aa:	3530      	adds	r5, #48	@ 0x30
 800f4ac:	f806 5b01 	strb.w	r5, [r6], #1
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	42a6      	cmp	r6, r4
 800f4b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4ba:	f04f 0200 	mov.w	r2, #0
 800f4be:	d124      	bne.n	800f50a <_dtoa_r+0x662>
 800f4c0:	4bac      	ldr	r3, [pc, #688]	@ (800f774 <_dtoa_r+0x8cc>)
 800f4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f4c6:	f7f0 ff09 	bl	80002dc <__adddf3>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4d2:	f7f1 fb49 	bl	8000b68 <__aeabi_dcmpgt>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	d145      	bne.n	800f566 <_dtoa_r+0x6be>
 800f4da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4de:	49a5      	ldr	r1, [pc, #660]	@ (800f774 <_dtoa_r+0x8cc>)
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	f7f0 fef9 	bl	80002d8 <__aeabi_dsub>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4ee:	f7f1 fb1d 	bl	8000b2c <__aeabi_dcmplt>
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	f43f aef5 	beq.w	800f2e2 <_dtoa_r+0x43a>
 800f4f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f4fa:	1e73      	subs	r3, r6, #1
 800f4fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f4fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f502:	2b30      	cmp	r3, #48	@ 0x30
 800f504:	d0f8      	beq.n	800f4f8 <_dtoa_r+0x650>
 800f506:	9f04      	ldr	r7, [sp, #16]
 800f508:	e73e      	b.n	800f388 <_dtoa_r+0x4e0>
 800f50a:	4b9b      	ldr	r3, [pc, #620]	@ (800f778 <_dtoa_r+0x8d0>)
 800f50c:	f7f1 f89c 	bl	8000648 <__aeabi_dmul>
 800f510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f514:	e7bc      	b.n	800f490 <_dtoa_r+0x5e8>
 800f516:	d10c      	bne.n	800f532 <_dtoa_r+0x68a>
 800f518:	4b98      	ldr	r3, [pc, #608]	@ (800f77c <_dtoa_r+0x8d4>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f520:	f7f1 f892 	bl	8000648 <__aeabi_dmul>
 800f524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f528:	f7f1 fb14 	bl	8000b54 <__aeabi_dcmpge>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	f000 8157 	beq.w	800f7e0 <_dtoa_r+0x938>
 800f532:	2400      	movs	r4, #0
 800f534:	4625      	mov	r5, r4
 800f536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f538:	43db      	mvns	r3, r3
 800f53a:	9304      	str	r3, [sp, #16]
 800f53c:	4656      	mov	r6, sl
 800f53e:	2700      	movs	r7, #0
 800f540:	4621      	mov	r1, r4
 800f542:	4658      	mov	r0, fp
 800f544:	f001 f84c 	bl	80105e0 <_Bfree>
 800f548:	2d00      	cmp	r5, #0
 800f54a:	d0dc      	beq.n	800f506 <_dtoa_r+0x65e>
 800f54c:	b12f      	cbz	r7, 800f55a <_dtoa_r+0x6b2>
 800f54e:	42af      	cmp	r7, r5
 800f550:	d003      	beq.n	800f55a <_dtoa_r+0x6b2>
 800f552:	4639      	mov	r1, r7
 800f554:	4658      	mov	r0, fp
 800f556:	f001 f843 	bl	80105e0 <_Bfree>
 800f55a:	4629      	mov	r1, r5
 800f55c:	4658      	mov	r0, fp
 800f55e:	f001 f83f 	bl	80105e0 <_Bfree>
 800f562:	e7d0      	b.n	800f506 <_dtoa_r+0x65e>
 800f564:	9704      	str	r7, [sp, #16]
 800f566:	4633      	mov	r3, r6
 800f568:	461e      	mov	r6, r3
 800f56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f56e:	2a39      	cmp	r2, #57	@ 0x39
 800f570:	d107      	bne.n	800f582 <_dtoa_r+0x6da>
 800f572:	459a      	cmp	sl, r3
 800f574:	d1f8      	bne.n	800f568 <_dtoa_r+0x6c0>
 800f576:	9a04      	ldr	r2, [sp, #16]
 800f578:	3201      	adds	r2, #1
 800f57a:	9204      	str	r2, [sp, #16]
 800f57c:	2230      	movs	r2, #48	@ 0x30
 800f57e:	f88a 2000 	strb.w	r2, [sl]
 800f582:	781a      	ldrb	r2, [r3, #0]
 800f584:	3201      	adds	r2, #1
 800f586:	701a      	strb	r2, [r3, #0]
 800f588:	e7bd      	b.n	800f506 <_dtoa_r+0x65e>
 800f58a:	4b7b      	ldr	r3, [pc, #492]	@ (800f778 <_dtoa_r+0x8d0>)
 800f58c:	2200      	movs	r2, #0
 800f58e:	f7f1 f85b 	bl	8000648 <__aeabi_dmul>
 800f592:	2200      	movs	r2, #0
 800f594:	2300      	movs	r3, #0
 800f596:	4604      	mov	r4, r0
 800f598:	460d      	mov	r5, r1
 800f59a:	f7f1 fabd 	bl	8000b18 <__aeabi_dcmpeq>
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	f43f aebb 	beq.w	800f31a <_dtoa_r+0x472>
 800f5a4:	e6f0      	b.n	800f388 <_dtoa_r+0x4e0>
 800f5a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f5a8:	2a00      	cmp	r2, #0
 800f5aa:	f000 80db 	beq.w	800f764 <_dtoa_r+0x8bc>
 800f5ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5b0:	2a01      	cmp	r2, #1
 800f5b2:	f300 80bf 	bgt.w	800f734 <_dtoa_r+0x88c>
 800f5b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f5b8:	2a00      	cmp	r2, #0
 800f5ba:	f000 80b7 	beq.w	800f72c <_dtoa_r+0x884>
 800f5be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f5c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f5c4:	4646      	mov	r6, r8
 800f5c6:	9a08      	ldr	r2, [sp, #32]
 800f5c8:	2101      	movs	r1, #1
 800f5ca:	441a      	add	r2, r3
 800f5cc:	4658      	mov	r0, fp
 800f5ce:	4498      	add	r8, r3
 800f5d0:	9208      	str	r2, [sp, #32]
 800f5d2:	f001 f903 	bl	80107dc <__i2b>
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	b15e      	cbz	r6, 800f5f2 <_dtoa_r+0x74a>
 800f5da:	9b08      	ldr	r3, [sp, #32]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dd08      	ble.n	800f5f2 <_dtoa_r+0x74a>
 800f5e0:	42b3      	cmp	r3, r6
 800f5e2:	9a08      	ldr	r2, [sp, #32]
 800f5e4:	bfa8      	it	ge
 800f5e6:	4633      	movge	r3, r6
 800f5e8:	eba8 0803 	sub.w	r8, r8, r3
 800f5ec:	1af6      	subs	r6, r6, r3
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	9308      	str	r3, [sp, #32]
 800f5f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5f4:	b1f3      	cbz	r3, 800f634 <_dtoa_r+0x78c>
 800f5f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f000 80b7 	beq.w	800f76c <_dtoa_r+0x8c4>
 800f5fe:	b18c      	cbz	r4, 800f624 <_dtoa_r+0x77c>
 800f600:	4629      	mov	r1, r5
 800f602:	4622      	mov	r2, r4
 800f604:	4658      	mov	r0, fp
 800f606:	f001 f9a9 	bl	801095c <__pow5mult>
 800f60a:	464a      	mov	r2, r9
 800f60c:	4601      	mov	r1, r0
 800f60e:	4605      	mov	r5, r0
 800f610:	4658      	mov	r0, fp
 800f612:	f001 f8f9 	bl	8010808 <__multiply>
 800f616:	4649      	mov	r1, r9
 800f618:	9004      	str	r0, [sp, #16]
 800f61a:	4658      	mov	r0, fp
 800f61c:	f000 ffe0 	bl	80105e0 <_Bfree>
 800f620:	9b04      	ldr	r3, [sp, #16]
 800f622:	4699      	mov	r9, r3
 800f624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f626:	1b1a      	subs	r2, r3, r4
 800f628:	d004      	beq.n	800f634 <_dtoa_r+0x78c>
 800f62a:	4649      	mov	r1, r9
 800f62c:	4658      	mov	r0, fp
 800f62e:	f001 f995 	bl	801095c <__pow5mult>
 800f632:	4681      	mov	r9, r0
 800f634:	2101      	movs	r1, #1
 800f636:	4658      	mov	r0, fp
 800f638:	f001 f8d0 	bl	80107dc <__i2b>
 800f63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f63e:	4604      	mov	r4, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 81cf 	beq.w	800f9e4 <_dtoa_r+0xb3c>
 800f646:	461a      	mov	r2, r3
 800f648:	4601      	mov	r1, r0
 800f64a:	4658      	mov	r0, fp
 800f64c:	f001 f986 	bl	801095c <__pow5mult>
 800f650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f652:	2b01      	cmp	r3, #1
 800f654:	4604      	mov	r4, r0
 800f656:	f300 8095 	bgt.w	800f784 <_dtoa_r+0x8dc>
 800f65a:	9b02      	ldr	r3, [sp, #8]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f040 8087 	bne.w	800f770 <_dtoa_r+0x8c8>
 800f662:	9b03      	ldr	r3, [sp, #12]
 800f664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f040 8089 	bne.w	800f780 <_dtoa_r+0x8d8>
 800f66e:	9b03      	ldr	r3, [sp, #12]
 800f670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f674:	0d1b      	lsrs	r3, r3, #20
 800f676:	051b      	lsls	r3, r3, #20
 800f678:	b12b      	cbz	r3, 800f686 <_dtoa_r+0x7de>
 800f67a:	9b08      	ldr	r3, [sp, #32]
 800f67c:	3301      	adds	r3, #1
 800f67e:	9308      	str	r3, [sp, #32]
 800f680:	f108 0801 	add.w	r8, r8, #1
 800f684:	2301      	movs	r3, #1
 800f686:	930a      	str	r3, [sp, #40]	@ 0x28
 800f688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 81b0 	beq.w	800f9f0 <_dtoa_r+0xb48>
 800f690:	6923      	ldr	r3, [r4, #16]
 800f692:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f696:	6918      	ldr	r0, [r3, #16]
 800f698:	f001 f854 	bl	8010744 <__hi0bits>
 800f69c:	f1c0 0020 	rsb	r0, r0, #32
 800f6a0:	9b08      	ldr	r3, [sp, #32]
 800f6a2:	4418      	add	r0, r3
 800f6a4:	f010 001f 	ands.w	r0, r0, #31
 800f6a8:	d077      	beq.n	800f79a <_dtoa_r+0x8f2>
 800f6aa:	f1c0 0320 	rsb	r3, r0, #32
 800f6ae:	2b04      	cmp	r3, #4
 800f6b0:	dd6b      	ble.n	800f78a <_dtoa_r+0x8e2>
 800f6b2:	9b08      	ldr	r3, [sp, #32]
 800f6b4:	f1c0 001c 	rsb	r0, r0, #28
 800f6b8:	4403      	add	r3, r0
 800f6ba:	4480      	add	r8, r0
 800f6bc:	4406      	add	r6, r0
 800f6be:	9308      	str	r3, [sp, #32]
 800f6c0:	f1b8 0f00 	cmp.w	r8, #0
 800f6c4:	dd05      	ble.n	800f6d2 <_dtoa_r+0x82a>
 800f6c6:	4649      	mov	r1, r9
 800f6c8:	4642      	mov	r2, r8
 800f6ca:	4658      	mov	r0, fp
 800f6cc:	f001 f9a0 	bl	8010a10 <__lshift>
 800f6d0:	4681      	mov	r9, r0
 800f6d2:	9b08      	ldr	r3, [sp, #32]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	dd05      	ble.n	800f6e4 <_dtoa_r+0x83c>
 800f6d8:	4621      	mov	r1, r4
 800f6da:	461a      	mov	r2, r3
 800f6dc:	4658      	mov	r0, fp
 800f6de:	f001 f997 	bl	8010a10 <__lshift>
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d059      	beq.n	800f79e <_dtoa_r+0x8f6>
 800f6ea:	4621      	mov	r1, r4
 800f6ec:	4648      	mov	r0, r9
 800f6ee:	f001 f9fb 	bl	8010ae8 <__mcmp>
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	da53      	bge.n	800f79e <_dtoa_r+0x8f6>
 800f6f6:	1e7b      	subs	r3, r7, #1
 800f6f8:	9304      	str	r3, [sp, #16]
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	220a      	movs	r2, #10
 800f700:	4658      	mov	r0, fp
 800f702:	f000 ff8f 	bl	8010624 <__multadd>
 800f706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f708:	4681      	mov	r9, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f000 8172 	beq.w	800f9f4 <_dtoa_r+0xb4c>
 800f710:	2300      	movs	r3, #0
 800f712:	4629      	mov	r1, r5
 800f714:	220a      	movs	r2, #10
 800f716:	4658      	mov	r0, fp
 800f718:	f000 ff84 	bl	8010624 <__multadd>
 800f71c:	9b00      	ldr	r3, [sp, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	4605      	mov	r5, r0
 800f722:	dc67      	bgt.n	800f7f4 <_dtoa_r+0x94c>
 800f724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f726:	2b02      	cmp	r3, #2
 800f728:	dc41      	bgt.n	800f7ae <_dtoa_r+0x906>
 800f72a:	e063      	b.n	800f7f4 <_dtoa_r+0x94c>
 800f72c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f72e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f732:	e746      	b.n	800f5c2 <_dtoa_r+0x71a>
 800f734:	9b07      	ldr	r3, [sp, #28]
 800f736:	1e5c      	subs	r4, r3, #1
 800f738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f73a:	42a3      	cmp	r3, r4
 800f73c:	bfbf      	itttt	lt
 800f73e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f740:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f742:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f744:	1ae3      	sublt	r3, r4, r3
 800f746:	bfb4      	ite	lt
 800f748:	18d2      	addlt	r2, r2, r3
 800f74a:	1b1c      	subge	r4, r3, r4
 800f74c:	9b07      	ldr	r3, [sp, #28]
 800f74e:	bfbc      	itt	lt
 800f750:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f752:	2400      	movlt	r4, #0
 800f754:	2b00      	cmp	r3, #0
 800f756:	bfb5      	itete	lt
 800f758:	eba8 0603 	sublt.w	r6, r8, r3
 800f75c:	9b07      	ldrge	r3, [sp, #28]
 800f75e:	2300      	movlt	r3, #0
 800f760:	4646      	movge	r6, r8
 800f762:	e730      	b.n	800f5c6 <_dtoa_r+0x71e>
 800f764:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f766:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f768:	4646      	mov	r6, r8
 800f76a:	e735      	b.n	800f5d8 <_dtoa_r+0x730>
 800f76c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f76e:	e75c      	b.n	800f62a <_dtoa_r+0x782>
 800f770:	2300      	movs	r3, #0
 800f772:	e788      	b.n	800f686 <_dtoa_r+0x7de>
 800f774:	3fe00000 	.word	0x3fe00000
 800f778:	40240000 	.word	0x40240000
 800f77c:	40140000 	.word	0x40140000
 800f780:	9b02      	ldr	r3, [sp, #8]
 800f782:	e780      	b.n	800f686 <_dtoa_r+0x7de>
 800f784:	2300      	movs	r3, #0
 800f786:	930a      	str	r3, [sp, #40]	@ 0x28
 800f788:	e782      	b.n	800f690 <_dtoa_r+0x7e8>
 800f78a:	d099      	beq.n	800f6c0 <_dtoa_r+0x818>
 800f78c:	9a08      	ldr	r2, [sp, #32]
 800f78e:	331c      	adds	r3, #28
 800f790:	441a      	add	r2, r3
 800f792:	4498      	add	r8, r3
 800f794:	441e      	add	r6, r3
 800f796:	9208      	str	r2, [sp, #32]
 800f798:	e792      	b.n	800f6c0 <_dtoa_r+0x818>
 800f79a:	4603      	mov	r3, r0
 800f79c:	e7f6      	b.n	800f78c <_dtoa_r+0x8e4>
 800f79e:	9b07      	ldr	r3, [sp, #28]
 800f7a0:	9704      	str	r7, [sp, #16]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	dc20      	bgt.n	800f7e8 <_dtoa_r+0x940>
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	dd1e      	ble.n	800f7ec <_dtoa_r+0x944>
 800f7ae:	9b00      	ldr	r3, [sp, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f47f aec0 	bne.w	800f536 <_dtoa_r+0x68e>
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	2205      	movs	r2, #5
 800f7ba:	4658      	mov	r0, fp
 800f7bc:	f000 ff32 	bl	8010624 <__multadd>
 800f7c0:	4601      	mov	r1, r0
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	4648      	mov	r0, r9
 800f7c6:	f001 f98f 	bl	8010ae8 <__mcmp>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	f77f aeb3 	ble.w	800f536 <_dtoa_r+0x68e>
 800f7d0:	4656      	mov	r6, sl
 800f7d2:	2331      	movs	r3, #49	@ 0x31
 800f7d4:	f806 3b01 	strb.w	r3, [r6], #1
 800f7d8:	9b04      	ldr	r3, [sp, #16]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	9304      	str	r3, [sp, #16]
 800f7de:	e6ae      	b.n	800f53e <_dtoa_r+0x696>
 800f7e0:	9c07      	ldr	r4, [sp, #28]
 800f7e2:	9704      	str	r7, [sp, #16]
 800f7e4:	4625      	mov	r5, r4
 800f7e6:	e7f3      	b.n	800f7d0 <_dtoa_r+0x928>
 800f7e8:	9b07      	ldr	r3, [sp, #28]
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f000 8104 	beq.w	800f9fc <_dtoa_r+0xb54>
 800f7f4:	2e00      	cmp	r6, #0
 800f7f6:	dd05      	ble.n	800f804 <_dtoa_r+0x95c>
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	4632      	mov	r2, r6
 800f7fc:	4658      	mov	r0, fp
 800f7fe:	f001 f907 	bl	8010a10 <__lshift>
 800f802:	4605      	mov	r5, r0
 800f804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f806:	2b00      	cmp	r3, #0
 800f808:	d05a      	beq.n	800f8c0 <_dtoa_r+0xa18>
 800f80a:	6869      	ldr	r1, [r5, #4]
 800f80c:	4658      	mov	r0, fp
 800f80e:	f000 fea7 	bl	8010560 <_Balloc>
 800f812:	4606      	mov	r6, r0
 800f814:	b928      	cbnz	r0, 800f822 <_dtoa_r+0x97a>
 800f816:	4b84      	ldr	r3, [pc, #528]	@ (800fa28 <_dtoa_r+0xb80>)
 800f818:	4602      	mov	r2, r0
 800f81a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f81e:	f7ff bb5a 	b.w	800eed6 <_dtoa_r+0x2e>
 800f822:	692a      	ldr	r2, [r5, #16]
 800f824:	3202      	adds	r2, #2
 800f826:	0092      	lsls	r2, r2, #2
 800f828:	f105 010c 	add.w	r1, r5, #12
 800f82c:	300c      	adds	r0, #12
 800f82e:	f7ff fa6e 	bl	800ed0e <memcpy>
 800f832:	2201      	movs	r2, #1
 800f834:	4631      	mov	r1, r6
 800f836:	4658      	mov	r0, fp
 800f838:	f001 f8ea 	bl	8010a10 <__lshift>
 800f83c:	f10a 0301 	add.w	r3, sl, #1
 800f840:	9307      	str	r3, [sp, #28]
 800f842:	9b00      	ldr	r3, [sp, #0]
 800f844:	4453      	add	r3, sl
 800f846:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f848:	9b02      	ldr	r3, [sp, #8]
 800f84a:	f003 0301 	and.w	r3, r3, #1
 800f84e:	462f      	mov	r7, r5
 800f850:	930a      	str	r3, [sp, #40]	@ 0x28
 800f852:	4605      	mov	r5, r0
 800f854:	9b07      	ldr	r3, [sp, #28]
 800f856:	4621      	mov	r1, r4
 800f858:	3b01      	subs	r3, #1
 800f85a:	4648      	mov	r0, r9
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	f7ff fa9b 	bl	800ed98 <quorem>
 800f862:	4639      	mov	r1, r7
 800f864:	9002      	str	r0, [sp, #8]
 800f866:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f86a:	4648      	mov	r0, r9
 800f86c:	f001 f93c 	bl	8010ae8 <__mcmp>
 800f870:	462a      	mov	r2, r5
 800f872:	9008      	str	r0, [sp, #32]
 800f874:	4621      	mov	r1, r4
 800f876:	4658      	mov	r0, fp
 800f878:	f001 f952 	bl	8010b20 <__mdiff>
 800f87c:	68c2      	ldr	r2, [r0, #12]
 800f87e:	4606      	mov	r6, r0
 800f880:	bb02      	cbnz	r2, 800f8c4 <_dtoa_r+0xa1c>
 800f882:	4601      	mov	r1, r0
 800f884:	4648      	mov	r0, r9
 800f886:	f001 f92f 	bl	8010ae8 <__mcmp>
 800f88a:	4602      	mov	r2, r0
 800f88c:	4631      	mov	r1, r6
 800f88e:	4658      	mov	r0, fp
 800f890:	920e      	str	r2, [sp, #56]	@ 0x38
 800f892:	f000 fea5 	bl	80105e0 <_Bfree>
 800f896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f898:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f89a:	9e07      	ldr	r6, [sp, #28]
 800f89c:	ea43 0102 	orr.w	r1, r3, r2
 800f8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8a2:	4319      	orrs	r1, r3
 800f8a4:	d110      	bne.n	800f8c8 <_dtoa_r+0xa20>
 800f8a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f8aa:	d029      	beq.n	800f900 <_dtoa_r+0xa58>
 800f8ac:	9b08      	ldr	r3, [sp, #32]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	dd02      	ble.n	800f8b8 <_dtoa_r+0xa10>
 800f8b2:	9b02      	ldr	r3, [sp, #8]
 800f8b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f8b8:	9b00      	ldr	r3, [sp, #0]
 800f8ba:	f883 8000 	strb.w	r8, [r3]
 800f8be:	e63f      	b.n	800f540 <_dtoa_r+0x698>
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	e7bb      	b.n	800f83c <_dtoa_r+0x994>
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	e7e1      	b.n	800f88c <_dtoa_r+0x9e4>
 800f8c8:	9b08      	ldr	r3, [sp, #32]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	db04      	blt.n	800f8d8 <_dtoa_r+0xa30>
 800f8ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f8d0:	430b      	orrs	r3, r1
 800f8d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8d4:	430b      	orrs	r3, r1
 800f8d6:	d120      	bne.n	800f91a <_dtoa_r+0xa72>
 800f8d8:	2a00      	cmp	r2, #0
 800f8da:	dded      	ble.n	800f8b8 <_dtoa_r+0xa10>
 800f8dc:	4649      	mov	r1, r9
 800f8de:	2201      	movs	r2, #1
 800f8e0:	4658      	mov	r0, fp
 800f8e2:	f001 f895 	bl	8010a10 <__lshift>
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	4681      	mov	r9, r0
 800f8ea:	f001 f8fd 	bl	8010ae8 <__mcmp>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	dc03      	bgt.n	800f8fa <_dtoa_r+0xa52>
 800f8f2:	d1e1      	bne.n	800f8b8 <_dtoa_r+0xa10>
 800f8f4:	f018 0f01 	tst.w	r8, #1
 800f8f8:	d0de      	beq.n	800f8b8 <_dtoa_r+0xa10>
 800f8fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f8fe:	d1d8      	bne.n	800f8b2 <_dtoa_r+0xa0a>
 800f900:	9a00      	ldr	r2, [sp, #0]
 800f902:	2339      	movs	r3, #57	@ 0x39
 800f904:	7013      	strb	r3, [r2, #0]
 800f906:	4633      	mov	r3, r6
 800f908:	461e      	mov	r6, r3
 800f90a:	3b01      	subs	r3, #1
 800f90c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f910:	2a39      	cmp	r2, #57	@ 0x39
 800f912:	d052      	beq.n	800f9ba <_dtoa_r+0xb12>
 800f914:	3201      	adds	r2, #1
 800f916:	701a      	strb	r2, [r3, #0]
 800f918:	e612      	b.n	800f540 <_dtoa_r+0x698>
 800f91a:	2a00      	cmp	r2, #0
 800f91c:	dd07      	ble.n	800f92e <_dtoa_r+0xa86>
 800f91e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f922:	d0ed      	beq.n	800f900 <_dtoa_r+0xa58>
 800f924:	9a00      	ldr	r2, [sp, #0]
 800f926:	f108 0301 	add.w	r3, r8, #1
 800f92a:	7013      	strb	r3, [r2, #0]
 800f92c:	e608      	b.n	800f540 <_dtoa_r+0x698>
 800f92e:	9b07      	ldr	r3, [sp, #28]
 800f930:	9a07      	ldr	r2, [sp, #28]
 800f932:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f938:	4293      	cmp	r3, r2
 800f93a:	d028      	beq.n	800f98e <_dtoa_r+0xae6>
 800f93c:	4649      	mov	r1, r9
 800f93e:	2300      	movs	r3, #0
 800f940:	220a      	movs	r2, #10
 800f942:	4658      	mov	r0, fp
 800f944:	f000 fe6e 	bl	8010624 <__multadd>
 800f948:	42af      	cmp	r7, r5
 800f94a:	4681      	mov	r9, r0
 800f94c:	f04f 0300 	mov.w	r3, #0
 800f950:	f04f 020a 	mov.w	r2, #10
 800f954:	4639      	mov	r1, r7
 800f956:	4658      	mov	r0, fp
 800f958:	d107      	bne.n	800f96a <_dtoa_r+0xac2>
 800f95a:	f000 fe63 	bl	8010624 <__multadd>
 800f95e:	4607      	mov	r7, r0
 800f960:	4605      	mov	r5, r0
 800f962:	9b07      	ldr	r3, [sp, #28]
 800f964:	3301      	adds	r3, #1
 800f966:	9307      	str	r3, [sp, #28]
 800f968:	e774      	b.n	800f854 <_dtoa_r+0x9ac>
 800f96a:	f000 fe5b 	bl	8010624 <__multadd>
 800f96e:	4629      	mov	r1, r5
 800f970:	4607      	mov	r7, r0
 800f972:	2300      	movs	r3, #0
 800f974:	220a      	movs	r2, #10
 800f976:	4658      	mov	r0, fp
 800f978:	f000 fe54 	bl	8010624 <__multadd>
 800f97c:	4605      	mov	r5, r0
 800f97e:	e7f0      	b.n	800f962 <_dtoa_r+0xaba>
 800f980:	9b00      	ldr	r3, [sp, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	bfcc      	ite	gt
 800f986:	461e      	movgt	r6, r3
 800f988:	2601      	movle	r6, #1
 800f98a:	4456      	add	r6, sl
 800f98c:	2700      	movs	r7, #0
 800f98e:	4649      	mov	r1, r9
 800f990:	2201      	movs	r2, #1
 800f992:	4658      	mov	r0, fp
 800f994:	f001 f83c 	bl	8010a10 <__lshift>
 800f998:	4621      	mov	r1, r4
 800f99a:	4681      	mov	r9, r0
 800f99c:	f001 f8a4 	bl	8010ae8 <__mcmp>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	dcb0      	bgt.n	800f906 <_dtoa_r+0xa5e>
 800f9a4:	d102      	bne.n	800f9ac <_dtoa_r+0xb04>
 800f9a6:	f018 0f01 	tst.w	r8, #1
 800f9aa:	d1ac      	bne.n	800f906 <_dtoa_r+0xa5e>
 800f9ac:	4633      	mov	r3, r6
 800f9ae:	461e      	mov	r6, r3
 800f9b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9b4:	2a30      	cmp	r2, #48	@ 0x30
 800f9b6:	d0fa      	beq.n	800f9ae <_dtoa_r+0xb06>
 800f9b8:	e5c2      	b.n	800f540 <_dtoa_r+0x698>
 800f9ba:	459a      	cmp	sl, r3
 800f9bc:	d1a4      	bne.n	800f908 <_dtoa_r+0xa60>
 800f9be:	9b04      	ldr	r3, [sp, #16]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	9304      	str	r3, [sp, #16]
 800f9c4:	2331      	movs	r3, #49	@ 0x31
 800f9c6:	f88a 3000 	strb.w	r3, [sl]
 800f9ca:	e5b9      	b.n	800f540 <_dtoa_r+0x698>
 800f9cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f9ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fa2c <_dtoa_r+0xb84>
 800f9d2:	b11b      	cbz	r3, 800f9dc <_dtoa_r+0xb34>
 800f9d4:	f10a 0308 	add.w	r3, sl, #8
 800f9d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	4650      	mov	r0, sl
 800f9de:	b019      	add	sp, #100	@ 0x64
 800f9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	f77f ae37 	ble.w	800f65a <_dtoa_r+0x7b2>
 800f9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9f0:	2001      	movs	r0, #1
 800f9f2:	e655      	b.n	800f6a0 <_dtoa_r+0x7f8>
 800f9f4:	9b00      	ldr	r3, [sp, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f77f aed6 	ble.w	800f7a8 <_dtoa_r+0x900>
 800f9fc:	4656      	mov	r6, sl
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4648      	mov	r0, r9
 800fa02:	f7ff f9c9 	bl	800ed98 <quorem>
 800fa06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa0a:	f806 8b01 	strb.w	r8, [r6], #1
 800fa0e:	9b00      	ldr	r3, [sp, #0]
 800fa10:	eba6 020a 	sub.w	r2, r6, sl
 800fa14:	4293      	cmp	r3, r2
 800fa16:	ddb3      	ble.n	800f980 <_dtoa_r+0xad8>
 800fa18:	4649      	mov	r1, r9
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	220a      	movs	r2, #10
 800fa1e:	4658      	mov	r0, fp
 800fa20:	f000 fe00 	bl	8010624 <__multadd>
 800fa24:	4681      	mov	r9, r0
 800fa26:	e7ea      	b.n	800f9fe <_dtoa_r+0xb56>
 800fa28:	080119a1 	.word	0x080119a1
 800fa2c:	08011925 	.word	0x08011925

0800fa30 <_free_r>:
 800fa30:	b538      	push	{r3, r4, r5, lr}
 800fa32:	4605      	mov	r5, r0
 800fa34:	2900      	cmp	r1, #0
 800fa36:	d041      	beq.n	800fabc <_free_r+0x8c>
 800fa38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa3c:	1f0c      	subs	r4, r1, #4
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	bfb8      	it	lt
 800fa42:	18e4      	addlt	r4, r4, r3
 800fa44:	f7fe f996 	bl	800dd74 <__malloc_lock>
 800fa48:	4a1d      	ldr	r2, [pc, #116]	@ (800fac0 <_free_r+0x90>)
 800fa4a:	6813      	ldr	r3, [r2, #0]
 800fa4c:	b933      	cbnz	r3, 800fa5c <_free_r+0x2c>
 800fa4e:	6063      	str	r3, [r4, #4]
 800fa50:	6014      	str	r4, [r2, #0]
 800fa52:	4628      	mov	r0, r5
 800fa54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa58:	f7fe b992 	b.w	800dd80 <__malloc_unlock>
 800fa5c:	42a3      	cmp	r3, r4
 800fa5e:	d908      	bls.n	800fa72 <_free_r+0x42>
 800fa60:	6820      	ldr	r0, [r4, #0]
 800fa62:	1821      	adds	r1, r4, r0
 800fa64:	428b      	cmp	r3, r1
 800fa66:	bf01      	itttt	eq
 800fa68:	6819      	ldreq	r1, [r3, #0]
 800fa6a:	685b      	ldreq	r3, [r3, #4]
 800fa6c:	1809      	addeq	r1, r1, r0
 800fa6e:	6021      	streq	r1, [r4, #0]
 800fa70:	e7ed      	b.n	800fa4e <_free_r+0x1e>
 800fa72:	461a      	mov	r2, r3
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	b10b      	cbz	r3, 800fa7c <_free_r+0x4c>
 800fa78:	42a3      	cmp	r3, r4
 800fa7a:	d9fa      	bls.n	800fa72 <_free_r+0x42>
 800fa7c:	6811      	ldr	r1, [r2, #0]
 800fa7e:	1850      	adds	r0, r2, r1
 800fa80:	42a0      	cmp	r0, r4
 800fa82:	d10b      	bne.n	800fa9c <_free_r+0x6c>
 800fa84:	6820      	ldr	r0, [r4, #0]
 800fa86:	4401      	add	r1, r0
 800fa88:	1850      	adds	r0, r2, r1
 800fa8a:	4283      	cmp	r3, r0
 800fa8c:	6011      	str	r1, [r2, #0]
 800fa8e:	d1e0      	bne.n	800fa52 <_free_r+0x22>
 800fa90:	6818      	ldr	r0, [r3, #0]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	6053      	str	r3, [r2, #4]
 800fa96:	4408      	add	r0, r1
 800fa98:	6010      	str	r0, [r2, #0]
 800fa9a:	e7da      	b.n	800fa52 <_free_r+0x22>
 800fa9c:	d902      	bls.n	800faa4 <_free_r+0x74>
 800fa9e:	230c      	movs	r3, #12
 800faa0:	602b      	str	r3, [r5, #0]
 800faa2:	e7d6      	b.n	800fa52 <_free_r+0x22>
 800faa4:	6820      	ldr	r0, [r4, #0]
 800faa6:	1821      	adds	r1, r4, r0
 800faa8:	428b      	cmp	r3, r1
 800faaa:	bf04      	itt	eq
 800faac:	6819      	ldreq	r1, [r3, #0]
 800faae:	685b      	ldreq	r3, [r3, #4]
 800fab0:	6063      	str	r3, [r4, #4]
 800fab2:	bf04      	itt	eq
 800fab4:	1809      	addeq	r1, r1, r0
 800fab6:	6021      	streq	r1, [r4, #0]
 800fab8:	6054      	str	r4, [r2, #4]
 800faba:	e7ca      	b.n	800fa52 <_free_r+0x22>
 800fabc:	bd38      	pop	{r3, r4, r5, pc}
 800fabe:	bf00      	nop
 800fac0:	20001388 	.word	0x20001388

0800fac4 <rshift>:
 800fac4:	6903      	ldr	r3, [r0, #16]
 800fac6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800faca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800face:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fad2:	f100 0414 	add.w	r4, r0, #20
 800fad6:	dd45      	ble.n	800fb64 <rshift+0xa0>
 800fad8:	f011 011f 	ands.w	r1, r1, #31
 800fadc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fae0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fae4:	d10c      	bne.n	800fb00 <rshift+0x3c>
 800fae6:	f100 0710 	add.w	r7, r0, #16
 800faea:	4629      	mov	r1, r5
 800faec:	42b1      	cmp	r1, r6
 800faee:	d334      	bcc.n	800fb5a <rshift+0x96>
 800faf0:	1a9b      	subs	r3, r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	1eea      	subs	r2, r5, #3
 800faf6:	4296      	cmp	r6, r2
 800faf8:	bf38      	it	cc
 800fafa:	2300      	movcc	r3, #0
 800fafc:	4423      	add	r3, r4
 800fafe:	e015      	b.n	800fb2c <rshift+0x68>
 800fb00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb04:	f1c1 0820 	rsb	r8, r1, #32
 800fb08:	40cf      	lsrs	r7, r1
 800fb0a:	f105 0e04 	add.w	lr, r5, #4
 800fb0e:	46a1      	mov	r9, r4
 800fb10:	4576      	cmp	r6, lr
 800fb12:	46f4      	mov	ip, lr
 800fb14:	d815      	bhi.n	800fb42 <rshift+0x7e>
 800fb16:	1a9a      	subs	r2, r3, r2
 800fb18:	0092      	lsls	r2, r2, #2
 800fb1a:	3a04      	subs	r2, #4
 800fb1c:	3501      	adds	r5, #1
 800fb1e:	42ae      	cmp	r6, r5
 800fb20:	bf38      	it	cc
 800fb22:	2200      	movcc	r2, #0
 800fb24:	18a3      	adds	r3, r4, r2
 800fb26:	50a7      	str	r7, [r4, r2]
 800fb28:	b107      	cbz	r7, 800fb2c <rshift+0x68>
 800fb2a:	3304      	adds	r3, #4
 800fb2c:	1b1a      	subs	r2, r3, r4
 800fb2e:	42a3      	cmp	r3, r4
 800fb30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb34:	bf08      	it	eq
 800fb36:	2300      	moveq	r3, #0
 800fb38:	6102      	str	r2, [r0, #16]
 800fb3a:	bf08      	it	eq
 800fb3c:	6143      	streq	r3, [r0, #20]
 800fb3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb42:	f8dc c000 	ldr.w	ip, [ip]
 800fb46:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb4a:	ea4c 0707 	orr.w	r7, ip, r7
 800fb4e:	f849 7b04 	str.w	r7, [r9], #4
 800fb52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb56:	40cf      	lsrs	r7, r1
 800fb58:	e7da      	b.n	800fb10 <rshift+0x4c>
 800fb5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb62:	e7c3      	b.n	800faec <rshift+0x28>
 800fb64:	4623      	mov	r3, r4
 800fb66:	e7e1      	b.n	800fb2c <rshift+0x68>

0800fb68 <__hexdig_fun>:
 800fb68:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fb6c:	2b09      	cmp	r3, #9
 800fb6e:	d802      	bhi.n	800fb76 <__hexdig_fun+0xe>
 800fb70:	3820      	subs	r0, #32
 800fb72:	b2c0      	uxtb	r0, r0
 800fb74:	4770      	bx	lr
 800fb76:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fb7a:	2b05      	cmp	r3, #5
 800fb7c:	d801      	bhi.n	800fb82 <__hexdig_fun+0x1a>
 800fb7e:	3847      	subs	r0, #71	@ 0x47
 800fb80:	e7f7      	b.n	800fb72 <__hexdig_fun+0xa>
 800fb82:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fb86:	2b05      	cmp	r3, #5
 800fb88:	d801      	bhi.n	800fb8e <__hexdig_fun+0x26>
 800fb8a:	3827      	subs	r0, #39	@ 0x27
 800fb8c:	e7f1      	b.n	800fb72 <__hexdig_fun+0xa>
 800fb8e:	2000      	movs	r0, #0
 800fb90:	4770      	bx	lr
	...

0800fb94 <__gethex>:
 800fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb98:	b085      	sub	sp, #20
 800fb9a:	468a      	mov	sl, r1
 800fb9c:	9302      	str	r3, [sp, #8]
 800fb9e:	680b      	ldr	r3, [r1, #0]
 800fba0:	9001      	str	r0, [sp, #4]
 800fba2:	4690      	mov	r8, r2
 800fba4:	1c9c      	adds	r4, r3, #2
 800fba6:	46a1      	mov	r9, r4
 800fba8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fbac:	2830      	cmp	r0, #48	@ 0x30
 800fbae:	d0fa      	beq.n	800fba6 <__gethex+0x12>
 800fbb0:	eba9 0303 	sub.w	r3, r9, r3
 800fbb4:	f1a3 0b02 	sub.w	fp, r3, #2
 800fbb8:	f7ff ffd6 	bl	800fb68 <__hexdig_fun>
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d168      	bne.n	800fc94 <__gethex+0x100>
 800fbc2:	49a0      	ldr	r1, [pc, #640]	@ (800fe44 <__gethex+0x2b0>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	4648      	mov	r0, r9
 800fbc8:	f7ff f846 	bl	800ec58 <strncmp>
 800fbcc:	4607      	mov	r7, r0
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d167      	bne.n	800fca2 <__gethex+0x10e>
 800fbd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fbd6:	4626      	mov	r6, r4
 800fbd8:	f7ff ffc6 	bl	800fb68 <__hexdig_fun>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d062      	beq.n	800fca6 <__gethex+0x112>
 800fbe0:	4623      	mov	r3, r4
 800fbe2:	7818      	ldrb	r0, [r3, #0]
 800fbe4:	2830      	cmp	r0, #48	@ 0x30
 800fbe6:	4699      	mov	r9, r3
 800fbe8:	f103 0301 	add.w	r3, r3, #1
 800fbec:	d0f9      	beq.n	800fbe2 <__gethex+0x4e>
 800fbee:	f7ff ffbb 	bl	800fb68 <__hexdig_fun>
 800fbf2:	fab0 f580 	clz	r5, r0
 800fbf6:	096d      	lsrs	r5, r5, #5
 800fbf8:	f04f 0b01 	mov.w	fp, #1
 800fbfc:	464a      	mov	r2, r9
 800fbfe:	4616      	mov	r6, r2
 800fc00:	3201      	adds	r2, #1
 800fc02:	7830      	ldrb	r0, [r6, #0]
 800fc04:	f7ff ffb0 	bl	800fb68 <__hexdig_fun>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d1f8      	bne.n	800fbfe <__gethex+0x6a>
 800fc0c:	498d      	ldr	r1, [pc, #564]	@ (800fe44 <__gethex+0x2b0>)
 800fc0e:	2201      	movs	r2, #1
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7ff f821 	bl	800ec58 <strncmp>
 800fc16:	2800      	cmp	r0, #0
 800fc18:	d13f      	bne.n	800fc9a <__gethex+0x106>
 800fc1a:	b944      	cbnz	r4, 800fc2e <__gethex+0x9a>
 800fc1c:	1c74      	adds	r4, r6, #1
 800fc1e:	4622      	mov	r2, r4
 800fc20:	4616      	mov	r6, r2
 800fc22:	3201      	adds	r2, #1
 800fc24:	7830      	ldrb	r0, [r6, #0]
 800fc26:	f7ff ff9f 	bl	800fb68 <__hexdig_fun>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d1f8      	bne.n	800fc20 <__gethex+0x8c>
 800fc2e:	1ba4      	subs	r4, r4, r6
 800fc30:	00a7      	lsls	r7, r4, #2
 800fc32:	7833      	ldrb	r3, [r6, #0]
 800fc34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fc38:	2b50      	cmp	r3, #80	@ 0x50
 800fc3a:	d13e      	bne.n	800fcba <__gethex+0x126>
 800fc3c:	7873      	ldrb	r3, [r6, #1]
 800fc3e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fc40:	d033      	beq.n	800fcaa <__gethex+0x116>
 800fc42:	2b2d      	cmp	r3, #45	@ 0x2d
 800fc44:	d034      	beq.n	800fcb0 <__gethex+0x11c>
 800fc46:	1c71      	adds	r1, r6, #1
 800fc48:	2400      	movs	r4, #0
 800fc4a:	7808      	ldrb	r0, [r1, #0]
 800fc4c:	f7ff ff8c 	bl	800fb68 <__hexdig_fun>
 800fc50:	1e43      	subs	r3, r0, #1
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b18      	cmp	r3, #24
 800fc56:	d830      	bhi.n	800fcba <__gethex+0x126>
 800fc58:	f1a0 0210 	sub.w	r2, r0, #16
 800fc5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc60:	f7ff ff82 	bl	800fb68 <__hexdig_fun>
 800fc64:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800fc68:	fa5f fc8c 	uxtb.w	ip, ip
 800fc6c:	f1bc 0f18 	cmp.w	ip, #24
 800fc70:	f04f 030a 	mov.w	r3, #10
 800fc74:	d91e      	bls.n	800fcb4 <__gethex+0x120>
 800fc76:	b104      	cbz	r4, 800fc7a <__gethex+0xe6>
 800fc78:	4252      	negs	r2, r2
 800fc7a:	4417      	add	r7, r2
 800fc7c:	f8ca 1000 	str.w	r1, [sl]
 800fc80:	b1ed      	cbz	r5, 800fcbe <__gethex+0x12a>
 800fc82:	f1bb 0f00 	cmp.w	fp, #0
 800fc86:	bf0c      	ite	eq
 800fc88:	2506      	moveq	r5, #6
 800fc8a:	2500      	movne	r5, #0
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	b005      	add	sp, #20
 800fc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc94:	2500      	movs	r5, #0
 800fc96:	462c      	mov	r4, r5
 800fc98:	e7b0      	b.n	800fbfc <__gethex+0x68>
 800fc9a:	2c00      	cmp	r4, #0
 800fc9c:	d1c7      	bne.n	800fc2e <__gethex+0x9a>
 800fc9e:	4627      	mov	r7, r4
 800fca0:	e7c7      	b.n	800fc32 <__gethex+0x9e>
 800fca2:	464e      	mov	r6, r9
 800fca4:	462f      	mov	r7, r5
 800fca6:	2501      	movs	r5, #1
 800fca8:	e7c3      	b.n	800fc32 <__gethex+0x9e>
 800fcaa:	2400      	movs	r4, #0
 800fcac:	1cb1      	adds	r1, r6, #2
 800fcae:	e7cc      	b.n	800fc4a <__gethex+0xb6>
 800fcb0:	2401      	movs	r4, #1
 800fcb2:	e7fb      	b.n	800fcac <__gethex+0x118>
 800fcb4:	fb03 0002 	mla	r0, r3, r2, r0
 800fcb8:	e7ce      	b.n	800fc58 <__gethex+0xc4>
 800fcba:	4631      	mov	r1, r6
 800fcbc:	e7de      	b.n	800fc7c <__gethex+0xe8>
 800fcbe:	eba6 0309 	sub.w	r3, r6, r9
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	2b07      	cmp	r3, #7
 800fcc8:	dc0a      	bgt.n	800fce0 <__gethex+0x14c>
 800fcca:	9801      	ldr	r0, [sp, #4]
 800fccc:	f000 fc48 	bl	8010560 <_Balloc>
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	b940      	cbnz	r0, 800fce6 <__gethex+0x152>
 800fcd4:	4b5c      	ldr	r3, [pc, #368]	@ (800fe48 <__gethex+0x2b4>)
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	21e4      	movs	r1, #228	@ 0xe4
 800fcda:	485c      	ldr	r0, [pc, #368]	@ (800fe4c <__gethex+0x2b8>)
 800fcdc:	f7ff f83e 	bl	800ed5c <__assert_func>
 800fce0:	3101      	adds	r1, #1
 800fce2:	105b      	asrs	r3, r3, #1
 800fce4:	e7ef      	b.n	800fcc6 <__gethex+0x132>
 800fce6:	f100 0a14 	add.w	sl, r0, #20
 800fcea:	2300      	movs	r3, #0
 800fcec:	4655      	mov	r5, sl
 800fcee:	469b      	mov	fp, r3
 800fcf0:	45b1      	cmp	r9, r6
 800fcf2:	d337      	bcc.n	800fd64 <__gethex+0x1d0>
 800fcf4:	f845 bb04 	str.w	fp, [r5], #4
 800fcf8:	eba5 050a 	sub.w	r5, r5, sl
 800fcfc:	10ad      	asrs	r5, r5, #2
 800fcfe:	6125      	str	r5, [r4, #16]
 800fd00:	4658      	mov	r0, fp
 800fd02:	f000 fd1f 	bl	8010744 <__hi0bits>
 800fd06:	016d      	lsls	r5, r5, #5
 800fd08:	f8d8 6000 	ldr.w	r6, [r8]
 800fd0c:	1a2d      	subs	r5, r5, r0
 800fd0e:	42b5      	cmp	r5, r6
 800fd10:	dd54      	ble.n	800fdbc <__gethex+0x228>
 800fd12:	1bad      	subs	r5, r5, r6
 800fd14:	4629      	mov	r1, r5
 800fd16:	4620      	mov	r0, r4
 800fd18:	f001 f8b3 	bl	8010e82 <__any_on>
 800fd1c:	4681      	mov	r9, r0
 800fd1e:	b178      	cbz	r0, 800fd40 <__gethex+0x1ac>
 800fd20:	1e6b      	subs	r3, r5, #1
 800fd22:	1159      	asrs	r1, r3, #5
 800fd24:	f003 021f 	and.w	r2, r3, #31
 800fd28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fd2c:	f04f 0901 	mov.w	r9, #1
 800fd30:	fa09 f202 	lsl.w	r2, r9, r2
 800fd34:	420a      	tst	r2, r1
 800fd36:	d003      	beq.n	800fd40 <__gethex+0x1ac>
 800fd38:	454b      	cmp	r3, r9
 800fd3a:	dc36      	bgt.n	800fdaa <__gethex+0x216>
 800fd3c:	f04f 0902 	mov.w	r9, #2
 800fd40:	4629      	mov	r1, r5
 800fd42:	4620      	mov	r0, r4
 800fd44:	f7ff febe 	bl	800fac4 <rshift>
 800fd48:	442f      	add	r7, r5
 800fd4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd4e:	42bb      	cmp	r3, r7
 800fd50:	da42      	bge.n	800fdd8 <__gethex+0x244>
 800fd52:	9801      	ldr	r0, [sp, #4]
 800fd54:	4621      	mov	r1, r4
 800fd56:	f000 fc43 	bl	80105e0 <_Bfree>
 800fd5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	6013      	str	r3, [r2, #0]
 800fd60:	25a3      	movs	r5, #163	@ 0xa3
 800fd62:	e793      	b.n	800fc8c <__gethex+0xf8>
 800fd64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fd68:	2a2e      	cmp	r2, #46	@ 0x2e
 800fd6a:	d012      	beq.n	800fd92 <__gethex+0x1fe>
 800fd6c:	2b20      	cmp	r3, #32
 800fd6e:	d104      	bne.n	800fd7a <__gethex+0x1e6>
 800fd70:	f845 bb04 	str.w	fp, [r5], #4
 800fd74:	f04f 0b00 	mov.w	fp, #0
 800fd78:	465b      	mov	r3, fp
 800fd7a:	7830      	ldrb	r0, [r6, #0]
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	f7ff fef3 	bl	800fb68 <__hexdig_fun>
 800fd82:	9b03      	ldr	r3, [sp, #12]
 800fd84:	f000 000f 	and.w	r0, r0, #15
 800fd88:	4098      	lsls	r0, r3
 800fd8a:	ea4b 0b00 	orr.w	fp, fp, r0
 800fd8e:	3304      	adds	r3, #4
 800fd90:	e7ae      	b.n	800fcf0 <__gethex+0x15c>
 800fd92:	45b1      	cmp	r9, r6
 800fd94:	d8ea      	bhi.n	800fd6c <__gethex+0x1d8>
 800fd96:	492b      	ldr	r1, [pc, #172]	@ (800fe44 <__gethex+0x2b0>)
 800fd98:	9303      	str	r3, [sp, #12]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f7fe ff5b 	bl	800ec58 <strncmp>
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d1e1      	bne.n	800fd6c <__gethex+0x1d8>
 800fda8:	e7a2      	b.n	800fcf0 <__gethex+0x15c>
 800fdaa:	1ea9      	subs	r1, r5, #2
 800fdac:	4620      	mov	r0, r4
 800fdae:	f001 f868 	bl	8010e82 <__any_on>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	d0c2      	beq.n	800fd3c <__gethex+0x1a8>
 800fdb6:	f04f 0903 	mov.w	r9, #3
 800fdba:	e7c1      	b.n	800fd40 <__gethex+0x1ac>
 800fdbc:	da09      	bge.n	800fdd2 <__gethex+0x23e>
 800fdbe:	1b75      	subs	r5, r6, r5
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	9801      	ldr	r0, [sp, #4]
 800fdc4:	462a      	mov	r2, r5
 800fdc6:	f000 fe23 	bl	8010a10 <__lshift>
 800fdca:	1b7f      	subs	r7, r7, r5
 800fdcc:	4604      	mov	r4, r0
 800fdce:	f100 0a14 	add.w	sl, r0, #20
 800fdd2:	f04f 0900 	mov.w	r9, #0
 800fdd6:	e7b8      	b.n	800fd4a <__gethex+0x1b6>
 800fdd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fddc:	42bd      	cmp	r5, r7
 800fdde:	dd6f      	ble.n	800fec0 <__gethex+0x32c>
 800fde0:	1bed      	subs	r5, r5, r7
 800fde2:	42ae      	cmp	r6, r5
 800fde4:	dc34      	bgt.n	800fe50 <__gethex+0x2bc>
 800fde6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	d022      	beq.n	800fe34 <__gethex+0x2a0>
 800fdee:	2b03      	cmp	r3, #3
 800fdf0:	d024      	beq.n	800fe3c <__gethex+0x2a8>
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d115      	bne.n	800fe22 <__gethex+0x28e>
 800fdf6:	42ae      	cmp	r6, r5
 800fdf8:	d113      	bne.n	800fe22 <__gethex+0x28e>
 800fdfa:	2e01      	cmp	r6, #1
 800fdfc:	d10b      	bne.n	800fe16 <__gethex+0x282>
 800fdfe:	9a02      	ldr	r2, [sp, #8]
 800fe00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe04:	6013      	str	r3, [r2, #0]
 800fe06:	2301      	movs	r3, #1
 800fe08:	6123      	str	r3, [r4, #16]
 800fe0a:	f8ca 3000 	str.w	r3, [sl]
 800fe0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe10:	2562      	movs	r5, #98	@ 0x62
 800fe12:	601c      	str	r4, [r3, #0]
 800fe14:	e73a      	b.n	800fc8c <__gethex+0xf8>
 800fe16:	1e71      	subs	r1, r6, #1
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f001 f832 	bl	8010e82 <__any_on>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	d1ed      	bne.n	800fdfe <__gethex+0x26a>
 800fe22:	9801      	ldr	r0, [sp, #4]
 800fe24:	4621      	mov	r1, r4
 800fe26:	f000 fbdb 	bl	80105e0 <_Bfree>
 800fe2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	6013      	str	r3, [r2, #0]
 800fe30:	2550      	movs	r5, #80	@ 0x50
 800fe32:	e72b      	b.n	800fc8c <__gethex+0xf8>
 800fe34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1f3      	bne.n	800fe22 <__gethex+0x28e>
 800fe3a:	e7e0      	b.n	800fdfe <__gethex+0x26a>
 800fe3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1dd      	bne.n	800fdfe <__gethex+0x26a>
 800fe42:	e7ee      	b.n	800fe22 <__gethex+0x28e>
 800fe44:	08011789 	.word	0x08011789
 800fe48:	080119a1 	.word	0x080119a1
 800fe4c:	080119b2 	.word	0x080119b2
 800fe50:	1e6f      	subs	r7, r5, #1
 800fe52:	f1b9 0f00 	cmp.w	r9, #0
 800fe56:	d130      	bne.n	800feba <__gethex+0x326>
 800fe58:	b127      	cbz	r7, 800fe64 <__gethex+0x2d0>
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f001 f810 	bl	8010e82 <__any_on>
 800fe62:	4681      	mov	r9, r0
 800fe64:	117a      	asrs	r2, r7, #5
 800fe66:	2301      	movs	r3, #1
 800fe68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fe6c:	f007 071f 	and.w	r7, r7, #31
 800fe70:	40bb      	lsls	r3, r7
 800fe72:	4213      	tst	r3, r2
 800fe74:	4629      	mov	r1, r5
 800fe76:	4620      	mov	r0, r4
 800fe78:	bf18      	it	ne
 800fe7a:	f049 0902 	orrne.w	r9, r9, #2
 800fe7e:	f7ff fe21 	bl	800fac4 <rshift>
 800fe82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fe86:	1b76      	subs	r6, r6, r5
 800fe88:	2502      	movs	r5, #2
 800fe8a:	f1b9 0f00 	cmp.w	r9, #0
 800fe8e:	d047      	beq.n	800ff20 <__gethex+0x38c>
 800fe90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d015      	beq.n	800fec4 <__gethex+0x330>
 800fe98:	2b03      	cmp	r3, #3
 800fe9a:	d017      	beq.n	800fecc <__gethex+0x338>
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d109      	bne.n	800feb4 <__gethex+0x320>
 800fea0:	f019 0f02 	tst.w	r9, #2
 800fea4:	d006      	beq.n	800feb4 <__gethex+0x320>
 800fea6:	f8da 3000 	ldr.w	r3, [sl]
 800feaa:	ea49 0903 	orr.w	r9, r9, r3
 800feae:	f019 0f01 	tst.w	r9, #1
 800feb2:	d10e      	bne.n	800fed2 <__gethex+0x33e>
 800feb4:	f045 0510 	orr.w	r5, r5, #16
 800feb8:	e032      	b.n	800ff20 <__gethex+0x38c>
 800feba:	f04f 0901 	mov.w	r9, #1
 800febe:	e7d1      	b.n	800fe64 <__gethex+0x2d0>
 800fec0:	2501      	movs	r5, #1
 800fec2:	e7e2      	b.n	800fe8a <__gethex+0x2f6>
 800fec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fec6:	f1c3 0301 	rsb	r3, r3, #1
 800feca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d0f0      	beq.n	800feb4 <__gethex+0x320>
 800fed2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fed6:	f104 0314 	add.w	r3, r4, #20
 800feda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fede:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fee2:	f04f 0c00 	mov.w	ip, #0
 800fee6:	4618      	mov	r0, r3
 800fee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800feec:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800fef0:	d01b      	beq.n	800ff2a <__gethex+0x396>
 800fef2:	3201      	adds	r2, #1
 800fef4:	6002      	str	r2, [r0, #0]
 800fef6:	2d02      	cmp	r5, #2
 800fef8:	f104 0314 	add.w	r3, r4, #20
 800fefc:	d13c      	bne.n	800ff78 <__gethex+0x3e4>
 800fefe:	f8d8 2000 	ldr.w	r2, [r8]
 800ff02:	3a01      	subs	r2, #1
 800ff04:	42b2      	cmp	r2, r6
 800ff06:	d109      	bne.n	800ff1c <__gethex+0x388>
 800ff08:	1171      	asrs	r1, r6, #5
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff10:	f006 061f 	and.w	r6, r6, #31
 800ff14:	fa02 f606 	lsl.w	r6, r2, r6
 800ff18:	421e      	tst	r6, r3
 800ff1a:	d13a      	bne.n	800ff92 <__gethex+0x3fe>
 800ff1c:	f045 0520 	orr.w	r5, r5, #32
 800ff20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff22:	601c      	str	r4, [r3, #0]
 800ff24:	9b02      	ldr	r3, [sp, #8]
 800ff26:	601f      	str	r7, [r3, #0]
 800ff28:	e6b0      	b.n	800fc8c <__gethex+0xf8>
 800ff2a:	4299      	cmp	r1, r3
 800ff2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff30:	d8d9      	bhi.n	800fee6 <__gethex+0x352>
 800ff32:	68a3      	ldr	r3, [r4, #8]
 800ff34:	459b      	cmp	fp, r3
 800ff36:	db17      	blt.n	800ff68 <__gethex+0x3d4>
 800ff38:	6861      	ldr	r1, [r4, #4]
 800ff3a:	9801      	ldr	r0, [sp, #4]
 800ff3c:	3101      	adds	r1, #1
 800ff3e:	f000 fb0f 	bl	8010560 <_Balloc>
 800ff42:	4681      	mov	r9, r0
 800ff44:	b918      	cbnz	r0, 800ff4e <__gethex+0x3ba>
 800ff46:	4b1a      	ldr	r3, [pc, #104]	@ (800ffb0 <__gethex+0x41c>)
 800ff48:	4602      	mov	r2, r0
 800ff4a:	2184      	movs	r1, #132	@ 0x84
 800ff4c:	e6c5      	b.n	800fcda <__gethex+0x146>
 800ff4e:	6922      	ldr	r2, [r4, #16]
 800ff50:	3202      	adds	r2, #2
 800ff52:	f104 010c 	add.w	r1, r4, #12
 800ff56:	0092      	lsls	r2, r2, #2
 800ff58:	300c      	adds	r0, #12
 800ff5a:	f7fe fed8 	bl	800ed0e <memcpy>
 800ff5e:	4621      	mov	r1, r4
 800ff60:	9801      	ldr	r0, [sp, #4]
 800ff62:	f000 fb3d 	bl	80105e0 <_Bfree>
 800ff66:	464c      	mov	r4, r9
 800ff68:	6923      	ldr	r3, [r4, #16]
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff70:	6122      	str	r2, [r4, #16]
 800ff72:	2201      	movs	r2, #1
 800ff74:	615a      	str	r2, [r3, #20]
 800ff76:	e7be      	b.n	800fef6 <__gethex+0x362>
 800ff78:	6922      	ldr	r2, [r4, #16]
 800ff7a:	455a      	cmp	r2, fp
 800ff7c:	dd0b      	ble.n	800ff96 <__gethex+0x402>
 800ff7e:	2101      	movs	r1, #1
 800ff80:	4620      	mov	r0, r4
 800ff82:	f7ff fd9f 	bl	800fac4 <rshift>
 800ff86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff8a:	3701      	adds	r7, #1
 800ff8c:	42bb      	cmp	r3, r7
 800ff8e:	f6ff aee0 	blt.w	800fd52 <__gethex+0x1be>
 800ff92:	2501      	movs	r5, #1
 800ff94:	e7c2      	b.n	800ff1c <__gethex+0x388>
 800ff96:	f016 061f 	ands.w	r6, r6, #31
 800ff9a:	d0fa      	beq.n	800ff92 <__gethex+0x3fe>
 800ff9c:	4453      	add	r3, sl
 800ff9e:	f1c6 0620 	rsb	r6, r6, #32
 800ffa2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ffa6:	f000 fbcd 	bl	8010744 <__hi0bits>
 800ffaa:	42b0      	cmp	r0, r6
 800ffac:	dbe7      	blt.n	800ff7e <__gethex+0x3ea>
 800ffae:	e7f0      	b.n	800ff92 <__gethex+0x3fe>
 800ffb0:	080119a1 	.word	0x080119a1

0800ffb4 <L_shift>:
 800ffb4:	f1c2 0208 	rsb	r2, r2, #8
 800ffb8:	0092      	lsls	r2, r2, #2
 800ffba:	b570      	push	{r4, r5, r6, lr}
 800ffbc:	f1c2 0620 	rsb	r6, r2, #32
 800ffc0:	6843      	ldr	r3, [r0, #4]
 800ffc2:	6804      	ldr	r4, [r0, #0]
 800ffc4:	fa03 f506 	lsl.w	r5, r3, r6
 800ffc8:	432c      	orrs	r4, r5
 800ffca:	40d3      	lsrs	r3, r2
 800ffcc:	6004      	str	r4, [r0, #0]
 800ffce:	f840 3f04 	str.w	r3, [r0, #4]!
 800ffd2:	4288      	cmp	r0, r1
 800ffd4:	d3f4      	bcc.n	800ffc0 <L_shift+0xc>
 800ffd6:	bd70      	pop	{r4, r5, r6, pc}

0800ffd8 <__match>:
 800ffd8:	b530      	push	{r4, r5, lr}
 800ffda:	6803      	ldr	r3, [r0, #0]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffe2:	b914      	cbnz	r4, 800ffea <__match+0x12>
 800ffe4:	6003      	str	r3, [r0, #0]
 800ffe6:	2001      	movs	r0, #1
 800ffe8:	bd30      	pop	{r4, r5, pc}
 800ffea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fff2:	2d19      	cmp	r5, #25
 800fff4:	bf98      	it	ls
 800fff6:	3220      	addls	r2, #32
 800fff8:	42a2      	cmp	r2, r4
 800fffa:	d0f0      	beq.n	800ffde <__match+0x6>
 800fffc:	2000      	movs	r0, #0
 800fffe:	e7f3      	b.n	800ffe8 <__match+0x10>

08010000 <__hexnan>:
 8010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010004:	680b      	ldr	r3, [r1, #0]
 8010006:	6801      	ldr	r1, [r0, #0]
 8010008:	115e      	asrs	r6, r3, #5
 801000a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801000e:	f013 031f 	ands.w	r3, r3, #31
 8010012:	b087      	sub	sp, #28
 8010014:	bf18      	it	ne
 8010016:	3604      	addne	r6, #4
 8010018:	2500      	movs	r5, #0
 801001a:	1f37      	subs	r7, r6, #4
 801001c:	4682      	mov	sl, r0
 801001e:	4690      	mov	r8, r2
 8010020:	9301      	str	r3, [sp, #4]
 8010022:	f846 5c04 	str.w	r5, [r6, #-4]
 8010026:	46b9      	mov	r9, r7
 8010028:	463c      	mov	r4, r7
 801002a:	9502      	str	r5, [sp, #8]
 801002c:	46ab      	mov	fp, r5
 801002e:	784a      	ldrb	r2, [r1, #1]
 8010030:	1c4b      	adds	r3, r1, #1
 8010032:	9303      	str	r3, [sp, #12]
 8010034:	b342      	cbz	r2, 8010088 <__hexnan+0x88>
 8010036:	4610      	mov	r0, r2
 8010038:	9105      	str	r1, [sp, #20]
 801003a:	9204      	str	r2, [sp, #16]
 801003c:	f7ff fd94 	bl	800fb68 <__hexdig_fun>
 8010040:	2800      	cmp	r0, #0
 8010042:	d151      	bne.n	80100e8 <__hexnan+0xe8>
 8010044:	9a04      	ldr	r2, [sp, #16]
 8010046:	9905      	ldr	r1, [sp, #20]
 8010048:	2a20      	cmp	r2, #32
 801004a:	d818      	bhi.n	801007e <__hexnan+0x7e>
 801004c:	9b02      	ldr	r3, [sp, #8]
 801004e:	459b      	cmp	fp, r3
 8010050:	dd13      	ble.n	801007a <__hexnan+0x7a>
 8010052:	454c      	cmp	r4, r9
 8010054:	d206      	bcs.n	8010064 <__hexnan+0x64>
 8010056:	2d07      	cmp	r5, #7
 8010058:	dc04      	bgt.n	8010064 <__hexnan+0x64>
 801005a:	462a      	mov	r2, r5
 801005c:	4649      	mov	r1, r9
 801005e:	4620      	mov	r0, r4
 8010060:	f7ff ffa8 	bl	800ffb4 <L_shift>
 8010064:	4544      	cmp	r4, r8
 8010066:	d952      	bls.n	801010e <__hexnan+0x10e>
 8010068:	2300      	movs	r3, #0
 801006a:	f1a4 0904 	sub.w	r9, r4, #4
 801006e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010072:	f8cd b008 	str.w	fp, [sp, #8]
 8010076:	464c      	mov	r4, r9
 8010078:	461d      	mov	r5, r3
 801007a:	9903      	ldr	r1, [sp, #12]
 801007c:	e7d7      	b.n	801002e <__hexnan+0x2e>
 801007e:	2a29      	cmp	r2, #41	@ 0x29
 8010080:	d157      	bne.n	8010132 <__hexnan+0x132>
 8010082:	3102      	adds	r1, #2
 8010084:	f8ca 1000 	str.w	r1, [sl]
 8010088:	f1bb 0f00 	cmp.w	fp, #0
 801008c:	d051      	beq.n	8010132 <__hexnan+0x132>
 801008e:	454c      	cmp	r4, r9
 8010090:	d206      	bcs.n	80100a0 <__hexnan+0xa0>
 8010092:	2d07      	cmp	r5, #7
 8010094:	dc04      	bgt.n	80100a0 <__hexnan+0xa0>
 8010096:	462a      	mov	r2, r5
 8010098:	4649      	mov	r1, r9
 801009a:	4620      	mov	r0, r4
 801009c:	f7ff ff8a 	bl	800ffb4 <L_shift>
 80100a0:	4544      	cmp	r4, r8
 80100a2:	d936      	bls.n	8010112 <__hexnan+0x112>
 80100a4:	f1a8 0204 	sub.w	r2, r8, #4
 80100a8:	4623      	mov	r3, r4
 80100aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80100ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80100b2:	429f      	cmp	r7, r3
 80100b4:	d2f9      	bcs.n	80100aa <__hexnan+0xaa>
 80100b6:	1b3b      	subs	r3, r7, r4
 80100b8:	f023 0303 	bic.w	r3, r3, #3
 80100bc:	3304      	adds	r3, #4
 80100be:	3401      	adds	r4, #1
 80100c0:	3e03      	subs	r6, #3
 80100c2:	42b4      	cmp	r4, r6
 80100c4:	bf88      	it	hi
 80100c6:	2304      	movhi	r3, #4
 80100c8:	4443      	add	r3, r8
 80100ca:	2200      	movs	r2, #0
 80100cc:	f843 2b04 	str.w	r2, [r3], #4
 80100d0:	429f      	cmp	r7, r3
 80100d2:	d2fb      	bcs.n	80100cc <__hexnan+0xcc>
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	b91b      	cbnz	r3, 80100e0 <__hexnan+0xe0>
 80100d8:	4547      	cmp	r7, r8
 80100da:	d128      	bne.n	801012e <__hexnan+0x12e>
 80100dc:	2301      	movs	r3, #1
 80100de:	603b      	str	r3, [r7, #0]
 80100e0:	2005      	movs	r0, #5
 80100e2:	b007      	add	sp, #28
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	3501      	adds	r5, #1
 80100ea:	2d08      	cmp	r5, #8
 80100ec:	f10b 0b01 	add.w	fp, fp, #1
 80100f0:	dd06      	ble.n	8010100 <__hexnan+0x100>
 80100f2:	4544      	cmp	r4, r8
 80100f4:	d9c1      	bls.n	801007a <__hexnan+0x7a>
 80100f6:	2300      	movs	r3, #0
 80100f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80100fc:	2501      	movs	r5, #1
 80100fe:	3c04      	subs	r4, #4
 8010100:	6822      	ldr	r2, [r4, #0]
 8010102:	f000 000f 	and.w	r0, r0, #15
 8010106:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801010a:	6020      	str	r0, [r4, #0]
 801010c:	e7b5      	b.n	801007a <__hexnan+0x7a>
 801010e:	2508      	movs	r5, #8
 8010110:	e7b3      	b.n	801007a <__hexnan+0x7a>
 8010112:	9b01      	ldr	r3, [sp, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d0dd      	beq.n	80100d4 <__hexnan+0xd4>
 8010118:	f1c3 0320 	rsb	r3, r3, #32
 801011c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010120:	40da      	lsrs	r2, r3
 8010122:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010126:	4013      	ands	r3, r2
 8010128:	f846 3c04 	str.w	r3, [r6, #-4]
 801012c:	e7d2      	b.n	80100d4 <__hexnan+0xd4>
 801012e:	3f04      	subs	r7, #4
 8010130:	e7d0      	b.n	80100d4 <__hexnan+0xd4>
 8010132:	2004      	movs	r0, #4
 8010134:	e7d5      	b.n	80100e2 <__hexnan+0xe2>

08010136 <__ssputs_r>:
 8010136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801013a:	688e      	ldr	r6, [r1, #8]
 801013c:	461f      	mov	r7, r3
 801013e:	42be      	cmp	r6, r7
 8010140:	680b      	ldr	r3, [r1, #0]
 8010142:	4682      	mov	sl, r0
 8010144:	460c      	mov	r4, r1
 8010146:	4690      	mov	r8, r2
 8010148:	d82d      	bhi.n	80101a6 <__ssputs_r+0x70>
 801014a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801014e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010152:	d026      	beq.n	80101a2 <__ssputs_r+0x6c>
 8010154:	6965      	ldr	r5, [r4, #20]
 8010156:	6909      	ldr	r1, [r1, #16]
 8010158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801015c:	eba3 0901 	sub.w	r9, r3, r1
 8010160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010164:	1c7b      	adds	r3, r7, #1
 8010166:	444b      	add	r3, r9
 8010168:	106d      	asrs	r5, r5, #1
 801016a:	429d      	cmp	r5, r3
 801016c:	bf38      	it	cc
 801016e:	461d      	movcc	r5, r3
 8010170:	0553      	lsls	r3, r2, #21
 8010172:	d527      	bpl.n	80101c4 <__ssputs_r+0x8e>
 8010174:	4629      	mov	r1, r5
 8010176:	f7fd f9db 	bl	800d530 <_malloc_r>
 801017a:	4606      	mov	r6, r0
 801017c:	b360      	cbz	r0, 80101d8 <__ssputs_r+0xa2>
 801017e:	6921      	ldr	r1, [r4, #16]
 8010180:	464a      	mov	r2, r9
 8010182:	f7fe fdc4 	bl	800ed0e <memcpy>
 8010186:	89a3      	ldrh	r3, [r4, #12]
 8010188:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801018c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010190:	81a3      	strh	r3, [r4, #12]
 8010192:	6126      	str	r6, [r4, #16]
 8010194:	6165      	str	r5, [r4, #20]
 8010196:	444e      	add	r6, r9
 8010198:	eba5 0509 	sub.w	r5, r5, r9
 801019c:	6026      	str	r6, [r4, #0]
 801019e:	60a5      	str	r5, [r4, #8]
 80101a0:	463e      	mov	r6, r7
 80101a2:	42be      	cmp	r6, r7
 80101a4:	d900      	bls.n	80101a8 <__ssputs_r+0x72>
 80101a6:	463e      	mov	r6, r7
 80101a8:	6820      	ldr	r0, [r4, #0]
 80101aa:	4632      	mov	r2, r6
 80101ac:	4641      	mov	r1, r8
 80101ae:	f001 f810 	bl	80111d2 <memmove>
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	1b9b      	subs	r3, r3, r6
 80101b6:	60a3      	str	r3, [r4, #8]
 80101b8:	6823      	ldr	r3, [r4, #0]
 80101ba:	4433      	add	r3, r6
 80101bc:	6023      	str	r3, [r4, #0]
 80101be:	2000      	movs	r0, #0
 80101c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c4:	462a      	mov	r2, r5
 80101c6:	f000 fed3 	bl	8010f70 <_realloc_r>
 80101ca:	4606      	mov	r6, r0
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d1e0      	bne.n	8010192 <__ssputs_r+0x5c>
 80101d0:	6921      	ldr	r1, [r4, #16]
 80101d2:	4650      	mov	r0, sl
 80101d4:	f7ff fc2c 	bl	800fa30 <_free_r>
 80101d8:	230c      	movs	r3, #12
 80101da:	f8ca 3000 	str.w	r3, [sl]
 80101de:	89a3      	ldrh	r3, [r4, #12]
 80101e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101e4:	81a3      	strh	r3, [r4, #12]
 80101e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101ea:	e7e9      	b.n	80101c0 <__ssputs_r+0x8a>

080101ec <_svfiprintf_r>:
 80101ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f0:	4698      	mov	r8, r3
 80101f2:	898b      	ldrh	r3, [r1, #12]
 80101f4:	061b      	lsls	r3, r3, #24
 80101f6:	b09d      	sub	sp, #116	@ 0x74
 80101f8:	4607      	mov	r7, r0
 80101fa:	460d      	mov	r5, r1
 80101fc:	4614      	mov	r4, r2
 80101fe:	d510      	bpl.n	8010222 <_svfiprintf_r+0x36>
 8010200:	690b      	ldr	r3, [r1, #16]
 8010202:	b973      	cbnz	r3, 8010222 <_svfiprintf_r+0x36>
 8010204:	2140      	movs	r1, #64	@ 0x40
 8010206:	f7fd f993 	bl	800d530 <_malloc_r>
 801020a:	6028      	str	r0, [r5, #0]
 801020c:	6128      	str	r0, [r5, #16]
 801020e:	b930      	cbnz	r0, 801021e <_svfiprintf_r+0x32>
 8010210:	230c      	movs	r3, #12
 8010212:	603b      	str	r3, [r7, #0]
 8010214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010218:	b01d      	add	sp, #116	@ 0x74
 801021a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801021e:	2340      	movs	r3, #64	@ 0x40
 8010220:	616b      	str	r3, [r5, #20]
 8010222:	2300      	movs	r3, #0
 8010224:	9309      	str	r3, [sp, #36]	@ 0x24
 8010226:	2320      	movs	r3, #32
 8010228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801022c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010230:	2330      	movs	r3, #48	@ 0x30
 8010232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80103d0 <_svfiprintf_r+0x1e4>
 8010236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801023a:	f04f 0901 	mov.w	r9, #1
 801023e:	4623      	mov	r3, r4
 8010240:	469a      	mov	sl, r3
 8010242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010246:	b10a      	cbz	r2, 801024c <_svfiprintf_r+0x60>
 8010248:	2a25      	cmp	r2, #37	@ 0x25
 801024a:	d1f9      	bne.n	8010240 <_svfiprintf_r+0x54>
 801024c:	ebba 0b04 	subs.w	fp, sl, r4
 8010250:	d00b      	beq.n	801026a <_svfiprintf_r+0x7e>
 8010252:	465b      	mov	r3, fp
 8010254:	4622      	mov	r2, r4
 8010256:	4629      	mov	r1, r5
 8010258:	4638      	mov	r0, r7
 801025a:	f7ff ff6c 	bl	8010136 <__ssputs_r>
 801025e:	3001      	adds	r0, #1
 8010260:	f000 80a7 	beq.w	80103b2 <_svfiprintf_r+0x1c6>
 8010264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010266:	445a      	add	r2, fp
 8010268:	9209      	str	r2, [sp, #36]	@ 0x24
 801026a:	f89a 3000 	ldrb.w	r3, [sl]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 809f 	beq.w	80103b2 <_svfiprintf_r+0x1c6>
 8010274:	2300      	movs	r3, #0
 8010276:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801027a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801027e:	f10a 0a01 	add.w	sl, sl, #1
 8010282:	9304      	str	r3, [sp, #16]
 8010284:	9307      	str	r3, [sp, #28]
 8010286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801028a:	931a      	str	r3, [sp, #104]	@ 0x68
 801028c:	4654      	mov	r4, sl
 801028e:	2205      	movs	r2, #5
 8010290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010294:	484e      	ldr	r0, [pc, #312]	@ (80103d0 <_svfiprintf_r+0x1e4>)
 8010296:	f7ef ffc3 	bl	8000220 <memchr>
 801029a:	9a04      	ldr	r2, [sp, #16]
 801029c:	b9d8      	cbnz	r0, 80102d6 <_svfiprintf_r+0xea>
 801029e:	06d0      	lsls	r0, r2, #27
 80102a0:	bf44      	itt	mi
 80102a2:	2320      	movmi	r3, #32
 80102a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102a8:	0711      	lsls	r1, r2, #28
 80102aa:	bf44      	itt	mi
 80102ac:	232b      	movmi	r3, #43	@ 0x2b
 80102ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102b2:	f89a 3000 	ldrb.w	r3, [sl]
 80102b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80102b8:	d015      	beq.n	80102e6 <_svfiprintf_r+0xfa>
 80102ba:	9a07      	ldr	r2, [sp, #28]
 80102bc:	4654      	mov	r4, sl
 80102be:	2000      	movs	r0, #0
 80102c0:	f04f 0c0a 	mov.w	ip, #10
 80102c4:	4621      	mov	r1, r4
 80102c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ca:	3b30      	subs	r3, #48	@ 0x30
 80102cc:	2b09      	cmp	r3, #9
 80102ce:	d94b      	bls.n	8010368 <_svfiprintf_r+0x17c>
 80102d0:	b1b0      	cbz	r0, 8010300 <_svfiprintf_r+0x114>
 80102d2:	9207      	str	r2, [sp, #28]
 80102d4:	e014      	b.n	8010300 <_svfiprintf_r+0x114>
 80102d6:	eba0 0308 	sub.w	r3, r0, r8
 80102da:	fa09 f303 	lsl.w	r3, r9, r3
 80102de:	4313      	orrs	r3, r2
 80102e0:	9304      	str	r3, [sp, #16]
 80102e2:	46a2      	mov	sl, r4
 80102e4:	e7d2      	b.n	801028c <_svfiprintf_r+0xa0>
 80102e6:	9b03      	ldr	r3, [sp, #12]
 80102e8:	1d19      	adds	r1, r3, #4
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	9103      	str	r1, [sp, #12]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	bfbb      	ittet	lt
 80102f2:	425b      	neglt	r3, r3
 80102f4:	f042 0202 	orrlt.w	r2, r2, #2
 80102f8:	9307      	strge	r3, [sp, #28]
 80102fa:	9307      	strlt	r3, [sp, #28]
 80102fc:	bfb8      	it	lt
 80102fe:	9204      	strlt	r2, [sp, #16]
 8010300:	7823      	ldrb	r3, [r4, #0]
 8010302:	2b2e      	cmp	r3, #46	@ 0x2e
 8010304:	d10a      	bne.n	801031c <_svfiprintf_r+0x130>
 8010306:	7863      	ldrb	r3, [r4, #1]
 8010308:	2b2a      	cmp	r3, #42	@ 0x2a
 801030a:	d132      	bne.n	8010372 <_svfiprintf_r+0x186>
 801030c:	9b03      	ldr	r3, [sp, #12]
 801030e:	1d1a      	adds	r2, r3, #4
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	9203      	str	r2, [sp, #12]
 8010314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010318:	3402      	adds	r4, #2
 801031a:	9305      	str	r3, [sp, #20]
 801031c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80103e0 <_svfiprintf_r+0x1f4>
 8010320:	7821      	ldrb	r1, [r4, #0]
 8010322:	2203      	movs	r2, #3
 8010324:	4650      	mov	r0, sl
 8010326:	f7ef ff7b 	bl	8000220 <memchr>
 801032a:	b138      	cbz	r0, 801033c <_svfiprintf_r+0x150>
 801032c:	9b04      	ldr	r3, [sp, #16]
 801032e:	eba0 000a 	sub.w	r0, r0, sl
 8010332:	2240      	movs	r2, #64	@ 0x40
 8010334:	4082      	lsls	r2, r0
 8010336:	4313      	orrs	r3, r2
 8010338:	3401      	adds	r4, #1
 801033a:	9304      	str	r3, [sp, #16]
 801033c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010340:	4824      	ldr	r0, [pc, #144]	@ (80103d4 <_svfiprintf_r+0x1e8>)
 8010342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010346:	2206      	movs	r2, #6
 8010348:	f7ef ff6a 	bl	8000220 <memchr>
 801034c:	2800      	cmp	r0, #0
 801034e:	d036      	beq.n	80103be <_svfiprintf_r+0x1d2>
 8010350:	4b21      	ldr	r3, [pc, #132]	@ (80103d8 <_svfiprintf_r+0x1ec>)
 8010352:	bb1b      	cbnz	r3, 801039c <_svfiprintf_r+0x1b0>
 8010354:	9b03      	ldr	r3, [sp, #12]
 8010356:	3307      	adds	r3, #7
 8010358:	f023 0307 	bic.w	r3, r3, #7
 801035c:	3308      	adds	r3, #8
 801035e:	9303      	str	r3, [sp, #12]
 8010360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010362:	4433      	add	r3, r6
 8010364:	9309      	str	r3, [sp, #36]	@ 0x24
 8010366:	e76a      	b.n	801023e <_svfiprintf_r+0x52>
 8010368:	fb0c 3202 	mla	r2, ip, r2, r3
 801036c:	460c      	mov	r4, r1
 801036e:	2001      	movs	r0, #1
 8010370:	e7a8      	b.n	80102c4 <_svfiprintf_r+0xd8>
 8010372:	2300      	movs	r3, #0
 8010374:	3401      	adds	r4, #1
 8010376:	9305      	str	r3, [sp, #20]
 8010378:	4619      	mov	r1, r3
 801037a:	f04f 0c0a 	mov.w	ip, #10
 801037e:	4620      	mov	r0, r4
 8010380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010384:	3a30      	subs	r2, #48	@ 0x30
 8010386:	2a09      	cmp	r2, #9
 8010388:	d903      	bls.n	8010392 <_svfiprintf_r+0x1a6>
 801038a:	2b00      	cmp	r3, #0
 801038c:	d0c6      	beq.n	801031c <_svfiprintf_r+0x130>
 801038e:	9105      	str	r1, [sp, #20]
 8010390:	e7c4      	b.n	801031c <_svfiprintf_r+0x130>
 8010392:	fb0c 2101 	mla	r1, ip, r1, r2
 8010396:	4604      	mov	r4, r0
 8010398:	2301      	movs	r3, #1
 801039a:	e7f0      	b.n	801037e <_svfiprintf_r+0x192>
 801039c:	ab03      	add	r3, sp, #12
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	462a      	mov	r2, r5
 80103a2:	4b0e      	ldr	r3, [pc, #56]	@ (80103dc <_svfiprintf_r+0x1f0>)
 80103a4:	a904      	add	r1, sp, #16
 80103a6:	4638      	mov	r0, r7
 80103a8:	f7fc fe6e 	bl	800d088 <_printf_float>
 80103ac:	1c42      	adds	r2, r0, #1
 80103ae:	4606      	mov	r6, r0
 80103b0:	d1d6      	bne.n	8010360 <_svfiprintf_r+0x174>
 80103b2:	89ab      	ldrh	r3, [r5, #12]
 80103b4:	065b      	lsls	r3, r3, #25
 80103b6:	f53f af2d 	bmi.w	8010214 <_svfiprintf_r+0x28>
 80103ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103bc:	e72c      	b.n	8010218 <_svfiprintf_r+0x2c>
 80103be:	ab03      	add	r3, sp, #12
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	462a      	mov	r2, r5
 80103c4:	4b05      	ldr	r3, [pc, #20]	@ (80103dc <_svfiprintf_r+0x1f0>)
 80103c6:	a904      	add	r1, sp, #16
 80103c8:	4638      	mov	r0, r7
 80103ca:	f7fd f99f 	bl	800d70c <_printf_i>
 80103ce:	e7ed      	b.n	80103ac <_svfiprintf_r+0x1c0>
 80103d0:	08011a12 	.word	0x08011a12
 80103d4:	08011a1c 	.word	0x08011a1c
 80103d8:	0800d089 	.word	0x0800d089
 80103dc:	08010137 	.word	0x08010137
 80103e0:	08011a18 	.word	0x08011a18

080103e4 <__ascii_mbtowc>:
 80103e4:	b082      	sub	sp, #8
 80103e6:	b901      	cbnz	r1, 80103ea <__ascii_mbtowc+0x6>
 80103e8:	a901      	add	r1, sp, #4
 80103ea:	b142      	cbz	r2, 80103fe <__ascii_mbtowc+0x1a>
 80103ec:	b14b      	cbz	r3, 8010402 <__ascii_mbtowc+0x1e>
 80103ee:	7813      	ldrb	r3, [r2, #0]
 80103f0:	600b      	str	r3, [r1, #0]
 80103f2:	7812      	ldrb	r2, [r2, #0]
 80103f4:	1e10      	subs	r0, r2, #0
 80103f6:	bf18      	it	ne
 80103f8:	2001      	movne	r0, #1
 80103fa:	b002      	add	sp, #8
 80103fc:	4770      	bx	lr
 80103fe:	4610      	mov	r0, r2
 8010400:	e7fb      	b.n	80103fa <__ascii_mbtowc+0x16>
 8010402:	f06f 0001 	mvn.w	r0, #1
 8010406:	e7f8      	b.n	80103fa <__ascii_mbtowc+0x16>

08010408 <__sflush_r>:
 8010408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010410:	0716      	lsls	r6, r2, #28
 8010412:	4605      	mov	r5, r0
 8010414:	460c      	mov	r4, r1
 8010416:	d454      	bmi.n	80104c2 <__sflush_r+0xba>
 8010418:	684b      	ldr	r3, [r1, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	dc02      	bgt.n	8010424 <__sflush_r+0x1c>
 801041e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010420:	2b00      	cmp	r3, #0
 8010422:	dd48      	ble.n	80104b6 <__sflush_r+0xae>
 8010424:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010426:	2e00      	cmp	r6, #0
 8010428:	d045      	beq.n	80104b6 <__sflush_r+0xae>
 801042a:	2300      	movs	r3, #0
 801042c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010430:	682f      	ldr	r7, [r5, #0]
 8010432:	6a21      	ldr	r1, [r4, #32]
 8010434:	602b      	str	r3, [r5, #0]
 8010436:	d030      	beq.n	801049a <__sflush_r+0x92>
 8010438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	0759      	lsls	r1, r3, #29
 801043e:	d505      	bpl.n	801044c <__sflush_r+0x44>
 8010440:	6863      	ldr	r3, [r4, #4]
 8010442:	1ad2      	subs	r2, r2, r3
 8010444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010446:	b10b      	cbz	r3, 801044c <__sflush_r+0x44>
 8010448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801044a:	1ad2      	subs	r2, r2, r3
 801044c:	2300      	movs	r3, #0
 801044e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010450:	6a21      	ldr	r1, [r4, #32]
 8010452:	4628      	mov	r0, r5
 8010454:	47b0      	blx	r6
 8010456:	1c43      	adds	r3, r0, #1
 8010458:	89a3      	ldrh	r3, [r4, #12]
 801045a:	d106      	bne.n	801046a <__sflush_r+0x62>
 801045c:	6829      	ldr	r1, [r5, #0]
 801045e:	291d      	cmp	r1, #29
 8010460:	d82b      	bhi.n	80104ba <__sflush_r+0xb2>
 8010462:	4a2a      	ldr	r2, [pc, #168]	@ (801050c <__sflush_r+0x104>)
 8010464:	410a      	asrs	r2, r1
 8010466:	07d6      	lsls	r6, r2, #31
 8010468:	d427      	bmi.n	80104ba <__sflush_r+0xb2>
 801046a:	2200      	movs	r2, #0
 801046c:	6062      	str	r2, [r4, #4]
 801046e:	04d9      	lsls	r1, r3, #19
 8010470:	6922      	ldr	r2, [r4, #16]
 8010472:	6022      	str	r2, [r4, #0]
 8010474:	d504      	bpl.n	8010480 <__sflush_r+0x78>
 8010476:	1c42      	adds	r2, r0, #1
 8010478:	d101      	bne.n	801047e <__sflush_r+0x76>
 801047a:	682b      	ldr	r3, [r5, #0]
 801047c:	b903      	cbnz	r3, 8010480 <__sflush_r+0x78>
 801047e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010482:	602f      	str	r7, [r5, #0]
 8010484:	b1b9      	cbz	r1, 80104b6 <__sflush_r+0xae>
 8010486:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801048a:	4299      	cmp	r1, r3
 801048c:	d002      	beq.n	8010494 <__sflush_r+0x8c>
 801048e:	4628      	mov	r0, r5
 8010490:	f7ff face 	bl	800fa30 <_free_r>
 8010494:	2300      	movs	r3, #0
 8010496:	6363      	str	r3, [r4, #52]	@ 0x34
 8010498:	e00d      	b.n	80104b6 <__sflush_r+0xae>
 801049a:	2301      	movs	r3, #1
 801049c:	4628      	mov	r0, r5
 801049e:	47b0      	blx	r6
 80104a0:	4602      	mov	r2, r0
 80104a2:	1c50      	adds	r0, r2, #1
 80104a4:	d1c9      	bne.n	801043a <__sflush_r+0x32>
 80104a6:	682b      	ldr	r3, [r5, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d0c6      	beq.n	801043a <__sflush_r+0x32>
 80104ac:	2b1d      	cmp	r3, #29
 80104ae:	d001      	beq.n	80104b4 <__sflush_r+0xac>
 80104b0:	2b16      	cmp	r3, #22
 80104b2:	d11e      	bne.n	80104f2 <__sflush_r+0xea>
 80104b4:	602f      	str	r7, [r5, #0]
 80104b6:	2000      	movs	r0, #0
 80104b8:	e022      	b.n	8010500 <__sflush_r+0xf8>
 80104ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104be:	b21b      	sxth	r3, r3
 80104c0:	e01b      	b.n	80104fa <__sflush_r+0xf2>
 80104c2:	690f      	ldr	r7, [r1, #16]
 80104c4:	2f00      	cmp	r7, #0
 80104c6:	d0f6      	beq.n	80104b6 <__sflush_r+0xae>
 80104c8:	0793      	lsls	r3, r2, #30
 80104ca:	680e      	ldr	r6, [r1, #0]
 80104cc:	bf08      	it	eq
 80104ce:	694b      	ldreq	r3, [r1, #20]
 80104d0:	600f      	str	r7, [r1, #0]
 80104d2:	bf18      	it	ne
 80104d4:	2300      	movne	r3, #0
 80104d6:	eba6 0807 	sub.w	r8, r6, r7
 80104da:	608b      	str	r3, [r1, #8]
 80104dc:	f1b8 0f00 	cmp.w	r8, #0
 80104e0:	dde9      	ble.n	80104b6 <__sflush_r+0xae>
 80104e2:	6a21      	ldr	r1, [r4, #32]
 80104e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80104e6:	4643      	mov	r3, r8
 80104e8:	463a      	mov	r2, r7
 80104ea:	4628      	mov	r0, r5
 80104ec:	47b0      	blx	r6
 80104ee:	2800      	cmp	r0, #0
 80104f0:	dc08      	bgt.n	8010504 <__sflush_r+0xfc>
 80104f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104fa:	81a3      	strh	r3, [r4, #12]
 80104fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010504:	4407      	add	r7, r0
 8010506:	eba8 0800 	sub.w	r8, r8, r0
 801050a:	e7e7      	b.n	80104dc <__sflush_r+0xd4>
 801050c:	dfbffffe 	.word	0xdfbffffe

08010510 <_fflush_r>:
 8010510:	b538      	push	{r3, r4, r5, lr}
 8010512:	690b      	ldr	r3, [r1, #16]
 8010514:	4605      	mov	r5, r0
 8010516:	460c      	mov	r4, r1
 8010518:	b913      	cbnz	r3, 8010520 <_fflush_r+0x10>
 801051a:	2500      	movs	r5, #0
 801051c:	4628      	mov	r0, r5
 801051e:	bd38      	pop	{r3, r4, r5, pc}
 8010520:	b118      	cbz	r0, 801052a <_fflush_r+0x1a>
 8010522:	6a03      	ldr	r3, [r0, #32]
 8010524:	b90b      	cbnz	r3, 801052a <_fflush_r+0x1a>
 8010526:	f7fd fcdd 	bl	800dee4 <__sinit>
 801052a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d0f3      	beq.n	801051a <_fflush_r+0xa>
 8010532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010534:	07d0      	lsls	r0, r2, #31
 8010536:	d404      	bmi.n	8010542 <_fflush_r+0x32>
 8010538:	0599      	lsls	r1, r3, #22
 801053a:	d402      	bmi.n	8010542 <_fflush_r+0x32>
 801053c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801053e:	f7fe fbe4 	bl	800ed0a <__retarget_lock_acquire_recursive>
 8010542:	4628      	mov	r0, r5
 8010544:	4621      	mov	r1, r4
 8010546:	f7ff ff5f 	bl	8010408 <__sflush_r>
 801054a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801054c:	07da      	lsls	r2, r3, #31
 801054e:	4605      	mov	r5, r0
 8010550:	d4e4      	bmi.n	801051c <_fflush_r+0xc>
 8010552:	89a3      	ldrh	r3, [r4, #12]
 8010554:	059b      	lsls	r3, r3, #22
 8010556:	d4e1      	bmi.n	801051c <_fflush_r+0xc>
 8010558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801055a:	f7fe fbd7 	bl	800ed0c <__retarget_lock_release_recursive>
 801055e:	e7dd      	b.n	801051c <_fflush_r+0xc>

08010560 <_Balloc>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	69c6      	ldr	r6, [r0, #28]
 8010564:	4604      	mov	r4, r0
 8010566:	460d      	mov	r5, r1
 8010568:	b976      	cbnz	r6, 8010588 <_Balloc+0x28>
 801056a:	2010      	movs	r0, #16
 801056c:	f7fc ffb6 	bl	800d4dc <malloc>
 8010570:	4602      	mov	r2, r0
 8010572:	61e0      	str	r0, [r4, #28]
 8010574:	b920      	cbnz	r0, 8010580 <_Balloc+0x20>
 8010576:	4b18      	ldr	r3, [pc, #96]	@ (80105d8 <_Balloc+0x78>)
 8010578:	4818      	ldr	r0, [pc, #96]	@ (80105dc <_Balloc+0x7c>)
 801057a:	216b      	movs	r1, #107	@ 0x6b
 801057c:	f7fe fbee 	bl	800ed5c <__assert_func>
 8010580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010584:	6006      	str	r6, [r0, #0]
 8010586:	60c6      	str	r6, [r0, #12]
 8010588:	69e6      	ldr	r6, [r4, #28]
 801058a:	68f3      	ldr	r3, [r6, #12]
 801058c:	b183      	cbz	r3, 80105b0 <_Balloc+0x50>
 801058e:	69e3      	ldr	r3, [r4, #28]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010596:	b9b8      	cbnz	r0, 80105c8 <_Balloc+0x68>
 8010598:	2101      	movs	r1, #1
 801059a:	fa01 f605 	lsl.w	r6, r1, r5
 801059e:	1d72      	adds	r2, r6, #5
 80105a0:	0092      	lsls	r2, r2, #2
 80105a2:	4620      	mov	r0, r4
 80105a4:	f000 fe9f 	bl	80112e6 <_calloc_r>
 80105a8:	b160      	cbz	r0, 80105c4 <_Balloc+0x64>
 80105aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80105ae:	e00e      	b.n	80105ce <_Balloc+0x6e>
 80105b0:	2221      	movs	r2, #33	@ 0x21
 80105b2:	2104      	movs	r1, #4
 80105b4:	4620      	mov	r0, r4
 80105b6:	f000 fe96 	bl	80112e6 <_calloc_r>
 80105ba:	69e3      	ldr	r3, [r4, #28]
 80105bc:	60f0      	str	r0, [r6, #12]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1e4      	bne.n	801058e <_Balloc+0x2e>
 80105c4:	2000      	movs	r0, #0
 80105c6:	bd70      	pop	{r4, r5, r6, pc}
 80105c8:	6802      	ldr	r2, [r0, #0]
 80105ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105ce:	2300      	movs	r3, #0
 80105d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105d4:	e7f7      	b.n	80105c6 <_Balloc+0x66>
 80105d6:	bf00      	nop
 80105d8:	08011932 	.word	0x08011932
 80105dc:	08011a23 	.word	0x08011a23

080105e0 <_Bfree>:
 80105e0:	b570      	push	{r4, r5, r6, lr}
 80105e2:	69c6      	ldr	r6, [r0, #28]
 80105e4:	4605      	mov	r5, r0
 80105e6:	460c      	mov	r4, r1
 80105e8:	b976      	cbnz	r6, 8010608 <_Bfree+0x28>
 80105ea:	2010      	movs	r0, #16
 80105ec:	f7fc ff76 	bl	800d4dc <malloc>
 80105f0:	4602      	mov	r2, r0
 80105f2:	61e8      	str	r0, [r5, #28]
 80105f4:	b920      	cbnz	r0, 8010600 <_Bfree+0x20>
 80105f6:	4b09      	ldr	r3, [pc, #36]	@ (801061c <_Bfree+0x3c>)
 80105f8:	4809      	ldr	r0, [pc, #36]	@ (8010620 <_Bfree+0x40>)
 80105fa:	218f      	movs	r1, #143	@ 0x8f
 80105fc:	f7fe fbae 	bl	800ed5c <__assert_func>
 8010600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010604:	6006      	str	r6, [r0, #0]
 8010606:	60c6      	str	r6, [r0, #12]
 8010608:	b13c      	cbz	r4, 801061a <_Bfree+0x3a>
 801060a:	69eb      	ldr	r3, [r5, #28]
 801060c:	6862      	ldr	r2, [r4, #4]
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010614:	6021      	str	r1, [r4, #0]
 8010616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801061a:	bd70      	pop	{r4, r5, r6, pc}
 801061c:	08011932 	.word	0x08011932
 8010620:	08011a23 	.word	0x08011a23

08010624 <__multadd>:
 8010624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	690d      	ldr	r5, [r1, #16]
 801062a:	4607      	mov	r7, r0
 801062c:	460c      	mov	r4, r1
 801062e:	461e      	mov	r6, r3
 8010630:	f101 0c14 	add.w	ip, r1, #20
 8010634:	2000      	movs	r0, #0
 8010636:	f8dc 3000 	ldr.w	r3, [ip]
 801063a:	b299      	uxth	r1, r3
 801063c:	fb02 6101 	mla	r1, r2, r1, r6
 8010640:	0c1e      	lsrs	r6, r3, #16
 8010642:	0c0b      	lsrs	r3, r1, #16
 8010644:	fb02 3306 	mla	r3, r2, r6, r3
 8010648:	b289      	uxth	r1, r1
 801064a:	3001      	adds	r0, #1
 801064c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010650:	4285      	cmp	r5, r0
 8010652:	f84c 1b04 	str.w	r1, [ip], #4
 8010656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801065a:	dcec      	bgt.n	8010636 <__multadd+0x12>
 801065c:	b30e      	cbz	r6, 80106a2 <__multadd+0x7e>
 801065e:	68a3      	ldr	r3, [r4, #8]
 8010660:	42ab      	cmp	r3, r5
 8010662:	dc19      	bgt.n	8010698 <__multadd+0x74>
 8010664:	6861      	ldr	r1, [r4, #4]
 8010666:	4638      	mov	r0, r7
 8010668:	3101      	adds	r1, #1
 801066a:	f7ff ff79 	bl	8010560 <_Balloc>
 801066e:	4680      	mov	r8, r0
 8010670:	b928      	cbnz	r0, 801067e <__multadd+0x5a>
 8010672:	4602      	mov	r2, r0
 8010674:	4b0c      	ldr	r3, [pc, #48]	@ (80106a8 <__multadd+0x84>)
 8010676:	480d      	ldr	r0, [pc, #52]	@ (80106ac <__multadd+0x88>)
 8010678:	21ba      	movs	r1, #186	@ 0xba
 801067a:	f7fe fb6f 	bl	800ed5c <__assert_func>
 801067e:	6922      	ldr	r2, [r4, #16]
 8010680:	3202      	adds	r2, #2
 8010682:	f104 010c 	add.w	r1, r4, #12
 8010686:	0092      	lsls	r2, r2, #2
 8010688:	300c      	adds	r0, #12
 801068a:	f7fe fb40 	bl	800ed0e <memcpy>
 801068e:	4621      	mov	r1, r4
 8010690:	4638      	mov	r0, r7
 8010692:	f7ff ffa5 	bl	80105e0 <_Bfree>
 8010696:	4644      	mov	r4, r8
 8010698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801069c:	3501      	adds	r5, #1
 801069e:	615e      	str	r6, [r3, #20]
 80106a0:	6125      	str	r5, [r4, #16]
 80106a2:	4620      	mov	r0, r4
 80106a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a8:	080119a1 	.word	0x080119a1
 80106ac:	08011a23 	.word	0x08011a23

080106b0 <__s2b>:
 80106b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106b4:	460c      	mov	r4, r1
 80106b6:	4615      	mov	r5, r2
 80106b8:	461f      	mov	r7, r3
 80106ba:	2209      	movs	r2, #9
 80106bc:	3308      	adds	r3, #8
 80106be:	4606      	mov	r6, r0
 80106c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80106c4:	2100      	movs	r1, #0
 80106c6:	2201      	movs	r2, #1
 80106c8:	429a      	cmp	r2, r3
 80106ca:	db09      	blt.n	80106e0 <__s2b+0x30>
 80106cc:	4630      	mov	r0, r6
 80106ce:	f7ff ff47 	bl	8010560 <_Balloc>
 80106d2:	b940      	cbnz	r0, 80106e6 <__s2b+0x36>
 80106d4:	4602      	mov	r2, r0
 80106d6:	4b19      	ldr	r3, [pc, #100]	@ (801073c <__s2b+0x8c>)
 80106d8:	4819      	ldr	r0, [pc, #100]	@ (8010740 <__s2b+0x90>)
 80106da:	21d3      	movs	r1, #211	@ 0xd3
 80106dc:	f7fe fb3e 	bl	800ed5c <__assert_func>
 80106e0:	0052      	lsls	r2, r2, #1
 80106e2:	3101      	adds	r1, #1
 80106e4:	e7f0      	b.n	80106c8 <__s2b+0x18>
 80106e6:	9b08      	ldr	r3, [sp, #32]
 80106e8:	6143      	str	r3, [r0, #20]
 80106ea:	2d09      	cmp	r5, #9
 80106ec:	f04f 0301 	mov.w	r3, #1
 80106f0:	6103      	str	r3, [r0, #16]
 80106f2:	dd16      	ble.n	8010722 <__s2b+0x72>
 80106f4:	f104 0909 	add.w	r9, r4, #9
 80106f8:	46c8      	mov	r8, r9
 80106fa:	442c      	add	r4, r5
 80106fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010700:	4601      	mov	r1, r0
 8010702:	3b30      	subs	r3, #48	@ 0x30
 8010704:	220a      	movs	r2, #10
 8010706:	4630      	mov	r0, r6
 8010708:	f7ff ff8c 	bl	8010624 <__multadd>
 801070c:	45a0      	cmp	r8, r4
 801070e:	d1f5      	bne.n	80106fc <__s2b+0x4c>
 8010710:	f1a5 0408 	sub.w	r4, r5, #8
 8010714:	444c      	add	r4, r9
 8010716:	1b2d      	subs	r5, r5, r4
 8010718:	1963      	adds	r3, r4, r5
 801071a:	42bb      	cmp	r3, r7
 801071c:	db04      	blt.n	8010728 <__s2b+0x78>
 801071e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010722:	340a      	adds	r4, #10
 8010724:	2509      	movs	r5, #9
 8010726:	e7f6      	b.n	8010716 <__s2b+0x66>
 8010728:	f814 3b01 	ldrb.w	r3, [r4], #1
 801072c:	4601      	mov	r1, r0
 801072e:	3b30      	subs	r3, #48	@ 0x30
 8010730:	220a      	movs	r2, #10
 8010732:	4630      	mov	r0, r6
 8010734:	f7ff ff76 	bl	8010624 <__multadd>
 8010738:	e7ee      	b.n	8010718 <__s2b+0x68>
 801073a:	bf00      	nop
 801073c:	080119a1 	.word	0x080119a1
 8010740:	08011a23 	.word	0x08011a23

08010744 <__hi0bits>:
 8010744:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010748:	4603      	mov	r3, r0
 801074a:	bf36      	itet	cc
 801074c:	0403      	lslcc	r3, r0, #16
 801074e:	2000      	movcs	r0, #0
 8010750:	2010      	movcc	r0, #16
 8010752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010756:	bf3c      	itt	cc
 8010758:	021b      	lslcc	r3, r3, #8
 801075a:	3008      	addcc	r0, #8
 801075c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010760:	bf3c      	itt	cc
 8010762:	011b      	lslcc	r3, r3, #4
 8010764:	3004      	addcc	r0, #4
 8010766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801076a:	bf3c      	itt	cc
 801076c:	009b      	lslcc	r3, r3, #2
 801076e:	3002      	addcc	r0, #2
 8010770:	2b00      	cmp	r3, #0
 8010772:	db05      	blt.n	8010780 <__hi0bits+0x3c>
 8010774:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010778:	f100 0001 	add.w	r0, r0, #1
 801077c:	bf08      	it	eq
 801077e:	2020      	moveq	r0, #32
 8010780:	4770      	bx	lr

08010782 <__lo0bits>:
 8010782:	6803      	ldr	r3, [r0, #0]
 8010784:	4602      	mov	r2, r0
 8010786:	f013 0007 	ands.w	r0, r3, #7
 801078a:	d00b      	beq.n	80107a4 <__lo0bits+0x22>
 801078c:	07d9      	lsls	r1, r3, #31
 801078e:	d421      	bmi.n	80107d4 <__lo0bits+0x52>
 8010790:	0798      	lsls	r0, r3, #30
 8010792:	bf49      	itett	mi
 8010794:	085b      	lsrmi	r3, r3, #1
 8010796:	089b      	lsrpl	r3, r3, #2
 8010798:	2001      	movmi	r0, #1
 801079a:	6013      	strmi	r3, [r2, #0]
 801079c:	bf5c      	itt	pl
 801079e:	6013      	strpl	r3, [r2, #0]
 80107a0:	2002      	movpl	r0, #2
 80107a2:	4770      	bx	lr
 80107a4:	b299      	uxth	r1, r3
 80107a6:	b909      	cbnz	r1, 80107ac <__lo0bits+0x2a>
 80107a8:	0c1b      	lsrs	r3, r3, #16
 80107aa:	2010      	movs	r0, #16
 80107ac:	b2d9      	uxtb	r1, r3
 80107ae:	b909      	cbnz	r1, 80107b4 <__lo0bits+0x32>
 80107b0:	3008      	adds	r0, #8
 80107b2:	0a1b      	lsrs	r3, r3, #8
 80107b4:	0719      	lsls	r1, r3, #28
 80107b6:	bf04      	itt	eq
 80107b8:	091b      	lsreq	r3, r3, #4
 80107ba:	3004      	addeq	r0, #4
 80107bc:	0799      	lsls	r1, r3, #30
 80107be:	bf04      	itt	eq
 80107c0:	089b      	lsreq	r3, r3, #2
 80107c2:	3002      	addeq	r0, #2
 80107c4:	07d9      	lsls	r1, r3, #31
 80107c6:	d403      	bmi.n	80107d0 <__lo0bits+0x4e>
 80107c8:	085b      	lsrs	r3, r3, #1
 80107ca:	f100 0001 	add.w	r0, r0, #1
 80107ce:	d003      	beq.n	80107d8 <__lo0bits+0x56>
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	4770      	bx	lr
 80107d4:	2000      	movs	r0, #0
 80107d6:	4770      	bx	lr
 80107d8:	2020      	movs	r0, #32
 80107da:	4770      	bx	lr

080107dc <__i2b>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	460c      	mov	r4, r1
 80107e0:	2101      	movs	r1, #1
 80107e2:	f7ff febd 	bl	8010560 <_Balloc>
 80107e6:	4602      	mov	r2, r0
 80107e8:	b928      	cbnz	r0, 80107f6 <__i2b+0x1a>
 80107ea:	4b05      	ldr	r3, [pc, #20]	@ (8010800 <__i2b+0x24>)
 80107ec:	4805      	ldr	r0, [pc, #20]	@ (8010804 <__i2b+0x28>)
 80107ee:	f240 1145 	movw	r1, #325	@ 0x145
 80107f2:	f7fe fab3 	bl	800ed5c <__assert_func>
 80107f6:	2301      	movs	r3, #1
 80107f8:	6144      	str	r4, [r0, #20]
 80107fa:	6103      	str	r3, [r0, #16]
 80107fc:	bd10      	pop	{r4, pc}
 80107fe:	bf00      	nop
 8010800:	080119a1 	.word	0x080119a1
 8010804:	08011a23 	.word	0x08011a23

08010808 <__multiply>:
 8010808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801080c:	4614      	mov	r4, r2
 801080e:	690a      	ldr	r2, [r1, #16]
 8010810:	6923      	ldr	r3, [r4, #16]
 8010812:	429a      	cmp	r2, r3
 8010814:	bfa8      	it	ge
 8010816:	4623      	movge	r3, r4
 8010818:	460f      	mov	r7, r1
 801081a:	bfa4      	itt	ge
 801081c:	460c      	movge	r4, r1
 801081e:	461f      	movge	r7, r3
 8010820:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010824:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010828:	68a3      	ldr	r3, [r4, #8]
 801082a:	6861      	ldr	r1, [r4, #4]
 801082c:	eb0a 0609 	add.w	r6, sl, r9
 8010830:	42b3      	cmp	r3, r6
 8010832:	b085      	sub	sp, #20
 8010834:	bfb8      	it	lt
 8010836:	3101      	addlt	r1, #1
 8010838:	f7ff fe92 	bl	8010560 <_Balloc>
 801083c:	b930      	cbnz	r0, 801084c <__multiply+0x44>
 801083e:	4602      	mov	r2, r0
 8010840:	4b44      	ldr	r3, [pc, #272]	@ (8010954 <__multiply+0x14c>)
 8010842:	4845      	ldr	r0, [pc, #276]	@ (8010958 <__multiply+0x150>)
 8010844:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010848:	f7fe fa88 	bl	800ed5c <__assert_func>
 801084c:	f100 0514 	add.w	r5, r0, #20
 8010850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010854:	462b      	mov	r3, r5
 8010856:	2200      	movs	r2, #0
 8010858:	4543      	cmp	r3, r8
 801085a:	d321      	bcc.n	80108a0 <__multiply+0x98>
 801085c:	f107 0114 	add.w	r1, r7, #20
 8010860:	f104 0214 	add.w	r2, r4, #20
 8010864:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010868:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801086c:	9302      	str	r3, [sp, #8]
 801086e:	1b13      	subs	r3, r2, r4
 8010870:	3b15      	subs	r3, #21
 8010872:	f023 0303 	bic.w	r3, r3, #3
 8010876:	3304      	adds	r3, #4
 8010878:	f104 0715 	add.w	r7, r4, #21
 801087c:	42ba      	cmp	r2, r7
 801087e:	bf38      	it	cc
 8010880:	2304      	movcc	r3, #4
 8010882:	9301      	str	r3, [sp, #4]
 8010884:	9b02      	ldr	r3, [sp, #8]
 8010886:	9103      	str	r1, [sp, #12]
 8010888:	428b      	cmp	r3, r1
 801088a:	d80c      	bhi.n	80108a6 <__multiply+0x9e>
 801088c:	2e00      	cmp	r6, #0
 801088e:	dd03      	ble.n	8010898 <__multiply+0x90>
 8010890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010894:	2b00      	cmp	r3, #0
 8010896:	d05b      	beq.n	8010950 <__multiply+0x148>
 8010898:	6106      	str	r6, [r0, #16]
 801089a:	b005      	add	sp, #20
 801089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a0:	f843 2b04 	str.w	r2, [r3], #4
 80108a4:	e7d8      	b.n	8010858 <__multiply+0x50>
 80108a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80108aa:	f1ba 0f00 	cmp.w	sl, #0
 80108ae:	d024      	beq.n	80108fa <__multiply+0xf2>
 80108b0:	f104 0e14 	add.w	lr, r4, #20
 80108b4:	46a9      	mov	r9, r5
 80108b6:	f04f 0c00 	mov.w	ip, #0
 80108ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108be:	f8d9 3000 	ldr.w	r3, [r9]
 80108c2:	fa1f fb87 	uxth.w	fp, r7
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80108cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80108d0:	f8d9 7000 	ldr.w	r7, [r9]
 80108d4:	4463      	add	r3, ip
 80108d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80108da:	fb0a c70b 	mla	r7, sl, fp, ip
 80108de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80108e8:	4572      	cmp	r2, lr
 80108ea:	f849 3b04 	str.w	r3, [r9], #4
 80108ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80108f2:	d8e2      	bhi.n	80108ba <__multiply+0xb2>
 80108f4:	9b01      	ldr	r3, [sp, #4]
 80108f6:	f845 c003 	str.w	ip, [r5, r3]
 80108fa:	9b03      	ldr	r3, [sp, #12]
 80108fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010900:	3104      	adds	r1, #4
 8010902:	f1b9 0f00 	cmp.w	r9, #0
 8010906:	d021      	beq.n	801094c <__multiply+0x144>
 8010908:	682b      	ldr	r3, [r5, #0]
 801090a:	f104 0c14 	add.w	ip, r4, #20
 801090e:	46ae      	mov	lr, r5
 8010910:	f04f 0a00 	mov.w	sl, #0
 8010914:	f8bc b000 	ldrh.w	fp, [ip]
 8010918:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801091c:	fb09 770b 	mla	r7, r9, fp, r7
 8010920:	4457      	add	r7, sl
 8010922:	b29b      	uxth	r3, r3
 8010924:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010928:	f84e 3b04 	str.w	r3, [lr], #4
 801092c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010934:	f8be 3000 	ldrh.w	r3, [lr]
 8010938:	fb09 330a 	mla	r3, r9, sl, r3
 801093c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010940:	4562      	cmp	r2, ip
 8010942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010946:	d8e5      	bhi.n	8010914 <__multiply+0x10c>
 8010948:	9f01      	ldr	r7, [sp, #4]
 801094a:	51eb      	str	r3, [r5, r7]
 801094c:	3504      	adds	r5, #4
 801094e:	e799      	b.n	8010884 <__multiply+0x7c>
 8010950:	3e01      	subs	r6, #1
 8010952:	e79b      	b.n	801088c <__multiply+0x84>
 8010954:	080119a1 	.word	0x080119a1
 8010958:	08011a23 	.word	0x08011a23

0801095c <__pow5mult>:
 801095c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010960:	4615      	mov	r5, r2
 8010962:	f012 0203 	ands.w	r2, r2, #3
 8010966:	4607      	mov	r7, r0
 8010968:	460e      	mov	r6, r1
 801096a:	d007      	beq.n	801097c <__pow5mult+0x20>
 801096c:	4c25      	ldr	r4, [pc, #148]	@ (8010a04 <__pow5mult+0xa8>)
 801096e:	3a01      	subs	r2, #1
 8010970:	2300      	movs	r3, #0
 8010972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010976:	f7ff fe55 	bl	8010624 <__multadd>
 801097a:	4606      	mov	r6, r0
 801097c:	10ad      	asrs	r5, r5, #2
 801097e:	d03d      	beq.n	80109fc <__pow5mult+0xa0>
 8010980:	69fc      	ldr	r4, [r7, #28]
 8010982:	b97c      	cbnz	r4, 80109a4 <__pow5mult+0x48>
 8010984:	2010      	movs	r0, #16
 8010986:	f7fc fda9 	bl	800d4dc <malloc>
 801098a:	4602      	mov	r2, r0
 801098c:	61f8      	str	r0, [r7, #28]
 801098e:	b928      	cbnz	r0, 801099c <__pow5mult+0x40>
 8010990:	4b1d      	ldr	r3, [pc, #116]	@ (8010a08 <__pow5mult+0xac>)
 8010992:	481e      	ldr	r0, [pc, #120]	@ (8010a0c <__pow5mult+0xb0>)
 8010994:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010998:	f7fe f9e0 	bl	800ed5c <__assert_func>
 801099c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109a0:	6004      	str	r4, [r0, #0]
 80109a2:	60c4      	str	r4, [r0, #12]
 80109a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80109a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80109ac:	b94c      	cbnz	r4, 80109c2 <__pow5mult+0x66>
 80109ae:	f240 2171 	movw	r1, #625	@ 0x271
 80109b2:	4638      	mov	r0, r7
 80109b4:	f7ff ff12 	bl	80107dc <__i2b>
 80109b8:	2300      	movs	r3, #0
 80109ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80109be:	4604      	mov	r4, r0
 80109c0:	6003      	str	r3, [r0, #0]
 80109c2:	f04f 0900 	mov.w	r9, #0
 80109c6:	07eb      	lsls	r3, r5, #31
 80109c8:	d50a      	bpl.n	80109e0 <__pow5mult+0x84>
 80109ca:	4631      	mov	r1, r6
 80109cc:	4622      	mov	r2, r4
 80109ce:	4638      	mov	r0, r7
 80109d0:	f7ff ff1a 	bl	8010808 <__multiply>
 80109d4:	4631      	mov	r1, r6
 80109d6:	4680      	mov	r8, r0
 80109d8:	4638      	mov	r0, r7
 80109da:	f7ff fe01 	bl	80105e0 <_Bfree>
 80109de:	4646      	mov	r6, r8
 80109e0:	106d      	asrs	r5, r5, #1
 80109e2:	d00b      	beq.n	80109fc <__pow5mult+0xa0>
 80109e4:	6820      	ldr	r0, [r4, #0]
 80109e6:	b938      	cbnz	r0, 80109f8 <__pow5mult+0x9c>
 80109e8:	4622      	mov	r2, r4
 80109ea:	4621      	mov	r1, r4
 80109ec:	4638      	mov	r0, r7
 80109ee:	f7ff ff0b 	bl	8010808 <__multiply>
 80109f2:	6020      	str	r0, [r4, #0]
 80109f4:	f8c0 9000 	str.w	r9, [r0]
 80109f8:	4604      	mov	r4, r0
 80109fa:	e7e4      	b.n	80109c6 <__pow5mult+0x6a>
 80109fc:	4630      	mov	r0, r6
 80109fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a02:	bf00      	nop
 8010a04:	08011a7c 	.word	0x08011a7c
 8010a08:	08011932 	.word	0x08011932
 8010a0c:	08011a23 	.word	0x08011a23

08010a10 <__lshift>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	460c      	mov	r4, r1
 8010a16:	6849      	ldr	r1, [r1, #4]
 8010a18:	6923      	ldr	r3, [r4, #16]
 8010a1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a1e:	68a3      	ldr	r3, [r4, #8]
 8010a20:	4607      	mov	r7, r0
 8010a22:	4691      	mov	r9, r2
 8010a24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a28:	f108 0601 	add.w	r6, r8, #1
 8010a2c:	42b3      	cmp	r3, r6
 8010a2e:	db0b      	blt.n	8010a48 <__lshift+0x38>
 8010a30:	4638      	mov	r0, r7
 8010a32:	f7ff fd95 	bl	8010560 <_Balloc>
 8010a36:	4605      	mov	r5, r0
 8010a38:	b948      	cbnz	r0, 8010a4e <__lshift+0x3e>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	4b28      	ldr	r3, [pc, #160]	@ (8010ae0 <__lshift+0xd0>)
 8010a3e:	4829      	ldr	r0, [pc, #164]	@ (8010ae4 <__lshift+0xd4>)
 8010a40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010a44:	f7fe f98a 	bl	800ed5c <__assert_func>
 8010a48:	3101      	adds	r1, #1
 8010a4a:	005b      	lsls	r3, r3, #1
 8010a4c:	e7ee      	b.n	8010a2c <__lshift+0x1c>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f100 0114 	add.w	r1, r0, #20
 8010a54:	f100 0210 	add.w	r2, r0, #16
 8010a58:	4618      	mov	r0, r3
 8010a5a:	4553      	cmp	r3, sl
 8010a5c:	db33      	blt.n	8010ac6 <__lshift+0xb6>
 8010a5e:	6920      	ldr	r0, [r4, #16]
 8010a60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a64:	f104 0314 	add.w	r3, r4, #20
 8010a68:	f019 091f 	ands.w	r9, r9, #31
 8010a6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a74:	d02b      	beq.n	8010ace <__lshift+0xbe>
 8010a76:	f1c9 0e20 	rsb	lr, r9, #32
 8010a7a:	468a      	mov	sl, r1
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	fa00 f009 	lsl.w	r0, r0, r9
 8010a84:	4310      	orrs	r0, r2
 8010a86:	f84a 0b04 	str.w	r0, [sl], #4
 8010a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a8e:	459c      	cmp	ip, r3
 8010a90:	fa22 f20e 	lsr.w	r2, r2, lr
 8010a94:	d8f3      	bhi.n	8010a7e <__lshift+0x6e>
 8010a96:	ebac 0304 	sub.w	r3, ip, r4
 8010a9a:	3b15      	subs	r3, #21
 8010a9c:	f023 0303 	bic.w	r3, r3, #3
 8010aa0:	3304      	adds	r3, #4
 8010aa2:	f104 0015 	add.w	r0, r4, #21
 8010aa6:	4584      	cmp	ip, r0
 8010aa8:	bf38      	it	cc
 8010aaa:	2304      	movcc	r3, #4
 8010aac:	50ca      	str	r2, [r1, r3]
 8010aae:	b10a      	cbz	r2, 8010ab4 <__lshift+0xa4>
 8010ab0:	f108 0602 	add.w	r6, r8, #2
 8010ab4:	3e01      	subs	r6, #1
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	612e      	str	r6, [r5, #16]
 8010aba:	4621      	mov	r1, r4
 8010abc:	f7ff fd90 	bl	80105e0 <_Bfree>
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010aca:	3301      	adds	r3, #1
 8010acc:	e7c5      	b.n	8010a5a <__lshift+0x4a>
 8010ace:	3904      	subs	r1, #4
 8010ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ad4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ad8:	459c      	cmp	ip, r3
 8010ada:	d8f9      	bhi.n	8010ad0 <__lshift+0xc0>
 8010adc:	e7ea      	b.n	8010ab4 <__lshift+0xa4>
 8010ade:	bf00      	nop
 8010ae0:	080119a1 	.word	0x080119a1
 8010ae4:	08011a23 	.word	0x08011a23

08010ae8 <__mcmp>:
 8010ae8:	690a      	ldr	r2, [r1, #16]
 8010aea:	4603      	mov	r3, r0
 8010aec:	6900      	ldr	r0, [r0, #16]
 8010aee:	1a80      	subs	r0, r0, r2
 8010af0:	b530      	push	{r4, r5, lr}
 8010af2:	d10e      	bne.n	8010b12 <__mcmp+0x2a>
 8010af4:	3314      	adds	r3, #20
 8010af6:	3114      	adds	r1, #20
 8010af8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010afc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010b00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b08:	4295      	cmp	r5, r2
 8010b0a:	d003      	beq.n	8010b14 <__mcmp+0x2c>
 8010b0c:	d205      	bcs.n	8010b1a <__mcmp+0x32>
 8010b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b12:	bd30      	pop	{r4, r5, pc}
 8010b14:	42a3      	cmp	r3, r4
 8010b16:	d3f3      	bcc.n	8010b00 <__mcmp+0x18>
 8010b18:	e7fb      	b.n	8010b12 <__mcmp+0x2a>
 8010b1a:	2001      	movs	r0, #1
 8010b1c:	e7f9      	b.n	8010b12 <__mcmp+0x2a>
	...

08010b20 <__mdiff>:
 8010b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b24:	4689      	mov	r9, r1
 8010b26:	4606      	mov	r6, r0
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4648      	mov	r0, r9
 8010b2c:	4614      	mov	r4, r2
 8010b2e:	f7ff ffdb 	bl	8010ae8 <__mcmp>
 8010b32:	1e05      	subs	r5, r0, #0
 8010b34:	d112      	bne.n	8010b5c <__mdiff+0x3c>
 8010b36:	4629      	mov	r1, r5
 8010b38:	4630      	mov	r0, r6
 8010b3a:	f7ff fd11 	bl	8010560 <_Balloc>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	b928      	cbnz	r0, 8010b4e <__mdiff+0x2e>
 8010b42:	4b3f      	ldr	r3, [pc, #252]	@ (8010c40 <__mdiff+0x120>)
 8010b44:	f240 2137 	movw	r1, #567	@ 0x237
 8010b48:	483e      	ldr	r0, [pc, #248]	@ (8010c44 <__mdiff+0x124>)
 8010b4a:	f7fe f907 	bl	800ed5c <__assert_func>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b54:	4610      	mov	r0, r2
 8010b56:	b003      	add	sp, #12
 8010b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b5c:	bfbc      	itt	lt
 8010b5e:	464b      	movlt	r3, r9
 8010b60:	46a1      	movlt	r9, r4
 8010b62:	4630      	mov	r0, r6
 8010b64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b68:	bfba      	itte	lt
 8010b6a:	461c      	movlt	r4, r3
 8010b6c:	2501      	movlt	r5, #1
 8010b6e:	2500      	movge	r5, #0
 8010b70:	f7ff fcf6 	bl	8010560 <_Balloc>
 8010b74:	4602      	mov	r2, r0
 8010b76:	b918      	cbnz	r0, 8010b80 <__mdiff+0x60>
 8010b78:	4b31      	ldr	r3, [pc, #196]	@ (8010c40 <__mdiff+0x120>)
 8010b7a:	f240 2145 	movw	r1, #581	@ 0x245
 8010b7e:	e7e3      	b.n	8010b48 <__mdiff+0x28>
 8010b80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010b84:	6926      	ldr	r6, [r4, #16]
 8010b86:	60c5      	str	r5, [r0, #12]
 8010b88:	f109 0310 	add.w	r3, r9, #16
 8010b8c:	f109 0514 	add.w	r5, r9, #20
 8010b90:	f104 0e14 	add.w	lr, r4, #20
 8010b94:	f100 0b14 	add.w	fp, r0, #20
 8010b98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010b9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	46d9      	mov	r9, fp
 8010ba4:	f04f 0c00 	mov.w	ip, #0
 8010ba8:	9b01      	ldr	r3, [sp, #4]
 8010baa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010bae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010bb2:	9301      	str	r3, [sp, #4]
 8010bb4:	fa1f f38a 	uxth.w	r3, sl
 8010bb8:	4619      	mov	r1, r3
 8010bba:	b283      	uxth	r3, r0
 8010bbc:	1acb      	subs	r3, r1, r3
 8010bbe:	0c00      	lsrs	r0, r0, #16
 8010bc0:	4463      	add	r3, ip
 8010bc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010bc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010bca:	b29b      	uxth	r3, r3
 8010bcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010bd0:	4576      	cmp	r6, lr
 8010bd2:	f849 3b04 	str.w	r3, [r9], #4
 8010bd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010bda:	d8e5      	bhi.n	8010ba8 <__mdiff+0x88>
 8010bdc:	1b33      	subs	r3, r6, r4
 8010bde:	3b15      	subs	r3, #21
 8010be0:	f023 0303 	bic.w	r3, r3, #3
 8010be4:	3415      	adds	r4, #21
 8010be6:	3304      	adds	r3, #4
 8010be8:	42a6      	cmp	r6, r4
 8010bea:	bf38      	it	cc
 8010bec:	2304      	movcc	r3, #4
 8010bee:	441d      	add	r5, r3
 8010bf0:	445b      	add	r3, fp
 8010bf2:	461e      	mov	r6, r3
 8010bf4:	462c      	mov	r4, r5
 8010bf6:	4544      	cmp	r4, r8
 8010bf8:	d30e      	bcc.n	8010c18 <__mdiff+0xf8>
 8010bfa:	f108 0103 	add.w	r1, r8, #3
 8010bfe:	1b49      	subs	r1, r1, r5
 8010c00:	f021 0103 	bic.w	r1, r1, #3
 8010c04:	3d03      	subs	r5, #3
 8010c06:	45a8      	cmp	r8, r5
 8010c08:	bf38      	it	cc
 8010c0a:	2100      	movcc	r1, #0
 8010c0c:	440b      	add	r3, r1
 8010c0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c12:	b191      	cbz	r1, 8010c3a <__mdiff+0x11a>
 8010c14:	6117      	str	r7, [r2, #16]
 8010c16:	e79d      	b.n	8010b54 <__mdiff+0x34>
 8010c18:	f854 1b04 	ldr.w	r1, [r4], #4
 8010c1c:	46e6      	mov	lr, ip
 8010c1e:	0c08      	lsrs	r0, r1, #16
 8010c20:	fa1c fc81 	uxtah	ip, ip, r1
 8010c24:	4471      	add	r1, lr
 8010c26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010c2a:	b289      	uxth	r1, r1
 8010c2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010c30:	f846 1b04 	str.w	r1, [r6], #4
 8010c34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c38:	e7dd      	b.n	8010bf6 <__mdiff+0xd6>
 8010c3a:	3f01      	subs	r7, #1
 8010c3c:	e7e7      	b.n	8010c0e <__mdiff+0xee>
 8010c3e:	bf00      	nop
 8010c40:	080119a1 	.word	0x080119a1
 8010c44:	08011a23 	.word	0x08011a23

08010c48 <__ulp>:
 8010c48:	b082      	sub	sp, #8
 8010c4a:	ed8d 0b00 	vstr	d0, [sp]
 8010c4e:	9a01      	ldr	r2, [sp, #4]
 8010c50:	4b0f      	ldr	r3, [pc, #60]	@ (8010c90 <__ulp+0x48>)
 8010c52:	4013      	ands	r3, r2
 8010c54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	dc08      	bgt.n	8010c6e <__ulp+0x26>
 8010c5c:	425b      	negs	r3, r3
 8010c5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010c62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010c66:	da04      	bge.n	8010c72 <__ulp+0x2a>
 8010c68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010c6c:	4113      	asrs	r3, r2
 8010c6e:	2200      	movs	r2, #0
 8010c70:	e008      	b.n	8010c84 <__ulp+0x3c>
 8010c72:	f1a2 0314 	sub.w	r3, r2, #20
 8010c76:	2b1e      	cmp	r3, #30
 8010c78:	bfda      	itte	le
 8010c7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010c7e:	40da      	lsrle	r2, r3
 8010c80:	2201      	movgt	r2, #1
 8010c82:	2300      	movs	r3, #0
 8010c84:	4619      	mov	r1, r3
 8010c86:	4610      	mov	r0, r2
 8010c88:	ec41 0b10 	vmov	d0, r0, r1
 8010c8c:	b002      	add	sp, #8
 8010c8e:	4770      	bx	lr
 8010c90:	7ff00000 	.word	0x7ff00000

08010c94 <__b2d>:
 8010c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c98:	6906      	ldr	r6, [r0, #16]
 8010c9a:	f100 0814 	add.w	r8, r0, #20
 8010c9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010ca2:	1f37      	subs	r7, r6, #4
 8010ca4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010ca8:	4610      	mov	r0, r2
 8010caa:	f7ff fd4b 	bl	8010744 <__hi0bits>
 8010cae:	f1c0 0320 	rsb	r3, r0, #32
 8010cb2:	280a      	cmp	r0, #10
 8010cb4:	600b      	str	r3, [r1, #0]
 8010cb6:	491b      	ldr	r1, [pc, #108]	@ (8010d24 <__b2d+0x90>)
 8010cb8:	dc15      	bgt.n	8010ce6 <__b2d+0x52>
 8010cba:	f1c0 0c0b 	rsb	ip, r0, #11
 8010cbe:	fa22 f30c 	lsr.w	r3, r2, ip
 8010cc2:	45b8      	cmp	r8, r7
 8010cc4:	ea43 0501 	orr.w	r5, r3, r1
 8010cc8:	bf34      	ite	cc
 8010cca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010cce:	2300      	movcs	r3, #0
 8010cd0:	3015      	adds	r0, #21
 8010cd2:	fa02 f000 	lsl.w	r0, r2, r0
 8010cd6:	fa23 f30c 	lsr.w	r3, r3, ip
 8010cda:	4303      	orrs	r3, r0
 8010cdc:	461c      	mov	r4, r3
 8010cde:	ec45 4b10 	vmov	d0, r4, r5
 8010ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce6:	45b8      	cmp	r8, r7
 8010ce8:	bf3a      	itte	cc
 8010cea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010cee:	f1a6 0708 	subcc.w	r7, r6, #8
 8010cf2:	2300      	movcs	r3, #0
 8010cf4:	380b      	subs	r0, #11
 8010cf6:	d012      	beq.n	8010d1e <__b2d+0x8a>
 8010cf8:	f1c0 0120 	rsb	r1, r0, #32
 8010cfc:	fa23 f401 	lsr.w	r4, r3, r1
 8010d00:	4082      	lsls	r2, r0
 8010d02:	4322      	orrs	r2, r4
 8010d04:	4547      	cmp	r7, r8
 8010d06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010d0a:	bf8c      	ite	hi
 8010d0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010d10:	2200      	movls	r2, #0
 8010d12:	4083      	lsls	r3, r0
 8010d14:	40ca      	lsrs	r2, r1
 8010d16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	e7de      	b.n	8010cdc <__b2d+0x48>
 8010d1e:	ea42 0501 	orr.w	r5, r2, r1
 8010d22:	e7db      	b.n	8010cdc <__b2d+0x48>
 8010d24:	3ff00000 	.word	0x3ff00000

08010d28 <__d2b>:
 8010d28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d2c:	460f      	mov	r7, r1
 8010d2e:	2101      	movs	r1, #1
 8010d30:	ec59 8b10 	vmov	r8, r9, d0
 8010d34:	4616      	mov	r6, r2
 8010d36:	f7ff fc13 	bl	8010560 <_Balloc>
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	b930      	cbnz	r0, 8010d4c <__d2b+0x24>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	4b23      	ldr	r3, [pc, #140]	@ (8010dd0 <__d2b+0xa8>)
 8010d42:	4824      	ldr	r0, [pc, #144]	@ (8010dd4 <__d2b+0xac>)
 8010d44:	f240 310f 	movw	r1, #783	@ 0x30f
 8010d48:	f7fe f808 	bl	800ed5c <__assert_func>
 8010d4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d54:	b10d      	cbz	r5, 8010d5a <__d2b+0x32>
 8010d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d5a:	9301      	str	r3, [sp, #4]
 8010d5c:	f1b8 0300 	subs.w	r3, r8, #0
 8010d60:	d023      	beq.n	8010daa <__d2b+0x82>
 8010d62:	4668      	mov	r0, sp
 8010d64:	9300      	str	r3, [sp, #0]
 8010d66:	f7ff fd0c 	bl	8010782 <__lo0bits>
 8010d6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d6e:	b1d0      	cbz	r0, 8010da6 <__d2b+0x7e>
 8010d70:	f1c0 0320 	rsb	r3, r0, #32
 8010d74:	fa02 f303 	lsl.w	r3, r2, r3
 8010d78:	430b      	orrs	r3, r1
 8010d7a:	40c2      	lsrs	r2, r0
 8010d7c:	6163      	str	r3, [r4, #20]
 8010d7e:	9201      	str	r2, [sp, #4]
 8010d80:	9b01      	ldr	r3, [sp, #4]
 8010d82:	61a3      	str	r3, [r4, #24]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	bf0c      	ite	eq
 8010d88:	2201      	moveq	r2, #1
 8010d8a:	2202      	movne	r2, #2
 8010d8c:	6122      	str	r2, [r4, #16]
 8010d8e:	b1a5      	cbz	r5, 8010dba <__d2b+0x92>
 8010d90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010d94:	4405      	add	r5, r0
 8010d96:	603d      	str	r5, [r7, #0]
 8010d98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010d9c:	6030      	str	r0, [r6, #0]
 8010d9e:	4620      	mov	r0, r4
 8010da0:	b003      	add	sp, #12
 8010da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010da6:	6161      	str	r1, [r4, #20]
 8010da8:	e7ea      	b.n	8010d80 <__d2b+0x58>
 8010daa:	a801      	add	r0, sp, #4
 8010dac:	f7ff fce9 	bl	8010782 <__lo0bits>
 8010db0:	9b01      	ldr	r3, [sp, #4]
 8010db2:	6163      	str	r3, [r4, #20]
 8010db4:	3020      	adds	r0, #32
 8010db6:	2201      	movs	r2, #1
 8010db8:	e7e8      	b.n	8010d8c <__d2b+0x64>
 8010dba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010dbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010dc2:	6038      	str	r0, [r7, #0]
 8010dc4:	6918      	ldr	r0, [r3, #16]
 8010dc6:	f7ff fcbd 	bl	8010744 <__hi0bits>
 8010dca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010dce:	e7e5      	b.n	8010d9c <__d2b+0x74>
 8010dd0:	080119a1 	.word	0x080119a1
 8010dd4:	08011a23 	.word	0x08011a23

08010dd8 <__ratio>:
 8010dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	b085      	sub	sp, #20
 8010dde:	e9cd 1000 	strd	r1, r0, [sp]
 8010de2:	a902      	add	r1, sp, #8
 8010de4:	f7ff ff56 	bl	8010c94 <__b2d>
 8010de8:	9800      	ldr	r0, [sp, #0]
 8010dea:	a903      	add	r1, sp, #12
 8010dec:	ec55 4b10 	vmov	r4, r5, d0
 8010df0:	f7ff ff50 	bl	8010c94 <__b2d>
 8010df4:	9b01      	ldr	r3, [sp, #4]
 8010df6:	6919      	ldr	r1, [r3, #16]
 8010df8:	9b00      	ldr	r3, [sp, #0]
 8010dfa:	691b      	ldr	r3, [r3, #16]
 8010dfc:	1ac9      	subs	r1, r1, r3
 8010dfe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010e02:	1a9b      	subs	r3, r3, r2
 8010e04:	ec5b ab10 	vmov	sl, fp, d0
 8010e08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	bfce      	itee	gt
 8010e10:	462a      	movgt	r2, r5
 8010e12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010e16:	465a      	movle	r2, fp
 8010e18:	462f      	mov	r7, r5
 8010e1a:	46d9      	mov	r9, fp
 8010e1c:	bfcc      	ite	gt
 8010e1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010e22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010e26:	464b      	mov	r3, r9
 8010e28:	4652      	mov	r2, sl
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	4639      	mov	r1, r7
 8010e2e:	f7ef fd35 	bl	800089c <__aeabi_ddiv>
 8010e32:	ec41 0b10 	vmov	d0, r0, r1
 8010e36:	b005      	add	sp, #20
 8010e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e3c <__copybits>:
 8010e3c:	3901      	subs	r1, #1
 8010e3e:	b570      	push	{r4, r5, r6, lr}
 8010e40:	1149      	asrs	r1, r1, #5
 8010e42:	6914      	ldr	r4, [r2, #16]
 8010e44:	3101      	adds	r1, #1
 8010e46:	f102 0314 	add.w	r3, r2, #20
 8010e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010e4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010e52:	1f05      	subs	r5, r0, #4
 8010e54:	42a3      	cmp	r3, r4
 8010e56:	d30c      	bcc.n	8010e72 <__copybits+0x36>
 8010e58:	1aa3      	subs	r3, r4, r2
 8010e5a:	3b11      	subs	r3, #17
 8010e5c:	f023 0303 	bic.w	r3, r3, #3
 8010e60:	3211      	adds	r2, #17
 8010e62:	42a2      	cmp	r2, r4
 8010e64:	bf88      	it	hi
 8010e66:	2300      	movhi	r3, #0
 8010e68:	4418      	add	r0, r3
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	4288      	cmp	r0, r1
 8010e6e:	d305      	bcc.n	8010e7c <__copybits+0x40>
 8010e70:	bd70      	pop	{r4, r5, r6, pc}
 8010e72:	f853 6b04 	ldr.w	r6, [r3], #4
 8010e76:	f845 6f04 	str.w	r6, [r5, #4]!
 8010e7a:	e7eb      	b.n	8010e54 <__copybits+0x18>
 8010e7c:	f840 3b04 	str.w	r3, [r0], #4
 8010e80:	e7f4      	b.n	8010e6c <__copybits+0x30>

08010e82 <__any_on>:
 8010e82:	f100 0214 	add.w	r2, r0, #20
 8010e86:	6900      	ldr	r0, [r0, #16]
 8010e88:	114b      	asrs	r3, r1, #5
 8010e8a:	4298      	cmp	r0, r3
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	db11      	blt.n	8010eb4 <__any_on+0x32>
 8010e90:	dd0a      	ble.n	8010ea8 <__any_on+0x26>
 8010e92:	f011 011f 	ands.w	r1, r1, #31
 8010e96:	d007      	beq.n	8010ea8 <__any_on+0x26>
 8010e98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e9c:	fa24 f001 	lsr.w	r0, r4, r1
 8010ea0:	fa00 f101 	lsl.w	r1, r0, r1
 8010ea4:	428c      	cmp	r4, r1
 8010ea6:	d10b      	bne.n	8010ec0 <__any_on+0x3e>
 8010ea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d803      	bhi.n	8010eb8 <__any_on+0x36>
 8010eb0:	2000      	movs	r0, #0
 8010eb2:	bd10      	pop	{r4, pc}
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	e7f7      	b.n	8010ea8 <__any_on+0x26>
 8010eb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ebc:	2900      	cmp	r1, #0
 8010ebe:	d0f5      	beq.n	8010eac <__any_on+0x2a>
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	e7f6      	b.n	8010eb2 <__any_on+0x30>

08010ec4 <__sread>:
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ecc:	f000 f9e0 	bl	8011290 <_read_r>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	bfab      	itete	ge
 8010ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ed8:	181b      	addge	r3, r3, r0
 8010eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ede:	bfac      	ite	ge
 8010ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010ee2:	81a3      	strhlt	r3, [r4, #12]
 8010ee4:	bd10      	pop	{r4, pc}

08010ee6 <__swrite>:
 8010ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eea:	461f      	mov	r7, r3
 8010eec:	898b      	ldrh	r3, [r1, #12]
 8010eee:	05db      	lsls	r3, r3, #23
 8010ef0:	4605      	mov	r5, r0
 8010ef2:	460c      	mov	r4, r1
 8010ef4:	4616      	mov	r6, r2
 8010ef6:	d505      	bpl.n	8010f04 <__swrite+0x1e>
 8010ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010efc:	2302      	movs	r3, #2
 8010efe:	2200      	movs	r2, #0
 8010f00:	f000 f9b4 	bl	801126c <_lseek_r>
 8010f04:	89a3      	ldrh	r3, [r4, #12]
 8010f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f0e:	81a3      	strh	r3, [r4, #12]
 8010f10:	4632      	mov	r2, r6
 8010f12:	463b      	mov	r3, r7
 8010f14:	4628      	mov	r0, r5
 8010f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1a:	f000 b9cb 	b.w	80112b4 <_write_r>

08010f1e <__sseek>:
 8010f1e:	b510      	push	{r4, lr}
 8010f20:	460c      	mov	r4, r1
 8010f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f26:	f000 f9a1 	bl	801126c <_lseek_r>
 8010f2a:	1c43      	adds	r3, r0, #1
 8010f2c:	89a3      	ldrh	r3, [r4, #12]
 8010f2e:	bf15      	itete	ne
 8010f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010f3a:	81a3      	strheq	r3, [r4, #12]
 8010f3c:	bf18      	it	ne
 8010f3e:	81a3      	strhne	r3, [r4, #12]
 8010f40:	bd10      	pop	{r4, pc}

08010f42 <__sclose>:
 8010f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f46:	f000 b95f 	b.w	8011208 <_close_r>
	...

08010f4c <fiprintf>:
 8010f4c:	b40e      	push	{r1, r2, r3}
 8010f4e:	b503      	push	{r0, r1, lr}
 8010f50:	4601      	mov	r1, r0
 8010f52:	ab03      	add	r3, sp, #12
 8010f54:	4805      	ldr	r0, [pc, #20]	@ (8010f6c <fiprintf+0x20>)
 8010f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f5a:	6800      	ldr	r0, [r0, #0]
 8010f5c:	9301      	str	r3, [sp, #4]
 8010f5e:	f000 f9ff 	bl	8011360 <_vfiprintf_r>
 8010f62:	b002      	add	sp, #8
 8010f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f68:	b003      	add	sp, #12
 8010f6a:	4770      	bx	lr
 8010f6c:	200001a4 	.word	0x200001a4

08010f70 <_realloc_r>:
 8010f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f74:	4680      	mov	r8, r0
 8010f76:	4615      	mov	r5, r2
 8010f78:	460c      	mov	r4, r1
 8010f7a:	b921      	cbnz	r1, 8010f86 <_realloc_r+0x16>
 8010f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f80:	4611      	mov	r1, r2
 8010f82:	f7fc bad5 	b.w	800d530 <_malloc_r>
 8010f86:	b92a      	cbnz	r2, 8010f94 <_realloc_r+0x24>
 8010f88:	f7fe fd52 	bl	800fa30 <_free_r>
 8010f8c:	2400      	movs	r4, #0
 8010f8e:	4620      	mov	r0, r4
 8010f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f94:	f000 fafc 	bl	8011590 <_malloc_usable_size_r>
 8010f98:	4285      	cmp	r5, r0
 8010f9a:	4606      	mov	r6, r0
 8010f9c:	d802      	bhi.n	8010fa4 <_realloc_r+0x34>
 8010f9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010fa2:	d8f4      	bhi.n	8010f8e <_realloc_r+0x1e>
 8010fa4:	4629      	mov	r1, r5
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	f7fc fac2 	bl	800d530 <_malloc_r>
 8010fac:	4607      	mov	r7, r0
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d0ec      	beq.n	8010f8c <_realloc_r+0x1c>
 8010fb2:	42b5      	cmp	r5, r6
 8010fb4:	462a      	mov	r2, r5
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	bf28      	it	cs
 8010fba:	4632      	movcs	r2, r6
 8010fbc:	f7fd fea7 	bl	800ed0e <memcpy>
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	f7fe fd34 	bl	800fa30 <_free_r>
 8010fc8:	463c      	mov	r4, r7
 8010fca:	e7e0      	b.n	8010f8e <_realloc_r+0x1e>

08010fcc <__swbuf_r>:
 8010fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fce:	460e      	mov	r6, r1
 8010fd0:	4614      	mov	r4, r2
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	b118      	cbz	r0, 8010fde <__swbuf_r+0x12>
 8010fd6:	6a03      	ldr	r3, [r0, #32]
 8010fd8:	b90b      	cbnz	r3, 8010fde <__swbuf_r+0x12>
 8010fda:	f7fc ff83 	bl	800dee4 <__sinit>
 8010fde:	69a3      	ldr	r3, [r4, #24]
 8010fe0:	60a3      	str	r3, [r4, #8]
 8010fe2:	89a3      	ldrh	r3, [r4, #12]
 8010fe4:	071a      	lsls	r2, r3, #28
 8010fe6:	d501      	bpl.n	8010fec <__swbuf_r+0x20>
 8010fe8:	6923      	ldr	r3, [r4, #16]
 8010fea:	b943      	cbnz	r3, 8010ffe <__swbuf_r+0x32>
 8010fec:	4621      	mov	r1, r4
 8010fee:	4628      	mov	r0, r5
 8010ff0:	f000 f82a 	bl	8011048 <__swsetup_r>
 8010ff4:	b118      	cbz	r0, 8010ffe <__swbuf_r+0x32>
 8010ff6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ffe:	6823      	ldr	r3, [r4, #0]
 8011000:	6922      	ldr	r2, [r4, #16]
 8011002:	1a98      	subs	r0, r3, r2
 8011004:	6963      	ldr	r3, [r4, #20]
 8011006:	b2f6      	uxtb	r6, r6
 8011008:	4283      	cmp	r3, r0
 801100a:	4637      	mov	r7, r6
 801100c:	dc05      	bgt.n	801101a <__swbuf_r+0x4e>
 801100e:	4621      	mov	r1, r4
 8011010:	4628      	mov	r0, r5
 8011012:	f7ff fa7d 	bl	8010510 <_fflush_r>
 8011016:	2800      	cmp	r0, #0
 8011018:	d1ed      	bne.n	8010ff6 <__swbuf_r+0x2a>
 801101a:	68a3      	ldr	r3, [r4, #8]
 801101c:	3b01      	subs	r3, #1
 801101e:	60a3      	str	r3, [r4, #8]
 8011020:	6823      	ldr	r3, [r4, #0]
 8011022:	1c5a      	adds	r2, r3, #1
 8011024:	6022      	str	r2, [r4, #0]
 8011026:	701e      	strb	r6, [r3, #0]
 8011028:	6962      	ldr	r2, [r4, #20]
 801102a:	1c43      	adds	r3, r0, #1
 801102c:	429a      	cmp	r2, r3
 801102e:	d004      	beq.n	801103a <__swbuf_r+0x6e>
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	07db      	lsls	r3, r3, #31
 8011034:	d5e1      	bpl.n	8010ffa <__swbuf_r+0x2e>
 8011036:	2e0a      	cmp	r6, #10
 8011038:	d1df      	bne.n	8010ffa <__swbuf_r+0x2e>
 801103a:	4621      	mov	r1, r4
 801103c:	4628      	mov	r0, r5
 801103e:	f7ff fa67 	bl	8010510 <_fflush_r>
 8011042:	2800      	cmp	r0, #0
 8011044:	d0d9      	beq.n	8010ffa <__swbuf_r+0x2e>
 8011046:	e7d6      	b.n	8010ff6 <__swbuf_r+0x2a>

08011048 <__swsetup_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4b29      	ldr	r3, [pc, #164]	@ (80110f0 <__swsetup_r+0xa8>)
 801104c:	4605      	mov	r5, r0
 801104e:	6818      	ldr	r0, [r3, #0]
 8011050:	460c      	mov	r4, r1
 8011052:	b118      	cbz	r0, 801105c <__swsetup_r+0x14>
 8011054:	6a03      	ldr	r3, [r0, #32]
 8011056:	b90b      	cbnz	r3, 801105c <__swsetup_r+0x14>
 8011058:	f7fc ff44 	bl	800dee4 <__sinit>
 801105c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011060:	0719      	lsls	r1, r3, #28
 8011062:	d422      	bmi.n	80110aa <__swsetup_r+0x62>
 8011064:	06da      	lsls	r2, r3, #27
 8011066:	d407      	bmi.n	8011078 <__swsetup_r+0x30>
 8011068:	2209      	movs	r2, #9
 801106a:	602a      	str	r2, [r5, #0]
 801106c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011076:	e033      	b.n	80110e0 <__swsetup_r+0x98>
 8011078:	0758      	lsls	r0, r3, #29
 801107a:	d512      	bpl.n	80110a2 <__swsetup_r+0x5a>
 801107c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801107e:	b141      	cbz	r1, 8011092 <__swsetup_r+0x4a>
 8011080:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011084:	4299      	cmp	r1, r3
 8011086:	d002      	beq.n	801108e <__swsetup_r+0x46>
 8011088:	4628      	mov	r0, r5
 801108a:	f7fe fcd1 	bl	800fa30 <_free_r>
 801108e:	2300      	movs	r3, #0
 8011090:	6363      	str	r3, [r4, #52]	@ 0x34
 8011092:	89a3      	ldrh	r3, [r4, #12]
 8011094:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011098:	81a3      	strh	r3, [r4, #12]
 801109a:	2300      	movs	r3, #0
 801109c:	6063      	str	r3, [r4, #4]
 801109e:	6923      	ldr	r3, [r4, #16]
 80110a0:	6023      	str	r3, [r4, #0]
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	f043 0308 	orr.w	r3, r3, #8
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	6923      	ldr	r3, [r4, #16]
 80110ac:	b94b      	cbnz	r3, 80110c2 <__swsetup_r+0x7a>
 80110ae:	89a3      	ldrh	r3, [r4, #12]
 80110b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110b8:	d003      	beq.n	80110c2 <__swsetup_r+0x7a>
 80110ba:	4621      	mov	r1, r4
 80110bc:	4628      	mov	r0, r5
 80110be:	f000 f84c 	bl	801115a <__smakebuf_r>
 80110c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110c6:	f013 0201 	ands.w	r2, r3, #1
 80110ca:	d00a      	beq.n	80110e2 <__swsetup_r+0x9a>
 80110cc:	2200      	movs	r2, #0
 80110ce:	60a2      	str	r2, [r4, #8]
 80110d0:	6962      	ldr	r2, [r4, #20]
 80110d2:	4252      	negs	r2, r2
 80110d4:	61a2      	str	r2, [r4, #24]
 80110d6:	6922      	ldr	r2, [r4, #16]
 80110d8:	b942      	cbnz	r2, 80110ec <__swsetup_r+0xa4>
 80110da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80110de:	d1c5      	bne.n	801106c <__swsetup_r+0x24>
 80110e0:	bd38      	pop	{r3, r4, r5, pc}
 80110e2:	0799      	lsls	r1, r3, #30
 80110e4:	bf58      	it	pl
 80110e6:	6962      	ldrpl	r2, [r4, #20]
 80110e8:	60a2      	str	r2, [r4, #8]
 80110ea:	e7f4      	b.n	80110d6 <__swsetup_r+0x8e>
 80110ec:	2000      	movs	r0, #0
 80110ee:	e7f7      	b.n	80110e0 <__swsetup_r+0x98>
 80110f0:	200001a4 	.word	0x200001a4

080110f4 <__ascii_wctomb>:
 80110f4:	4603      	mov	r3, r0
 80110f6:	4608      	mov	r0, r1
 80110f8:	b141      	cbz	r1, 801110c <__ascii_wctomb+0x18>
 80110fa:	2aff      	cmp	r2, #255	@ 0xff
 80110fc:	d904      	bls.n	8011108 <__ascii_wctomb+0x14>
 80110fe:	228a      	movs	r2, #138	@ 0x8a
 8011100:	601a      	str	r2, [r3, #0]
 8011102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011106:	4770      	bx	lr
 8011108:	700a      	strb	r2, [r1, #0]
 801110a:	2001      	movs	r0, #1
 801110c:	4770      	bx	lr

0801110e <__swhatbuf_r>:
 801110e:	b570      	push	{r4, r5, r6, lr}
 8011110:	460c      	mov	r4, r1
 8011112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011116:	2900      	cmp	r1, #0
 8011118:	b096      	sub	sp, #88	@ 0x58
 801111a:	4615      	mov	r5, r2
 801111c:	461e      	mov	r6, r3
 801111e:	da0d      	bge.n	801113c <__swhatbuf_r+0x2e>
 8011120:	89a3      	ldrh	r3, [r4, #12]
 8011122:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011126:	f04f 0100 	mov.w	r1, #0
 801112a:	bf14      	ite	ne
 801112c:	2340      	movne	r3, #64	@ 0x40
 801112e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011132:	2000      	movs	r0, #0
 8011134:	6031      	str	r1, [r6, #0]
 8011136:	602b      	str	r3, [r5, #0]
 8011138:	b016      	add	sp, #88	@ 0x58
 801113a:	bd70      	pop	{r4, r5, r6, pc}
 801113c:	466a      	mov	r2, sp
 801113e:	f000 f873 	bl	8011228 <_fstat_r>
 8011142:	2800      	cmp	r0, #0
 8011144:	dbec      	blt.n	8011120 <__swhatbuf_r+0x12>
 8011146:	9901      	ldr	r1, [sp, #4]
 8011148:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801114c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011150:	4259      	negs	r1, r3
 8011152:	4159      	adcs	r1, r3
 8011154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011158:	e7eb      	b.n	8011132 <__swhatbuf_r+0x24>

0801115a <__smakebuf_r>:
 801115a:	898b      	ldrh	r3, [r1, #12]
 801115c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801115e:	079d      	lsls	r5, r3, #30
 8011160:	4606      	mov	r6, r0
 8011162:	460c      	mov	r4, r1
 8011164:	d507      	bpl.n	8011176 <__smakebuf_r+0x1c>
 8011166:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801116a:	6023      	str	r3, [r4, #0]
 801116c:	6123      	str	r3, [r4, #16]
 801116e:	2301      	movs	r3, #1
 8011170:	6163      	str	r3, [r4, #20]
 8011172:	b003      	add	sp, #12
 8011174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011176:	ab01      	add	r3, sp, #4
 8011178:	466a      	mov	r2, sp
 801117a:	f7ff ffc8 	bl	801110e <__swhatbuf_r>
 801117e:	9f00      	ldr	r7, [sp, #0]
 8011180:	4605      	mov	r5, r0
 8011182:	4639      	mov	r1, r7
 8011184:	4630      	mov	r0, r6
 8011186:	f7fc f9d3 	bl	800d530 <_malloc_r>
 801118a:	b948      	cbnz	r0, 80111a0 <__smakebuf_r+0x46>
 801118c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011190:	059a      	lsls	r2, r3, #22
 8011192:	d4ee      	bmi.n	8011172 <__smakebuf_r+0x18>
 8011194:	f023 0303 	bic.w	r3, r3, #3
 8011198:	f043 0302 	orr.w	r3, r3, #2
 801119c:	81a3      	strh	r3, [r4, #12]
 801119e:	e7e2      	b.n	8011166 <__smakebuf_r+0xc>
 80111a0:	89a3      	ldrh	r3, [r4, #12]
 80111a2:	6020      	str	r0, [r4, #0]
 80111a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111a8:	81a3      	strh	r3, [r4, #12]
 80111aa:	9b01      	ldr	r3, [sp, #4]
 80111ac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80111b0:	b15b      	cbz	r3, 80111ca <__smakebuf_r+0x70>
 80111b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111b6:	4630      	mov	r0, r6
 80111b8:	f000 f848 	bl	801124c <_isatty_r>
 80111bc:	b128      	cbz	r0, 80111ca <__smakebuf_r+0x70>
 80111be:	89a3      	ldrh	r3, [r4, #12]
 80111c0:	f023 0303 	bic.w	r3, r3, #3
 80111c4:	f043 0301 	orr.w	r3, r3, #1
 80111c8:	81a3      	strh	r3, [r4, #12]
 80111ca:	89a3      	ldrh	r3, [r4, #12]
 80111cc:	431d      	orrs	r5, r3
 80111ce:	81a5      	strh	r5, [r4, #12]
 80111d0:	e7cf      	b.n	8011172 <__smakebuf_r+0x18>

080111d2 <memmove>:
 80111d2:	4288      	cmp	r0, r1
 80111d4:	b510      	push	{r4, lr}
 80111d6:	eb01 0402 	add.w	r4, r1, r2
 80111da:	d902      	bls.n	80111e2 <memmove+0x10>
 80111dc:	4284      	cmp	r4, r0
 80111de:	4623      	mov	r3, r4
 80111e0:	d807      	bhi.n	80111f2 <memmove+0x20>
 80111e2:	1e43      	subs	r3, r0, #1
 80111e4:	42a1      	cmp	r1, r4
 80111e6:	d008      	beq.n	80111fa <memmove+0x28>
 80111e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111f0:	e7f8      	b.n	80111e4 <memmove+0x12>
 80111f2:	4402      	add	r2, r0
 80111f4:	4601      	mov	r1, r0
 80111f6:	428a      	cmp	r2, r1
 80111f8:	d100      	bne.n	80111fc <memmove+0x2a>
 80111fa:	bd10      	pop	{r4, pc}
 80111fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011200:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011204:	e7f7      	b.n	80111f6 <memmove+0x24>
	...

08011208 <_close_r>:
 8011208:	b538      	push	{r3, r4, r5, lr}
 801120a:	4d06      	ldr	r5, [pc, #24]	@ (8011224 <_close_r+0x1c>)
 801120c:	2300      	movs	r3, #0
 801120e:	4604      	mov	r4, r0
 8011210:	4608      	mov	r0, r1
 8011212:	602b      	str	r3, [r5, #0]
 8011214:	f7f1 fd3e 	bl	8002c94 <_close>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_close_r+0x1a>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	b103      	cbz	r3, 8011222 <_close_r+0x1a>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	200014cc 	.word	0x200014cc

08011228 <_fstat_r>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4d07      	ldr	r5, [pc, #28]	@ (8011248 <_fstat_r+0x20>)
 801122c:	2300      	movs	r3, #0
 801122e:	4604      	mov	r4, r0
 8011230:	4608      	mov	r0, r1
 8011232:	4611      	mov	r1, r2
 8011234:	602b      	str	r3, [r5, #0]
 8011236:	f7f1 fd39 	bl	8002cac <_fstat>
 801123a:	1c43      	adds	r3, r0, #1
 801123c:	d102      	bne.n	8011244 <_fstat_r+0x1c>
 801123e:	682b      	ldr	r3, [r5, #0]
 8011240:	b103      	cbz	r3, 8011244 <_fstat_r+0x1c>
 8011242:	6023      	str	r3, [r4, #0]
 8011244:	bd38      	pop	{r3, r4, r5, pc}
 8011246:	bf00      	nop
 8011248:	200014cc 	.word	0x200014cc

0801124c <_isatty_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4d06      	ldr	r5, [pc, #24]	@ (8011268 <_isatty_r+0x1c>)
 8011250:	2300      	movs	r3, #0
 8011252:	4604      	mov	r4, r0
 8011254:	4608      	mov	r0, r1
 8011256:	602b      	str	r3, [r5, #0]
 8011258:	f7f1 fd38 	bl	8002ccc <_isatty>
 801125c:	1c43      	adds	r3, r0, #1
 801125e:	d102      	bne.n	8011266 <_isatty_r+0x1a>
 8011260:	682b      	ldr	r3, [r5, #0]
 8011262:	b103      	cbz	r3, 8011266 <_isatty_r+0x1a>
 8011264:	6023      	str	r3, [r4, #0]
 8011266:	bd38      	pop	{r3, r4, r5, pc}
 8011268:	200014cc 	.word	0x200014cc

0801126c <_lseek_r>:
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	4d07      	ldr	r5, [pc, #28]	@ (801128c <_lseek_r+0x20>)
 8011270:	4604      	mov	r4, r0
 8011272:	4608      	mov	r0, r1
 8011274:	4611      	mov	r1, r2
 8011276:	2200      	movs	r2, #0
 8011278:	602a      	str	r2, [r5, #0]
 801127a:	461a      	mov	r2, r3
 801127c:	f7f1 fd31 	bl	8002ce2 <_lseek>
 8011280:	1c43      	adds	r3, r0, #1
 8011282:	d102      	bne.n	801128a <_lseek_r+0x1e>
 8011284:	682b      	ldr	r3, [r5, #0]
 8011286:	b103      	cbz	r3, 801128a <_lseek_r+0x1e>
 8011288:	6023      	str	r3, [r4, #0]
 801128a:	bd38      	pop	{r3, r4, r5, pc}
 801128c:	200014cc 	.word	0x200014cc

08011290 <_read_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	4d07      	ldr	r5, [pc, #28]	@ (80112b0 <_read_r+0x20>)
 8011294:	4604      	mov	r4, r0
 8011296:	4608      	mov	r0, r1
 8011298:	4611      	mov	r1, r2
 801129a:	2200      	movs	r2, #0
 801129c:	602a      	str	r2, [r5, #0]
 801129e:	461a      	mov	r2, r3
 80112a0:	f7f1 fcbf 	bl	8002c22 <_read>
 80112a4:	1c43      	adds	r3, r0, #1
 80112a6:	d102      	bne.n	80112ae <_read_r+0x1e>
 80112a8:	682b      	ldr	r3, [r5, #0]
 80112aa:	b103      	cbz	r3, 80112ae <_read_r+0x1e>
 80112ac:	6023      	str	r3, [r4, #0]
 80112ae:	bd38      	pop	{r3, r4, r5, pc}
 80112b0:	200014cc 	.word	0x200014cc

080112b4 <_write_r>:
 80112b4:	b538      	push	{r3, r4, r5, lr}
 80112b6:	4d07      	ldr	r5, [pc, #28]	@ (80112d4 <_write_r+0x20>)
 80112b8:	4604      	mov	r4, r0
 80112ba:	4608      	mov	r0, r1
 80112bc:	4611      	mov	r1, r2
 80112be:	2200      	movs	r2, #0
 80112c0:	602a      	str	r2, [r5, #0]
 80112c2:	461a      	mov	r2, r3
 80112c4:	f7f1 fcca 	bl	8002c5c <_write>
 80112c8:	1c43      	adds	r3, r0, #1
 80112ca:	d102      	bne.n	80112d2 <_write_r+0x1e>
 80112cc:	682b      	ldr	r3, [r5, #0]
 80112ce:	b103      	cbz	r3, 80112d2 <_write_r+0x1e>
 80112d0:	6023      	str	r3, [r4, #0]
 80112d2:	bd38      	pop	{r3, r4, r5, pc}
 80112d4:	200014cc 	.word	0x200014cc

080112d8 <abort>:
 80112d8:	b508      	push	{r3, lr}
 80112da:	2006      	movs	r0, #6
 80112dc:	f000 f988 	bl	80115f0 <raise>
 80112e0:	2001      	movs	r0, #1
 80112e2:	f7f1 fc93 	bl	8002c0c <_exit>

080112e6 <_calloc_r>:
 80112e6:	b570      	push	{r4, r5, r6, lr}
 80112e8:	fba1 5402 	umull	r5, r4, r1, r2
 80112ec:	b93c      	cbnz	r4, 80112fe <_calloc_r+0x18>
 80112ee:	4629      	mov	r1, r5
 80112f0:	f7fc f91e 	bl	800d530 <_malloc_r>
 80112f4:	4606      	mov	r6, r0
 80112f6:	b928      	cbnz	r0, 8011304 <_calloc_r+0x1e>
 80112f8:	2600      	movs	r6, #0
 80112fa:	4630      	mov	r0, r6
 80112fc:	bd70      	pop	{r4, r5, r6, pc}
 80112fe:	220c      	movs	r2, #12
 8011300:	6002      	str	r2, [r0, #0]
 8011302:	e7f9      	b.n	80112f8 <_calloc_r+0x12>
 8011304:	462a      	mov	r2, r5
 8011306:	4621      	mov	r1, r4
 8011308:	f7fd fcb8 	bl	800ec7c <memset>
 801130c:	e7f5      	b.n	80112fa <_calloc_r+0x14>

0801130e <__sfputc_r>:
 801130e:	6893      	ldr	r3, [r2, #8]
 8011310:	3b01      	subs	r3, #1
 8011312:	2b00      	cmp	r3, #0
 8011314:	b410      	push	{r4}
 8011316:	6093      	str	r3, [r2, #8]
 8011318:	da08      	bge.n	801132c <__sfputc_r+0x1e>
 801131a:	6994      	ldr	r4, [r2, #24]
 801131c:	42a3      	cmp	r3, r4
 801131e:	db01      	blt.n	8011324 <__sfputc_r+0x16>
 8011320:	290a      	cmp	r1, #10
 8011322:	d103      	bne.n	801132c <__sfputc_r+0x1e>
 8011324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011328:	f7ff be50 	b.w	8010fcc <__swbuf_r>
 801132c:	6813      	ldr	r3, [r2, #0]
 801132e:	1c58      	adds	r0, r3, #1
 8011330:	6010      	str	r0, [r2, #0]
 8011332:	7019      	strb	r1, [r3, #0]
 8011334:	4608      	mov	r0, r1
 8011336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801133a:	4770      	bx	lr

0801133c <__sfputs_r>:
 801133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133e:	4606      	mov	r6, r0
 8011340:	460f      	mov	r7, r1
 8011342:	4614      	mov	r4, r2
 8011344:	18d5      	adds	r5, r2, r3
 8011346:	42ac      	cmp	r4, r5
 8011348:	d101      	bne.n	801134e <__sfputs_r+0x12>
 801134a:	2000      	movs	r0, #0
 801134c:	e007      	b.n	801135e <__sfputs_r+0x22>
 801134e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011352:	463a      	mov	r2, r7
 8011354:	4630      	mov	r0, r6
 8011356:	f7ff ffda 	bl	801130e <__sfputc_r>
 801135a:	1c43      	adds	r3, r0, #1
 801135c:	d1f3      	bne.n	8011346 <__sfputs_r+0xa>
 801135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011360 <_vfiprintf_r>:
 8011360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011364:	460d      	mov	r5, r1
 8011366:	b09d      	sub	sp, #116	@ 0x74
 8011368:	4614      	mov	r4, r2
 801136a:	4698      	mov	r8, r3
 801136c:	4606      	mov	r6, r0
 801136e:	b118      	cbz	r0, 8011378 <_vfiprintf_r+0x18>
 8011370:	6a03      	ldr	r3, [r0, #32]
 8011372:	b90b      	cbnz	r3, 8011378 <_vfiprintf_r+0x18>
 8011374:	f7fc fdb6 	bl	800dee4 <__sinit>
 8011378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801137a:	07d9      	lsls	r1, r3, #31
 801137c:	d405      	bmi.n	801138a <_vfiprintf_r+0x2a>
 801137e:	89ab      	ldrh	r3, [r5, #12]
 8011380:	059a      	lsls	r2, r3, #22
 8011382:	d402      	bmi.n	801138a <_vfiprintf_r+0x2a>
 8011384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011386:	f7fd fcc0 	bl	800ed0a <__retarget_lock_acquire_recursive>
 801138a:	89ab      	ldrh	r3, [r5, #12]
 801138c:	071b      	lsls	r3, r3, #28
 801138e:	d501      	bpl.n	8011394 <_vfiprintf_r+0x34>
 8011390:	692b      	ldr	r3, [r5, #16]
 8011392:	b99b      	cbnz	r3, 80113bc <_vfiprintf_r+0x5c>
 8011394:	4629      	mov	r1, r5
 8011396:	4630      	mov	r0, r6
 8011398:	f7ff fe56 	bl	8011048 <__swsetup_r>
 801139c:	b170      	cbz	r0, 80113bc <_vfiprintf_r+0x5c>
 801139e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113a0:	07dc      	lsls	r4, r3, #31
 80113a2:	d504      	bpl.n	80113ae <_vfiprintf_r+0x4e>
 80113a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80113a8:	b01d      	add	sp, #116	@ 0x74
 80113aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ae:	89ab      	ldrh	r3, [r5, #12]
 80113b0:	0598      	lsls	r0, r3, #22
 80113b2:	d4f7      	bmi.n	80113a4 <_vfiprintf_r+0x44>
 80113b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113b6:	f7fd fca9 	bl	800ed0c <__retarget_lock_release_recursive>
 80113ba:	e7f3      	b.n	80113a4 <_vfiprintf_r+0x44>
 80113bc:	2300      	movs	r3, #0
 80113be:	9309      	str	r3, [sp, #36]	@ 0x24
 80113c0:	2320      	movs	r3, #32
 80113c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80113c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80113ca:	2330      	movs	r3, #48	@ 0x30
 80113cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801157c <_vfiprintf_r+0x21c>
 80113d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80113d4:	f04f 0901 	mov.w	r9, #1
 80113d8:	4623      	mov	r3, r4
 80113da:	469a      	mov	sl, r3
 80113dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113e0:	b10a      	cbz	r2, 80113e6 <_vfiprintf_r+0x86>
 80113e2:	2a25      	cmp	r2, #37	@ 0x25
 80113e4:	d1f9      	bne.n	80113da <_vfiprintf_r+0x7a>
 80113e6:	ebba 0b04 	subs.w	fp, sl, r4
 80113ea:	d00b      	beq.n	8011404 <_vfiprintf_r+0xa4>
 80113ec:	465b      	mov	r3, fp
 80113ee:	4622      	mov	r2, r4
 80113f0:	4629      	mov	r1, r5
 80113f2:	4630      	mov	r0, r6
 80113f4:	f7ff ffa2 	bl	801133c <__sfputs_r>
 80113f8:	3001      	adds	r0, #1
 80113fa:	f000 80a7 	beq.w	801154c <_vfiprintf_r+0x1ec>
 80113fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011400:	445a      	add	r2, fp
 8011402:	9209      	str	r2, [sp, #36]	@ 0x24
 8011404:	f89a 3000 	ldrb.w	r3, [sl]
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 809f 	beq.w	801154c <_vfiprintf_r+0x1ec>
 801140e:	2300      	movs	r3, #0
 8011410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011418:	f10a 0a01 	add.w	sl, sl, #1
 801141c:	9304      	str	r3, [sp, #16]
 801141e:	9307      	str	r3, [sp, #28]
 8011420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011424:	931a      	str	r3, [sp, #104]	@ 0x68
 8011426:	4654      	mov	r4, sl
 8011428:	2205      	movs	r2, #5
 801142a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801142e:	4853      	ldr	r0, [pc, #332]	@ (801157c <_vfiprintf_r+0x21c>)
 8011430:	f7ee fef6 	bl	8000220 <memchr>
 8011434:	9a04      	ldr	r2, [sp, #16]
 8011436:	b9d8      	cbnz	r0, 8011470 <_vfiprintf_r+0x110>
 8011438:	06d1      	lsls	r1, r2, #27
 801143a:	bf44      	itt	mi
 801143c:	2320      	movmi	r3, #32
 801143e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011442:	0713      	lsls	r3, r2, #28
 8011444:	bf44      	itt	mi
 8011446:	232b      	movmi	r3, #43	@ 0x2b
 8011448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801144c:	f89a 3000 	ldrb.w	r3, [sl]
 8011450:	2b2a      	cmp	r3, #42	@ 0x2a
 8011452:	d015      	beq.n	8011480 <_vfiprintf_r+0x120>
 8011454:	9a07      	ldr	r2, [sp, #28]
 8011456:	4654      	mov	r4, sl
 8011458:	2000      	movs	r0, #0
 801145a:	f04f 0c0a 	mov.w	ip, #10
 801145e:	4621      	mov	r1, r4
 8011460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011464:	3b30      	subs	r3, #48	@ 0x30
 8011466:	2b09      	cmp	r3, #9
 8011468:	d94b      	bls.n	8011502 <_vfiprintf_r+0x1a2>
 801146a:	b1b0      	cbz	r0, 801149a <_vfiprintf_r+0x13a>
 801146c:	9207      	str	r2, [sp, #28]
 801146e:	e014      	b.n	801149a <_vfiprintf_r+0x13a>
 8011470:	eba0 0308 	sub.w	r3, r0, r8
 8011474:	fa09 f303 	lsl.w	r3, r9, r3
 8011478:	4313      	orrs	r3, r2
 801147a:	9304      	str	r3, [sp, #16]
 801147c:	46a2      	mov	sl, r4
 801147e:	e7d2      	b.n	8011426 <_vfiprintf_r+0xc6>
 8011480:	9b03      	ldr	r3, [sp, #12]
 8011482:	1d19      	adds	r1, r3, #4
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	9103      	str	r1, [sp, #12]
 8011488:	2b00      	cmp	r3, #0
 801148a:	bfbb      	ittet	lt
 801148c:	425b      	neglt	r3, r3
 801148e:	f042 0202 	orrlt.w	r2, r2, #2
 8011492:	9307      	strge	r3, [sp, #28]
 8011494:	9307      	strlt	r3, [sp, #28]
 8011496:	bfb8      	it	lt
 8011498:	9204      	strlt	r2, [sp, #16]
 801149a:	7823      	ldrb	r3, [r4, #0]
 801149c:	2b2e      	cmp	r3, #46	@ 0x2e
 801149e:	d10a      	bne.n	80114b6 <_vfiprintf_r+0x156>
 80114a0:	7863      	ldrb	r3, [r4, #1]
 80114a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80114a4:	d132      	bne.n	801150c <_vfiprintf_r+0x1ac>
 80114a6:	9b03      	ldr	r3, [sp, #12]
 80114a8:	1d1a      	adds	r2, r3, #4
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	9203      	str	r2, [sp, #12]
 80114ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114b2:	3402      	adds	r4, #2
 80114b4:	9305      	str	r3, [sp, #20]
 80114b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801158c <_vfiprintf_r+0x22c>
 80114ba:	7821      	ldrb	r1, [r4, #0]
 80114bc:	2203      	movs	r2, #3
 80114be:	4650      	mov	r0, sl
 80114c0:	f7ee feae 	bl	8000220 <memchr>
 80114c4:	b138      	cbz	r0, 80114d6 <_vfiprintf_r+0x176>
 80114c6:	9b04      	ldr	r3, [sp, #16]
 80114c8:	eba0 000a 	sub.w	r0, r0, sl
 80114cc:	2240      	movs	r2, #64	@ 0x40
 80114ce:	4082      	lsls	r2, r0
 80114d0:	4313      	orrs	r3, r2
 80114d2:	3401      	adds	r4, #1
 80114d4:	9304      	str	r3, [sp, #16]
 80114d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114da:	4829      	ldr	r0, [pc, #164]	@ (8011580 <_vfiprintf_r+0x220>)
 80114dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80114e0:	2206      	movs	r2, #6
 80114e2:	f7ee fe9d 	bl	8000220 <memchr>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d03f      	beq.n	801156a <_vfiprintf_r+0x20a>
 80114ea:	4b26      	ldr	r3, [pc, #152]	@ (8011584 <_vfiprintf_r+0x224>)
 80114ec:	bb1b      	cbnz	r3, 8011536 <_vfiprintf_r+0x1d6>
 80114ee:	9b03      	ldr	r3, [sp, #12]
 80114f0:	3307      	adds	r3, #7
 80114f2:	f023 0307 	bic.w	r3, r3, #7
 80114f6:	3308      	adds	r3, #8
 80114f8:	9303      	str	r3, [sp, #12]
 80114fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114fc:	443b      	add	r3, r7
 80114fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011500:	e76a      	b.n	80113d8 <_vfiprintf_r+0x78>
 8011502:	fb0c 3202 	mla	r2, ip, r2, r3
 8011506:	460c      	mov	r4, r1
 8011508:	2001      	movs	r0, #1
 801150a:	e7a8      	b.n	801145e <_vfiprintf_r+0xfe>
 801150c:	2300      	movs	r3, #0
 801150e:	3401      	adds	r4, #1
 8011510:	9305      	str	r3, [sp, #20]
 8011512:	4619      	mov	r1, r3
 8011514:	f04f 0c0a 	mov.w	ip, #10
 8011518:	4620      	mov	r0, r4
 801151a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801151e:	3a30      	subs	r2, #48	@ 0x30
 8011520:	2a09      	cmp	r2, #9
 8011522:	d903      	bls.n	801152c <_vfiprintf_r+0x1cc>
 8011524:	2b00      	cmp	r3, #0
 8011526:	d0c6      	beq.n	80114b6 <_vfiprintf_r+0x156>
 8011528:	9105      	str	r1, [sp, #20]
 801152a:	e7c4      	b.n	80114b6 <_vfiprintf_r+0x156>
 801152c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011530:	4604      	mov	r4, r0
 8011532:	2301      	movs	r3, #1
 8011534:	e7f0      	b.n	8011518 <_vfiprintf_r+0x1b8>
 8011536:	ab03      	add	r3, sp, #12
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	462a      	mov	r2, r5
 801153c:	4b12      	ldr	r3, [pc, #72]	@ (8011588 <_vfiprintf_r+0x228>)
 801153e:	a904      	add	r1, sp, #16
 8011540:	4630      	mov	r0, r6
 8011542:	f7fb fda1 	bl	800d088 <_printf_float>
 8011546:	4607      	mov	r7, r0
 8011548:	1c78      	adds	r0, r7, #1
 801154a:	d1d6      	bne.n	80114fa <_vfiprintf_r+0x19a>
 801154c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801154e:	07d9      	lsls	r1, r3, #31
 8011550:	d405      	bmi.n	801155e <_vfiprintf_r+0x1fe>
 8011552:	89ab      	ldrh	r3, [r5, #12]
 8011554:	059a      	lsls	r2, r3, #22
 8011556:	d402      	bmi.n	801155e <_vfiprintf_r+0x1fe>
 8011558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801155a:	f7fd fbd7 	bl	800ed0c <__retarget_lock_release_recursive>
 801155e:	89ab      	ldrh	r3, [r5, #12]
 8011560:	065b      	lsls	r3, r3, #25
 8011562:	f53f af1f 	bmi.w	80113a4 <_vfiprintf_r+0x44>
 8011566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011568:	e71e      	b.n	80113a8 <_vfiprintf_r+0x48>
 801156a:	ab03      	add	r3, sp, #12
 801156c:	9300      	str	r3, [sp, #0]
 801156e:	462a      	mov	r2, r5
 8011570:	4b05      	ldr	r3, [pc, #20]	@ (8011588 <_vfiprintf_r+0x228>)
 8011572:	a904      	add	r1, sp, #16
 8011574:	4630      	mov	r0, r6
 8011576:	f7fc f8c9 	bl	800d70c <_printf_i>
 801157a:	e7e4      	b.n	8011546 <_vfiprintf_r+0x1e6>
 801157c:	08011a12 	.word	0x08011a12
 8011580:	08011a1c 	.word	0x08011a1c
 8011584:	0800d089 	.word	0x0800d089
 8011588:	0801133d 	.word	0x0801133d
 801158c:	08011a18 	.word	0x08011a18

08011590 <_malloc_usable_size_r>:
 8011590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011594:	1f18      	subs	r0, r3, #4
 8011596:	2b00      	cmp	r3, #0
 8011598:	bfbc      	itt	lt
 801159a:	580b      	ldrlt	r3, [r1, r0]
 801159c:	18c0      	addlt	r0, r0, r3
 801159e:	4770      	bx	lr

080115a0 <_raise_r>:
 80115a0:	291f      	cmp	r1, #31
 80115a2:	b538      	push	{r3, r4, r5, lr}
 80115a4:	4605      	mov	r5, r0
 80115a6:	460c      	mov	r4, r1
 80115a8:	d904      	bls.n	80115b4 <_raise_r+0x14>
 80115aa:	2316      	movs	r3, #22
 80115ac:	6003      	str	r3, [r0, #0]
 80115ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115b2:	bd38      	pop	{r3, r4, r5, pc}
 80115b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115b6:	b112      	cbz	r2, 80115be <_raise_r+0x1e>
 80115b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115bc:	b94b      	cbnz	r3, 80115d2 <_raise_r+0x32>
 80115be:	4628      	mov	r0, r5
 80115c0:	f000 f830 	bl	8011624 <_getpid_r>
 80115c4:	4622      	mov	r2, r4
 80115c6:	4601      	mov	r1, r0
 80115c8:	4628      	mov	r0, r5
 80115ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115ce:	f000 b817 	b.w	8011600 <_kill_r>
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	d00a      	beq.n	80115ec <_raise_r+0x4c>
 80115d6:	1c59      	adds	r1, r3, #1
 80115d8:	d103      	bne.n	80115e2 <_raise_r+0x42>
 80115da:	2316      	movs	r3, #22
 80115dc:	6003      	str	r3, [r0, #0]
 80115de:	2001      	movs	r0, #1
 80115e0:	e7e7      	b.n	80115b2 <_raise_r+0x12>
 80115e2:	2100      	movs	r1, #0
 80115e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80115e8:	4620      	mov	r0, r4
 80115ea:	4798      	blx	r3
 80115ec:	2000      	movs	r0, #0
 80115ee:	e7e0      	b.n	80115b2 <_raise_r+0x12>

080115f0 <raise>:
 80115f0:	4b02      	ldr	r3, [pc, #8]	@ (80115fc <raise+0xc>)
 80115f2:	4601      	mov	r1, r0
 80115f4:	6818      	ldr	r0, [r3, #0]
 80115f6:	f7ff bfd3 	b.w	80115a0 <_raise_r>
 80115fa:	bf00      	nop
 80115fc:	200001a4 	.word	0x200001a4

08011600 <_kill_r>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	4d07      	ldr	r5, [pc, #28]	@ (8011620 <_kill_r+0x20>)
 8011604:	2300      	movs	r3, #0
 8011606:	4604      	mov	r4, r0
 8011608:	4608      	mov	r0, r1
 801160a:	4611      	mov	r1, r2
 801160c:	602b      	str	r3, [r5, #0]
 801160e:	f7f1 faed 	bl	8002bec <_kill>
 8011612:	1c43      	adds	r3, r0, #1
 8011614:	d102      	bne.n	801161c <_kill_r+0x1c>
 8011616:	682b      	ldr	r3, [r5, #0]
 8011618:	b103      	cbz	r3, 801161c <_kill_r+0x1c>
 801161a:	6023      	str	r3, [r4, #0]
 801161c:	bd38      	pop	{r3, r4, r5, pc}
 801161e:	bf00      	nop
 8011620:	200014cc 	.word	0x200014cc

08011624 <_getpid_r>:
 8011624:	f7f1 bada 	b.w	8002bdc <_getpid>

08011628 <_init>:
 8011628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162a:	bf00      	nop
 801162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801162e:	bc08      	pop	{r3}
 8011630:	469e      	mov	lr, r3
 8011632:	4770      	bx	lr

08011634 <_fini>:
 8011634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011636:	bf00      	nop
 8011638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801163a:	bc08      	pop	{r3}
 801163c:	469e      	mov	lr, r3
 801163e:	4770      	bx	lr
