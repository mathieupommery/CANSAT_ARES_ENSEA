
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011af0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08011cd0  08011cd0  00012cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012310  08012310  000141f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012310  08012310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012318  08012318  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012318  08012318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801231c  0801231c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08012320  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001304  200001f8  08012514  000141f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014fc  08012514  000144fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028fd3  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058bd  00000000  00000000  0003d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002218  00000000  00000000  00042ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a5f  00000000  00000000  00044cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026957  00000000  00000000  0004672f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002de4b  00000000  00000000  0006d086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d84  00000000  00000000  0009aed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5f8  00000000  00000000  00182c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011cb8 	.word	0x08011cb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	08011cb8 	.word	0x08011cb8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Init_HighPerf_Mode_6_axis>:
#define CTRL8_XL 0x17
#define STATUS_REG 0x1E

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800103e:	2354      	movs	r3, #84	@ 0x54
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2210      	movs	r2, #16
 8001054:	21d6      	movs	r1, #214	@ 0xd6
 8001056:	4838      	ldr	r0, [pc, #224]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001058:	f004 fefc 	bl	8005e54 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 800105c:	234c      	movs	r3, #76	@ 0x4c
 800105e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2211      	movs	r2, #17
 8001072:	21d6      	movs	r1, #214	@ 0xd6
 8001074:	4830      	ldr	r0, [pc, #192]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001076:	f004 feed 	bl	8005e54 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2212      	movs	r2, #18
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4829      	ldr	r0, [pc, #164]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f004 fede 	bl	8005e54 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2215      	movs	r2, #21
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f004 fecf 	bl	8005e54 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2216      	movs	r2, #22
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	481a      	ldr	r0, [pc, #104]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f004 fec0 	bl	8005e54 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2217      	movs	r2, #23
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4812      	ldr	r0, [pc, #72]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f004 feb1 	bl	8005e54 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	221e      	movs	r2, #30
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f004 ffb6 	bl	800607c <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <Init_HighPerf_Mode_6_axis+0x108>)
 800111c:	f00e f8e6 	bl	800f2ec <puts>
        }
        if (status & 0x02) {
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <Init_HighPerf_Mode_6_axis+0x10c>)
 800112c:	f00e f8de 	bl	800f2ec <puts>
        }

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200003b4 	.word	0x200003b4
 800113c:	08011d0c 	.word	0x08011d0c
 8001140:	08011d40 	.word	0x08011d40

08001144 <Read_sensor_data>:

// Sensibilités pour accéléromètre et gyroscope
#define ACC_SENSITIVITY_16G 0.488 // Sensibilité pour ±16g
#define GYRO_SENSITIVITY_2000DPS 70 // Sensibilité pour ±2000 dps

HAL_StatusTypeDef Read_sensor_data(int16_t* accel_data, int16_t* gyro_data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af04      	add	r7, sp, #16
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 030a 	add.w	r3, r7, #10
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	221e      	movs	r2, #30
 8001162:	21d6      	movs	r1, #214	@ 0xd6
 8001164:	4856      	ldr	r0, [pc, #344]	@ (80012c0 <Read_sensor_data+0x17c>)
 8001166:	f004 ff89 	bl	800607c <HAL_I2C_Mem_Read>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <Read_sensor_data+0x34>
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	e09e      	b.n	80012b6 <Read_sensor_data+0x172>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) || !(status_reg & 0x02)) {
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <Read_sensor_data+0x48>
 8001182:	7abb      	ldrb	r3, [r7, #10]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <Read_sensor_data+0x4c>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e092      	b.n	80012b6 <Read_sensor_data+0x172>
    }
	// Lire les données du gyroscope
	for (int i = 0; i < 3; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e042      	b.n	800121c <Read_sensor_data+0xd8>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3311      	adds	r3, #17
 800119a:	b2db      	uxtb	r3, r3
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	733b      	strb	r3, [r7, #12]
		uint8_t high_addr = low_addr + 1;
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	72fb      	strb	r3, [r7, #11]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	f107 0309 	add.w	r3, r7, #9
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	21d6      	movs	r1, #214	@ 0xd6
 80011be:	4840      	ldr	r0, [pc, #256]	@ (80012c0 <Read_sensor_data+0x17c>)
 80011c0:	f004 ff5c 	bl	800607c <HAL_I2C_Mem_Read>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <Read_sensor_data+0x8e>
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	e071      	b.n	80012b6 <Read_sensor_data+0x172>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	21d6      	movs	r1, #214	@ 0xd6
 80011ea:	4835      	ldr	r0, [pc, #212]	@ (80012c0 <Read_sensor_data+0x17c>)
 80011ec:	f004 ff46 	bl	800607c <HAL_I2C_Mem_Read>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <Read_sensor_data+0xba>
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	e05b      	b.n	80012b6 <Read_sensor_data+0x172>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)((high_byte << 8) | low_byte);
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b219      	sxth	r1, r3
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b21a      	sxth	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	4403      	add	r3, r0
 8001210:	430a      	orrs	r2, r1
 8001212:	b212      	sxth	r2, r2
 8001214:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2b02      	cmp	r3, #2
 8001220:	ddb9      	ble.n	8001196 <Read_sensor_data+0x52>
	}
	// Lire les données de l'accéléromètre
	for (int i = 0; i < 3; i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	e042      	b.n	80012ae <Read_sensor_data+0x16a>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	73bb      	strb	r3, [r7, #14]
		uint8_t high_addr = low_addr + 1;
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	3301      	adds	r3, #1
 8001236:	737b      	strb	r3, [r7, #13]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	b29a      	uxth	r2, r3
 800123c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 0309 	add.w	r3, r7, #9
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	21d6      	movs	r1, #214	@ 0xd6
 8001250:	481b      	ldr	r0, [pc, #108]	@ (80012c0 <Read_sensor_data+0x17c>)
 8001252:	f004 ff13 	bl	800607c <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <Read_sensor_data+0x120>
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	e028      	b.n	80012b6 <Read_sensor_data+0x172>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	b29a      	uxth	r2, r3
 8001268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	21d6      	movs	r1, #214	@ 0xd6
 800127c:	4810      	ldr	r0, [pc, #64]	@ (80012c0 <Read_sensor_data+0x17c>)
 800127e:	f004 fefd 	bl	800607c <HAL_I2C_Mem_Read>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <Read_sensor_data+0x14c>
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	e012      	b.n	80012b6 <Read_sensor_data+0x172>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)((high_byte << 8) | low_byte);
 8001290:	7a3b      	ldrb	r3, [r7, #8]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b219      	sxth	r1, r3
 8001296:	7a7b      	ldrb	r3, [r7, #9]
 8001298:	b21a      	sxth	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4403      	add	r3, r0
 80012a2:	430a      	orrs	r2, r1
 80012a4:	b212      	sxth	r2, r2
 80012a6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3301      	adds	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	ddb9      	ble.n	8001228 <Read_sensor_data+0xe4>
	}

	return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003b4 	.word	0x200003b4

080012c4 <Read_temp>:

double Read_temp() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af04      	add	r7, sp, #16
    uint8_t low_byte, high_byte;



    // Lire l'octet bas
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x20, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	2220      	movs	r2, #32
 80012dc:	21d6      	movs	r1, #214	@ 0xd6
 80012de:	481e      	ldr	r0, [pc, #120]	@ (8001358 <Read_temp+0x94>)
 80012e0:	f004 fecc 	bl	800607c <HAL_I2C_Mem_Read>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]

    // Lire l'octet haut
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, 0x21, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	1dbb      	adds	r3, r7, #6
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	2221      	movs	r2, #33	@ 0x21
 80012fa:	21d6      	movs	r1, #214	@ 0xd6
 80012fc:	4816      	ldr	r0, [pc, #88]	@ (8001358 <Read_temp+0x94>)
 80012fe:	f004 febd 	bl	800607c <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]

    // Reconstruction du 16 bits signé
    int16_t temp = (int16_t)((high_byte << 8) | low_byte);
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	82bb      	strh	r3, [r7, #20]

    // Conversion en °C
    double temperature = (temp / 256.0) + 25.0;
 8001314:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f92b 	bl	8000574 <__aeabi_i2d>
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <Read_temp+0x98>)
 8001324:	f7ff faba 	bl	800089c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <Read_temp+0x9c>)
 8001336:	f7fe ffd1 	bl	80002dc <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return temperature;
 8001342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001346:	ec43 2b17 	vmov	d7, r2, r3
}
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200003b4 	.word	0x200003b4
 800135c:	40700000 	.word	0x40700000
 8001360:	40390000 	.word	0x40390000

08001364 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	@ 0x30
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2220      	movs	r2, #32
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00d ffcf 	bl	800f320 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001382:	4b48      	ldr	r3, [pc, #288]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001384:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001388:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800138a:	4b46      	ldr	r3, [pc, #280]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800138c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001390:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001398:	4b42      	ldr	r3, [pc, #264]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013a4:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013aa:	4b3e      	ldr	r3, [pc, #248]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013ac:	2208      	movs	r2, #8
 80013ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80013bc:	4b39      	ldr	r3, [pc, #228]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013be:	2204      	movs	r2, #4
 80013c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80013ca:	4b36      	ldr	r3, [pc, #216]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013cc:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80013d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013d2:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013da:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e2:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	482c      	ldr	r0, [pc, #176]	@ (80014a4 <MX_ADC1_Init+0x140>)
 80013f2:	f002 fe69 	bl	80040c8 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80013fc:	f001 fb2e 	bl	8002a5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4826      	ldr	r0, [pc, #152]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800140c:	f003 fdd8 	bl	8004fc0 <HAL_ADCEx_MultiModeConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001416:	f001 fb21 	bl	8002a5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <MX_ADC1_Init+0x144>)
 800141c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800141e:	2306      	movs	r3, #6
 8001420:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001422:	2307      	movs	r3, #7
 8001424:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001426:	237f      	movs	r3, #127	@ 0x7f
 8001428:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800142a:	2304      	movs	r3, #4
 800142c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001438:	f003 f892 	bl	8004560 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001442:	f001 fb0b 	bl	8002a5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_ADC1_Init+0x148>)
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800144a:	230c      	movs	r3, #12
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001454:	f003 f884 	bl	8004560 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800145e:	f001 fafd 	bl	8002a5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001462:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <MX_ADC1_Init+0x14c>)
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001466:	2312      	movs	r3, #18
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_ADC1_Init+0x140>)
 8001470:	f003 f876 	bl	8004560 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800147a:	f001 faef 	bl	8002a5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <MX_ADC1_Init+0x150>)
 8001480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001482:	2318      	movs	r3, #24
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_ADC1_Init+0x140>)
 800148c:	f003 f868 	bl	8004560 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001496:	f001 fae1 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000214 	.word	0x20000214
 80014a8:	cb840000 	.word	0xcb840000
 80014ac:	c3210000 	.word	0xc3210000
 80014b0:	08600004 	.word	0x08600004
 80014b4:	0c900008 	.word	0x0c900008

080014b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2220      	movs	r2, #32
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00d ff2b 	bl	800f320 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014ca:	4b2c      	ldr	r3, [pc, #176]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001580 <MX_ADC2_Init+0xc8>)
 80014ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014d8:	4b28      	ldr	r3, [pc, #160]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014de:	4b27      	ldr	r3, [pc, #156]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_ADC2_Init+0xc4>)
 80014fe:	2201      	movs	r2, #1
 8001500:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001504:	2201      	movs	r2, #1
 8001506:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_ADC2_Init+0xc4>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001512:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_ADC2_Init+0xc4>)
 800151a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_ADC2_Init+0xc4>)
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001536:	4811      	ldr	r0, [pc, #68]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001538:	f002 fdc6 	bl	80040c8 <HAL_ADC_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001542:	f001 fa8b 	bl	8002a5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_ADC2_Init+0xcc>)
 8001548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154a:	2306      	movs	r3, #6
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800154e:	2307      	movs	r3, #7
 8001550:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001552:	237f      	movs	r3, #127	@ 0x7f
 8001554:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001556:	2304      	movs	r3, #4
 8001558:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_ADC2_Init+0xc4>)
 8001564:	f002 fffc 	bl	8004560 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800156e:	f001 fa75 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000280 	.word	0x20000280
 8001580:	50000100 	.word	0x50000100
 8001584:	47520000 	.word	0x47520000

08001588 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09c      	sub	sp, #112	@ 0x70
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	2244      	movs	r2, #68	@ 0x44
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00d feb9 	bl	800f320 <memset>
  if(adcHandle->Instance==ADC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b6:	d169      	bne.n	800168c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80015c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 f8a1 	bl	8007710 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015d4:	f001 fa42 	bl	8002a5c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015d8:	4b65      	ldr	r3, [pc, #404]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a64      	ldr	r2, [pc, #400]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80015e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015e2:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10b      	bne.n	8001602 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015ea:	4b62      	ldr	r3, [pc, #392]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a61      	ldr	r2, [pc, #388]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80015f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b5c      	ldr	r3, [pc, #368]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a5b      	ldr	r2, [pc, #364]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b59      	ldr	r3, [pc, #356]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800161a:	2306      	movs	r3, #6
 800161c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001630:	f004 f9b8 	bl	80059a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001636:	4a51      	ldr	r2, [pc, #324]	@ (800177c <HAL_ADC_MspInit+0x1f4>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800163a:	4b4f      	ldr	r3, [pc, #316]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800163c:	2205      	movs	r2, #5
 800163e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001640:	4b4d      	ldr	r3, [pc, #308]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800164e:	2280      	movs	r2, #128	@ 0x80
 8001650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001652:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165a:	4b47      	ldr	r3, [pc, #284]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800165c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001662:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001664:	2220      	movs	r2, #32
 8001666:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001668:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800166e:	4842      	ldr	r0, [pc, #264]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001670:	f003 fe5a 	bl	8005328 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800167a:	f001 f9ef 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a3d      	ldr	r2, [pc, #244]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001682:	655a      	str	r2, [r3, #84]	@ 0x54
 8001684:	4a3c      	ldr	r2, [pc, #240]	@ (8001778 <HAL_ADC_MspInit+0x1f0>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800168a:	e06d      	b.n	8001768 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3b      	ldr	r2, [pc, #236]	@ (8001780 <HAL_ADC_MspInit+0x1f8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d168      	bne.n	8001768 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800169a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800169c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016a0:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 f832 	bl	8007710 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80016b2:	f001 f9d3 	bl	8002a5c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80016be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_ADC_MspInit+0x1e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10b      	bne.n	80016e0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016cc:	4a29      	ldr	r2, [pc, #164]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	4a23      	ldr	r2, [pc, #140]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_ADC_MspInit+0x1ec>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016f8:	2310      	movs	r3, #16
 80016fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f004 f949 	bl	80059a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001714:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <HAL_ADC_MspInit+0x200>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001736:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800173a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001742:	2220      	movs	r2, #32
 8001744:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 800174e:	f003 fdeb 	bl	8005328 <HAL_DMA_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8001758:	f001 f980 	bl	8002a5c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001760:	655a      	str	r2, [r3, #84]	@ 0x54
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_ADC_MspInit+0x1fc>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001768:	bf00      	nop
 800176a:	3770      	adds	r7, #112	@ 0x70
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200003ac 	.word	0x200003ac
 8001774:	40021000 	.word	0x40021000
 8001778:	200002ec 	.word	0x200002ec
 800177c:	40020030 	.word	0x40020030
 8001780:	50000100 	.word	0x50000100
 8001784:	2000034c 	.word	0x2000034c
 8001788:	40020058 	.word	0x40020058
 800178c:	00000000 	.word	0x00000000

08001790 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017a2:	f040 80cd 	bne.w	8001940 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80017a6:	4b80      	ldr	r3, [pc, #512]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fee2 	bl	8000574 <__aeabi_i2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	a178      	add	r1, pc, #480	@ (adr r1, 8001998 <HAL_ADC_ConvCpltCallback+0x208>)
 80017b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ba:	f7ff f86f 	bl	800089c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa37 	bl	8000c38 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a77      	ldr	r2, [pc, #476]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 80017ce:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80017d0:	4b77      	ldr	r3, [pc, #476]	@ (80019b0 <HAL_ADC_ConvCpltCallback+0x220>)
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	4b77      	ldr	r3, [pc, #476]	@ (80019b4 <HAL_ADC_ConvCpltCallback+0x224>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e0:	ee17 0a90 	vmov	r0, s15
 80017e4:	f7fe fed8 	bl	8000598 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	f04f 0000 	mov.w	r0, #0
 80017f0:	4971      	ldr	r1, [pc, #452]	@ (80019b8 <HAL_ADC_ConvCpltCallback+0x228>)
 80017f2:	f7ff f853 	bl	800089c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4690      	mov	r8, r2
 80017fc:	4699      	mov	r9, r3
 80017fe:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 8001800:	885b      	ldrh	r3, [r3, #2]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feb6 	bl	8000574 <__aeabi_i2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	4b67      	ldr	r3, [pc, #412]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fec1 	bl	8000598 <__aeabi_f2d>
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b68      	ldr	r3, [pc, #416]	@ (80019bc <HAL_ADC_ConvCpltCallback+0x22c>)
 800181c:	f7ff f83e 	bl	800089c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe ff0e 	bl	8000648 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	461d      	mov	r5, r3
 8001834:	4b5f      	ldr	r3, [pc, #380]	@ (80019b4 <HAL_ADC_ConvCpltCallback+0x224>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fead 	bl	8000598 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4620      	mov	r0, r4
 8001844:	4629      	mov	r1, r5
 8001846:	f7fe fd47 	bl	80002d8 <__aeabi_dsub>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4640      	mov	r0, r8
 8001850:	4649      	mov	r1, r9
 8001852:	f7fe fef9 	bl	8000648 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9eb 	bl	8000c38 <__aeabi_d2f>
 8001862:	ee07 0a10 	vmov	s14, r0
 8001866:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186e:	4b54      	ldr	r3, [pc, #336]	@ (80019c0 <HAL_ADC_ConvCpltCallback+0x230>)
 8001870:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 8001874:	4b4c      	ldr	r3, [pc, #304]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 8001876:	88db      	ldrh	r3, [r3, #6]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe7b 	bl	8000574 <__aeabi_i2d>
 800187e:	a348      	add	r3, pc, #288	@ (adr r3, 80019a0 <HAL_ADC_ConvCpltCallback+0x210>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f80a 	bl	800089c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <HAL_ADC_ConvCpltCallback+0x22c>)
 8001896:	f7fe fed7 	bl	8000648 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4614      	mov	r4, r2
 80018a0:	461d      	mov	r5, r3
 80018a2:	4b42      	ldr	r3, [pc, #264]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe76 	bl	8000598 <__aeabi_f2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe fec8 	bl	8000648 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f9ba 	bl	8000c38 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a3f      	ldr	r2, [pc, #252]	@ (80019c4 <HAL_ADC_ConvCpltCallback+0x234>)
 80018c8:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 80018cc:	889b      	ldrh	r3, [r3, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe50 	bl	8000574 <__aeabi_i2d>
 80018d4:	a332      	add	r3, pc, #200	@ (adr r3, 80019a0 <HAL_ADC_ConvCpltCallback+0x210>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe ffdf 	bl	800089c <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <HAL_ADC_ConvCpltCallback+0x238>)
 80018ec:	f7fe feac 	bl	8000648 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe4b 	bl	8000598 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	f7fe fe9d 	bl	8000648 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f98f 	bl	8000c38 <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	4a2b      	ldr	r2, [pc, #172]	@ (80019cc <HAL_ADC_ConvCpltCallback+0x23c>)
 800191e:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 8001920:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_ADC_ConvCpltCallback+0x234>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_ADC_ConvCpltCallback+0x23c>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <HAL_ADC_ConvCpltCallback+0x240>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 8001936:	2204      	movs	r2, #4
 8001938:	491b      	ldr	r1, [pc, #108]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 800193a:	4826      	ldr	r0, [pc, #152]	@ (80019d4 <HAL_ADC_ConvCpltCallback+0x244>)
 800193c:	f002 fd48 	bl	80043d0 <HAL_ADC_Start_DMA>

	}
	if(hadc->Instance==ADC2){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a24      	ldr	r2, [pc, #144]	@ (80019d8 <HAL_ADC_ConvCpltCallback+0x248>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d11f      	bne.n	800198a <HAL_ADC_ConvCpltCallback+0x1fa>
		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x218>)
 800194c:	891b      	ldrh	r3, [r3, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe10 	bl	8000574 <__aeabi_i2d>
 8001954:	a312      	add	r3, pc, #72	@ (adr r3, 80019a0 <HAL_ADC_ConvCpltCallback+0x210>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe ff9f 	bl	800089c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f967 	bl	8000c38 <__aeabi_d2f>
 800196a:	ee07 0a10 	vmov	s14, r0
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x21c>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_ADC_ConvCpltCallback+0x24c>)
 800197a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_ADC_ConvCpltCallback+0x250>)
 8001980:	2201      	movs	r2, #1
 8001982:	4619      	mov	r1, r3
 8001984:	4817      	ldr	r0, [pc, #92]	@ (80019e4 <HAL_ADC_ConvCpltCallback+0x254>)
 8001986:	f002 fd23 	bl	80043d0 <HAL_ADC_Start_DMA>

	}

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001994:	f3af 8000 	nop.w
 8001998:	d70a3d70 	.word	0xd70a3d70
 800199c:	40b36323 	.word	0x40b36323
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40affe00 	.word	0x40affe00
 80019a8:	20000be0 	.word	0x20000be0
 80019ac:	20000bf0 	.word	0x20000bf0
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004
 80019b8:	40590000 	.word	0x40590000
 80019bc:	40080000 	.word	0x40080000
 80019c0:	20000bec 	.word	0x20000bec
 80019c4:	20000bf4 	.word	0x20000bf4
 80019c8:	404e0000 	.word	0x404e0000
 80019cc:	20000bf8 	.word	0x20000bf8
 80019d0:	20000bfc 	.word	0x20000bfc
 80019d4:	20000214 	.word	0x20000214
 80019d8:	50000100 	.word	0x50000100
 80019dc:	20000c00 	.word	0x20000c00
 80019e0:	20000be8 	.word	0x20000be8
 80019e4:	20000280 	.word	0x20000280

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019ee:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <MX_DMA_Init+0x90>)
 80019f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f2:	4a21      	ldr	r2, [pc, #132]	@ (8001a78 <MX_DMA_Init+0x90>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <MX_DMA_Init+0x90>)
 80019fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <MX_DMA_Init+0x90>)
 8001a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <MX_DMA_Init+0x90>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <MX_DMA_Init+0x90>)
 8001a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	200b      	movs	r0, #11
 8001a24:	f003 fc4b 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a28:	200b      	movs	r0, #11
 8001a2a:	f003 fc62 	bl	80052f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	200c      	movs	r0, #12
 8001a34:	f003 fc43 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a38:	200c      	movs	r0, #12
 8001a3a:	f003 fc5a 	bl	80052f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200d      	movs	r0, #13
 8001a44:	f003 fc3b 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a48:	200d      	movs	r0, #13
 8001a4a:	f003 fc52 	bl	80052f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	200e      	movs	r0, #14
 8001a54:	f003 fc33 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a58:	200e      	movs	r0, #14
 8001a5a:	f003 fc4a 	bl	80052f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	200f      	movs	r0, #15
 8001a64:	f003 fc2b 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a68:	200f      	movs	r0, #15
 8001a6a:	f003 fc42 	bl	80052f2 <HAL_NVIC_EnableIRQ>

}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000

08001a7c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2110      	movs	r1, #16
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <SELECT+0x14>)
 8001a86:	f004 f90f 	bl	8005ca8 <HAL_GPIO_WritePin>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	48000800 	.word	0x48000800

08001a94 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2110      	movs	r1, #16
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <DESELECT+0x14>)
 8001a9e:	f004 f903 	bl	8005ca8 <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	48000800 	.word	0x48000800

08001aac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001ab6:	bf00      	nop
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <SPI_TxByte+0x30>)
 8001aba:	f006 fc59 	bl	8008370 <HAL_SPI_GetState>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d1f9      	bne.n	8001ab8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001ac4:	1df9      	adds	r1, r7, #7
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	2201      	movs	r2, #1
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <SPI_TxByte+0x30>)
 8001ace:	f006 f8ba 	bl	8007c46 <HAL_SPI_Transmit>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000d38 	.word	0x20000d38

08001ae0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001ae6:	23ff      	movs	r3, #255	@ 0xff
 8001ae8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001aee:	bf00      	nop
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <SPI_RxByte+0x38>)
 8001af2:	f006 fc3d 	bl	8008370 <HAL_SPI_GetState>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d1f9      	bne.n	8001af0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001afc:	1dba      	adds	r2, r7, #6
 8001afe:	1df9      	adds	r1, r7, #7
 8001b00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <SPI_RxByte+0x38>)
 8001b0a:	f006 fa12 	bl	8007f32 <HAL_SPI_TransmitReceive>

  return data;
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000d38 	.word	0x20000d38

08001b1c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001b24:	f7ff ffdc 	bl	8001ae0 <SPI_RxByte>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	701a      	strb	r2, [r3, #0]
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <SD_ReadyWait+0x34>)
 8001b40:	2232      	movs	r2, #50	@ 0x32
 8001b42:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001b44:	f7ff ffcc 	bl	8001ae0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001b48:	f7ff ffca 	bl	8001ae0 <SPI_RxByte>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2bff      	cmp	r3, #255	@ 0xff
 8001b54:	d004      	beq.n	8001b60 <SD_ReadyWait+0x28>
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SD_ReadyWait+0x34>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f3      	bne.n	8001b48 <SD_ReadyWait+0x10>

  return res;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200003b1 	.word	0x200003b1

08001b70 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001b76:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001b7c:	f7ff ff8a 	bl	8001a94 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e005      	b.n	8001b92 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001b86:	20ff      	movs	r0, #255	@ 0xff
 8001b88:	f7ff ff90 	bl	8001aac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	ddf6      	ble.n	8001b86 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001b98:	f7ff ff70 	bl	8001a7c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001b9c:	2340      	movs	r3, #64	@ 0x40
 8001b9e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001bb0:	2395      	movs	r3, #149	@ 0x95
 8001bb2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e009      	b.n	8001bce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001bba:	1d3a      	adds	r2, r7, #4
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff72 	bl	8001aac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	ddf2      	ble.n	8001bba <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001bd4:	e002      	b.n	8001bdc <SD_PowerOn+0x6c>
  {
    Count--;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001bdc:	f7ff ff80 	bl	8001ae0 <SPI_RxByte>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d002      	beq.n	8001bec <SD_PowerOn+0x7c>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f4      	bne.n	8001bd6 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001bec:	f7ff ff52 	bl	8001a94 <DESELECT>
  SPI_TxByte(0XFF);
 8001bf0:	20ff      	movs	r0, #255	@ 0xff
 8001bf2:	f7ff ff5b 	bl	8001aac <SPI_TxByte>

  PowerFlag = 1;
 8001bf6:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <SD_PowerOn+0x94>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200003b3 	.word	0x200003b3

08001c08 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <SD_PowerOff+0x14>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200003b3 	.word	0x200003b3

08001c20 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <SD_CheckPower+0x14>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200003b3 	.word	0x200003b3

08001c38 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <SD_RxDataBlock+0x68>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001c48:	f7ff ff4a 	bl	8001ae0 <SPI_RxByte>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2bff      	cmp	r3, #255	@ 0xff
 8001c54:	d104      	bne.n	8001c60 <SD_RxDataBlock+0x28>
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <SD_RxDataBlock+0x68>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f3      	bne.n	8001c48 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c64:	d001      	beq.n	8001c6a <SD_RxDataBlock+0x32>
    return FALSE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e016      	b.n	8001c98 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff53 	bl	8001b1c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff4d 	bl	8001b1c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3b02      	subs	r3, #2
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ed      	bne.n	8001c6a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001c8e:	f7ff ff27 	bl	8001ae0 <SPI_RxByte>
  SPI_RxByte();
 8001c92:	f7ff ff25 	bl	8001ae0 <SPI_RxByte>

  return TRUE;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200003b0 	.word	0x200003b0

08001ca4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001cb4:	f7ff ff40 	bl	8001b38 <SD_ReadyWait>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2bff      	cmp	r3, #255	@ 0xff
 8001cbc:	d001      	beq.n	8001cc2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e040      	b.n	8001d44 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fef1 	bl	8001aac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	2bfd      	cmp	r3, #253	@ 0xfd
 8001cce:	d031      	beq.n	8001d34 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fee5 	bl	8001aac <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fede 	bl	8001aac <SPI_TxByte>
    } while (--wc);
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	73bb      	strb	r3, [r7, #14]
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1eb      	bne.n	8001cd4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001cfc:	f7ff fef0 	bl	8001ae0 <SPI_RxByte>
    SPI_RxByte();
 8001d00:	f7ff feee 	bl	8001ae0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001d04:	e00b      	b.n	8001d1e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001d06:	f7ff feeb 	bl	8001ae0 <SPI_RxByte>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d006      	beq.n	8001d26 <SD_TxDataBlock+0x82>
        break;

      i++;
 8001d18:	7b7b      	ldrb	r3, [r7, #13]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001d1e:	7b7b      	ldrb	r3, [r7, #13]
 8001d20:	2b40      	cmp	r3, #64	@ 0x40
 8001d22:	d9f0      	bls.n	8001d06 <SD_TxDataBlock+0x62>
 8001d24:	e000      	b.n	8001d28 <SD_TxDataBlock+0x84>
        break;
 8001d26:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001d28:	bf00      	nop
 8001d2a:	f7ff fed9 	bl	8001ae0 <SPI_RxByte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0fa      	beq.n	8001d2a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d101      	bne.n	8001d42 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001d58:	f7ff feee 	bl	8001b38 <SD_ReadyWait>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2bff      	cmp	r3, #255	@ 0xff
 8001d60:	d001      	beq.n	8001d66 <SD_SendCmd+0x1a>
    return 0xFF;
 8001d62:	23ff      	movs	r3, #255	@ 0xff
 8001d64:	e040      	b.n	8001de8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe9f 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	0e1b      	lsrs	r3, r3, #24
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fe99 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fe93 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe8d 	bl	8001aac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fe88 	bl	8001aac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b40      	cmp	r3, #64	@ 0x40
 8001da4:	d101      	bne.n	8001daa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001da6:	2395      	movs	r3, #149	@ 0x95
 8001da8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b48      	cmp	r3, #72	@ 0x48
 8001dae:	d101      	bne.n	8001db4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001db0:	2387      	movs	r3, #135	@ 0x87
 8001db2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fe78 	bl	8001aac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b4c      	cmp	r3, #76	@ 0x4c
 8001dc0:	d101      	bne.n	8001dc6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001dc2:	f7ff fe8d 	bl	8001ae0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001dca:	f7ff fe89 	bl	8001ae0 <SPI_RxByte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001dd2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da05      	bge.n	8001de6 <SD_SendCmd+0x9a>
 8001dda:	7bbb      	ldrb	r3, [r7, #14]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	73bb      	strb	r3, [r7, #14]
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f1      	bne.n	8001dca <SD_SendCmd+0x7e>

  return res;
 8001de6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d5      	b.n	8001fb0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001e04:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <SD_disk_initialize+0x2a>
    return Stat;
 8001e12:	4b69      	ldr	r3, [pc, #420]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	e0ca      	b.n	8001fb0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001e1a:	f7ff fea9 	bl	8001b70 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001e1e:	f7ff fe2d 	bl	8001a7c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001e26:	2100      	movs	r1, #0
 8001e28:	2040      	movs	r0, #64	@ 0x40
 8001e2a:	f7ff ff8f 	bl	8001d4c <SD_SendCmd>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	f040 80a5 	bne.w	8001f80 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001e36:	4b61      	ldr	r3, [pc, #388]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001e38:	2264      	movs	r2, #100	@ 0x64
 8001e3a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001e3c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001e40:	2048      	movs	r0, #72	@ 0x48
 8001e42:	f7ff ff83 	bl	8001d4c <SD_SendCmd>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d158      	bne.n	8001efe <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e00c      	b.n	8001e6c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001e52:	7bfc      	ldrb	r4, [r7, #15]
 8001e54:	f7ff fe44 	bl	8001ae0 <SPI_RxByte>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f104 0310 	add.w	r3, r4, #16
 8001e60:	443b      	add	r3, r7
 8001e62:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d9ef      	bls.n	8001e52 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001e72:	7abb      	ldrb	r3, [r7, #10]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 8083 	bne.w	8001f80 <SD_disk_initialize+0x190>
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	2baa      	cmp	r3, #170	@ 0xaa
 8001e7e:	d17f      	bne.n	8001f80 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001e80:	2100      	movs	r1, #0
 8001e82:	2077      	movs	r0, #119	@ 0x77
 8001e84:	f7ff ff62 	bl	8001d4c <SD_SendCmd>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d807      	bhi.n	8001e9e <SD_disk_initialize+0xae>
 8001e8e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e92:	2069      	movs	r0, #105	@ 0x69
 8001e94:	f7ff ff5a 	bl	8001d4c <SD_SendCmd>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001e9e:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1eb      	bne.n	8001e80 <SD_disk_initialize+0x90>
 8001ea8:	e000      	b.n	8001eac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001eaa:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001eac:	4b43      	ldr	r3, [pc, #268]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d064      	beq.n	8001f80 <SD_disk_initialize+0x190>
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	207a      	movs	r0, #122	@ 0x7a
 8001eba:	f7ff ff47 	bl	8001d4c <SD_SendCmd>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d15d      	bne.n	8001f80 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e00c      	b.n	8001ee4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001eca:	7bfc      	ldrb	r4, [r7, #15]
 8001ecc:	f7ff fe08 	bl	8001ae0 <SPI_RxByte>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f104 0310 	add.w	r3, r4, #16
 8001ed8:	443b      	add	r3, r7
 8001eda:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d9ef      	bls.n	8001eca <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001eea:	7a3b      	ldrb	r3, [r7, #8]
 8001eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SD_disk_initialize+0x108>
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	e000      	b.n	8001efa <SD_disk_initialize+0x10a>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	73bb      	strb	r3, [r7, #14]
 8001efc:	e040      	b.n	8001f80 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001efe:	2100      	movs	r1, #0
 8001f00:	2077      	movs	r0, #119	@ 0x77
 8001f02:	f7ff ff23 	bl	8001d4c <SD_SendCmd>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d808      	bhi.n	8001f1e <SD_disk_initialize+0x12e>
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2069      	movs	r0, #105	@ 0x69
 8001f10:	f7ff ff1c 	bl	8001d4c <SD_SendCmd>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d801      	bhi.n	8001f1e <SD_disk_initialize+0x12e>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e000      	b.n	8001f20 <SD_disk_initialize+0x130>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d10e      	bne.n	8001f46 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2077      	movs	r0, #119	@ 0x77
 8001f2c:	f7ff ff0e 	bl	8001d4c <SD_SendCmd>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d80e      	bhi.n	8001f54 <SD_disk_initialize+0x164>
 8001f36:	2100      	movs	r1, #0
 8001f38:	2069      	movs	r0, #105	@ 0x69
 8001f3a:	f7ff ff07 	bl	8001d4c <SD_SendCmd>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001f44:	e00d      	b.n	8001f62 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001f46:	2100      	movs	r1, #0
 8001f48:	2041      	movs	r0, #65	@ 0x41
 8001f4a:	f7ff feff 	bl	8001d4c <SD_SendCmd>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e1      	bne.n	8001f22 <SD_disk_initialize+0x132>
 8001f5e:	e000      	b.n	8001f62 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001f60:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <SD_disk_initialize+0x1cc>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <SD_disk_initialize+0x18c>
 8001f6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f70:	2050      	movs	r0, #80	@ 0x50
 8001f72:	f7ff feeb 	bl	8001d4c <SD_SendCmd>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001f80:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <SD_disk_initialize+0x1d0>)
 8001f82:	7bbb      	ldrb	r3, [r7, #14]
 8001f84:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001f86:	f7ff fd85 	bl	8001a94 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001f8a:	f7ff fda9 	bl	8001ae0 <SPI_RxByte>

  if (type)
 8001f8e:	7bbb      	ldrb	r3, [r7, #14]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e001      	b.n	8001faa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001fa6:	f7ff fe2f 	bl	8001c08 <SD_PowerOff>
  }

  return Stat;
 8001faa:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <SD_disk_initialize+0x1c8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b2db      	uxtb	r3, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	200003b0 	.word	0x200003b0
 8001fc0:	200003b2 	.word	0x200003b2

08001fc4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e002      	b.n	8001fde <SD_disk_status+0x1a>

  return Stat;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <SD_disk_status+0x28>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <SD_disk_read+0x1c>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <SD_disk_read+0x20>
    return RES_PARERR;
 800200c:	2304      	movs	r3, #4
 800200e:	e051      	b.n	80020b4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002010:	4b2a      	ldr	r3, [pc, #168]	@ (80020bc <SD_disk_read+0xcc>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800201e:	2303      	movs	r3, #3
 8002020:	e048      	b.n	80020b4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8002022:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <SD_disk_read+0xd0>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	025b      	lsls	r3, r3, #9
 8002032:	607b      	str	r3, [r7, #4]

  SELECT();
 8002034:	f7ff fd22 	bl	8001a7c <SELECT>

  if (count == 1)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d111      	bne.n	8002062 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	2051      	movs	r0, #81	@ 0x51
 8002042:	f7ff fe83 	bl	8001d4c <SD_SendCmd>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d129      	bne.n	80020a0 <SD_disk_read+0xb0>
 800204c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002050:	68b8      	ldr	r0, [r7, #8]
 8002052:	f7ff fdf1 	bl	8001c38 <SD_RxDataBlock>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d021      	beq.n	80020a0 <SD_disk_read+0xb0>
      count = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	e01e      	b.n	80020a0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	2052      	movs	r0, #82	@ 0x52
 8002066:	f7ff fe71 	bl	8001d4c <SD_SendCmd>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d117      	bne.n	80020a0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002070:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002074:	68b8      	ldr	r0, [r7, #8]
 8002076:	f7ff fddf 	bl	8001c38 <SD_RxDataBlock>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002086:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ed      	bne.n	8002070 <SD_disk_read+0x80>
 8002094:	e000      	b.n	8002098 <SD_disk_read+0xa8>
          break;
 8002096:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8002098:	2100      	movs	r1, #0
 800209a:	204c      	movs	r0, #76	@ 0x4c
 800209c:	f7ff fe56 	bl	8001d4c <SD_SendCmd>
    }
  }

  DESELECT();
 80020a0:	f7ff fcf8 	bl	8001a94 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80020a4:	f7ff fd1c 	bl	8001ae0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf14      	ite	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	2300      	moveq	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200003b2 	.word	0x200003b2

080020c4 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <SD_disk_write+0x1c>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80020e0:	2304      	movs	r3, #4
 80020e2:	e06b      	b.n	80021bc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80020e4:	4b37      	ldr	r3, [pc, #220]	@ (80021c4 <SD_disk_write+0x100>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e062      	b.n	80021bc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80020f6:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <SD_disk_write+0x100>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002104:	2302      	movs	r3, #2
 8002106:	e059      	b.n	80021bc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002108:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <SD_disk_write+0x104>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	607b      	str	r3, [r7, #4]

  SELECT();
 800211a:	f7ff fcaf 	bl	8001a7c <SELECT>

  if (count == 1)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d110      	bne.n	8002146 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	2058      	movs	r0, #88	@ 0x58
 8002128:	f7ff fe10 	bl	8001d4c <SD_SendCmd>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13a      	bne.n	80021a8 <SD_disk_write+0xe4>
 8002132:	21fe      	movs	r1, #254	@ 0xfe
 8002134:	68b8      	ldr	r0, [r7, #8]
 8002136:	f7ff fdb5 	bl	8001ca4 <SD_TxDataBlock>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d033      	beq.n	80021a8 <SD_disk_write+0xe4>
      count = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	e030      	b.n	80021a8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <SD_disk_write+0x104>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002152:	2100      	movs	r1, #0
 8002154:	2077      	movs	r0, #119	@ 0x77
 8002156:	f7ff fdf9 	bl	8001d4c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	2057      	movs	r0, #87	@ 0x57
 800215e:	f7ff fdf5 	bl	8001d4c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	2059      	movs	r0, #89	@ 0x59
 8002166:	f7ff fdf1 	bl	8001d4c <SD_SendCmd>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d11b      	bne.n	80021a8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002170:	21fc      	movs	r1, #252	@ 0xfc
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f7ff fd96 	bl	8001ca4 <SD_TxDataBlock>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002184:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3b01      	subs	r3, #1
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ee      	bne.n	8002170 <SD_disk_write+0xac>
 8002192:	e000      	b.n	8002196 <SD_disk_write+0xd2>
          break;
 8002194:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8002196:	21fd      	movs	r1, #253	@ 0xfd
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff fd83 	bl	8001ca4 <SD_TxDataBlock>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <SD_disk_write+0xe4>
      {
        count = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80021a8:	f7ff fc74 	bl	8001a94 <DESELECT>
  SPI_RxByte();
 80021ac:	f7ff fc98 	bl	8001ae0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000008 	.word	0x20000008
 80021c8:	200003b2 	.word	0x200003b2

080021cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b08b      	sub	sp, #44	@ 0x2c
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	603a      	str	r2, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	460b      	mov	r3, r1
 80021da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80021e6:	2304      	movs	r3, #4
 80021e8:	e119      	b.n	800241e <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d129      	bne.n	800224a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d017      	beq.n	800222e <SD_disk_ioctl+0x62>
 80021fe:	2b02      	cmp	r3, #2
 8002200:	dc1f      	bgt.n	8002242 <SD_disk_ioctl+0x76>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <SD_disk_ioctl+0x40>
 8002206:	2b01      	cmp	r3, #1
 8002208:	d00b      	beq.n	8002222 <SD_disk_ioctl+0x56>
 800220a:	e01a      	b.n	8002242 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800220c:	f7ff fd08 	bl	8001c20 <SD_CheckPower>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002216:	f7ff fcf7 	bl	8001c08 <SD_PowerOff>
      res = RES_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002220:	e0fb      	b.n	800241a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8002222:	f7ff fca5 	bl	8001b70 <SD_PowerOn>
      res = RES_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800222c:	e0f5      	b.n	800241a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	1c5c      	adds	r4, r3, #1
 8002232:	f7ff fcf5 	bl	8001c20 <SD_CheckPower>
 8002236:	4603      	mov	r3, r0
 8002238:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800223a:	2300      	movs	r3, #0
 800223c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002240:	e0eb      	b.n	800241a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8002242:	2304      	movs	r3, #4
 8002244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002248:	e0e7      	b.n	800241a <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800224a:	4b77      	ldr	r3, [pc, #476]	@ (8002428 <SD_disk_ioctl+0x25c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002258:	2303      	movs	r3, #3
 800225a:	e0e0      	b.n	800241e <SD_disk_ioctl+0x252>

    SELECT();
 800225c:	f7ff fc0e 	bl	8001a7c <SELECT>

    switch (ctrl)
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	2b0d      	cmp	r3, #13
 8002264:	f200 80ca 	bhi.w	80023fc <SD_disk_ioctl+0x230>
 8002268:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <SD_disk_ioctl+0xa4>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	08002367 	.word	0x08002367
 8002274:	080022a9 	.word	0x080022a9
 8002278:	08002357 	.word	0x08002357
 800227c:	080023fd 	.word	0x080023fd
 8002280:	080023fd 	.word	0x080023fd
 8002284:	080023fd 	.word	0x080023fd
 8002288:	080023fd 	.word	0x080023fd
 800228c:	080023fd 	.word	0x080023fd
 8002290:	080023fd 	.word	0x080023fd
 8002294:	080023fd 	.word	0x080023fd
 8002298:	080023fd 	.word	0x080023fd
 800229c:	08002379 	.word	0x08002379
 80022a0:	0800239d 	.word	0x0800239d
 80022a4:	080023c1 	.word	0x080023c1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80022a8:	2100      	movs	r1, #0
 80022aa:	2049      	movs	r0, #73	@ 0x49
 80022ac:	f7ff fd4e 	bl	8001d4c <SD_SendCmd>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 80a6 	bne.w	8002404 <SD_disk_ioctl+0x238>
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2110      	movs	r1, #16
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fcba 	bl	8001c38 <SD_RxDataBlock>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 809c 	beq.w	8002404 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80022cc:	7b3b      	ldrb	r3, [r7, #12]
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10d      	bne.n	80022f2 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80022d6:	7d7b      	ldrb	r3, [r7, #21]
 80022d8:	461a      	mov	r2, r3
 80022da:	7d3b      	ldrb	r3, [r7, #20]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80022e8:	8bfb      	ldrh	r3, [r7, #30]
 80022ea:	029a      	lsls	r2, r3, #10
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e02d      	b.n	800234e <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80022f2:	7c7b      	ldrb	r3, [r7, #17]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	7dbb      	ldrb	r3, [r7, #22]
 80022fc:	09db      	lsrs	r3, r3, #7
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4413      	add	r3, r2
 8002302:	b2da      	uxtb	r2, r3
 8002304:	7d7b      	ldrb	r3, [r7, #21]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0306 	and.w	r3, r3, #6
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4413      	add	r3, r2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3302      	adds	r3, #2
 8002316:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800231a:	7d3b      	ldrb	r3, [r7, #20]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	b29b      	uxth	r3, r3
 8002328:	4413      	add	r3, r2
 800232a:	b29a      	uxth	r2, r3
 800232c:	7cbb      	ldrb	r3, [r7, #18]
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	b29b      	uxth	r3, r3
 8002332:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002336:	b29b      	uxth	r3, r3
 8002338:	4413      	add	r3, r2
 800233a:	b29b      	uxth	r3, r3
 800233c:	3301      	adds	r3, #1
 800233e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002340:	8bfa      	ldrh	r2, [r7, #30]
 8002342:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002346:	3b09      	subs	r3, #9
 8002348:	409a      	lsls	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002354:	e056      	b.n	8002404 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800235c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002364:	e055      	b.n	8002412 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002366:	f7ff fbe7 	bl	8001b38 <SD_ReadyWait>
 800236a:	4603      	mov	r3, r0
 800236c:	2bff      	cmp	r3, #255	@ 0xff
 800236e:	d14b      	bne.n	8002408 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002376:	e047      	b.n	8002408 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002378:	2100      	movs	r1, #0
 800237a:	2049      	movs	r0, #73	@ 0x49
 800237c:	f7ff fce6 	bl	8001d4c <SD_SendCmd>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d142      	bne.n	800240c <SD_disk_ioctl+0x240>
 8002386:	2110      	movs	r1, #16
 8002388:	6a38      	ldr	r0, [r7, #32]
 800238a:	f7ff fc55 	bl	8001c38 <SD_RxDataBlock>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03b      	beq.n	800240c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800239a:	e037      	b.n	800240c <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800239c:	2100      	movs	r1, #0
 800239e:	204a      	movs	r0, #74	@ 0x4a
 80023a0:	f7ff fcd4 	bl	8001d4c <SD_SendCmd>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d132      	bne.n	8002410 <SD_disk_ioctl+0x244>
 80023aa:	2110      	movs	r1, #16
 80023ac:	6a38      	ldr	r0, [r7, #32]
 80023ae:	f7ff fc43 	bl	8001c38 <SD_RxDataBlock>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02b      	beq.n	8002410 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80023be:	e027      	b.n	8002410 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80023c0:	2100      	movs	r1, #0
 80023c2:	207a      	movs	r0, #122	@ 0x7a
 80023c4:	f7ff fcc2 	bl	8001d4c <SD_SendCmd>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80023d4:	e00b      	b.n	80023ee <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80023d6:	6a3c      	ldr	r4, [r7, #32]
 80023d8:	1c63      	adds	r3, r4, #1
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	f7ff fb80 	bl	8001ae0 <SPI_RxByte>
 80023e0:	4603      	mov	r3, r0
 80023e2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80023e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023e8:	3301      	adds	r3, #1
 80023ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80023ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d9ef      	bls.n	80023d6 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80023fc:	2304      	movs	r3, #4
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002402:	e006      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 8002404:	bf00      	nop
 8002406:	e004      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 8002408:	bf00      	nop
 800240a:	e002      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 800240c:	bf00      	nop
 800240e:	e000      	b.n	8002412 <SD_disk_ioctl+0x246>
      break;
 8002410:	bf00      	nop
    }

    DESELECT();
 8002412:	f7ff fb3f 	bl	8001a94 <DESELECT>
    SPI_RxByte();
 8002416:	f7ff fb63 	bl	8001ae0 <SPI_RxByte>
  }

  return res;
 800241a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800241e:	4618      	mov	r0, r3
 8002420:	372c      	adds	r7, #44	@ 0x2c
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	20000008 	.word	0x20000008

0800242c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	@ 0x28
 8002430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002442:	4b3c      	ldr	r3, [pc, #240]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	4a3b      	ldr	r2, [pc, #236]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244e:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <MX_GPIO_Init+0x108>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	4a35      	ldr	r2, [pc, #212]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002466:	4b33      	ldr	r3, [pc, #204]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002472:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	4a2f      	ldr	r2, [pc, #188]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800247e:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <MX_GPIO_Init+0x108>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	4a29      	ldr	r2, [pc, #164]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002496:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <MX_GPIO_Init+0x108>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2110      	movs	r1, #16
 80024a6:	4824      	ldr	r0, [pc, #144]	@ (8002538 <MX_GPIO_Init+0x10c>)
 80024a8:	f003 fbfe 	bl	8005ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80024b2:	4822      	ldr	r0, [pc, #136]	@ (800253c <MX_GPIO_Init+0x110>)
 80024b4:	f003 fbf8 	bl	8005ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b8:	2310      	movs	r3, #16
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	481a      	ldr	r0, [pc, #104]	@ (8002538 <MX_GPIO_Init+0x10c>)
 80024d0:	f003 fa68 	bl	80059a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80024d4:	2306      	movs	r3, #6
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	4814      	ldr	r0, [pc, #80]	@ (800253c <MX_GPIO_Init+0x110>)
 80024ea:	f003 fa5b 	bl	80059a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	480d      	ldr	r0, [pc, #52]	@ (800253c <MX_GPIO_Init+0x110>)
 8002508:	f003 fa4c 	bl	80059a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2007      	movs	r0, #7
 8002512:	f002 fed4 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002516:	2007      	movs	r0, #7
 8002518:	f002 feeb 	bl	80052f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	2008      	movs	r0, #8
 8002522:	f002 fecc 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002526:	2008      	movs	r0, #8
 8002528:	f002 fee3 	bl	80052f2 <HAL_NVIC_EnableIRQ>

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	@ 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	48000800 	.word	0x48000800
 800253c:	48000400 	.word	0x48000400

08002540 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002546:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <MX_I2C3_Init+0x78>)
 8002548:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <MX_I2C3_Init+0x7c>)
 800254e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002558:	2201      	movs	r2, #1
 800255a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800255c:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002562:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <MX_I2C3_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800257a:	480e      	ldr	r0, [pc, #56]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800257c:	f003 fbcf 	bl	8005d1e <HAL_I2C_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002586:	f000 fa69 	bl	8002a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800258a:	2100      	movs	r1, #0
 800258c:	4809      	ldr	r0, [pc, #36]	@ (80025b4 <MX_I2C3_Init+0x74>)
 800258e:	f004 f951 	bl	8006834 <HAL_I2CEx_ConfigAnalogFilter>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002598:	f000 fa60 	bl	8002a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800259c:	2100      	movs	r1, #0
 800259e:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_I2C3_Init+0x74>)
 80025a0:	f004 f993 	bl	80068ca <HAL_I2CEx_ConfigDigitalFilter>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80025aa:	f000 fa57 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003b4 	.word	0x200003b4
 80025b8:	40007800 	.word	0x40007800
 80025bc:	10b17db5 	.word	0x10b17db5

080025c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b09c      	sub	sp, #112	@ 0x70
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	2244      	movs	r2, #68	@ 0x44
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00c fe9d 	bl	800f320 <memset>
  if(i2cHandle->Instance==I2C3)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2e      	ldr	r2, [pc, #184]	@ (80026a4 <HAL_I2C_MspInit+0xe4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d155      	bne.n	800269c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80025f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f005 f886 	bl	8007710 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800260a:	f000 fa27 	bl	8002a5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a25      	ldr	r2, [pc, #148]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800263e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002642:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002650:	2302      	movs	r3, #2
 8002652:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265e:	f003 f9a1 	bl	80059a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002666:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002674:	2308      	movs	r3, #8
 8002676:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800267c:	4619      	mov	r1, r3
 800267e:	480b      	ldr	r0, [pc, #44]	@ (80026ac <HAL_I2C_MspInit+0xec>)
 8002680:	f003 f990 	bl	80059a4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 800268a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800268e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_I2C_MspInit+0xe8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800269c:	bf00      	nop
 800269e:	3770      	adds	r7, #112	@ 0x70
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40007800 	.word	0x40007800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000800 	.word	0x48000800

080026b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b6:	f001 fa56 	bl	8003b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ba:	f000 f8c3 	bl	8002844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026be:	f7ff feb5 	bl	800242c <MX_GPIO_Init>
  MX_DMA_Init();
 80026c2:	f7ff f991 	bl	80019e8 <MX_DMA_Init>
  MX_SPI1_Init();
 80026c6:	f000 f9cf 	bl	8002a68 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80026ca:	f001 f9c7 	bl	8003a5c <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80026ce:	f008 ff6d 	bl	800b5ac <MX_FATFS_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <main+0x2c>
    Error_Handler();
 80026d8:	f000 f9c0 	bl	8002a5c <Error_Handler>
  }
  MX_I2C3_Init();
 80026dc:	f7ff ff30 	bl	8002540 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80026e0:	f000 fefa 	bl	80034d8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80026e4:	f7fe fe3e 	bl	8001364 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80026e8:	f000 ff40 	bl	800356c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80026ec:	f000 fd96 	bl	800321c <MX_TIM3_Init>
  MX_TIM4_Init();
 80026f0:	f000 fe0c 	bl	800330c <MX_TIM4_Init>
  MX_ADC2_Init();
 80026f4:	f7fe fee0 	bl	80014b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 80026f8:	2205      	movs	r2, #5
 80026fa:	493b      	ldr	r1, [pc, #236]	@ (80027e8 <main+0x138>)
 80026fc:	483b      	ldr	r0, [pc, #236]	@ (80027ec <main+0x13c>)
 80026fe:	f001 fe67 	bl	80043d0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <main+0x140>)
 8002704:	2201      	movs	r2, #1
 8002706:	4619      	mov	r1, r3
 8002708:	483a      	ldr	r0, [pc, #232]	@ (80027f4 <main+0x144>)
 800270a:	f001 fe61 	bl	80043d0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim4);
 800270e:	483a      	ldr	r0, [pc, #232]	@ (80027f8 <main+0x148>)
 8002710:	f005 fff8 	bl	8008704 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 8002714:	2201      	movs	r2, #1
 8002716:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800271a:	4838      	ldr	r0, [pc, #224]	@ (80027fc <main+0x14c>)
 800271c:	f003 fac4 	bl	8005ca8 <HAL_GPIO_WritePin>


  HAL_Delay(100);
 8002720:	2064      	movs	r0, #100	@ 0x64
 8002722:	f001 fa91 	bl	8003c48 <HAL_Delay>
  HAL_UART_Abort(&huart1);
 8002726:	4836      	ldr	r0, [pc, #216]	@ (8002800 <main+0x150>)
 8002728:	f007 fa66 	bl	8009bf8 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 800272c:	2240      	movs	r2, #64	@ 0x40
 800272e:	4935      	ldr	r1, [pc, #212]	@ (8002804 <main+0x154>)
 8002730:	4833      	ldr	r0, [pc, #204]	@ (8002800 <main+0x150>)
 8002732:	f007 fa15 	bl	8009b60 <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 8002736:	2064      	movs	r0, #100	@ 0x64
 8002738:	f001 fa86 	bl	8003c48 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 800273c:	4832      	ldr	r0, [pc, #200]	@ (8002808 <main+0x158>)
 800273e:	f007 fa5b 	bl	8009bf8 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 8002742:	221e      	movs	r2, #30
 8002744:	4931      	ldr	r1, [pc, #196]	@ (800280c <main+0x15c>)
 8002746:	4830      	ldr	r0, [pc, #192]	@ (8002808 <main+0x158>)
 8002748:	f007 fa0a 	bl	8009b60 <HAL_UART_Receive_DMA>




  f_mount(&fs, "", 0);
 800274c:	2200      	movs	r2, #0
 800274e:	4930      	ldr	r1, [pc, #192]	@ (8002810 <main+0x160>)
 8002750:	4830      	ldr	r0, [pc, #192]	@ (8002814 <main+0x164>)
 8002752:	f00a fba9 	bl	800cea8 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
  int tarvosen=0;
 800275a:	2300      	movs	r3, #0
 800275c:	603b      	str	r3, [r7, #0]
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800275e:	2213      	movs	r2, #19
 8002760:	492d      	ldr	r1, [pc, #180]	@ (8002818 <main+0x168>)
 8002762:	482e      	ldr	r0, [pc, #184]	@ (800281c <main+0x16c>)
 8002764:	f00a fbe6 	bl	800cf34 <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 8002768:	4a2d      	ldr	r2, [pc, #180]	@ (8002820 <main+0x170>)
 800276a:	492e      	ldr	r1, [pc, #184]	@ (8002824 <main+0x174>)
 800276c:	4828      	ldr	r0, [pc, #160]	@ (8002810 <main+0x160>)
 800276e:	f00a fd9b 	bl	800d2a8 <f_getfree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Init_HighPerf_Mode_6_axis();
 8002772:	f7fe fc5f 	bl	8001034 <Init_HighPerf_Mode_6_axis>
  INIT_PERM_TARVOS(0x16, 0x15); //mon adresse est 1° et on envoit à 2°
 8002776:	2115      	movs	r1, #21
 8002778:	2016      	movs	r0, #22
 800277a:	f000 fbc9 	bl	8002f10 <INIT_PERM_TARVOS>

  while (1)
   {
	if (flag_sensor == 1){
 800277e:	4b2a      	ldr	r3, [pc, #168]	@ (8002828 <main+0x178>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d118      	bne.n	80027b8 <main+0x108>
		temp_data = Read_temp();
 8002786:	f7fe fd9d 	bl	80012c4 <Read_temp>
 800278a:	eeb0 7a40 	vmov.f32	s14, s0
 800278e:	eef0 7a60 	vmov.f32	s15, s1
 8002792:	4b26      	ldr	r3, [pc, #152]	@ (800282c <main+0x17c>)
 8002794:	ed83 7b00 	vstr	d7, [r3]
		Read_sensor_data(accel_data,gyro_data);
 8002798:	4925      	ldr	r1, [pc, #148]	@ (8002830 <main+0x180>)
 800279a:	4826      	ldr	r0, [pc, #152]	@ (8002834 <main+0x184>)
 800279c:	f7fe fcd2 	bl	8001144 <Read_sensor_data>
		conversion_char(envoi);
 80027a0:	4825      	ldr	r0, [pc, #148]	@ (8002838 <main+0x188>)
 80027a2:	f000 f8a1 	bl	80028e8 <conversion_char>
		SEND_DATA_NETW(envoi, 0x82, 0x16, strlen(envoi));
 80027a6:	4824      	ldr	r0, [pc, #144]	@ (8002838 <main+0x188>)
 80027a8:	f7fd fd8a 	bl	80002c0 <strlen>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2216      	movs	r2, #22
 80027b0:	2182      	movs	r1, #130	@ 0x82
 80027b2:	4821      	ldr	r0, [pc, #132]	@ (8002838 <main+0x188>)
 80027b4:	f000 fc74 	bl	80030a0 <SEND_DATA_NETW>
	}
	if (vbat <= 6.4){
 80027b8:	4b20      	ldr	r3, [pc, #128]	@ (800283c <main+0x18c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd feeb 	bl	8000598 <__aeabi_f2d>
 80027c2:	a307      	add	r3, pc, #28	@ (adr r3, 80027e0 <main+0x130>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fe f9ba 	bl	8000b40 <__aeabi_dcmple>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <main+0x12e>
		SEND_DATA_NETW("$2,batterie faible#", 0x82, 0x16, strlen("$2,batterie faible#"));
 80027d2:	2313      	movs	r3, #19
 80027d4:	2216      	movs	r2, #22
 80027d6:	2182      	movs	r1, #130	@ 0x82
 80027d8:	4819      	ldr	r0, [pc, #100]	@ (8002840 <main+0x190>)
 80027da:	f000 fc61 	bl	80030a0 <SEND_DATA_NETW>
	if (flag_sensor == 1){
 80027de:	e7ce      	b.n	800277e <main+0xce>
 80027e0:	9999999a 	.word	0x9999999a
 80027e4:	40199999 	.word	0x40199999
 80027e8:	20000be0 	.word	0x20000be0
 80027ec:	20000214 	.word	0x20000214
 80027f0:	20000be8 	.word	0x20000be8
 80027f4:	20000280 	.word	0x20000280
 80027f8:	20000e00 	.word	0x20000e00
 80027fc:	48000400 	.word	0x48000400
 8002800:	20000ee0 	.word	0x20000ee0
 8002804:	20000b90 	.word	0x20000b90
 8002808:	20000e4c 	.word	0x20000e4c
 800280c:	20000970 	.word	0x20000970
 8002810:	08011d6c 	.word	0x08011d6c
 8002814:	20000408 	.word	0x20000408
 8002818:	08011d70 	.word	0x08011d70
 800281c:	2000063c 	.word	0x2000063c
 8002820:	20000638 	.word	0x20000638
 8002824:	2000086c 	.word	0x2000086c
 8002828:	20000d9c 	.word	0x20000d9c
 800282c:	20000d30 	.word	0x20000d30
 8002830:	20000d24 	.word	0x20000d24
 8002834:	20000d1c 	.word	0x20000d1c
 8002838:	20000c04 	.word	0x20000c04
 800283c:	20000bf4 	.word	0x20000bf4
 8002840:	08011d78 	.word	0x08011d78

08002844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b094      	sub	sp, #80	@ 0x50
 8002848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284a:	f107 0318 	add.w	r3, r7, #24
 800284e:	2238      	movs	r2, #56	@ 0x38
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f00c fd64 	bl	800f320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002866:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800286a:	f004 f973 	bl	8006b54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 800286e:	2323      	movs	r3, #35	@ 0x23
 8002870:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002872:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800287e:	2340      	movs	r3, #64	@ 0x40
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002882:	2301      	movs	r3, #1
 8002884:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002886:	2302      	movs	r3, #2
 8002888:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800288a:	2303      	movs	r3, #3
 800288c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800288e:	2301      	movs	r3, #1
 8002890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002892:	2308      	movs	r3, #8
 8002894:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002896:	2302      	movs	r3, #2
 8002898:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800289a:	2302      	movs	r3, #2
 800289c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800289e:	2302      	movs	r3, #2
 80028a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028a2:	f107 0318 	add.w	r3, r7, #24
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fa08 	bl	8006cbc <HAL_RCC_OscConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80028b2:	f000 f8d3 	bl	8002a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b6:	230f      	movs	r3, #15
 80028b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ba:	2303      	movs	r3, #3
 80028bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2102      	movs	r1, #2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fd06 	bl	80072e0 <HAL_RCC_ClockConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80028da:	f000 f8bf 	bl	8002a5c <Error_Handler>
  }
}
 80028de:	bf00      	nop
 80028e0:	3750      	adds	r7, #80	@ 0x50
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <conversion_char>:
  for (size_t i = 0; i < taille; i++) {
    destination[i] = (char)source[i];
  }
}

void conversion_char(char *envoi /*,uint16_t accel_data,uint16_t gyro_data,uint8_t position_data,uint8_t time_data,uint8_t baro_data, uint8_t temp_data*/){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    memset(envoi, 0, sizeof(envoi));
 80028f0:	2204      	movs	r2, #4
 80028f2:	2100      	movs	r1, #0
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f00c fd13 	bl	800f320 <memset>
    size_t len;
    envoi[0]='$';
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2224      	movs	r2, #36	@ 0x24
 80028fe:	701a      	strb	r2, [r3, #0]
    envoi[1]='1';
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3301      	adds	r3, #1
 8002904:	2231      	movs	r2, #49	@ 0x31
 8002906:	701a      	strb	r2, [r3, #0]
    mef_accel_gyro(accel_gyro,sizeof(accel_gyro),accel_data,gyro_data);
 8002908:	4b26      	ldr	r3, [pc, #152]	@ (80029a4 <conversion_char+0xbc>)
 800290a:	4a27      	ldr	r2, [pc, #156]	@ (80029a8 <conversion_char+0xc0>)
 800290c:	213c      	movs	r1, #60	@ 0x3c
 800290e:	4827      	ldr	r0, [pc, #156]	@ (80029ac <conversion_char+0xc4>)
 8002910:	f000 f852 	bl	80029b8 <mef_accel_gyro>
    len = strlen(envoi);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fd fcd3 	bl	80002c0 <strlen>
 800291a:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	e00c      	b.n	800293c <conversion_char+0x54>
    	envoi[i+len] = accel_gyro[i];
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	491f      	ldr	r1, [pc, #124]	@ (80029ac <conversion_char+0xc4>)
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	440a      	add	r2, r1
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(accel_gyro));i++){
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002940:	d9ef      	bls.n	8002922 <conversion_char+0x3a>
    }
    len = strlen(envoi);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fd fcbc 	bl	80002c0 <strlen>
 8002948:	60f8      	str	r0, [r7, #12]
    mef_temp(temperature, sizeof(temperature),temp_data);
 800294a:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <conversion_char+0xc8>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f970 	bl	8000c38 <__aeabi_d2f>
 8002958:	4603      	mov	r3, r0
 800295a:	ee00 3a10 	vmov	s0, r3
 800295e:	2114      	movs	r1, #20
 8002960:	4814      	ldr	r0, [pc, #80]	@ (80029b4 <conversion_char+0xcc>)
 8002962:	f000 f861 	bl	8002a28 <mef_temp>
    for (int i = 0; i<(sizeof(temperature));i++){
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e00c      	b.n	8002986 <conversion_char+0x9e>
        	envoi[i+len] = temperature[i];
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	490f      	ldr	r1, [pc, #60]	@ (80029b4 <conversion_char+0xcc>)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	440a      	add	r2, r1
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<(sizeof(temperature));i++){
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	3301      	adds	r3, #1
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b13      	cmp	r3, #19
 800298a:	d9ef      	bls.n	800296c <conversion_char+0x84>
    }
    envoi[strlen(envoi)]='#';
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fd fc97 	bl	80002c0 <strlen>
 8002992:	4602      	mov	r2, r0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4413      	add	r3, r2
 8002998:	2223      	movs	r2, #35	@ 0x23
 800299a:	701a      	strb	r2, [r3, #0]
}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000d24 	.word	0x20000d24
 80029a8:	20000d1c 	.word	0x20000d1c
 80029ac:	20000ccc 	.word	0x20000ccc
 80029b0:	20000d30 	.word	0x20000d30
 80029b4:	20000d08 	.word	0x20000d08

080029b8 <mef_accel_gyro>:

void mef_accel_gyro(char *buffer, size_t buffer_size, uint16_t accel_data[3], uint16_t gyro_data[3]) {
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b08c      	sub	sp, #48	@ 0x30
 80029bc:	af06      	add	r7, sp, #24
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
    int len = snprintf(buffer, buffer_size, "%u,%u,%u,%u,%u,%u,",
                       accel_data[0], accel_data[1], accel_data[2],
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%u,%u,%u,%u,%u,%u,",
 80029ca:	461d      	mov	r5, r3
                       accel_data[0], accel_data[1], accel_data[2],
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3302      	adds	r3, #2
 80029d0:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%u,%u,%u,%u,%u,%u,",
 80029d2:	461a      	mov	r2, r3
                       accel_data[0], accel_data[1], accel_data[2],
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%u,%u,%u,%u,%u,%u,",
 80029da:	4619      	mov	r1, r3
                       gyro_data[0], gyro_data[1], gyro_data[2]);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%u,%u,%u,%u,%u,%u,",
 80029e0:	4618      	mov	r0, r3
                       gyro_data[0], gyro_data[1], gyro_data[2]);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	3302      	adds	r3, #2
 80029e6:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%u,%u,%u,%u,%u,%u,",
 80029e8:	461c      	mov	r4, r3
                       gyro_data[0], gyro_data[1], gyro_data[2]);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3304      	adds	r3, #4
 80029ee:	881b      	ldrh	r3, [r3, #0]
    int len = snprintf(buffer, buffer_size, "%u,%u,%u,%u,%u,%u,",
 80029f0:	9304      	str	r3, [sp, #16]
 80029f2:	9403      	str	r4, [sp, #12]
 80029f4:	9002      	str	r0, [sp, #8]
 80029f6:	9101      	str	r1, [sp, #4]
 80029f8:	9200      	str	r2, [sp, #0]
 80029fa:	462b      	mov	r3, r5
 80029fc:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <mef_accel_gyro+0x6c>)
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f00b fc77 	bl	800e2f4 <sniprintf>
 8002a06:	6178      	str	r0, [r7, #20]

    // S'assurer que la chaîne est bien terminée
    if (len >= buffer_size) {
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d805      	bhi.n	8002a1c <mef_accel_gyro+0x64>
        buffer[buffer_size - 1] = '\0';
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    }
}
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bdb0      	pop	{r4, r5, r7, pc}
 8002a24:	08011d8c 	.word	0x08011d8c

08002a28 <mef_temp>:

void mef_temp(char *buffer, size_t buffer_size, float temperature) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	ed87 0a01 	vstr	s0, [r7, #4]
    snprintf(buffer, buffer_size, "%.1f", temperature);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	e9cd 2300 	strd	r2, r3, [sp]
 8002a44:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <mef_temp+0x30>)
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f00b fc53 	bl	800e2f4 <sniprintf>
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	08011da0 	.word	0x08011da0

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <Error_Handler+0x8>

08002a68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <MX_SPI1_Init+0x78>)
 8002a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7a:	4b18      	ldr	r3, [pc, #96]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a80:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	@ (8002adc <MX_SPI1_Init+0x74>)
 8002ac8:	f005 f812 	bl	8007af0 <HAL_SPI_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ad2:	f7ff ffc3 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000d38 	.word	0x20000d38
 8002ae0:	40013000 	.word	0x40013000

08002ae4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a17      	ldr	r2, [pc, #92]	@ (8002b60 <HAL_SPI_MspInit+0x7c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d128      	bne.n	8002b58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <HAL_SPI_MspInit+0x80>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0a:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <HAL_SPI_MspInit+0x80>)
 8002b0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <HAL_SPI_MspInit+0x80>)
 8002b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_SPI_MspInit+0x80>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	4a10      	ldr	r2, [pc, #64]	@ (8002b64 <HAL_SPI_MspInit+0x80>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_SPI_MspInit+0x80>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b36:	23e0      	movs	r3, #224	@ 0xe0
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b46:	2305      	movs	r3, #5
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b54:	f002 ff26 	bl	80059a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3728      	adds	r7, #40	@ 0x28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40013000 	.word	0x40013000
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <HAL_MspInit+0x44>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b72:	4a0e      	ldr	r2, [pc, #56]	@ (8002bac <HAL_MspInit+0x44>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <HAL_MspInit+0x44>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_MspInit+0x44>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_MspInit+0x44>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_MspInit+0x44>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002b9e:	f004 f87d 	bl	8006c9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000

08002bb0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <SDTimer_Handler+0x40>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <SDTimer_Handler+0x1c>
    Timer1--;
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <SDTimer_Handler+0x40>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <SDTimer_Handler+0x40>)
 8002bca:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <SDTimer_Handler+0x44>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <SDTimer_Handler+0x34>
    Timer2--;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <SDTimer_Handler+0x44>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <SDTimer_Handler+0x44>)
 8002be2:	701a      	strb	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	200003b0 	.word	0x200003b0
 8002bf4:	200003b1 	.word	0x200003b1

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <NMI_Handler+0x4>

08002c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <HardFault_Handler+0x4>

08002c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <MemManage_Handler+0x4>

08002c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8002c50:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <SysTick_Handler+0x30>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <SysTick_Handler+0x30>)
 8002c5c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <SysTick_Handler+0x30>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d904      	bls.n	8002c72 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <SysTick_Handler+0x30>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002c6e:	f7ff ff9f 	bl	8002bb0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c72:	f000 ffcb 	bl	8003c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000da4 	.word	0x20000da4

08002c80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c84:	2002      	movs	r0, #2
 8002c86:	f003 f827 	bl	8005cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002c92:	2004      	movs	r0, #4
 8002c94:	f003 f820 	bl	8005cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <DMA1_Channel1_IRQHandler+0x10>)
 8002ca2:	f002 fd24 	bl	80056ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000f74 	.word	0x20000f74

08002cb0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <DMA1_Channel2_IRQHandler+0x10>)
 8002cb6:	f002 fd1a 	bl	80056ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000fd4 	.word	0x20000fd4

08002cc4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <DMA1_Channel3_IRQHandler+0x10>)
 8002cca:	f002 fd10 	bl	80056ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200002ec 	.word	0x200002ec

08002cd8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cdc:	4802      	ldr	r0, [pc, #8]	@ (8002ce8 <DMA1_Channel4_IRQHandler+0x10>)
 8002cde:	f002 fd06 	bl	80056ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20001034 	.word	0x20001034

08002cec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002cf0:	4802      	ldr	r0, [pc, #8]	@ (8002cfc <DMA1_Channel5_IRQHandler+0x10>)
 8002cf2:	f002 fcfc 	bl	80056ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000034c 	.word	0x2000034c

08002d00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d04:	4809      	ldr	r0, [pc, #36]	@ (8002d2c <TIM4_IRQHandler+0x2c>)
 8002d06:	f005 fdc8 	bl	800889a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  compteur += 1 ;
 8002d0a:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <TIM4_IRQHandler+0x30>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <TIM4_IRQHandler+0x30>)
 8002d12:	6013      	str	r3, [r2, #0]
  if (compteur == 100){
 8002d14:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <TIM4_IRQHandler+0x30>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b64      	cmp	r3, #100	@ 0x64
 8002d1a:	d105      	bne.n	8002d28 <TIM4_IRQHandler+0x28>
	  flag_sensor = 1;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <TIM4_IRQHandler+0x34>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
	  compteur = 0;
 8002d22:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <TIM4_IRQHandler+0x30>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000e00 	.word	0x20000e00
 8002d30:	20000da0 	.word	0x20000da0
 8002d34:	20000d9c 	.word	0x20000d9c

08002d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <USART1_IRQHandler+0x10>)
 8002d3e:	f007 f869 	bl	8009e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000ee0 	.word	0x20000ee0

08002d4c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <LPUART1_IRQHandler+0x10>)
 8002d52:	f007 f85f 	bl	8009e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000e4c 	.word	0x20000e4c

08002d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return 1;
 8002d64:	2301      	movs	r3, #1
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_kill>:

int _kill(int pid, int sig)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d7a:	f00c faed 	bl	800f358 <__errno>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2216      	movs	r2, #22
 8002d82:	601a      	str	r2, [r3, #0]
  return -1;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_exit>:

void _exit (int status)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ffe7 	bl	8002d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002da2:	bf00      	nop
 8002da4:	e7fd      	b.n	8002da2 <_exit+0x12>

08002da6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e00a      	b.n	8002dce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002db8:	f3af 8000 	nop.w
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	60ba      	str	r2, [r7, #8]
 8002dc4:	b2ca      	uxtb	r2, r1
 8002dc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	dbf0      	blt.n	8002db8 <_read+0x12>
  }

  return len;
 8002dd6:	687b      	ldr	r3, [r7, #4]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e009      	b.n	8002e06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	60ba      	str	r2, [r7, #8]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3301      	adds	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	dbf1      	blt.n	8002df2 <_write+0x12>
  }
  return len;
 8002e0e:	687b      	ldr	r3, [r7, #4]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_close>:

int _close(int file)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e40:	605a      	str	r2, [r3, #4]
  return 0;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <_isatty>:

int _isatty(int file)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e58:	2301      	movs	r3, #1
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e88:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <_sbrk+0x5c>)
 8002e8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <_sbrk+0x60>)
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e94:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <_sbrk+0x64>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <_sbrk+0x64>)
 8002e9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ee8 <_sbrk+0x68>)
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d207      	bcs.n	8002ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb0:	f00c fa52 	bl	800f358 <__errno>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ebe:	e009      	b.n	8002ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec0:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <_sbrk+0x64>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ec6:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <_sbrk+0x64>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <_sbrk+0x64>)
 8002ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20008000 	.word	0x20008000
 8002ee0:	00000400 	.word	0x00000400
 8002ee4:	20000da8 	.word	0x20000da8
 8002ee8:	20001500 	.word	0x20001500

08002eec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <SystemInit+0x20>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	4a05      	ldr	r2, [pc, #20]	@ (8002f0c <SystemInit+0x20>)
 8002ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <INIT_PERM_TARVOS>:

	HAL_UART_Transmit(&hlpuart1,"yo",sizeof("yo"),100);
	HAL_Delay(1000);
}

void INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08e      	sub	sp, #56	@ 0x38
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	460a      	mov	r2, r1
 8002f1a:	71fb      	strb	r3, [r7, #7]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71bb      	strb	r3, [r7, #6]
    // On passe le module en mode 1 byte (sécurité)
    uint8_t mode1[6] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8002f20:	4a4a      	ldr	r2, [pc, #296]	@ (800304c <INIT_PERM_TARVOS+0x13c>)
 8002f22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f2a:	6018      	str	r0, [r3, #0]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	8019      	strh	r1, [r3, #0]
    mode1[5] = Get_CRC8(mode1, 5); // Ajout du CRC
 8002f30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f34:	2105      	movs	r1, #5
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f892 	bl	8003060 <Get_CRC8>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, sizeof(mode1), 500);
 8002f42:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002f46:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f4a:	2206      	movs	r2, #6
 8002f4c:	4840      	ldr	r0, [pc, #256]	@ (8003050 <INIT_PERM_TARVOS+0x140>)
 8002f4e:	f006 fd79 	bl	8009a44 <HAL_UART_Transmit>

    // On change le canal (la fréquence du module)
    uint8_t frequence[6] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8002f52:	4a40      	ldr	r2, [pc, #256]	@ (8003054 <INIT_PERM_TARVOS+0x144>)
 8002f54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f5c:	6018      	str	r0, [r3, #0]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	8019      	strh	r1, [r3, #0]
    frequence[5] = Get_CRC8(frequence, 5); // Ajout du CRC
 8002f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f66:	2105      	movs	r1, #5
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f879 	bl	8003060 <Get_CRC8>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    HAL_UART_Transmit(&hlpuart1, frequence, sizeof(frequence), 500);
 8002f74:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002f78:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f7c:	2206      	movs	r2, #6
 8002f7e:	4834      	ldr	r0, [pc, #208]	@ (8003050 <INIT_PERM_TARVOS+0x140>)
 8002f80:	f006 fd60 	bl	8009a44 <HAL_UART_Transmit>

    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[6] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 8002f84:	4a34      	ldr	r2, [pc, #208]	@ (8003058 <INIT_PERM_TARVOS+0x148>)
 8002f86:	f107 0320 	add.w	r3, r7, #32
 8002f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f8e:	6018      	str	r0, [r3, #0]
 8002f90:	3304      	adds	r3, #4
 8002f92:	8019      	strh	r1, [r3, #0]
    puissance[5] = Get_CRC8(puissance, 5); // Ajout du CRC
 8002f94:	f107 0320 	add.w	r3, r7, #32
 8002f98:	2105      	movs	r1, #5
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f860 	bl	8003060 <Get_CRC8>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_UART_Transmit(&hlpuart1, puissance, sizeof(puissance), 500);
 8002fa6:	f107 0120 	add.w	r1, r7, #32
 8002faa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002fae:	2206      	movs	r2, #6
 8002fb0:	4827      	ldr	r0, [pc, #156]	@ (8003050 <INIT_PERM_TARVOS+0x140>)
 8002fb2:	f006 fd47 	bl	8009a44 <HAL_UART_Transmit>

    // On modifie l'adresse de la source
    uint8_t Sadrr[6] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	763b      	strb	r3, [r7, #24]
 8002fba:	2309      	movs	r3, #9
 8002fbc:	767b      	strb	r3, [r7, #25]
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	76bb      	strb	r3, [r7, #26]
 8002fc2:	230b      	movs	r3, #11
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	773b      	strb	r3, [r7, #28]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	777b      	strb	r3, [r7, #29]
    Sadrr[5] = Get_CRC8(Sadrr, 5); // Ajout du CRC
 8002fce:	f107 0318 	add.w	r3, r7, #24
 8002fd2:	2105      	movs	r1, #5
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f843 	bl	8003060 <Get_CRC8>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	777b      	strb	r3, [r7, #29]
    HAL_UART_Transmit(&hlpuart1, Sadrr, sizeof(Sadrr), 500);
 8002fde:	f107 0118 	add.w	r1, r7, #24
 8002fe2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002fe6:	2206      	movs	r2, #6
 8002fe8:	4819      	ldr	r0, [pc, #100]	@ (8003050 <INIT_PERM_TARVOS+0x140>)
 8002fea:	f006 fd2b 	bl	8009a44 <HAL_UART_Transmit>

    // On modifie l'adresse avec qui on veut communiquer
	uint8_t send[6] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8002fee:	2302      	movs	r3, #2
 8002ff0:	743b      	strb	r3, [r7, #16]
 8002ff2:	2309      	movs	r3, #9
 8002ff4:	747b      	strb	r3, [r7, #17]
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	74bb      	strb	r3, [r7, #18]
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	74fb      	strb	r3, [r7, #19]
 8002ffe:	79bb      	ldrb	r3, [r7, #6]
 8003000:	753b      	strb	r3, [r7, #20]
 8003002:	2300      	movs	r3, #0
 8003004:	757b      	strb	r3, [r7, #21]
	send[5] = Get_CRC8(send, 5); // Ajout du CRC
 8003006:	f107 0310 	add.w	r3, r7, #16
 800300a:	2105      	movs	r1, #5
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f827 	bl	8003060 <Get_CRC8>
 8003012:	4603      	mov	r3, r0
 8003014:	757b      	strb	r3, [r7, #21]
	HAL_UART_Transmit(&hlpuart1, send, sizeof(send), 500);
 8003016:	f107 0110 	add.w	r1, r7, #16
 800301a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800301e:	2206      	movs	r2, #6
 8003020:	480b      	ldr	r0, [pc, #44]	@ (8003050 <INIT_PERM_TARVOS+0x140>)
 8003022:	f006 fd0f 	bl	8009a44 <HAL_UART_Transmit>

    // On redémarre le module pour mettre à jour les paramètres
    uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <INIT_PERM_TARVOS+0x14c>)
 8003028:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, restart, sizeof(restart), 500);
 800302a:	f107 010c 	add.w	r1, r7, #12
 800302e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003032:	2204      	movs	r2, #4
 8003034:	4806      	ldr	r0, [pc, #24]	@ (8003050 <INIT_PERM_TARVOS+0x140>)
 8003036:	f006 fd05 	bl	8009a44 <HAL_UART_Transmit>

    HAL_Delay(1000);
 800303a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800303e:	f000 fe03 	bl	8003c48 <HAL_Delay>
}
 8003042:	bf00      	nop
 8003044:	3738      	adds	r7, #56	@ 0x38
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	08011db4 	.word	0x08011db4
 8003050:	20000e4c 	.word	0x20000e4c
 8003054:	08011dbc 	.word	0x08011dbc
 8003058:	08011dc4 	.word	0x08011dc4
 800305c:	07000502 	.word	0x07000502

08003060 <Get_CRC8>:
		HAL_UART_Transmit(&hlpuart1,command,sizeof(command),500);
	}
}
//Calcule du CRC
uint8_t Get_CRC8(uint8_t * bufP, uint16_t len)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
uint8_t crc = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8003070:	2300      	movs	r3, #0
 8003072:	81bb      	strh	r3, [r7, #12]
 8003074:	e009      	b.n	800308a <Get_CRC8+0x2a>
{
crc ^= bufP[i];
 8003076:	89bb      	ldrh	r3, [r7, #12]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	4053      	eors	r3, r2
 8003082:	73fb      	strb	r3, [r7, #15]
for (uint16_t i = 0; i < len; i++)
 8003084:	89bb      	ldrh	r3, [r7, #12]
 8003086:	3301      	adds	r3, #1
 8003088:	81bb      	strh	r3, [r7, #12]
 800308a:	89ba      	ldrh	r2, [r7, #12]
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	429a      	cmp	r2, r3
 8003090:	d3f1      	bcc.n	8003076 <Get_CRC8+0x16>
}
return crc;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <SEND_DATA_NETW>:

int SEND_DATA_NETW(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 80030a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a4:	b08a      	sub	sp, #40	@ 0x28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	72fb      	strb	r3, [r7, #11]
 80030b0:	4613      	mov	r3, r2
 80030b2:	72bb      	strb	r3, [r7, #10]
 80030b4:	466b      	mov	r3, sp
 80030b6:	469a      	mov	sl, r3
	uint8_t trame_reception[5];
	// Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[HEAD + length + CRC]; // +1 pour le CRC
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1d9e      	adds	r6, r3, #6
 80030bc:	1e73      	subs	r3, r6, #1
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	4632      	mov	r2, r6
 80030c2:	2300      	movs	r3, #0
 80030c4:	4690      	mov	r8, r2
 80030c6:	4699      	mov	r9, r3
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030dc:	4632      	mov	r2, r6
 80030de:	2300      	movs	r3, #0
 80030e0:	4614      	mov	r4, r2
 80030e2:	461d      	mov	r5, r3
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	00eb      	lsls	r3, r5, #3
 80030ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f2:	00e2      	lsls	r2, r4, #3
 80030f4:	4633      	mov	r3, r6
 80030f6:	3307      	adds	r3, #7
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	ebad 0d03 	sub.w	sp, sp, r3
 8003100:	466b      	mov	r3, sp
 8003102:	3300      	adds	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	3302      	adds	r3, #2
 8003118:	b2da      	uxtb	r2, r3
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	7afa      	ldrb	r2, [r7, #11]
 8003122:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	7aba      	ldrb	r2, [r7, #10]
 8003128:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003130:	e00e      	b.n	8003150 <SEND_DATA_NETW+0xb0>
        trame[5 + i] = data[i];
 8003132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	441a      	add	r2, r3
 800313a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800313e:	3305      	adds	r3, #5
 8003140:	7811      	ldrb	r1, [r2, #0]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8003146:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800314a:	3301      	adds	r3, #1
 800314c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	dceb      	bgt.n	8003132 <SEND_DATA_NETW+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	b29b      	uxth	r3, r3
 800315e:	3305      	adds	r3, #5
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1d5c      	adds	r4, r3, #5
 8003166:	4611      	mov	r1, r2
 8003168:	69f8      	ldr	r0, [r7, #28]
 800316a:	f7ff ff79 	bl	8003060 <Get_CRC8>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 8003176:	b2b2      	uxth	r2, r6
 8003178:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800317c:	69f9      	ldr	r1, [r7, #28]
 800317e:	480a      	ldr	r0, [pc, #40]	@ (80031a8 <SEND_DATA_NETW+0x108>)
 8003180:	f006 fc60 	bl	8009a44 <HAL_UART_Transmit>

    if (copyTarvosBuffer(tarvos_RX_Tampon)[3]== FAIL){
 8003184:	4809      	ldr	r0, [pc, #36]	@ (80031ac <SEND_DATA_NETW+0x10c>)
 8003186:	f000 f813 	bl	80031b0 <copyTarvosBuffer>
 800318a:	4603      	mov	r3, r0
 800318c:	3303      	adds	r3, #3
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <SEND_DATA_NETW+0xf8>
    	return ERROR;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <SEND_DATA_NETW+0xfa>
    }
    else { return SUCCESS;}
 8003198:	2301      	movs	r3, #1
 800319a:	46d5      	mov	sp, sl

}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	@ 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a6:	bf00      	nop
 80031a8:	20000e4c 	.word	0x20000e4c
 80031ac:	20000970 	.word	0x20000970

080031b0 <copyTarvosBuffer>:


uint8_t* copyTarvosBuffer() {
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
    static uint8_t buffer[5];  // Utilisation de static pour éviter la perte des données
    int p = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
    uint8_t a;
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 80031ba:	2300      	movs	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	e01e      	b.n	80031fe <copyTarvosBuffer+0x4e>
        if (tarvos_RX_Tampon[i] == 0x02 && p == 0 && tarvos_RX_Tampon[i+1] == 0x40) {
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <copyTarvosBuffer+0x64>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d115      	bne.n	80031f8 <copyTarvosBuffer+0x48>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d112      	bne.n	80031f8 <copyTarvosBuffer+0x48>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003214 <copyTarvosBuffer+0x64>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	2b40      	cmp	r3, #64	@ 0x40
 80031dc:	d10c      	bne.n	80031f8 <copyTarvosBuffer+0x48>
            if (i + 5 <= TarvosRxTamponSize) {  // Vérification pour éviter un dépassement de mémoire
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b19      	cmp	r3, #25
 80031e2:	dc09      	bgt.n	80031f8 <copyTarvosBuffer+0x48>
                memcpy(buffer, &tarvos_RX_Tampon[i], 5);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <copyTarvosBuffer+0x64>)
 80031e8:	441a      	add	r2, r3
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <copyTarvosBuffer+0x68>)
 80031ec:	6810      	ldr	r0, [r2, #0]
 80031ee:	6018      	str	r0, [r3, #0]
 80031f0:	7912      	ldrb	r2, [r2, #4]
 80031f2:	711a      	strb	r2, [r3, #4]
                p = 1;
 80031f4:	2301      	movs	r3, #1
 80031f6:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < TarvosRxTamponSize; i++) {
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b1d      	cmp	r3, #29
 8003202:	dddd      	ble.n	80031c0 <copyTarvosBuffer+0x10>
            }
        }
    }
    return buffer;
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <copyTarvosBuffer+0x68>)
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000970 	.word	0x20000970
 8003218:	20000dac 	.word	0x20000dac

0800321c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	@ 0x38
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003222:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003230:	f107 031c 	add.w	r3, r7, #28
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800323c:	463b      	mov	r3, r7
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	611a      	str	r2, [r3, #16]
 800324a:	615a      	str	r2, [r3, #20]
 800324c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800324e:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <MX_TIM3_Init+0xe8>)
 8003250:	4a2d      	ldr	r2, [pc, #180]	@ (8003308 <MX_TIM3_Init+0xec>)
 8003252:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003254:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <MX_TIM3_Init+0xe8>)
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325a:	4b2a      	ldr	r3, [pc, #168]	@ (8003304 <MX_TIM3_Init+0xe8>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003260:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <MX_TIM3_Init+0xe8>)
 8003262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003266:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003268:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <MX_TIM3_Init+0xe8>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800326e:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <MX_TIM3_Init+0xe8>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003274:	4823      	ldr	r0, [pc, #140]	@ (8003304 <MX_TIM3_Init+0xe8>)
 8003276:	f005 f9ed 	bl	8008654 <HAL_TIM_Base_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003280:	f7ff fbec 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800328a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800328e:	4619      	mov	r1, r3
 8003290:	481c      	ldr	r0, [pc, #112]	@ (8003304 <MX_TIM3_Init+0xe8>)
 8003292:	f005 fd65 	bl	8008d60 <HAL_TIM_ConfigClockSource>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800329c:	f7ff fbde 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032a0:	4818      	ldr	r0, [pc, #96]	@ (8003304 <MX_TIM3_Init+0xe8>)
 80032a2:	f005 fa99 	bl	80087d8 <HAL_TIM_PWM_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80032ac:	f7ff fbd6 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032b8:	f107 031c 	add.w	r3, r7, #28
 80032bc:	4619      	mov	r1, r3
 80032be:	4811      	ldr	r0, [pc, #68]	@ (8003304 <MX_TIM3_Init+0xe8>)
 80032c0:	f006 faa8 	bl	8009814 <HAL_TIMEx_MasterConfigSynchronization>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80032ca:	f7ff fbc7 	bl	8002a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ce:	2360      	movs	r3, #96	@ 0x60
 80032d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032de:	463b      	mov	r3, r7
 80032e0:	2200      	movs	r2, #0
 80032e2:	4619      	mov	r1, r3
 80032e4:	4807      	ldr	r0, [pc, #28]	@ (8003304 <MX_TIM3_Init+0xe8>)
 80032e6:	f005 fc27 	bl	8008b38 <HAL_TIM_PWM_ConfigChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80032f0:	f7ff fbb4 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80032f4:	4803      	ldr	r0, [pc, #12]	@ (8003304 <MX_TIM3_Init+0xe8>)
 80032f6:	f000 f8b7 	bl	8003468 <HAL_TIM_MspPostInit>

}
 80032fa:	bf00      	nop
 80032fc:	3738      	adds	r7, #56	@ 0x38
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000db4 	.word	0x20000db4
 8003308:	40000400 	.word	0x40000400

0800330c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08e      	sub	sp, #56	@ 0x38
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800332c:	463b      	mov	r3, r7
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	611a      	str	r2, [r3, #16]
 800333a:	615a      	str	r2, [r3, #20]
 800333c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800333e:	4b2b      	ldr	r3, [pc, #172]	@ (80033ec <MX_TIM4_Init+0xe0>)
 8003340:	4a2b      	ldr	r2, [pc, #172]	@ (80033f0 <MX_TIM4_Init+0xe4>)
 8003342:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8003344:	4b29      	ldr	r3, [pc, #164]	@ (80033ec <MX_TIM4_Init+0xe0>)
 8003346:	223f      	movs	r2, #63	@ 0x3f
 8003348:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334a:	4b28      	ldr	r3, [pc, #160]	@ (80033ec <MX_TIM4_Init+0xe0>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003350:	4b26      	ldr	r3, [pc, #152]	@ (80033ec <MX_TIM4_Init+0xe0>)
 8003352:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003356:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003358:	4b24      	ldr	r3, [pc, #144]	@ (80033ec <MX_TIM4_Init+0xe0>)
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335e:	4b23      	ldr	r3, [pc, #140]	@ (80033ec <MX_TIM4_Init+0xe0>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003364:	4821      	ldr	r0, [pc, #132]	@ (80033ec <MX_TIM4_Init+0xe0>)
 8003366:	f005 f975 	bl	8008654 <HAL_TIM_Base_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003370:	f7ff fb74 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800337a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800337e:	4619      	mov	r1, r3
 8003380:	481a      	ldr	r0, [pc, #104]	@ (80033ec <MX_TIM4_Init+0xe0>)
 8003382:	f005 fced 	bl	8008d60 <HAL_TIM_ConfigClockSource>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800338c:	f7ff fb66 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003390:	4816      	ldr	r0, [pc, #88]	@ (80033ec <MX_TIM4_Init+0xe0>)
 8003392:	f005 fa21 	bl	80087d8 <HAL_TIM_PWM_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800339c:	f7ff fb5e 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033a0:	2320      	movs	r3, #32
 80033a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	4619      	mov	r1, r3
 80033ae:	480f      	ldr	r0, [pc, #60]	@ (80033ec <MX_TIM4_Init+0xe0>)
 80033b0:	f006 fa30 	bl	8009814 <HAL_TIMEx_MasterConfigSynchronization>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80033ba:	f7ff fb4f 	bl	8002a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033be:	2360      	movs	r3, #96	@ 0x60
 80033c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033ce:	463b      	mov	r3, r7
 80033d0:	2208      	movs	r2, #8
 80033d2:	4619      	mov	r1, r3
 80033d4:	4805      	ldr	r0, [pc, #20]	@ (80033ec <MX_TIM4_Init+0xe0>)
 80033d6:	f005 fbaf 	bl	8008b38 <HAL_TIM_PWM_ConfigChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80033e0:	f7ff fb3c 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033e4:	bf00      	nop
 80033e6:	3738      	adds	r7, #56	@ 0x38
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000e00 	.word	0x20000e00
 80033f0:	40000800 	.word	0x40000800

080033f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a16      	ldr	r2, [pc, #88]	@ (800345c <HAL_TIM_Base_MspInit+0x68>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10c      	bne.n	8003420 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003406:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <HAL_TIM_Base_MspInit+0x6c>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	4a15      	ldr	r2, [pc, #84]	@ (8003460 <HAL_TIM_Base_MspInit+0x6c>)
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	6593      	str	r3, [r2, #88]	@ 0x58
 8003412:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <HAL_TIM_Base_MspInit+0x6c>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800341e:	e018      	b.n	8003452 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0f      	ldr	r2, [pc, #60]	@ (8003464 <HAL_TIM_Base_MspInit+0x70>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800342a:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <HAL_TIM_Base_MspInit+0x6c>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	4a0c      	ldr	r2, [pc, #48]	@ (8003460 <HAL_TIM_Base_MspInit+0x6c>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6593      	str	r3, [r2, #88]	@ 0x58
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_TIM_Base_MspInit+0x6c>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	201e      	movs	r0, #30
 8003448:	f001 ff39 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800344c:	201e      	movs	r0, #30
 800344e:	f001 ff50 	bl	80052f2 <HAL_NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40000400 	.word	0x40000400
 8003460:	40021000 	.word	0x40021000
 8003464:	40000800 	.word	0x40000800

08003468 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a11      	ldr	r2, [pc, #68]	@ (80034cc <HAL_TIM_MspPostInit+0x64>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d11b      	bne.n	80034c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800348a:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <HAL_TIM_MspPostInit+0x68>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348e:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <HAL_TIM_MspPostInit+0x68>)
 8003490:	f043 0304 	orr.w	r3, r3, #4
 8003494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003496:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <HAL_TIM_MspPostInit+0x68>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034a2:	2340      	movs	r3, #64	@ 0x40
 80034a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034b2:	2302      	movs	r3, #2
 80034b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b6:	f107 030c 	add.w	r3, r7, #12
 80034ba:	4619      	mov	r1, r3
 80034bc:	4805      	ldr	r0, [pc, #20]	@ (80034d4 <HAL_TIM_MspPostInit+0x6c>)
 80034be:	f002 fa71 	bl	80059a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034c2:	bf00      	nop
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40021000 	.word	0x40021000
 80034d4:	48000800 	.word	0x48000800

080034d8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80034dc:	4b21      	ldr	r3, [pc, #132]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 80034de:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <MX_LPUART1_UART_Init+0x90>)
 80034e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80034e2:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 80034e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80034f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80034f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 80034fe:	220c      	movs	r2, #12
 8003500:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003502:	4b18      	ldr	r3, [pc, #96]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003508:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 800350a:	2200      	movs	r2, #0
 800350c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800350e:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 8003510:	2200      	movs	r2, #0
 8003512:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 8003516:	2200      	movs	r2, #0
 8003518:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800351a:	4812      	ldr	r0, [pc, #72]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 800351c:	f006 fa42 	bl	80099a4 <HAL_UART_Init>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003526:	f7ff fa99 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800352a:	2100      	movs	r1, #0
 800352c:	480d      	ldr	r0, [pc, #52]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 800352e:	f007 ff39 	bl	800b3a4 <HAL_UARTEx_SetTxFifoThreshold>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003538:	f7ff fa90 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800353c:	2100      	movs	r1, #0
 800353e:	4809      	ldr	r0, [pc, #36]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 8003540:	f007 ff6e 	bl	800b420 <HAL_UARTEx_SetRxFifoThreshold>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800354a:	f7ff fa87 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800354e:	4805      	ldr	r0, [pc, #20]	@ (8003564 <MX_LPUART1_UART_Init+0x8c>)
 8003550:	f007 feef 	bl	800b332 <HAL_UARTEx_DisableFifoMode>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800355a:	f7ff fa7f 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000e4c 	.word	0x20000e4c
 8003568:	40008000 	.word	0x40008000

0800356c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003570:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 8003572:	4a23      	ldr	r2, [pc, #140]	@ (8003600 <MX_USART1_UART_Init+0x94>)
 8003574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003576:	4b21      	ldr	r3, [pc, #132]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 8003578:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800357c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800357e:	4b1f      	ldr	r3, [pc, #124]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003584:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 8003586:	2200      	movs	r2, #0
 8003588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800358a:	4b1c      	ldr	r3, [pc, #112]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 800358c:	2200      	movs	r2, #0
 800358e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003590:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 8003592:	220c      	movs	r2, #12
 8003594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003596:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 8003598:	2200      	movs	r2, #0
 800359a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800359c:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 800359e:	2200      	movs	r2, #0
 80035a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035a2:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ae:	4b13      	ldr	r3, [pc, #76]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035b4:	4811      	ldr	r0, [pc, #68]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 80035b6:	f006 f9f5 	bl	80099a4 <HAL_UART_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80035c0:	f7ff fa4c 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035c4:	2100      	movs	r1, #0
 80035c6:	480d      	ldr	r0, [pc, #52]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 80035c8:	f007 feec 	bl	800b3a4 <HAL_UARTEx_SetTxFifoThreshold>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80035d2:	f7ff fa43 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035d6:	2100      	movs	r1, #0
 80035d8:	4808      	ldr	r0, [pc, #32]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 80035da:	f007 ff21 	bl	800b420 <HAL_UARTEx_SetRxFifoThreshold>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80035e4:	f7ff fa3a 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80035e8:	4804      	ldr	r0, [pc, #16]	@ (80035fc <MX_USART1_UART_Init+0x90>)
 80035ea:	f007 fea2 	bl	800b332 <HAL_UARTEx_DisableFifoMode>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80035f4:	f7ff fa32 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000ee0 	.word	0x20000ee0
 8003600:	40013800 	.word	0x40013800

08003604 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b09e      	sub	sp, #120	@ 0x78
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800361c:	f107 0320 	add.w	r3, r7, #32
 8003620:	2244      	movs	r2, #68	@ 0x44
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f00b fe7b 	bl	800f320 <memset>
  if(uartHandle->Instance==LPUART1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a92      	ldr	r2, [pc, #584]	@ (8003878 <HAL_UART_MspInit+0x274>)
 8003630:	4293      	cmp	r3, r2
 8003632:	f040 80b0 	bne.w	8003796 <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003636:	2320      	movs	r3, #32
 8003638:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363e:	f107 0320 	add.w	r3, r7, #32
 8003642:	4618      	mov	r0, r3
 8003644:	f004 f864 	bl	8007710 <HAL_RCCEx_PeriphCLKConfig>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800364e:	f7ff fa05 	bl	8002a5c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003652:	4b8a      	ldr	r3, [pc, #552]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	4a89      	ldr	r2, [pc, #548]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800365e:	4b87      	ldr	r3, [pc, #540]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	4b84      	ldr	r3, [pc, #528]	@ (800387c <HAL_UART_MspInit+0x278>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366e:	4a83      	ldr	r2, [pc, #524]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003676:	4b81      	ldr	r3, [pc, #516]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003682:	4b7e      	ldr	r3, [pc, #504]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003686:	4a7d      	ldr	r2, [pc, #500]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800368e:	4b7b      	ldr	r3, [pc, #492]	@ (800387c <HAL_UART_MspInit+0x278>)
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800369a:	2308      	movs	r3, #8
 800369c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80036aa:	230c      	movs	r3, #12
 80036ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80036b2:	4619      	mov	r1, r3
 80036b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036b8:	f002 f974 	bl	80059a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80036ce:	2308      	movs	r3, #8
 80036d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80036d6:	4619      	mov	r1, r3
 80036d8:	4869      	ldr	r0, [pc, #420]	@ (8003880 <HAL_UART_MspInit+0x27c>)
 80036da:	f002 f963 	bl	80059a4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80036de:	4b69      	ldr	r3, [pc, #420]	@ (8003884 <HAL_UART_MspInit+0x280>)
 80036e0:	4a69      	ldr	r2, [pc, #420]	@ (8003888 <HAL_UART_MspInit+0x284>)
 80036e2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80036e4:	4b67      	ldr	r3, [pc, #412]	@ (8003884 <HAL_UART_MspInit+0x280>)
 80036e6:	2222      	movs	r2, #34	@ 0x22
 80036e8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ea:	4b66      	ldr	r3, [pc, #408]	@ (8003884 <HAL_UART_MspInit+0x280>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f0:	4b64      	ldr	r3, [pc, #400]	@ (8003884 <HAL_UART_MspInit+0x280>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036f6:	4b63      	ldr	r3, [pc, #396]	@ (8003884 <HAL_UART_MspInit+0x280>)
 80036f8:	2280      	movs	r2, #128	@ 0x80
 80036fa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036fc:	4b61      	ldr	r3, [pc, #388]	@ (8003884 <HAL_UART_MspInit+0x280>)
 80036fe:	2200      	movs	r2, #0
 8003700:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003702:	4b60      	ldr	r3, [pc, #384]	@ (8003884 <HAL_UART_MspInit+0x280>)
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003708:	4b5e      	ldr	r3, [pc, #376]	@ (8003884 <HAL_UART_MspInit+0x280>)
 800370a:	2220      	movs	r2, #32
 800370c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800370e:	4b5d      	ldr	r3, [pc, #372]	@ (8003884 <HAL_UART_MspInit+0x280>)
 8003710:	2200      	movs	r2, #0
 8003712:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003714:	485b      	ldr	r0, [pc, #364]	@ (8003884 <HAL_UART_MspInit+0x280>)
 8003716:	f001 fe07 	bl	8005328 <HAL_DMA_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8003720:	f7ff f99c 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a57      	ldr	r2, [pc, #348]	@ (8003884 <HAL_UART_MspInit+0x280>)
 8003728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800372c:	4a55      	ldr	r2, [pc, #340]	@ (8003884 <HAL_UART_MspInit+0x280>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003732:	4b56      	ldr	r3, [pc, #344]	@ (800388c <HAL_UART_MspInit+0x288>)
 8003734:	4a56      	ldr	r2, [pc, #344]	@ (8003890 <HAL_UART_MspInit+0x28c>)
 8003736:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003738:	4b54      	ldr	r3, [pc, #336]	@ (800388c <HAL_UART_MspInit+0x288>)
 800373a:	2223      	movs	r2, #35	@ 0x23
 800373c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800373e:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_UART_MspInit+0x288>)
 8003740:	2210      	movs	r2, #16
 8003742:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003744:	4b51      	ldr	r3, [pc, #324]	@ (800388c <HAL_UART_MspInit+0x288>)
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800374a:	4b50      	ldr	r3, [pc, #320]	@ (800388c <HAL_UART_MspInit+0x288>)
 800374c:	2280      	movs	r2, #128	@ 0x80
 800374e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003750:	4b4e      	ldr	r3, [pc, #312]	@ (800388c <HAL_UART_MspInit+0x288>)
 8003752:	2200      	movs	r2, #0
 8003754:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003756:	4b4d      	ldr	r3, [pc, #308]	@ (800388c <HAL_UART_MspInit+0x288>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800375c:	4b4b      	ldr	r3, [pc, #300]	@ (800388c <HAL_UART_MspInit+0x288>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003762:	4b4a      	ldr	r3, [pc, #296]	@ (800388c <HAL_UART_MspInit+0x288>)
 8003764:	2200      	movs	r2, #0
 8003766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003768:	4848      	ldr	r0, [pc, #288]	@ (800388c <HAL_UART_MspInit+0x288>)
 800376a:	f001 fddd 	bl	8005328 <HAL_DMA_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8003774:	f7ff f972 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a44      	ldr	r2, [pc, #272]	@ (800388c <HAL_UART_MspInit+0x288>)
 800377c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800377e:	4a43      	ldr	r2, [pc, #268]	@ (800388c <HAL_UART_MspInit+0x288>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003784:	2200      	movs	r2, #0
 8003786:	2100      	movs	r1, #0
 8003788:	205b      	movs	r0, #91	@ 0x5b
 800378a:	f001 fd98 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800378e:	205b      	movs	r0, #91	@ 0x5b
 8003790:	f001 fdaf 	bl	80052f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003794:	e06c      	b.n	8003870 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3e      	ldr	r2, [pc, #248]	@ (8003894 <HAL_UART_MspInit+0x290>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d167      	bne.n	8003870 <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037a0:	2301      	movs	r3, #1
 80037a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80037a4:	2302      	movs	r3, #2
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037a8:	f107 0320 	add.w	r3, r7, #32
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 ffaf 	bl	8007710 <HAL_RCCEx_PeriphCLKConfig>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80037b8:	f7ff f950 	bl	8002a5c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037bc:	4b2f      	ldr	r3, [pc, #188]	@ (800387c <HAL_UART_MspInit+0x278>)
 80037be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c0:	4a2e      	ldr	r2, [pc, #184]	@ (800387c <HAL_UART_MspInit+0x278>)
 80037c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80037c8:	4b2c      	ldr	r3, [pc, #176]	@ (800387c <HAL_UART_MspInit+0x278>)
 80037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d4:	4b29      	ldr	r3, [pc, #164]	@ (800387c <HAL_UART_MspInit+0x278>)
 80037d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d8:	4a28      	ldr	r2, [pc, #160]	@ (800387c <HAL_UART_MspInit+0x278>)
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037e0:	4b26      	ldr	r3, [pc, #152]	@ (800387c <HAL_UART_MspInit+0x278>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ec:	23c0      	movs	r3, #192	@ 0xc0
 80037ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f0:	2302      	movs	r3, #2
 80037f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2300      	movs	r3, #0
 80037fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037fc:	2307      	movs	r3, #7
 80037fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003800:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003804:	4619      	mov	r1, r3
 8003806:	481e      	ldr	r0, [pc, #120]	@ (8003880 <HAL_UART_MspInit+0x27c>)
 8003808:	f002 f8cc 	bl	80059a4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 800380c:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_UART_MspInit+0x294>)
 800380e:	4a23      	ldr	r2, [pc, #140]	@ (800389c <HAL_UART_MspInit+0x298>)
 8003810:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003812:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <HAL_UART_MspInit+0x294>)
 8003814:	2218      	movs	r2, #24
 8003816:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003818:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <HAL_UART_MspInit+0x294>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800381e:	4b1e      	ldr	r3, [pc, #120]	@ (8003898 <HAL_UART_MspInit+0x294>)
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003824:	4b1c      	ldr	r3, [pc, #112]	@ (8003898 <HAL_UART_MspInit+0x294>)
 8003826:	2280      	movs	r2, #128	@ 0x80
 8003828:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800382a:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <HAL_UART_MspInit+0x294>)
 800382c:	2200      	movs	r2, #0
 800382e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003830:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_UART_MspInit+0x294>)
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003836:	4b18      	ldr	r3, [pc, #96]	@ (8003898 <HAL_UART_MspInit+0x294>)
 8003838:	2220      	movs	r2, #32
 800383a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800383c:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <HAL_UART_MspInit+0x294>)
 800383e:	2200      	movs	r2, #0
 8003840:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003842:	4815      	ldr	r0, [pc, #84]	@ (8003898 <HAL_UART_MspInit+0x294>)
 8003844:	f001 fd70 	bl	8005328 <HAL_DMA_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800384e:	f7ff f905 	bl	8002a5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a10      	ldr	r2, [pc, #64]	@ (8003898 <HAL_UART_MspInit+0x294>)
 8003856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800385a:	4a0f      	ldr	r2, [pc, #60]	@ (8003898 <HAL_UART_MspInit+0x294>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003860:	2200      	movs	r2, #0
 8003862:	2100      	movs	r1, #0
 8003864:	2025      	movs	r0, #37	@ 0x25
 8003866:	f001 fd2a 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800386a:	2025      	movs	r0, #37	@ 0x25
 800386c:	f001 fd41 	bl	80052f2 <HAL_NVIC_EnableIRQ>
}
 8003870:	bf00      	nop
 8003872:	3778      	adds	r7, #120	@ 0x78
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40008000 	.word	0x40008000
 800387c:	40021000 	.word	0x40021000
 8003880:	48000400 	.word	0x48000400
 8003884:	20000f74 	.word	0x20000f74
 8003888:	40020008 	.word	0x40020008
 800388c:	20000fd4 	.word	0x20000fd4
 8003890:	4002001c 	.word	0x4002001c
 8003894:	40013800 	.word	0x40013800
 8003898:	20001034 	.word	0x20001034
 800389c:	40020044 	.word	0x40020044

080038a0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003a24 <HAL_UART_RxCpltCallback+0x184>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d15b      	bne.n	800396a <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 80038b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a28 <HAL_UART_RxCpltCallback+0x188>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a5d      	ldr	r2, [pc, #372]	@ (8003a2c <HAL_UART_RxCpltCallback+0x18c>)
 80038b8:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 80038ba:	4b5c      	ldr	r3, [pc, #368]	@ (8003a2c <HAL_UART_RxCpltCallback+0x18c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80038c2:	dd22      	ble.n	800390a <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 80038c4:	4b59      	ldr	r3, [pc, #356]	@ (8003a2c <HAL_UART_RxCpltCallback+0x18c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80038ce:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 80038d0:	4b56      	ldr	r3, [pc, #344]	@ (8003a2c <HAL_UART_RxCpltCallback+0x18c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b56      	ldr	r3, [pc, #344]	@ (8003a30 <HAL_UART_RxCpltCallback+0x190>)
 80038d8:	4413      	add	r3, r2
 80038da:	89fa      	ldrh	r2, [r7, #14]
 80038dc:	4955      	ldr	r1, [pc, #340]	@ (8003a34 <HAL_UART_RxCpltCallback+0x194>)
 80038de:	4618      	mov	r0, r3
 80038e0:	f00b fd67 	bl	800f3b2 <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 80038e4:	4b51      	ldr	r3, [pc, #324]	@ (8003a2c <HAL_UART_RxCpltCallback+0x18c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 80038ea:	89fb      	ldrh	r3, [r7, #14]
 80038ec:	4a51      	ldr	r2, [pc, #324]	@ (8003a34 <HAL_UART_RxCpltCallback+0x194>)
 80038ee:	1899      	adds	r1, r3, r2
 80038f0:	89fb      	ldrh	r3, [r7, #14]
 80038f2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80038f6:	461a      	mov	r2, r3
 80038f8:	484d      	ldr	r0, [pc, #308]	@ (8003a30 <HAL_UART_RxCpltCallback+0x190>)
 80038fa:	f00b fd5a 	bl	800f3b2 <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 80038fe:	89fb      	ldrh	r3, [r7, #14]
 8003900:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003904:	4a48      	ldr	r2, [pc, #288]	@ (8003a28 <HAL_UART_RxCpltCallback+0x188>)
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e01d      	b.n	8003946 <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 800390a:	4b48      	ldr	r3, [pc, #288]	@ (8003a2c <HAL_UART_RxCpltCallback+0x18c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	4b47      	ldr	r3, [pc, #284]	@ (8003a30 <HAL_UART_RxCpltCallback+0x190>)
 8003912:	441a      	add	r2, r3
 8003914:	4b47      	ldr	r3, [pc, #284]	@ (8003a34 <HAL_UART_RxCpltCallback+0x194>)
 8003916:	4610      	mov	r0, r2
 8003918:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800391c:	4602      	mov	r2, r0
 800391e:	4619      	mov	r1, r3
 8003920:	f8d1 c000 	ldr.w	ip, [r1]
 8003924:	684e      	ldr	r6, [r1, #4]
 8003926:	688d      	ldr	r5, [r1, #8]
 8003928:	68c9      	ldr	r1, [r1, #12]
 800392a:	f8c2 c000 	str.w	ip, [r2]
 800392e:	6056      	str	r6, [r2, #4]
 8003930:	6095      	str	r5, [r2, #8]
 8003932:	60d1      	str	r1, [r2, #12]
 8003934:	3310      	adds	r3, #16
 8003936:	3010      	adds	r0, #16
 8003938:	42a3      	cmp	r3, r4
 800393a:	d1ef      	bne.n	800391c <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 800393c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a2c <HAL_UART_RxCpltCallback+0x18c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3340      	adds	r3, #64	@ 0x40
 8003942:	4a39      	ldr	r2, [pc, #228]	@ (8003a28 <HAL_UART_RxCpltCallback+0x188>)
 8003944:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8003946:	2240      	movs	r2, #64	@ 0x40
 8003948:	493a      	ldr	r1, [pc, #232]	@ (8003a34 <HAL_UART_RxCpltCallback+0x194>)
 800394a:	483b      	ldr	r0, [pc, #236]	@ (8003a38 <HAL_UART_RxCpltCallback+0x198>)
 800394c:	f006 f908 	bl	8009b60 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003950:	4b3a      	ldr	r3, [pc, #232]	@ (8003a3c <HAL_UART_RxCpltCallback+0x19c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b39      	ldr	r3, [pc, #228]	@ (8003a3c <HAL_UART_RxCpltCallback+0x19c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0204 	bic.w	r2, r2, #4
 800395e:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 8003960:	2240      	movs	r2, #64	@ 0x40
 8003962:	4934      	ldr	r1, [pc, #208]	@ (8003a34 <HAL_UART_RxCpltCallback+0x194>)
 8003964:	4834      	ldr	r0, [pc, #208]	@ (8003a38 <HAL_UART_RxCpltCallback+0x198>)
 8003966:	f006 f8fb 	bl	8009b60 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a34      	ldr	r2, [pc, #208]	@ (8003a40 <HAL_UART_RxCpltCallback+0x1a0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d152      	bne.n	8003a1a <HAL_UART_RxCpltCallback+0x17a>
		TarvosRXbufferoldpos = TarvosRXbuffernewpos; //keep track of the last position in the buffer
 8003974:	4b33      	ldr	r3, [pc, #204]	@ (8003a44 <HAL_UART_RxCpltCallback+0x1a4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a33      	ldr	r2, [pc, #204]	@ (8003a48 <HAL_UART_RxCpltCallback+0x1a8>)
 800397a:	6013      	str	r3, [r2, #0]
				if(TarvosRXbufferoldpos + TarvosRxTamponSize > TarvosRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 800397c:	4b32      	ldr	r3, [pc, #200]	@ (8003a48 <HAL_UART_RxCpltCallback+0x1a8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2be2      	cmp	r3, #226	@ 0xe2
 8003982:	dd22      	ble.n	80039ca <HAL_UART_RxCpltCallback+0x12a>

					uint16_t datatocopy = TarvosRxBufferSize-TarvosRXbufferoldpos;  // find out how much space is left in the main buffer
 8003984:	4b30      	ldr	r3, [pc, #192]	@ (8003a48 <HAL_UART_RxCpltCallback+0x1a8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800398e:	81bb      	strh	r3, [r7, #12]
					memcpy ((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, datatocopy);  // copy data in that remaining space
 8003990:	4b2d      	ldr	r3, [pc, #180]	@ (8003a48 <HAL_UART_RxCpltCallback+0x1a8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b2d      	ldr	r3, [pc, #180]	@ (8003a4c <HAL_UART_RxCpltCallback+0x1ac>)
 8003998:	4413      	add	r3, r2
 800399a:	89ba      	ldrh	r2, [r7, #12]
 800399c:	492c      	ldr	r1, [pc, #176]	@ (8003a50 <HAL_UART_RxCpltCallback+0x1b0>)
 800399e:	4618      	mov	r0, r3
 80039a0:	f00b fd07 	bl	800f3b2 <memcpy>

					TarvosRXbufferoldpos = 0;  // point to the start of the buffer
 80039a4:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <HAL_UART_RxCpltCallback+0x1a8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
					memcpy ((uint8_t *)tarvos_RX_Buffer, (uint8_t *)tarvos_RX_Tampon+datatocopy, (TarvosRxTamponSize-datatocopy));  // copy the remaining data
 80039aa:	89bb      	ldrh	r3, [r7, #12]
 80039ac:	4a28      	ldr	r2, [pc, #160]	@ (8003a50 <HAL_UART_RxCpltCallback+0x1b0>)
 80039ae:	1899      	adds	r1, r3, r2
 80039b0:	89bb      	ldrh	r3, [r7, #12]
 80039b2:	f1c3 031e 	rsb	r3, r3, #30
 80039b6:	461a      	mov	r2, r3
 80039b8:	4824      	ldr	r0, [pc, #144]	@ (8003a4c <HAL_UART_RxCpltCallback+0x1ac>)
 80039ba:	f00b fcfa 	bl	800f3b2 <memcpy>
					TarvosRXbuffernewpos = (TarvosRxTamponSize-datatocopy);  // update the position
 80039be:	89bb      	ldrh	r3, [r7, #12]
 80039c0:	f1c3 031e 	rsb	r3, r3, #30
 80039c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a44 <HAL_UART_RxCpltCallback+0x1a4>)
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	e01a      	b.n	8003a00 <HAL_UART_RxCpltCallback+0x160>
				}
				else{
					memcpy((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, TarvosRxTamponSize); //copy received data to the buffer
 80039ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003a48 <HAL_UART_RxCpltCallback+0x1a8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a4c <HAL_UART_RxCpltCallback+0x1ac>)
 80039d2:	4413      	add	r3, r2
 80039d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <HAL_UART_RxCpltCallback+0x1b0>)
 80039d6:	6814      	ldr	r4, [r2, #0]
 80039d8:	6850      	ldr	r0, [r2, #4]
 80039da:	6891      	ldr	r1, [r2, #8]
 80039dc:	68d5      	ldr	r5, [r2, #12]
 80039de:	601c      	str	r4, [r3, #0]
 80039e0:	6058      	str	r0, [r3, #4]
 80039e2:	6099      	str	r1, [r3, #8]
 80039e4:	60dd      	str	r5, [r3, #12]
 80039e6:	6914      	ldr	r4, [r2, #16]
 80039e8:	6950      	ldr	r0, [r2, #20]
 80039ea:	6991      	ldr	r1, [r2, #24]
 80039ec:	611c      	str	r4, [r3, #16]
 80039ee:	6158      	str	r0, [r3, #20]
 80039f0:	6199      	str	r1, [r3, #24]
 80039f2:	8b92      	ldrh	r2, [r2, #28]
 80039f4:	839a      	strh	r2, [r3, #28]
					TarvosRXbuffernewpos = TarvosRxTamponSize+TarvosRXbufferoldpos; //update buffer position
 80039f6:	4b14      	ldr	r3, [pc, #80]	@ (8003a48 <HAL_UART_RxCpltCallback+0x1a8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	331e      	adds	r3, #30
 80039fc:	4a11      	ldr	r2, [pc, #68]	@ (8003a44 <HAL_UART_RxCpltCallback+0x1a4>)
 80039fe:	6013      	str	r3, [r2, #0]

				}
				HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8003a00:	221e      	movs	r2, #30
 8003a02:	4913      	ldr	r1, [pc, #76]	@ (8003a50 <HAL_UART_RxCpltCallback+0x1b0>)
 8003a04:	4813      	ldr	r0, [pc, #76]	@ (8003a54 <HAL_UART_RxCpltCallback+0x1b4>)
 8003a06:	f006 f8ab 	bl	8009b60 <HAL_UART_Receive_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8003a0a:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <HAL_UART_RxCpltCallback+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <HAL_UART_RxCpltCallback+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0204 	bic.w	r2, r2, #4
 8003a18:	601a      	str	r2, [r3, #0]
				}

}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40013800 	.word	0x40013800
 8003a28:	20000bd4 	.word	0x20000bd4
 8003a2c:	20000bd0 	.word	0x20000bd0
 8003a30:	20000990 	.word	0x20000990
 8003a34:	20000b90 	.word	0x20000b90
 8003a38:	20000ee0 	.word	0x20000ee0
 8003a3c:	20001034 	.word	0x20001034
 8003a40:	40008000 	.word	0x40008000
 8003a44:	20000bdc 	.word	0x20000bdc
 8003a48:	20000bd8 	.word	0x20000bd8
 8003a4c:	20000870 	.word	0x20000870
 8003a50:	20000970 	.word	0x20000970
 8003a54:	20000e4c 	.word	0x20000e4c
 8003a58:	20000f74 	.word	0x20000f74

08003a5c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003a60:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a62:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <MX_USB_PCD_Init+0x4c>)
 8003a64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a68:	2208      	movs	r2, #8
 8003a6a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a6e:	2202      	movs	r2, #2
 8003a70:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a72:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a74:	2202      	movs	r2, #2
 8003a76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003a7e:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003a84:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003a90:	4804      	ldr	r0, [pc, #16]	@ (8003aa4 <MX_USB_PCD_Init+0x48>)
 8003a92:	f002 ff66 	bl	8006962 <HAL_PCD_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003a9c:	f7fe ffde 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20001094 	.word	0x20001094
 8003aa8:	40005c00 	.word	0x40005c00

08003aac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b094      	sub	sp, #80	@ 0x50
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	2244      	movs	r2, #68	@ 0x44
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f00b fc2f 	bl	800f320 <memset>
  if(pcdHandle->Instance==USB)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a11      	ldr	r2, [pc, #68]	@ (8003b0c <HAL_PCD_MspInit+0x60>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d11a      	bne.n	8003b02 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003acc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ad0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fe18 	bl	8007710 <HAL_RCCEx_PeriphCLKConfig>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8003ae6:	f7fe ffb9 	bl	8002a5c <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_PCD_MspInit+0x64>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <HAL_PCD_MspInit+0x64>)
 8003af0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003af6:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <HAL_PCD_MspInit+0x64>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003b02:	bf00      	nop
 8003b04:	3750      	adds	r7, #80	@ 0x50
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40005c00 	.word	0x40005c00
 8003b10:	40021000 	.word	0x40021000

08003b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b14:	480d      	ldr	r0, [pc, #52]	@ (8003b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b16:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b18:	f7ff f9e8 	bl	8002eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b1c:	480c      	ldr	r0, [pc, #48]	@ (8003b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b1e:	490d      	ldr	r1, [pc, #52]	@ (8003b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b20:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <LoopForever+0xe>)
  movs r3, #0
 8003b22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b24:	e002      	b.n	8003b2c <LoopCopyDataInit>

08003b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2a:	3304      	adds	r3, #4

08003b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b30:	d3f9      	bcc.n	8003b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b32:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b34:	4c0a      	ldr	r4, [pc, #40]	@ (8003b60 <LoopForever+0x16>)
  movs r3, #0
 8003b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b38:	e001      	b.n	8003b3e <LoopFillZerobss>

08003b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b3c:	3204      	adds	r2, #4

08003b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b40:	d3fb      	bcc.n	8003b3a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003b42:	f00b fc0f 	bl	800f364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b46:	f7fe fdb3 	bl	80026b0 <main>

08003b4a <LoopForever>:

LoopForever:
    b LoopForever
 8003b4a:	e7fe      	b.n	8003b4a <LoopForever>
  ldr   r0, =_estack
 8003b4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b54:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003b58:	08012320 	.word	0x08012320
  ldr r2, =_sbss
 8003b5c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003b60:	200014fc 	.word	0x200014fc

08003b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b64:	e7fe      	b.n	8003b64 <ADC1_2_IRQHandler>

08003b66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b70:	2003      	movs	r0, #3
 8003b72:	f001 fb99 	bl	80052a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b76:	200f      	movs	r0, #15
 8003b78:	f000 f80e 	bl	8003b98 <HAL_InitTick>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	71fb      	strb	r3, [r7, #7]
 8003b86:	e001      	b.n	8003b8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b88:	f7fe ffee 	bl	8002b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b8c:	79fb      	ldrb	r3, [r7, #7]

}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ba4:	4b16      	ldr	r3, [pc, #88]	@ (8003c00 <HAL_InitTick+0x68>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d022      	beq.n	8003bf2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003bac:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <HAL_InitTick+0x6c>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <HAL_InitTick+0x68>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f001 fba4 	bl	800530e <HAL_SYSTICK_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10f      	bne.n	8003bec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d809      	bhi.n	8003be6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bda:	f001 fb70 	bl	80052be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bde:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <HAL_InitTick+0x70>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e007      	b.n	8003bf6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	e004      	b.n	8003bf6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e001      	b.n	8003bf6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000014 	.word	0x20000014
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	20000010 	.word	0x20000010

08003c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_IncTick+0x1c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HAL_IncTick+0x20>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	4a03      	ldr	r2, [pc, #12]	@ (8003c28 <HAL_IncTick+0x1c>)
 8003c1c:	6013      	str	r3, [r2, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	20001370 	.word	0x20001370
 8003c2c:	20000014 	.word	0x20000014

08003c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return uwTick;
 8003c34:	4b03      	ldr	r3, [pc, #12]	@ (8003c44 <HAL_GetTick+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20001370 	.word	0x20001370

08003c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c50:	f7ff ffee 	bl	8003c30 <HAL_GetTick>
 8003c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c60:	d004      	beq.n	8003c6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c62:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <HAL_Delay+0x40>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c6c:	bf00      	nop
 8003c6e:	f7ff ffdf 	bl	8003c30 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d8f7      	bhi.n	8003c6e <HAL_Delay+0x26>
  {
  }
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000014 	.word	0x20000014

08003c8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3360      	adds	r3, #96	@ 0x60
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b08      	ldr	r3, [pc, #32]	@ (8003d38 <LL_ADC_SetOffset+0x44>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	03fff000 	.word	0x03fff000

08003d3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3360      	adds	r3, #96	@ 0x60
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3360      	adds	r3, #96	@ 0x60
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b087      	sub	sp, #28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3360      	adds	r3, #96	@ 0x60
 8003dae:	461a      	mov	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3360      	adds	r3, #96	@ 0x60
 8003de4:	461a      	mov	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	615a      	str	r2, [r3, #20]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b087      	sub	sp, #28
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3330      	adds	r3, #48	@ 0x30
 8003e66:	461a      	mov	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	4413      	add	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	211f      	movs	r1, #31
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	401a      	ands	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0e9b      	lsrs	r3, r3, #26
 8003e8e:	f003 011f 	and.w	r1, r3, #31
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b087      	sub	sp, #28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	0e5b      	lsrs	r3, r3, #25
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	4413      	add	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	0d1b      	lsrs	r3, r3, #20
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2107      	movs	r1, #7
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	0d1b      	lsrs	r3, r3, #20
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f003 0318 	and.w	r3, r3, #24
 8003f26:	4908      	ldr	r1, [pc, #32]	@ (8003f48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f28:	40d9      	lsrs	r1, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	0007ffff 	.word	0x0007ffff

08003f4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 031f 	and.w	r3, r3, #31
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6093      	str	r3, [r2, #8]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fa0:	d101      	bne.n	8003fa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003fc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ff0:	d101      	bne.n	8003ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <LL_ADC_IsEnabled+0x18>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <LL_ADC_IsEnabled+0x1a>
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004062:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004066:	f043 0204 	orr.w	r2, r3, #4
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d101      	bne.n	8004092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d101      	bne.n	80040b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e167      	b.n	80043b2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fd fa49 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff3f 	bl	8003f8c <LL_ADC_IsDeepPowerDownEnabled>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d004      	beq.n	800411e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff25 	bl	8003f68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff5a 	bl	8003fdc <LL_ADC_IsInternalRegulatorEnabled>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d115      	bne.n	800415a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff3e 	bl	8003fb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004138:	4ba0      	ldr	r3, [pc, #640]	@ (80043bc <HAL_ADC_Init+0x2f4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	4aa0      	ldr	r2, [pc, #640]	@ (80043c0 <HAL_ADC_Init+0x2f8>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	3301      	adds	r3, #1
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800414c:	e002      	b.n	8004154 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b01      	subs	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f9      	bne.n	800414e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff3c 	bl	8003fdc <LL_ADC_IsInternalRegulatorEnabled>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	f043 0210 	orr.w	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ff75 	bl	800407a <LL_ADC_REG_IsConversionOngoing>
 8004190:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 8100 	bne.w	80043a0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 80fc 	bne.w	80043a0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80041b0:	f043 0202 	orr.w	r2, r3, #2
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff35 	bl	800402c <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d111      	bne.n	80041ec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80041cc:	f7ff ff2e 	bl	800402c <LL_ADC_IsEnabled>
 80041d0:	4604      	mov	r4, r0
 80041d2:	487c      	ldr	r0, [pc, #496]	@ (80043c4 <HAL_ADC_Init+0x2fc>)
 80041d4:	f7ff ff2a 	bl	800402c <LL_ADC_IsEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	4323      	orrs	r3, r4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4619      	mov	r1, r3
 80041e6:	4878      	ldr	r0, [pc, #480]	@ (80043c8 <HAL_ADC_Init+0x300>)
 80041e8:	f7ff fd50 	bl	8003c8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	7f5b      	ldrb	r3, [r3, #29]
 80041f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80041fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004202:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800420a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004216:	2b01      	cmp	r3, #1
 8004218:	d106      	bne.n	8004228 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	3b01      	subs	r3, #1
 8004220:	045b      	lsls	r3, r3, #17
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	4b60      	ldr	r3, [pc, #384]	@ (80043cc <HAL_ADC_Init+0x304>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	69b9      	ldr	r1, [r7, #24]
 8004254:	430b      	orrs	r3, r1
 8004256:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff ff14 	bl	80040a0 <LL_ADC_INJ_IsConversionOngoing>
 8004278:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d16d      	bne.n	800435c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d16a      	bne.n	800435c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800428a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004292:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042a2:	f023 0302 	bic.w	r3, r3, #2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	69b9      	ldr	r1, [r7, #24]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80042c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80042d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6911      	ldr	r1, [r2, #16]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80042e6:	e013      	b.n	8004310 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80042f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004308:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800430c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004316:	2b01      	cmp	r3, #1
 8004318:	d118      	bne.n	800434c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004336:	4311      	orrs	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800433c:	430a      	orrs	r2, r1
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	611a      	str	r2, [r3, #16]
 800434a:	e007      	b.n	800435c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10c      	bne.n	800437e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f023 010f 	bic.w	r1, r3, #15
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	1e5a      	subs	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
 800437c:	e007      	b.n	800438e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 020f 	bic.w	r2, r2, #15
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	f023 0303 	bic.w	r3, r3, #3
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800439e:	e007      	b.n	80043b0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}
 80043ba:	bf00      	nop
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	053e2d63 	.word	0x053e2d63
 80043c4:	50000100 	.word	0x50000100
 80043c8:	50000300 	.word	0x50000300
 80043cc:	fff04007 	.word	0xfff04007

080043d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043dc:	4851      	ldr	r0, [pc, #324]	@ (8004524 <HAL_ADC_Start_DMA+0x154>)
 80043de:	f7ff fdb5 	bl	8003f4c <LL_ADC_GetMultimode>
 80043e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fe46 	bl	800407a <LL_ADC_REG_IsConversionOngoing>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 808f 	bne.w	8004514 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_Start_DMA+0x34>
 8004400:	2302      	movs	r3, #2
 8004402:	e08a      	b.n	800451a <HAL_ADC_Start_DMA+0x14a>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b05      	cmp	r3, #5
 8004416:	d002      	beq.n	800441e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b09      	cmp	r3, #9
 800441c:	d173      	bne.n	8004506 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fc8e 	bl	8004d40 <ADC_Enable>
 8004424:	4603      	mov	r3, r0
 8004426:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d166      	bne.n	80044fc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004432:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a38      	ldr	r2, [pc, #224]	@ (8004528 <HAL_ADC_Start_DMA+0x158>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d002      	beq.n	8004452 <HAL_ADC_Start_DMA+0x82>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	e001      	b.n	8004456 <HAL_ADC_Start_DMA+0x86>
 8004452:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	4293      	cmp	r3, r2
 800445c:	d002      	beq.n	8004464 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d006      	beq.n	800448a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004480:	f023 0206 	bic.w	r2, r3, #6
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	661a      	str	r2, [r3, #96]	@ 0x60
 8004488:	e002      	b.n	8004490 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004494:	4a25      	ldr	r2, [pc, #148]	@ (800452c <HAL_ADC_Start_DMA+0x15c>)
 8004496:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449c:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <HAL_ADC_Start_DMA+0x160>)
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	4a23      	ldr	r2, [pc, #140]	@ (8004534 <HAL_ADC_Start_DMA+0x164>)
 80044a6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	221c      	movs	r2, #28
 80044ae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0210 	orr.w	r2, r2, #16
 80044c6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3340      	adds	r3, #64	@ 0x40
 80044e2:	4619      	mov	r1, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f000 ffc6 	bl	8005478 <HAL_DMA_Start_IT>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fdac 	bl	8004052 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80044fa:	e00d      	b.n	8004518 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004504:	e008      	b.n	8004518 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004512:	e001      	b.n	8004518 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004514:	2302      	movs	r3, #2
 8004516:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	50000300 	.word	0x50000300
 8004528:	50000100 	.word	0x50000100
 800452c:	08004e4d 	.word	0x08004e4d
 8004530:	08004f25 	.word	0x08004f25
 8004534:	08004f41 	.word	0x08004f41

08004538 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b0b6      	sub	sp, #216	@ 0xd8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x22>
 800457e:	2302      	movs	r3, #2
 8004580:	e3c8      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x7b4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fd73 	bl	800407a <LL_ADC_REG_IsConversionOngoing>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 83ad 	bne.w	8004cf6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f7ff fc54 	bl	8003e56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fd61 	bl	800407a <LL_ADC_REG_IsConversionOngoing>
 80045b8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fd6d 	bl	80040a0 <LL_ADC_INJ_IsConversionOngoing>
 80045c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 81d9 	bne.w	8004986 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 81d4 	bne.w	8004986 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045e6:	d10f      	bne.n	8004608 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	4619      	mov	r1, r3
 80045f4:	f7ff fc5b 	bl	8003eae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fc02 	bl	8003e0a <LL_ADC_SetSamplingTimeCommonConfig>
 8004606:	e00e      	b.n	8004626 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	461a      	mov	r2, r3
 8004616:	f7ff fc4a 	bl	8003eae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fbf2 	bl	8003e0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b04      	cmp	r3, #4
 8004646:	d022      	beq.n	800468e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6919      	ldr	r1, [r3, #16]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004658:	f7ff fb4c 	bl	8003cf4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6919      	ldr	r1, [r3, #16]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	461a      	mov	r2, r3
 800466a:	f7ff fb98 	bl	8003d9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x124>
 800467e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004682:	e000      	b.n	8004686 <HAL_ADC_ConfigChannel+0x126>
 8004684:	2300      	movs	r3, #0
 8004686:	461a      	mov	r2, r3
 8004688:	f7ff fba4 	bl	8003dd4 <LL_ADC_SetOffsetSaturation>
 800468c:	e17b      	b.n	8004986 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fb51 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x15a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fb46 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 80046b0:	4603      	mov	r3, r0
 80046b2:	0e9b      	lsrs	r3, r3, #26
 80046b4:	f003 021f 	and.w	r2, r3, #31
 80046b8:	e01e      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x198>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fb3b 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80046e8:	2320      	movs	r3, #32
 80046ea:	e004      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80046ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x1b0>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	0e9b      	lsrs	r3, r3, #26
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	e018      	b.n	8004742 <HAL_ADC_ConfigChannel+0x1e2>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800472c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004734:	2320      	movs	r3, #32
 8004736:	e004      	b.n	8004742 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004742:	429a      	cmp	r2, r3
 8004744:	d106      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2200      	movs	r2, #0
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fb0a 	bl	8003d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff faee 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x220>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2101      	movs	r1, #1
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fae3 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 8004776:	4603      	mov	r3, r0
 8004778:	0e9b      	lsrs	r3, r3, #26
 800477a:	f003 021f 	and.w	r2, r3, #31
 800477e:	e01e      	b.n	80047be <HAL_ADC_ConfigChannel+0x25e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fad8 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 800478c:	4603      	mov	r3, r0
 800478e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800479e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80047a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e004      	b.n	80047bc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80047b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x276>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0e9b      	lsrs	r3, r3, #26
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	e018      	b.n	8004808 <HAL_ADC_ConfigChannel+0x2a8>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80047ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80047f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80047fa:	2320      	movs	r3, #32
 80047fc:	e004      	b.n	8004808 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80047fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004808:	429a      	cmp	r2, r3
 800480a:	d106      	bne.n	800481a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff faa7 	bl	8003d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2102      	movs	r1, #2
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fa8b 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x2e6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fa80 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 800483c:	4603      	mov	r3, r0
 800483e:	0e9b      	lsrs	r3, r3, #26
 8004840:	f003 021f 	and.w	r2, r3, #31
 8004844:	e01e      	b.n	8004884 <HAL_ADC_ConfigChannel+0x324>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2102      	movs	r1, #2
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fa75 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 8004852:	4603      	mov	r3, r0
 8004854:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004868:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800486c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004874:	2320      	movs	r3, #32
 8004876:	e004      	b.n	8004882 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004878:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_ADC_ConfigChannel+0x33c>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0e9b      	lsrs	r3, r3, #26
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	e016      	b.n	80048ca <HAL_ADC_ConfigChannel+0x36a>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80048ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80048b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	e004      	b.n	80048ca <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80048c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048c4:	fab3 f383 	clz	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d106      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fa46 	bl	8003d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2103      	movs	r1, #3
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fa2a 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x3a8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2103      	movs	r1, #3
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff fa1f 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 80048fe:	4603      	mov	r3, r0
 8004900:	0e9b      	lsrs	r3, r3, #26
 8004902:	f003 021f 	and.w	r2, r3, #31
 8004906:	e017      	b.n	8004938 <HAL_ADC_ConfigChannel+0x3d8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2103      	movs	r1, #3
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fa14 	bl	8003d3c <LL_ADC_GetOffsetChannel>
 8004914:	4603      	mov	r3, r0
 8004916:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004922:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800492a:	2320      	movs	r3, #32
 800492c:	e003      	b.n	8004936 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800492e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004930:	fab3 f383 	clz	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x3f0>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	0e9b      	lsrs	r3, r3, #26
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	e011      	b.n	8004974 <HAL_ADC_ConfigChannel+0x414>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800495e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004960:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004968:	2320      	movs	r3, #32
 800496a:	e003      	b.n	8004974 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800496c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004974:	429a      	cmp	r2, r3
 8004976:	d106      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	2103      	movs	r1, #3
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f9f1 	bl	8003d68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fb4e 	bl	800402c <LL_ADC_IsEnabled>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 8140 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	461a      	mov	r2, r3
 80049a6:	f7ff faad 	bl	8003f04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	4a8f      	ldr	r2, [pc, #572]	@ (8004bec <HAL_ADC_ConfigChannel+0x68c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	f040 8131 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <HAL_ADC_ConfigChannel+0x47e>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0e9b      	lsrs	r3, r3, #26
 80049cc:	3301      	adds	r3, #1
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	bf94      	ite	ls
 80049d6:	2301      	movls	r3, #1
 80049d8:	2300      	movhi	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	e019      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x4b2>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80049ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ee:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80049f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80049f6:	2320      	movs	r3, #32
 80049f8:	e003      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80049fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2b09      	cmp	r3, #9
 8004a0a:	bf94      	ite	ls
 8004a0c:	2301      	movls	r3, #1
 8004a0e:	2300      	movhi	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d079      	beq.n	8004b0a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d107      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x4d2>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	0e9b      	lsrs	r3, r3, #26
 8004a28:	3301      	adds	r3, #1
 8004a2a:	069b      	lsls	r3, r3, #26
 8004a2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a30:	e015      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x4fe>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	e003      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a50:	fab3 f383 	clz	r3, r3
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	3301      	adds	r3, #1
 8004a58:	069b      	lsls	r3, r3, #26
 8004a5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x51e>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0e9b      	lsrs	r3, r3, #26
 8004a70:	3301      	adds	r3, #1
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2101      	movs	r1, #1
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	e017      	b.n	8004aae <HAL_ADC_ConfigChannel+0x54e>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004a96:	2320      	movs	r3, #32
 8004a98:	e003      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	ea42 0103 	orr.w	r1, r2, r3
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x574>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	0e9b      	lsrs	r3, r3, #26
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f003 021f 	and.w	r2, r3, #31
 8004aca:	4613      	mov	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	4413      	add	r3, r2
 8004ad0:	051b      	lsls	r3, r3, #20
 8004ad2:	e018      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x5a6>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004aec:	2320      	movs	r3, #32
 8004aee:	e003      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af2:	fab3 f383 	clz	r3, r3
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3301      	adds	r3, #1
 8004afa:	f003 021f 	and.w	r2, r3, #31
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b06:	430b      	orrs	r3, r1
 8004b08:	e081      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x5c6>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	069b      	lsls	r3, r3, #26
 8004b20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b24:	e015      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x5f2>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	e003      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	069b      	lsls	r3, r3, #26
 8004b4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x612>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	3301      	adds	r3, #1
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	e017      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x642>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	61fb      	str	r3, [r7, #28]
  return result;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	e003      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	fab3 f383 	clz	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	ea42 0103 	orr.w	r1, r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x66e>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	0e9b      	lsrs	r3, r3, #26
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f003 021f 	and.w	r2, r3, #31
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3b1e      	subs	r3, #30
 8004bc6:	051b      	lsls	r3, r3, #20
 8004bc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bcc:	e01e      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x6ac>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	613b      	str	r3, [r7, #16]
  return result;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004be6:	2320      	movs	r3, #32
 8004be8:	e006      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x698>
 8004bea:	bf00      	nop
 8004bec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f003 021f 	and.w	r2, r3, #31
 8004bfe:	4613      	mov	r3, r2
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	3b1e      	subs	r3, #30
 8004c06:	051b      	lsls	r3, r3, #20
 8004c08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c12:	4619      	mov	r1, r3
 8004c14:	f7ff f94b 	bl	8003eae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d1c <HAL_ADC_ConfigChannel+0x7bc>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d071      	beq.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c24:	483e      	ldr	r0, [pc, #248]	@ (8004d20 <HAL_ADC_ConfigChannel+0x7c0>)
 8004c26:	f7ff f857 	bl	8003cd8 <LL_ADC_GetCommonPathInternalCh>
 8004c2a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3c      	ldr	r2, [pc, #240]	@ (8004d24 <HAL_ADC_ConfigChannel+0x7c4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_ADC_ConfigChannel+0x6e2>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d28 <HAL_ADC_ConfigChannel+0x7c8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d127      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d121      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c56:	d157      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c60:	4619      	mov	r1, r3
 8004c62:	482f      	ldr	r0, [pc, #188]	@ (8004d20 <HAL_ADC_ConfigChannel+0x7c0>)
 8004c64:	f7ff f825 	bl	8003cb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c68:	4b30      	ldr	r3, [pc, #192]	@ (8004d2c <HAL_ADC_ConfigChannel+0x7cc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	4a30      	ldr	r2, [pc, #192]	@ (8004d30 <HAL_ADC_ConfigChannel+0x7d0>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c82:	e002      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f9      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c90:	e03a      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a27      	ldr	r2, [pc, #156]	@ (8004d34 <HAL_ADC_ConfigChannel+0x7d4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d113      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a22      	ldr	r2, [pc, #136]	@ (8004d38 <HAL_ADC_ConfigChannel+0x7d8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02a      	beq.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4818      	ldr	r0, [pc, #96]	@ (8004d20 <HAL_ADC_ConfigChannel+0x7c0>)
 8004cbe:	f7fe fff8 	bl	8003cb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cc2:	e021      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d3c <HAL_ADC_ConfigChannel+0x7dc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d11c      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a16      	ldr	r2, [pc, #88]	@ (8004d38 <HAL_ADC_ConfigChannel+0x7d8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d011      	beq.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ce8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cec:	4619      	mov	r1, r3
 8004cee:	480c      	ldr	r0, [pc, #48]	@ (8004d20 <HAL_ADC_ConfigChannel+0x7c0>)
 8004cf0:	f7fe ffdf 	bl	8003cb2 <LL_ADC_SetCommonPathInternalCh>
 8004cf4:	e008      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d10:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	37d8      	adds	r7, #216	@ 0xd8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	80080000 	.word	0x80080000
 8004d20:	50000300 	.word	0x50000300
 8004d24:	c3210000 	.word	0xc3210000
 8004d28:	90c00010 	.word	0x90c00010
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	053e2d63 	.word	0x053e2d63
 8004d34:	c7520000 	.word	0xc7520000
 8004d38:	50000100 	.word	0x50000100
 8004d3c:	cb840000 	.word	0xcb840000

08004d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff f96b 	bl	800402c <LL_ADC_IsEnabled>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d169      	bne.n	8004e30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	4b36      	ldr	r3, [pc, #216]	@ (8004e3c <ADC_Enable+0xfc>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6e:	f043 0210 	orr.w	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e055      	b.n	8004e32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff f93a 	bl	8004004 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d90:	482b      	ldr	r0, [pc, #172]	@ (8004e40 <ADC_Enable+0x100>)
 8004d92:	f7fe ffa1 	bl	8003cd8 <LL_ADC_GetCommonPathInternalCh>
 8004d96:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d013      	beq.n	8004dc8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <ADC_Enable+0x104>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	099b      	lsrs	r3, r3, #6
 8004da6:	4a28      	ldr	r2, [pc, #160]	@ (8004e48 <ADC_Enable+0x108>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	099b      	lsrs	r3, r3, #6
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	4613      	mov	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dba:	e002      	b.n	8004dc2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f9      	bne.n	8004dbc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004dc8:	f7fe ff32 	bl	8003c30 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dce:	e028      	b.n	8004e22 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff f929 	bl	800402c <LL_ADC_IsEnabled>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff f90d 	bl	8004004 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dea:	f7fe ff21 	bl	8003c30 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d914      	bls.n	8004e22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d00d      	beq.n	8004e22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0a:	f043 0210 	orr.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e007      	b.n	8004e32 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d1cf      	bne.n	8004dd0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	8000003f 	.word	0x8000003f
 8004e40:	50000300 	.word	0x50000300
 8004e44:	2000000c 	.word	0x2000000c
 8004e48:	053e2d63 	.word	0x053e2d63

08004e4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d14b      	bne.n	8004efe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d021      	beq.n	8004ec4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe ffd3 	bl	8003e30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d032      	beq.n	8004ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d12b      	bne.n	8004ef6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11f      	bne.n	8004ef6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ec2:	e018      	b.n	8004ef6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d111      	bne.n	8004ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7fc fc4a 	bl	8001790 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004efc:	e00e      	b.n	8004f1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff fb1e 	bl	800454c <HAL_ADC_ErrorCallback>
}
 8004f10:	e004      	b.n	8004f1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fb00 	bl	8004538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5e:	f043 0204 	orr.w	r2, r3, #4
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff faf0 	bl	800454c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <LL_ADC_IsEnabled>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <LL_ADC_IsEnabled+0x18>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <LL_ADC_IsEnabled+0x1a>
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <LL_ADC_REG_IsConversionOngoing>:
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d101      	bne.n	8004fb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b0a1      	sub	sp, #132	@ 0x84
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e08b      	b.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004fea:	2300      	movs	r3, #0
 8004fec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ff6:	d102      	bne.n	8004ffe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ff8:	4b41      	ldr	r3, [pc, #260]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	e001      	b.n	8005002 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e06a      	b.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff ffb9 	bl	8004f9a <LL_ADC_REG_IsConversionOngoing>
 8005028:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff ffb3 	bl	8004f9a <LL_ADC_REG_IsConversionOngoing>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d14c      	bne.n	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800503a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800503c:	2b00      	cmp	r3, #0
 800503e:	d149      	bne.n	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005040:	4b30      	ldr	r3, [pc, #192]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005042:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d028      	beq.n	800509e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800504c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6859      	ldr	r1, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800505e:	035b      	lsls	r3, r3, #13
 8005060:	430b      	orrs	r3, r1
 8005062:	431a      	orrs	r2, r3
 8005064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005066:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005068:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800506c:	f7ff ff82 	bl	8004f74 <LL_ADC_IsEnabled>
 8005070:	4604      	mov	r4, r0
 8005072:	4823      	ldr	r0, [pc, #140]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005074:	f7ff ff7e 	bl	8004f74 <LL_ADC_IsEnabled>
 8005078:	4603      	mov	r3, r0
 800507a:	4323      	orrs	r3, r4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d133      	bne.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005088:	f023 030f 	bic.w	r3, r3, #15
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	6811      	ldr	r1, [r2, #0]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	6892      	ldr	r2, [r2, #8]
 8005094:	430a      	orrs	r2, r1
 8005096:	431a      	orrs	r2, r3
 8005098:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800509a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800509c:	e024      	b.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800509e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050aa:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050ae:	f7ff ff61 	bl	8004f74 <LL_ADC_IsEnabled>
 80050b2:	4604      	mov	r4, r0
 80050b4:	4812      	ldr	r0, [pc, #72]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80050b6:	f7ff ff5d 	bl	8004f74 <LL_ADC_IsEnabled>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4323      	orrs	r3, r4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d112      	bne.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050ca:	f023 030f 	bic.w	r3, r3, #15
 80050ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80050d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050d2:	e009      	b.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80050e6:	e000      	b.n	80050ea <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80050f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3784      	adds	r7, #132	@ 0x84
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd90      	pop	{r4, r7, pc}
 80050fe:	bf00      	nop
 8005100:	50000100 	.word	0x50000100
 8005104:	50000300 	.word	0x50000300

08005108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005118:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <__NVIC_SetPriorityGrouping+0x44>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005124:	4013      	ands	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800513a:	4a04      	ldr	r2, [pc, #16]	@ (800514c <__NVIC_SetPriorityGrouping+0x44>)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	60d3      	str	r3, [r2, #12]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005154:	4b04      	ldr	r3, [pc, #16]	@ (8005168 <__NVIC_GetPriorityGrouping+0x18>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	f003 0307 	and.w	r3, r3, #7
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	2b00      	cmp	r3, #0
 800517c:	db0b      	blt.n	8005196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	f003 021f 	and.w	r2, r3, #31
 8005184:	4907      	ldr	r1, [pc, #28]	@ (80051a4 <__NVIC_EnableIRQ+0x38>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	2001      	movs	r0, #1
 800518e:	fa00 f202 	lsl.w	r2, r0, r2
 8005192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	e000e100 	.word	0xe000e100

080051a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	6039      	str	r1, [r7, #0]
 80051b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	db0a      	blt.n	80051d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	490c      	ldr	r1, [pc, #48]	@ (80051f4 <__NVIC_SetPriority+0x4c>)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	0112      	lsls	r2, r2, #4
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	440b      	add	r3, r1
 80051cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d0:	e00a      	b.n	80051e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4908      	ldr	r1, [pc, #32]	@ (80051f8 <__NVIC_SetPriority+0x50>)
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	3b04      	subs	r3, #4
 80051e0:	0112      	lsls	r2, r2, #4
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	440b      	add	r3, r1
 80051e6:	761a      	strb	r2, [r3, #24]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	e000e100 	.word	0xe000e100
 80051f8:	e000ed00 	.word	0xe000ed00

080051fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	@ 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f1c3 0307 	rsb	r3, r3, #7
 8005216:	2b04      	cmp	r3, #4
 8005218:	bf28      	it	cs
 800521a:	2304      	movcs	r3, #4
 800521c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3304      	adds	r3, #4
 8005222:	2b06      	cmp	r3, #6
 8005224:	d902      	bls.n	800522c <NVIC_EncodePriority+0x30>
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3b03      	subs	r3, #3
 800522a:	e000      	b.n	800522e <NVIC_EncodePriority+0x32>
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	43da      	mvns	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	401a      	ands	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005244:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	43d9      	mvns	r1, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005254:	4313      	orrs	r3, r2
         );
}
 8005256:	4618      	mov	r0, r3
 8005258:	3724      	adds	r7, #36	@ 0x24
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005274:	d301      	bcc.n	800527a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005276:	2301      	movs	r3, #1
 8005278:	e00f      	b.n	800529a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800527a:	4a0a      	ldr	r2, [pc, #40]	@ (80052a4 <SysTick_Config+0x40>)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3b01      	subs	r3, #1
 8005280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005282:	210f      	movs	r1, #15
 8005284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005288:	f7ff ff8e 	bl	80051a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <SysTick_Config+0x40>)
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005292:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <SysTick_Config+0x40>)
 8005294:	2207      	movs	r2, #7
 8005296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	e000e010 	.word	0xe000e010

080052a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff29 	bl	8005108 <__NVIC_SetPriorityGrouping>
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	4603      	mov	r3, r0
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052cc:	f7ff ff40 	bl	8005150 <__NVIC_GetPriorityGrouping>
 80052d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	6978      	ldr	r0, [r7, #20]
 80052d8:	f7ff ff90 	bl	80051fc <NVIC_EncodePriority>
 80052dc:	4602      	mov	r2, r0
 80052de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e2:	4611      	mov	r1, r2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff ff5f 	bl	80051a8 <__NVIC_SetPriority>
}
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	4603      	mov	r3, r0
 80052fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ff33 	bl	800516c <__NVIC_EnableIRQ>
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff ffa4 	bl	8005264 <SysTick_Config>
 800531c:	4603      	mov	r3, r0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e08d      	b.n	8005456 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	4b47      	ldr	r3, [pc, #284]	@ (8005460 <HAL_DMA_Init+0x138>)
 8005342:	429a      	cmp	r2, r3
 8005344:	d80f      	bhi.n	8005366 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	4b45      	ldr	r3, [pc, #276]	@ (8005464 <HAL_DMA_Init+0x13c>)
 800534e:	4413      	add	r3, r2
 8005350:	4a45      	ldr	r2, [pc, #276]	@ (8005468 <HAL_DMA_Init+0x140>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	009a      	lsls	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a42      	ldr	r2, [pc, #264]	@ (800546c <HAL_DMA_Init+0x144>)
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40
 8005364:	e00e      	b.n	8005384 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	4b40      	ldr	r3, [pc, #256]	@ (8005470 <HAL_DMA_Init+0x148>)
 800536e:	4413      	add	r3, r2
 8005370:	4a3d      	ldr	r2, [pc, #244]	@ (8005468 <HAL_DMA_Init+0x140>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	009a      	lsls	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a3c      	ldr	r2, [pc, #240]	@ (8005474 <HAL_DMA_Init+0x14c>)
 8005382:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa82 	bl	80058e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e4:	d102      	bne.n	80053ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005400:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d010      	beq.n	800542c <HAL_DMA_Init+0x104>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d80c      	bhi.n	800542c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 faa2 	bl	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	e008      	b.n	800543e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40020407 	.word	0x40020407
 8005464:	bffdfff8 	.word	0xbffdfff8
 8005468:	cccccccd 	.word	0xcccccccd
 800546c:	40020000 	.word	0x40020000
 8005470:	bffdfbf8 	.word	0xbffdfbf8
 8005474:	40020400 	.word	0x40020400

08005478 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_DMA_Start_IT+0x20>
 8005494:	2302      	movs	r3, #2
 8005496:	e066      	b.n	8005566 <HAL_DMA_Start_IT+0xee>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d155      	bne.n	8005558 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f9c7 	bl	8005864 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 020e 	orr.w	r2, r2, #14
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e00f      	b.n	8005510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0204 	bic.w	r2, r2, #4
 80054fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 020a 	orr.w	r2, r2, #10
 800550e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800552c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005544:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e005      	b.n	8005564 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005560:	2302      	movs	r3, #2
 8005562:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d005      	beq.n	8005592 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2204      	movs	r2, #4
 800558a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	e037      	b.n	8005602 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 020e 	bic.w	r2, r2, #14
 80055a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f003 021f 	and.w	r2, r3, #31
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	2101      	movs	r1, #1
 80055d0:	fa01 f202 	lsl.w	r2, r1, r2
 80055d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00c      	beq.n	8005602 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005600:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d00d      	beq.n	8005654 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2204      	movs	r2, #4
 800563c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
 8005652:	e047      	b.n	80056e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 020e 	bic.w	r2, r2, #14
 8005662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005682:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005688:	f003 021f 	and.w	r2, r3, #31
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	2101      	movs	r1, #1
 8005692:	fa01 f202 	lsl.w	r2, r1, r2
 8005696:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
    }
  }
  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	2204      	movs	r2, #4
 8005710:	409a      	lsls	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4013      	ands	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d026      	beq.n	8005768 <HAL_DMA_IRQHandler+0x7a>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d021      	beq.n	8005768 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0204 	bic.w	r2, r2, #4
 8005740:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005746:	f003 021f 	and.w	r2, r3, #31
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	2104      	movs	r1, #4
 8005750:	fa01 f202 	lsl.w	r2, r1, r2
 8005754:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	2b00      	cmp	r3, #0
 800575c:	d071      	beq.n	8005842 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005766:	e06c      	b.n	8005842 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2202      	movs	r2, #2
 8005772:	409a      	lsls	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02e      	beq.n	80057da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d029      	beq.n	80057da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 020a 	bic.w	r2, r2, #10
 80057a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	f003 021f 	and.w	r2, r3, #31
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	2102      	movs	r1, #2
 80057ba:	fa01 f202 	lsl.w	r2, r1, r2
 80057be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d038      	beq.n	8005842 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057d8:	e033      	b.n	8005842 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	2208      	movs	r2, #8
 80057e4:	409a      	lsls	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d02a      	beq.n	8005844 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d025      	beq.n	8005844 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 020e 	bic.w	r2, r2, #14
 8005806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580c:	f003 021f 	and.w	r2, r3, #31
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f202 	lsl.w	r2, r1, r2
 800581a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005842:	bf00      	nop
 8005844:	bf00      	nop
}
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800587a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	f003 021f 	and.w	r2, r3, #31
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f202 	lsl.w	r2, r1, r2
 80058a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d108      	bne.n	80058c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058c2:	e007      	b.n	80058d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b16      	ldr	r3, [pc, #88]	@ (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d802      	bhi.n	80058fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058f4:	4b15      	ldr	r3, [pc, #84]	@ (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e001      	b.n	80058fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80058fa:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80058fc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	3b08      	subs	r3, #8
 800590a:	4a12      	ldr	r2, [pc, #72]	@ (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005918:	089b      	lsrs	r3, r3, #2
 800591a:	009a      	lsls	r2, r3, #2
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	461a      	mov	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a0b      	ldr	r2, [pc, #44]	@ (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800592a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2201      	movs	r2, #1
 8005934:	409a      	lsls	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40020407 	.word	0x40020407
 800594c:	40020800 	.word	0x40020800
 8005950:	40020820 	.word	0x40020820
 8005954:	cccccccd 	.word	0xcccccccd
 8005958:	40020880 	.word	0x40020880

0800595c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4b0b      	ldr	r3, [pc, #44]	@ (800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a08      	ldr	r2, [pc, #32]	@ (80059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800597e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3b01      	subs	r3, #1
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	2201      	movs	r2, #1
 800598a:	409a      	lsls	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	1000823f 	.word	0x1000823f
 80059a0:	40020940 	.word	0x40020940

080059a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059b2:	e15a      	b.n	8005c6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	2101      	movs	r1, #1
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	fa01 f303 	lsl.w	r3, r1, r3
 80059c0:	4013      	ands	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 814c 	beq.w	8005c64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d005      	beq.n	80059e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d130      	bne.n	8005a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	2203      	movs	r2, #3
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	43db      	mvns	r3, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4013      	ands	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4013      	ands	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f003 0201 	and.w	r2, r3, #1
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d017      	beq.n	8005a82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4013      	ands	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d123      	bne.n	8005ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	08da      	lsrs	r2, r3, #3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3208      	adds	r2, #8
 8005a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	08da      	lsrs	r2, r3, #3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3208      	adds	r2, #8
 8005ad0:	6939      	ldr	r1, [r7, #16]
 8005ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	2203      	movs	r2, #3
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4013      	ands	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f003 0203 	and.w	r2, r3, #3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80a6 	beq.w	8005c64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b18:	4b5b      	ldr	r3, [pc, #364]	@ (8005c88 <HAL_GPIO_Init+0x2e4>)
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8005c88 <HAL_GPIO_Init+0x2e4>)
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b24:	4b58      	ldr	r3, [pc, #352]	@ (8005c88 <HAL_GPIO_Init+0x2e4>)
 8005b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b30:	4a56      	ldr	r2, [pc, #344]	@ (8005c8c <HAL_GPIO_Init+0x2e8>)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	089b      	lsrs	r3, r3, #2
 8005b36:	3302      	adds	r3, #2
 8005b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	220f      	movs	r2, #15
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4013      	ands	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b5a:	d01f      	beq.n	8005b9c <HAL_GPIO_Init+0x1f8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8005c90 <HAL_GPIO_Init+0x2ec>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d019      	beq.n	8005b98 <HAL_GPIO_Init+0x1f4>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a4b      	ldr	r2, [pc, #300]	@ (8005c94 <HAL_GPIO_Init+0x2f0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_GPIO_Init+0x1f0>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005c98 <HAL_GPIO_Init+0x2f4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00d      	beq.n	8005b90 <HAL_GPIO_Init+0x1ec>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a49      	ldr	r2, [pc, #292]	@ (8005c9c <HAL_GPIO_Init+0x2f8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <HAL_GPIO_Init+0x1e8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a48      	ldr	r2, [pc, #288]	@ (8005ca0 <HAL_GPIO_Init+0x2fc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d101      	bne.n	8005b88 <HAL_GPIO_Init+0x1e4>
 8005b84:	2305      	movs	r3, #5
 8005b86:	e00a      	b.n	8005b9e <HAL_GPIO_Init+0x1fa>
 8005b88:	2306      	movs	r3, #6
 8005b8a:	e008      	b.n	8005b9e <HAL_GPIO_Init+0x1fa>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	e006      	b.n	8005b9e <HAL_GPIO_Init+0x1fa>
 8005b90:	2303      	movs	r3, #3
 8005b92:	e004      	b.n	8005b9e <HAL_GPIO_Init+0x1fa>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e002      	b.n	8005b9e <HAL_GPIO_Init+0x1fa>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_GPIO_Init+0x1fa>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	f002 0203 	and.w	r2, r2, #3
 8005ba4:	0092      	lsls	r2, r2, #2
 8005ba6:	4093      	lsls	r3, r2
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bae:	4937      	ldr	r1, [pc, #220]	@ (8005c8c <HAL_GPIO_Init+0x2e8>)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	089b      	lsrs	r3, r3, #2
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bbc:	4b39      	ldr	r3, [pc, #228]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005be0:	4a30      	ldr	r2, [pc, #192]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005be6:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c0a:	4a26      	ldr	r2, [pc, #152]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c10:	4b24      	ldr	r3, [pc, #144]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	43db      	mvns	r3, r3
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4013      	ands	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c5e:	4a11      	ldr	r2, [pc, #68]	@ (8005ca4 <HAL_GPIO_Init+0x300>)
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3301      	adds	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f47f ae9d 	bne.w	80059b4 <HAL_GPIO_Init+0x10>
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	48000400 	.word	0x48000400
 8005c94:	48000800 	.word	0x48000800
 8005c98:	48000c00 	.word	0x48000c00
 8005c9c:	48001000 	.word	0x48001000
 8005ca0:	48001400 	.word	0x48001400
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	807b      	strh	r3, [r7, #2]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cb8:	787b      	ldrb	r3, [r7, #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cbe:	887a      	ldrh	r2, [r7, #2]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cc4:	e002      	b.n	8005ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cc6:	887a      	ldrh	r2, [r7, #2]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ce2:	4b08      	ldr	r3, [pc, #32]	@ (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d006      	beq.n	8005cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cee:	4a05      	ldr	r2, [pc, #20]	@ (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f806 	bl	8005d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40010400 	.word	0x40010400

08005d08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e08d      	b.n	8005e4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc fc3b 	bl	80025c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2224      	movs	r2, #36	@ 0x24
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d107      	bne.n	8005d98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d94:	609a      	str	r2, [r3, #8]
 8005d96:	e006      	b.n	8005da6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005da4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d108      	bne.n	8005dc0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	e007      	b.n	8005dd0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69d9      	ldr	r1, [r3, #28]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	4603      	mov	r3, r0
 8005e64:	817b      	strh	r3, [r7, #10]
 8005e66:	460b      	mov	r3, r1
 8005e68:	813b      	strh	r3, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	f040 80f9 	bne.w	800606e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_I2C_Mem_Write+0x34>
 8005e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0ed      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_I2C_Mem_Write+0x4e>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e0e6      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eaa:	f7fd fec1 	bl	8003c30 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2319      	movs	r3, #25
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fac3 	bl	8006448 <I2C_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0d1      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2221      	movs	r2, #33	@ 0x21
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2240      	movs	r2, #64	@ 0x40
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a3a      	ldr	r2, [r7, #32]
 8005ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ef4:	88f8      	ldrh	r0, [r7, #6]
 8005ef6:	893a      	ldrh	r2, [r7, #8]
 8005ef8:	8979      	ldrh	r1, [r7, #10]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	4603      	mov	r3, r0
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f9d3 	bl	80062b0 <I2C_RequestMemoryWrite>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0a9      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2bff      	cmp	r3, #255	@ 0xff
 8005f24:	d90e      	bls.n	8005f44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	22ff      	movs	r2, #255	@ 0xff
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	8979      	ldrh	r1, [r7, #10]
 8005f34:	2300      	movs	r3, #0
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fc47 	bl	80067d0 <I2C_TransferConfig>
 8005f42:	e00f      	b.n	8005f64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	8979      	ldrh	r1, [r7, #10]
 8005f56:	2300      	movs	r3, #0
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fc36 	bl	80067d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fac6 	bl	80064fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e07b      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d034      	beq.n	800601c <HAL_I2C_Mem_Write+0x1c8>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d130      	bne.n	800601c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2180      	movs	r1, #128	@ 0x80
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fa3f 	bl	8006448 <I2C_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e04d      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2bff      	cmp	r3, #255	@ 0xff
 8005fdc:	d90e      	bls.n	8005ffc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	22ff      	movs	r2, #255	@ 0xff
 8005fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	8979      	ldrh	r1, [r7, #10]
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fbeb 	bl	80067d0 <I2C_TransferConfig>
 8005ffa:	e00f      	b.n	800601c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600a:	b2da      	uxtb	r2, r3
 800600c:	8979      	ldrh	r1, [r7, #10]
 800600e:	2300      	movs	r3, #0
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fbda 	bl	80067d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d19e      	bne.n	8005f64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 faac 	bl	8006588 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e01a      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2220      	movs	r2, #32
 8006040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6859      	ldr	r1, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <HAL_I2C_Mem_Write+0x224>)
 800604e:	400b      	ands	r3, r1
 8006050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	fe00e800 	.word	0xfe00e800

0800607c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	4603      	mov	r3, r0
 800608c:	817b      	strh	r3, [r7, #10]
 800608e:	460b      	mov	r3, r1
 8006090:	813b      	strh	r3, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b20      	cmp	r3, #32
 80060a0:	f040 80fd 	bne.w	800629e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_I2C_Mem_Read+0x34>
 80060aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0f1      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_I2C_Mem_Read+0x4e>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e0ea      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060d2:	f7fd fdad 	bl	8003c30 <HAL_GetTick>
 80060d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	2319      	movs	r3, #25
 80060de:	2201      	movs	r2, #1
 80060e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f9af 	bl	8006448 <I2C_WaitOnFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0d5      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2222      	movs	r2, #34	@ 0x22
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2240      	movs	r2, #64	@ 0x40
 8006100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800611c:	88f8      	ldrh	r0, [r7, #6]
 800611e:	893a      	ldrh	r2, [r7, #8]
 8006120:	8979      	ldrh	r1, [r7, #10]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	4603      	mov	r3, r0
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f913 	bl	8006358 <I2C_RequestMemoryRead>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0ad      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2bff      	cmp	r3, #255	@ 0xff
 800614c:	d90e      	bls.n	800616c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	22ff      	movs	r2, #255	@ 0xff
 8006152:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006158:	b2da      	uxtb	r2, r3
 800615a:	8979      	ldrh	r1, [r7, #10]
 800615c:	4b52      	ldr	r3, [pc, #328]	@ (80062a8 <HAL_I2C_Mem_Read+0x22c>)
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fb33 	bl	80067d0 <I2C_TransferConfig>
 800616a:	e00f      	b.n	800618c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617a:	b2da      	uxtb	r2, r3
 800617c:	8979      	ldrh	r1, [r7, #10]
 800617e:	4b4a      	ldr	r3, [pc, #296]	@ (80062a8 <HAL_I2C_Mem_Read+0x22c>)
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fb22 	bl	80067d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	2200      	movs	r2, #0
 8006194:	2104      	movs	r1, #4
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f956 	bl	8006448 <I2C_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e07c      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d034      	beq.n	800624c <HAL_I2C_Mem_Read+0x1d0>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d130      	bne.n	800624c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	2200      	movs	r2, #0
 80061f2:	2180      	movs	r1, #128	@ 0x80
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f927 	bl	8006448 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e04d      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2bff      	cmp	r3, #255	@ 0xff
 800620c:	d90e      	bls.n	800622c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	@ 0xff
 8006212:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	b2da      	uxtb	r2, r3
 800621a:	8979      	ldrh	r1, [r7, #10]
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fad3 	bl	80067d0 <I2C_TransferConfig>
 800622a:	e00f      	b.n	800624c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623a:	b2da      	uxtb	r2, r3
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	2300      	movs	r3, #0
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fac2 	bl	80067d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d19a      	bne.n	800618c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f994 	bl	8006588 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e01a      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2220      	movs	r2, #32
 8006270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <HAL_I2C_Mem_Read+0x230>)
 800627e:	400b      	ands	r3, r1
 8006280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e000      	b.n	80062a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800629e:	2302      	movs	r3, #2
  }
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	80002400 	.word	0x80002400
 80062ac:	fe00e800 	.word	0xfe00e800

080062b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	461a      	mov	r2, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	817b      	strh	r3, [r7, #10]
 80062c2:	460b      	mov	r3, r1
 80062c4:	813b      	strh	r3, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	8979      	ldrh	r1, [r7, #10]
 80062d0:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <I2C_RequestMemoryWrite+0xa4>)
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa79 	bl	80067d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f909 	bl	80064fa <I2C_WaitOnTXISFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e02c      	b.n	800634c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d105      	bne.n	8006304 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062f8:	893b      	ldrh	r3, [r7, #8]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	629a      	str	r2, [r3, #40]	@ 0x28
 8006302:	e015      	b.n	8006330 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006304:	893b      	ldrh	r3, [r7, #8]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	b29b      	uxth	r3, r3
 800630a:	b2da      	uxtb	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	69b9      	ldr	r1, [r7, #24]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f8ef 	bl	80064fa <I2C_WaitOnTXISFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e012      	b.n	800634c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006326:	893b      	ldrh	r3, [r7, #8]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2200      	movs	r2, #0
 8006338:	2180      	movs	r1, #128	@ 0x80
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f884 	bl	8006448 <I2C_WaitOnFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	80002000 	.word	0x80002000

08006358 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	817b      	strh	r3, [r7, #10]
 800636a:	460b      	mov	r3, r1
 800636c:	813b      	strh	r3, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	8979      	ldrh	r1, [r7, #10]
 8006378:	4b20      	ldr	r3, [pc, #128]	@ (80063fc <I2C_RequestMemoryRead+0xa4>)
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2300      	movs	r3, #0
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 fa26 	bl	80067d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f8b6 	bl	80064fa <I2C_WaitOnTXISFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e02c      	b.n	80063f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d105      	bne.n	80063aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800639e:	893b      	ldrh	r3, [r7, #8]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80063a8:	e015      	b.n	80063d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063aa:	893b      	ldrh	r3, [r7, #8]
 80063ac:	0a1b      	lsrs	r3, r3, #8
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	69b9      	ldr	r1, [r7, #24]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f89c 	bl	80064fa <I2C_WaitOnTXISFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e012      	b.n	80063f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063cc:	893b      	ldrh	r3, [r7, #8]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2200      	movs	r2, #0
 80063de:	2140      	movs	r1, #64	@ 0x40
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f831 	bl	8006448 <I2C_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	80002000 	.word	0x80002000

08006400 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b01      	cmp	r3, #1
 800642a:	d007      	beq.n	800643c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	619a      	str	r2, [r3, #24]
  }
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006458:	e03b      	b.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f8d6 	bl	8006610 <I2C_IsErrorOccurred>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e041      	b.n	80064f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006474:	d02d      	beq.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006476:	f7fd fbdb 	bl	8003c30 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d122      	bne.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d113      	bne.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e00f      	b.n	80064f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4013      	ands	r3, r2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d0b4      	beq.n	800645a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006506:	e033      	b.n	8006570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f87f 	bl	8006610 <I2C_IsErrorOccurred>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e031      	b.n	8006580 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006522:	d025      	beq.n	8006570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006524:	f7fd fb84 	bl	8003c30 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	d302      	bcc.n	800653a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d11a      	bne.n	8006570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b02      	cmp	r3, #2
 8006546:	d013      	beq.n	8006570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654c:	f043 0220 	orr.w	r2, r3, #32
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e007      	b.n	8006580 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d1c4      	bne.n	8006508 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006594:	e02f      	b.n	80065f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f838 	bl	8006610 <I2C_IsErrorOccurred>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e02d      	b.n	8006606 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fd fb41 	bl	8003c30 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11a      	bne.n	80065f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d013      	beq.n	80065f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	f043 0220 	orr.w	r2, r3, #32
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e007      	b.n	8006606 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b20      	cmp	r3, #32
 8006602:	d1c8      	bne.n	8006596 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d068      	beq.n	800670e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2210      	movs	r2, #16
 8006642:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006644:	e049      	b.n	80066da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800664c:	d045      	beq.n	80066da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800664e:	f7fd faef 	bl	8003c30 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	429a      	cmp	r2, r3
 800665c:	d302      	bcc.n	8006664 <I2C_IsErrorOccurred+0x54>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d13a      	bne.n	80066da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800666e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006676:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006686:	d121      	bne.n	80066cc <I2C_IsErrorOccurred+0xbc>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800668e:	d01d      	beq.n	80066cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	2b20      	cmp	r3, #32
 8006694:	d01a      	beq.n	80066cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066a6:	f7fd fac3 	bl	8003c30 <HAL_GetTick>
 80066aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066ac:	e00e      	b.n	80066cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066ae:	f7fd fabf 	bl	8003c30 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b19      	cmp	r3, #25
 80066ba:	d907      	bls.n	80066cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	f043 0320 	orr.w	r3, r3, #32
 80066c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80066ca:	e006      	b.n	80066da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d1e9      	bne.n	80066ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d003      	beq.n	80066f0 <I2C_IsErrorOccurred+0xe0>
 80066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0aa      	beq.n	8006646 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2220      	movs	r2, #32
 80066fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	f043 0308 	orr.w	r3, r3, #8
 8006748:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006752:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	f043 0302 	orr.w	r3, r3, #2
 800676a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006774:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800677c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01c      	beq.n	80067be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff fe3b 	bl	8006400 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b0d      	ldr	r3, [pc, #52]	@ (80067cc <I2C_IsErrorOccurred+0x1bc>)
 8006796:	400b      	ands	r3, r1
 8006798:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80067be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3728      	adds	r7, #40	@ 0x28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	fe00e800 	.word	0xfe00e800

080067d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	607b      	str	r3, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	817b      	strh	r3, [r7, #10]
 80067de:	4613      	mov	r3, r2
 80067e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067e2:	897b      	ldrh	r3, [r7, #10]
 80067e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067e8:	7a7b      	ldrb	r3, [r7, #9]
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	0d5b      	lsrs	r3, r3, #21
 800680a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800680e:	4b08      	ldr	r3, [pc, #32]	@ (8006830 <I2C_TransferConfig+0x60>)
 8006810:	430b      	orrs	r3, r1
 8006812:	43db      	mvns	r3, r3
 8006814:	ea02 0103 	and.w	r1, r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	03ff63ff 	.word	0x03ff63ff

08006834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b20      	cmp	r3, #32
 8006848:	d138      	bne.n	80068bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006854:	2302      	movs	r3, #2
 8006856:	e032      	b.n	80068be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2224      	movs	r2, #36	@ 0x24
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0201 	bic.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d139      	bne.n	8006954 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e033      	b.n	8006956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2224      	movs	r2, #36	@ 0x24
 80068fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800691c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	e000      	b.n	8006956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006954:	2302      	movs	r3, #2
  }
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0c0      	b.n	8006af6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7fd f88f 	bl	8003aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2203      	movs	r2, #3
 8006992:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f004 fdcc 	bl	800b538 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	e03e      	b.n	8006a24 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069a6:	7bfa      	ldrb	r2, [r7, #15]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	440b      	add	r3, r1
 80069b4:	3311      	adds	r3, #17
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069ba:	7bfa      	ldrb	r2, [r7, #15]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	440b      	add	r3, r1
 80069c8:	3310      	adds	r3, #16
 80069ca:	7bfa      	ldrb	r2, [r7, #15]
 80069cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069ce:	7bfa      	ldrb	r2, [r7, #15]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	440b      	add	r3, r1
 80069dc:	3313      	adds	r3, #19
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069e2:	7bfa      	ldrb	r2, [r7, #15]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	440b      	add	r3, r1
 80069f0:	3320      	adds	r3, #32
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069f6:	7bfa      	ldrb	r2, [r7, #15]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	440b      	add	r3, r1
 8006a04:	3324      	adds	r3, #36	@ 0x24
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	440b      	add	r3, r1
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	3301      	adds	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	791b      	ldrb	r3, [r3, #4]
 8006a28:	7bfa      	ldrb	r2, [r7, #15]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d3bb      	bcc.n	80069a6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
 8006a32:	e044      	b.n	8006abe <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a34:	7bfa      	ldrb	r2, [r7, #15]
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	440b      	add	r3, r1
 8006a42:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a4a:	7bfa      	ldrb	r2, [r7, #15]
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	440b      	add	r3, r1
 8006a58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a5c:	7bfa      	ldrb	r2, [r7, #15]
 8006a5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a60:	7bfa      	ldrb	r2, [r7, #15]
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	440b      	add	r3, r1
 8006a6e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a76:	7bfa      	ldrb	r2, [r7, #15]
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	440b      	add	r3, r1
 8006a84:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a8c:	7bfa      	ldrb	r2, [r7, #15]
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	440b      	add	r3, r1
 8006a9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006aa2:	7bfa      	ldrb	r2, [r7, #15]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	440b      	add	r3, r1
 8006ab0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	3301      	adds	r3, #1
 8006abc:	73fb      	strb	r3, [r7, #15]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	791b      	ldrb	r3, [r3, #4]
 8006ac2:	7bfa      	ldrb	r2, [r7, #15]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d3b5      	bcc.n	8006a34 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006ad4:	f004 fd4b 	bl	800b56e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	7a9b      	ldrb	r3, [r3, #10]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d102      	bne.n	8006af4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f805 	bl	8006afe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f043 0301 	orr.w	r3, r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f043 0302 	orr.w	r3, r3, #2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d141      	bne.n	8006be6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b62:	4b4b      	ldr	r3, [pc, #300]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b6e:	d131      	bne.n	8006bd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b70:	4b47      	ldr	r3, [pc, #284]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b76:	4a46      	ldr	r2, [pc, #280]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b80:	4b43      	ldr	r3, [pc, #268]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b88:	4a41      	ldr	r2, [pc, #260]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b90:	4b40      	ldr	r3, [pc, #256]	@ (8006c94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2232      	movs	r2, #50	@ 0x32
 8006b96:	fb02 f303 	mul.w	r3, r2, r3
 8006b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	0c9b      	lsrs	r3, r3, #18
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ba6:	e002      	b.n	8006bae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bae:	4b38      	ldr	r3, [pc, #224]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bba:	d102      	bne.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f2      	bne.n	8006ba8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bc2:	4b33      	ldr	r3, [pc, #204]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bce:	d158      	bne.n	8006c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e057      	b.n	8006c84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bda:	4a2d      	ldr	r2, [pc, #180]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006be4:	e04d      	b.n	8006c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bec:	d141      	bne.n	8006c72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bee:	4b28      	ldr	r3, [pc, #160]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfa:	d131      	bne.n	8006c60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bfc:	4b24      	ldr	r3, [pc, #144]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c02:	4a23      	ldr	r2, [pc, #140]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c0c:	4b20      	ldr	r3, [pc, #128]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c14:	4a1e      	ldr	r2, [pc, #120]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2232      	movs	r2, #50	@ 0x32
 8006c22:	fb02 f303 	mul.w	r3, r2, r3
 8006c26:	4a1c      	ldr	r2, [pc, #112]	@ (8006c98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c28:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2c:	0c9b      	lsrs	r3, r3, #18
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c32:	e002      	b.n	8006c3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c3a:	4b15      	ldr	r3, [pc, #84]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c46:	d102      	bne.n	8006c4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f2      	bne.n	8006c34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c4e:	4b10      	ldr	r3, [pc, #64]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5a:	d112      	bne.n	8006c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e011      	b.n	8006c84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c60:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c66:	4a0a      	ldr	r2, [pc, #40]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c70:	e007      	b.n	8006c82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c72:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c7a:	4a05      	ldr	r2, [pc, #20]	@ (8006c90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40007000 	.word	0x40007000
 8006c94:	2000000c 	.word	0x2000000c
 8006c98:	431bde83 	.word	0x431bde83

08006c9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ca0:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	4a04      	ldr	r2, [pc, #16]	@ (8006cb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006caa:	6093      	str	r3, [r2, #8]
}
 8006cac:	bf00      	nop
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40007000 	.word	0x40007000

08006cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e2fe      	b.n	80072cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d075      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cda:	4b97      	ldr	r3, [pc, #604]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 030c 	and.w	r3, r3, #12
 8006ce2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ce4:	4b94      	ldr	r3, [pc, #592]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b0c      	cmp	r3, #12
 8006cf2:	d102      	bne.n	8006cfa <HAL_RCC_OscConfig+0x3e>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d002      	beq.n	8006d00 <HAL_RCC_OscConfig+0x44>
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d10b      	bne.n	8006d18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d00:	4b8d      	ldr	r3, [pc, #564]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d05b      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x108>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d157      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e2d9      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d20:	d106      	bne.n	8006d30 <HAL_RCC_OscConfig+0x74>
 8006d22:	4b85      	ldr	r3, [pc, #532]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a84      	ldr	r2, [pc, #528]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	e01d      	b.n	8006d6c <HAL_RCC_OscConfig+0xb0>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d38:	d10c      	bne.n	8006d54 <HAL_RCC_OscConfig+0x98>
 8006d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	4b7c      	ldr	r3, [pc, #496]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a7b      	ldr	r2, [pc, #492]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e00b      	b.n	8006d6c <HAL_RCC_OscConfig+0xb0>
 8006d54:	4b78      	ldr	r3, [pc, #480]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a77      	ldr	r2, [pc, #476]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	4b75      	ldr	r3, [pc, #468]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a74      	ldr	r2, [pc, #464]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d013      	beq.n	8006d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d74:	f7fc ff5c 	bl	8003c30 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d7c:	f7fc ff58 	bl	8003c30 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b64      	cmp	r3, #100	@ 0x64
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e29e      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f0      	beq.n	8006d7c <HAL_RCC_OscConfig+0xc0>
 8006d9a:	e014      	b.n	8006dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9c:	f7fc ff48 	bl	8003c30 <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da4:	f7fc ff44 	bl	8003c30 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b64      	cmp	r3, #100	@ 0x64
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e28a      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006db6:	4b60      	ldr	r3, [pc, #384]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1f0      	bne.n	8006da4 <HAL_RCC_OscConfig+0xe8>
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d075      	beq.n	8006ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dd2:	4b59      	ldr	r3, [pc, #356]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 030c 	and.w	r3, r3, #12
 8006dda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ddc:	4b56      	ldr	r3, [pc, #344]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0303 	and.w	r3, r3, #3
 8006de4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2b0c      	cmp	r3, #12
 8006dea:	d102      	bne.n	8006df2 <HAL_RCC_OscConfig+0x136>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d002      	beq.n	8006df8 <HAL_RCC_OscConfig+0x13c>
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d11f      	bne.n	8006e38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006df8:	4b4f      	ldr	r3, [pc, #316]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCC_OscConfig+0x154>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e25d      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e10:	4b49      	ldr	r3, [pc, #292]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	061b      	lsls	r3, r3, #24
 8006e1e:	4946      	ldr	r1, [pc, #280]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e24:	4b45      	ldr	r3, [pc, #276]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fc feb5 	bl	8003b98 <HAL_InitTick>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d043      	beq.n	8006ebc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e249      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d023      	beq.n	8006e88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e40:	4b3d      	ldr	r3, [pc, #244]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a3c      	ldr	r2, [pc, #240]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fc fef0 	bl	8003c30 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e54:	f7fc feec 	bl	8003c30 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e232      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e66:	4b34      	ldr	r3, [pc, #208]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0f0      	beq.n	8006e54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e72:	4b31      	ldr	r3, [pc, #196]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	061b      	lsls	r3, r3, #24
 8006e80:	492d      	ldr	r1, [pc, #180]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	604b      	str	r3, [r1, #4]
 8006e86:	e01a      	b.n	8006ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e88:	4b2b      	ldr	r3, [pc, #172]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006e8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fc fecc 	bl	8003c30 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e9c:	f7fc fec8 	bl	8003c30 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e20e      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006eae:	4b22      	ldr	r3, [pc, #136]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
 8006eba:	e000      	b.n	8006ebe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ebc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d041      	beq.n	8006f4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01c      	beq.n	8006f0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed2:	4b19      	ldr	r3, [pc, #100]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ed8:	4a17      	ldr	r2, [pc, #92]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee2:	f7fc fea5 	bl	8003c30 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eea:	f7fc fea1 	bl	8003c30 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e1e7      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006efc:	4b0e      	ldr	r3, [pc, #56]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0ef      	beq.n	8006eea <HAL_RCC_OscConfig+0x22e>
 8006f0a:	e020      	b.n	8006f4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f12:	4a09      	ldr	r2, [pc, #36]	@ (8006f38 <HAL_RCC_OscConfig+0x27c>)
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1c:	f7fc fe88 	bl	8003c30 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f22:	e00d      	b.n	8006f40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f24:	f7fc fe84 	bl	8003c30 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d906      	bls.n	8006f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e1ca      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
 8006f36:	bf00      	nop
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f40:	4b8c      	ldr	r3, [pc, #560]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ea      	bne.n	8006f24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80a6 	beq.w	80070a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f60:	4b84      	ldr	r3, [pc, #528]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_RCC_OscConfig+0x2b4>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <HAL_RCC_OscConfig+0x2b6>
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f76:	4b7f      	ldr	r3, [pc, #508]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f82:	4b7c      	ldr	r3, [pc, #496]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f92:	4b79      	ldr	r3, [pc, #484]	@ (8007178 <HAL_RCC_OscConfig+0x4bc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d118      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f9e:	4b76      	ldr	r3, [pc, #472]	@ (8007178 <HAL_RCC_OscConfig+0x4bc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a75      	ldr	r2, [pc, #468]	@ (8007178 <HAL_RCC_OscConfig+0x4bc>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006faa:	f7fc fe41 	bl	8003c30 <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb2:	f7fc fe3d 	bl	8003c30 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e183      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8007178 <HAL_RCC_OscConfig+0x4bc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d108      	bne.n	8006fea <HAL_RCC_OscConfig+0x32e>
 8006fd8:	4b66      	ldr	r3, [pc, #408]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fde:	4a65      	ldr	r2, [pc, #404]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fe8:	e024      	b.n	8007034 <HAL_RCC_OscConfig+0x378>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d110      	bne.n	8007014 <HAL_RCC_OscConfig+0x358>
 8006ff2:	4b60      	ldr	r3, [pc, #384]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8006ffa:	f043 0304 	orr.w	r3, r3, #4
 8006ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007002:	4b5c      	ldr	r3, [pc, #368]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007008:	4a5a      	ldr	r2, [pc, #360]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007012:	e00f      	b.n	8007034 <HAL_RCC_OscConfig+0x378>
 8007014:	4b57      	ldr	r3, [pc, #348]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701a:	4a56      	ldr	r2, [pc, #344]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007024:	4b53      	ldr	r3, [pc, #332]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702a:	4a52      	ldr	r2, [pc, #328]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 800702c:	f023 0304 	bic.w	r3, r3, #4
 8007030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d016      	beq.n	800706a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fc fdf8 	bl	8003c30 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007042:	e00a      	b.n	800705a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fc fdf4 	bl	8003c30 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e138      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800705a:	4b46      	ldr	r3, [pc, #280]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0ed      	beq.n	8007044 <HAL_RCC_OscConfig+0x388>
 8007068:	e015      	b.n	8007096 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800706a:	f7fc fde1 	bl	8003c30 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007070:	e00a      	b.n	8007088 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007072:	f7fc fddd 	bl	8003c30 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007080:	4293      	cmp	r3, r2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e121      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007088:	4b3a      	ldr	r3, [pc, #232]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1ed      	bne.n	8007072 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007096:	7ffb      	ldrb	r3, [r7, #31]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d105      	bne.n	80070a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800709c:	4b35      	ldr	r3, [pc, #212]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 800709e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a0:	4a34      	ldr	r2, [pc, #208]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 80070a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d03c      	beq.n	800712e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01c      	beq.n	80070f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 80070be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070cc:	f7fc fdb0 	bl	8003c30 <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070d4:	f7fc fdac 	bl	8003c30 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e0f2      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070e6:	4b23      	ldr	r3, [pc, #140]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 80070e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0ef      	beq.n	80070d4 <HAL_RCC_OscConfig+0x418>
 80070f4:	e01b      	b.n	800712e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 80070f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 80070fe:	f023 0301 	bic.w	r3, r3, #1
 8007102:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007106:	f7fc fd93 	bl	8003c30 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800710e:	f7fc fd8f 	bl	8003c30 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e0d5      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007120:	4b14      	ldr	r3, [pc, #80]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8007122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1ef      	bne.n	800710e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 80c9 	beq.w	80072ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007138:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 030c 	and.w	r3, r3, #12
 8007140:	2b0c      	cmp	r3, #12
 8007142:	f000 8083 	beq.w	800724c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d15e      	bne.n	800720c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800714e:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a08      	ldr	r2, [pc, #32]	@ (8007174 <HAL_RCC_OscConfig+0x4b8>)
 8007154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715a:	f7fc fd69 	bl	8003c30 <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007160:	e00c      	b.n	800717c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007162:	f7fc fd65 	bl	8003c30 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d905      	bls.n	800717c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e0ab      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
 8007174:	40021000 	.word	0x40021000
 8007178:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800717c:	4b55      	ldr	r3, [pc, #340]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1ec      	bne.n	8007162 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007188:	4b52      	ldr	r3, [pc, #328]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	4b52      	ldr	r3, [pc, #328]	@ (80072d8 <HAL_RCC_OscConfig+0x61c>)
 800718e:	4013      	ands	r3, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6a11      	ldr	r1, [r2, #32]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007198:	3a01      	subs	r2, #1
 800719a:	0112      	lsls	r2, r2, #4
 800719c:	4311      	orrs	r1, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80071a2:	0212      	lsls	r2, r2, #8
 80071a4:	4311      	orrs	r1, r2
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071aa:	0852      	lsrs	r2, r2, #1
 80071ac:	3a01      	subs	r2, #1
 80071ae:	0552      	lsls	r2, r2, #21
 80071b0:	4311      	orrs	r1, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071b6:	0852      	lsrs	r2, r2, #1
 80071b8:	3a01      	subs	r2, #1
 80071ba:	0652      	lsls	r2, r2, #25
 80071bc:	4311      	orrs	r1, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071c2:	06d2      	lsls	r2, r2, #27
 80071c4:	430a      	orrs	r2, r1
 80071c6:	4943      	ldr	r1, [pc, #268]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071cc:	4b41      	ldr	r3, [pc, #260]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a40      	ldr	r2, [pc, #256]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 80071d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071d8:	4b3e      	ldr	r3, [pc, #248]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	4a3d      	ldr	r2, [pc, #244]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 80071de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fc fd24 	bl	8003c30 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fc fd20 	bl	8003c30 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e066      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071fe:	4b35      	ldr	r3, [pc, #212]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <HAL_RCC_OscConfig+0x530>
 800720a:	e05e      	b.n	80072ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720c:	4b31      	ldr	r3, [pc, #196]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a30      	ldr	r2, [pc, #192]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 8007212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007218:	f7fc fd0a 	bl	8003c30 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007220:	f7fc fd06 	bl	8003c30 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e04c      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007232:	4b28      	ldr	r3, [pc, #160]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1f0      	bne.n	8007220 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800723e:	4b25      	ldr	r3, [pc, #148]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	4924      	ldr	r1, [pc, #144]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 8007244:	4b25      	ldr	r3, [pc, #148]	@ (80072dc <HAL_RCC_OscConfig+0x620>)
 8007246:	4013      	ands	r3, r2
 8007248:	60cb      	str	r3, [r1, #12]
 800724a:	e03e      	b.n	80072ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e039      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007258:	4b1e      	ldr	r3, [pc, #120]	@ (80072d4 <HAL_RCC_OscConfig+0x618>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f003 0203 	and.w	r2, r3, #3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	429a      	cmp	r2, r3
 800726a:	d12c      	bne.n	80072c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	3b01      	subs	r3, #1
 8007278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800727a:	429a      	cmp	r2, r3
 800727c:	d123      	bne.n	80072c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800728a:	429a      	cmp	r2, r3
 800728c:	d11b      	bne.n	80072c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007298:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800729a:	429a      	cmp	r2, r3
 800729c:	d113      	bne.n	80072c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	3b01      	subs	r3, #1
 80072ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d109      	bne.n	80072c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	3b01      	subs	r3, #1
 80072c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d001      	beq.n	80072ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40021000 	.word	0x40021000
 80072d8:	019f800c 	.word	0x019f800c
 80072dc:	feeefffc 	.word	0xfeeefffc

080072e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e11e      	b.n	8007536 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072f8:	4b91      	ldr	r3, [pc, #580]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d910      	bls.n	8007328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007306:	4b8e      	ldr	r3, [pc, #568]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 020f 	bic.w	r2, r3, #15
 800730e:	498c      	ldr	r1, [pc, #560]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	4b8a      	ldr	r3, [pc, #552]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e106      	b.n	8007536 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d073      	beq.n	800741c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d129      	bne.n	8007390 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800733c:	4b81      	ldr	r3, [pc, #516]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0f4      	b.n	8007536 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800734c:	f000 f99c 	bl	8007688 <RCC_GetSysClockFreqFromPLLSource>
 8007350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	4a7c      	ldr	r2, [pc, #496]	@ (8007548 <HAL_RCC_ClockConfig+0x268>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d93f      	bls.n	80073da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800735a:	4b7a      	ldr	r3, [pc, #488]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800736e:	2b00      	cmp	r3, #0
 8007370:	d033      	beq.n	80073da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007376:	2b00      	cmp	r3, #0
 8007378:	d12f      	bne.n	80073da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800737a:	4b72      	ldr	r3, [pc, #456]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007382:	4a70      	ldr	r2, [pc, #448]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 8007384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007388:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800738a:	2380      	movs	r3, #128	@ 0x80
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	e024      	b.n	80073da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d107      	bne.n	80073a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007398:	4b6a      	ldr	r3, [pc, #424]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e0c6      	b.n	8007536 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073a8:	4b66      	ldr	r3, [pc, #408]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0be      	b.n	8007536 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80073b8:	f000 f8ce 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 80073bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4a61      	ldr	r2, [pc, #388]	@ (8007548 <HAL_RCC_ClockConfig+0x268>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d909      	bls.n	80073da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073ce:	4a5d      	ldr	r2, [pc, #372]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80073d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80073d6:	2380      	movs	r3, #128	@ 0x80
 80073d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073da:	4b5a      	ldr	r3, [pc, #360]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f023 0203 	bic.w	r2, r3, #3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	4957      	ldr	r1, [pc, #348]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ec:	f7fc fc20 	bl	8003c30 <HAL_GetTick>
 80073f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073f2:	e00a      	b.n	800740a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073f4:	f7fc fc1c 	bl	8003c30 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007402:	4293      	cmp	r3, r2
 8007404:	d901      	bls.n	800740a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e095      	b.n	8007536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800740a:	4b4e      	ldr	r3, [pc, #312]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 020c 	and.w	r2, r3, #12
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	429a      	cmp	r2, r3
 800741a:	d1eb      	bne.n	80073f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d023      	beq.n	8007470 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007434:	4b43      	ldr	r3, [pc, #268]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	4a42      	ldr	r2, [pc, #264]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800743a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800743e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800744c:	4b3d      	ldr	r3, [pc, #244]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007454:	4a3b      	ldr	r2, [pc, #236]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 8007456:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800745a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800745c:	4b39      	ldr	r3, [pc, #228]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4936      	ldr	r1, [pc, #216]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800746a:	4313      	orrs	r3, r2
 800746c:	608b      	str	r3, [r1, #8]
 800746e:	e008      	b.n	8007482 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b80      	cmp	r3, #128	@ 0x80
 8007474:	d105      	bne.n	8007482 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007476:	4b33      	ldr	r3, [pc, #204]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	4a32      	ldr	r2, [pc, #200]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 800747c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007480:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007482:	4b2f      	ldr	r3, [pc, #188]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d21d      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007490:	4b2b      	ldr	r3, [pc, #172]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f023 020f 	bic.w	r2, r3, #15
 8007498:	4929      	ldr	r1, [pc, #164]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	4313      	orrs	r3, r2
 800749e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074a0:	f7fc fbc6 	bl	8003c30 <HAL_GetTick>
 80074a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a6:	e00a      	b.n	80074be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074a8:	f7fc fbc2 	bl	8003c30 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e03b      	b.n	8007536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074be:	4b20      	ldr	r3, [pc, #128]	@ (8007540 <HAL_RCC_ClockConfig+0x260>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d1ed      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	4917      	ldr	r1, [pc, #92]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0308 	and.w	r3, r3, #8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074f6:	4b13      	ldr	r3, [pc, #76]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	490f      	ldr	r1, [pc, #60]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 8007506:	4313      	orrs	r3, r2
 8007508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800750a:	f000 f825 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 800750e:	4602      	mov	r2, r0
 8007510:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <HAL_RCC_ClockConfig+0x264>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	091b      	lsrs	r3, r3, #4
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	490c      	ldr	r1, [pc, #48]	@ (800754c <HAL_RCC_ClockConfig+0x26c>)
 800751c:	5ccb      	ldrb	r3, [r1, r3]
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	fa22 f303 	lsr.w	r3, r2, r3
 8007526:	4a0a      	ldr	r2, [pc, #40]	@ (8007550 <HAL_RCC_ClockConfig+0x270>)
 8007528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800752a:	4b0a      	ldr	r3, [pc, #40]	@ (8007554 <HAL_RCC_ClockConfig+0x274>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f7fc fb32 	bl	8003b98 <HAL_InitTick>
 8007534:	4603      	mov	r3, r0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	40022000 	.word	0x40022000
 8007544:	40021000 	.word	0x40021000
 8007548:	04c4b400 	.word	0x04c4b400
 800754c:	08011e2c 	.word	0x08011e2c
 8007550:	2000000c 	.word	0x2000000c
 8007554:	20000010 	.word	0x20000010

08007558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800755e:	4b2c      	ldr	r3, [pc, #176]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 030c 	and.w	r3, r3, #12
 8007566:	2b04      	cmp	r3, #4
 8007568:	d102      	bne.n	8007570 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800756a:	4b2a      	ldr	r3, [pc, #168]	@ (8007614 <HAL_RCC_GetSysClockFreq+0xbc>)
 800756c:	613b      	str	r3, [r7, #16]
 800756e:	e047      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007570:	4b27      	ldr	r3, [pc, #156]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b08      	cmp	r3, #8
 800757a:	d102      	bne.n	8007582 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800757c:	4b25      	ldr	r3, [pc, #148]	@ (8007614 <HAL_RCC_GetSysClockFreq+0xbc>)
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	e03e      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007582:	4b23      	ldr	r3, [pc, #140]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
 800758a:	2b0c      	cmp	r3, #12
 800758c:	d136      	bne.n	80075fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800758e:	4b20      	ldr	r3, [pc, #128]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007598:	4b1d      	ldr	r3, [pc, #116]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	091b      	lsrs	r3, r3, #4
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	3301      	adds	r3, #1
 80075a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d10c      	bne.n	80075c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075ac:	4a19      	ldr	r2, [pc, #100]	@ (8007614 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	4a16      	ldr	r2, [pc, #88]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075b6:	68d2      	ldr	r2, [r2, #12]
 80075b8:	0a12      	lsrs	r2, r2, #8
 80075ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075be:	fb02 f303 	mul.w	r3, r2, r3
 80075c2:	617b      	str	r3, [r7, #20]
      break;
 80075c4:	e00c      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075c6:	4a13      	ldr	r2, [pc, #76]	@ (8007614 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ce:	4a10      	ldr	r2, [pc, #64]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075d0:	68d2      	ldr	r2, [r2, #12]
 80075d2:	0a12      	lsrs	r2, r2, #8
 80075d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	617b      	str	r3, [r7, #20]
      break;
 80075de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	0e5b      	lsrs	r3, r3, #25
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	3301      	adds	r3, #1
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	e001      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007600:	693b      	ldr	r3, [r7, #16]
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	40021000 	.word	0x40021000
 8007614:	00f42400 	.word	0x00f42400

08007618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800761c:	4b03      	ldr	r3, [pc, #12]	@ (800762c <HAL_RCC_GetHCLKFreq+0x14>)
 800761e:	681b      	ldr	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	2000000c 	.word	0x2000000c

08007630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007634:	f7ff fff0 	bl	8007618 <HAL_RCC_GetHCLKFreq>
 8007638:	4602      	mov	r2, r0
 800763a:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	0a1b      	lsrs	r3, r3, #8
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	4904      	ldr	r1, [pc, #16]	@ (8007658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007646:	5ccb      	ldrb	r3, [r1, r3]
 8007648:	f003 031f 	and.w	r3, r3, #31
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007650:	4618      	mov	r0, r3
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40021000 	.word	0x40021000
 8007658:	08011e3c 	.word	0x08011e3c

0800765c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007660:	f7ff ffda 	bl	8007618 <HAL_RCC_GetHCLKFreq>
 8007664:	4602      	mov	r2, r0
 8007666:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	0adb      	lsrs	r3, r3, #11
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	4904      	ldr	r1, [pc, #16]	@ (8007684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007672:	5ccb      	ldrb	r3, [r1, r3]
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800767c:	4618      	mov	r0, r3
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40021000 	.word	0x40021000
 8007684:	08011e3c 	.word	0x08011e3c

08007688 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800768e:	4b1e      	ldr	r3, [pc, #120]	@ (8007708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007698:	4b1b      	ldr	r3, [pc, #108]	@ (8007708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	091b      	lsrs	r3, r3, #4
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d10c      	bne.n	80076c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076ac:	4a17      	ldr	r2, [pc, #92]	@ (800770c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b4:	4a14      	ldr	r2, [pc, #80]	@ (8007708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076b6:	68d2      	ldr	r2, [r2, #12]
 80076b8:	0a12      	lsrs	r2, r2, #8
 80076ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	617b      	str	r3, [r7, #20]
    break;
 80076c4:	e00c      	b.n	80076e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076c6:	4a11      	ldr	r2, [pc, #68]	@ (800770c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076d0:	68d2      	ldr	r2, [r2, #12]
 80076d2:	0a12      	lsrs	r2, r2, #8
 80076d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076d8:	fb02 f303 	mul.w	r3, r2, r3
 80076dc:	617b      	str	r3, [r7, #20]
    break;
 80076de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076e0:	4b09      	ldr	r3, [pc, #36]	@ (8007708 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	0e5b      	lsrs	r3, r3, #25
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	3301      	adds	r3, #1
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80076fa:	687b      	ldr	r3, [r7, #4]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40021000 	.word	0x40021000
 800770c:	00f42400 	.word	0x00f42400

08007710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007718:	2300      	movs	r3, #0
 800771a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800771c:	2300      	movs	r3, #0
 800771e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8098 	beq.w	800785e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800772e:	2300      	movs	r3, #0
 8007730:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007732:	4b43      	ldr	r3, [pc, #268]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10d      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800773e:	4b40      	ldr	r3, [pc, #256]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007742:	4a3f      	ldr	r2, [pc, #252]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007748:	6593      	str	r3, [r2, #88]	@ 0x58
 800774a:	4b3d      	ldr	r3, [pc, #244]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800774c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007756:	2301      	movs	r3, #1
 8007758:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800775a:	4b3a      	ldr	r3, [pc, #232]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a39      	ldr	r2, [pc, #228]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007766:	f7fc fa63 	bl	8003c30 <HAL_GetTick>
 800776a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800776c:	e009      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800776e:	f7fc fa5f 	bl	8003c30 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d902      	bls.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	74fb      	strb	r3, [r7, #19]
        break;
 8007780:	e005      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007782:	4b30      	ldr	r3, [pc, #192]	@ (8007844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0ef      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800778e:	7cfb      	ldrb	r3, [r7, #19]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d159      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007794:	4b2a      	ldr	r3, [pc, #168]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800779e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01e      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d019      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077b0:	4b23      	ldr	r3, [pc, #140]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077bc:	4b20      	ldr	r3, [pc, #128]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077dc:	4a18      	ldr	r2, [pc, #96]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d016      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ee:	f7fc fa1f 	bl	8003c30 <HAL_GetTick>
 80077f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077f4:	e00b      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f6:	f7fc fa1b 	bl	8003c30 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007804:	4293      	cmp	r3, r2
 8007806:	d902      	bls.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	74fb      	strb	r3, [r7, #19]
            break;
 800780c:	e006      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800780e:	4b0c      	ldr	r3, [pc, #48]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0ec      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800781c:	7cfb      	ldrb	r3, [r7, #19]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007822:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007830:	4903      	ldr	r1, [pc, #12]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007838:	e008      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800783a:	7cfb      	ldrb	r3, [r7, #19]
 800783c:	74bb      	strb	r3, [r7, #18]
 800783e:	e005      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007840:	40021000 	.word	0x40021000
 8007844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	7cfb      	ldrb	r3, [r7, #19]
 800784a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800784c:	7c7b      	ldrb	r3, [r7, #17]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d105      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007852:	4ba6      	ldr	r3, [pc, #664]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007856:	4aa5      	ldr	r2, [pc, #660]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800785c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800786a:	4ba0      	ldr	r3, [pc, #640]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007870:	f023 0203 	bic.w	r2, r3, #3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	499c      	ldr	r1, [pc, #624]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800787a:	4313      	orrs	r3, r2
 800787c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800788c:	4b97      	ldr	r3, [pc, #604]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800788e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007892:	f023 020c 	bic.w	r2, r3, #12
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	4994      	ldr	r1, [pc, #592]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800789c:	4313      	orrs	r3, r2
 800789e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078ae:	4b8f      	ldr	r3, [pc, #572]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	498b      	ldr	r1, [pc, #556]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078d0:	4b86      	ldr	r3, [pc, #536]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	4983      	ldr	r1, [pc, #524]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078f2:	4b7e      	ldr	r3, [pc, #504]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	497a      	ldr	r1, [pc, #488]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007902:	4313      	orrs	r3, r2
 8007904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007914:	4b75      	ldr	r3, [pc, #468]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	4972      	ldr	r1, [pc, #456]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007924:	4313      	orrs	r3, r2
 8007926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007936:	4b6d      	ldr	r3, [pc, #436]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	4969      	ldr	r1, [pc, #420]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007958:	4b64      	ldr	r3, [pc, #400]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	4961      	ldr	r1, [pc, #388]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007968:	4313      	orrs	r3, r2
 800796a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800797a:	4b5c      	ldr	r3, [pc, #368]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800797c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007980:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007988:	4958      	ldr	r1, [pc, #352]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800798a:	4313      	orrs	r3, r2
 800798c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007998:	2b00      	cmp	r3, #0
 800799a:	d015      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800799c:	4b53      	ldr	r3, [pc, #332]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800799e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079aa:	4950      	ldr	r1, [pc, #320]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ba:	d105      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079bc:	4b4b      	ldr	r3, [pc, #300]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4a4a      	ldr	r2, [pc, #296]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d015      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079d4:	4b45      	ldr	r3, [pc, #276]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e2:	4942      	ldr	r1, [pc, #264]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079f2:	d105      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079f4:	4b3d      	ldr	r3, [pc, #244]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	4a3c      	ldr	r2, [pc, #240]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d015      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a0c:	4b37      	ldr	r3, [pc, #220]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1a:	4934      	ldr	r1, [pc, #208]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a2a:	d105      	bne.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4a2e      	ldr	r2, [pc, #184]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d015      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a44:	4b29      	ldr	r3, [pc, #164]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a52:	4926      	ldr	r1, [pc, #152]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a62:	d105      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a64:	4b21      	ldr	r3, [pc, #132]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	4a20      	ldr	r2, [pc, #128]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d015      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8a:	4918      	ldr	r1, [pc, #96]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a9a:	d105      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a9c:	4b13      	ldr	r3, [pc, #76]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	4a12      	ldr	r2, [pc, #72]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d015      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ac2:	490a      	ldr	r1, [pc, #40]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad2:	d105      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ad4:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4a04      	ldr	r2, [pc, #16]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ade:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ae0:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40021000 	.word	0x40021000

08007af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e09d      	b.n	8007c3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d108      	bne.n	8007b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b12:	d009      	beq.n	8007b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	61da      	str	r2, [r3, #28]
 8007b1a:	e005      	b.n	8007b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fa ffce 	bl	8002ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b68:	d902      	bls.n	8007b70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	e002      	b.n	8007b76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b7e:	d007      	beq.n	8007b90 <HAL_SPI_Init+0xa0>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b88:	d002      	beq.n	8007b90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd2:	ea42 0103 	orr.w	r1, r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	0c1b      	lsrs	r3, r3, #16
 8007bec:	f003 0204 	and.w	r2, r3, #4
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c0c:	ea42 0103 	orr.w	r1, r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b088      	sub	sp, #32
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	603b      	str	r3, [r7, #0]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c56:	f7fb ffeb 	bl	8003c30 <HAL_GetTick>
 8007c5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d001      	beq.n	8007c70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e15c      	b.n	8007f2a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <HAL_SPI_Transmit+0x36>
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e154      	b.n	8007f2a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_SPI_Transmit+0x48>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e14d      	b.n	8007f2a <HAL_SPI_Transmit+0x2e4>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2203      	movs	r2, #3
 8007c9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	88fa      	ldrh	r2, [r7, #6]
 8007cae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce0:	d10f      	bne.n	8007d02 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b40      	cmp	r3, #64	@ 0x40
 8007d0e:	d007      	beq.n	8007d20 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d28:	d952      	bls.n	8007dd0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_Transmit+0xf2>
 8007d32:	8b7b      	ldrh	r3, [r7, #26]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d145      	bne.n	8007dc4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	881a      	ldrh	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d48:	1c9a      	adds	r2, r3, #2
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d5c:	e032      	b.n	8007dc4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d112      	bne.n	8007d92 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	881a      	ldrh	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7c:	1c9a      	adds	r2, r3, #2
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d90:	e018      	b.n	8007dc4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d92:	f7fb ff4d 	bl	8003c30 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d803      	bhi.n	8007daa <HAL_SPI_Transmit+0x164>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007da8:	d102      	bne.n	8007db0 <HAL_SPI_Transmit+0x16a>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e0b2      	b.n	8007f2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1c7      	bne.n	8007d5e <HAL_SPI_Transmit+0x118>
 8007dce:	e083      	b.n	8007ed8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_SPI_Transmit+0x198>
 8007dd8:	8b7b      	ldrh	r3, [r7, #26]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d177      	bne.n	8007ece <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d912      	bls.n	8007e0e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dec:	881a      	ldrh	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df8:	1c9a      	adds	r2, r3, #2
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b02      	subs	r3, #2
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e0c:	e05f      	b.n	8007ece <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	7812      	ldrb	r2, [r2, #0]
 8007e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e34:	e04b      	b.n	8007ece <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d12b      	bne.n	8007e9c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d912      	bls.n	8007e74 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	881a      	ldrh	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5e:	1c9a      	adds	r2, r3, #2
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b02      	subs	r3, #2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e72:	e02c      	b.n	8007ece <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e9a:	e018      	b.n	8007ece <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e9c:	f7fb fec8 	bl	8003c30 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d803      	bhi.n	8007eb4 <HAL_SPI_Transmit+0x26e>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eb2:	d102      	bne.n	8007eba <HAL_SPI_Transmit+0x274>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e02d      	b.n	8007f2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1ae      	bne.n	8007e36 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fb73 	bl	80085c8 <SPI_EndRxTxTransaction>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007f28:	2300      	movs	r3, #0
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b08a      	sub	sp, #40	@ 0x28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f40:	2301      	movs	r3, #1
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f44:	f7fb fe74 	bl	8003c30 <HAL_GetTick>
 8007f48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007f58:	887b      	ldrh	r3, [r7, #2]
 8007f5a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007f5c:	887b      	ldrh	r3, [r7, #2]
 8007f5e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f60:	7ffb      	ldrb	r3, [r7, #31]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d00c      	beq.n	8007f80 <HAL_SPI_TransmitReceive+0x4e>
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f6c:	d106      	bne.n	8007f7c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d102      	bne.n	8007f7c <HAL_SPI_TransmitReceive+0x4a>
 8007f76:	7ffb      	ldrb	r3, [r7, #31]
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d001      	beq.n	8007f80 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e1f3      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x60>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x60>
 8007f8c:	887b      	ldrh	r3, [r7, #2]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e1e8      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x72>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e1e1      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d003      	beq.n	8007fc0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2205      	movs	r2, #5
 8007fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	887a      	ldrh	r2, [r7, #2]
 8007fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	887a      	ldrh	r2, [r7, #2]
 8007fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	887a      	ldrh	r2, [r7, #2]
 8007fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	887a      	ldrh	r2, [r7, #2]
 8007fec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008002:	d802      	bhi.n	800800a <HAL_SPI_TransmitReceive+0xd8>
 8008004:	8abb      	ldrh	r3, [r7, #20]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d908      	bls.n	800801c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	e007      	b.n	800802c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008036:	2b40      	cmp	r3, #64	@ 0x40
 8008038:	d007      	beq.n	800804a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008052:	f240 8083 	bls.w	800815c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_SPI_TransmitReceive+0x132>
 800805e:	8afb      	ldrh	r3, [r7, #22]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d16f      	bne.n	8008144 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	881a      	ldrh	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008088:	e05c      	b.n	8008144 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b02      	cmp	r3, #2
 8008096:	d11b      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x19e>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d016      	beq.n	80080d0 <HAL_SPI_TransmitReceive+0x19e>
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d113      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ac:	881a      	ldrh	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	1c9a      	adds	r2, r3, #2
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d11c      	bne.n	8008118 <HAL_SPI_TransmitReceive+0x1e6>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d016      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f4:	b292      	uxth	r2, r2
 80080f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fc:	1c9a      	adds	r2, r3, #2
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008114:	2301      	movs	r3, #1
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008118:	f7fb fd8a 	bl	8003c30 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008124:	429a      	cmp	r2, r3
 8008126:	d80d      	bhi.n	8008144 <HAL_SPI_TransmitReceive+0x212>
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800812e:	d009      	beq.n	8008144 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e111      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d19d      	bne.n	800808a <HAL_SPI_TransmitReceive+0x158>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d197      	bne.n	800808a <HAL_SPI_TransmitReceive+0x158>
 800815a:	e0e5      	b.n	8008328 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_SPI_TransmitReceive+0x23a>
 8008164:	8afb      	ldrh	r3, [r7, #22]
 8008166:	2b01      	cmp	r3, #1
 8008168:	f040 80d1 	bne.w	800830e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b01      	cmp	r3, #1
 8008174:	d912      	bls.n	800819c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	881a      	ldrh	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	1c9a      	adds	r2, r3, #2
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008190:	b29b      	uxth	r3, r3
 8008192:	3b02      	subs	r3, #2
 8008194:	b29a      	uxth	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800819a:	e0b8      	b.n	800830e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081c2:	e0a4      	b.n	800830e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d134      	bne.n	800823c <HAL_SPI_TransmitReceive+0x30a>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d02f      	beq.n	800823c <HAL_SPI_TransmitReceive+0x30a>
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d12c      	bne.n	800823c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d912      	bls.n	8008212 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fc:	1c9a      	adds	r2, r3, #2
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b02      	subs	r3, #2
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008210:	e012      	b.n	8008238 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	330c      	adds	r3, #12
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b01      	cmp	r3, #1
 8008248:	d148      	bne.n	80082dc <HAL_SPI_TransmitReceive+0x3aa>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d042      	beq.n	80082dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b01      	cmp	r3, #1
 8008260:	d923      	bls.n	80082aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826c:	b292      	uxth	r2, r2
 800826e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008274:	1c9a      	adds	r2, r3, #2
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b02      	subs	r3, #2
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008292:	b29b      	uxth	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	d81f      	bhi.n	80082d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082a6:	605a      	str	r2, [r3, #4]
 80082a8:	e016      	b.n	80082d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f103 020c 	add.w	r2, r3, #12
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	7812      	ldrb	r2, [r2, #0]
 80082b8:	b2d2      	uxtb	r2, r2
 80082ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082d8:	2301      	movs	r3, #1
 80082da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082dc:	f7fb fca8 	bl	8003c30 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d803      	bhi.n	80082f4 <HAL_SPI_TransmitReceive+0x3c2>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082f2:	d102      	bne.n	80082fa <HAL_SPI_TransmitReceive+0x3c8>
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e02c      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	f47f af55 	bne.w	80081c4 <HAL_SPI_TransmitReceive+0x292>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	f47f af4e 	bne.w	80081c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008328:	6a3a      	ldr	r2, [r7, #32]
 800832a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f94b 	bl	80085c8 <SPI_EndRxTxTransaction>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d008      	beq.n	800834a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e00e      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008366:	2300      	movs	r3, #0
  }
}
 8008368:	4618      	mov	r0, r3
 800836a:	3728      	adds	r7, #40	@ 0x28
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800837e:	b2db      	uxtb	r3, r3
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	4613      	mov	r3, r2
 800839a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800839c:	f7fb fc48 	bl	8003c30 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	4413      	add	r3, r2
 80083aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083ac:	f7fb fc40 	bl	8003c30 <HAL_GetTick>
 80083b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083b2:	4b39      	ldr	r3, [pc, #228]	@ (8008498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	015b      	lsls	r3, r3, #5
 80083b8:	0d1b      	lsrs	r3, r3, #20
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	fb02 f303 	mul.w	r3, r2, r3
 80083c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083c2:	e054      	b.n	800846e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083ca:	d050      	beq.n	800846e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083cc:	f7fb fc30 	bl	8003c30 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	69fa      	ldr	r2, [r7, #28]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d902      	bls.n	80083e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d13d      	bne.n	800845e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083fa:	d111      	bne.n	8008420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008404:	d004      	beq.n	8008410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800840e:	d107      	bne.n	8008420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800841e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008428:	d10f      	bne.n	800844a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e017      	b.n	800848e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	3b01      	subs	r3, #1
 800846c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	4013      	ands	r3, r2
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	429a      	cmp	r2, r3
 800847c:	bf0c      	ite	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	2300      	movne	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	429a      	cmp	r2, r3
 800848a:	d19b      	bne.n	80083c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3720      	adds	r7, #32
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	2000000c 	.word	0x2000000c

0800849c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08a      	sub	sp, #40	@ 0x28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084ae:	f7fb fbbf 	bl	8003c30 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	4413      	add	r3, r2
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80084be:	f7fb fbb7 	bl	8003c30 <HAL_GetTick>
 80084c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	330c      	adds	r3, #12
 80084ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084cc:	4b3d      	ldr	r3, [pc, #244]	@ (80085c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	00da      	lsls	r2, r3, #3
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	0d1b      	lsrs	r3, r3, #20
 80084dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084de:	fb02 f303 	mul.w	r3, r2, r3
 80084e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80084e4:	e060      	b.n	80085a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084ec:	d107      	bne.n	80084fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008504:	d050      	beq.n	80085a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008506:	f7fb fb93 	bl	8003c30 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008512:	429a      	cmp	r2, r3
 8008514:	d902      	bls.n	800851c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	d13d      	bne.n	8008598 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800852a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008534:	d111      	bne.n	800855a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800853e:	d004      	beq.n	800854a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008548:	d107      	bne.n	800855a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008558:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008562:	d10f      	bne.n	8008584 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008582:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e010      	b.n	80085ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689a      	ldr	r2, [r3, #8]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	4013      	ands	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d196      	bne.n	80084e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3728      	adds	r7, #40	@ 0x28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	2000000c 	.word	0x2000000c

080085c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2200      	movs	r2, #0
 80085dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff ff5b 	bl	800849c <SPI_WaitFifoStateUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085f0:	f043 0220 	orr.w	r2, r3, #32
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e027      	b.n	800864c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	2180      	movs	r1, #128	@ 0x80
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff fec0 	bl	800838c <SPI_WaitFlagStateUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008616:	f043 0220 	orr.w	r2, r3, #32
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e014      	b.n	800864c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2200      	movs	r2, #0
 800862a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff ff34 	bl	800849c <SPI_WaitFifoStateUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e000      	b.n	800864c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e049      	b.n	80086fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7fa feba 	bl	80033f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 fc90 	bl	8008fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b01      	cmp	r3, #1
 8008716:	d001      	beq.n	800871c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e04a      	b.n	80087b2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a21      	ldr	r2, [pc, #132]	@ (80087c0 <HAL_TIM_Base_Start_IT+0xbc>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d018      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x6c>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008746:	d013      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x6c>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a1d      	ldr	r2, [pc, #116]	@ (80087c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00e      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x6c>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a1c      	ldr	r2, [pc, #112]	@ (80087c8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d009      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x6c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1a      	ldr	r2, [pc, #104]	@ (80087cc <HAL_TIM_Base_Start_IT+0xc8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d004      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x6c>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a19      	ldr	r2, [pc, #100]	@ (80087d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d115      	bne.n	800879c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	4b17      	ldr	r3, [pc, #92]	@ (80087d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008778:	4013      	ands	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b06      	cmp	r3, #6
 8008780:	d015      	beq.n	80087ae <HAL_TIM_Base_Start_IT+0xaa>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008788:	d011      	beq.n	80087ae <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0201 	orr.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879a:	e008      	b.n	80087ae <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 0201 	orr.w	r2, r2, #1
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	e000      	b.n	80087b0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40012c00 	.word	0x40012c00
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40013400 	.word	0x40013400
 80087d0:	40014000 	.word	0x40014000
 80087d4:	00010007 	.word	0x00010007

080087d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e049      	b.n	800887e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d106      	bne.n	8008804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f841 	bl	8008886 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3304      	adds	r3, #4
 8008814:	4619      	mov	r1, r3
 8008816:	4610      	mov	r0, r2
 8008818:	f000 fbce 	bl	8008fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d020      	beq.n	80088fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01b      	beq.n	80088fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f06f 0202 	mvn.w	r2, #2
 80088ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f003 0303 	and.w	r3, r3, #3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fb49 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 80088ea:	e005      	b.n	80088f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fb3b 	bl	8008f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fb4c 	bl	8008f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d020      	beq.n	800894a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01b      	beq.n	800894a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f06f 0204 	mvn.w	r2, #4
 800891a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fb23 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 8008936:	e005      	b.n	8008944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb15 	bl	8008f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fb26 	bl	8008f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f003 0308 	and.w	r3, r3, #8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d020      	beq.n	8008996 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01b      	beq.n	8008996 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f06f 0208 	mvn.w	r2, #8
 8008966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2204      	movs	r2, #4
 800896c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fafd 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 8008982:	e005      	b.n	8008990 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 faef 	bl	8008f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fb00 	bl	8008f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d020      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f003 0310 	and.w	r3, r3, #16
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01b      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f06f 0210 	mvn.w	r2, #16
 80089b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2208      	movs	r2, #8
 80089b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fad7 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 80089ce:	e005      	b.n	80089dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fac9 	bl	8008f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fada 	bl	8008f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00c      	beq.n	8008a06 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d007      	beq.n	8008a06 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f06f 0201 	mvn.w	r2, #1
 80089fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 faa7 	bl	8008f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 ff7c 	bl	800992c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 ff74 	bl	8009940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa94 	bl	8008fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0220 	mvn.w	r2, #32
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 ff3c 	bl	8009918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 ff48 	bl	8009954 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 ff40 	bl	8009968 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00c      	beq.n	8008b0c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 ff38 	bl	800997c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00c      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 ff30 	bl	8009990 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e0ff      	b.n	8008d56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b14      	cmp	r3, #20
 8008b62:	f200 80f0 	bhi.w	8008d46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b66:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008bc1 	.word	0x08008bc1
 8008b70:	08008d47 	.word	0x08008d47
 8008b74:	08008d47 	.word	0x08008d47
 8008b78:	08008d47 	.word	0x08008d47
 8008b7c:	08008c01 	.word	0x08008c01
 8008b80:	08008d47 	.word	0x08008d47
 8008b84:	08008d47 	.word	0x08008d47
 8008b88:	08008d47 	.word	0x08008d47
 8008b8c:	08008c43 	.word	0x08008c43
 8008b90:	08008d47 	.word	0x08008d47
 8008b94:	08008d47 	.word	0x08008d47
 8008b98:	08008d47 	.word	0x08008d47
 8008b9c:	08008c83 	.word	0x08008c83
 8008ba0:	08008d47 	.word	0x08008d47
 8008ba4:	08008d47 	.word	0x08008d47
 8008ba8:	08008d47 	.word	0x08008d47
 8008bac:	08008cc5 	.word	0x08008cc5
 8008bb0:	08008d47 	.word	0x08008d47
 8008bb4:	08008d47 	.word	0x08008d47
 8008bb8:	08008d47 	.word	0x08008d47
 8008bbc:	08008d05 	.word	0x08008d05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fa92 	bl	80090f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0208 	orr.w	r2, r2, #8
 8008bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699a      	ldr	r2, [r3, #24]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0204 	bic.w	r2, r2, #4
 8008bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6999      	ldr	r1, [r3, #24]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	691a      	ldr	r2, [r3, #16]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	619a      	str	r2, [r3, #24]
      break;
 8008bfe:	e0a5      	b.n	8008d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fb02 	bl	8009210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6999      	ldr	r1, [r3, #24]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	021a      	lsls	r2, r3, #8
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	619a      	str	r2, [r3, #24]
      break;
 8008c40:	e084      	b.n	8008d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 fb6b 	bl	8009324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0208 	orr.w	r2, r2, #8
 8008c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69da      	ldr	r2, [r3, #28]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0204 	bic.w	r2, r2, #4
 8008c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69d9      	ldr	r1, [r3, #28]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	61da      	str	r2, [r3, #28]
      break;
 8008c80:	e064      	b.n	8008d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68b9      	ldr	r1, [r7, #8]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fbd3 	bl	8009434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69da      	ldr	r2, [r3, #28]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69d9      	ldr	r1, [r3, #28]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	021a      	lsls	r2, r3, #8
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	61da      	str	r2, [r3, #28]
      break;
 8008cc2:	e043      	b.n	8008d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fc3c 	bl	8009548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0208 	orr.w	r2, r2, #8
 8008cde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0204 	bic.w	r2, r2, #4
 8008cee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	691a      	ldr	r2, [r3, #16]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d02:	e023      	b.n	8008d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fc80 	bl	8009610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	021a      	lsls	r2, r3, #8
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d44:	e002      	b.n	8008d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	75fb      	strb	r3, [r7, #23]
      break;
 8008d4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop

08008d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_TIM_ConfigClockSource+0x1c>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e0de      	b.n	8008f3a <HAL_TIM_ConfigClockSource+0x1da>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008d9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a63      	ldr	r2, [pc, #396]	@ (8008f44 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	f000 80a9 	beq.w	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008dbc:	4a61      	ldr	r2, [pc, #388]	@ (8008f44 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	f200 80ae 	bhi.w	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008dc4:	4a60      	ldr	r2, [pc, #384]	@ (8008f48 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	f000 80a1 	beq.w	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008dcc:	4a5e      	ldr	r2, [pc, #376]	@ (8008f48 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	f200 80a6 	bhi.w	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8008f4c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	f000 8099 	beq.w	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008ddc:	4a5b      	ldr	r2, [pc, #364]	@ (8008f4c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	f200 809e 	bhi.w	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008de4:	4a5a      	ldr	r2, [pc, #360]	@ (8008f50 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	f000 8091 	beq.w	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008dec:	4a58      	ldr	r2, [pc, #352]	@ (8008f50 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	f200 8096 	bhi.w	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008df4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008df8:	f000 8089 	beq.w	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008dfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008e00:	f200 808e 	bhi.w	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e08:	d03e      	beq.n	8008e88 <HAL_TIM_ConfigClockSource+0x128>
 8008e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e0e:	f200 8087 	bhi.w	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e16:	f000 8086 	beq.w	8008f26 <HAL_TIM_ConfigClockSource+0x1c6>
 8008e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e1e:	d87f      	bhi.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e20:	2b70      	cmp	r3, #112	@ 0x70
 8008e22:	d01a      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0xfa>
 8008e24:	2b70      	cmp	r3, #112	@ 0x70
 8008e26:	d87b      	bhi.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e28:	2b60      	cmp	r3, #96	@ 0x60
 8008e2a:	d050      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x16e>
 8008e2c:	2b60      	cmp	r3, #96	@ 0x60
 8008e2e:	d877      	bhi.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e30:	2b50      	cmp	r3, #80	@ 0x50
 8008e32:	d03c      	beq.n	8008eae <HAL_TIM_ConfigClockSource+0x14e>
 8008e34:	2b50      	cmp	r3, #80	@ 0x50
 8008e36:	d873      	bhi.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e38:	2b40      	cmp	r3, #64	@ 0x40
 8008e3a:	d058      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0x18e>
 8008e3c:	2b40      	cmp	r3, #64	@ 0x40
 8008e3e:	d86f      	bhi.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e40:	2b30      	cmp	r3, #48	@ 0x30
 8008e42:	d064      	beq.n	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008e44:	2b30      	cmp	r3, #48	@ 0x30
 8008e46:	d86b      	bhi.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e48:	2b20      	cmp	r3, #32
 8008e4a:	d060      	beq.n	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	d867      	bhi.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d05c      	beq.n	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008e54:	2b10      	cmp	r3, #16
 8008e56:	d05a      	beq.n	8008f0e <HAL_TIM_ConfigClockSource+0x1ae>
 8008e58:	e062      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e6a:	f000 fcb3 	bl	80097d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	609a      	str	r2, [r3, #8]
      break;
 8008e86:	e04f      	b.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e98:	f000 fc9c 	bl	80097d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008eaa:	609a      	str	r2, [r3, #8]
      break;
 8008eac:	e03c      	b.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f000 fc0e 	bl	80096dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2150      	movs	r1, #80	@ 0x50
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fc67 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 8008ecc:	e02c      	b.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008eda:	461a      	mov	r2, r3
 8008edc:	f000 fc2d 	bl	800973a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2160      	movs	r1, #96	@ 0x60
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fc57 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 8008eec:	e01c      	b.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008efa:	461a      	mov	r2, r3
 8008efc:	f000 fbee 	bl	80096dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2140      	movs	r1, #64	@ 0x40
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fc47 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 8008f0c:	e00c      	b.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f000 fc3e 	bl	800979a <TIM_ITRx_SetConfig>
      break;
 8008f1e:	e003      	b.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
      break;
 8008f24:	e000      	b.n	8008f28 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	00100070 	.word	0x00100070
 8008f48:	00100040 	.word	0x00100040
 8008f4c:	00100030 	.word	0x00100030
 8008f50:	00100020 	.word	0x00100020

08008f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a42      	ldr	r2, [pc, #264]	@ (80090d4 <TIM_Base_SetConfig+0x11c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00f      	beq.n	8008ff0 <TIM_Base_SetConfig+0x38>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fd6:	d00b      	beq.n	8008ff0 <TIM_Base_SetConfig+0x38>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a3f      	ldr	r2, [pc, #252]	@ (80090d8 <TIM_Base_SetConfig+0x120>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d007      	beq.n	8008ff0 <TIM_Base_SetConfig+0x38>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80090dc <TIM_Base_SetConfig+0x124>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <TIM_Base_SetConfig+0x38>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a3d      	ldr	r2, [pc, #244]	@ (80090e0 <TIM_Base_SetConfig+0x128>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d108      	bne.n	8009002 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a33      	ldr	r2, [pc, #204]	@ (80090d4 <TIM_Base_SetConfig+0x11c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01b      	beq.n	8009042 <TIM_Base_SetConfig+0x8a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009010:	d017      	beq.n	8009042 <TIM_Base_SetConfig+0x8a>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a30      	ldr	r2, [pc, #192]	@ (80090d8 <TIM_Base_SetConfig+0x120>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d013      	beq.n	8009042 <TIM_Base_SetConfig+0x8a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a2f      	ldr	r2, [pc, #188]	@ (80090dc <TIM_Base_SetConfig+0x124>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d00f      	beq.n	8009042 <TIM_Base_SetConfig+0x8a>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a2e      	ldr	r2, [pc, #184]	@ (80090e0 <TIM_Base_SetConfig+0x128>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00b      	beq.n	8009042 <TIM_Base_SetConfig+0x8a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a2d      	ldr	r2, [pc, #180]	@ (80090e4 <TIM_Base_SetConfig+0x12c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d007      	beq.n	8009042 <TIM_Base_SetConfig+0x8a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2c      	ldr	r2, [pc, #176]	@ (80090e8 <TIM_Base_SetConfig+0x130>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d003      	beq.n	8009042 <TIM_Base_SetConfig+0x8a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a2b      	ldr	r2, [pc, #172]	@ (80090ec <TIM_Base_SetConfig+0x134>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d108      	bne.n	8009054 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a16      	ldr	r2, [pc, #88]	@ (80090d4 <TIM_Base_SetConfig+0x11c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d00f      	beq.n	80090a0 <TIM_Base_SetConfig+0xe8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a17      	ldr	r2, [pc, #92]	@ (80090e0 <TIM_Base_SetConfig+0x128>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d00b      	beq.n	80090a0 <TIM_Base_SetConfig+0xe8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a16      	ldr	r2, [pc, #88]	@ (80090e4 <TIM_Base_SetConfig+0x12c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d007      	beq.n	80090a0 <TIM_Base_SetConfig+0xe8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a15      	ldr	r2, [pc, #84]	@ (80090e8 <TIM_Base_SetConfig+0x130>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d003      	beq.n	80090a0 <TIM_Base_SetConfig+0xe8>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a14      	ldr	r2, [pc, #80]	@ (80090ec <TIM_Base_SetConfig+0x134>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d103      	bne.n	80090a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d105      	bne.n	80090c6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f023 0201 	bic.w	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	611a      	str	r2, [r3, #16]
  }
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40012c00 	.word	0x40012c00
 80090d8:	40000400 	.word	0x40000400
 80090dc:	40000800 	.word	0x40000800
 80090e0:	40013400 	.word	0x40013400
 80090e4:	40014000 	.word	0x40014000
 80090e8:	40014400 	.word	0x40014400
 80090ec:	40014800 	.word	0x40014800

080090f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	f023 0201 	bic.w	r2, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800911e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0303 	bic.w	r3, r3, #3
 800912a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f023 0302 	bic.w	r3, r3, #2
 800913c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	4313      	orrs	r3, r2
 8009146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a2c      	ldr	r2, [pc, #176]	@ (80091fc <TIM_OC1_SetConfig+0x10c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d00f      	beq.n	8009170 <TIM_OC1_SetConfig+0x80>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a2b      	ldr	r2, [pc, #172]	@ (8009200 <TIM_OC1_SetConfig+0x110>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00b      	beq.n	8009170 <TIM_OC1_SetConfig+0x80>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a2a      	ldr	r2, [pc, #168]	@ (8009204 <TIM_OC1_SetConfig+0x114>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d007      	beq.n	8009170 <TIM_OC1_SetConfig+0x80>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a29      	ldr	r2, [pc, #164]	@ (8009208 <TIM_OC1_SetConfig+0x118>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d003      	beq.n	8009170 <TIM_OC1_SetConfig+0x80>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a28      	ldr	r2, [pc, #160]	@ (800920c <TIM_OC1_SetConfig+0x11c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10c      	bne.n	800918a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f023 0308 	bic.w	r3, r3, #8
 8009176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f023 0304 	bic.w	r3, r3, #4
 8009188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a1b      	ldr	r2, [pc, #108]	@ (80091fc <TIM_OC1_SetConfig+0x10c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00f      	beq.n	80091b2 <TIM_OC1_SetConfig+0xc2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a1a      	ldr	r2, [pc, #104]	@ (8009200 <TIM_OC1_SetConfig+0x110>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00b      	beq.n	80091b2 <TIM_OC1_SetConfig+0xc2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a19      	ldr	r2, [pc, #100]	@ (8009204 <TIM_OC1_SetConfig+0x114>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d007      	beq.n	80091b2 <TIM_OC1_SetConfig+0xc2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a18      	ldr	r2, [pc, #96]	@ (8009208 <TIM_OC1_SetConfig+0x118>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d003      	beq.n	80091b2 <TIM_OC1_SetConfig+0xc2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a17      	ldr	r2, [pc, #92]	@ (800920c <TIM_OC1_SetConfig+0x11c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d111      	bne.n	80091d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	621a      	str	r2, [r3, #32]
}
 80091f0:	bf00      	nop
 80091f2:	371c      	adds	r7, #28
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	40012c00 	.word	0x40012c00
 8009200:	40013400 	.word	0x40013400
 8009204:	40014000 	.word	0x40014000
 8009208:	40014400 	.word	0x40014400
 800920c:	40014800 	.word	0x40014800

08009210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	f023 0210 	bic.w	r2, r3, #16
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800923e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800924a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f023 0320 	bic.w	r3, r3, #32
 800925e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a28      	ldr	r2, [pc, #160]	@ (8009310 <TIM_OC2_SetConfig+0x100>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_OC2_SetConfig+0x6c>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a27      	ldr	r2, [pc, #156]	@ (8009314 <TIM_OC2_SetConfig+0x104>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d10d      	bne.n	8009298 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009296:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1d      	ldr	r2, [pc, #116]	@ (8009310 <TIM_OC2_SetConfig+0x100>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00f      	beq.n	80092c0 <TIM_OC2_SetConfig+0xb0>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009314 <TIM_OC2_SetConfig+0x104>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00b      	beq.n	80092c0 <TIM_OC2_SetConfig+0xb0>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009318 <TIM_OC2_SetConfig+0x108>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d007      	beq.n	80092c0 <TIM_OC2_SetConfig+0xb0>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a1a      	ldr	r2, [pc, #104]	@ (800931c <TIM_OC2_SetConfig+0x10c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_OC2_SetConfig+0xb0>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a19      	ldr	r2, [pc, #100]	@ (8009320 <TIM_OC2_SetConfig+0x110>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d113      	bne.n	80092e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	621a      	str	r2, [r3, #32]
}
 8009302:	bf00      	nop
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40012c00 	.word	0x40012c00
 8009314:	40013400 	.word	0x40013400
 8009318:	40014000 	.word	0x40014000
 800931c:	40014400 	.word	0x40014400
 8009320:	40014800 	.word	0x40014800

08009324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0303 	bic.w	r3, r3, #3
 800935e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4313      	orrs	r3, r2
 800937c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a27      	ldr	r2, [pc, #156]	@ (8009420 <TIM_OC3_SetConfig+0xfc>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_OC3_SetConfig+0x6a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a26      	ldr	r2, [pc, #152]	@ (8009424 <TIM_OC3_SetConfig+0x100>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d10d      	bne.n	80093aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009420 <TIM_OC3_SetConfig+0xfc>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00f      	beq.n	80093d2 <TIM_OC3_SetConfig+0xae>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009424 <TIM_OC3_SetConfig+0x100>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00b      	beq.n	80093d2 <TIM_OC3_SetConfig+0xae>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009428 <TIM_OC3_SetConfig+0x104>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d007      	beq.n	80093d2 <TIM_OC3_SetConfig+0xae>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a19      	ldr	r2, [pc, #100]	@ (800942c <TIM_OC3_SetConfig+0x108>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d003      	beq.n	80093d2 <TIM_OC3_SetConfig+0xae>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a18      	ldr	r2, [pc, #96]	@ (8009430 <TIM_OC3_SetConfig+0x10c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d113      	bne.n	80093fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80093e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	011b      	lsls	r3, r3, #4
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	621a      	str	r2, [r3, #32]
}
 8009414:	bf00      	nop
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	40012c00 	.word	0x40012c00
 8009424:	40013400 	.word	0x40013400
 8009428:	40014000 	.word	0x40014000
 800942c:	40014400 	.word	0x40014400
 8009430:	40014800 	.word	0x40014800

08009434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800946e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4313      	orrs	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	031b      	lsls	r3, r3, #12
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a28      	ldr	r2, [pc, #160]	@ (8009534 <TIM_OC4_SetConfig+0x100>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC4_SetConfig+0x6c>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a27      	ldr	r2, [pc, #156]	@ (8009538 <TIM_OC4_SetConfig+0x104>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10d      	bne.n	80094bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	031b      	lsls	r3, r3, #12
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a1d      	ldr	r2, [pc, #116]	@ (8009534 <TIM_OC4_SetConfig+0x100>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00f      	beq.n	80094e4 <TIM_OC4_SetConfig+0xb0>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009538 <TIM_OC4_SetConfig+0x104>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00b      	beq.n	80094e4 <TIM_OC4_SetConfig+0xb0>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a1b      	ldr	r2, [pc, #108]	@ (800953c <TIM_OC4_SetConfig+0x108>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d007      	beq.n	80094e4 <TIM_OC4_SetConfig+0xb0>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009540 <TIM_OC4_SetConfig+0x10c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC4_SetConfig+0xb0>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a19      	ldr	r2, [pc, #100]	@ (8009544 <TIM_OC4_SetConfig+0x110>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d113      	bne.n	800950c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	019b      	lsls	r3, r3, #6
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	019b      	lsls	r3, r3, #6
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	621a      	str	r2, [r3, #32]
}
 8009526:	bf00      	nop
 8009528:	371c      	adds	r7, #28
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	40012c00 	.word	0x40012c00
 8009538:	40013400 	.word	0x40013400
 800953c:	40014000 	.word	0x40014000
 8009540:	40014400 	.word	0x40014400
 8009544:	40014800 	.word	0x40014800

08009548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800958c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	041b      	lsls	r3, r3, #16
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	4313      	orrs	r3, r2
 8009598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a17      	ldr	r2, [pc, #92]	@ (80095fc <TIM_OC5_SetConfig+0xb4>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00f      	beq.n	80095c2 <TIM_OC5_SetConfig+0x7a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a16      	ldr	r2, [pc, #88]	@ (8009600 <TIM_OC5_SetConfig+0xb8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00b      	beq.n	80095c2 <TIM_OC5_SetConfig+0x7a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a15      	ldr	r2, [pc, #84]	@ (8009604 <TIM_OC5_SetConfig+0xbc>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d007      	beq.n	80095c2 <TIM_OC5_SetConfig+0x7a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a14      	ldr	r2, [pc, #80]	@ (8009608 <TIM_OC5_SetConfig+0xc0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d003      	beq.n	80095c2 <TIM_OC5_SetConfig+0x7a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a13      	ldr	r2, [pc, #76]	@ (800960c <TIM_OC5_SetConfig+0xc4>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d109      	bne.n	80095d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	021b      	lsls	r3, r3, #8
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	621a      	str	r2, [r3, #32]
}
 80095f0:	bf00      	nop
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	40012c00 	.word	0x40012c00
 8009600:	40013400 	.word	0x40013400
 8009604:	40014000 	.word	0x40014000
 8009608:	40014400 	.word	0x40014400
 800960c:	40014800 	.word	0x40014800

08009610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800963e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	051b      	lsls	r3, r3, #20
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a18      	ldr	r2, [pc, #96]	@ (80096c8 <TIM_OC6_SetConfig+0xb8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00f      	beq.n	800968c <TIM_OC6_SetConfig+0x7c>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a17      	ldr	r2, [pc, #92]	@ (80096cc <TIM_OC6_SetConfig+0xbc>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00b      	beq.n	800968c <TIM_OC6_SetConfig+0x7c>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a16      	ldr	r2, [pc, #88]	@ (80096d0 <TIM_OC6_SetConfig+0xc0>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d007      	beq.n	800968c <TIM_OC6_SetConfig+0x7c>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a15      	ldr	r2, [pc, #84]	@ (80096d4 <TIM_OC6_SetConfig+0xc4>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d003      	beq.n	800968c <TIM_OC6_SetConfig+0x7c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a14      	ldr	r2, [pc, #80]	@ (80096d8 <TIM_OC6_SetConfig+0xc8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d109      	bne.n	80096a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	029b      	lsls	r3, r3, #10
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	4313      	orrs	r3, r2
 800969e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	621a      	str	r2, [r3, #32]
}
 80096ba:	bf00      	nop
 80096bc:	371c      	adds	r7, #28
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	40012c00 	.word	0x40012c00
 80096cc:	40013400 	.word	0x40013400
 80096d0:	40014000 	.word	0x40014000
 80096d4:	40014400 	.word	0x40014400
 80096d8:	40014800 	.word	0x40014800

080096dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	f023 0201 	bic.w	r2, r3, #1
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	4313      	orrs	r3, r2
 8009710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f023 030a 	bic.w	r3, r3, #10
 8009718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4313      	orrs	r3, r2
 8009720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800973a:	b480      	push	{r7}
 800973c:	b087      	sub	sp, #28
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	f023 0210 	bic.w	r2, r3, #16
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	031b      	lsls	r3, r3, #12
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009776:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	4313      	orrs	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	621a      	str	r2, [r3, #32]
}
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800979a:	b480      	push	{r7}
 800979c:	b085      	sub	sp, #20
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80097b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f043 0307 	orr.w	r3, r3, #7
 80097c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	609a      	str	r2, [r3, #8]
}
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	021a      	lsls	r2, r3, #8
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	609a      	str	r2, [r3, #8]
}
 8009808:	bf00      	nop
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009828:	2302      	movs	r3, #2
 800982a:	e065      	b.n	80098f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a2c      	ldr	r2, [pc, #176]	@ (8009904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a2b      	ldr	r2, [pc, #172]	@ (8009908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d108      	bne.n	8009872 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009866:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800987c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a1b      	ldr	r2, [pc, #108]	@ (8009904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d018      	beq.n	80098cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a2:	d013      	beq.n	80098cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a18      	ldr	r2, [pc, #96]	@ (800990c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d00e      	beq.n	80098cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a17      	ldr	r2, [pc, #92]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d009      	beq.n	80098cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a12      	ldr	r2, [pc, #72]	@ (8009908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d004      	beq.n	80098cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a13      	ldr	r2, [pc, #76]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d10c      	bne.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	40012c00 	.word	0x40012c00
 8009908:	40013400 	.word	0x40013400
 800990c:	40000400 	.word	0x40000400
 8009910:	40000800 	.word	0x40000800
 8009914:	40014000 	.word	0x40014000

08009918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e042      	b.n	8009a3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7f9 fe1b 	bl	8003604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2224      	movs	r2, #36	@ 0x24
 80099d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0201 	bic.w	r2, r2, #1
 80099e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 f848 	bl	800aa84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fd79 	bl	800a4ec <UART_SetConfig>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d101      	bne.n	8009a04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e01b      	b.n	8009a3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 f8c7 	bl	800abc8 <UART_CheckIdleState>
 8009a3a:	4603      	mov	r3, r0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	@ 0x28
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	4613      	mov	r3, r2
 8009a52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d17b      	bne.n	8009b56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <HAL_UART_Transmit+0x26>
 8009a64:	88fb      	ldrh	r3, [r7, #6]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e074      	b.n	8009b58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2221      	movs	r2, #33	@ 0x21
 8009a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a7e:	f7fa f8d7 	bl	8003c30 <HAL_GetTick>
 8009a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	88fa      	ldrh	r2, [r7, #6]
 8009a88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a9c:	d108      	bne.n	8009ab0 <HAL_UART_Transmit+0x6c>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d104      	bne.n	8009ab0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	61bb      	str	r3, [r7, #24]
 8009aae:	e003      	b.n	8009ab8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ab8:	e030      	b.n	8009b1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2180      	movs	r1, #128	@ 0x80
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f001 f929 	bl	800ad1c <UART_WaitOnFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d005      	beq.n	8009adc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e03d      	b.n	8009b58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10b      	bne.n	8009afa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009af0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	3302      	adds	r3, #2
 8009af6:	61bb      	str	r3, [r7, #24]
 8009af8:	e007      	b.n	8009b0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	781a      	ldrb	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	3301      	adds	r3, #1
 8009b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1c8      	bne.n	8009aba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2140      	movs	r1, #64	@ 0x40
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f001 f8f2 	bl	800ad1c <UART_WaitOnFlagUntilTimeout>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2220      	movs	r2, #32
 8009b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e006      	b.n	8009b58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	e000      	b.n	8009b58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b56:	2302      	movs	r3, #2
  }
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08a      	sub	sp, #40	@ 0x28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	d137      	bne.n	8009be8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <HAL_UART_Receive_DMA+0x24>
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e030      	b.n	8009bea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a18      	ldr	r2, [pc, #96]	@ (8009bf4 <HAL_UART_Receive_DMA+0x94>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d01f      	beq.n	8009bd8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d018      	beq.n	8009bd8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc4:	623b      	str	r3, [r7, #32]
 8009bc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc8:	69f9      	ldr	r1, [r7, #28]
 8009bca:	6a3a      	ldr	r2, [r7, #32]
 8009bcc:	e841 2300 	strex	r3, r2, [r1]
 8009bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e6      	bne.n	8009ba6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009bd8:	88fb      	ldrh	r3, [r7, #6]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	68b9      	ldr	r1, [r7, #8]
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f001 f90a 	bl	800adf8 <UART_Start_Receive_DMA>
 8009be4:	4603      	mov	r3, r0
 8009be6:	e000      	b.n	8009bea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009be8:	2302      	movs	r3, #2
  }
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3728      	adds	r7, #40	@ 0x28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40008000 	.word	0x40008000

08009bf8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b0a0      	sub	sp, #128	@ 0x80
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c10:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8009c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c20:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009c24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e6      	bne.n	8009c00 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c44:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3308      	adds	r3, #8
 8009c54:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009c56:	657a      	str	r2, [r7, #84]	@ 0x54
 8009c58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c5e:	e841 2300 	strex	r3, r2, [r1]
 8009c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e3      	bne.n	8009c32 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d118      	bne.n	8009ca4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7a:	e853 3f00 	ldrex	r3, [r3]
 8009c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c82:	f023 0310 	bic.w	r3, r3, #16
 8009c86:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c98:	e841 2300 	strex	r3, r2, [r1]
 8009c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e6      	bne.n	8009c72 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cae:	2b80      	cmp	r3, #128	@ 0x80
 8009cb0:	d137      	bne.n	8009d22 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3308      	adds	r3, #8
 8009cd0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e5      	bne.n	8009cb2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d019      	beq.n	8009d22 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fb fc37 	bl	800556e <HAL_DMA_Abort>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00d      	beq.n	8009d22 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fb fd9e 	bl	800584c <HAL_DMA_GetError>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d105      	bne.n	8009d22 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2210      	movs	r2, #16
 8009d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e073      	b.n	8009e0a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d2c:	2b40      	cmp	r3, #64	@ 0x40
 8009d2e:	d13b      	bne.n	8009da8 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3308      	adds	r3, #8
 8009d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d50:	61ba      	str	r2, [r7, #24]
 8009d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d54:	6979      	ldr	r1, [r7, #20]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	e841 2300 	strex	r3, r2, [r1]
 8009d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e5      	bne.n	8009d30 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01c      	beq.n	8009da8 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d74:	2200      	movs	r2, #0
 8009d76:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fb fbf5 	bl	800556e <HAL_DMA_Abort>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00e      	beq.n	8009da8 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fb fd5b 	bl	800584c <HAL_DMA_GetError>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	d105      	bne.n	8009da8 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2210      	movs	r2, #16
 8009da0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e030      	b.n	8009e0a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	220f      	movs	r2, #15
 8009dbe:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dc8:	d107      	bne.n	8009dda <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699a      	ldr	r2, [r3, #24]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0210 	orr.w	r2, r2, #16
 8009dd8:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	699a      	ldr	r2, [r3, #24]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f042 0208 	orr.w	r2, r2, #8
 8009de8:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3780      	adds	r7, #128	@ 0x80
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b0ba      	sub	sp, #232	@ 0xe8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009e3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009e42:	4013      	ands	r3, r2
 8009e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11b      	bne.n	8009e88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e54:	f003 0320 	and.w	r3, r3, #32
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d015      	beq.n	8009e88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d105      	bne.n	8009e74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d009      	beq.n	8009e88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 8300 	beq.w	800a47e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	4798      	blx	r3
      }
      return;
 8009e86:	e2fa      	b.n	800a47e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 8123 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009e96:	4b8d      	ldr	r3, [pc, #564]	@ (800a0cc <HAL_UART_IRQHandler+0x2b8>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ea2:	4b8b      	ldr	r3, [pc, #556]	@ (800a0d0 <HAL_UART_IRQHandler+0x2bc>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 8116 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d011      	beq.n	8009edc <HAL_UART_IRQHandler+0xc8>
 8009eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ed2:	f043 0201 	orr.w	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d011      	beq.n	8009f0c <HAL_UART_IRQHandler+0xf8>
 8009ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f02:	f043 0204 	orr.w	r2, r3, #4
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d011      	beq.n	8009f3c <HAL_UART_IRQHandler+0x128>
 8009f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2204      	movs	r2, #4
 8009f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f32:	f043 0202 	orr.w	r2, r3, #2
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d017      	beq.n	8009f78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f58:	4b5c      	ldr	r3, [pc, #368]	@ (800a0cc <HAL_UART_IRQHandler+0x2b8>)
 8009f5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2208      	movs	r2, #8
 8009f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f6e:	f043 0208 	orr.w	r2, r3, #8
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d012      	beq.n	8009faa <HAL_UART_IRQHandler+0x196>
 8009f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00c      	beq.n	8009faa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fa0:	f043 0220 	orr.w	r2, r3, #32
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8266 	beq.w	800a482 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d013      	beq.n	8009fea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d105      	bne.n	8009fda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d007      	beq.n	8009fea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffe:	2b40      	cmp	r3, #64	@ 0x40
 800a000:	d005      	beq.n	800a00e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a006:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d054      	beq.n	800a0b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 ffd9 	bl	800afc6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a01e:	2b40      	cmp	r3, #64	@ 0x40
 800a020:	d146      	bne.n	800a0b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a038:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a03c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3308      	adds	r3, #8
 800a04a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a04e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a052:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a05a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1d9      	bne.n	800a022 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a074:	2b00      	cmp	r3, #0
 800a076:	d017      	beq.n	800a0a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a07e:	4a15      	ldr	r2, [pc, #84]	@ (800a0d4 <HAL_UART_IRQHandler+0x2c0>)
 800a080:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fb fac9 	bl	8005620 <HAL_DMA_Abort_IT>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d019      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a6:	e00f      	b.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa09 	bl	800a4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ae:	e00b      	b.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fa05 	bl	800a4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b6:	e007      	b.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fa01 	bl	800a4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a0c6:	e1dc      	b.n	800a482 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0c8:	bf00      	nop
    return;
 800a0ca:	e1da      	b.n	800a482 <HAL_UART_IRQHandler+0x66e>
 800a0cc:	10000001 	.word	0x10000001
 800a0d0:	04000120 	.word	0x04000120
 800a0d4:	0800b27d 	.word	0x0800b27d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	f040 8170 	bne.w	800a3c2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 8169 	beq.w	800a3c2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8162 	beq.w	800a3c2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2210      	movs	r2, #16
 800a104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a110:	2b40      	cmp	r3, #64	@ 0x40
 800a112:	f040 80d8 	bne.w	800a2c6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 80af 	beq.w	800a28c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a134:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a138:	429a      	cmp	r2, r3
 800a13a:	f080 80a7 	bcs.w	800a28c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a144:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	f040 8087 	bne.w	800a26a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a186:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a18a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a192:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1da      	bne.n	800a15c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1b0:	e853 3f00 	ldrex	r3, [r3]
 800a1b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1b8:	f023 0301 	bic.w	r3, r3, #1
 800a1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e1      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3308      	adds	r3, #8
 800a202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a206:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a208:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a20c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e3      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a238:	f023 0310 	bic.w	r3, r3, #16
 800a23c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a24a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a24c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a250:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e4      	bne.n	800a228 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a264:	4618      	mov	r0, r3
 800a266:	f7fb f982 	bl	800556e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2202      	movs	r2, #2
 800a26e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	b29b      	uxth	r3, r3
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f925 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a28a:	e0fc      	b.n	800a486 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a296:	429a      	cmp	r2, r3
 800a298:	f040 80f5 	bne.w	800a486 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	f040 80eb 	bne.w	800a486 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f908 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
      return;
 800a2c4:	e0df      	b.n	800a486 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 80d1 	beq.w	800a48a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a2e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80cc 	beq.w	800a48a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fa:	e853 3f00 	ldrex	r3, [r3]
 800a2fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a306:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a314:	647b      	str	r3, [r7, #68]	@ 0x44
 800a316:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a318:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a31a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a31c:	e841 2300 	strex	r3, r2, [r1]
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e4      	bne.n	800a2f2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3308      	adds	r3, #8
 800a32e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	623b      	str	r3, [r7, #32]
   return(result);
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a33e:	f023 0301 	bic.w	r3, r3, #1
 800a342:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3308      	adds	r3, #8
 800a34c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a350:	633a      	str	r2, [r7, #48]	@ 0x30
 800a352:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a358:	e841 2300 	strex	r3, r2, [r1]
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e1      	bne.n	800a328 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2220      	movs	r2, #32
 800a368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	60fb      	str	r3, [r7, #12]
   return(result);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f023 0310 	bic.w	r3, r3, #16
 800a38c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a39a:	61fb      	str	r3, [r7, #28]
 800a39c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39e:	69b9      	ldr	r1, [r7, #24]
 800a3a0:	69fa      	ldr	r2, [r7, #28]
 800a3a2:	e841 2300 	strex	r3, r2, [r1]
 800a3a6:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1e4      	bne.n	800a378 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f88a 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3c0:	e063      	b.n	800a48a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00e      	beq.n	800a3ec <HAL_UART_IRQHandler+0x5d8>
 800a3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d008      	beq.n	800a3ec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a3e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 ff86 	bl	800b2f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3ea:	e051      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d014      	beq.n	800a422 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a400:	2b00      	cmp	r3, #0
 800a402:	d105      	bne.n	800a410 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d008      	beq.n	800a422 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a414:	2b00      	cmp	r3, #0
 800a416:	d03a      	beq.n	800a48e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	4798      	blx	r3
    }
    return;
 800a420:	e035      	b.n	800a48e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <HAL_UART_IRQHandler+0x62e>
 800a42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 ff30 	bl	800b2a0 <UART_EndTransmit_IT>
    return;
 800a440:	e026      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <HAL_UART_IRQHandler+0x64e>
 800a44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a452:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 ff5f 	bl	800b31e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a460:	e016      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a466:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d010      	beq.n	800a490 <HAL_UART_IRQHandler+0x67c>
 800a46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a472:	2b00      	cmp	r3, #0
 800a474:	da0c      	bge.n	800a490 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 ff47 	bl	800b30a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a47c:	e008      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
      return;
 800a47e:	bf00      	nop
 800a480:	e006      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
    return;
 800a482:	bf00      	nop
 800a484:	e004      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
      return;
 800a486:	bf00      	nop
 800a488:	e002      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
      return;
 800a48a:	bf00      	nop
 800a48c:	e000      	b.n	800a490 <HAL_UART_IRQHandler+0x67c>
    return;
 800a48e:	bf00      	nop
  }
}
 800a490:	37e8      	adds	r7, #232	@ 0xe8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop

0800a498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4f0:	b08c      	sub	sp, #48	@ 0x30
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	431a      	orrs	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	4313      	orrs	r3, r2
 800a512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	4bab      	ldr	r3, [pc, #684]	@ (800a7c8 <UART_SetConfig+0x2dc>)
 800a51c:	4013      	ands	r3, r2
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	6812      	ldr	r2, [r2, #0]
 800a522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a524:	430b      	orrs	r3, r1
 800a526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	68da      	ldr	r2, [r3, #12]
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4aa0      	ldr	r2, [pc, #640]	@ (800a7cc <UART_SetConfig+0x2e0>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d004      	beq.n	800a558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a554:	4313      	orrs	r3, r2
 800a556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a562:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a576:	f023 010f 	bic.w	r1, r3, #15
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a91      	ldr	r2, [pc, #580]	@ (800a7d0 <UART_SetConfig+0x2e4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d125      	bne.n	800a5dc <UART_SetConfig+0xf0>
 800a590:	4b90      	ldr	r3, [pc, #576]	@ (800a7d4 <UART_SetConfig+0x2e8>)
 800a592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a596:	f003 0303 	and.w	r3, r3, #3
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d81a      	bhi.n	800a5d4 <UART_SetConfig+0xe8>
 800a59e:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a4 <UART_SetConfig+0xb8>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5b5 	.word	0x0800a5b5
 800a5a8:	0800a5c5 	.word	0x0800a5c5
 800a5ac:	0800a5bd 	.word	0x0800a5bd
 800a5b0:	0800a5cd 	.word	0x0800a5cd
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ba:	e0d6      	b.n	800a76a <UART_SetConfig+0x27e>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5c2:	e0d2      	b.n	800a76a <UART_SetConfig+0x27e>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ca:	e0ce      	b.n	800a76a <UART_SetConfig+0x27e>
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5d2:	e0ca      	b.n	800a76a <UART_SetConfig+0x27e>
 800a5d4:	2310      	movs	r3, #16
 800a5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5da:	e0c6      	b.n	800a76a <UART_SetConfig+0x27e>
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a7d      	ldr	r2, [pc, #500]	@ (800a7d8 <UART_SetConfig+0x2ec>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d138      	bne.n	800a658 <UART_SetConfig+0x16c>
 800a5e6:	4b7b      	ldr	r3, [pc, #492]	@ (800a7d4 <UART_SetConfig+0x2e8>)
 800a5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ec:	f003 030c 	and.w	r3, r3, #12
 800a5f0:	2b0c      	cmp	r3, #12
 800a5f2:	d82d      	bhi.n	800a650 <UART_SetConfig+0x164>
 800a5f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5fc <UART_SetConfig+0x110>)
 800a5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fa:	bf00      	nop
 800a5fc:	0800a631 	.word	0x0800a631
 800a600:	0800a651 	.word	0x0800a651
 800a604:	0800a651 	.word	0x0800a651
 800a608:	0800a651 	.word	0x0800a651
 800a60c:	0800a641 	.word	0x0800a641
 800a610:	0800a651 	.word	0x0800a651
 800a614:	0800a651 	.word	0x0800a651
 800a618:	0800a651 	.word	0x0800a651
 800a61c:	0800a639 	.word	0x0800a639
 800a620:	0800a651 	.word	0x0800a651
 800a624:	0800a651 	.word	0x0800a651
 800a628:	0800a651 	.word	0x0800a651
 800a62c:	0800a649 	.word	0x0800a649
 800a630:	2300      	movs	r3, #0
 800a632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a636:	e098      	b.n	800a76a <UART_SetConfig+0x27e>
 800a638:	2302      	movs	r3, #2
 800a63a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a63e:	e094      	b.n	800a76a <UART_SetConfig+0x27e>
 800a640:	2304      	movs	r3, #4
 800a642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a646:	e090      	b.n	800a76a <UART_SetConfig+0x27e>
 800a648:	2308      	movs	r3, #8
 800a64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a64e:	e08c      	b.n	800a76a <UART_SetConfig+0x27e>
 800a650:	2310      	movs	r3, #16
 800a652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a656:	e088      	b.n	800a76a <UART_SetConfig+0x27e>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a5f      	ldr	r2, [pc, #380]	@ (800a7dc <UART_SetConfig+0x2f0>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d125      	bne.n	800a6ae <UART_SetConfig+0x1c2>
 800a662:	4b5c      	ldr	r3, [pc, #368]	@ (800a7d4 <UART_SetConfig+0x2e8>)
 800a664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a668:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a66c:	2b30      	cmp	r3, #48	@ 0x30
 800a66e:	d016      	beq.n	800a69e <UART_SetConfig+0x1b2>
 800a670:	2b30      	cmp	r3, #48	@ 0x30
 800a672:	d818      	bhi.n	800a6a6 <UART_SetConfig+0x1ba>
 800a674:	2b20      	cmp	r3, #32
 800a676:	d00a      	beq.n	800a68e <UART_SetConfig+0x1a2>
 800a678:	2b20      	cmp	r3, #32
 800a67a:	d814      	bhi.n	800a6a6 <UART_SetConfig+0x1ba>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <UART_SetConfig+0x19a>
 800a680:	2b10      	cmp	r3, #16
 800a682:	d008      	beq.n	800a696 <UART_SetConfig+0x1aa>
 800a684:	e00f      	b.n	800a6a6 <UART_SetConfig+0x1ba>
 800a686:	2300      	movs	r3, #0
 800a688:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a68c:	e06d      	b.n	800a76a <UART_SetConfig+0x27e>
 800a68e:	2302      	movs	r3, #2
 800a690:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a694:	e069      	b.n	800a76a <UART_SetConfig+0x27e>
 800a696:	2304      	movs	r3, #4
 800a698:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a69c:	e065      	b.n	800a76a <UART_SetConfig+0x27e>
 800a69e:	2308      	movs	r3, #8
 800a6a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6a4:	e061      	b.n	800a76a <UART_SetConfig+0x27e>
 800a6a6:	2310      	movs	r3, #16
 800a6a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ac:	e05d      	b.n	800a76a <UART_SetConfig+0x27e>
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a4b      	ldr	r2, [pc, #300]	@ (800a7e0 <UART_SetConfig+0x2f4>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d125      	bne.n	800a704 <UART_SetConfig+0x218>
 800a6b8:	4b46      	ldr	r3, [pc, #280]	@ (800a7d4 <UART_SetConfig+0x2e8>)
 800a6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a6c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6c4:	d016      	beq.n	800a6f4 <UART_SetConfig+0x208>
 800a6c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6c8:	d818      	bhi.n	800a6fc <UART_SetConfig+0x210>
 800a6ca:	2b80      	cmp	r3, #128	@ 0x80
 800a6cc:	d00a      	beq.n	800a6e4 <UART_SetConfig+0x1f8>
 800a6ce:	2b80      	cmp	r3, #128	@ 0x80
 800a6d0:	d814      	bhi.n	800a6fc <UART_SetConfig+0x210>
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <UART_SetConfig+0x1f0>
 800a6d6:	2b40      	cmp	r3, #64	@ 0x40
 800a6d8:	d008      	beq.n	800a6ec <UART_SetConfig+0x200>
 800a6da:	e00f      	b.n	800a6fc <UART_SetConfig+0x210>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e2:	e042      	b.n	800a76a <UART_SetConfig+0x27e>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ea:	e03e      	b.n	800a76a <UART_SetConfig+0x27e>
 800a6ec:	2304      	movs	r3, #4
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6f2:	e03a      	b.n	800a76a <UART_SetConfig+0x27e>
 800a6f4:	2308      	movs	r3, #8
 800a6f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6fa:	e036      	b.n	800a76a <UART_SetConfig+0x27e>
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a702:	e032      	b.n	800a76a <UART_SetConfig+0x27e>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a30      	ldr	r2, [pc, #192]	@ (800a7cc <UART_SetConfig+0x2e0>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d12a      	bne.n	800a764 <UART_SetConfig+0x278>
 800a70e:	4b31      	ldr	r3, [pc, #196]	@ (800a7d4 <UART_SetConfig+0x2e8>)
 800a710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a714:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a718:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a71c:	d01a      	beq.n	800a754 <UART_SetConfig+0x268>
 800a71e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a722:	d81b      	bhi.n	800a75c <UART_SetConfig+0x270>
 800a724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a728:	d00c      	beq.n	800a744 <UART_SetConfig+0x258>
 800a72a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a72e:	d815      	bhi.n	800a75c <UART_SetConfig+0x270>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <UART_SetConfig+0x250>
 800a734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a738:	d008      	beq.n	800a74c <UART_SetConfig+0x260>
 800a73a:	e00f      	b.n	800a75c <UART_SetConfig+0x270>
 800a73c:	2300      	movs	r3, #0
 800a73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a742:	e012      	b.n	800a76a <UART_SetConfig+0x27e>
 800a744:	2302      	movs	r3, #2
 800a746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a74a:	e00e      	b.n	800a76a <UART_SetConfig+0x27e>
 800a74c:	2304      	movs	r3, #4
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a752:	e00a      	b.n	800a76a <UART_SetConfig+0x27e>
 800a754:	2308      	movs	r3, #8
 800a756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a75a:	e006      	b.n	800a76a <UART_SetConfig+0x27e>
 800a75c:	2310      	movs	r3, #16
 800a75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a762:	e002      	b.n	800a76a <UART_SetConfig+0x27e>
 800a764:	2310      	movs	r3, #16
 800a766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a17      	ldr	r2, [pc, #92]	@ (800a7cc <UART_SetConfig+0x2e0>)
 800a770:	4293      	cmp	r3, r2
 800a772:	f040 80a8 	bne.w	800a8c6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a776:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	d834      	bhi.n	800a7e8 <UART_SetConfig+0x2fc>
 800a77e:	a201      	add	r2, pc, #4	@ (adr r2, 800a784 <UART_SetConfig+0x298>)
 800a780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7e9 	.word	0x0800a7e9
 800a78c:	0800a7b1 	.word	0x0800a7b1
 800a790:	0800a7e9 	.word	0x0800a7e9
 800a794:	0800a7b7 	.word	0x0800a7b7
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a7e9 	.word	0x0800a7e9
 800a7a0:	0800a7e9 	.word	0x0800a7e9
 800a7a4:	0800a7bf 	.word	0x0800a7bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7a8:	f7fc ff42 	bl	8007630 <HAL_RCC_GetPCLK1Freq>
 800a7ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7ae:	e021      	b.n	800a7f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <UART_SetConfig+0x2f8>)
 800a7b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7b4:	e01e      	b.n	800a7f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7b6:	f7fc fecf 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 800a7ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7bc:	e01a      	b.n	800a7f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7c4:	e016      	b.n	800a7f4 <UART_SetConfig+0x308>
 800a7c6:	bf00      	nop
 800a7c8:	cfff69f3 	.word	0xcfff69f3
 800a7cc:	40008000 	.word	0x40008000
 800a7d0:	40013800 	.word	0x40013800
 800a7d4:	40021000 	.word	0x40021000
 800a7d8:	40004400 	.word	0x40004400
 800a7dc:	40004800 	.word	0x40004800
 800a7e0:	40004c00 	.word	0x40004c00
 800a7e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a7f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 812a 	beq.w	800aa50 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a800:	4a9e      	ldr	r2, [pc, #632]	@ (800aa7c <UART_SetConfig+0x590>)
 800a802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a806:	461a      	mov	r2, r3
 800a808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a80e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	4613      	mov	r3, r2
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	4413      	add	r3, r2
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d305      	bcc.n	800a82c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d903      	bls.n	800a834 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a832:	e10d      	b.n	800aa50 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a836:	2200      	movs	r2, #0
 800a838:	60bb      	str	r3, [r7, #8]
 800a83a:	60fa      	str	r2, [r7, #12]
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a840:	4a8e      	ldr	r2, [pc, #568]	@ (800aa7c <UART_SetConfig+0x590>)
 800a842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a846:	b29b      	uxth	r3, r3
 800a848:	2200      	movs	r2, #0
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	607a      	str	r2, [r7, #4]
 800a84e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a856:	f7f6 fa3f 	bl	8000cd8 <__aeabi_uldivmod>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4610      	mov	r0, r2
 800a860:	4619      	mov	r1, r3
 800a862:	f04f 0200 	mov.w	r2, #0
 800a866:	f04f 0300 	mov.w	r3, #0
 800a86a:	020b      	lsls	r3, r1, #8
 800a86c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a870:	0202      	lsls	r2, r0, #8
 800a872:	6979      	ldr	r1, [r7, #20]
 800a874:	6849      	ldr	r1, [r1, #4]
 800a876:	0849      	lsrs	r1, r1, #1
 800a878:	2000      	movs	r0, #0
 800a87a:	460c      	mov	r4, r1
 800a87c:	4605      	mov	r5, r0
 800a87e:	eb12 0804 	adds.w	r8, r2, r4
 800a882:	eb43 0905 	adc.w	r9, r3, r5
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	469a      	mov	sl, r3
 800a88e:	4693      	mov	fp, r2
 800a890:	4652      	mov	r2, sl
 800a892:	465b      	mov	r3, fp
 800a894:	4640      	mov	r0, r8
 800a896:	4649      	mov	r1, r9
 800a898:	f7f6 fa1e 	bl	8000cd8 <__aeabi_uldivmod>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8aa:	d308      	bcc.n	800a8be <UART_SetConfig+0x3d2>
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8b2:	d204      	bcs.n	800a8be <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6a3a      	ldr	r2, [r7, #32]
 800a8ba:	60da      	str	r2, [r3, #12]
 800a8bc:	e0c8      	b.n	800aa50 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8c4:	e0c4      	b.n	800aa50 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8ce:	d167      	bne.n	800a9a0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a8d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d828      	bhi.n	800a92a <UART_SetConfig+0x43e>
 800a8d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e0 <UART_SetConfig+0x3f4>)
 800a8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8de:	bf00      	nop
 800a8e0:	0800a905 	.word	0x0800a905
 800a8e4:	0800a90d 	.word	0x0800a90d
 800a8e8:	0800a915 	.word	0x0800a915
 800a8ec:	0800a92b 	.word	0x0800a92b
 800a8f0:	0800a91b 	.word	0x0800a91b
 800a8f4:	0800a92b 	.word	0x0800a92b
 800a8f8:	0800a92b 	.word	0x0800a92b
 800a8fc:	0800a92b 	.word	0x0800a92b
 800a900:	0800a923 	.word	0x0800a923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a904:	f7fc fe94 	bl	8007630 <HAL_RCC_GetPCLK1Freq>
 800a908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a90a:	e014      	b.n	800a936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a90c:	f7fc fea6 	bl	800765c <HAL_RCC_GetPCLK2Freq>
 800a910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a912:	e010      	b.n	800a936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a914:	4b5a      	ldr	r3, [pc, #360]	@ (800aa80 <UART_SetConfig+0x594>)
 800a916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a918:	e00d      	b.n	800a936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a91a:	f7fc fe1d 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 800a91e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a920:	e009      	b.n	800a936 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a928:	e005      	b.n	800a936 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 8089 	beq.w	800aa50 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	4a4e      	ldr	r2, [pc, #312]	@ (800aa7c <UART_SetConfig+0x590>)
 800a944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a948:	461a      	mov	r2, r3
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a950:	005a      	lsls	r2, r3, #1
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	085b      	lsrs	r3, r3, #1
 800a958:	441a      	add	r2, r3
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	2b0f      	cmp	r3, #15
 800a968:	d916      	bls.n	800a998 <UART_SetConfig+0x4ac>
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a970:	d212      	bcs.n	800a998 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	b29b      	uxth	r3, r3
 800a976:	f023 030f 	bic.w	r3, r3, #15
 800a97a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	085b      	lsrs	r3, r3, #1
 800a980:	b29b      	uxth	r3, r3
 800a982:	f003 0307 	and.w	r3, r3, #7
 800a986:	b29a      	uxth	r2, r3
 800a988:	8bfb      	ldrh	r3, [r7, #30]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	8bfa      	ldrh	r2, [r7, #30]
 800a994:	60da      	str	r2, [r3, #12]
 800a996:	e05b      	b.n	800aa50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a99e:	e057      	b.n	800aa50 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9a4:	2b08      	cmp	r3, #8
 800a9a6:	d828      	bhi.n	800a9fa <UART_SetConfig+0x50e>
 800a9a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b0 <UART_SetConfig+0x4c4>)
 800a9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ae:	bf00      	nop
 800a9b0:	0800a9d5 	.word	0x0800a9d5
 800a9b4:	0800a9dd 	.word	0x0800a9dd
 800a9b8:	0800a9e5 	.word	0x0800a9e5
 800a9bc:	0800a9fb 	.word	0x0800a9fb
 800a9c0:	0800a9eb 	.word	0x0800a9eb
 800a9c4:	0800a9fb 	.word	0x0800a9fb
 800a9c8:	0800a9fb 	.word	0x0800a9fb
 800a9cc:	0800a9fb 	.word	0x0800a9fb
 800a9d0:	0800a9f3 	.word	0x0800a9f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9d4:	f7fc fe2c 	bl	8007630 <HAL_RCC_GetPCLK1Freq>
 800a9d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9da:	e014      	b.n	800aa06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9dc:	f7fc fe3e 	bl	800765c <HAL_RCC_GetPCLK2Freq>
 800a9e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9e2:	e010      	b.n	800aa06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9e4:	4b26      	ldr	r3, [pc, #152]	@ (800aa80 <UART_SetConfig+0x594>)
 800a9e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9e8:	e00d      	b.n	800aa06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9ea:	f7fc fdb5 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 800a9ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9f0:	e009      	b.n	800aa06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9f8:	e005      	b.n	800aa06 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa04:	bf00      	nop
    }

    if (pclk != 0U)
 800aa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d021      	beq.n	800aa50 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa10:	4a1a      	ldr	r2, [pc, #104]	@ (800aa7c <UART_SetConfig+0x590>)
 800aa12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa16:	461a      	mov	r2, r3
 800aa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1a:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	085b      	lsrs	r3, r3, #1
 800aa24:	441a      	add	r2, r3
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	2b0f      	cmp	r3, #15
 800aa34:	d909      	bls.n	800aa4a <UART_SetConfig+0x55e>
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa3c:	d205      	bcs.n	800aa4a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	60da      	str	r2, [r3, #12]
 800aa48:	e002      	b.n	800aa50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2200      	movs	r2, #0
 800aa64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3730      	adds	r7, #48	@ 0x30
 800aa74:	46bd      	mov	sp, r7
 800aa76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa7a:	bf00      	nop
 800aa7c:	08011e44 	.word	0x08011e44
 800aa80:	00f42400 	.word	0x00f42400

0800aa84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa90:	f003 0308 	and.w	r3, r3, #8
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00a      	beq.n	800aaae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf6:	f003 0304 	and.w	r3, r3, #4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00a      	beq.n	800ab36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d01a      	beq.n	800ab9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab82:	d10a      	bne.n	800ab9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	605a      	str	r2, [r3, #4]
  }
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b098      	sub	sp, #96	@ 0x60
 800abcc:	af02      	add	r7, sp, #8
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abd8:	f7f9 f82a 	bl	8003c30 <HAL_GetTick>
 800abdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0308 	and.w	r3, r3, #8
 800abe8:	2b08      	cmp	r3, #8
 800abea:	d12f      	bne.n	800ac4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf4:	2200      	movs	r2, #0
 800abf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f88e 	bl	800ad1c <UART_WaitOnFlagUntilTimeout>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d022      	beq.n	800ac4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac1a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	461a      	mov	r2, r3
 800ac22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac24:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac2c:	e841 2300 	strex	r3, r2, [r1]
 800ac30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e6      	bne.n	800ac06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e063      	b.n	800ad14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0304 	and.w	r3, r3, #4
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d149      	bne.n	800acee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac62:	2200      	movs	r2, #0
 800ac64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f857 	bl	800ad1c <UART_WaitOnFlagUntilTimeout>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d03c      	beq.n	800acee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	623b      	str	r3, [r7, #32]
   return(result);
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac92:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e6      	bne.n	800ac74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f023 0301 	bic.w	r3, r3, #1
 800acbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acc6:	61fa      	str	r2, [r7, #28]
 800acc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	69b9      	ldr	r1, [r7, #24]
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	617b      	str	r3, [r7, #20]
   return(result);
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e5      	bne.n	800aca6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2220      	movs	r2, #32
 800acde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e012      	b.n	800ad14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3758      	adds	r7, #88	@ 0x58
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	603b      	str	r3, [r7, #0]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad2c:	e04f      	b.n	800adce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad34:	d04b      	beq.n	800adce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad36:	f7f8 ff7b 	bl	8003c30 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d302      	bcc.n	800ad4c <UART_WaitOnFlagUntilTimeout+0x30>
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e04e      	b.n	800adee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d037      	beq.n	800adce <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b80      	cmp	r3, #128	@ 0x80
 800ad62:	d034      	beq.n	800adce <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2b40      	cmp	r3, #64	@ 0x40
 800ad68:	d031      	beq.n	800adce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	f003 0308 	and.w	r3, r3, #8
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d110      	bne.n	800ad9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2208      	movs	r2, #8
 800ad7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f920 	bl	800afc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2208      	movs	r2, #8
 800ad8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e029      	b.n	800adee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ada4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada8:	d111      	bne.n	800adce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800adb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 f906 	bl	800afc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2220      	movs	r2, #32
 800adbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e00f      	b.n	800adee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	69da      	ldr	r2, [r3, #28]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4013      	ands	r3, r2
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	429a      	cmp	r2, r3
 800addc:	bf0c      	ite	eq
 800adde:	2301      	moveq	r3, #1
 800ade0:	2300      	movne	r3, #0
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	461a      	mov	r2, r3
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d0a0      	beq.n	800ad2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
	...

0800adf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b096      	sub	sp, #88	@ 0x58
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	4613      	mov	r3, r2
 800ae04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	88fa      	ldrh	r2, [r7, #6]
 800ae10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2222      	movs	r2, #34	@ 0x22
 800ae20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d02d      	beq.n	800ae8a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae34:	4a40      	ldr	r2, [pc, #256]	@ (800af38 <UART_Start_Receive_DMA+0x140>)
 800ae36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae3e:	4a3f      	ldr	r2, [pc, #252]	@ (800af3c <UART_Start_Receive_DMA+0x144>)
 800ae40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae48:	4a3d      	ldr	r2, [pc, #244]	@ (800af40 <UART_Start_Receive_DMA+0x148>)
 800ae4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae52:	2200      	movs	r2, #0
 800ae54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3324      	adds	r3, #36	@ 0x24
 800ae62:	4619      	mov	r1, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae68:	461a      	mov	r2, r3
 800ae6a:	88fb      	ldrh	r3, [r7, #6]
 800ae6c:	f7fa fb04 	bl	8005478 <HAL_DMA_Start_IT>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2210      	movs	r2, #16
 800ae7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2220      	movs	r2, #32
 800ae82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e051      	b.n	800af2e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d018      	beq.n	800aec4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae9a:	e853 3f00 	ldrex	r3, [r3]
 800ae9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aea6:	657b      	str	r3, [r7, #84]	@ 0x54
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	461a      	mov	r2, r3
 800aeae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeb2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aeb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeb8:	e841 2300 	strex	r3, r2, [r1]
 800aebc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e6      	bne.n	800ae92 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3308      	adds	r3, #8
 800aeca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aece:	e853 3f00 	ldrex	r3, [r3]
 800aed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	653b      	str	r3, [r7, #80]	@ 0x50
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3308      	adds	r3, #8
 800aee2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aee4:	637a      	str	r2, [r7, #52]	@ 0x34
 800aee6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aeea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aeec:	e841 2300 	strex	r3, r2, [r1]
 800aef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e5      	bne.n	800aec4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3308      	adds	r3, #8
 800aefe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	e853 3f00 	ldrex	r3, [r3]
 800af06:	613b      	str	r3, [r7, #16]
   return(result);
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3308      	adds	r3, #8
 800af16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af18:	623a      	str	r2, [r7, #32]
 800af1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1c:	69f9      	ldr	r1, [r7, #28]
 800af1e:	6a3a      	ldr	r2, [r7, #32]
 800af20:	e841 2300 	strex	r3, r2, [r1]
 800af24:	61bb      	str	r3, [r7, #24]
   return(result);
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1e5      	bne.n	800aef8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3758      	adds	r7, #88	@ 0x58
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	0800b093 	.word	0x0800b093
 800af3c:	0800b1bf 	.word	0x0800b1bf
 800af40:	0800b1fd 	.word	0x0800b1fd

0800af44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af44:	b480      	push	{r7}
 800af46:	b08f      	sub	sp, #60	@ 0x3c
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	61fb      	str	r3, [r7, #28]
   return(result);
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800af60:	637b      	str	r3, [r7, #52]	@ 0x34
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af6c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e6      	bne.n	800af4c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3308      	adds	r3, #8
 800af84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	e853 3f00 	ldrex	r3, [r3]
 800af8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800af94:	633b      	str	r3, [r7, #48]	@ 0x30
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3308      	adds	r3, #8
 800af9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af9e:	61ba      	str	r2, [r7, #24]
 800afa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	6979      	ldr	r1, [r7, #20]
 800afa4:	69ba      	ldr	r2, [r7, #24]
 800afa6:	e841 2300 	strex	r3, r2, [r1]
 800afaa:	613b      	str	r3, [r7, #16]
   return(result);
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1e5      	bne.n	800af7e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800afba:	bf00      	nop
 800afbc:	373c      	adds	r7, #60	@ 0x3c
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b095      	sub	sp, #84	@ 0x54
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd6:	e853 3f00 	ldrex	r3, [r3]
 800afda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800afdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afec:	643b      	str	r3, [r7, #64]	@ 0x40
 800afee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aff4:	e841 2300 	strex	r3, r2, [r1]
 800aff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800affa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e6      	bne.n	800afce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3308      	adds	r3, #8
 800b006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	e853 3f00 	ldrex	r3, [r3]
 800b00e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b016:	f023 0301 	bic.w	r3, r3, #1
 800b01a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3308      	adds	r3, #8
 800b022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b02a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e3      	bne.n	800b000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d118      	bne.n	800b072 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f023 0310 	bic.w	r3, r3, #16
 800b054:	647b      	str	r3, [r7, #68]	@ 0x44
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b05e:	61bb      	str	r3, [r7, #24]
 800b060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	6979      	ldr	r1, [r7, #20]
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	613b      	str	r3, [r7, #16]
   return(result);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e6      	bne.n	800b040 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b086:	bf00      	nop
 800b088:	3754      	adds	r7, #84	@ 0x54
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b09c      	sub	sp, #112	@ 0x70
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d171      	bne.n	800b192 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b0ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e6      	bne.n	800b0b6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fa:	f023 0301 	bic.w	r3, r3, #1
 800b0fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800b100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3308      	adds	r3, #8
 800b106:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b108:	647a      	str	r2, [r7, #68]	@ 0x44
 800b10a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b10e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e5      	bne.n	800b0e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b11c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	623b      	str	r3, [r7, #32]
   return(result);
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b132:	663b      	str	r3, [r7, #96]	@ 0x60
 800b134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3308      	adds	r3, #8
 800b13a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b13c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e5      	bne.n	800b11c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b152:	2220      	movs	r2, #32
 800b154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b15a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d118      	bne.n	800b192 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f023 0310 	bic.w	r3, r3, #16
 800b174:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b17e:	61fb      	str	r3, [r7, #28]
 800b180:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	69b9      	ldr	r1, [r7, #24]
 800b184:	69fa      	ldr	r2, [r7, #28]
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	617b      	str	r3, [r7, #20]
   return(result);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e6      	bne.n	800b160 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b194:	2200      	movs	r2, #0
 800b196:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d107      	bne.n	800b1b0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1aa:	f7ff f993 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1ae:	e002      	b.n	800b1b6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b1b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1b2:	f7f8 fb75 	bl	80038a0 <HAL_UART_RxCpltCallback>
}
 800b1b6:	bf00      	nop
 800b1b8:	3770      	adds	r7, #112	@ 0x70
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d109      	bne.n	800b1ee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1e0:	085b      	lsrs	r3, r3, #1
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7ff f974 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1ec:	e002      	b.n	800b1f4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff f95c 	bl	800a4ac <HAL_UART_RxHalfCpltCallback>
}
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b208:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b210:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b218:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b224:	2b80      	cmp	r3, #128	@ 0x80
 800b226:	d109      	bne.n	800b23c <UART_DMAError+0x40>
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b21      	cmp	r3, #33	@ 0x21
 800b22c:	d106      	bne.n	800b23c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2200      	movs	r2, #0
 800b232:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b236:	6978      	ldr	r0, [r7, #20]
 800b238:	f7ff fe84 	bl	800af44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b246:	2b40      	cmp	r3, #64	@ 0x40
 800b248:	d109      	bne.n	800b25e <UART_DMAError+0x62>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b22      	cmp	r3, #34	@ 0x22
 800b24e:	d106      	bne.n	800b25e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	2200      	movs	r2, #0
 800b254:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b258:	6978      	ldr	r0, [r7, #20]
 800b25a:	f7ff feb4 	bl	800afc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b264:	f043 0210 	orr.w	r2, r3, #16
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b26e:	6978      	ldr	r0, [r7, #20]
 800b270:	f7ff f926 	bl	800a4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b274:	bf00      	nop
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b288:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7ff f914 	bl	800a4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b298:	bf00      	nop
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2bc:	61fb      	str	r3, [r7, #28]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	61bb      	str	r3, [r7, #24]
 800b2c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6979      	ldr	r1, [r7, #20]
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e6      	bne.n	800b2a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff f8d5 	bl	800a498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ee:	bf00      	nop
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b312:	bf00      	nop
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b31e:	b480      	push	{r7}
 800b320:	b083      	sub	sp, #12
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b332:	b480      	push	{r7}
 800b334:	b085      	sub	sp, #20
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_UARTEx_DisableFifoMode+0x16>
 800b344:	2302      	movs	r3, #2
 800b346:	e027      	b.n	800b398 <HAL_UARTEx_DisableFifoMode+0x66>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2224      	movs	r2, #36	@ 0x24
 800b354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 0201 	bic.w	r2, r2, #1
 800b36e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b376:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2220      	movs	r2, #32
 800b38a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e02d      	b.n	800b418 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2224      	movs	r2, #36	@ 0x24
 800b3c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0201 	bic.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f84f 	bl	800b49c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2220      	movs	r2, #32
 800b40a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b434:	2302      	movs	r3, #2
 800b436:	e02d      	b.n	800b494 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2224      	movs	r2, #36	@ 0x24
 800b444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f022 0201 	bic.w	r2, r2, #1
 800b45e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f811 	bl	800b49c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2220      	movs	r2, #32
 800b486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d108      	bne.n	800b4be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4bc:	e031      	b.n	800b522 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4be:	2308      	movs	r3, #8
 800b4c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4c2:	2308      	movs	r3, #8
 800b4c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	0e5b      	lsrs	r3, r3, #25
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	0f5b      	lsrs	r3, r3, #29
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	7b3a      	ldrb	r2, [r7, #12]
 800b4ea:	4911      	ldr	r1, [pc, #68]	@ (800b530 <UARTEx_SetNbDataToProcess+0x94>)
 800b4ec:	5c8a      	ldrb	r2, [r1, r2]
 800b4ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4f2:	7b3a      	ldrb	r2, [r7, #12]
 800b4f4:	490f      	ldr	r1, [pc, #60]	@ (800b534 <UARTEx_SetNbDataToProcess+0x98>)
 800b4f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b504:	7bfb      	ldrb	r3, [r7, #15]
 800b506:	7b7a      	ldrb	r2, [r7, #13]
 800b508:	4909      	ldr	r1, [pc, #36]	@ (800b530 <UARTEx_SetNbDataToProcess+0x94>)
 800b50a:	5c8a      	ldrb	r2, [r1, r2]
 800b50c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b510:	7b7a      	ldrb	r2, [r7, #13]
 800b512:	4908      	ldr	r1, [pc, #32]	@ (800b534 <UARTEx_SetNbDataToProcess+0x98>)
 800b514:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b516:	fb93 f3f2 	sdiv	r3, r3, r2
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b522:	bf00      	nop
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	08011e5c 	.word	0x08011e5c
 800b534:	08011e64 	.word	0x08011e64

0800b538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b540:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b544:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	b29b      	uxth	r3, r3
 800b552:	43db      	mvns	r3, r3
 800b554:	b29b      	uxth	r3, r3
 800b556:	4013      	ands	r3, r2
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b56e:	b480      	push	{r7}
 800b570:	b085      	sub	sp, #20
 800b572:	af00      	add	r7, sp, #0
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	1d3b      	adds	r3, r7, #4
 800b578:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2201      	movs	r2, #1
 800b580:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
	...

0800b5ac <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800b5b0:	4907      	ldr	r1, [pc, #28]	@ (800b5d0 <MX_FATFS_Init+0x24>)
 800b5b2:	4808      	ldr	r0, [pc, #32]	@ (800b5d4 <MX_FATFS_Init+0x28>)
 800b5b4:	f001 ff7a 	bl	800d4ac <FATFS_LinkDriver>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800b5be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b5c2:	e003      	b.n	800b5cc <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800b5c4:	4b04      	ldr	r3, [pc, #16]	@ (800b5d8 <MX_FATFS_Init+0x2c>)
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800b5ca:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	20001374 	.word	0x20001374
 800b5d4:	20000018 	.word	0x20000018
 800b5d8:	20001378 	.word	0x20001378

0800b5dc <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b5e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7f6 fbf9 	bl	8001df0 <SD_disk_initialize>
 800b5fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b600:	4618      	mov	r0, r3
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	4618      	mov	r0, r3
 800b616:	f7f6 fcd5 	bl	8001fc4 <SD_disk_status>
 800b61a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
 800b62e:	603b      	str	r3, [r7, #0]
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800b634:	7bf8      	ldrb	r0, [r7, #15]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	f7f6 fcd8 	bl	8001ff0 <SD_disk_read>
 800b640:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	603b      	str	r3, [r7, #0]
 800b656:	4603      	mov	r3, r0
 800b658:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800b65a:	7bf8      	ldrb	r0, [r7, #15]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	f7f6 fd2f 	bl	80020c4 <SD_disk_write>
 800b666:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	603a      	str	r2, [r7, #0]
 800b67a:	71fb      	strb	r3, [r7, #7]
 800b67c:	460b      	mov	r3, r1
 800b67e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800b680:	79b9      	ldrb	r1, [r7, #6]
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	4618      	mov	r0, r3
 800b688:	f7f6 fda0 	bl	80021cc <SD_disk_ioctl>
 800b68c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	4a08      	ldr	r2, [pc, #32]	@ (800b6c8 <disk_status+0x30>)
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	79fa      	ldrb	r2, [r7, #7]
 800b6b0:	4905      	ldr	r1, [pc, #20]	@ (800b6c8 <disk_status+0x30>)
 800b6b2:	440a      	add	r2, r1
 800b6b4:	7a12      	ldrb	r2, [r2, #8]
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	4798      	blx	r3
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	200013a4 	.word	0x200013a4

0800b6cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	4a0d      	ldr	r2, [pc, #52]	@ (800b714 <disk_initialize+0x48>)
 800b6de:	5cd3      	ldrb	r3, [r2, r3]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d111      	bne.n	800b708 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	4a0b      	ldr	r2, [pc, #44]	@ (800b714 <disk_initialize+0x48>)
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	4a09      	ldr	r2, [pc, #36]	@ (800b714 <disk_initialize+0x48>)
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	79fa      	ldrb	r2, [r7, #7]
 800b6fa:	4906      	ldr	r1, [pc, #24]	@ (800b714 <disk_initialize+0x48>)
 800b6fc:	440a      	add	r2, r1
 800b6fe:	7a12      	ldrb	r2, [r2, #8]
 800b700:	4610      	mov	r0, r2
 800b702:	4798      	blx	r3
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b708:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	200013a4 	.word	0x200013a4

0800b718 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b718:	b590      	push	{r4, r7, lr}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	4a0a      	ldr	r2, [pc, #40]	@ (800b754 <disk_read+0x3c>)
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	689c      	ldr	r4, [r3, #8]
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	4a07      	ldr	r2, [pc, #28]	@ (800b754 <disk_read+0x3c>)
 800b738:	4413      	add	r3, r2
 800b73a:	7a18      	ldrb	r0, [r3, #8]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	47a0      	blx	r4
 800b744:	4603      	mov	r3, r0
 800b746:	75fb      	strb	r3, [r7, #23]
  return res;
 800b748:	7dfb      	ldrb	r3, [r7, #23]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	371c      	adds	r7, #28
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd90      	pop	{r4, r7, pc}
 800b752:	bf00      	nop
 800b754:	200013a4 	.word	0x200013a4

0800b758 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b758:	b590      	push	{r4, r7, lr}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60b9      	str	r1, [r7, #8]
 800b760:	607a      	str	r2, [r7, #4]
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	4a0a      	ldr	r2, [pc, #40]	@ (800b794 <disk_write+0x3c>)
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	68dc      	ldr	r4, [r3, #12]
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	4a07      	ldr	r2, [pc, #28]	@ (800b794 <disk_write+0x3c>)
 800b778:	4413      	add	r3, r2
 800b77a:	7a18      	ldrb	r0, [r3, #8]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	68b9      	ldr	r1, [r7, #8]
 800b782:	47a0      	blx	r4
 800b784:	4603      	mov	r3, r0
 800b786:	75fb      	strb	r3, [r7, #23]
  return res;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd90      	pop	{r4, r7, pc}
 800b792:	bf00      	nop
 800b794:	200013a4 	.word	0x200013a4

0800b798 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b7a8:	89fb      	ldrh	r3, [r7, #14]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	b21a      	sxth	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b21b      	sxth	r3, r3
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	b21b      	sxth	r3, r3
 800b7b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b7ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3303      	adds	r3, #3
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	021b      	lsls	r3, r3, #8
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	3202      	adds	r2, #2
 800b7e0:	7812      	ldrb	r2, [r2, #0]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	021b      	lsls	r3, r3, #8
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	3201      	adds	r2, #1
 800b7ee:	7812      	ldrb	r2, [r2, #0]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	7812      	ldrb	r2, [r2, #0]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800b800:	68fb      	ldr	r3, [r7, #12]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b80e:	b480      	push	{r7}
 800b810:	b083      	sub	sp, #12
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	887a      	ldrh	r2, [r7, #2]
 800b822:	b2d2      	uxtb	r2, r2
 800b824:	701a      	strb	r2, [r3, #0]
 800b826:	887b      	ldrh	r3, [r7, #2]
 800b828:	0a1b      	lsrs	r3, r3, #8
 800b82a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	607a      	str	r2, [r7, #4]
 800b832:	887a      	ldrh	r2, [r7, #2]
 800b834:	b2d2      	uxtb	r2, r2
 800b836:	701a      	strb	r2, [r3, #0]
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	b2d2      	uxtb	r2, r2
 800b858:	701a      	strb	r2, [r3, #0]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	0a1b      	lsrs	r3, r3, #8
 800b85e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	607a      	str	r2, [r7, #4]
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	b2d2      	uxtb	r2, r2
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	0a1b      	lsrs	r3, r3, #8
 800b870:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	683a      	ldr	r2, [r7, #0]
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	0a1b      	lsrs	r3, r3, #8
 800b882:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	607a      	str	r2, [r7, #4]
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	b2d2      	uxtb	r2, r2
 800b88e:	701a      	strb	r2, [r3, #0]
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00d      	beq.n	800b8d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	1c53      	adds	r3, r2, #1
 800b8ba:	613b      	str	r3, [r7, #16]
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	1c59      	adds	r1, r3, #1
 800b8c0:	6179      	str	r1, [r7, #20]
 800b8c2:	7812      	ldrb	r2, [r2, #0]
 800b8c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	607b      	str	r3, [r7, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1f1      	bne.n	800b8b6 <mem_cpy+0x1a>
	}
}
 800b8d2:	bf00      	nop
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b8de:	b480      	push	{r7}
 800b8e0:	b087      	sub	sp, #28
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	60b9      	str	r1, [r7, #8]
 800b8e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	617a      	str	r2, [r7, #20]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	b2d2      	uxtb	r2, r2
 800b8f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	607b      	str	r3, [r7, #4]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1f3      	bne.n	800b8ee <mem_set+0x10>
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	371c      	adds	r7, #28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b914:	b480      	push	{r7}
 800b916:	b089      	sub	sp, #36	@ 0x24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	61fb      	str	r3, [r7, #28]
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	61fa      	str	r2, [r7, #28]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	4619      	mov	r1, r3
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	61ba      	str	r2, [r7, #24]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	1acb      	subs	r3, r1, r3
 800b940:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3b01      	subs	r3, #1
 800b946:	607b      	str	r3, [r7, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <mem_cmp+0x40>
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0eb      	beq.n	800b92c <mem_cmp+0x18>

	return r;
 800b954:	697b      	ldr	r3, [r7, #20]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3724      	adds	r7, #36	@ 0x24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b96c:	e002      	b.n	800b974 <chk_chr+0x12>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3301      	adds	r3, #1
 800b972:	607b      	str	r3, [r7, #4]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <chk_chr+0x26>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	461a      	mov	r2, r3
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	4293      	cmp	r3, r2
 800b986:	d1f2      	bne.n	800b96e <chk_chr+0xc>
	return *str;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	781b      	ldrb	r3, [r3, #0]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60bb      	str	r3, [r7, #8]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	60fb      	str	r3, [r7, #12]
 800b9aa:	e029      	b.n	800ba00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b9ac:	4a27      	ldr	r2, [pc, #156]	@ (800ba4c <chk_lock+0xb4>)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	4413      	add	r3, r2
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d01d      	beq.n	800b9f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9ba:	4a24      	ldr	r2, [pc, #144]	@ (800ba4c <chk_lock+0xb4>)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	011b      	lsls	r3, r3, #4
 800b9c0:	4413      	add	r3, r2
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d116      	bne.n	800b9fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b9cc:	4a1f      	ldr	r2, [pc, #124]	@ (800ba4c <chk_lock+0xb4>)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	4413      	add	r3, r2
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d10c      	bne.n	800b9fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9e0:	4a1a      	ldr	r2, [pc, #104]	@ (800ba4c <chk_lock+0xb4>)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	4413      	add	r3, r2
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d102      	bne.n	800b9fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9f4:	e007      	b.n	800ba06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d9d2      	bls.n	800b9ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d109      	bne.n	800ba20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <chk_lock+0x80>
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d101      	bne.n	800ba1c <chk_lock+0x84>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e010      	b.n	800ba3e <chk_lock+0xa6>
 800ba1c:	2312      	movs	r3, #18
 800ba1e:	e00e      	b.n	800ba3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d108      	bne.n	800ba38 <chk_lock+0xa0>
 800ba26:	4a09      	ldr	r2, [pc, #36]	@ (800ba4c <chk_lock+0xb4>)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	011b      	lsls	r3, r3, #4
 800ba2c:	4413      	add	r3, r2
 800ba2e:	330c      	adds	r3, #12
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba36:	d101      	bne.n	800ba3c <chk_lock+0xa4>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	e000      	b.n	800ba3e <chk_lock+0xa6>
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	20001384 	.word	0x20001384

0800ba50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba56:	2300      	movs	r3, #0
 800ba58:	607b      	str	r3, [r7, #4]
 800ba5a:	e002      	b.n	800ba62 <enq_lock+0x12>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	607b      	str	r3, [r7, #4]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d806      	bhi.n	800ba76 <enq_lock+0x26>
 800ba68:	4a09      	ldr	r2, [pc, #36]	@ (800ba90 <enq_lock+0x40>)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	011b      	lsls	r3, r3, #4
 800ba6e:	4413      	add	r3, r2
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1f2      	bne.n	800ba5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	bf14      	ite	ne
 800ba7c:	2301      	movne	r3, #1
 800ba7e:	2300      	moveq	r3, #0
 800ba80:	b2db      	uxtb	r3, r3
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	20001384 	.word	0x20001384

0800ba94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	e01f      	b.n	800bae4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800baa4:	4a41      	ldr	r2, [pc, #260]	@ (800bbac <inc_lock+0x118>)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	011b      	lsls	r3, r3, #4
 800baaa:	4413      	add	r3, r2
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d113      	bne.n	800bade <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bab6:	4a3d      	ldr	r2, [pc, #244]	@ (800bbac <inc_lock+0x118>)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	4413      	add	r3, r2
 800babe:	3304      	adds	r3, #4
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d109      	bne.n	800bade <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800baca:	4a38      	ldr	r2, [pc, #224]	@ (800bbac <inc_lock+0x118>)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	011b      	lsls	r3, r3, #4
 800bad0:	4413      	add	r3, r2
 800bad2:	3308      	adds	r3, #8
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bada:	429a      	cmp	r2, r3
 800badc:	d006      	beq.n	800baec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3301      	adds	r3, #1
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d9dc      	bls.n	800baa4 <inc_lock+0x10>
 800baea:	e000      	b.n	800baee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800baec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d132      	bne.n	800bb5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800baf4:	2300      	movs	r3, #0
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	e002      	b.n	800bb00 <inc_lock+0x6c>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3301      	adds	r3, #1
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d806      	bhi.n	800bb14 <inc_lock+0x80>
 800bb06:	4a29      	ldr	r2, [pc, #164]	@ (800bbac <inc_lock+0x118>)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	4413      	add	r3, r2
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1f2      	bne.n	800bafa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d101      	bne.n	800bb1e <inc_lock+0x8a>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e040      	b.n	800bba0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	4922      	ldr	r1, [pc, #136]	@ (800bbac <inc_lock+0x118>)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	011b      	lsls	r3, r3, #4
 800bb28:	440b      	add	r3, r1
 800bb2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689a      	ldr	r2, [r3, #8]
 800bb30:	491e      	ldr	r1, [pc, #120]	@ (800bbac <inc_lock+0x118>)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	440b      	add	r3, r1
 800bb38:	3304      	adds	r3, #4
 800bb3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	695a      	ldr	r2, [r3, #20]
 800bb40:	491a      	ldr	r1, [pc, #104]	@ (800bbac <inc_lock+0x118>)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	440b      	add	r3, r1
 800bb48:	3308      	adds	r3, #8
 800bb4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bb4c:	4a17      	ldr	r2, [pc, #92]	@ (800bbac <inc_lock+0x118>)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	4413      	add	r3, r2
 800bb54:	330c      	adds	r3, #12
 800bb56:	2200      	movs	r2, #0
 800bb58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d009      	beq.n	800bb74 <inc_lock+0xe0>
 800bb60:	4a12      	ldr	r2, [pc, #72]	@ (800bbac <inc_lock+0x118>)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	4413      	add	r3, r2
 800bb68:	330c      	adds	r3, #12
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <inc_lock+0xe0>
 800bb70:	2300      	movs	r3, #0
 800bb72:	e015      	b.n	800bba0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d108      	bne.n	800bb8c <inc_lock+0xf8>
 800bb7a:	4a0c      	ldr	r2, [pc, #48]	@ (800bbac <inc_lock+0x118>)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	011b      	lsls	r3, r3, #4
 800bb80:	4413      	add	r3, r2
 800bb82:	330c      	adds	r3, #12
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	3301      	adds	r3, #1
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	e001      	b.n	800bb90 <inc_lock+0xfc>
 800bb8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb90:	4906      	ldr	r1, [pc, #24]	@ (800bbac <inc_lock+0x118>)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	011b      	lsls	r3, r3, #4
 800bb96:	440b      	add	r3, r1
 800bb98:	330c      	adds	r3, #12
 800bb9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	3301      	adds	r3, #1
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	20001384 	.word	0x20001384

0800bbb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bbb8:	2300      	movs	r3, #0
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	e010      	b.n	800bbe0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbbe:	4a0d      	ldr	r2, [pc, #52]	@ (800bbf4 <clear_lock+0x44>)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	011b      	lsls	r3, r3, #4
 800bbc4:	4413      	add	r3, r2
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d105      	bne.n	800bbda <clear_lock+0x2a>
 800bbce:	4a09      	ldr	r2, [pc, #36]	@ (800bbf4 <clear_lock+0x44>)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	011b      	lsls	r3, r3, #4
 800bbd4:	4413      	add	r3, r2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	60fb      	str	r3, [r7, #12]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d9eb      	bls.n	800bbbe <clear_lock+0xe>
	}
}
 800bbe6:	bf00      	nop
 800bbe8:	bf00      	nop
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	20001384 	.word	0x20001384

0800bbf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	78db      	ldrb	r3, [r3, #3]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d034      	beq.n	800bc76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7858      	ldrb	r0, [r3, #1]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	f7ff fd9a 	bl	800b758 <disk_write>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	73fb      	strb	r3, [r7, #15]
 800bc2e:	e022      	b.n	800bc76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	1ad2      	subs	r2, r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d217      	bcs.n	800bc76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	789b      	ldrb	r3, [r3, #2]
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	e010      	b.n	800bc70 <sync_window+0x78>
					wsect += fs->fsize;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	4413      	add	r3, r2
 800bc56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	7858      	ldrb	r0, [r3, #1]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc62:	2301      	movs	r3, #1
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	f7ff fd77 	bl	800b758 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	613b      	str	r3, [r7, #16]
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d8eb      	bhi.n	800bc4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d01b      	beq.n	800bcd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7ff ffad 	bl	800bbf8 <sync_window>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d113      	bne.n	800bcd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	7858      	ldrb	r0, [r3, #1]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	f7ff fd2f 	bl	800b718 <disk_read>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bcc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	3b02      	subs	r3, #2
 800bce8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	3b02      	subs	r3, #2
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d301      	bcc.n	800bcfa <clust2sect+0x20>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e008      	b.n	800bd0c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	895b      	ldrh	r3, [r3, #10]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	fb03 f202 	mul.w	r2, r3, r2
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0a:	4413      	add	r3, r2
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d904      	bls.n	800bd38 <get_fat+0x20>
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d302      	bcc.n	800bd3e <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd38:	2301      	movs	r3, #1
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e08e      	b.n	800be5c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd42:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b03      	cmp	r3, #3
 800bd4a:	d061      	beq.n	800be10 <get_fat+0xf8>
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	dc7b      	bgt.n	800be48 <get_fat+0x130>
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d002      	beq.n	800bd5a <get_fat+0x42>
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d041      	beq.n	800bddc <get_fat+0xc4>
 800bd58:	e076      	b.n	800be48 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	085b      	lsrs	r3, r3, #1
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	4413      	add	r3, r2
 800bd66:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6a1a      	ldr	r2, [r3, #32]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	0a5b      	lsrs	r3, r3, #9
 800bd70:	4413      	add	r3, r2
 800bd72:	4619      	mov	r1, r3
 800bd74:	6938      	ldr	r0, [r7, #16]
 800bd76:	f7ff ff83 	bl	800bc80 <move_window>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d166      	bne.n	800be4e <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	60fa      	str	r2, [r7, #12]
 800bd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd92:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	6a1a      	ldr	r2, [r3, #32]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	0a5b      	lsrs	r3, r3, #9
 800bd9c:	4413      	add	r3, r2
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6938      	ldr	r0, [r7, #16]
 800bda2:	f7ff ff6d 	bl	800bc80 <move_window>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d152      	bne.n	800be52 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdba:	021b      	lsls	r3, r3, #8
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <get_fat+0xba>
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	091b      	lsrs	r3, r3, #4
 800bdd0:	e002      	b.n	800bdd8 <get_fat+0xc0>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdd8:	617b      	str	r3, [r7, #20]
			break;
 800bdda:	e03f      	b.n	800be5c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	6a1a      	ldr	r2, [r3, #32]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	0a1b      	lsrs	r3, r3, #8
 800bde4:	4413      	add	r3, r2
 800bde6:	4619      	mov	r1, r3
 800bde8:	6938      	ldr	r0, [r7, #16]
 800bdea:	f7ff ff49 	bl	800bc80 <move_window>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d130      	bne.n	800be56 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800be02:	4413      	add	r3, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff fcc7 	bl	800b798 <ld_word>
 800be0a:	4603      	mov	r3, r0
 800be0c:	617b      	str	r3, [r7, #20]
			break;
 800be0e:	e025      	b.n	800be5c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	6a1a      	ldr	r2, [r3, #32]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	09db      	lsrs	r3, r3, #7
 800be18:	4413      	add	r3, r2
 800be1a:	4619      	mov	r1, r3
 800be1c:	6938      	ldr	r0, [r7, #16]
 800be1e:	f7ff ff2f 	bl	800bc80 <move_window>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d118      	bne.n	800be5a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800be36:	4413      	add	r3, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	f7ff fcc5 	bl	800b7c8 <ld_dword>
 800be3e:	4603      	mov	r3, r0
 800be40:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800be44:	617b      	str	r3, [r7, #20]
			break;
 800be46:	e009      	b.n	800be5c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800be48:	2301      	movs	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e006      	b.n	800be5c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be4e:	bf00      	nop
 800be50:	e004      	b.n	800be5c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be52:	bf00      	nop
 800be54:	e002      	b.n	800be5c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be56:	bf00      	nop
 800be58:	e000      	b.n	800be5c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be5a:	bf00      	nop
		}
	}

	return val;
 800be5c:	697b      	ldr	r3, [r7, #20]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800be66:	b590      	push	{r4, r7, lr}
 800be68:	b089      	sub	sp, #36	@ 0x24
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	60b9      	str	r1, [r7, #8]
 800be70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800be72:	2302      	movs	r3, #2
 800be74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	f240 80d9 	bls.w	800c030 <put_fat+0x1ca>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	429a      	cmp	r2, r3
 800be86:	f080 80d3 	bcs.w	800c030 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b03      	cmp	r3, #3
 800be90:	f000 8096 	beq.w	800bfc0 <put_fat+0x15a>
 800be94:	2b03      	cmp	r3, #3
 800be96:	f300 80cb 	bgt.w	800c030 <put_fat+0x1ca>
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d002      	beq.n	800bea4 <put_fat+0x3e>
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d06e      	beq.n	800bf80 <put_fat+0x11a>
 800bea2:	e0c5      	b.n	800c030 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	61bb      	str	r3, [r7, #24]
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	085b      	lsrs	r3, r3, #1
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	4413      	add	r3, r2
 800beb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a1a      	ldr	r2, [r3, #32]
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	0a5b      	lsrs	r3, r3, #9
 800beba:	4413      	add	r3, r2
 800bebc:	4619      	mov	r1, r3
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f7ff fede 	bl	800bc80 <move_window>
 800bec4:	4603      	mov	r3, r0
 800bec6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bec8:	7ffb      	ldrb	r3, [r7, #31]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f040 80a9 	bne.w	800c022 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	1c59      	adds	r1, r3, #1
 800beda:	61b9      	str	r1, [r7, #24]
 800bedc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee0:	4413      	add	r3, r2
 800bee2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00d      	beq.n	800bf0a <put_fat+0xa4>
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b25b      	sxtb	r3, r3
 800bef4:	f003 030f 	and.w	r3, r3, #15
 800bef8:	b25a      	sxtb	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	b25b      	sxtb	r3, r3
 800bf02:	4313      	orrs	r3, r2
 800bf04:	b25b      	sxtb	r3, r3
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	e001      	b.n	800bf0e <put_fat+0xa8>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2201      	movs	r2, #1
 800bf16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6a1a      	ldr	r2, [r3, #32]
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	0a5b      	lsrs	r3, r3, #9
 800bf20:	4413      	add	r3, r2
 800bf22:	4619      	mov	r1, r3
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f7ff feab 	bl	800bc80 <move_window>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d178      	bne.n	800c026 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf40:	4413      	add	r3, r2
 800bf42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <put_fat+0xf0>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	091b      	lsrs	r3, r3, #4
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	e00e      	b.n	800bf74 <put_fat+0x10e>
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	b25b      	sxtb	r3, r3
 800bf5c:	f023 030f 	bic.w	r3, r3, #15
 800bf60:	b25a      	sxtb	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	0a1b      	lsrs	r3, r3, #8
 800bf66:	b25b      	sxtb	r3, r3
 800bf68:	f003 030f 	and.w	r3, r3, #15
 800bf6c:	b25b      	sxtb	r3, r3
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	b25b      	sxtb	r3, r3
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	70da      	strb	r2, [r3, #3]
			break;
 800bf7e:	e057      	b.n	800c030 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6a1a      	ldr	r2, [r3, #32]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	4413      	add	r3, r2
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7ff fe77 	bl	800bc80 <move_window>
 800bf92:	4603      	mov	r3, r0
 800bf94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf96:	7ffb      	ldrb	r3, [r7, #31]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d146      	bne.n	800c02a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bfaa:	4413      	add	r3, r2
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	b292      	uxth	r2, r2
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fc2b 	bl	800b80e <st_word>
			fs->wflag = 1;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	70da      	strb	r2, [r3, #3]
			break;
 800bfbe:	e037      	b.n	800c030 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6a1a      	ldr	r2, [r3, #32]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	09db      	lsrs	r3, r3, #7
 800bfc8:	4413      	add	r3, r2
 800bfca:	4619      	mov	r1, r3
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f7ff fe57 	bl	800bc80 <move_window>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfd6:	7ffb      	ldrb	r3, [r7, #31]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d128      	bne.n	800c02e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bff0:	4413      	add	r3, r2
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff fbe8 	bl	800b7c8 <ld_dword>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bffe:	4323      	orrs	r3, r4
 800c000:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c010:	4413      	add	r3, r2
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4618      	mov	r0, r3
 800c016:	f7ff fc15 	bl	800b844 <st_dword>
			fs->wflag = 1;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2201      	movs	r2, #1
 800c01e:	70da      	strb	r2, [r3, #3]
			break;
 800c020:	e006      	b.n	800c030 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c022:	bf00      	nop
 800c024:	e004      	b.n	800c030 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c026:	bf00      	nop
 800c028:	e002      	b.n	800c030 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c02e:	bf00      	nop
		}
	}
	return res;
 800c030:	7ffb      	ldrb	r3, [r7, #31]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3724      	adds	r7, #36	@ 0x24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd90      	pop	{r4, r7, pc}

0800c03a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b088      	sub	sp, #32
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d904      	bls.n	800c060 <remove_chain+0x26>
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	695b      	ldr	r3, [r3, #20]
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d301      	bcc.n	800c064 <remove_chain+0x2a>
 800c060:	2302      	movs	r3, #2
 800c062:	e04b      	b.n	800c0fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00c      	beq.n	800c084 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c06a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	69b8      	ldr	r0, [r7, #24]
 800c072:	f7ff fef8 	bl	800be66 <put_fat>
 800c076:	4603      	mov	r3, r0
 800c078:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c07a:	7ffb      	ldrb	r3, [r7, #31]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <remove_chain+0x4a>
 800c080:	7ffb      	ldrb	r3, [r7, #31]
 800c082:	e03b      	b.n	800c0fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c084:	68b9      	ldr	r1, [r7, #8]
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f7ff fe46 	bl	800bd18 <get_fat>
 800c08c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d031      	beq.n	800c0f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d101      	bne.n	800c09e <remove_chain+0x64>
 800c09a:	2302      	movs	r3, #2
 800c09c:	e02e      	b.n	800c0fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0a4:	d101      	bne.n	800c0aa <remove_chain+0x70>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e028      	b.n	800c0fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	68b9      	ldr	r1, [r7, #8]
 800c0ae:	69b8      	ldr	r0, [r7, #24]
 800c0b0:	f7ff fed9 	bl	800be66 <put_fat>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c0b8:	7ffb      	ldrb	r3, [r7, #31]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <remove_chain+0x88>
 800c0be:	7ffb      	ldrb	r3, [r7, #31]
 800c0c0:	e01c      	b.n	800c0fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	691a      	ldr	r2, [r3, #16]
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	3b02      	subs	r3, #2
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d20b      	bcs.n	800c0e8 <remove_chain+0xae>
			fs->free_clst++;
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	791b      	ldrb	r3, [r3, #4]
 800c0de:	f043 0301 	orr.w	r3, r3, #1
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d3c6      	bcc.n	800c084 <remove_chain+0x4a>
 800c0f6:	e000      	b.n	800c0fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c0f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3720      	adds	r7, #32
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10d      	bne.n	800c136 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d004      	beq.n	800c130 <create_chain+0x2c>
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	69ba      	ldr	r2, [r7, #24]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d31b      	bcc.n	800c168 <create_chain+0x64>
 800c130:	2301      	movs	r3, #1
 800c132:	61bb      	str	r3, [r7, #24]
 800c134:	e018      	b.n	800c168 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff fded 	bl	800bd18 <get_fat>
 800c13e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d801      	bhi.n	800c14a <create_chain+0x46>
 800c146:	2301      	movs	r3, #1
 800c148:	e070      	b.n	800c22c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c150:	d101      	bne.n	800c156 <create_chain+0x52>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	e06a      	b.n	800c22c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d201      	bcs.n	800c164 <create_chain+0x60>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	e063      	b.n	800c22c <create_chain+0x128>
		scl = clst;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	3301      	adds	r3, #1
 800c170:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	69fa      	ldr	r2, [r7, #28]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d307      	bcc.n	800c18c <create_chain+0x88>
				ncl = 2;
 800c17c:	2302      	movs	r3, #2
 800c17e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c180:	69fa      	ldr	r2, [r7, #28]
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	429a      	cmp	r2, r3
 800c186:	d901      	bls.n	800c18c <create_chain+0x88>
 800c188:	2300      	movs	r3, #0
 800c18a:	e04f      	b.n	800c22c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c18c:	69f9      	ldr	r1, [r7, #28]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff fdc2 	bl	800bd18 <get_fat>
 800c194:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00e      	beq.n	800c1ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d003      	beq.n	800c1aa <create_chain+0xa6>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1a8:	d101      	bne.n	800c1ae <create_chain+0xaa>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	e03e      	b.n	800c22c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d1da      	bne.n	800c16c <create_chain+0x68>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e038      	b.n	800c22c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c1ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c1bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c1c0:	69f9      	ldr	r1, [r7, #28]
 800c1c2:	6938      	ldr	r0, [r7, #16]
 800c1c4:	f7ff fe4f 	bl	800be66 <put_fat>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d109      	bne.n	800c1e6 <create_chain+0xe2>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d006      	beq.n	800c1e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6938      	ldr	r0, [r7, #16]
 800c1de:	f7ff fe42 	bl	800be66 <put_fat>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c1e6:	7dfb      	ldrb	r3, [r7, #23]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d116      	bne.n	800c21a <create_chain+0x116>
		fs->last_clst = ncl;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	691a      	ldr	r2, [r3, #16]
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	3b02      	subs	r3, #2
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d804      	bhi.n	800c20a <create_chain+0x106>
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	1e5a      	subs	r2, r3, #1
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	791b      	ldrb	r3, [r3, #4]
 800c20e:	f043 0301 	orr.w	r3, r3, #1
 800c212:	b2da      	uxtb	r2, r3
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	711a      	strb	r2, [r3, #4]
 800c218:	e007      	b.n	800c22a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c21a:	7dfb      	ldrb	r3, [r7, #23]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d102      	bne.n	800c226 <create_chain+0x122>
 800c220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c224:	e000      	b.n	800c228 <create_chain+0x124>
 800c226:	2301      	movs	r3, #1
 800c228:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c22a:	69fb      	ldr	r3, [r7, #28]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3720      	adds	r7, #32
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c24a:	d204      	bcs.n	800c256 <dir_sdi+0x22>
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	f003 031f 	and.w	r3, r3, #31
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c256:	2302      	movs	r3, #2
 800c258:	e063      	b.n	800c322 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <dir_sdi+0x46>
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b02      	cmp	r3, #2
 800c272:	d902      	bls.n	800c27a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c278:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10c      	bne.n	800c29a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	095b      	lsrs	r3, r3, #5
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	8912      	ldrh	r2, [r2, #8]
 800c288:	4293      	cmp	r3, r2
 800c28a:	d301      	bcc.n	800c290 <dir_sdi+0x5c>
 800c28c:	2302      	movs	r3, #2
 800c28e:	e048      	b.n	800c322 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	61da      	str	r2, [r3, #28]
 800c298:	e029      	b.n	800c2ee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	895b      	ldrh	r3, [r3, #10]
 800c29e:	025b      	lsls	r3, r3, #9
 800c2a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2a2:	e019      	b.n	800c2d8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6979      	ldr	r1, [r7, #20]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff fd35 	bl	800bd18 <get_fat>
 800c2ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2b6:	d101      	bne.n	800c2bc <dir_sdi+0x88>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e032      	b.n	800c322 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d904      	bls.n	800c2cc <dir_sdi+0x98>
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d301      	bcc.n	800c2d0 <dir_sdi+0x9c>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e028      	b.n	800c322 <dir_sdi+0xee>
			ofs -= csz;
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d2e1      	bcs.n	800c2a4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c2e0:	6979      	ldr	r1, [r7, #20]
 800c2e2:	6938      	ldr	r0, [r7, #16]
 800c2e4:	f7ff fcf9 	bl	800bcda <clust2sect>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	69db      	ldr	r3, [r3, #28]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <dir_sdi+0xcc>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e010      	b.n	800c322 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	0a5b      	lsrs	r3, r3, #9
 800c308:	441a      	add	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31a:	441a      	add	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b086      	sub	sp, #24
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	3320      	adds	r3, #32
 800c340:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <dir_next+0x28>
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c350:	d301      	bcc.n	800c356 <dir_next+0x2c>
 800c352:	2304      	movs	r3, #4
 800c354:	e0aa      	b.n	800c4ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f040 8098 	bne.w	800c492 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	69db      	ldr	r3, [r3, #28]
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	699b      	ldr	r3, [r3, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10b      	bne.n	800c38c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	095b      	lsrs	r3, r3, #5
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	8912      	ldrh	r2, [r2, #8]
 800c37c:	4293      	cmp	r3, r2
 800c37e:	f0c0 8088 	bcc.w	800c492 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	61da      	str	r2, [r3, #28]
 800c388:	2304      	movs	r3, #4
 800c38a:	e08f      	b.n	800c4ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	0a5b      	lsrs	r3, r3, #9
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	8952      	ldrh	r2, [r2, #10]
 800c394:	3a01      	subs	r2, #1
 800c396:	4013      	ands	r3, r2
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d17a      	bne.n	800c492 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	f7ff fcb7 	bl	800bd18 <get_fat>
 800c3aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d801      	bhi.n	800c3b6 <dir_next+0x8c>
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e07a      	b.n	800c4ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3bc:	d101      	bne.n	800c3c2 <dir_next+0x98>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e074      	b.n	800c4ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d358      	bcc.n	800c47e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d104      	bne.n	800c3dc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	61da      	str	r2, [r3, #28]
 800c3d8:	2304      	movs	r3, #4
 800c3da:	e067      	b.n	800c4ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7ff fe8d 	bl	800c104 <create_chain>
 800c3ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <dir_next+0xcc>
 800c3f2:	2307      	movs	r3, #7
 800c3f4:	e05a      	b.n	800c4ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <dir_next+0xd6>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e055      	b.n	800c4ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c406:	d101      	bne.n	800c40c <dir_next+0xe2>
 800c408:	2301      	movs	r3, #1
 800c40a:	e04f      	b.n	800c4ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f7ff fbf3 	bl	800bbf8 <sync_window>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <dir_next+0xf2>
 800c418:	2301      	movs	r3, #1
 800c41a:	e047      	b.n	800c4ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3330      	adds	r3, #48	@ 0x30
 800c420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff fa59 	bl	800b8de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c42c:	2300      	movs	r3, #0
 800c42e:	613b      	str	r3, [r7, #16]
 800c430:	6979      	ldr	r1, [r7, #20]
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f7ff fc51 	bl	800bcda <clust2sect>
 800c438:	4602      	mov	r2, r0
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c43e:	e012      	b.n	800c466 <dir_next+0x13c>
						fs->wflag = 1;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2201      	movs	r2, #1
 800c444:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f7ff fbd6 	bl	800bbf8 <sync_window>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <dir_next+0x12c>
 800c452:	2301      	movs	r3, #1
 800c454:	e02a      	b.n	800c4ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	3301      	adds	r3, #1
 800c45a:	613b      	str	r3, [r7, #16]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	895b      	ldrh	r3, [r3, #10]
 800c46a:	461a      	mov	r2, r3
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	4293      	cmp	r3, r2
 800c470:	d3e6      	bcc.n	800c440 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	1ad2      	subs	r2, r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c484:	6979      	ldr	r1, [r7, #20]
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f7ff fc27 	bl	800bcda <clust2sect>
 800c48c:	4602      	mov	r2, r0
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a4:	441a      	add	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7ff feb4 	bl	800c234 <dir_sdi>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d12b      	bne.n	800c52e <dir_alloc+0x7a>
		n = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	69db      	ldr	r3, [r3, #28]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7ff fbcd 	bl	800bc80 <move_window>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d11d      	bne.n	800c52c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a1b      	ldr	r3, [r3, #32]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2be5      	cmp	r3, #229	@ 0xe5
 800c4f8:	d004      	beq.n	800c504 <dir_alloc+0x50>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d107      	bne.n	800c514 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	3301      	adds	r3, #1
 800c508:	613b      	str	r3, [r7, #16]
 800c50a:	693a      	ldr	r2, [r7, #16]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d102      	bne.n	800c518 <dir_alloc+0x64>
 800c512:	e00c      	b.n	800c52e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c514:	2300      	movs	r3, #0
 800c516:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c518:	2101      	movs	r1, #1
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff ff05 	bl	800c32a <dir_next>
 800c520:	4603      	mov	r3, r0
 800c522:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0d7      	beq.n	800c4da <dir_alloc+0x26>
 800c52a:	e000      	b.n	800c52e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c52c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d101      	bne.n	800c538 <dir_alloc+0x84>
 800c534:	2307      	movs	r3, #7
 800c536:	75fb      	strb	r3, [r7, #23]
	return res;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	331a      	adds	r3, #26
 800c550:	4618      	mov	r0, r3
 800c552:	f7ff f921 	bl	800b798 <ld_word>
 800c556:	4603      	mov	r3, r0
 800c558:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d109      	bne.n	800c576 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	3314      	adds	r3, #20
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff f916 	bl	800b798 <ld_word>
 800c56c:	4603      	mov	r3, r0
 800c56e:	041b      	lsls	r3, r3, #16
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	4313      	orrs	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c576:	68fb      	ldr	r3, [r7, #12]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	331a      	adds	r3, #26
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	b292      	uxth	r2, r2
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff f939 	bl	800b80e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	d109      	bne.n	800c5b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	f103 0214 	add.w	r2, r3, #20
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	0c1b      	lsrs	r3, r3, #16
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	f7ff f92b 	bl	800b80e <st_word>
	}
}
 800c5b8:	bf00      	nop
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff fe2f 	bl	800c234 <dir_sdi>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <dir_find+0x24>
 800c5e0:	7dfb      	ldrb	r3, [r7, #23]
 800c5e2:	e03e      	b.n	800c662 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6938      	ldr	r0, [r7, #16]
 800c5ec:	f7ff fb48 	bl	800bc80 <move_window>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c5f4:	7dfb      	ldrb	r3, [r7, #23]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d12f      	bne.n	800c65a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <dir_find+0x4e>
 800c608:	2304      	movs	r3, #4
 800c60a:	75fb      	strb	r3, [r7, #23]
 800c60c:	e028      	b.n	800c660 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	330b      	adds	r3, #11
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	330b      	adds	r3, #11
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	f003 0308 	and.w	r3, r3, #8
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10a      	bne.n	800c646 <dir_find+0x86>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a18      	ldr	r0, [r3, #32]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	3324      	adds	r3, #36	@ 0x24
 800c638:	220b      	movs	r2, #11
 800c63a:	4619      	mov	r1, r3
 800c63c:	f7ff f96a 	bl	800b914 <mem_cmp>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00b      	beq.n	800c65e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff fe6e 	bl	800c32a <dir_next>
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d0c5      	beq.n	800c5e4 <dir_find+0x24>
 800c658:	e002      	b.n	800c660 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c65a:	bf00      	nop
 800c65c:	e000      	b.n	800c660 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c65e:	bf00      	nop

	return res;
 800c660:	7dfb      	ldrb	r3, [r7, #23]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b084      	sub	sp, #16
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c678:	2101      	movs	r1, #1
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7ff ff1a 	bl	800c4b4 <dir_alloc>
 800c680:	4603      	mov	r3, r0
 800c682:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d11c      	bne.n	800c6c4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	4619      	mov	r1, r3
 800c690:	68b8      	ldr	r0, [r7, #8]
 800c692:	f7ff faf5 	bl	800bc80 <move_window>
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d111      	bne.n	800c6c4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7ff f918 	bl	800b8de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a18      	ldr	r0, [r3, #32]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3324      	adds	r3, #36	@ 0x24
 800c6b6:	220b      	movs	r2, #11
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	f7ff f8ef 	bl	800b89c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	60fb      	str	r3, [r7, #12]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3324      	adds	r3, #36	@ 0x24
 800c6e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c6e6:	220b      	movs	r2, #11
 800c6e8:	2120      	movs	r1, #32
 800c6ea:	68b8      	ldr	r0, [r7, #8]
 800c6ec:	f7ff f8f7 	bl	800b8de <mem_set>
	si = i = 0; ni = 8;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	613b      	str	r3, [r7, #16]
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	61fb      	str	r3, [r7, #28]
 800c6f8:	2308      	movs	r3, #8
 800c6fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	61fa      	str	r2, [r7, #28]
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4413      	add	r3, r2
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c70a:	7efb      	ldrb	r3, [r7, #27]
 800c70c:	2b20      	cmp	r3, #32
 800c70e:	d94e      	bls.n	800c7ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c710:	7efb      	ldrb	r3, [r7, #27]
 800c712:	2b2f      	cmp	r3, #47	@ 0x2f
 800c714:	d006      	beq.n	800c724 <create_name+0x54>
 800c716:	7efb      	ldrb	r3, [r7, #27]
 800c718:	2b5c      	cmp	r3, #92	@ 0x5c
 800c71a:	d110      	bne.n	800c73e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c71c:	e002      	b.n	800c724 <create_name+0x54>
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	3301      	adds	r3, #1
 800c722:	61fb      	str	r3, [r7, #28]
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	4413      	add	r3, r2
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c72e:	d0f6      	beq.n	800c71e <create_name+0x4e>
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	4413      	add	r3, r2
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	2b5c      	cmp	r3, #92	@ 0x5c
 800c73a:	d0f0      	beq.n	800c71e <create_name+0x4e>
			break;
 800c73c:	e038      	b.n	800c7b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c73e:	7efb      	ldrb	r3, [r7, #27]
 800c740:	2b2e      	cmp	r3, #46	@ 0x2e
 800c742:	d003      	beq.n	800c74c <create_name+0x7c>
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d30c      	bcc.n	800c766 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	2b0b      	cmp	r3, #11
 800c750:	d002      	beq.n	800c758 <create_name+0x88>
 800c752:	7efb      	ldrb	r3, [r7, #27]
 800c754:	2b2e      	cmp	r3, #46	@ 0x2e
 800c756:	d001      	beq.n	800c75c <create_name+0x8c>
 800c758:	2306      	movs	r3, #6
 800c75a:	e044      	b.n	800c7e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c75c:	2308      	movs	r3, #8
 800c75e:	613b      	str	r3, [r7, #16]
 800c760:	230b      	movs	r3, #11
 800c762:	617b      	str	r3, [r7, #20]
			continue;
 800c764:	e022      	b.n	800c7ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c766:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	da04      	bge.n	800c778 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c76e:	7efb      	ldrb	r3, [r7, #27]
 800c770:	3b80      	subs	r3, #128	@ 0x80
 800c772:	4a1f      	ldr	r2, [pc, #124]	@ (800c7f0 <create_name+0x120>)
 800c774:	5cd3      	ldrb	r3, [r2, r3]
 800c776:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c778:	7efb      	ldrb	r3, [r7, #27]
 800c77a:	4619      	mov	r1, r3
 800c77c:	481d      	ldr	r0, [pc, #116]	@ (800c7f4 <create_name+0x124>)
 800c77e:	f7ff f8f0 	bl	800b962 <chk_chr>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <create_name+0xbc>
 800c788:	2306      	movs	r3, #6
 800c78a:	e02c      	b.n	800c7e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c78c:	7efb      	ldrb	r3, [r7, #27]
 800c78e:	2b60      	cmp	r3, #96	@ 0x60
 800c790:	d905      	bls.n	800c79e <create_name+0xce>
 800c792:	7efb      	ldrb	r3, [r7, #27]
 800c794:	2b7a      	cmp	r3, #122	@ 0x7a
 800c796:	d802      	bhi.n	800c79e <create_name+0xce>
 800c798:	7efb      	ldrb	r3, [r7, #27]
 800c79a:	3b20      	subs	r3, #32
 800c79c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	613a      	str	r2, [r7, #16]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	7efa      	ldrb	r2, [r7, #27]
 800c7aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c7ac:	e7a6      	b.n	800c6fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	441a      	add	r2, r3
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d101      	bne.n	800c7c4 <create_name+0xf4>
 800c7c0:	2306      	movs	r3, #6
 800c7c2:	e010      	b.n	800c7e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	2be5      	cmp	r3, #229	@ 0xe5
 800c7ca:	d102      	bne.n	800c7d2 <create_name+0x102>
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2205      	movs	r2, #5
 800c7d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c7d2:	7efb      	ldrb	r3, [r7, #27]
 800c7d4:	2b20      	cmp	r3, #32
 800c7d6:	d801      	bhi.n	800c7dc <create_name+0x10c>
 800c7d8:	2204      	movs	r2, #4
 800c7da:	e000      	b.n	800c7de <create_name+0x10e>
 800c7dc:	2200      	movs	r2, #0
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	330b      	adds	r3, #11
 800c7e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c7e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3720      	adds	r7, #32
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	08011e6c 	.word	0x08011e6c
 800c7f4:	08011de8 	.word	0x08011de8

0800c7f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c80c:	e002      	b.n	800c814 <follow_path+0x1c>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	3301      	adds	r3, #1
 800c812:	603b      	str	r3, [r7, #0]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b2f      	cmp	r3, #47	@ 0x2f
 800c81a:	d0f8      	beq.n	800c80e <follow_path+0x16>
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b5c      	cmp	r3, #92	@ 0x5c
 800c822:	d0f4      	beq.n	800c80e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	2200      	movs	r2, #0
 800c828:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2b1f      	cmp	r3, #31
 800c830:	d80a      	bhi.n	800c848 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2280      	movs	r2, #128	@ 0x80
 800c836:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c83a:	2100      	movs	r1, #0
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fcf9 	bl	800c234 <dir_sdi>
 800c842:	4603      	mov	r3, r0
 800c844:	75fb      	strb	r3, [r7, #23]
 800c846:	e043      	b.n	800c8d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c848:	463b      	mov	r3, r7
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff ff3f 	bl	800c6d0 <create_name>
 800c852:	4603      	mov	r3, r0
 800c854:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d134      	bne.n	800c8c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7ff feaf 	bl	800c5c0 <dir_find>
 800c862:	4603      	mov	r3, r0
 800c864:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c86c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00a      	beq.n	800c88a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c874:	7dfb      	ldrb	r3, [r7, #23]
 800c876:	2b04      	cmp	r3, #4
 800c878:	d127      	bne.n	800c8ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c87a:	7afb      	ldrb	r3, [r7, #11]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d122      	bne.n	800c8ca <follow_path+0xd2>
 800c884:	2305      	movs	r3, #5
 800c886:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c888:	e01f      	b.n	800c8ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c88a:	7afb      	ldrb	r3, [r7, #11]
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	d11c      	bne.n	800c8ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	799b      	ldrb	r3, [r3, #6]
 800c898:	f003 0310 	and.w	r3, r3, #16
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d102      	bne.n	800c8a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c8a0:	2305      	movs	r3, #5
 800c8a2:	75fb      	strb	r3, [r7, #23]
 800c8a4:	e014      	b.n	800c8d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b4:	4413      	add	r3, r2
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f7ff fe42 	bl	800c542 <ld_clust>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8c4:	e7c0      	b.n	800c848 <follow_path+0x50>
			if (res != FR_OK) break;
 800c8c6:	bf00      	nop
 800c8c8:	e002      	b.n	800c8d0 <follow_path+0xd8>
				break;
 800c8ca:	bf00      	nop
 800c8cc:	e000      	b.n	800c8d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c8ce:	bf00      	nop
			}
		}
	}

	return res;
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b087      	sub	sp, #28
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d031      	beq.n	800c954 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	617b      	str	r3, [r7, #20]
 800c8f6:	e002      	b.n	800c8fe <get_ldnumber+0x24>
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	617b      	str	r3, [r7, #20]
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b20      	cmp	r3, #32
 800c904:	d903      	bls.n	800c90e <get_ldnumber+0x34>
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b3a      	cmp	r3, #58	@ 0x3a
 800c90c:	d1f4      	bne.n	800c8f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b3a      	cmp	r3, #58	@ 0x3a
 800c914:	d11c      	bne.n	800c950 <get_ldnumber+0x76>
			tp = *path;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	60fa      	str	r2, [r7, #12]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	3b30      	subs	r3, #48	@ 0x30
 800c926:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b09      	cmp	r3, #9
 800c92c:	d80e      	bhi.n	800c94c <get_ldnumber+0x72>
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	429a      	cmp	r2, r3
 800c934:	d10a      	bne.n	800c94c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d107      	bne.n	800c94c <get_ldnumber+0x72>
					vol = (int)i;
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	3301      	adds	r3, #1
 800c944:	617b      	str	r3, [r7, #20]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	e002      	b.n	800c956 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c950:	2300      	movs	r3, #0
 800c952:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c954:	693b      	ldr	r3, [r7, #16]
}
 800c956:	4618      	mov	r0, r3
 800c958:	371c      	adds	r7, #28
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
	...

0800c964 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	70da      	strb	r2, [r3, #3]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c97a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff f97e 	bl	800bc80 <move_window>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <check_fs+0x2a>
 800c98a:	2304      	movs	r3, #4
 800c98c:	e038      	b.n	800ca00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3330      	adds	r3, #48	@ 0x30
 800c992:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fefe 	bl	800b798 <ld_word>
 800c99c:	4603      	mov	r3, r0
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d001      	beq.n	800c9ac <check_fs+0x48>
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e029      	b.n	800ca00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9b2:	2be9      	cmp	r3, #233	@ 0xe9
 800c9b4:	d009      	beq.n	800c9ca <check_fs+0x66>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9bc:	2beb      	cmp	r3, #235	@ 0xeb
 800c9be:	d11e      	bne.n	800c9fe <check_fs+0x9a>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c9c6:	2b90      	cmp	r3, #144	@ 0x90
 800c9c8:	d119      	bne.n	800c9fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3330      	adds	r3, #48	@ 0x30
 800c9ce:	3336      	adds	r3, #54	@ 0x36
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe fef9 	bl	800b7c8 <ld_dword>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c9dc:	4a0a      	ldr	r2, [pc, #40]	@ (800ca08 <check_fs+0xa4>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d101      	bne.n	800c9e6 <check_fs+0x82>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e00c      	b.n	800ca00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3330      	adds	r3, #48	@ 0x30
 800c9ea:	3352      	adds	r3, #82	@ 0x52
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fe feeb 	bl	800b7c8 <ld_dword>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	4a05      	ldr	r2, [pc, #20]	@ (800ca0c <check_fs+0xa8>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d101      	bne.n	800c9fe <check_fs+0x9a>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e000      	b.n	800ca00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c9fe:	2302      	movs	r3, #2
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	00544146 	.word	0x00544146
 800ca0c:	33544146 	.word	0x33544146

0800ca10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b096      	sub	sp, #88	@ 0x58
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2200      	movs	r2, #0
 800ca22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f7ff ff58 	bl	800c8da <get_ldnumber>
 800ca2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	da01      	bge.n	800ca36 <find_volume+0x26>
 800ca32:	230b      	movs	r3, #11
 800ca34:	e22d      	b.n	800ce92 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ca36:	4aa1      	ldr	r2, [pc, #644]	@ (800ccbc <find_volume+0x2ac>)
 800ca38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca3e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <find_volume+0x3a>
 800ca46:	230c      	movs	r3, #12
 800ca48:	e223      	b.n	800ce92 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca50:	79fb      	ldrb	r3, [r7, #7]
 800ca52:	f023 0301 	bic.w	r3, r3, #1
 800ca56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01a      	beq.n	800ca96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca62:	785b      	ldrb	r3, [r3, #1]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe fe17 	bl	800b698 <disk_status>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca74:	f003 0301 	and.w	r3, r3, #1
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10c      	bne.n	800ca96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca7c:	79fb      	ldrb	r3, [r7, #7]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d007      	beq.n	800ca92 <find_volume+0x82>
 800ca82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca86:	f003 0304 	and.w	r3, r3, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ca8e:	230a      	movs	r3, #10
 800ca90:	e1ff      	b.n	800ce92 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ca92:	2300      	movs	r3, #0
 800ca94:	e1fd      	b.n	800ce92 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca98:	2200      	movs	r2, #0
 800ca9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800caa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe fe0f 	bl	800b6cc <disk_initialize>
 800caae:	4603      	mov	r3, r0
 800cab0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cab4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cab8:	f003 0301 	and.w	r3, r3, #1
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cac0:	2303      	movs	r3, #3
 800cac2:	e1e6      	b.n	800ce92 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cac4:	79fb      	ldrb	r3, [r7, #7]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d007      	beq.n	800cada <find_volume+0xca>
 800caca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cace:	f003 0304 	and.w	r3, r3, #4
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cad6:	230a      	movs	r3, #10
 800cad8:	e1db      	b.n	800ce92 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cade:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cae0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cae2:	f7ff ff3f 	bl	800c964 <check_fs>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800caec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d149      	bne.n	800cb88 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800caf4:	2300      	movs	r3, #0
 800caf6:	643b      	str	r3, [r7, #64]	@ 0x40
 800caf8:	e01e      	b.n	800cb38 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb02:	011b      	lsls	r3, r3, #4
 800cb04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cb08:	4413      	add	r3, r2
 800cb0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0e:	3304      	adds	r3, #4
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d006      	beq.n	800cb24 <find_volume+0x114>
 800cb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb18:	3308      	adds	r3, #8
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fe fe54 	bl	800b7c8 <ld_dword>
 800cb20:	4602      	mov	r2, r0
 800cb22:	e000      	b.n	800cb26 <find_volume+0x116>
 800cb24:	2200      	movs	r2, #0
 800cb26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	3358      	adds	r3, #88	@ 0x58
 800cb2c:	443b      	add	r3, r7
 800cb2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb34:	3301      	adds	r3, #1
 800cb36:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d9dd      	bls.n	800cafa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb3e:	2300      	movs	r3, #0
 800cb40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cb42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <find_volume+0x13e>
 800cb48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	3358      	adds	r3, #88	@ 0x58
 800cb54:	443b      	add	r3, r7
 800cb56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d005      	beq.n	800cb6e <find_volume+0x15e>
 800cb62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb66:	f7ff fefd 	bl	800c964 <check_fs>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	e000      	b.n	800cb70 <find_volume+0x160>
 800cb6e:	2303      	movs	r3, #3
 800cb70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d905      	bls.n	800cb88 <find_volume+0x178>
 800cb7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb7e:	3301      	adds	r3, #1
 800cb80:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d9e2      	bls.n	800cb4e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	d101      	bne.n	800cb94 <find_volume+0x184>
 800cb90:	2301      	movs	r3, #1
 800cb92:	e17e      	b.n	800ce92 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d901      	bls.n	800cba0 <find_volume+0x190>
 800cb9c:	230d      	movs	r3, #13
 800cb9e:	e178      	b.n	800ce92 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba2:	3330      	adds	r3, #48	@ 0x30
 800cba4:	330b      	adds	r3, #11
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fe fdf6 	bl	800b798 <ld_word>
 800cbac:	4603      	mov	r3, r0
 800cbae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbb2:	d001      	beq.n	800cbb8 <find_volume+0x1a8>
 800cbb4:	230d      	movs	r3, #13
 800cbb6:	e16c      	b.n	800ce92 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbba:	3330      	adds	r3, #48	@ 0x30
 800cbbc:	3316      	adds	r3, #22
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fe fdea 	bl	800b798 <ld_word>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d106      	bne.n	800cbdc <find_volume+0x1cc>
 800cbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd0:	3330      	adds	r3, #48	@ 0x30
 800cbd2:	3324      	adds	r3, #36	@ 0x24
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fe fdf7 	bl	800b7c8 <ld_dword>
 800cbda:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbe0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbee:	789b      	ldrb	r3, [r3, #2]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d005      	beq.n	800cc00 <find_volume+0x1f0>
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf6:	789b      	ldrb	r3, [r3, #2]
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d001      	beq.n	800cc00 <find_volume+0x1f0>
 800cbfc:	230d      	movs	r3, #13
 800cbfe:	e148      	b.n	800ce92 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc02:	789b      	ldrb	r3, [r3, #2]
 800cc04:	461a      	mov	r2, r3
 800cc06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc08:	fb02 f303 	mul.w	r3, r2, r3
 800cc0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc14:	461a      	mov	r2, r3
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1c:	895b      	ldrh	r3, [r3, #10]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d008      	beq.n	800cc34 <find_volume+0x224>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	895b      	ldrh	r3, [r3, #10]
 800cc26:	461a      	mov	r2, r3
 800cc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2a:	895b      	ldrh	r3, [r3, #10]
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	4013      	ands	r3, r2
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d001      	beq.n	800cc38 <find_volume+0x228>
 800cc34:	230d      	movs	r3, #13
 800cc36:	e12c      	b.n	800ce92 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	3330      	adds	r3, #48	@ 0x30
 800cc3c:	3311      	adds	r3, #17
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fdaa 	bl	800b798 <ld_word>
 800cc44:	4603      	mov	r3, r0
 800cc46:	461a      	mov	r2, r3
 800cc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4e:	891b      	ldrh	r3, [r3, #8]
 800cc50:	f003 030f 	and.w	r3, r3, #15
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <find_volume+0x24e>
 800cc5a:	230d      	movs	r3, #13
 800cc5c:	e119      	b.n	800ce92 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	3330      	adds	r3, #48	@ 0x30
 800cc62:	3313      	adds	r3, #19
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fd97 	bl	800b798 <ld_word>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <find_volume+0x272>
 800cc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc76:	3330      	adds	r3, #48	@ 0x30
 800cc78:	3320      	adds	r3, #32
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fe fda4 	bl	800b7c8 <ld_dword>
 800cc80:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc84:	3330      	adds	r3, #48	@ 0x30
 800cc86:	330e      	adds	r3, #14
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7fe fd85 	bl	800b798 <ld_word>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <find_volume+0x28c>
 800cc98:	230d      	movs	r3, #13
 800cc9a:	e0fa      	b.n	800ce92 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc9c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca0:	4413      	add	r3, r2
 800cca2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cca4:	8912      	ldrh	r2, [r2, #8]
 800cca6:	0912      	lsrs	r2, r2, #4
 800cca8:	b292      	uxth	r2, r2
 800ccaa:	4413      	add	r3, r2
 800ccac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ccae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d204      	bcs.n	800ccc0 <find_volume+0x2b0>
 800ccb6:	230d      	movs	r3, #13
 800ccb8:	e0eb      	b.n	800ce92 <find_volume+0x482>
 800ccba:	bf00      	nop
 800ccbc:	2000137c 	.word	0x2000137c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccc8:	8952      	ldrh	r2, [r2, #10]
 800ccca:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccce:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <find_volume+0x2ca>
 800ccd6:	230d      	movs	r3, #13
 800ccd8:	e0db      	b.n	800ce92 <find_volume+0x482>
		fmt = FS_FAT32;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d802      	bhi.n	800ccf0 <find_volume+0x2e0>
 800ccea:	2302      	movs	r3, #2
 800ccec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d802      	bhi.n	800cd00 <find_volume+0x2f0>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd02:	1c9a      	adds	r2, r3, #2
 800cd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd06:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd0c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cd10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd12:	441a      	add	r2, r3
 800cd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd16:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cd18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd1c:	441a      	add	r2, r3
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cd22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	d11e      	bne.n	800cd68 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2c:	3330      	adds	r3, #48	@ 0x30
 800cd2e:	332a      	adds	r3, #42	@ 0x2a
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe fd31 	bl	800b798 <ld_word>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <find_volume+0x330>
 800cd3c:	230d      	movs	r3, #13
 800cd3e:	e0a8      	b.n	800ce92 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd42:	891b      	ldrh	r3, [r3, #8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <find_volume+0x33c>
 800cd48:	230d      	movs	r3, #13
 800cd4a:	e0a2      	b.n	800ce92 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4e:	3330      	adds	r3, #48	@ 0x30
 800cd50:	332c      	adds	r3, #44	@ 0x2c
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fd38 	bl	800b7c8 <ld_dword>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd66:	e01f      	b.n	800cda8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6a:	891b      	ldrh	r3, [r3, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <find_volume+0x364>
 800cd70:	230d      	movs	r3, #13
 800cd72:	e08e      	b.n	800ce92 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd76:	6a1a      	ldr	r2, [r3, #32]
 800cd78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd7a:	441a      	add	r2, r3
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d103      	bne.n	800cd90 <find_volume+0x380>
 800cd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	e00a      	b.n	800cda6 <find_volume+0x396>
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	695a      	ldr	r2, [r3, #20]
 800cd94:	4613      	mov	r3, r2
 800cd96:	005b      	lsls	r3, r3, #1
 800cd98:	4413      	add	r3, r2
 800cd9a:	085a      	lsrs	r2, r3, #1
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cda6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdaa:	699a      	ldr	r2, [r3, #24]
 800cdac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdae:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cdb2:	0a5b      	lsrs	r3, r3, #9
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d201      	bcs.n	800cdbc <find_volume+0x3ac>
 800cdb8:	230d      	movs	r3, #13
 800cdba:	e06a      	b.n	800ce92 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdc2:	611a      	str	r2, [r3, #16]
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc6:	691a      	ldr	r2, [r3, #16]
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdce:	2280      	movs	r2, #128	@ 0x80
 800cdd0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cdd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d149      	bne.n	800ce6e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cddc:	3330      	adds	r3, #48	@ 0x30
 800cdde:	3330      	adds	r3, #48	@ 0x30
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fcd9 	bl	800b798 <ld_word>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d140      	bne.n	800ce6e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cdec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdee:	3301      	adds	r3, #1
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdf4:	f7fe ff44 	bl	800bc80 <move_window>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d137      	bne.n	800ce6e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce00:	2200      	movs	r2, #0
 800ce02:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce06:	3330      	adds	r3, #48	@ 0x30
 800ce08:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fe fcc3 	bl	800b798 <ld_word>
 800ce12:	4603      	mov	r3, r0
 800ce14:	461a      	mov	r2, r3
 800ce16:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d127      	bne.n	800ce6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce20:	3330      	adds	r3, #48	@ 0x30
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe fcd0 	bl	800b7c8 <ld_dword>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	4a1c      	ldr	r2, [pc, #112]	@ (800ce9c <find_volume+0x48c>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d11e      	bne.n	800ce6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce32:	3330      	adds	r3, #48	@ 0x30
 800ce34:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fe fcc5 	bl	800b7c8 <ld_dword>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	4a17      	ldr	r2, [pc, #92]	@ (800cea0 <find_volume+0x490>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d113      	bne.n	800ce6e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce48:	3330      	adds	r3, #48	@ 0x30
 800ce4a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe fcba 	bl	800b7c8 <ld_dword>
 800ce54:	4602      	mov	r2, r0
 800ce56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce58:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce5c:	3330      	adds	r3, #48	@ 0x30
 800ce5e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fcb0 	bl	800b7c8 <ld_dword>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce70:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ce74:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce76:	4b0b      	ldr	r3, [pc, #44]	@ (800cea4 <find_volume+0x494>)
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	4b09      	ldr	r3, [pc, #36]	@ (800cea4 <find_volume+0x494>)
 800ce80:	801a      	strh	r2, [r3, #0]
 800ce82:	4b08      	ldr	r3, [pc, #32]	@ (800cea4 <find_volume+0x494>)
 800ce84:	881a      	ldrh	r2, [r3, #0]
 800ce86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce88:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce8c:	f7fe fe90 	bl	800bbb0 <clear_lock>
#endif
	return FR_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3758      	adds	r7, #88	@ 0x58
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	41615252 	.word	0x41615252
 800cea0:	61417272 	.word	0x61417272
 800cea4:	20001380 	.word	0x20001380

0800cea8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ceba:	f107 0310 	add.w	r3, r7, #16
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff fd0b 	bl	800c8da <get_ldnumber>
 800cec4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	da01      	bge.n	800ced0 <f_mount+0x28>
 800cecc:	230b      	movs	r3, #11
 800cece:	e02b      	b.n	800cf28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ced0:	4a17      	ldr	r2, [pc, #92]	@ (800cf30 <f_mount+0x88>)
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d005      	beq.n	800ceec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cee0:	69b8      	ldr	r0, [r7, #24]
 800cee2:	f7fe fe65 	bl	800bbb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	2200      	movs	r2, #0
 800ceea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	490d      	ldr	r1, [pc, #52]	@ (800cf30 <f_mount+0x88>)
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <f_mount+0x66>
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d001      	beq.n	800cf12 <f_mount+0x6a>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e00a      	b.n	800cf28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf12:	f107 010c 	add.w	r1, r7, #12
 800cf16:	f107 0308 	add.w	r3, r7, #8
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7ff fd77 	bl	800ca10 <find_volume>
 800cf22:	4603      	mov	r3, r0
 800cf24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3720      	adds	r7, #32
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	2000137c 	.word	0x2000137c

0800cf34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b098      	sub	sp, #96	@ 0x60
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d101      	bne.n	800cf4c <f_open+0x18>
 800cf48:	2309      	movs	r3, #9
 800cf4a:	e1a9      	b.n	800d2a0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cf54:	79fa      	ldrb	r2, [r7, #7]
 800cf56:	f107 0110 	add.w	r1, r7, #16
 800cf5a:	f107 0308 	add.w	r3, r7, #8
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff fd56 	bl	800ca10 <find_volume>
 800cf64:	4603      	mov	r3, r0
 800cf66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cf6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f040 818d 	bne.w	800d28e <f_open+0x35a>
		dj.obj.fs = fs;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff fc39 	bl	800c7f8 <follow_path>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d118      	bne.n	800cfc6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf94:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf98:	b25b      	sxtb	r3, r3
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	da03      	bge.n	800cfa6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf9e:	2306      	movs	r3, #6
 800cfa0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cfa4:	e00f      	b.n	800cfc6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	bf8c      	ite	hi
 800cfac:	2301      	movhi	r3, #1
 800cfae:	2300      	movls	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	f107 0314 	add.w	r3, r7, #20
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fe fcec 	bl	800b998 <chk_lock>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	f003 031c 	and.w	r3, r3, #28
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d07f      	beq.n	800d0d0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cfd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d017      	beq.n	800d008 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cfd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfdc:	2b04      	cmp	r3, #4
 800cfde:	d10e      	bne.n	800cffe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cfe0:	f7fe fd36 	bl	800ba50 <enq_lock>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d006      	beq.n	800cff8 <f_open+0xc4>
 800cfea:	f107 0314 	add.w	r3, r7, #20
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff fb3b 	bl	800c66a <dir_register>
 800cff4:	4603      	mov	r3, r0
 800cff6:	e000      	b.n	800cffa <f_open+0xc6>
 800cff8:	2312      	movs	r3, #18
 800cffa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cffe:	79fb      	ldrb	r3, [r7, #7]
 800d000:	f043 0308 	orr.w	r3, r3, #8
 800d004:	71fb      	strb	r3, [r7, #7]
 800d006:	e010      	b.n	800d02a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d008:	7ebb      	ldrb	r3, [r7, #26]
 800d00a:	f003 0311 	and.w	r3, r3, #17
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <f_open+0xe6>
					res = FR_DENIED;
 800d012:	2307      	movs	r3, #7
 800d014:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d018:	e007      	b.n	800d02a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d01a:	79fb      	ldrb	r3, [r7, #7]
 800d01c:	f003 0304 	and.w	r3, r3, #4
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <f_open+0xf6>
 800d024:	2308      	movs	r3, #8
 800d026:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d02a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d168      	bne.n	800d104 <f_open+0x1d0>
 800d032:	79fb      	ldrb	r3, [r7, #7]
 800d034:	f003 0308 	and.w	r3, r3, #8
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d063      	beq.n	800d104 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d03c:	f7fe face 	bl	800b5dc <get_fattime>
 800d040:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d044:	330e      	adds	r3, #14
 800d046:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe fbfb 	bl	800b844 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d050:	3316      	adds	r3, #22
 800d052:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d054:	4618      	mov	r0, r3
 800d056:	f7fe fbf5 	bl	800b844 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05c:	330b      	adds	r3, #11
 800d05e:	2220      	movs	r2, #32
 800d060:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fa6a 	bl	800c542 <ld_clust>
 800d06e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d074:	2200      	movs	r2, #0
 800d076:	4618      	mov	r0, r3
 800d078:	f7ff fa82 	bl	800c580 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07e:	331c      	adds	r3, #28
 800d080:	2100      	movs	r1, #0
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe fbde 	bl	800b844 <st_dword>
					fs->wflag = 1;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	2201      	movs	r2, #1
 800d08c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d037      	beq.n	800d104 <f_open+0x1d0>
						dw = fs->winsect;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d098:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d09a:	f107 0314 	add.w	r3, r7, #20
 800d09e:	2200      	movs	r2, #0
 800d0a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe ffc9 	bl	800c03a <remove_chain>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d126      	bne.n	800d104 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fde0 	bl	800bc80 <move_window>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0ca:	3a01      	subs	r2, #1
 800d0cc:	60da      	str	r2, [r3, #12]
 800d0ce:	e019      	b.n	800d104 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d115      	bne.n	800d104 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d0d8:	7ebb      	ldrb	r3, [r7, #26]
 800d0da:	f003 0310 	and.w	r3, r3, #16
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d003      	beq.n	800d0ea <f_open+0x1b6>
					res = FR_NO_FILE;
 800d0e2:	2304      	movs	r3, #4
 800d0e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d0e8:	e00c      	b.n	800d104 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d0ea:	79fb      	ldrb	r3, [r7, #7]
 800d0ec:	f003 0302 	and.w	r3, r3, #2
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d007      	beq.n	800d104 <f_open+0x1d0>
 800d0f4:	7ebb      	ldrb	r3, [r7, #26]
 800d0f6:	f003 0301 	and.w	r3, r3, #1
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <f_open+0x1d0>
						res = FR_DENIED;
 800d0fe:	2307      	movs	r3, #7
 800d100:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d104:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d126      	bne.n	800d15a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d10c:	79fb      	ldrb	r3, [r7, #7]
 800d10e:	f003 0308 	and.w	r3, r3, #8
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d116:	79fb      	ldrb	r3, [r7, #7]
 800d118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d11c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	bf8c      	ite	hi
 800d132:	2301      	movhi	r3, #1
 800d134:	2300      	movls	r3, #0
 800d136:	b2db      	uxtb	r3, r3
 800d138:	461a      	mov	r2, r3
 800d13a:	f107 0314 	add.w	r3, r7, #20
 800d13e:	4611      	mov	r1, r2
 800d140:	4618      	mov	r0, r3
 800d142:	f7fe fca7 	bl	800ba94 <inc_lock>
 800d146:	4602      	mov	r2, r0
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <f_open+0x226>
 800d154:	2302      	movs	r3, #2
 800d156:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d15a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d15e:	2b00      	cmp	r3, #0
 800d160:	f040 8095 	bne.w	800d28e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d168:	4611      	mov	r1, r2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7ff f9e9 	bl	800c542 <ld_clust>
 800d170:	4602      	mov	r2, r0
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d178:	331c      	adds	r3, #28
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fb24 	bl	800b7c8 <ld_dword>
 800d180:	4602      	mov	r2, r0
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	88da      	ldrh	r2, [r3, #6]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	79fa      	ldrb	r2, [r7, #7]
 800d19e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3330      	adds	r3, #48	@ 0x30
 800d1b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fb8e 	bl	800b8de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d1c2:	79fb      	ldrb	r3, [r7, #7]
 800d1c4:	f003 0320 	and.w	r3, r3, #32
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d060      	beq.n	800d28e <f_open+0x35a>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d05c      	beq.n	800d28e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	68da      	ldr	r2, [r3, #12]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	895b      	ldrh	r3, [r3, #10]
 800d1e0:	025b      	lsls	r3, r3, #9
 800d1e2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1f0:	e016      	b.n	800d220 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fe fd8e 	bl	800bd18 <get_fat>
 800d1fc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d1fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d200:	2b01      	cmp	r3, #1
 800d202:	d802      	bhi.n	800d20a <f_open+0x2d6>
 800d204:	2302      	movs	r3, #2
 800d206:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d20a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d20c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d210:	d102      	bne.n	800d218 <f_open+0x2e4>
 800d212:	2301      	movs	r3, #1
 800d214:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d218:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d21a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d220:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d224:	2b00      	cmp	r3, #0
 800d226:	d103      	bne.n	800d230 <f_open+0x2fc>
 800d228:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d22a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d8e0      	bhi.n	800d1f2 <f_open+0x2be>
				}
				fp->clust = clst;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d234:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d236:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d127      	bne.n	800d28e <f_open+0x35a>
 800d23e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d244:	2b00      	cmp	r3, #0
 800d246:	d022      	beq.n	800d28e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fe fd44 	bl	800bcda <clust2sect>
 800d252:	6478      	str	r0, [r7, #68]	@ 0x44
 800d254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d256:	2b00      	cmp	r3, #0
 800d258:	d103      	bne.n	800d262 <f_open+0x32e>
						res = FR_INT_ERR;
 800d25a:	2302      	movs	r3, #2
 800d25c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d260:	e015      	b.n	800d28e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d264:	0a5a      	lsrs	r2, r3, #9
 800d266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d268:	441a      	add	r2, r3
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	7858      	ldrb	r0, [r3, #1]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6a1a      	ldr	r2, [r3, #32]
 800d27c:	2301      	movs	r3, #1
 800d27e:	f7fe fa4b 	bl	800b718 <disk_read>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <f_open+0x35a>
 800d288:	2301      	movs	r3, #1
 800d28a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d28e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d292:	2b00      	cmp	r3, #0
 800d294:	d002      	beq.n	800d29c <f_open+0x368>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d29c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3760      	adds	r7, #96	@ 0x60
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b092      	sub	sp, #72	@ 0x48
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d2b4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800d2b8:	f107 030c 	add.w	r3, r7, #12
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff fba6 	bl	800ca10 <find_volume>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800d2ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f040 8099 	bne.w	800d406 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d2d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2dc:	691a      	ldr	r2, [r3, #16]
 800d2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	3b02      	subs	r3, #2
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d804      	bhi.n	800d2f2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ea:	691a      	ldr	r2, [r3, #16]
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	e089      	b.n	800d406 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d128      	bne.n	800d350 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d2fe:	2302      	movs	r3, #2
 800d300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d304:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d306:	f107 0314 	add.w	r3, r7, #20
 800d30a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe fd03 	bl	800bd18 <get_fat>
 800d312:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d31a:	d103      	bne.n	800d324 <f_getfree+0x7c>
 800d31c:	2301      	movs	r3, #1
 800d31e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d322:	e063      	b.n	800d3ec <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d326:	2b01      	cmp	r3, #1
 800d328:	d103      	bne.n	800d332 <f_getfree+0x8a>
 800d32a:	2302      	movs	r3, #2
 800d32c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d330:	e05c      	b.n	800d3ec <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <f_getfree+0x96>
 800d338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d33a:	3301      	adds	r3, #1
 800d33c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800d33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d340:	3301      	adds	r3, #1
 800d342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d3db      	bcc.n	800d306 <f_getfree+0x5e>
 800d34e:	e04d      	b.n	800d3ec <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d352:	695b      	ldr	r3, [r3, #20]
 800d354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d360:	2300      	movs	r3, #0
 800d362:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800d364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d366:	2b00      	cmp	r3, #0
 800d368:	d113      	bne.n	800d392 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d36a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d372:	4619      	mov	r1, r3
 800d374:	f7fe fc84 	bl	800bc80 <move_window>
 800d378:	4603      	mov	r3, r0
 800d37a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800d37e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d382:	2b00      	cmp	r3, #0
 800d384:	d131      	bne.n	800d3ea <f_getfree+0x142>
							p = fs->win;
 800d386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d388:	3330      	adds	r3, #48	@ 0x30
 800d38a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800d38c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d390:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b02      	cmp	r3, #2
 800d398:	d10f      	bne.n	800d3ba <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d39a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d39c:	f7fe f9fc 	bl	800b798 <ld_word>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <f_getfree+0x104>
 800d3a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3b4:	3b02      	subs	r3, #2
 800d3b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3b8:	e010      	b.n	800d3dc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d3ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3bc:	f7fe fa04 	bl	800b7c8 <ld_dword>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d102      	bne.n	800d3d0 <f_getfree+0x128>
 800d3ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d8:	3b04      	subs	r3, #4
 800d3da:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800d3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1bd      	bne.n	800d364 <f_getfree+0xbc>
 800d3e8:	e000      	b.n	800d3ec <f_getfree+0x144>
							if (res != FR_OK) break;
 800d3ea:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d3f0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d3f6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fa:	791a      	ldrb	r2, [r3, #4]
 800d3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fe:	f042 0201 	orr.w	r2, r2, #1
 800d402:	b2d2      	uxtb	r2, r2
 800d404:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d406:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3748      	adds	r7, #72	@ 0x48
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
	...

0800d414 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d414:	b480      	push	{r7}
 800d416:	b087      	sub	sp, #28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	4613      	mov	r3, r2
 800d420:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d422:	2301      	movs	r3, #1
 800d424:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d42a:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d42c:	7a5b      	ldrb	r3, [r3, #9]
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d131      	bne.n	800d498 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d434:	4b1c      	ldr	r3, [pc, #112]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d436:	7a5b      	ldrb	r3, [r3, #9]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	461a      	mov	r2, r3
 800d43c:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d43e:	2100      	movs	r1, #0
 800d440:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d442:	4b19      	ldr	r3, [pc, #100]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d444:	7a5b      	ldrb	r3, [r3, #9]
 800d446:	b2db      	uxtb	r3, r3
 800d448:	4a17      	ldr	r2, [pc, #92]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	4413      	add	r3, r2
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d452:	4b15      	ldr	r3, [pc, #84]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d454:	7a5b      	ldrb	r3, [r3, #9]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	461a      	mov	r2, r3
 800d45a:	4b13      	ldr	r3, [pc, #76]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d45c:	4413      	add	r3, r2
 800d45e:	79fa      	ldrb	r2, [r7, #7]
 800d460:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d462:	4b11      	ldr	r3, [pc, #68]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d464:	7a5b      	ldrb	r3, [r3, #9]
 800d466:	b2db      	uxtb	r3, r3
 800d468:	1c5a      	adds	r2, r3, #1
 800d46a:	b2d1      	uxtb	r1, r2
 800d46c:	4a0e      	ldr	r2, [pc, #56]	@ (800d4a8 <FATFS_LinkDriverEx+0x94>)
 800d46e:	7251      	strb	r1, [r2, #9]
 800d470:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d472:	7dbb      	ldrb	r3, [r7, #22]
 800d474:	3330      	adds	r3, #48	@ 0x30
 800d476:	b2da      	uxtb	r2, r3
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	3301      	adds	r3, #1
 800d480:	223a      	movs	r2, #58	@ 0x3a
 800d482:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	3302      	adds	r3, #2
 800d488:	222f      	movs	r2, #47	@ 0x2f
 800d48a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	3303      	adds	r3, #3
 800d490:	2200      	movs	r2, #0
 800d492:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d494:	2300      	movs	r3, #0
 800d496:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d498:	7dfb      	ldrb	r3, [r7, #23]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	200013a4 	.word	0x200013a4

0800d4ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff ffaa 	bl	800d414 <FATFS_LinkDriverEx>
 800d4c0:	4603      	mov	r3, r0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <__cvt>:
 800d4ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ce:	ec57 6b10 	vmov	r6, r7, d0
 800d4d2:	2f00      	cmp	r7, #0
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	463b      	mov	r3, r7
 800d4da:	bfbb      	ittet	lt
 800d4dc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d4e0:	461f      	movlt	r7, r3
 800d4e2:	2300      	movge	r3, #0
 800d4e4:	232d      	movlt	r3, #45	@ 0x2d
 800d4e6:	700b      	strb	r3, [r1, #0]
 800d4e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4ea:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d4ee:	4691      	mov	r9, r2
 800d4f0:	f023 0820 	bic.w	r8, r3, #32
 800d4f4:	bfbc      	itt	lt
 800d4f6:	4632      	movlt	r2, r6
 800d4f8:	4616      	movlt	r6, r2
 800d4fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4fe:	d005      	beq.n	800d50c <__cvt+0x42>
 800d500:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d504:	d100      	bne.n	800d508 <__cvt+0x3e>
 800d506:	3401      	adds	r4, #1
 800d508:	2102      	movs	r1, #2
 800d50a:	e000      	b.n	800d50e <__cvt+0x44>
 800d50c:	2103      	movs	r1, #3
 800d50e:	ab03      	add	r3, sp, #12
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	ab02      	add	r3, sp, #8
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	ec47 6b10 	vmov	d0, r6, r7
 800d51a:	4653      	mov	r3, sl
 800d51c:	4622      	mov	r2, r4
 800d51e:	f002 f80b 	bl	800f538 <_dtoa_r>
 800d522:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d526:	4605      	mov	r5, r0
 800d528:	d119      	bne.n	800d55e <__cvt+0x94>
 800d52a:	f019 0f01 	tst.w	r9, #1
 800d52e:	d00e      	beq.n	800d54e <__cvt+0x84>
 800d530:	eb00 0904 	add.w	r9, r0, r4
 800d534:	2200      	movs	r2, #0
 800d536:	2300      	movs	r3, #0
 800d538:	4630      	mov	r0, r6
 800d53a:	4639      	mov	r1, r7
 800d53c:	f7f3 faec 	bl	8000b18 <__aeabi_dcmpeq>
 800d540:	b108      	cbz	r0, 800d546 <__cvt+0x7c>
 800d542:	f8cd 900c 	str.w	r9, [sp, #12]
 800d546:	2230      	movs	r2, #48	@ 0x30
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	454b      	cmp	r3, r9
 800d54c:	d31e      	bcc.n	800d58c <__cvt+0xc2>
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d552:	1b5b      	subs	r3, r3, r5
 800d554:	4628      	mov	r0, r5
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	b004      	add	sp, #16
 800d55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d55e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d562:	eb00 0904 	add.w	r9, r0, r4
 800d566:	d1e5      	bne.n	800d534 <__cvt+0x6a>
 800d568:	7803      	ldrb	r3, [r0, #0]
 800d56a:	2b30      	cmp	r3, #48	@ 0x30
 800d56c:	d10a      	bne.n	800d584 <__cvt+0xba>
 800d56e:	2200      	movs	r2, #0
 800d570:	2300      	movs	r3, #0
 800d572:	4630      	mov	r0, r6
 800d574:	4639      	mov	r1, r7
 800d576:	f7f3 facf 	bl	8000b18 <__aeabi_dcmpeq>
 800d57a:	b918      	cbnz	r0, 800d584 <__cvt+0xba>
 800d57c:	f1c4 0401 	rsb	r4, r4, #1
 800d580:	f8ca 4000 	str.w	r4, [sl]
 800d584:	f8da 3000 	ldr.w	r3, [sl]
 800d588:	4499      	add	r9, r3
 800d58a:	e7d3      	b.n	800d534 <__cvt+0x6a>
 800d58c:	1c59      	adds	r1, r3, #1
 800d58e:	9103      	str	r1, [sp, #12]
 800d590:	701a      	strb	r2, [r3, #0]
 800d592:	e7d9      	b.n	800d548 <__cvt+0x7e>

0800d594 <__exponent>:
 800d594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d596:	2900      	cmp	r1, #0
 800d598:	bfba      	itte	lt
 800d59a:	4249      	neglt	r1, r1
 800d59c:	232d      	movlt	r3, #45	@ 0x2d
 800d59e:	232b      	movge	r3, #43	@ 0x2b
 800d5a0:	2909      	cmp	r1, #9
 800d5a2:	7002      	strb	r2, [r0, #0]
 800d5a4:	7043      	strb	r3, [r0, #1]
 800d5a6:	dd29      	ble.n	800d5fc <__exponent+0x68>
 800d5a8:	f10d 0307 	add.w	r3, sp, #7
 800d5ac:	461d      	mov	r5, r3
 800d5ae:	270a      	movs	r7, #10
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	fbb1 f6f7 	udiv	r6, r1, r7
 800d5b6:	fb07 1416 	mls	r4, r7, r6, r1
 800d5ba:	3430      	adds	r4, #48	@ 0x30
 800d5bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	2c63      	cmp	r4, #99	@ 0x63
 800d5c4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	dcf1      	bgt.n	800d5b0 <__exponent+0x1c>
 800d5cc:	3130      	adds	r1, #48	@ 0x30
 800d5ce:	1e94      	subs	r4, r2, #2
 800d5d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5d4:	1c41      	adds	r1, r0, #1
 800d5d6:	4623      	mov	r3, r4
 800d5d8:	42ab      	cmp	r3, r5
 800d5da:	d30a      	bcc.n	800d5f2 <__exponent+0x5e>
 800d5dc:	f10d 0309 	add.w	r3, sp, #9
 800d5e0:	1a9b      	subs	r3, r3, r2
 800d5e2:	42ac      	cmp	r4, r5
 800d5e4:	bf88      	it	hi
 800d5e6:	2300      	movhi	r3, #0
 800d5e8:	3302      	adds	r3, #2
 800d5ea:	4403      	add	r3, r0
 800d5ec:	1a18      	subs	r0, r3, r0
 800d5ee:	b003      	add	sp, #12
 800d5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d5f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d5fa:	e7ed      	b.n	800d5d8 <__exponent+0x44>
 800d5fc:	2330      	movs	r3, #48	@ 0x30
 800d5fe:	3130      	adds	r1, #48	@ 0x30
 800d600:	7083      	strb	r3, [r0, #2]
 800d602:	70c1      	strb	r1, [r0, #3]
 800d604:	1d03      	adds	r3, r0, #4
 800d606:	e7f1      	b.n	800d5ec <__exponent+0x58>

0800d608 <_printf_float>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	b08d      	sub	sp, #52	@ 0x34
 800d60e:	460c      	mov	r4, r1
 800d610:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d614:	4616      	mov	r6, r2
 800d616:	461f      	mov	r7, r3
 800d618:	4605      	mov	r5, r0
 800d61a:	f001 fe89 	bl	800f330 <_localeconv_r>
 800d61e:	6803      	ldr	r3, [r0, #0]
 800d620:	9304      	str	r3, [sp, #16]
 800d622:	4618      	mov	r0, r3
 800d624:	f7f2 fe4c 	bl	80002c0 <strlen>
 800d628:	2300      	movs	r3, #0
 800d62a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d62c:	f8d8 3000 	ldr.w	r3, [r8]
 800d630:	9005      	str	r0, [sp, #20]
 800d632:	3307      	adds	r3, #7
 800d634:	f023 0307 	bic.w	r3, r3, #7
 800d638:	f103 0208 	add.w	r2, r3, #8
 800d63c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d640:	f8d4 b000 	ldr.w	fp, [r4]
 800d644:	f8c8 2000 	str.w	r2, [r8]
 800d648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d64c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d650:	9307      	str	r3, [sp, #28]
 800d652:	f8cd 8018 	str.w	r8, [sp, #24]
 800d656:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d65a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d65e:	4b9c      	ldr	r3, [pc, #624]	@ (800d8d0 <_printf_float+0x2c8>)
 800d660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d664:	f7f3 fa8a 	bl	8000b7c <__aeabi_dcmpun>
 800d668:	bb70      	cbnz	r0, 800d6c8 <_printf_float+0xc0>
 800d66a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d66e:	4b98      	ldr	r3, [pc, #608]	@ (800d8d0 <_printf_float+0x2c8>)
 800d670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d674:	f7f3 fa64 	bl	8000b40 <__aeabi_dcmple>
 800d678:	bb30      	cbnz	r0, 800d6c8 <_printf_float+0xc0>
 800d67a:	2200      	movs	r2, #0
 800d67c:	2300      	movs	r3, #0
 800d67e:	4640      	mov	r0, r8
 800d680:	4649      	mov	r1, r9
 800d682:	f7f3 fa53 	bl	8000b2c <__aeabi_dcmplt>
 800d686:	b110      	cbz	r0, 800d68e <_printf_float+0x86>
 800d688:	232d      	movs	r3, #45	@ 0x2d
 800d68a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d68e:	4a91      	ldr	r2, [pc, #580]	@ (800d8d4 <_printf_float+0x2cc>)
 800d690:	4b91      	ldr	r3, [pc, #580]	@ (800d8d8 <_printf_float+0x2d0>)
 800d692:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d696:	bf94      	ite	ls
 800d698:	4690      	movls	r8, r2
 800d69a:	4698      	movhi	r8, r3
 800d69c:	2303      	movs	r3, #3
 800d69e:	6123      	str	r3, [r4, #16]
 800d6a0:	f02b 0304 	bic.w	r3, fp, #4
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	f04f 0900 	mov.w	r9, #0
 800d6aa:	9700      	str	r7, [sp, #0]
 800d6ac:	4633      	mov	r3, r6
 800d6ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f000 fa7c 	bl	800dbb0 <_printf_common>
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	f040 808d 	bne.w	800d7d8 <_printf_float+0x1d0>
 800d6be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6c2:	b00d      	add	sp, #52	@ 0x34
 800d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c8:	4642      	mov	r2, r8
 800d6ca:	464b      	mov	r3, r9
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	4649      	mov	r1, r9
 800d6d0:	f7f3 fa54 	bl	8000b7c <__aeabi_dcmpun>
 800d6d4:	b140      	cbz	r0, 800d6e8 <_printf_float+0xe0>
 800d6d6:	464b      	mov	r3, r9
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bfbc      	itt	lt
 800d6dc:	232d      	movlt	r3, #45	@ 0x2d
 800d6de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6e2:	4a7e      	ldr	r2, [pc, #504]	@ (800d8dc <_printf_float+0x2d4>)
 800d6e4:	4b7e      	ldr	r3, [pc, #504]	@ (800d8e0 <_printf_float+0x2d8>)
 800d6e6:	e7d4      	b.n	800d692 <_printf_float+0x8a>
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d6ee:	9206      	str	r2, [sp, #24]
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	d13b      	bne.n	800d76c <_printf_float+0x164>
 800d6f4:	2306      	movs	r3, #6
 800d6f6:	6063      	str	r3, [r4, #4]
 800d6f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	6022      	str	r2, [r4, #0]
 800d700:	9303      	str	r3, [sp, #12]
 800d702:	ab0a      	add	r3, sp, #40	@ 0x28
 800d704:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d708:	ab09      	add	r3, sp, #36	@ 0x24
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	6861      	ldr	r1, [r4, #4]
 800d70e:	ec49 8b10 	vmov	d0, r8, r9
 800d712:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d716:	4628      	mov	r0, r5
 800d718:	f7ff fed7 	bl	800d4ca <__cvt>
 800d71c:	9b06      	ldr	r3, [sp, #24]
 800d71e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d720:	2b47      	cmp	r3, #71	@ 0x47
 800d722:	4680      	mov	r8, r0
 800d724:	d129      	bne.n	800d77a <_printf_float+0x172>
 800d726:	1cc8      	adds	r0, r1, #3
 800d728:	db02      	blt.n	800d730 <_printf_float+0x128>
 800d72a:	6863      	ldr	r3, [r4, #4]
 800d72c:	4299      	cmp	r1, r3
 800d72e:	dd41      	ble.n	800d7b4 <_printf_float+0x1ac>
 800d730:	f1aa 0a02 	sub.w	sl, sl, #2
 800d734:	fa5f fa8a 	uxtb.w	sl, sl
 800d738:	3901      	subs	r1, #1
 800d73a:	4652      	mov	r2, sl
 800d73c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d740:	9109      	str	r1, [sp, #36]	@ 0x24
 800d742:	f7ff ff27 	bl	800d594 <__exponent>
 800d746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d748:	1813      	adds	r3, r2, r0
 800d74a:	2a01      	cmp	r2, #1
 800d74c:	4681      	mov	r9, r0
 800d74e:	6123      	str	r3, [r4, #16]
 800d750:	dc02      	bgt.n	800d758 <_printf_float+0x150>
 800d752:	6822      	ldr	r2, [r4, #0]
 800d754:	07d2      	lsls	r2, r2, #31
 800d756:	d501      	bpl.n	800d75c <_printf_float+0x154>
 800d758:	3301      	adds	r3, #1
 800d75a:	6123      	str	r3, [r4, #16]
 800d75c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0a2      	beq.n	800d6aa <_printf_float+0xa2>
 800d764:	232d      	movs	r3, #45	@ 0x2d
 800d766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d76a:	e79e      	b.n	800d6aa <_printf_float+0xa2>
 800d76c:	9a06      	ldr	r2, [sp, #24]
 800d76e:	2a47      	cmp	r2, #71	@ 0x47
 800d770:	d1c2      	bne.n	800d6f8 <_printf_float+0xf0>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1c0      	bne.n	800d6f8 <_printf_float+0xf0>
 800d776:	2301      	movs	r3, #1
 800d778:	e7bd      	b.n	800d6f6 <_printf_float+0xee>
 800d77a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d77e:	d9db      	bls.n	800d738 <_printf_float+0x130>
 800d780:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d784:	d118      	bne.n	800d7b8 <_printf_float+0x1b0>
 800d786:	2900      	cmp	r1, #0
 800d788:	6863      	ldr	r3, [r4, #4]
 800d78a:	dd0b      	ble.n	800d7a4 <_printf_float+0x19c>
 800d78c:	6121      	str	r1, [r4, #16]
 800d78e:	b913      	cbnz	r3, 800d796 <_printf_float+0x18e>
 800d790:	6822      	ldr	r2, [r4, #0]
 800d792:	07d0      	lsls	r0, r2, #31
 800d794:	d502      	bpl.n	800d79c <_printf_float+0x194>
 800d796:	3301      	adds	r3, #1
 800d798:	440b      	add	r3, r1
 800d79a:	6123      	str	r3, [r4, #16]
 800d79c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d79e:	f04f 0900 	mov.w	r9, #0
 800d7a2:	e7db      	b.n	800d75c <_printf_float+0x154>
 800d7a4:	b913      	cbnz	r3, 800d7ac <_printf_float+0x1a4>
 800d7a6:	6822      	ldr	r2, [r4, #0]
 800d7a8:	07d2      	lsls	r2, r2, #31
 800d7aa:	d501      	bpl.n	800d7b0 <_printf_float+0x1a8>
 800d7ac:	3302      	adds	r3, #2
 800d7ae:	e7f4      	b.n	800d79a <_printf_float+0x192>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e7f2      	b.n	800d79a <_printf_float+0x192>
 800d7b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d7b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7ba:	4299      	cmp	r1, r3
 800d7bc:	db05      	blt.n	800d7ca <_printf_float+0x1c2>
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	6121      	str	r1, [r4, #16]
 800d7c2:	07d8      	lsls	r0, r3, #31
 800d7c4:	d5ea      	bpl.n	800d79c <_printf_float+0x194>
 800d7c6:	1c4b      	adds	r3, r1, #1
 800d7c8:	e7e7      	b.n	800d79a <_printf_float+0x192>
 800d7ca:	2900      	cmp	r1, #0
 800d7cc:	bfd4      	ite	le
 800d7ce:	f1c1 0202 	rsble	r2, r1, #2
 800d7d2:	2201      	movgt	r2, #1
 800d7d4:	4413      	add	r3, r2
 800d7d6:	e7e0      	b.n	800d79a <_printf_float+0x192>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	055a      	lsls	r2, r3, #21
 800d7dc:	d407      	bmi.n	800d7ee <_printf_float+0x1e6>
 800d7de:	6923      	ldr	r3, [r4, #16]
 800d7e0:	4642      	mov	r2, r8
 800d7e2:	4631      	mov	r1, r6
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	47b8      	blx	r7
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	d12b      	bne.n	800d844 <_printf_float+0x23c>
 800d7ec:	e767      	b.n	800d6be <_printf_float+0xb6>
 800d7ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7f2:	f240 80dd 	bls.w	800d9b0 <_printf_float+0x3a8>
 800d7f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f7f3 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 800d802:	2800      	cmp	r0, #0
 800d804:	d033      	beq.n	800d86e <_printf_float+0x266>
 800d806:	4a37      	ldr	r2, [pc, #220]	@ (800d8e4 <_printf_float+0x2dc>)
 800d808:	2301      	movs	r3, #1
 800d80a:	4631      	mov	r1, r6
 800d80c:	4628      	mov	r0, r5
 800d80e:	47b8      	blx	r7
 800d810:	3001      	adds	r0, #1
 800d812:	f43f af54 	beq.w	800d6be <_printf_float+0xb6>
 800d816:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d81a:	4543      	cmp	r3, r8
 800d81c:	db02      	blt.n	800d824 <_printf_float+0x21c>
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	07d8      	lsls	r0, r3, #31
 800d822:	d50f      	bpl.n	800d844 <_printf_float+0x23c>
 800d824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d828:	4631      	mov	r1, r6
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b8      	blx	r7
 800d82e:	3001      	adds	r0, #1
 800d830:	f43f af45 	beq.w	800d6be <_printf_float+0xb6>
 800d834:	f04f 0900 	mov.w	r9, #0
 800d838:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d83c:	f104 0a1a 	add.w	sl, r4, #26
 800d840:	45c8      	cmp	r8, r9
 800d842:	dc09      	bgt.n	800d858 <_printf_float+0x250>
 800d844:	6823      	ldr	r3, [r4, #0]
 800d846:	079b      	lsls	r3, r3, #30
 800d848:	f100 8103 	bmi.w	800da52 <_printf_float+0x44a>
 800d84c:	68e0      	ldr	r0, [r4, #12]
 800d84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d850:	4298      	cmp	r0, r3
 800d852:	bfb8      	it	lt
 800d854:	4618      	movlt	r0, r3
 800d856:	e734      	b.n	800d6c2 <_printf_float+0xba>
 800d858:	2301      	movs	r3, #1
 800d85a:	4652      	mov	r2, sl
 800d85c:	4631      	mov	r1, r6
 800d85e:	4628      	mov	r0, r5
 800d860:	47b8      	blx	r7
 800d862:	3001      	adds	r0, #1
 800d864:	f43f af2b 	beq.w	800d6be <_printf_float+0xb6>
 800d868:	f109 0901 	add.w	r9, r9, #1
 800d86c:	e7e8      	b.n	800d840 <_printf_float+0x238>
 800d86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d870:	2b00      	cmp	r3, #0
 800d872:	dc39      	bgt.n	800d8e8 <_printf_float+0x2e0>
 800d874:	4a1b      	ldr	r2, [pc, #108]	@ (800d8e4 <_printf_float+0x2dc>)
 800d876:	2301      	movs	r3, #1
 800d878:	4631      	mov	r1, r6
 800d87a:	4628      	mov	r0, r5
 800d87c:	47b8      	blx	r7
 800d87e:	3001      	adds	r0, #1
 800d880:	f43f af1d 	beq.w	800d6be <_printf_float+0xb6>
 800d884:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d888:	ea59 0303 	orrs.w	r3, r9, r3
 800d88c:	d102      	bne.n	800d894 <_printf_float+0x28c>
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	07d9      	lsls	r1, r3, #31
 800d892:	d5d7      	bpl.n	800d844 <_printf_float+0x23c>
 800d894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d898:	4631      	mov	r1, r6
 800d89a:	4628      	mov	r0, r5
 800d89c:	47b8      	blx	r7
 800d89e:	3001      	adds	r0, #1
 800d8a0:	f43f af0d 	beq.w	800d6be <_printf_float+0xb6>
 800d8a4:	f04f 0a00 	mov.w	sl, #0
 800d8a8:	f104 0b1a 	add.w	fp, r4, #26
 800d8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ae:	425b      	negs	r3, r3
 800d8b0:	4553      	cmp	r3, sl
 800d8b2:	dc01      	bgt.n	800d8b8 <_printf_float+0x2b0>
 800d8b4:	464b      	mov	r3, r9
 800d8b6:	e793      	b.n	800d7e0 <_printf_float+0x1d8>
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	465a      	mov	r2, fp
 800d8bc:	4631      	mov	r1, r6
 800d8be:	4628      	mov	r0, r5
 800d8c0:	47b8      	blx	r7
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	f43f aefb 	beq.w	800d6be <_printf_float+0xb6>
 800d8c8:	f10a 0a01 	add.w	sl, sl, #1
 800d8cc:	e7ee      	b.n	800d8ac <_printf_float+0x2a4>
 800d8ce:	bf00      	nop
 800d8d0:	7fefffff 	.word	0x7fefffff
 800d8d4:	08011eec 	.word	0x08011eec
 800d8d8:	08011ef0 	.word	0x08011ef0
 800d8dc:	08011ef4 	.word	0x08011ef4
 800d8e0:	08011ef8 	.word	0x08011ef8
 800d8e4:	08011efc 	.word	0x08011efc
 800d8e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8ee:	4553      	cmp	r3, sl
 800d8f0:	bfa8      	it	ge
 800d8f2:	4653      	movge	r3, sl
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	4699      	mov	r9, r3
 800d8f8:	dc36      	bgt.n	800d968 <_printf_float+0x360>
 800d8fa:	f04f 0b00 	mov.w	fp, #0
 800d8fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d902:	f104 021a 	add.w	r2, r4, #26
 800d906:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d908:	9306      	str	r3, [sp, #24]
 800d90a:	eba3 0309 	sub.w	r3, r3, r9
 800d90e:	455b      	cmp	r3, fp
 800d910:	dc31      	bgt.n	800d976 <_printf_float+0x36e>
 800d912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d914:	459a      	cmp	sl, r3
 800d916:	dc3a      	bgt.n	800d98e <_printf_float+0x386>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	07da      	lsls	r2, r3, #31
 800d91c:	d437      	bmi.n	800d98e <_printf_float+0x386>
 800d91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d920:	ebaa 0903 	sub.w	r9, sl, r3
 800d924:	9b06      	ldr	r3, [sp, #24]
 800d926:	ebaa 0303 	sub.w	r3, sl, r3
 800d92a:	4599      	cmp	r9, r3
 800d92c:	bfa8      	it	ge
 800d92e:	4699      	movge	r9, r3
 800d930:	f1b9 0f00 	cmp.w	r9, #0
 800d934:	dc33      	bgt.n	800d99e <_printf_float+0x396>
 800d936:	f04f 0800 	mov.w	r8, #0
 800d93a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d93e:	f104 0b1a 	add.w	fp, r4, #26
 800d942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d944:	ebaa 0303 	sub.w	r3, sl, r3
 800d948:	eba3 0309 	sub.w	r3, r3, r9
 800d94c:	4543      	cmp	r3, r8
 800d94e:	f77f af79 	ble.w	800d844 <_printf_float+0x23c>
 800d952:	2301      	movs	r3, #1
 800d954:	465a      	mov	r2, fp
 800d956:	4631      	mov	r1, r6
 800d958:	4628      	mov	r0, r5
 800d95a:	47b8      	blx	r7
 800d95c:	3001      	adds	r0, #1
 800d95e:	f43f aeae 	beq.w	800d6be <_printf_float+0xb6>
 800d962:	f108 0801 	add.w	r8, r8, #1
 800d966:	e7ec      	b.n	800d942 <_printf_float+0x33a>
 800d968:	4642      	mov	r2, r8
 800d96a:	4631      	mov	r1, r6
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	d1c2      	bne.n	800d8fa <_printf_float+0x2f2>
 800d974:	e6a3      	b.n	800d6be <_printf_float+0xb6>
 800d976:	2301      	movs	r3, #1
 800d978:	4631      	mov	r1, r6
 800d97a:	4628      	mov	r0, r5
 800d97c:	9206      	str	r2, [sp, #24]
 800d97e:	47b8      	blx	r7
 800d980:	3001      	adds	r0, #1
 800d982:	f43f ae9c 	beq.w	800d6be <_printf_float+0xb6>
 800d986:	9a06      	ldr	r2, [sp, #24]
 800d988:	f10b 0b01 	add.w	fp, fp, #1
 800d98c:	e7bb      	b.n	800d906 <_printf_float+0x2fe>
 800d98e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d992:	4631      	mov	r1, r6
 800d994:	4628      	mov	r0, r5
 800d996:	47b8      	blx	r7
 800d998:	3001      	adds	r0, #1
 800d99a:	d1c0      	bne.n	800d91e <_printf_float+0x316>
 800d99c:	e68f      	b.n	800d6be <_printf_float+0xb6>
 800d99e:	9a06      	ldr	r2, [sp, #24]
 800d9a0:	464b      	mov	r3, r9
 800d9a2:	4442      	add	r2, r8
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	47b8      	blx	r7
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	d1c3      	bne.n	800d936 <_printf_float+0x32e>
 800d9ae:	e686      	b.n	800d6be <_printf_float+0xb6>
 800d9b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9b4:	f1ba 0f01 	cmp.w	sl, #1
 800d9b8:	dc01      	bgt.n	800d9be <_printf_float+0x3b6>
 800d9ba:	07db      	lsls	r3, r3, #31
 800d9bc:	d536      	bpl.n	800da2c <_printf_float+0x424>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	4642      	mov	r2, r8
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	47b8      	blx	r7
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f43f ae78 	beq.w	800d6be <_printf_float+0xb6>
 800d9ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9d2:	4631      	mov	r1, r6
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	47b8      	blx	r7
 800d9d8:	3001      	adds	r0, #1
 800d9da:	f43f ae70 	beq.w	800d6be <_printf_float+0xb6>
 800d9de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d9ea:	f7f3 f895 	bl	8000b18 <__aeabi_dcmpeq>
 800d9ee:	b9c0      	cbnz	r0, 800da22 <_printf_float+0x41a>
 800d9f0:	4653      	mov	r3, sl
 800d9f2:	f108 0201 	add.w	r2, r8, #1
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	d10c      	bne.n	800da1a <_printf_float+0x412>
 800da00:	e65d      	b.n	800d6be <_printf_float+0xb6>
 800da02:	2301      	movs	r3, #1
 800da04:	465a      	mov	r2, fp
 800da06:	4631      	mov	r1, r6
 800da08:	4628      	mov	r0, r5
 800da0a:	47b8      	blx	r7
 800da0c:	3001      	adds	r0, #1
 800da0e:	f43f ae56 	beq.w	800d6be <_printf_float+0xb6>
 800da12:	f108 0801 	add.w	r8, r8, #1
 800da16:	45d0      	cmp	r8, sl
 800da18:	dbf3      	blt.n	800da02 <_printf_float+0x3fa>
 800da1a:	464b      	mov	r3, r9
 800da1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da20:	e6df      	b.n	800d7e2 <_printf_float+0x1da>
 800da22:	f04f 0800 	mov.w	r8, #0
 800da26:	f104 0b1a 	add.w	fp, r4, #26
 800da2a:	e7f4      	b.n	800da16 <_printf_float+0x40e>
 800da2c:	2301      	movs	r3, #1
 800da2e:	4642      	mov	r2, r8
 800da30:	e7e1      	b.n	800d9f6 <_printf_float+0x3ee>
 800da32:	2301      	movs	r3, #1
 800da34:	464a      	mov	r2, r9
 800da36:	4631      	mov	r1, r6
 800da38:	4628      	mov	r0, r5
 800da3a:	47b8      	blx	r7
 800da3c:	3001      	adds	r0, #1
 800da3e:	f43f ae3e 	beq.w	800d6be <_printf_float+0xb6>
 800da42:	f108 0801 	add.w	r8, r8, #1
 800da46:	68e3      	ldr	r3, [r4, #12]
 800da48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da4a:	1a5b      	subs	r3, r3, r1
 800da4c:	4543      	cmp	r3, r8
 800da4e:	dcf0      	bgt.n	800da32 <_printf_float+0x42a>
 800da50:	e6fc      	b.n	800d84c <_printf_float+0x244>
 800da52:	f04f 0800 	mov.w	r8, #0
 800da56:	f104 0919 	add.w	r9, r4, #25
 800da5a:	e7f4      	b.n	800da46 <_printf_float+0x43e>

0800da5c <malloc>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	@ (800da68 <malloc+0xc>)
 800da5e:	4601      	mov	r1, r0
 800da60:	6818      	ldr	r0, [r3, #0]
 800da62:	f000 b825 	b.w	800dab0 <_malloc_r>
 800da66:	bf00      	nop
 800da68:	200001a4 	.word	0x200001a4

0800da6c <sbrk_aligned>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	4e0f      	ldr	r6, [pc, #60]	@ (800daac <sbrk_aligned+0x40>)
 800da70:	460c      	mov	r4, r1
 800da72:	6831      	ldr	r1, [r6, #0]
 800da74:	4605      	mov	r5, r0
 800da76:	b911      	cbnz	r1, 800da7e <sbrk_aligned+0x12>
 800da78:	f001 fc5e 	bl	800f338 <_sbrk_r>
 800da7c:	6030      	str	r0, [r6, #0]
 800da7e:	4621      	mov	r1, r4
 800da80:	4628      	mov	r0, r5
 800da82:	f001 fc59 	bl	800f338 <_sbrk_r>
 800da86:	1c43      	adds	r3, r0, #1
 800da88:	d103      	bne.n	800da92 <sbrk_aligned+0x26>
 800da8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800da8e:	4620      	mov	r0, r4
 800da90:	bd70      	pop	{r4, r5, r6, pc}
 800da92:	1cc4      	adds	r4, r0, #3
 800da94:	f024 0403 	bic.w	r4, r4, #3
 800da98:	42a0      	cmp	r0, r4
 800da9a:	d0f8      	beq.n	800da8e <sbrk_aligned+0x22>
 800da9c:	1a21      	subs	r1, r4, r0
 800da9e:	4628      	mov	r0, r5
 800daa0:	f001 fc4a 	bl	800f338 <_sbrk_r>
 800daa4:	3001      	adds	r0, #1
 800daa6:	d1f2      	bne.n	800da8e <sbrk_aligned+0x22>
 800daa8:	e7ef      	b.n	800da8a <sbrk_aligned+0x1e>
 800daaa:	bf00      	nop
 800daac:	200013b0 	.word	0x200013b0

0800dab0 <_malloc_r>:
 800dab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab4:	1ccd      	adds	r5, r1, #3
 800dab6:	f025 0503 	bic.w	r5, r5, #3
 800daba:	3508      	adds	r5, #8
 800dabc:	2d0c      	cmp	r5, #12
 800dabe:	bf38      	it	cc
 800dac0:	250c      	movcc	r5, #12
 800dac2:	2d00      	cmp	r5, #0
 800dac4:	4606      	mov	r6, r0
 800dac6:	db01      	blt.n	800dacc <_malloc_r+0x1c>
 800dac8:	42a9      	cmp	r1, r5
 800daca:	d904      	bls.n	800dad6 <_malloc_r+0x26>
 800dacc:	230c      	movs	r3, #12
 800dace:	6033      	str	r3, [r6, #0]
 800dad0:	2000      	movs	r0, #0
 800dad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dbac <_malloc_r+0xfc>
 800dada:	f000 fc3f 	bl	800e35c <__malloc_lock>
 800dade:	f8d8 3000 	ldr.w	r3, [r8]
 800dae2:	461c      	mov	r4, r3
 800dae4:	bb44      	cbnz	r4, 800db38 <_malloc_r+0x88>
 800dae6:	4629      	mov	r1, r5
 800dae8:	4630      	mov	r0, r6
 800daea:	f7ff ffbf 	bl	800da6c <sbrk_aligned>
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	4604      	mov	r4, r0
 800daf2:	d158      	bne.n	800dba6 <_malloc_r+0xf6>
 800daf4:	f8d8 4000 	ldr.w	r4, [r8]
 800daf8:	4627      	mov	r7, r4
 800dafa:	2f00      	cmp	r7, #0
 800dafc:	d143      	bne.n	800db86 <_malloc_r+0xd6>
 800dafe:	2c00      	cmp	r4, #0
 800db00:	d04b      	beq.n	800db9a <_malloc_r+0xea>
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	4639      	mov	r1, r7
 800db06:	4630      	mov	r0, r6
 800db08:	eb04 0903 	add.w	r9, r4, r3
 800db0c:	f001 fc14 	bl	800f338 <_sbrk_r>
 800db10:	4581      	cmp	r9, r0
 800db12:	d142      	bne.n	800db9a <_malloc_r+0xea>
 800db14:	6821      	ldr	r1, [r4, #0]
 800db16:	1a6d      	subs	r5, r5, r1
 800db18:	4629      	mov	r1, r5
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7ff ffa6 	bl	800da6c <sbrk_aligned>
 800db20:	3001      	adds	r0, #1
 800db22:	d03a      	beq.n	800db9a <_malloc_r+0xea>
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	442b      	add	r3, r5
 800db28:	6023      	str	r3, [r4, #0]
 800db2a:	f8d8 3000 	ldr.w	r3, [r8]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	bb62      	cbnz	r2, 800db8c <_malloc_r+0xdc>
 800db32:	f8c8 7000 	str.w	r7, [r8]
 800db36:	e00f      	b.n	800db58 <_malloc_r+0xa8>
 800db38:	6822      	ldr	r2, [r4, #0]
 800db3a:	1b52      	subs	r2, r2, r5
 800db3c:	d420      	bmi.n	800db80 <_malloc_r+0xd0>
 800db3e:	2a0b      	cmp	r2, #11
 800db40:	d917      	bls.n	800db72 <_malloc_r+0xc2>
 800db42:	1961      	adds	r1, r4, r5
 800db44:	42a3      	cmp	r3, r4
 800db46:	6025      	str	r5, [r4, #0]
 800db48:	bf18      	it	ne
 800db4a:	6059      	strne	r1, [r3, #4]
 800db4c:	6863      	ldr	r3, [r4, #4]
 800db4e:	bf08      	it	eq
 800db50:	f8c8 1000 	streq.w	r1, [r8]
 800db54:	5162      	str	r2, [r4, r5]
 800db56:	604b      	str	r3, [r1, #4]
 800db58:	4630      	mov	r0, r6
 800db5a:	f000 fc05 	bl	800e368 <__malloc_unlock>
 800db5e:	f104 000b 	add.w	r0, r4, #11
 800db62:	1d23      	adds	r3, r4, #4
 800db64:	f020 0007 	bic.w	r0, r0, #7
 800db68:	1ac2      	subs	r2, r0, r3
 800db6a:	bf1c      	itt	ne
 800db6c:	1a1b      	subne	r3, r3, r0
 800db6e:	50a3      	strne	r3, [r4, r2]
 800db70:	e7af      	b.n	800dad2 <_malloc_r+0x22>
 800db72:	6862      	ldr	r2, [r4, #4]
 800db74:	42a3      	cmp	r3, r4
 800db76:	bf0c      	ite	eq
 800db78:	f8c8 2000 	streq.w	r2, [r8]
 800db7c:	605a      	strne	r2, [r3, #4]
 800db7e:	e7eb      	b.n	800db58 <_malloc_r+0xa8>
 800db80:	4623      	mov	r3, r4
 800db82:	6864      	ldr	r4, [r4, #4]
 800db84:	e7ae      	b.n	800dae4 <_malloc_r+0x34>
 800db86:	463c      	mov	r4, r7
 800db88:	687f      	ldr	r7, [r7, #4]
 800db8a:	e7b6      	b.n	800dafa <_malloc_r+0x4a>
 800db8c:	461a      	mov	r2, r3
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	42a3      	cmp	r3, r4
 800db92:	d1fb      	bne.n	800db8c <_malloc_r+0xdc>
 800db94:	2300      	movs	r3, #0
 800db96:	6053      	str	r3, [r2, #4]
 800db98:	e7de      	b.n	800db58 <_malloc_r+0xa8>
 800db9a:	230c      	movs	r3, #12
 800db9c:	6033      	str	r3, [r6, #0]
 800db9e:	4630      	mov	r0, r6
 800dba0:	f000 fbe2 	bl	800e368 <__malloc_unlock>
 800dba4:	e794      	b.n	800dad0 <_malloc_r+0x20>
 800dba6:	6005      	str	r5, [r0, #0]
 800dba8:	e7d6      	b.n	800db58 <_malloc_r+0xa8>
 800dbaa:	bf00      	nop
 800dbac:	200013b4 	.word	0x200013b4

0800dbb0 <_printf_common>:
 800dbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb4:	4616      	mov	r6, r2
 800dbb6:	4698      	mov	r8, r3
 800dbb8:	688a      	ldr	r2, [r1, #8]
 800dbba:	690b      	ldr	r3, [r1, #16]
 800dbbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	bfb8      	it	lt
 800dbc4:	4613      	movlt	r3, r2
 800dbc6:	6033      	str	r3, [r6, #0]
 800dbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dbcc:	4607      	mov	r7, r0
 800dbce:	460c      	mov	r4, r1
 800dbd0:	b10a      	cbz	r2, 800dbd6 <_printf_common+0x26>
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	6033      	str	r3, [r6, #0]
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	0699      	lsls	r1, r3, #26
 800dbda:	bf42      	ittt	mi
 800dbdc:	6833      	ldrmi	r3, [r6, #0]
 800dbde:	3302      	addmi	r3, #2
 800dbe0:	6033      	strmi	r3, [r6, #0]
 800dbe2:	6825      	ldr	r5, [r4, #0]
 800dbe4:	f015 0506 	ands.w	r5, r5, #6
 800dbe8:	d106      	bne.n	800dbf8 <_printf_common+0x48>
 800dbea:	f104 0a19 	add.w	sl, r4, #25
 800dbee:	68e3      	ldr	r3, [r4, #12]
 800dbf0:	6832      	ldr	r2, [r6, #0]
 800dbf2:	1a9b      	subs	r3, r3, r2
 800dbf4:	42ab      	cmp	r3, r5
 800dbf6:	dc26      	bgt.n	800dc46 <_printf_common+0x96>
 800dbf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dbfc:	6822      	ldr	r2, [r4, #0]
 800dbfe:	3b00      	subs	r3, #0
 800dc00:	bf18      	it	ne
 800dc02:	2301      	movne	r3, #1
 800dc04:	0692      	lsls	r2, r2, #26
 800dc06:	d42b      	bmi.n	800dc60 <_printf_common+0xb0>
 800dc08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc0c:	4641      	mov	r1, r8
 800dc0e:	4638      	mov	r0, r7
 800dc10:	47c8      	blx	r9
 800dc12:	3001      	adds	r0, #1
 800dc14:	d01e      	beq.n	800dc54 <_printf_common+0xa4>
 800dc16:	6823      	ldr	r3, [r4, #0]
 800dc18:	6922      	ldr	r2, [r4, #16]
 800dc1a:	f003 0306 	and.w	r3, r3, #6
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	bf02      	ittt	eq
 800dc22:	68e5      	ldreq	r5, [r4, #12]
 800dc24:	6833      	ldreq	r3, [r6, #0]
 800dc26:	1aed      	subeq	r5, r5, r3
 800dc28:	68a3      	ldr	r3, [r4, #8]
 800dc2a:	bf0c      	ite	eq
 800dc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc30:	2500      	movne	r5, #0
 800dc32:	4293      	cmp	r3, r2
 800dc34:	bfc4      	itt	gt
 800dc36:	1a9b      	subgt	r3, r3, r2
 800dc38:	18ed      	addgt	r5, r5, r3
 800dc3a:	2600      	movs	r6, #0
 800dc3c:	341a      	adds	r4, #26
 800dc3e:	42b5      	cmp	r5, r6
 800dc40:	d11a      	bne.n	800dc78 <_printf_common+0xc8>
 800dc42:	2000      	movs	r0, #0
 800dc44:	e008      	b.n	800dc58 <_printf_common+0xa8>
 800dc46:	2301      	movs	r3, #1
 800dc48:	4652      	mov	r2, sl
 800dc4a:	4641      	mov	r1, r8
 800dc4c:	4638      	mov	r0, r7
 800dc4e:	47c8      	blx	r9
 800dc50:	3001      	adds	r0, #1
 800dc52:	d103      	bne.n	800dc5c <_printf_common+0xac>
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5c:	3501      	adds	r5, #1
 800dc5e:	e7c6      	b.n	800dbee <_printf_common+0x3e>
 800dc60:	18e1      	adds	r1, r4, r3
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	2030      	movs	r0, #48	@ 0x30
 800dc66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc6a:	4422      	add	r2, r4
 800dc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc74:	3302      	adds	r3, #2
 800dc76:	e7c7      	b.n	800dc08 <_printf_common+0x58>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	4622      	mov	r2, r4
 800dc7c:	4641      	mov	r1, r8
 800dc7e:	4638      	mov	r0, r7
 800dc80:	47c8      	blx	r9
 800dc82:	3001      	adds	r0, #1
 800dc84:	d0e6      	beq.n	800dc54 <_printf_common+0xa4>
 800dc86:	3601      	adds	r6, #1
 800dc88:	e7d9      	b.n	800dc3e <_printf_common+0x8e>
	...

0800dc8c <_printf_i>:
 800dc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc90:	7e0f      	ldrb	r7, [r1, #24]
 800dc92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc94:	2f78      	cmp	r7, #120	@ 0x78
 800dc96:	4691      	mov	r9, r2
 800dc98:	4680      	mov	r8, r0
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	469a      	mov	sl, r3
 800dc9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dca2:	d807      	bhi.n	800dcb4 <_printf_i+0x28>
 800dca4:	2f62      	cmp	r7, #98	@ 0x62
 800dca6:	d80a      	bhi.n	800dcbe <_printf_i+0x32>
 800dca8:	2f00      	cmp	r7, #0
 800dcaa:	f000 80d2 	beq.w	800de52 <_printf_i+0x1c6>
 800dcae:	2f58      	cmp	r7, #88	@ 0x58
 800dcb0:	f000 80b9 	beq.w	800de26 <_printf_i+0x19a>
 800dcb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dcbc:	e03a      	b.n	800dd34 <_printf_i+0xa8>
 800dcbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcc2:	2b15      	cmp	r3, #21
 800dcc4:	d8f6      	bhi.n	800dcb4 <_printf_i+0x28>
 800dcc6:	a101      	add	r1, pc, #4	@ (adr r1, 800dccc <_printf_i+0x40>)
 800dcc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dccc:	0800dd25 	.word	0x0800dd25
 800dcd0:	0800dd39 	.word	0x0800dd39
 800dcd4:	0800dcb5 	.word	0x0800dcb5
 800dcd8:	0800dcb5 	.word	0x0800dcb5
 800dcdc:	0800dcb5 	.word	0x0800dcb5
 800dce0:	0800dcb5 	.word	0x0800dcb5
 800dce4:	0800dd39 	.word	0x0800dd39
 800dce8:	0800dcb5 	.word	0x0800dcb5
 800dcec:	0800dcb5 	.word	0x0800dcb5
 800dcf0:	0800dcb5 	.word	0x0800dcb5
 800dcf4:	0800dcb5 	.word	0x0800dcb5
 800dcf8:	0800de39 	.word	0x0800de39
 800dcfc:	0800dd63 	.word	0x0800dd63
 800dd00:	0800ddf3 	.word	0x0800ddf3
 800dd04:	0800dcb5 	.word	0x0800dcb5
 800dd08:	0800dcb5 	.word	0x0800dcb5
 800dd0c:	0800de5b 	.word	0x0800de5b
 800dd10:	0800dcb5 	.word	0x0800dcb5
 800dd14:	0800dd63 	.word	0x0800dd63
 800dd18:	0800dcb5 	.word	0x0800dcb5
 800dd1c:	0800dcb5 	.word	0x0800dcb5
 800dd20:	0800ddfb 	.word	0x0800ddfb
 800dd24:	6833      	ldr	r3, [r6, #0]
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6032      	str	r2, [r6, #0]
 800dd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd34:	2301      	movs	r3, #1
 800dd36:	e09d      	b.n	800de74 <_printf_i+0x1e8>
 800dd38:	6833      	ldr	r3, [r6, #0]
 800dd3a:	6820      	ldr	r0, [r4, #0]
 800dd3c:	1d19      	adds	r1, r3, #4
 800dd3e:	6031      	str	r1, [r6, #0]
 800dd40:	0606      	lsls	r6, r0, #24
 800dd42:	d501      	bpl.n	800dd48 <_printf_i+0xbc>
 800dd44:	681d      	ldr	r5, [r3, #0]
 800dd46:	e003      	b.n	800dd50 <_printf_i+0xc4>
 800dd48:	0645      	lsls	r5, r0, #25
 800dd4a:	d5fb      	bpl.n	800dd44 <_printf_i+0xb8>
 800dd4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd50:	2d00      	cmp	r5, #0
 800dd52:	da03      	bge.n	800dd5c <_printf_i+0xd0>
 800dd54:	232d      	movs	r3, #45	@ 0x2d
 800dd56:	426d      	negs	r5, r5
 800dd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd5c:	4859      	ldr	r0, [pc, #356]	@ (800dec4 <_printf_i+0x238>)
 800dd5e:	230a      	movs	r3, #10
 800dd60:	e011      	b.n	800dd86 <_printf_i+0xfa>
 800dd62:	6821      	ldr	r1, [r4, #0]
 800dd64:	6833      	ldr	r3, [r6, #0]
 800dd66:	0608      	lsls	r0, r1, #24
 800dd68:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd6c:	d402      	bmi.n	800dd74 <_printf_i+0xe8>
 800dd6e:	0649      	lsls	r1, r1, #25
 800dd70:	bf48      	it	mi
 800dd72:	b2ad      	uxthmi	r5, r5
 800dd74:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd76:	4853      	ldr	r0, [pc, #332]	@ (800dec4 <_printf_i+0x238>)
 800dd78:	6033      	str	r3, [r6, #0]
 800dd7a:	bf14      	ite	ne
 800dd7c:	230a      	movne	r3, #10
 800dd7e:	2308      	moveq	r3, #8
 800dd80:	2100      	movs	r1, #0
 800dd82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd86:	6866      	ldr	r6, [r4, #4]
 800dd88:	60a6      	str	r6, [r4, #8]
 800dd8a:	2e00      	cmp	r6, #0
 800dd8c:	bfa2      	ittt	ge
 800dd8e:	6821      	ldrge	r1, [r4, #0]
 800dd90:	f021 0104 	bicge.w	r1, r1, #4
 800dd94:	6021      	strge	r1, [r4, #0]
 800dd96:	b90d      	cbnz	r5, 800dd9c <_printf_i+0x110>
 800dd98:	2e00      	cmp	r6, #0
 800dd9a:	d04b      	beq.n	800de34 <_printf_i+0x1a8>
 800dd9c:	4616      	mov	r6, r2
 800dd9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800dda2:	fb03 5711 	mls	r7, r3, r1, r5
 800dda6:	5dc7      	ldrb	r7, [r0, r7]
 800dda8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddac:	462f      	mov	r7, r5
 800ddae:	42bb      	cmp	r3, r7
 800ddb0:	460d      	mov	r5, r1
 800ddb2:	d9f4      	bls.n	800dd9e <_printf_i+0x112>
 800ddb4:	2b08      	cmp	r3, #8
 800ddb6:	d10b      	bne.n	800ddd0 <_printf_i+0x144>
 800ddb8:	6823      	ldr	r3, [r4, #0]
 800ddba:	07df      	lsls	r7, r3, #31
 800ddbc:	d508      	bpl.n	800ddd0 <_printf_i+0x144>
 800ddbe:	6923      	ldr	r3, [r4, #16]
 800ddc0:	6861      	ldr	r1, [r4, #4]
 800ddc2:	4299      	cmp	r1, r3
 800ddc4:	bfde      	ittt	le
 800ddc6:	2330      	movle	r3, #48	@ 0x30
 800ddc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddcc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ddd0:	1b92      	subs	r2, r2, r6
 800ddd2:	6122      	str	r2, [r4, #16]
 800ddd4:	f8cd a000 	str.w	sl, [sp]
 800ddd8:	464b      	mov	r3, r9
 800ddda:	aa03      	add	r2, sp, #12
 800dddc:	4621      	mov	r1, r4
 800ddde:	4640      	mov	r0, r8
 800dde0:	f7ff fee6 	bl	800dbb0 <_printf_common>
 800dde4:	3001      	adds	r0, #1
 800dde6:	d14a      	bne.n	800de7e <_printf_i+0x1f2>
 800dde8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddec:	b004      	add	sp, #16
 800ddee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	f043 0320 	orr.w	r3, r3, #32
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	4833      	ldr	r0, [pc, #204]	@ (800dec8 <_printf_i+0x23c>)
 800ddfc:	2778      	movs	r7, #120	@ 0x78
 800ddfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	6831      	ldr	r1, [r6, #0]
 800de06:	061f      	lsls	r7, r3, #24
 800de08:	f851 5b04 	ldr.w	r5, [r1], #4
 800de0c:	d402      	bmi.n	800de14 <_printf_i+0x188>
 800de0e:	065f      	lsls	r7, r3, #25
 800de10:	bf48      	it	mi
 800de12:	b2ad      	uxthmi	r5, r5
 800de14:	6031      	str	r1, [r6, #0]
 800de16:	07d9      	lsls	r1, r3, #31
 800de18:	bf44      	itt	mi
 800de1a:	f043 0320 	orrmi.w	r3, r3, #32
 800de1e:	6023      	strmi	r3, [r4, #0]
 800de20:	b11d      	cbz	r5, 800de2a <_printf_i+0x19e>
 800de22:	2310      	movs	r3, #16
 800de24:	e7ac      	b.n	800dd80 <_printf_i+0xf4>
 800de26:	4827      	ldr	r0, [pc, #156]	@ (800dec4 <_printf_i+0x238>)
 800de28:	e7e9      	b.n	800ddfe <_printf_i+0x172>
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	f023 0320 	bic.w	r3, r3, #32
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	e7f6      	b.n	800de22 <_printf_i+0x196>
 800de34:	4616      	mov	r6, r2
 800de36:	e7bd      	b.n	800ddb4 <_printf_i+0x128>
 800de38:	6833      	ldr	r3, [r6, #0]
 800de3a:	6825      	ldr	r5, [r4, #0]
 800de3c:	6961      	ldr	r1, [r4, #20]
 800de3e:	1d18      	adds	r0, r3, #4
 800de40:	6030      	str	r0, [r6, #0]
 800de42:	062e      	lsls	r6, r5, #24
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	d501      	bpl.n	800de4c <_printf_i+0x1c0>
 800de48:	6019      	str	r1, [r3, #0]
 800de4a:	e002      	b.n	800de52 <_printf_i+0x1c6>
 800de4c:	0668      	lsls	r0, r5, #25
 800de4e:	d5fb      	bpl.n	800de48 <_printf_i+0x1bc>
 800de50:	8019      	strh	r1, [r3, #0]
 800de52:	2300      	movs	r3, #0
 800de54:	6123      	str	r3, [r4, #16]
 800de56:	4616      	mov	r6, r2
 800de58:	e7bc      	b.n	800ddd4 <_printf_i+0x148>
 800de5a:	6833      	ldr	r3, [r6, #0]
 800de5c:	1d1a      	adds	r2, r3, #4
 800de5e:	6032      	str	r2, [r6, #0]
 800de60:	681e      	ldr	r6, [r3, #0]
 800de62:	6862      	ldr	r2, [r4, #4]
 800de64:	2100      	movs	r1, #0
 800de66:	4630      	mov	r0, r6
 800de68:	f7f2 f9da 	bl	8000220 <memchr>
 800de6c:	b108      	cbz	r0, 800de72 <_printf_i+0x1e6>
 800de6e:	1b80      	subs	r0, r0, r6
 800de70:	6060      	str	r0, [r4, #4]
 800de72:	6863      	ldr	r3, [r4, #4]
 800de74:	6123      	str	r3, [r4, #16]
 800de76:	2300      	movs	r3, #0
 800de78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de7c:	e7aa      	b.n	800ddd4 <_printf_i+0x148>
 800de7e:	6923      	ldr	r3, [r4, #16]
 800de80:	4632      	mov	r2, r6
 800de82:	4649      	mov	r1, r9
 800de84:	4640      	mov	r0, r8
 800de86:	47d0      	blx	sl
 800de88:	3001      	adds	r0, #1
 800de8a:	d0ad      	beq.n	800dde8 <_printf_i+0x15c>
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	079b      	lsls	r3, r3, #30
 800de90:	d413      	bmi.n	800deba <_printf_i+0x22e>
 800de92:	68e0      	ldr	r0, [r4, #12]
 800de94:	9b03      	ldr	r3, [sp, #12]
 800de96:	4298      	cmp	r0, r3
 800de98:	bfb8      	it	lt
 800de9a:	4618      	movlt	r0, r3
 800de9c:	e7a6      	b.n	800ddec <_printf_i+0x160>
 800de9e:	2301      	movs	r3, #1
 800dea0:	4632      	mov	r2, r6
 800dea2:	4649      	mov	r1, r9
 800dea4:	4640      	mov	r0, r8
 800dea6:	47d0      	blx	sl
 800dea8:	3001      	adds	r0, #1
 800deaa:	d09d      	beq.n	800dde8 <_printf_i+0x15c>
 800deac:	3501      	adds	r5, #1
 800deae:	68e3      	ldr	r3, [r4, #12]
 800deb0:	9903      	ldr	r1, [sp, #12]
 800deb2:	1a5b      	subs	r3, r3, r1
 800deb4:	42ab      	cmp	r3, r5
 800deb6:	dcf2      	bgt.n	800de9e <_printf_i+0x212>
 800deb8:	e7eb      	b.n	800de92 <_printf_i+0x206>
 800deba:	2500      	movs	r5, #0
 800debc:	f104 0619 	add.w	r6, r4, #25
 800dec0:	e7f5      	b.n	800deae <_printf_i+0x222>
 800dec2:	bf00      	nop
 800dec4:	08011efe 	.word	0x08011efe
 800dec8:	08011f0f 	.word	0x08011f0f

0800decc <_scanf_float>:
 800decc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded0:	b087      	sub	sp, #28
 800ded2:	4617      	mov	r7, r2
 800ded4:	9303      	str	r3, [sp, #12]
 800ded6:	688b      	ldr	r3, [r1, #8]
 800ded8:	1e5a      	subs	r2, r3, #1
 800deda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dede:	bf81      	itttt	hi
 800dee0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dee4:	eb03 0b05 	addhi.w	fp, r3, r5
 800dee8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800deec:	608b      	strhi	r3, [r1, #8]
 800deee:	680b      	ldr	r3, [r1, #0]
 800def0:	460a      	mov	r2, r1
 800def2:	f04f 0500 	mov.w	r5, #0
 800def6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800defa:	f842 3b1c 	str.w	r3, [r2], #28
 800defe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800df02:	4680      	mov	r8, r0
 800df04:	460c      	mov	r4, r1
 800df06:	bf98      	it	ls
 800df08:	f04f 0b00 	movls.w	fp, #0
 800df0c:	9201      	str	r2, [sp, #4]
 800df0e:	4616      	mov	r6, r2
 800df10:	46aa      	mov	sl, r5
 800df12:	46a9      	mov	r9, r5
 800df14:	9502      	str	r5, [sp, #8]
 800df16:	68a2      	ldr	r2, [r4, #8]
 800df18:	b152      	cbz	r2, 800df30 <_scanf_float+0x64>
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b4e      	cmp	r3, #78	@ 0x4e
 800df20:	d864      	bhi.n	800dfec <_scanf_float+0x120>
 800df22:	2b40      	cmp	r3, #64	@ 0x40
 800df24:	d83c      	bhi.n	800dfa0 <_scanf_float+0xd4>
 800df26:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800df2a:	b2c8      	uxtb	r0, r1
 800df2c:	280e      	cmp	r0, #14
 800df2e:	d93a      	bls.n	800dfa6 <_scanf_float+0xda>
 800df30:	f1b9 0f00 	cmp.w	r9, #0
 800df34:	d003      	beq.n	800df3e <_scanf_float+0x72>
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800df42:	f1ba 0f01 	cmp.w	sl, #1
 800df46:	f200 8117 	bhi.w	800e178 <_scanf_float+0x2ac>
 800df4a:	9b01      	ldr	r3, [sp, #4]
 800df4c:	429e      	cmp	r6, r3
 800df4e:	f200 8108 	bhi.w	800e162 <_scanf_float+0x296>
 800df52:	2001      	movs	r0, #1
 800df54:	b007      	add	sp, #28
 800df56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800df5e:	2a0d      	cmp	r2, #13
 800df60:	d8e6      	bhi.n	800df30 <_scanf_float+0x64>
 800df62:	a101      	add	r1, pc, #4	@ (adr r1, 800df68 <_scanf_float+0x9c>)
 800df64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df68:	0800e0af 	.word	0x0800e0af
 800df6c:	0800df31 	.word	0x0800df31
 800df70:	0800df31 	.word	0x0800df31
 800df74:	0800df31 	.word	0x0800df31
 800df78:	0800e10f 	.word	0x0800e10f
 800df7c:	0800e0e7 	.word	0x0800e0e7
 800df80:	0800df31 	.word	0x0800df31
 800df84:	0800df31 	.word	0x0800df31
 800df88:	0800e0bd 	.word	0x0800e0bd
 800df8c:	0800df31 	.word	0x0800df31
 800df90:	0800df31 	.word	0x0800df31
 800df94:	0800df31 	.word	0x0800df31
 800df98:	0800df31 	.word	0x0800df31
 800df9c:	0800e075 	.word	0x0800e075
 800dfa0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dfa4:	e7db      	b.n	800df5e <_scanf_float+0x92>
 800dfa6:	290e      	cmp	r1, #14
 800dfa8:	d8c2      	bhi.n	800df30 <_scanf_float+0x64>
 800dfaa:	a001      	add	r0, pc, #4	@ (adr r0, 800dfb0 <_scanf_float+0xe4>)
 800dfac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dfb0:	0800e065 	.word	0x0800e065
 800dfb4:	0800df31 	.word	0x0800df31
 800dfb8:	0800e065 	.word	0x0800e065
 800dfbc:	0800e0fb 	.word	0x0800e0fb
 800dfc0:	0800df31 	.word	0x0800df31
 800dfc4:	0800e00d 	.word	0x0800e00d
 800dfc8:	0800e04b 	.word	0x0800e04b
 800dfcc:	0800e04b 	.word	0x0800e04b
 800dfd0:	0800e04b 	.word	0x0800e04b
 800dfd4:	0800e04b 	.word	0x0800e04b
 800dfd8:	0800e04b 	.word	0x0800e04b
 800dfdc:	0800e04b 	.word	0x0800e04b
 800dfe0:	0800e04b 	.word	0x0800e04b
 800dfe4:	0800e04b 	.word	0x0800e04b
 800dfe8:	0800e04b 	.word	0x0800e04b
 800dfec:	2b6e      	cmp	r3, #110	@ 0x6e
 800dfee:	d809      	bhi.n	800e004 <_scanf_float+0x138>
 800dff0:	2b60      	cmp	r3, #96	@ 0x60
 800dff2:	d8b2      	bhi.n	800df5a <_scanf_float+0x8e>
 800dff4:	2b54      	cmp	r3, #84	@ 0x54
 800dff6:	d07b      	beq.n	800e0f0 <_scanf_float+0x224>
 800dff8:	2b59      	cmp	r3, #89	@ 0x59
 800dffa:	d199      	bne.n	800df30 <_scanf_float+0x64>
 800dffc:	2d07      	cmp	r5, #7
 800dffe:	d197      	bne.n	800df30 <_scanf_float+0x64>
 800e000:	2508      	movs	r5, #8
 800e002:	e02c      	b.n	800e05e <_scanf_float+0x192>
 800e004:	2b74      	cmp	r3, #116	@ 0x74
 800e006:	d073      	beq.n	800e0f0 <_scanf_float+0x224>
 800e008:	2b79      	cmp	r3, #121	@ 0x79
 800e00a:	e7f6      	b.n	800dffa <_scanf_float+0x12e>
 800e00c:	6821      	ldr	r1, [r4, #0]
 800e00e:	05c8      	lsls	r0, r1, #23
 800e010:	d51b      	bpl.n	800e04a <_scanf_float+0x17e>
 800e012:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e016:	6021      	str	r1, [r4, #0]
 800e018:	f109 0901 	add.w	r9, r9, #1
 800e01c:	f1bb 0f00 	cmp.w	fp, #0
 800e020:	d003      	beq.n	800e02a <_scanf_float+0x15e>
 800e022:	3201      	adds	r2, #1
 800e024:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800e028:	60a2      	str	r2, [r4, #8]
 800e02a:	68a3      	ldr	r3, [r4, #8]
 800e02c:	3b01      	subs	r3, #1
 800e02e:	60a3      	str	r3, [r4, #8]
 800e030:	6923      	ldr	r3, [r4, #16]
 800e032:	3301      	adds	r3, #1
 800e034:	6123      	str	r3, [r4, #16]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	3b01      	subs	r3, #1
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	607b      	str	r3, [r7, #4]
 800e03e:	f340 8087 	ble.w	800e150 <_scanf_float+0x284>
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	603b      	str	r3, [r7, #0]
 800e048:	e765      	b.n	800df16 <_scanf_float+0x4a>
 800e04a:	eb1a 0105 	adds.w	r1, sl, r5
 800e04e:	f47f af6f 	bne.w	800df30 <_scanf_float+0x64>
 800e052:	6822      	ldr	r2, [r4, #0]
 800e054:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e058:	6022      	str	r2, [r4, #0]
 800e05a:	460d      	mov	r5, r1
 800e05c:	468a      	mov	sl, r1
 800e05e:	f806 3b01 	strb.w	r3, [r6], #1
 800e062:	e7e2      	b.n	800e02a <_scanf_float+0x15e>
 800e064:	6822      	ldr	r2, [r4, #0]
 800e066:	0610      	lsls	r0, r2, #24
 800e068:	f57f af62 	bpl.w	800df30 <_scanf_float+0x64>
 800e06c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e070:	6022      	str	r2, [r4, #0]
 800e072:	e7f4      	b.n	800e05e <_scanf_float+0x192>
 800e074:	f1ba 0f00 	cmp.w	sl, #0
 800e078:	d10e      	bne.n	800e098 <_scanf_float+0x1cc>
 800e07a:	f1b9 0f00 	cmp.w	r9, #0
 800e07e:	d10e      	bne.n	800e09e <_scanf_float+0x1d2>
 800e080:	6822      	ldr	r2, [r4, #0]
 800e082:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e086:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e08a:	d108      	bne.n	800e09e <_scanf_float+0x1d2>
 800e08c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e090:	6022      	str	r2, [r4, #0]
 800e092:	f04f 0a01 	mov.w	sl, #1
 800e096:	e7e2      	b.n	800e05e <_scanf_float+0x192>
 800e098:	f1ba 0f02 	cmp.w	sl, #2
 800e09c:	d055      	beq.n	800e14a <_scanf_float+0x27e>
 800e09e:	2d01      	cmp	r5, #1
 800e0a0:	d002      	beq.n	800e0a8 <_scanf_float+0x1dc>
 800e0a2:	2d04      	cmp	r5, #4
 800e0a4:	f47f af44 	bne.w	800df30 <_scanf_float+0x64>
 800e0a8:	3501      	adds	r5, #1
 800e0aa:	b2ed      	uxtb	r5, r5
 800e0ac:	e7d7      	b.n	800e05e <_scanf_float+0x192>
 800e0ae:	f1ba 0f01 	cmp.w	sl, #1
 800e0b2:	f47f af3d 	bne.w	800df30 <_scanf_float+0x64>
 800e0b6:	f04f 0a02 	mov.w	sl, #2
 800e0ba:	e7d0      	b.n	800e05e <_scanf_float+0x192>
 800e0bc:	b97d      	cbnz	r5, 800e0de <_scanf_float+0x212>
 800e0be:	f1b9 0f00 	cmp.w	r9, #0
 800e0c2:	f47f af38 	bne.w	800df36 <_scanf_float+0x6a>
 800e0c6:	6822      	ldr	r2, [r4, #0]
 800e0c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e0cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e0d0:	f040 8108 	bne.w	800e2e4 <_scanf_float+0x418>
 800e0d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e0d8:	6022      	str	r2, [r4, #0]
 800e0da:	2501      	movs	r5, #1
 800e0dc:	e7bf      	b.n	800e05e <_scanf_float+0x192>
 800e0de:	2d03      	cmp	r5, #3
 800e0e0:	d0e2      	beq.n	800e0a8 <_scanf_float+0x1dc>
 800e0e2:	2d05      	cmp	r5, #5
 800e0e4:	e7de      	b.n	800e0a4 <_scanf_float+0x1d8>
 800e0e6:	2d02      	cmp	r5, #2
 800e0e8:	f47f af22 	bne.w	800df30 <_scanf_float+0x64>
 800e0ec:	2503      	movs	r5, #3
 800e0ee:	e7b6      	b.n	800e05e <_scanf_float+0x192>
 800e0f0:	2d06      	cmp	r5, #6
 800e0f2:	f47f af1d 	bne.w	800df30 <_scanf_float+0x64>
 800e0f6:	2507      	movs	r5, #7
 800e0f8:	e7b1      	b.n	800e05e <_scanf_float+0x192>
 800e0fa:	6822      	ldr	r2, [r4, #0]
 800e0fc:	0591      	lsls	r1, r2, #22
 800e0fe:	f57f af17 	bpl.w	800df30 <_scanf_float+0x64>
 800e102:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e106:	6022      	str	r2, [r4, #0]
 800e108:	f8cd 9008 	str.w	r9, [sp, #8]
 800e10c:	e7a7      	b.n	800e05e <_scanf_float+0x192>
 800e10e:	6822      	ldr	r2, [r4, #0]
 800e110:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e114:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e118:	d006      	beq.n	800e128 <_scanf_float+0x25c>
 800e11a:	0550      	lsls	r0, r2, #21
 800e11c:	f57f af08 	bpl.w	800df30 <_scanf_float+0x64>
 800e120:	f1b9 0f00 	cmp.w	r9, #0
 800e124:	f000 80de 	beq.w	800e2e4 <_scanf_float+0x418>
 800e128:	0591      	lsls	r1, r2, #22
 800e12a:	bf58      	it	pl
 800e12c:	9902      	ldrpl	r1, [sp, #8]
 800e12e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e132:	bf58      	it	pl
 800e134:	eba9 0101 	subpl.w	r1, r9, r1
 800e138:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e13c:	bf58      	it	pl
 800e13e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e142:	6022      	str	r2, [r4, #0]
 800e144:	f04f 0900 	mov.w	r9, #0
 800e148:	e789      	b.n	800e05e <_scanf_float+0x192>
 800e14a:	f04f 0a03 	mov.w	sl, #3
 800e14e:	e786      	b.n	800e05e <_scanf_float+0x192>
 800e150:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e154:	4639      	mov	r1, r7
 800e156:	4640      	mov	r0, r8
 800e158:	4798      	blx	r3
 800e15a:	2800      	cmp	r0, #0
 800e15c:	f43f aedb 	beq.w	800df16 <_scanf_float+0x4a>
 800e160:	e6e6      	b.n	800df30 <_scanf_float+0x64>
 800e162:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e16a:	463a      	mov	r2, r7
 800e16c:	4640      	mov	r0, r8
 800e16e:	4798      	blx	r3
 800e170:	6923      	ldr	r3, [r4, #16]
 800e172:	3b01      	subs	r3, #1
 800e174:	6123      	str	r3, [r4, #16]
 800e176:	e6e8      	b.n	800df4a <_scanf_float+0x7e>
 800e178:	1e6b      	subs	r3, r5, #1
 800e17a:	2b06      	cmp	r3, #6
 800e17c:	d824      	bhi.n	800e1c8 <_scanf_float+0x2fc>
 800e17e:	2d02      	cmp	r5, #2
 800e180:	d836      	bhi.n	800e1f0 <_scanf_float+0x324>
 800e182:	9b01      	ldr	r3, [sp, #4]
 800e184:	429e      	cmp	r6, r3
 800e186:	f67f aee4 	bls.w	800df52 <_scanf_float+0x86>
 800e18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e18e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e192:	463a      	mov	r2, r7
 800e194:	4640      	mov	r0, r8
 800e196:	4798      	blx	r3
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	3b01      	subs	r3, #1
 800e19c:	6123      	str	r3, [r4, #16]
 800e19e:	e7f0      	b.n	800e182 <_scanf_float+0x2b6>
 800e1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e1a8:	463a      	mov	r2, r7
 800e1aa:	4640      	mov	r0, r8
 800e1ac:	4798      	blx	r3
 800e1ae:	6923      	ldr	r3, [r4, #16]
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	6123      	str	r3, [r4, #16]
 800e1b4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e1b8:	fa5f fa8a 	uxtb.w	sl, sl
 800e1bc:	f1ba 0f02 	cmp.w	sl, #2
 800e1c0:	d1ee      	bne.n	800e1a0 <_scanf_float+0x2d4>
 800e1c2:	3d03      	subs	r5, #3
 800e1c4:	b2ed      	uxtb	r5, r5
 800e1c6:	1b76      	subs	r6, r6, r5
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	05da      	lsls	r2, r3, #23
 800e1cc:	d530      	bpl.n	800e230 <_scanf_float+0x364>
 800e1ce:	055b      	lsls	r3, r3, #21
 800e1d0:	d511      	bpl.n	800e1f6 <_scanf_float+0x32a>
 800e1d2:	9b01      	ldr	r3, [sp, #4]
 800e1d4:	429e      	cmp	r6, r3
 800e1d6:	f67f aebc 	bls.w	800df52 <_scanf_float+0x86>
 800e1da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e1de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1e2:	463a      	mov	r2, r7
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4798      	blx	r3
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	6123      	str	r3, [r4, #16]
 800e1ee:	e7f0      	b.n	800e1d2 <_scanf_float+0x306>
 800e1f0:	46aa      	mov	sl, r5
 800e1f2:	46b3      	mov	fp, r6
 800e1f4:	e7de      	b.n	800e1b4 <_scanf_float+0x2e8>
 800e1f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e1fa:	6923      	ldr	r3, [r4, #16]
 800e1fc:	2965      	cmp	r1, #101	@ 0x65
 800e1fe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e202:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800e206:	6123      	str	r3, [r4, #16]
 800e208:	d00c      	beq.n	800e224 <_scanf_float+0x358>
 800e20a:	2945      	cmp	r1, #69	@ 0x45
 800e20c:	d00a      	beq.n	800e224 <_scanf_float+0x358>
 800e20e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e212:	463a      	mov	r2, r7
 800e214:	4640      	mov	r0, r8
 800e216:	4798      	blx	r3
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e21e:	3b01      	subs	r3, #1
 800e220:	1eb5      	subs	r5, r6, #2
 800e222:	6123      	str	r3, [r4, #16]
 800e224:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e228:	463a      	mov	r2, r7
 800e22a:	4640      	mov	r0, r8
 800e22c:	4798      	blx	r3
 800e22e:	462e      	mov	r6, r5
 800e230:	6822      	ldr	r2, [r4, #0]
 800e232:	f012 0210 	ands.w	r2, r2, #16
 800e236:	d001      	beq.n	800e23c <_scanf_float+0x370>
 800e238:	2000      	movs	r0, #0
 800e23a:	e68b      	b.n	800df54 <_scanf_float+0x88>
 800e23c:	7032      	strb	r2, [r6, #0]
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e248:	d11c      	bne.n	800e284 <_scanf_float+0x3b8>
 800e24a:	9b02      	ldr	r3, [sp, #8]
 800e24c:	454b      	cmp	r3, r9
 800e24e:	eba3 0209 	sub.w	r2, r3, r9
 800e252:	d123      	bne.n	800e29c <_scanf_float+0x3d0>
 800e254:	9901      	ldr	r1, [sp, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	4640      	mov	r0, r8
 800e25a:	f000 ff51 	bl	800f100 <_strtod_r>
 800e25e:	9b03      	ldr	r3, [sp, #12]
 800e260:	6821      	ldr	r1, [r4, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f011 0f02 	tst.w	r1, #2
 800e268:	ec57 6b10 	vmov	r6, r7, d0
 800e26c:	f103 0204 	add.w	r2, r3, #4
 800e270:	d01f      	beq.n	800e2b2 <_scanf_float+0x3e6>
 800e272:	9903      	ldr	r1, [sp, #12]
 800e274:	600a      	str	r2, [r1, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	e9c3 6700 	strd	r6, r7, [r3]
 800e27c:	68e3      	ldr	r3, [r4, #12]
 800e27e:	3301      	adds	r3, #1
 800e280:	60e3      	str	r3, [r4, #12]
 800e282:	e7d9      	b.n	800e238 <_scanf_float+0x36c>
 800e284:	9b04      	ldr	r3, [sp, #16]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d0e4      	beq.n	800e254 <_scanf_float+0x388>
 800e28a:	9905      	ldr	r1, [sp, #20]
 800e28c:	230a      	movs	r3, #10
 800e28e:	3101      	adds	r1, #1
 800e290:	4640      	mov	r0, r8
 800e292:	f000 ffb5 	bl	800f200 <_strtol_r>
 800e296:	9b04      	ldr	r3, [sp, #16]
 800e298:	9e05      	ldr	r6, [sp, #20]
 800e29a:	1ac2      	subs	r2, r0, r3
 800e29c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e2a0:	429e      	cmp	r6, r3
 800e2a2:	bf28      	it	cs
 800e2a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e2a8:	4910      	ldr	r1, [pc, #64]	@ (800e2ec <_scanf_float+0x420>)
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f000 f862 	bl	800e374 <siprintf>
 800e2b0:	e7d0      	b.n	800e254 <_scanf_float+0x388>
 800e2b2:	f011 0f04 	tst.w	r1, #4
 800e2b6:	9903      	ldr	r1, [sp, #12]
 800e2b8:	600a      	str	r2, [r1, #0]
 800e2ba:	d1dc      	bne.n	800e276 <_scanf_float+0x3aa>
 800e2bc:	681d      	ldr	r5, [r3, #0]
 800e2be:	4632      	mov	r2, r6
 800e2c0:	463b      	mov	r3, r7
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	4639      	mov	r1, r7
 800e2c6:	f7f2 fc59 	bl	8000b7c <__aeabi_dcmpun>
 800e2ca:	b128      	cbz	r0, 800e2d8 <_scanf_float+0x40c>
 800e2cc:	4808      	ldr	r0, [pc, #32]	@ (800e2f0 <_scanf_float+0x424>)
 800e2ce:	f001 f887 	bl	800f3e0 <nanf>
 800e2d2:	ed85 0a00 	vstr	s0, [r5]
 800e2d6:	e7d1      	b.n	800e27c <_scanf_float+0x3b0>
 800e2d8:	4630      	mov	r0, r6
 800e2da:	4639      	mov	r1, r7
 800e2dc:	f7f2 fcac 	bl	8000c38 <__aeabi_d2f>
 800e2e0:	6028      	str	r0, [r5, #0]
 800e2e2:	e7cb      	b.n	800e27c <_scanf_float+0x3b0>
 800e2e4:	f04f 0900 	mov.w	r9, #0
 800e2e8:	e629      	b.n	800df3e <_scanf_float+0x72>
 800e2ea:	bf00      	nop
 800e2ec:	08011f20 	.word	0x08011f20
 800e2f0:	080120bc 	.word	0x080120bc

0800e2f4 <sniprintf>:
 800e2f4:	b40c      	push	{r2, r3}
 800e2f6:	b530      	push	{r4, r5, lr}
 800e2f8:	4b17      	ldr	r3, [pc, #92]	@ (800e358 <sniprintf+0x64>)
 800e2fa:	1e0c      	subs	r4, r1, #0
 800e2fc:	681d      	ldr	r5, [r3, #0]
 800e2fe:	b09d      	sub	sp, #116	@ 0x74
 800e300:	da08      	bge.n	800e314 <sniprintf+0x20>
 800e302:	238b      	movs	r3, #139	@ 0x8b
 800e304:	602b      	str	r3, [r5, #0]
 800e306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e30a:	b01d      	add	sp, #116	@ 0x74
 800e30c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e310:	b002      	add	sp, #8
 800e312:	4770      	bx	lr
 800e314:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e318:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e31c:	bf14      	ite	ne
 800e31e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e322:	4623      	moveq	r3, r4
 800e324:	9304      	str	r3, [sp, #16]
 800e326:	9307      	str	r3, [sp, #28]
 800e328:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e32c:	9002      	str	r0, [sp, #8]
 800e32e:	9006      	str	r0, [sp, #24]
 800e330:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e334:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e336:	ab21      	add	r3, sp, #132	@ 0x84
 800e338:	a902      	add	r1, sp, #8
 800e33a:	4628      	mov	r0, r5
 800e33c:	9301      	str	r3, [sp, #4]
 800e33e:	f002 fa9d 	bl	801087c <_svfiprintf_r>
 800e342:	1c43      	adds	r3, r0, #1
 800e344:	bfbc      	itt	lt
 800e346:	238b      	movlt	r3, #139	@ 0x8b
 800e348:	602b      	strlt	r3, [r5, #0]
 800e34a:	2c00      	cmp	r4, #0
 800e34c:	d0dd      	beq.n	800e30a <sniprintf+0x16>
 800e34e:	9b02      	ldr	r3, [sp, #8]
 800e350:	2200      	movs	r2, #0
 800e352:	701a      	strb	r2, [r3, #0]
 800e354:	e7d9      	b.n	800e30a <sniprintf+0x16>
 800e356:	bf00      	nop
 800e358:	200001a4 	.word	0x200001a4

0800e35c <__malloc_lock>:
 800e35c:	4801      	ldr	r0, [pc, #4]	@ (800e364 <__malloc_lock+0x8>)
 800e35e:	f001 b826 	b.w	800f3ae <__retarget_lock_acquire_recursive>
 800e362:	bf00      	nop
 800e364:	200014f4 	.word	0x200014f4

0800e368 <__malloc_unlock>:
 800e368:	4801      	ldr	r0, [pc, #4]	@ (800e370 <__malloc_unlock+0x8>)
 800e36a:	f001 b821 	b.w	800f3b0 <__retarget_lock_release_recursive>
 800e36e:	bf00      	nop
 800e370:	200014f4 	.word	0x200014f4

0800e374 <siprintf>:
 800e374:	b40e      	push	{r1, r2, r3}
 800e376:	b500      	push	{lr}
 800e378:	b09c      	sub	sp, #112	@ 0x70
 800e37a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e37c:	9002      	str	r0, [sp, #8]
 800e37e:	9006      	str	r0, [sp, #24]
 800e380:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e384:	4809      	ldr	r0, [pc, #36]	@ (800e3ac <siprintf+0x38>)
 800e386:	9107      	str	r1, [sp, #28]
 800e388:	9104      	str	r1, [sp, #16]
 800e38a:	4909      	ldr	r1, [pc, #36]	@ (800e3b0 <siprintf+0x3c>)
 800e38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e390:	9105      	str	r1, [sp, #20]
 800e392:	6800      	ldr	r0, [r0, #0]
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	a902      	add	r1, sp, #8
 800e398:	f002 fa70 	bl	801087c <_svfiprintf_r>
 800e39c:	9b02      	ldr	r3, [sp, #8]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	701a      	strb	r2, [r3, #0]
 800e3a2:	b01c      	add	sp, #112	@ 0x70
 800e3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a8:	b003      	add	sp, #12
 800e3aa:	4770      	bx	lr
 800e3ac:	200001a4 	.word	0x200001a4
 800e3b0:	ffff0208 	.word	0xffff0208

0800e3b4 <std>:
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	b510      	push	{r4, lr}
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	e9c0 3300 	strd	r3, r3, [r0]
 800e3be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3c2:	6083      	str	r3, [r0, #8]
 800e3c4:	8181      	strh	r1, [r0, #12]
 800e3c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e3c8:	81c2      	strh	r2, [r0, #14]
 800e3ca:	6183      	str	r3, [r0, #24]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	2208      	movs	r2, #8
 800e3d0:	305c      	adds	r0, #92	@ 0x5c
 800e3d2:	f000 ffa5 	bl	800f320 <memset>
 800e3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e40c <std+0x58>)
 800e3d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e3da:	4b0d      	ldr	r3, [pc, #52]	@ (800e410 <std+0x5c>)
 800e3dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e3de:	4b0d      	ldr	r3, [pc, #52]	@ (800e414 <std+0x60>)
 800e3e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e418 <std+0x64>)
 800e3e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800e3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e41c <std+0x68>)
 800e3e8:	6224      	str	r4, [r4, #32]
 800e3ea:	429c      	cmp	r4, r3
 800e3ec:	d006      	beq.n	800e3fc <std+0x48>
 800e3ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e3f2:	4294      	cmp	r4, r2
 800e3f4:	d002      	beq.n	800e3fc <std+0x48>
 800e3f6:	33d0      	adds	r3, #208	@ 0xd0
 800e3f8:	429c      	cmp	r4, r3
 800e3fa:	d105      	bne.n	800e408 <std+0x54>
 800e3fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e404:	f000 bfd2 	b.w	800f3ac <__retarget_lock_init_recursive>
 800e408:	bd10      	pop	{r4, pc}
 800e40a:	bf00      	nop
 800e40c:	08011555 	.word	0x08011555
 800e410:	08011577 	.word	0x08011577
 800e414:	080115af 	.word	0x080115af
 800e418:	080115d3 	.word	0x080115d3
 800e41c:	200013b8 	.word	0x200013b8

0800e420 <stdio_exit_handler>:
 800e420:	4a02      	ldr	r2, [pc, #8]	@ (800e42c <stdio_exit_handler+0xc>)
 800e422:	4903      	ldr	r1, [pc, #12]	@ (800e430 <stdio_exit_handler+0x10>)
 800e424:	4803      	ldr	r0, [pc, #12]	@ (800e434 <stdio_exit_handler+0x14>)
 800e426:	f000 beed 	b.w	800f204 <_fwalk_sglue>
 800e42a:	bf00      	nop
 800e42c:	2000002c 	.word	0x2000002c
 800e430:	08010ba1 	.word	0x08010ba1
 800e434:	200001a8 	.word	0x200001a8

0800e438 <cleanup_stdio>:
 800e438:	6841      	ldr	r1, [r0, #4]
 800e43a:	4b0c      	ldr	r3, [pc, #48]	@ (800e46c <cleanup_stdio+0x34>)
 800e43c:	4299      	cmp	r1, r3
 800e43e:	b510      	push	{r4, lr}
 800e440:	4604      	mov	r4, r0
 800e442:	d001      	beq.n	800e448 <cleanup_stdio+0x10>
 800e444:	f002 fbac 	bl	8010ba0 <_fflush_r>
 800e448:	68a1      	ldr	r1, [r4, #8]
 800e44a:	4b09      	ldr	r3, [pc, #36]	@ (800e470 <cleanup_stdio+0x38>)
 800e44c:	4299      	cmp	r1, r3
 800e44e:	d002      	beq.n	800e456 <cleanup_stdio+0x1e>
 800e450:	4620      	mov	r0, r4
 800e452:	f002 fba5 	bl	8010ba0 <_fflush_r>
 800e456:	68e1      	ldr	r1, [r4, #12]
 800e458:	4b06      	ldr	r3, [pc, #24]	@ (800e474 <cleanup_stdio+0x3c>)
 800e45a:	4299      	cmp	r1, r3
 800e45c:	d004      	beq.n	800e468 <cleanup_stdio+0x30>
 800e45e:	4620      	mov	r0, r4
 800e460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e464:	f002 bb9c 	b.w	8010ba0 <_fflush_r>
 800e468:	bd10      	pop	{r4, pc}
 800e46a:	bf00      	nop
 800e46c:	200013b8 	.word	0x200013b8
 800e470:	20001420 	.word	0x20001420
 800e474:	20001488 	.word	0x20001488

0800e478 <global_stdio_init.part.0>:
 800e478:	b510      	push	{r4, lr}
 800e47a:	4b0b      	ldr	r3, [pc, #44]	@ (800e4a8 <global_stdio_init.part.0+0x30>)
 800e47c:	4c0b      	ldr	r4, [pc, #44]	@ (800e4ac <global_stdio_init.part.0+0x34>)
 800e47e:	4a0c      	ldr	r2, [pc, #48]	@ (800e4b0 <global_stdio_init.part.0+0x38>)
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	4620      	mov	r0, r4
 800e484:	2200      	movs	r2, #0
 800e486:	2104      	movs	r1, #4
 800e488:	f7ff ff94 	bl	800e3b4 <std>
 800e48c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e490:	2201      	movs	r2, #1
 800e492:	2109      	movs	r1, #9
 800e494:	f7ff ff8e 	bl	800e3b4 <std>
 800e498:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e49c:	2202      	movs	r2, #2
 800e49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4a2:	2112      	movs	r1, #18
 800e4a4:	f7ff bf86 	b.w	800e3b4 <std>
 800e4a8:	200014f0 	.word	0x200014f0
 800e4ac:	200013b8 	.word	0x200013b8
 800e4b0:	0800e421 	.word	0x0800e421

0800e4b4 <__sfp_lock_acquire>:
 800e4b4:	4801      	ldr	r0, [pc, #4]	@ (800e4bc <__sfp_lock_acquire+0x8>)
 800e4b6:	f000 bf7a 	b.w	800f3ae <__retarget_lock_acquire_recursive>
 800e4ba:	bf00      	nop
 800e4bc:	200014f5 	.word	0x200014f5

0800e4c0 <__sfp_lock_release>:
 800e4c0:	4801      	ldr	r0, [pc, #4]	@ (800e4c8 <__sfp_lock_release+0x8>)
 800e4c2:	f000 bf75 	b.w	800f3b0 <__retarget_lock_release_recursive>
 800e4c6:	bf00      	nop
 800e4c8:	200014f5 	.word	0x200014f5

0800e4cc <__sinit>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	f7ff fff0 	bl	800e4b4 <__sfp_lock_acquire>
 800e4d4:	6a23      	ldr	r3, [r4, #32]
 800e4d6:	b11b      	cbz	r3, 800e4e0 <__sinit+0x14>
 800e4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4dc:	f7ff bff0 	b.w	800e4c0 <__sfp_lock_release>
 800e4e0:	4b04      	ldr	r3, [pc, #16]	@ (800e4f4 <__sinit+0x28>)
 800e4e2:	6223      	str	r3, [r4, #32]
 800e4e4:	4b04      	ldr	r3, [pc, #16]	@ (800e4f8 <__sinit+0x2c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1f5      	bne.n	800e4d8 <__sinit+0xc>
 800e4ec:	f7ff ffc4 	bl	800e478 <global_stdio_init.part.0>
 800e4f0:	e7f2      	b.n	800e4d8 <__sinit+0xc>
 800e4f2:	bf00      	nop
 800e4f4:	0800e439 	.word	0x0800e439
 800e4f8:	200014f0 	.word	0x200014f0

0800e4fc <sulp>:
 800e4fc:	b570      	push	{r4, r5, r6, lr}
 800e4fe:	4604      	mov	r4, r0
 800e500:	460d      	mov	r5, r1
 800e502:	ec45 4b10 	vmov	d0, r4, r5
 800e506:	4616      	mov	r6, r2
 800e508:	f002 fee6 	bl	80112d8 <__ulp>
 800e50c:	ec51 0b10 	vmov	r0, r1, d0
 800e510:	b17e      	cbz	r6, 800e532 <sulp+0x36>
 800e512:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e516:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	dd09      	ble.n	800e532 <sulp+0x36>
 800e51e:	051b      	lsls	r3, r3, #20
 800e520:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e524:	2400      	movs	r4, #0
 800e526:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e52a:	4622      	mov	r2, r4
 800e52c:	462b      	mov	r3, r5
 800e52e:	f7f2 f88b 	bl	8000648 <__aeabi_dmul>
 800e532:	ec41 0b10 	vmov	d0, r0, r1
 800e536:	bd70      	pop	{r4, r5, r6, pc}

0800e538 <_strtod_l>:
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	b09f      	sub	sp, #124	@ 0x7c
 800e53e:	460c      	mov	r4, r1
 800e540:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e542:	2200      	movs	r2, #0
 800e544:	921a      	str	r2, [sp, #104]	@ 0x68
 800e546:	9005      	str	r0, [sp, #20]
 800e548:	f04f 0a00 	mov.w	sl, #0
 800e54c:	f04f 0b00 	mov.w	fp, #0
 800e550:	460a      	mov	r2, r1
 800e552:	9219      	str	r2, [sp, #100]	@ 0x64
 800e554:	7811      	ldrb	r1, [r2, #0]
 800e556:	292b      	cmp	r1, #43	@ 0x2b
 800e558:	d04a      	beq.n	800e5f0 <_strtod_l+0xb8>
 800e55a:	d838      	bhi.n	800e5ce <_strtod_l+0x96>
 800e55c:	290d      	cmp	r1, #13
 800e55e:	d832      	bhi.n	800e5c6 <_strtod_l+0x8e>
 800e560:	2908      	cmp	r1, #8
 800e562:	d832      	bhi.n	800e5ca <_strtod_l+0x92>
 800e564:	2900      	cmp	r1, #0
 800e566:	d03b      	beq.n	800e5e0 <_strtod_l+0xa8>
 800e568:	2200      	movs	r2, #0
 800e56a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e56c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e56e:	782a      	ldrb	r2, [r5, #0]
 800e570:	2a30      	cmp	r2, #48	@ 0x30
 800e572:	f040 80b3 	bne.w	800e6dc <_strtod_l+0x1a4>
 800e576:	786a      	ldrb	r2, [r5, #1]
 800e578:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e57c:	2a58      	cmp	r2, #88	@ 0x58
 800e57e:	d16e      	bne.n	800e65e <_strtod_l+0x126>
 800e580:	9302      	str	r3, [sp, #8]
 800e582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e584:	9301      	str	r3, [sp, #4]
 800e586:	ab1a      	add	r3, sp, #104	@ 0x68
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	4a8e      	ldr	r2, [pc, #568]	@ (800e7c4 <_strtod_l+0x28c>)
 800e58c:	9805      	ldr	r0, [sp, #20]
 800e58e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e590:	a919      	add	r1, sp, #100	@ 0x64
 800e592:	f001 fe47 	bl	8010224 <__gethex>
 800e596:	f010 060f 	ands.w	r6, r0, #15
 800e59a:	4604      	mov	r4, r0
 800e59c:	d005      	beq.n	800e5aa <_strtod_l+0x72>
 800e59e:	2e06      	cmp	r6, #6
 800e5a0:	d128      	bne.n	800e5f4 <_strtod_l+0xbc>
 800e5a2:	3501      	adds	r5, #1
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e5a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f040 858e 	bne.w	800f0ce <_strtod_l+0xb96>
 800e5b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5b4:	b1cb      	cbz	r3, 800e5ea <_strtod_l+0xb2>
 800e5b6:	4652      	mov	r2, sl
 800e5b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e5bc:	ec43 2b10 	vmov	d0, r2, r3
 800e5c0:	b01f      	add	sp, #124	@ 0x7c
 800e5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c6:	2920      	cmp	r1, #32
 800e5c8:	d1ce      	bne.n	800e568 <_strtod_l+0x30>
 800e5ca:	3201      	adds	r2, #1
 800e5cc:	e7c1      	b.n	800e552 <_strtod_l+0x1a>
 800e5ce:	292d      	cmp	r1, #45	@ 0x2d
 800e5d0:	d1ca      	bne.n	800e568 <_strtod_l+0x30>
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e5d6:	1c51      	adds	r1, r2, #1
 800e5d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e5da:	7852      	ldrb	r2, [r2, #1]
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	d1c5      	bne.n	800e56c <_strtod_l+0x34>
 800e5e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e5e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f040 8570 	bne.w	800f0ca <_strtod_l+0xb92>
 800e5ea:	4652      	mov	r2, sl
 800e5ec:	465b      	mov	r3, fp
 800e5ee:	e7e5      	b.n	800e5bc <_strtod_l+0x84>
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	e7ef      	b.n	800e5d4 <_strtod_l+0x9c>
 800e5f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e5f6:	b13a      	cbz	r2, 800e608 <_strtod_l+0xd0>
 800e5f8:	2135      	movs	r1, #53	@ 0x35
 800e5fa:	a81c      	add	r0, sp, #112	@ 0x70
 800e5fc:	f002 ff66 	bl	80114cc <__copybits>
 800e600:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e602:	9805      	ldr	r0, [sp, #20]
 800e604:	f002 fb34 	bl	8010c70 <_Bfree>
 800e608:	3e01      	subs	r6, #1
 800e60a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e60c:	2e04      	cmp	r6, #4
 800e60e:	d806      	bhi.n	800e61e <_strtod_l+0xe6>
 800e610:	e8df f006 	tbb	[pc, r6]
 800e614:	201d0314 	.word	0x201d0314
 800e618:	14          	.byte	0x14
 800e619:	00          	.byte	0x00
 800e61a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e61e:	05e1      	lsls	r1, r4, #23
 800e620:	bf48      	it	mi
 800e622:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e62a:	0d1b      	lsrs	r3, r3, #20
 800e62c:	051b      	lsls	r3, r3, #20
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1bb      	bne.n	800e5aa <_strtod_l+0x72>
 800e632:	f000 fe91 	bl	800f358 <__errno>
 800e636:	2322      	movs	r3, #34	@ 0x22
 800e638:	6003      	str	r3, [r0, #0]
 800e63a:	e7b6      	b.n	800e5aa <_strtod_l+0x72>
 800e63c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e640:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e648:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e64c:	e7e7      	b.n	800e61e <_strtod_l+0xe6>
 800e64e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e7cc <_strtod_l+0x294>
 800e652:	e7e4      	b.n	800e61e <_strtod_l+0xe6>
 800e654:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e658:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e65c:	e7df      	b.n	800e61e <_strtod_l+0xe6>
 800e65e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	9219      	str	r2, [sp, #100]	@ 0x64
 800e664:	785b      	ldrb	r3, [r3, #1]
 800e666:	2b30      	cmp	r3, #48	@ 0x30
 800e668:	d0f9      	beq.n	800e65e <_strtod_l+0x126>
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d09d      	beq.n	800e5aa <_strtod_l+0x72>
 800e66e:	2301      	movs	r3, #1
 800e670:	9309      	str	r3, [sp, #36]	@ 0x24
 800e672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e674:	930c      	str	r3, [sp, #48]	@ 0x30
 800e676:	2300      	movs	r3, #0
 800e678:	9308      	str	r3, [sp, #32]
 800e67a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e67c:	461f      	mov	r7, r3
 800e67e:	220a      	movs	r2, #10
 800e680:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e682:	7805      	ldrb	r5, [r0, #0]
 800e684:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e688:	b2d9      	uxtb	r1, r3
 800e68a:	2909      	cmp	r1, #9
 800e68c:	d928      	bls.n	800e6e0 <_strtod_l+0x1a8>
 800e68e:	494e      	ldr	r1, [pc, #312]	@ (800e7c8 <_strtod_l+0x290>)
 800e690:	2201      	movs	r2, #1
 800e692:	f000 fe33 	bl	800f2fc <strncmp>
 800e696:	2800      	cmp	r0, #0
 800e698:	d032      	beq.n	800e700 <_strtod_l+0x1c8>
 800e69a:	2000      	movs	r0, #0
 800e69c:	462a      	mov	r2, r5
 800e69e:	4681      	mov	r9, r0
 800e6a0:	463d      	mov	r5, r7
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2a65      	cmp	r2, #101	@ 0x65
 800e6a6:	d001      	beq.n	800e6ac <_strtod_l+0x174>
 800e6a8:	2a45      	cmp	r2, #69	@ 0x45
 800e6aa:	d114      	bne.n	800e6d6 <_strtod_l+0x19e>
 800e6ac:	b91d      	cbnz	r5, 800e6b6 <_strtod_l+0x17e>
 800e6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6b0:	4302      	orrs	r2, r0
 800e6b2:	d095      	beq.n	800e5e0 <_strtod_l+0xa8>
 800e6b4:	2500      	movs	r5, #0
 800e6b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e6b8:	1c62      	adds	r2, r4, #1
 800e6ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6bc:	7862      	ldrb	r2, [r4, #1]
 800e6be:	2a2b      	cmp	r2, #43	@ 0x2b
 800e6c0:	d077      	beq.n	800e7b2 <_strtod_l+0x27a>
 800e6c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800e6c4:	d07b      	beq.n	800e7be <_strtod_l+0x286>
 800e6c6:	f04f 0c00 	mov.w	ip, #0
 800e6ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e6ce:	2909      	cmp	r1, #9
 800e6d0:	f240 8082 	bls.w	800e7d8 <_strtod_l+0x2a0>
 800e6d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800e6d6:	f04f 0800 	mov.w	r8, #0
 800e6da:	e0a2      	b.n	800e822 <_strtod_l+0x2ea>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	e7c7      	b.n	800e670 <_strtod_l+0x138>
 800e6e0:	2f08      	cmp	r7, #8
 800e6e2:	bfd5      	itete	le
 800e6e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e6e6:	9908      	ldrgt	r1, [sp, #32]
 800e6e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e6ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e6f0:	f100 0001 	add.w	r0, r0, #1
 800e6f4:	bfd4      	ite	le
 800e6f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e6f8:	9308      	strgt	r3, [sp, #32]
 800e6fa:	3701      	adds	r7, #1
 800e6fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800e6fe:	e7bf      	b.n	800e680 <_strtod_l+0x148>
 800e700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	9219      	str	r2, [sp, #100]	@ 0x64
 800e706:	785a      	ldrb	r2, [r3, #1]
 800e708:	b37f      	cbz	r7, 800e76a <_strtod_l+0x232>
 800e70a:	4681      	mov	r9, r0
 800e70c:	463d      	mov	r5, r7
 800e70e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e712:	2b09      	cmp	r3, #9
 800e714:	d912      	bls.n	800e73c <_strtod_l+0x204>
 800e716:	2301      	movs	r3, #1
 800e718:	e7c4      	b.n	800e6a4 <_strtod_l+0x16c>
 800e71a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e71c:	1c5a      	adds	r2, r3, #1
 800e71e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e720:	785a      	ldrb	r2, [r3, #1]
 800e722:	3001      	adds	r0, #1
 800e724:	2a30      	cmp	r2, #48	@ 0x30
 800e726:	d0f8      	beq.n	800e71a <_strtod_l+0x1e2>
 800e728:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	f200 84d3 	bhi.w	800f0d8 <_strtod_l+0xba0>
 800e732:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e734:	930c      	str	r3, [sp, #48]	@ 0x30
 800e736:	4681      	mov	r9, r0
 800e738:	2000      	movs	r0, #0
 800e73a:	4605      	mov	r5, r0
 800e73c:	3a30      	subs	r2, #48	@ 0x30
 800e73e:	f100 0301 	add.w	r3, r0, #1
 800e742:	d02a      	beq.n	800e79a <_strtod_l+0x262>
 800e744:	4499      	add	r9, r3
 800e746:	eb00 0c05 	add.w	ip, r0, r5
 800e74a:	462b      	mov	r3, r5
 800e74c:	210a      	movs	r1, #10
 800e74e:	4563      	cmp	r3, ip
 800e750:	d10d      	bne.n	800e76e <_strtod_l+0x236>
 800e752:	1c69      	adds	r1, r5, #1
 800e754:	4401      	add	r1, r0
 800e756:	4428      	add	r0, r5
 800e758:	2808      	cmp	r0, #8
 800e75a:	dc16      	bgt.n	800e78a <_strtod_l+0x252>
 800e75c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e75e:	230a      	movs	r3, #10
 800e760:	fb03 2300 	mla	r3, r3, r0, r2
 800e764:	930a      	str	r3, [sp, #40]	@ 0x28
 800e766:	2300      	movs	r3, #0
 800e768:	e018      	b.n	800e79c <_strtod_l+0x264>
 800e76a:	4638      	mov	r0, r7
 800e76c:	e7da      	b.n	800e724 <_strtod_l+0x1ec>
 800e76e:	2b08      	cmp	r3, #8
 800e770:	f103 0301 	add.w	r3, r3, #1
 800e774:	dc03      	bgt.n	800e77e <_strtod_l+0x246>
 800e776:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e778:	434e      	muls	r6, r1
 800e77a:	960a      	str	r6, [sp, #40]	@ 0x28
 800e77c:	e7e7      	b.n	800e74e <_strtod_l+0x216>
 800e77e:	2b10      	cmp	r3, #16
 800e780:	bfde      	ittt	le
 800e782:	9e08      	ldrle	r6, [sp, #32]
 800e784:	434e      	mulle	r6, r1
 800e786:	9608      	strle	r6, [sp, #32]
 800e788:	e7e1      	b.n	800e74e <_strtod_l+0x216>
 800e78a:	280f      	cmp	r0, #15
 800e78c:	dceb      	bgt.n	800e766 <_strtod_l+0x22e>
 800e78e:	9808      	ldr	r0, [sp, #32]
 800e790:	230a      	movs	r3, #10
 800e792:	fb03 2300 	mla	r3, r3, r0, r2
 800e796:	9308      	str	r3, [sp, #32]
 800e798:	e7e5      	b.n	800e766 <_strtod_l+0x22e>
 800e79a:	4629      	mov	r1, r5
 800e79c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e79e:	1c50      	adds	r0, r2, #1
 800e7a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800e7a2:	7852      	ldrb	r2, [r2, #1]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	460d      	mov	r5, r1
 800e7a8:	e7b1      	b.n	800e70e <_strtod_l+0x1d6>
 800e7aa:	f04f 0900 	mov.w	r9, #0
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e77d      	b.n	800e6ae <_strtod_l+0x176>
 800e7b2:	f04f 0c00 	mov.w	ip, #0
 800e7b6:	1ca2      	adds	r2, r4, #2
 800e7b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e7ba:	78a2      	ldrb	r2, [r4, #2]
 800e7bc:	e785      	b.n	800e6ca <_strtod_l+0x192>
 800e7be:	f04f 0c01 	mov.w	ip, #1
 800e7c2:	e7f8      	b.n	800e7b6 <_strtod_l+0x27e>
 800e7c4:	08011f3c 	.word	0x08011f3c
 800e7c8:	08011f25 	.word	0x08011f25
 800e7cc:	7ff00000 	.word	0x7ff00000
 800e7d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e7d2:	1c51      	adds	r1, r2, #1
 800e7d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800e7d6:	7852      	ldrb	r2, [r2, #1]
 800e7d8:	2a30      	cmp	r2, #48	@ 0x30
 800e7da:	d0f9      	beq.n	800e7d0 <_strtod_l+0x298>
 800e7dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e7e0:	2908      	cmp	r1, #8
 800e7e2:	f63f af78 	bhi.w	800e6d6 <_strtod_l+0x19e>
 800e7e6:	3a30      	subs	r2, #48	@ 0x30
 800e7e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e7ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e7ee:	f04f 080a 	mov.w	r8, #10
 800e7f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e7f4:	1c56      	adds	r6, r2, #1
 800e7f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800e7f8:	7852      	ldrb	r2, [r2, #1]
 800e7fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e7fe:	f1be 0f09 	cmp.w	lr, #9
 800e802:	d939      	bls.n	800e878 <_strtod_l+0x340>
 800e804:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e806:	1a76      	subs	r6, r6, r1
 800e808:	2e08      	cmp	r6, #8
 800e80a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e80e:	dc03      	bgt.n	800e818 <_strtod_l+0x2e0>
 800e810:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e812:	4588      	cmp	r8, r1
 800e814:	bfa8      	it	ge
 800e816:	4688      	movge	r8, r1
 800e818:	f1bc 0f00 	cmp.w	ip, #0
 800e81c:	d001      	beq.n	800e822 <_strtod_l+0x2ea>
 800e81e:	f1c8 0800 	rsb	r8, r8, #0
 800e822:	2d00      	cmp	r5, #0
 800e824:	d14e      	bne.n	800e8c4 <_strtod_l+0x38c>
 800e826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e828:	4308      	orrs	r0, r1
 800e82a:	f47f aebe 	bne.w	800e5aa <_strtod_l+0x72>
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f47f aed6 	bne.w	800e5e0 <_strtod_l+0xa8>
 800e834:	2a69      	cmp	r2, #105	@ 0x69
 800e836:	d028      	beq.n	800e88a <_strtod_l+0x352>
 800e838:	dc25      	bgt.n	800e886 <_strtod_l+0x34e>
 800e83a:	2a49      	cmp	r2, #73	@ 0x49
 800e83c:	d025      	beq.n	800e88a <_strtod_l+0x352>
 800e83e:	2a4e      	cmp	r2, #78	@ 0x4e
 800e840:	f47f aece 	bne.w	800e5e0 <_strtod_l+0xa8>
 800e844:	499b      	ldr	r1, [pc, #620]	@ (800eab4 <_strtod_l+0x57c>)
 800e846:	a819      	add	r0, sp, #100	@ 0x64
 800e848:	f001 ff0e 	bl	8010668 <__match>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f43f aec7 	beq.w	800e5e0 <_strtod_l+0xa8>
 800e852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	2b28      	cmp	r3, #40	@ 0x28
 800e858:	d12e      	bne.n	800e8b8 <_strtod_l+0x380>
 800e85a:	4997      	ldr	r1, [pc, #604]	@ (800eab8 <_strtod_l+0x580>)
 800e85c:	aa1c      	add	r2, sp, #112	@ 0x70
 800e85e:	a819      	add	r0, sp, #100	@ 0x64
 800e860:	f001 ff16 	bl	8010690 <__hexnan>
 800e864:	2805      	cmp	r0, #5
 800e866:	d127      	bne.n	800e8b8 <_strtod_l+0x380>
 800e868:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e86a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e86e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e872:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e876:	e698      	b.n	800e5aa <_strtod_l+0x72>
 800e878:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e87a:	fb08 2101 	mla	r1, r8, r1, r2
 800e87e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e882:	920e      	str	r2, [sp, #56]	@ 0x38
 800e884:	e7b5      	b.n	800e7f2 <_strtod_l+0x2ba>
 800e886:	2a6e      	cmp	r2, #110	@ 0x6e
 800e888:	e7da      	b.n	800e840 <_strtod_l+0x308>
 800e88a:	498c      	ldr	r1, [pc, #560]	@ (800eabc <_strtod_l+0x584>)
 800e88c:	a819      	add	r0, sp, #100	@ 0x64
 800e88e:	f001 feeb 	bl	8010668 <__match>
 800e892:	2800      	cmp	r0, #0
 800e894:	f43f aea4 	beq.w	800e5e0 <_strtod_l+0xa8>
 800e898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e89a:	4989      	ldr	r1, [pc, #548]	@ (800eac0 <_strtod_l+0x588>)
 800e89c:	3b01      	subs	r3, #1
 800e89e:	a819      	add	r0, sp, #100	@ 0x64
 800e8a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e8a2:	f001 fee1 	bl	8010668 <__match>
 800e8a6:	b910      	cbnz	r0, 800e8ae <_strtod_l+0x376>
 800e8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800e8ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ead0 <_strtod_l+0x598>
 800e8b2:	f04f 0a00 	mov.w	sl, #0
 800e8b6:	e678      	b.n	800e5aa <_strtod_l+0x72>
 800e8b8:	4882      	ldr	r0, [pc, #520]	@ (800eac4 <_strtod_l+0x58c>)
 800e8ba:	f000 fd89 	bl	800f3d0 <nan>
 800e8be:	ec5b ab10 	vmov	sl, fp, d0
 800e8c2:	e672      	b.n	800e5aa <_strtod_l+0x72>
 800e8c4:	eba8 0309 	sub.w	r3, r8, r9
 800e8c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e8ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8cc:	2f00      	cmp	r7, #0
 800e8ce:	bf08      	it	eq
 800e8d0:	462f      	moveq	r7, r5
 800e8d2:	2d10      	cmp	r5, #16
 800e8d4:	462c      	mov	r4, r5
 800e8d6:	bfa8      	it	ge
 800e8d8:	2410      	movge	r4, #16
 800e8da:	f7f1 fe3b 	bl	8000554 <__aeabi_ui2d>
 800e8de:	2d09      	cmp	r5, #9
 800e8e0:	4682      	mov	sl, r0
 800e8e2:	468b      	mov	fp, r1
 800e8e4:	dc13      	bgt.n	800e90e <_strtod_l+0x3d6>
 800e8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f43f ae5e 	beq.w	800e5aa <_strtod_l+0x72>
 800e8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f0:	dd78      	ble.n	800e9e4 <_strtod_l+0x4ac>
 800e8f2:	2b16      	cmp	r3, #22
 800e8f4:	dc5f      	bgt.n	800e9b6 <_strtod_l+0x47e>
 800e8f6:	4974      	ldr	r1, [pc, #464]	@ (800eac8 <_strtod_l+0x590>)
 800e8f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e900:	4652      	mov	r2, sl
 800e902:	465b      	mov	r3, fp
 800e904:	f7f1 fea0 	bl	8000648 <__aeabi_dmul>
 800e908:	4682      	mov	sl, r0
 800e90a:	468b      	mov	fp, r1
 800e90c:	e64d      	b.n	800e5aa <_strtod_l+0x72>
 800e90e:	4b6e      	ldr	r3, [pc, #440]	@ (800eac8 <_strtod_l+0x590>)
 800e910:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e914:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e918:	f7f1 fe96 	bl	8000648 <__aeabi_dmul>
 800e91c:	4682      	mov	sl, r0
 800e91e:	9808      	ldr	r0, [sp, #32]
 800e920:	468b      	mov	fp, r1
 800e922:	f7f1 fe17 	bl	8000554 <__aeabi_ui2d>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4650      	mov	r0, sl
 800e92c:	4659      	mov	r1, fp
 800e92e:	f7f1 fcd5 	bl	80002dc <__adddf3>
 800e932:	2d0f      	cmp	r5, #15
 800e934:	4682      	mov	sl, r0
 800e936:	468b      	mov	fp, r1
 800e938:	ddd5      	ble.n	800e8e6 <_strtod_l+0x3ae>
 800e93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e93c:	1b2c      	subs	r4, r5, r4
 800e93e:	441c      	add	r4, r3
 800e940:	2c00      	cmp	r4, #0
 800e942:	f340 8096 	ble.w	800ea72 <_strtod_l+0x53a>
 800e946:	f014 030f 	ands.w	r3, r4, #15
 800e94a:	d00a      	beq.n	800e962 <_strtod_l+0x42a>
 800e94c:	495e      	ldr	r1, [pc, #376]	@ (800eac8 <_strtod_l+0x590>)
 800e94e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e952:	4652      	mov	r2, sl
 800e954:	465b      	mov	r3, fp
 800e956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e95a:	f7f1 fe75 	bl	8000648 <__aeabi_dmul>
 800e95e:	4682      	mov	sl, r0
 800e960:	468b      	mov	fp, r1
 800e962:	f034 040f 	bics.w	r4, r4, #15
 800e966:	d073      	beq.n	800ea50 <_strtod_l+0x518>
 800e968:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e96c:	dd48      	ble.n	800ea00 <_strtod_l+0x4c8>
 800e96e:	2400      	movs	r4, #0
 800e970:	46a0      	mov	r8, r4
 800e972:	940a      	str	r4, [sp, #40]	@ 0x28
 800e974:	46a1      	mov	r9, r4
 800e976:	9a05      	ldr	r2, [sp, #20]
 800e978:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ead0 <_strtod_l+0x598>
 800e97c:	2322      	movs	r3, #34	@ 0x22
 800e97e:	6013      	str	r3, [r2, #0]
 800e980:	f04f 0a00 	mov.w	sl, #0
 800e984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e986:	2b00      	cmp	r3, #0
 800e988:	f43f ae0f 	beq.w	800e5aa <_strtod_l+0x72>
 800e98c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e98e:	9805      	ldr	r0, [sp, #20]
 800e990:	f002 f96e 	bl	8010c70 <_Bfree>
 800e994:	9805      	ldr	r0, [sp, #20]
 800e996:	4649      	mov	r1, r9
 800e998:	f002 f96a 	bl	8010c70 <_Bfree>
 800e99c:	9805      	ldr	r0, [sp, #20]
 800e99e:	4641      	mov	r1, r8
 800e9a0:	f002 f966 	bl	8010c70 <_Bfree>
 800e9a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e9a6:	9805      	ldr	r0, [sp, #20]
 800e9a8:	f002 f962 	bl	8010c70 <_Bfree>
 800e9ac:	9805      	ldr	r0, [sp, #20]
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	f002 f95e 	bl	8010c70 <_Bfree>
 800e9b4:	e5f9      	b.n	800e5aa <_strtod_l+0x72>
 800e9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	dbbc      	blt.n	800e93a <_strtod_l+0x402>
 800e9c0:	4c41      	ldr	r4, [pc, #260]	@ (800eac8 <_strtod_l+0x590>)
 800e9c2:	f1c5 050f 	rsb	r5, r5, #15
 800e9c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e9ca:	4652      	mov	r2, sl
 800e9cc:	465b      	mov	r3, fp
 800e9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9d2:	f7f1 fe39 	bl	8000648 <__aeabi_dmul>
 800e9d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d8:	1b5d      	subs	r5, r3, r5
 800e9da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e9de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e9e2:	e78f      	b.n	800e904 <_strtod_l+0x3cc>
 800e9e4:	3316      	adds	r3, #22
 800e9e6:	dba8      	blt.n	800e93a <_strtod_l+0x402>
 800e9e8:	4b37      	ldr	r3, [pc, #220]	@ (800eac8 <_strtod_l+0x590>)
 800e9ea:	eba9 0808 	sub.w	r8, r9, r8
 800e9ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e9f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e9f6:	4650      	mov	r0, sl
 800e9f8:	4659      	mov	r1, fp
 800e9fa:	f7f1 ff4f 	bl	800089c <__aeabi_ddiv>
 800e9fe:	e783      	b.n	800e908 <_strtod_l+0x3d0>
 800ea00:	4b32      	ldr	r3, [pc, #200]	@ (800eacc <_strtod_l+0x594>)
 800ea02:	9308      	str	r3, [sp, #32]
 800ea04:	2300      	movs	r3, #0
 800ea06:	1124      	asrs	r4, r4, #4
 800ea08:	4650      	mov	r0, sl
 800ea0a:	4659      	mov	r1, fp
 800ea0c:	461e      	mov	r6, r3
 800ea0e:	2c01      	cmp	r4, #1
 800ea10:	dc21      	bgt.n	800ea56 <_strtod_l+0x51e>
 800ea12:	b10b      	cbz	r3, 800ea18 <_strtod_l+0x4e0>
 800ea14:	4682      	mov	sl, r0
 800ea16:	468b      	mov	fp, r1
 800ea18:	492c      	ldr	r1, [pc, #176]	@ (800eacc <_strtod_l+0x594>)
 800ea1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ea1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ea22:	4652      	mov	r2, sl
 800ea24:	465b      	mov	r3, fp
 800ea26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea2a:	f7f1 fe0d 	bl	8000648 <__aeabi_dmul>
 800ea2e:	4b28      	ldr	r3, [pc, #160]	@ (800ead0 <_strtod_l+0x598>)
 800ea30:	460a      	mov	r2, r1
 800ea32:	400b      	ands	r3, r1
 800ea34:	4927      	ldr	r1, [pc, #156]	@ (800ead4 <_strtod_l+0x59c>)
 800ea36:	428b      	cmp	r3, r1
 800ea38:	4682      	mov	sl, r0
 800ea3a:	d898      	bhi.n	800e96e <_strtod_l+0x436>
 800ea3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ea40:	428b      	cmp	r3, r1
 800ea42:	bf86      	itte	hi
 800ea44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ead8 <_strtod_l+0x5a0>
 800ea48:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ea4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ea50:	2300      	movs	r3, #0
 800ea52:	9308      	str	r3, [sp, #32]
 800ea54:	e07a      	b.n	800eb4c <_strtod_l+0x614>
 800ea56:	07e2      	lsls	r2, r4, #31
 800ea58:	d505      	bpl.n	800ea66 <_strtod_l+0x52e>
 800ea5a:	9b08      	ldr	r3, [sp, #32]
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	f7f1 fdf2 	bl	8000648 <__aeabi_dmul>
 800ea64:	2301      	movs	r3, #1
 800ea66:	9a08      	ldr	r2, [sp, #32]
 800ea68:	3208      	adds	r2, #8
 800ea6a:	3601      	adds	r6, #1
 800ea6c:	1064      	asrs	r4, r4, #1
 800ea6e:	9208      	str	r2, [sp, #32]
 800ea70:	e7cd      	b.n	800ea0e <_strtod_l+0x4d6>
 800ea72:	d0ed      	beq.n	800ea50 <_strtod_l+0x518>
 800ea74:	4264      	negs	r4, r4
 800ea76:	f014 020f 	ands.w	r2, r4, #15
 800ea7a:	d00a      	beq.n	800ea92 <_strtod_l+0x55a>
 800ea7c:	4b12      	ldr	r3, [pc, #72]	@ (800eac8 <_strtod_l+0x590>)
 800ea7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea82:	4650      	mov	r0, sl
 800ea84:	4659      	mov	r1, fp
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	f7f1 ff07 	bl	800089c <__aeabi_ddiv>
 800ea8e:	4682      	mov	sl, r0
 800ea90:	468b      	mov	fp, r1
 800ea92:	1124      	asrs	r4, r4, #4
 800ea94:	d0dc      	beq.n	800ea50 <_strtod_l+0x518>
 800ea96:	2c1f      	cmp	r4, #31
 800ea98:	dd20      	ble.n	800eadc <_strtod_l+0x5a4>
 800ea9a:	2400      	movs	r4, #0
 800ea9c:	46a0      	mov	r8, r4
 800ea9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800eaa0:	46a1      	mov	r9, r4
 800eaa2:	9a05      	ldr	r2, [sp, #20]
 800eaa4:	2322      	movs	r3, #34	@ 0x22
 800eaa6:	f04f 0a00 	mov.w	sl, #0
 800eaaa:	f04f 0b00 	mov.w	fp, #0
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	e768      	b.n	800e984 <_strtod_l+0x44c>
 800eab2:	bf00      	nop
 800eab4:	08011ef9 	.word	0x08011ef9
 800eab8:	08011f28 	.word	0x08011f28
 800eabc:	08011ef1 	.word	0x08011ef1
 800eac0:	080120c0 	.word	0x080120c0
 800eac4:	080120bc 	.word	0x080120bc
 800eac8:	08012248 	.word	0x08012248
 800eacc:	08012220 	.word	0x08012220
 800ead0:	7ff00000 	.word	0x7ff00000
 800ead4:	7ca00000 	.word	0x7ca00000
 800ead8:	7fefffff 	.word	0x7fefffff
 800eadc:	f014 0310 	ands.w	r3, r4, #16
 800eae0:	bf18      	it	ne
 800eae2:	236a      	movne	r3, #106	@ 0x6a
 800eae4:	4ea9      	ldr	r6, [pc, #676]	@ (800ed8c <_strtod_l+0x854>)
 800eae6:	9308      	str	r3, [sp, #32]
 800eae8:	4650      	mov	r0, sl
 800eaea:	4659      	mov	r1, fp
 800eaec:	2300      	movs	r3, #0
 800eaee:	07e2      	lsls	r2, r4, #31
 800eaf0:	d504      	bpl.n	800eafc <_strtod_l+0x5c4>
 800eaf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eaf6:	f7f1 fda7 	bl	8000648 <__aeabi_dmul>
 800eafa:	2301      	movs	r3, #1
 800eafc:	1064      	asrs	r4, r4, #1
 800eafe:	f106 0608 	add.w	r6, r6, #8
 800eb02:	d1f4      	bne.n	800eaee <_strtod_l+0x5b6>
 800eb04:	b10b      	cbz	r3, 800eb0a <_strtod_l+0x5d2>
 800eb06:	4682      	mov	sl, r0
 800eb08:	468b      	mov	fp, r1
 800eb0a:	9b08      	ldr	r3, [sp, #32]
 800eb0c:	b1b3      	cbz	r3, 800eb3c <_strtod_l+0x604>
 800eb0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800eb12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	4659      	mov	r1, fp
 800eb1a:	dd0f      	ble.n	800eb3c <_strtod_l+0x604>
 800eb1c:	2b1f      	cmp	r3, #31
 800eb1e:	dd55      	ble.n	800ebcc <_strtod_l+0x694>
 800eb20:	2b34      	cmp	r3, #52	@ 0x34
 800eb22:	bfde      	ittt	le
 800eb24:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800eb28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eb2c:	4093      	lslle	r3, r2
 800eb2e:	f04f 0a00 	mov.w	sl, #0
 800eb32:	bfcc      	ite	gt
 800eb34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eb38:	ea03 0b01 	andle.w	fp, r3, r1
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	2300      	movs	r3, #0
 800eb40:	4650      	mov	r0, sl
 800eb42:	4659      	mov	r1, fp
 800eb44:	f7f1 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d1a6      	bne.n	800ea9a <_strtod_l+0x562>
 800eb4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800eb52:	9805      	ldr	r0, [sp, #20]
 800eb54:	462b      	mov	r3, r5
 800eb56:	463a      	mov	r2, r7
 800eb58:	f002 f8f2 	bl	8010d40 <__s2b>
 800eb5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f43f af05 	beq.w	800e96e <_strtod_l+0x436>
 800eb64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb66:	2a00      	cmp	r2, #0
 800eb68:	eba9 0308 	sub.w	r3, r9, r8
 800eb6c:	bfa8      	it	ge
 800eb6e:	2300      	movge	r3, #0
 800eb70:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb72:	2400      	movs	r4, #0
 800eb74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eb78:	9316      	str	r3, [sp, #88]	@ 0x58
 800eb7a:	46a0      	mov	r8, r4
 800eb7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb7e:	9805      	ldr	r0, [sp, #20]
 800eb80:	6859      	ldr	r1, [r3, #4]
 800eb82:	f002 f835 	bl	8010bf0 <_Balloc>
 800eb86:	4681      	mov	r9, r0
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	f43f aef4 	beq.w	800e976 <_strtod_l+0x43e>
 800eb8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb90:	691a      	ldr	r2, [r3, #16]
 800eb92:	3202      	adds	r2, #2
 800eb94:	f103 010c 	add.w	r1, r3, #12
 800eb98:	0092      	lsls	r2, r2, #2
 800eb9a:	300c      	adds	r0, #12
 800eb9c:	f000 fc09 	bl	800f3b2 <memcpy>
 800eba0:	ec4b ab10 	vmov	d0, sl, fp
 800eba4:	9805      	ldr	r0, [sp, #20]
 800eba6:	aa1c      	add	r2, sp, #112	@ 0x70
 800eba8:	a91b      	add	r1, sp, #108	@ 0x6c
 800ebaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ebae:	f002 fc03 	bl	80113b8 <__d2b>
 800ebb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	f43f aede 	beq.w	800e976 <_strtod_l+0x43e>
 800ebba:	9805      	ldr	r0, [sp, #20]
 800ebbc:	2101      	movs	r1, #1
 800ebbe:	f002 f955 	bl	8010e6c <__i2b>
 800ebc2:	4680      	mov	r8, r0
 800ebc4:	b948      	cbnz	r0, 800ebda <_strtod_l+0x6a2>
 800ebc6:	f04f 0800 	mov.w	r8, #0
 800ebca:	e6d4      	b.n	800e976 <_strtod_l+0x43e>
 800ebcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ebd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebd4:	ea03 0a0a 	and.w	sl, r3, sl
 800ebd8:	e7b0      	b.n	800eb3c <_strtod_l+0x604>
 800ebda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ebdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ebde:	2d00      	cmp	r5, #0
 800ebe0:	bfab      	itete	ge
 800ebe2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ebe4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ebe6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ebe8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ebea:	bfac      	ite	ge
 800ebec:	18ef      	addge	r7, r5, r3
 800ebee:	1b5e      	sublt	r6, r3, r5
 800ebf0:	9b08      	ldr	r3, [sp, #32]
 800ebf2:	1aed      	subs	r5, r5, r3
 800ebf4:	4415      	add	r5, r2
 800ebf6:	4b66      	ldr	r3, [pc, #408]	@ (800ed90 <_strtod_l+0x858>)
 800ebf8:	3d01      	subs	r5, #1
 800ebfa:	429d      	cmp	r5, r3
 800ebfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ec00:	da50      	bge.n	800eca4 <_strtod_l+0x76c>
 800ec02:	1b5b      	subs	r3, r3, r5
 800ec04:	2b1f      	cmp	r3, #31
 800ec06:	eba2 0203 	sub.w	r2, r2, r3
 800ec0a:	f04f 0101 	mov.w	r1, #1
 800ec0e:	dc3d      	bgt.n	800ec8c <_strtod_l+0x754>
 800ec10:	fa01 f303 	lsl.w	r3, r1, r3
 800ec14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec16:	2300      	movs	r3, #0
 800ec18:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec1a:	18bd      	adds	r5, r7, r2
 800ec1c:	9b08      	ldr	r3, [sp, #32]
 800ec1e:	42af      	cmp	r7, r5
 800ec20:	4416      	add	r6, r2
 800ec22:	441e      	add	r6, r3
 800ec24:	463b      	mov	r3, r7
 800ec26:	bfa8      	it	ge
 800ec28:	462b      	movge	r3, r5
 800ec2a:	42b3      	cmp	r3, r6
 800ec2c:	bfa8      	it	ge
 800ec2e:	4633      	movge	r3, r6
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	bfc2      	ittt	gt
 800ec34:	1aed      	subgt	r5, r5, r3
 800ec36:	1af6      	subgt	r6, r6, r3
 800ec38:	1aff      	subgt	r7, r7, r3
 800ec3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	dd16      	ble.n	800ec6e <_strtod_l+0x736>
 800ec40:	4641      	mov	r1, r8
 800ec42:	9805      	ldr	r0, [sp, #20]
 800ec44:	461a      	mov	r2, r3
 800ec46:	f002 f9d1 	bl	8010fec <__pow5mult>
 800ec4a:	4680      	mov	r8, r0
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d0ba      	beq.n	800ebc6 <_strtod_l+0x68e>
 800ec50:	4601      	mov	r1, r0
 800ec52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ec54:	9805      	ldr	r0, [sp, #20]
 800ec56:	f002 f91f 	bl	8010e98 <__multiply>
 800ec5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	f43f ae8a 	beq.w	800e976 <_strtod_l+0x43e>
 800ec62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec64:	9805      	ldr	r0, [sp, #20]
 800ec66:	f002 f803 	bl	8010c70 <_Bfree>
 800ec6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec6e:	2d00      	cmp	r5, #0
 800ec70:	dc1d      	bgt.n	800ecae <_strtod_l+0x776>
 800ec72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	dd23      	ble.n	800ecc0 <_strtod_l+0x788>
 800ec78:	4649      	mov	r1, r9
 800ec7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ec7c:	9805      	ldr	r0, [sp, #20]
 800ec7e:	f002 f9b5 	bl	8010fec <__pow5mult>
 800ec82:	4681      	mov	r9, r0
 800ec84:	b9e0      	cbnz	r0, 800ecc0 <_strtod_l+0x788>
 800ec86:	f04f 0900 	mov.w	r9, #0
 800ec8a:	e674      	b.n	800e976 <_strtod_l+0x43e>
 800ec8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ec90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ec94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ec98:	35e2      	adds	r5, #226	@ 0xe2
 800ec9a:	fa01 f305 	lsl.w	r3, r1, r5
 800ec9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800eca0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eca2:	e7ba      	b.n	800ec1a <_strtod_l+0x6e2>
 800eca4:	2300      	movs	r3, #0
 800eca6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eca8:	2301      	movs	r3, #1
 800ecaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ecac:	e7b5      	b.n	800ec1a <_strtod_l+0x6e2>
 800ecae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ecb0:	9805      	ldr	r0, [sp, #20]
 800ecb2:	462a      	mov	r2, r5
 800ecb4:	f002 f9f4 	bl	80110a0 <__lshift>
 800ecb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d1d9      	bne.n	800ec72 <_strtod_l+0x73a>
 800ecbe:	e65a      	b.n	800e976 <_strtod_l+0x43e>
 800ecc0:	2e00      	cmp	r6, #0
 800ecc2:	dd07      	ble.n	800ecd4 <_strtod_l+0x79c>
 800ecc4:	4649      	mov	r1, r9
 800ecc6:	9805      	ldr	r0, [sp, #20]
 800ecc8:	4632      	mov	r2, r6
 800ecca:	f002 f9e9 	bl	80110a0 <__lshift>
 800ecce:	4681      	mov	r9, r0
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d0d8      	beq.n	800ec86 <_strtod_l+0x74e>
 800ecd4:	2f00      	cmp	r7, #0
 800ecd6:	dd08      	ble.n	800ecea <_strtod_l+0x7b2>
 800ecd8:	4641      	mov	r1, r8
 800ecda:	9805      	ldr	r0, [sp, #20]
 800ecdc:	463a      	mov	r2, r7
 800ecde:	f002 f9df 	bl	80110a0 <__lshift>
 800ece2:	4680      	mov	r8, r0
 800ece4:	2800      	cmp	r0, #0
 800ece6:	f43f ae46 	beq.w	800e976 <_strtod_l+0x43e>
 800ecea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ecec:	9805      	ldr	r0, [sp, #20]
 800ecee:	464a      	mov	r2, r9
 800ecf0:	f002 fa5e 	bl	80111b0 <__mdiff>
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f43f ae3d 	beq.w	800e976 <_strtod_l+0x43e>
 800ecfc:	68c3      	ldr	r3, [r0, #12]
 800ecfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed00:	2300      	movs	r3, #0
 800ed02:	60c3      	str	r3, [r0, #12]
 800ed04:	4641      	mov	r1, r8
 800ed06:	f002 fa37 	bl	8011178 <__mcmp>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	da46      	bge.n	800ed9c <_strtod_l+0x864>
 800ed0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed10:	ea53 030a 	orrs.w	r3, r3, sl
 800ed14:	d16c      	bne.n	800edf0 <_strtod_l+0x8b8>
 800ed16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d168      	bne.n	800edf0 <_strtod_l+0x8b8>
 800ed1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed22:	0d1b      	lsrs	r3, r3, #20
 800ed24:	051b      	lsls	r3, r3, #20
 800ed26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed2a:	d961      	bls.n	800edf0 <_strtod_l+0x8b8>
 800ed2c:	6963      	ldr	r3, [r4, #20]
 800ed2e:	b913      	cbnz	r3, 800ed36 <_strtod_l+0x7fe>
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	dd5c      	ble.n	800edf0 <_strtod_l+0x8b8>
 800ed36:	4621      	mov	r1, r4
 800ed38:	2201      	movs	r2, #1
 800ed3a:	9805      	ldr	r0, [sp, #20]
 800ed3c:	f002 f9b0 	bl	80110a0 <__lshift>
 800ed40:	4641      	mov	r1, r8
 800ed42:	4604      	mov	r4, r0
 800ed44:	f002 fa18 	bl	8011178 <__mcmp>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	dd51      	ble.n	800edf0 <_strtod_l+0x8b8>
 800ed4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed50:	9a08      	ldr	r2, [sp, #32]
 800ed52:	0d1b      	lsrs	r3, r3, #20
 800ed54:	051b      	lsls	r3, r3, #20
 800ed56:	2a00      	cmp	r2, #0
 800ed58:	d06b      	beq.n	800ee32 <_strtod_l+0x8fa>
 800ed5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed5e:	d868      	bhi.n	800ee32 <_strtod_l+0x8fa>
 800ed60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ed64:	f67f ae9d 	bls.w	800eaa2 <_strtod_l+0x56a>
 800ed68:	4b0a      	ldr	r3, [pc, #40]	@ (800ed94 <_strtod_l+0x85c>)
 800ed6a:	4650      	mov	r0, sl
 800ed6c:	4659      	mov	r1, fp
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f7f1 fc6a 	bl	8000648 <__aeabi_dmul>
 800ed74:	4b08      	ldr	r3, [pc, #32]	@ (800ed98 <_strtod_l+0x860>)
 800ed76:	400b      	ands	r3, r1
 800ed78:	4682      	mov	sl, r0
 800ed7a:	468b      	mov	fp, r1
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f47f ae05 	bne.w	800e98c <_strtod_l+0x454>
 800ed82:	9a05      	ldr	r2, [sp, #20]
 800ed84:	2322      	movs	r3, #34	@ 0x22
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	e600      	b.n	800e98c <_strtod_l+0x454>
 800ed8a:	bf00      	nop
 800ed8c:	08011f50 	.word	0x08011f50
 800ed90:	fffffc02 	.word	0xfffffc02
 800ed94:	39500000 	.word	0x39500000
 800ed98:	7ff00000 	.word	0x7ff00000
 800ed9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eda0:	d165      	bne.n	800ee6e <_strtod_l+0x936>
 800eda2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eda4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eda8:	b35a      	cbz	r2, 800ee02 <_strtod_l+0x8ca>
 800edaa:	4a9f      	ldr	r2, [pc, #636]	@ (800f028 <_strtod_l+0xaf0>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d12b      	bne.n	800ee08 <_strtod_l+0x8d0>
 800edb0:	9b08      	ldr	r3, [sp, #32]
 800edb2:	4651      	mov	r1, sl
 800edb4:	b303      	cbz	r3, 800edf8 <_strtod_l+0x8c0>
 800edb6:	4b9d      	ldr	r3, [pc, #628]	@ (800f02c <_strtod_l+0xaf4>)
 800edb8:	465a      	mov	r2, fp
 800edba:	4013      	ands	r3, r2
 800edbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800edc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800edc4:	d81b      	bhi.n	800edfe <_strtod_l+0x8c6>
 800edc6:	0d1b      	lsrs	r3, r3, #20
 800edc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800edcc:	fa02 f303 	lsl.w	r3, r2, r3
 800edd0:	4299      	cmp	r1, r3
 800edd2:	d119      	bne.n	800ee08 <_strtod_l+0x8d0>
 800edd4:	4b96      	ldr	r3, [pc, #600]	@ (800f030 <_strtod_l+0xaf8>)
 800edd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edd8:	429a      	cmp	r2, r3
 800edda:	d102      	bne.n	800ede2 <_strtod_l+0x8aa>
 800eddc:	3101      	adds	r1, #1
 800edde:	f43f adca 	beq.w	800e976 <_strtod_l+0x43e>
 800ede2:	4b92      	ldr	r3, [pc, #584]	@ (800f02c <_strtod_l+0xaf4>)
 800ede4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ede6:	401a      	ands	r2, r3
 800ede8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800edec:	f04f 0a00 	mov.w	sl, #0
 800edf0:	9b08      	ldr	r3, [sp, #32]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1b8      	bne.n	800ed68 <_strtod_l+0x830>
 800edf6:	e5c9      	b.n	800e98c <_strtod_l+0x454>
 800edf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800edfc:	e7e8      	b.n	800edd0 <_strtod_l+0x898>
 800edfe:	4613      	mov	r3, r2
 800ee00:	e7e6      	b.n	800edd0 <_strtod_l+0x898>
 800ee02:	ea53 030a 	orrs.w	r3, r3, sl
 800ee06:	d0a1      	beq.n	800ed4c <_strtod_l+0x814>
 800ee08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee0a:	b1db      	cbz	r3, 800ee44 <_strtod_l+0x90c>
 800ee0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee0e:	4213      	tst	r3, r2
 800ee10:	d0ee      	beq.n	800edf0 <_strtod_l+0x8b8>
 800ee12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee14:	9a08      	ldr	r2, [sp, #32]
 800ee16:	4650      	mov	r0, sl
 800ee18:	4659      	mov	r1, fp
 800ee1a:	b1bb      	cbz	r3, 800ee4c <_strtod_l+0x914>
 800ee1c:	f7ff fb6e 	bl	800e4fc <sulp>
 800ee20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee24:	ec53 2b10 	vmov	r2, r3, d0
 800ee28:	f7f1 fa58 	bl	80002dc <__adddf3>
 800ee2c:	4682      	mov	sl, r0
 800ee2e:	468b      	mov	fp, r1
 800ee30:	e7de      	b.n	800edf0 <_strtod_l+0x8b8>
 800ee32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ee36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee3e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ee42:	e7d5      	b.n	800edf0 <_strtod_l+0x8b8>
 800ee44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee46:	ea13 0f0a 	tst.w	r3, sl
 800ee4a:	e7e1      	b.n	800ee10 <_strtod_l+0x8d8>
 800ee4c:	f7ff fb56 	bl	800e4fc <sulp>
 800ee50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee54:	ec53 2b10 	vmov	r2, r3, d0
 800ee58:	f7f1 fa3e 	bl	80002d8 <__aeabi_dsub>
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	2300      	movs	r3, #0
 800ee60:	4682      	mov	sl, r0
 800ee62:	468b      	mov	fp, r1
 800ee64:	f7f1 fe58 	bl	8000b18 <__aeabi_dcmpeq>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d0c1      	beq.n	800edf0 <_strtod_l+0x8b8>
 800ee6c:	e619      	b.n	800eaa2 <_strtod_l+0x56a>
 800ee6e:	4641      	mov	r1, r8
 800ee70:	4620      	mov	r0, r4
 800ee72:	f002 faf9 	bl	8011468 <__ratio>
 800ee76:	ec57 6b10 	vmov	r6, r7, d0
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ee80:	4630      	mov	r0, r6
 800ee82:	4639      	mov	r1, r7
 800ee84:	f7f1 fe5c 	bl	8000b40 <__aeabi_dcmple>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d06f      	beq.n	800ef6c <_strtod_l+0xa34>
 800ee8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d17a      	bne.n	800ef88 <_strtod_l+0xa50>
 800ee92:	f1ba 0f00 	cmp.w	sl, #0
 800ee96:	d158      	bne.n	800ef4a <_strtod_l+0xa12>
 800ee98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d15a      	bne.n	800ef58 <_strtod_l+0xa20>
 800eea2:	4b64      	ldr	r3, [pc, #400]	@ (800f034 <_strtod_l+0xafc>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	4630      	mov	r0, r6
 800eea8:	4639      	mov	r1, r7
 800eeaa:	f7f1 fe3f 	bl	8000b2c <__aeabi_dcmplt>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d159      	bne.n	800ef66 <_strtod_l+0xa2e>
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	4639      	mov	r1, r7
 800eeb6:	4b60      	ldr	r3, [pc, #384]	@ (800f038 <_strtod_l+0xb00>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f7f1 fbc5 	bl	8000648 <__aeabi_dmul>
 800eebe:	4606      	mov	r6, r0
 800eec0:	460f      	mov	r7, r1
 800eec2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eec6:	9606      	str	r6, [sp, #24]
 800eec8:	9307      	str	r3, [sp, #28]
 800eeca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eece:	4d57      	ldr	r5, [pc, #348]	@ (800f02c <_strtod_l+0xaf4>)
 800eed0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eed6:	401d      	ands	r5, r3
 800eed8:	4b58      	ldr	r3, [pc, #352]	@ (800f03c <_strtod_l+0xb04>)
 800eeda:	429d      	cmp	r5, r3
 800eedc:	f040 80b2 	bne.w	800f044 <_strtod_l+0xb0c>
 800eee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eee2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eee6:	ec4b ab10 	vmov	d0, sl, fp
 800eeea:	f002 f9f5 	bl	80112d8 <__ulp>
 800eeee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eef2:	ec51 0b10 	vmov	r0, r1, d0
 800eef6:	f7f1 fba7 	bl	8000648 <__aeabi_dmul>
 800eefa:	4652      	mov	r2, sl
 800eefc:	465b      	mov	r3, fp
 800eefe:	f7f1 f9ed 	bl	80002dc <__adddf3>
 800ef02:	460b      	mov	r3, r1
 800ef04:	4949      	ldr	r1, [pc, #292]	@ (800f02c <_strtod_l+0xaf4>)
 800ef06:	4a4e      	ldr	r2, [pc, #312]	@ (800f040 <_strtod_l+0xb08>)
 800ef08:	4019      	ands	r1, r3
 800ef0a:	4291      	cmp	r1, r2
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	d942      	bls.n	800ef96 <_strtod_l+0xa5e>
 800ef10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef12:	4b47      	ldr	r3, [pc, #284]	@ (800f030 <_strtod_l+0xaf8>)
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d103      	bne.n	800ef20 <_strtod_l+0x9e8>
 800ef18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	f43f ad2b 	beq.w	800e976 <_strtod_l+0x43e>
 800ef20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f030 <_strtod_l+0xaf8>
 800ef24:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ef28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef2a:	9805      	ldr	r0, [sp, #20]
 800ef2c:	f001 fea0 	bl	8010c70 <_Bfree>
 800ef30:	9805      	ldr	r0, [sp, #20]
 800ef32:	4649      	mov	r1, r9
 800ef34:	f001 fe9c 	bl	8010c70 <_Bfree>
 800ef38:	9805      	ldr	r0, [sp, #20]
 800ef3a:	4641      	mov	r1, r8
 800ef3c:	f001 fe98 	bl	8010c70 <_Bfree>
 800ef40:	9805      	ldr	r0, [sp, #20]
 800ef42:	4621      	mov	r1, r4
 800ef44:	f001 fe94 	bl	8010c70 <_Bfree>
 800ef48:	e618      	b.n	800eb7c <_strtod_l+0x644>
 800ef4a:	f1ba 0f01 	cmp.w	sl, #1
 800ef4e:	d103      	bne.n	800ef58 <_strtod_l+0xa20>
 800ef50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f43f ada5 	beq.w	800eaa2 <_strtod_l+0x56a>
 800ef58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f008 <_strtod_l+0xad0>
 800ef5c:	4f35      	ldr	r7, [pc, #212]	@ (800f034 <_strtod_l+0xafc>)
 800ef5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef62:	2600      	movs	r6, #0
 800ef64:	e7b1      	b.n	800eeca <_strtod_l+0x992>
 800ef66:	4f34      	ldr	r7, [pc, #208]	@ (800f038 <_strtod_l+0xb00>)
 800ef68:	2600      	movs	r6, #0
 800ef6a:	e7aa      	b.n	800eec2 <_strtod_l+0x98a>
 800ef6c:	4b32      	ldr	r3, [pc, #200]	@ (800f038 <_strtod_l+0xb00>)
 800ef6e:	4630      	mov	r0, r6
 800ef70:	4639      	mov	r1, r7
 800ef72:	2200      	movs	r2, #0
 800ef74:	f7f1 fb68 	bl	8000648 <__aeabi_dmul>
 800ef78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	460f      	mov	r7, r1
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d09f      	beq.n	800eec2 <_strtod_l+0x98a>
 800ef82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ef86:	e7a0      	b.n	800eeca <_strtod_l+0x992>
 800ef88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f010 <_strtod_l+0xad8>
 800ef8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef90:	ec57 6b17 	vmov	r6, r7, d7
 800ef94:	e799      	b.n	800eeca <_strtod_l+0x992>
 800ef96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ef9a:	9b08      	ldr	r3, [sp, #32]
 800ef9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1c1      	bne.n	800ef28 <_strtod_l+0x9f0>
 800efa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efa8:	0d1b      	lsrs	r3, r3, #20
 800efaa:	051b      	lsls	r3, r3, #20
 800efac:	429d      	cmp	r5, r3
 800efae:	d1bb      	bne.n	800ef28 <_strtod_l+0x9f0>
 800efb0:	4630      	mov	r0, r6
 800efb2:	4639      	mov	r1, r7
 800efb4:	f7f1 fea8 	bl	8000d08 <__aeabi_d2lz>
 800efb8:	f7f1 fb18 	bl	80005ec <__aeabi_l2d>
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7f1 f988 	bl	80002d8 <__aeabi_dsub>
 800efc8:	460b      	mov	r3, r1
 800efca:	4602      	mov	r2, r0
 800efcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800efd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800efd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efd6:	ea46 060a 	orr.w	r6, r6, sl
 800efda:	431e      	orrs	r6, r3
 800efdc:	d06f      	beq.n	800f0be <_strtod_l+0xb86>
 800efde:	a30e      	add	r3, pc, #56	@ (adr r3, 800f018 <_strtod_l+0xae0>)
 800efe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe4:	f7f1 fda2 	bl	8000b2c <__aeabi_dcmplt>
 800efe8:	2800      	cmp	r0, #0
 800efea:	f47f accf 	bne.w	800e98c <_strtod_l+0x454>
 800efee:	a30c      	add	r3, pc, #48	@ (adr r3, 800f020 <_strtod_l+0xae8>)
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eff8:	f7f1 fdb6 	bl	8000b68 <__aeabi_dcmpgt>
 800effc:	2800      	cmp	r0, #0
 800effe:	d093      	beq.n	800ef28 <_strtod_l+0x9f0>
 800f000:	e4c4      	b.n	800e98c <_strtod_l+0x454>
 800f002:	bf00      	nop
 800f004:	f3af 8000 	nop.w
 800f008:	00000000 	.word	0x00000000
 800f00c:	bff00000 	.word	0xbff00000
 800f010:	00000000 	.word	0x00000000
 800f014:	3ff00000 	.word	0x3ff00000
 800f018:	94a03595 	.word	0x94a03595
 800f01c:	3fdfffff 	.word	0x3fdfffff
 800f020:	35afe535 	.word	0x35afe535
 800f024:	3fe00000 	.word	0x3fe00000
 800f028:	000fffff 	.word	0x000fffff
 800f02c:	7ff00000 	.word	0x7ff00000
 800f030:	7fefffff 	.word	0x7fefffff
 800f034:	3ff00000 	.word	0x3ff00000
 800f038:	3fe00000 	.word	0x3fe00000
 800f03c:	7fe00000 	.word	0x7fe00000
 800f040:	7c9fffff 	.word	0x7c9fffff
 800f044:	9b08      	ldr	r3, [sp, #32]
 800f046:	b323      	cbz	r3, 800f092 <_strtod_l+0xb5a>
 800f048:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f04c:	d821      	bhi.n	800f092 <_strtod_l+0xb5a>
 800f04e:	a328      	add	r3, pc, #160	@ (adr r3, 800f0f0 <_strtod_l+0xbb8>)
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	4630      	mov	r0, r6
 800f056:	4639      	mov	r1, r7
 800f058:	f7f1 fd72 	bl	8000b40 <__aeabi_dcmple>
 800f05c:	b1a0      	cbz	r0, 800f088 <_strtod_l+0xb50>
 800f05e:	4639      	mov	r1, r7
 800f060:	4630      	mov	r0, r6
 800f062:	f7f1 fdc9 	bl	8000bf8 <__aeabi_d2uiz>
 800f066:	2801      	cmp	r0, #1
 800f068:	bf38      	it	cc
 800f06a:	2001      	movcc	r0, #1
 800f06c:	f7f1 fa72 	bl	8000554 <__aeabi_ui2d>
 800f070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f072:	4606      	mov	r6, r0
 800f074:	460f      	mov	r7, r1
 800f076:	b9fb      	cbnz	r3, 800f0b8 <_strtod_l+0xb80>
 800f078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f07c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f07e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f080:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f084:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f088:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f08a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f08e:	1b5b      	subs	r3, r3, r5
 800f090:	9311      	str	r3, [sp, #68]	@ 0x44
 800f092:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f096:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f09a:	f002 f91d 	bl	80112d8 <__ulp>
 800f09e:	4650      	mov	r0, sl
 800f0a0:	ec53 2b10 	vmov	r2, r3, d0
 800f0a4:	4659      	mov	r1, fp
 800f0a6:	f7f1 facf 	bl	8000648 <__aeabi_dmul>
 800f0aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f0ae:	f7f1 f915 	bl	80002dc <__adddf3>
 800f0b2:	4682      	mov	sl, r0
 800f0b4:	468b      	mov	fp, r1
 800f0b6:	e770      	b.n	800ef9a <_strtod_l+0xa62>
 800f0b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f0bc:	e7e0      	b.n	800f080 <_strtod_l+0xb48>
 800f0be:	a30e      	add	r3, pc, #56	@ (adr r3, 800f0f8 <_strtod_l+0xbc0>)
 800f0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c4:	f7f1 fd32 	bl	8000b2c <__aeabi_dcmplt>
 800f0c8:	e798      	b.n	800effc <_strtod_l+0xac4>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f0d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	f7ff ba6d 	b.w	800e5b2 <_strtod_l+0x7a>
 800f0d8:	2a65      	cmp	r2, #101	@ 0x65
 800f0da:	f43f ab66 	beq.w	800e7aa <_strtod_l+0x272>
 800f0de:	2a45      	cmp	r2, #69	@ 0x45
 800f0e0:	f43f ab63 	beq.w	800e7aa <_strtod_l+0x272>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	f7ff bb9e 	b.w	800e826 <_strtod_l+0x2ee>
 800f0ea:	bf00      	nop
 800f0ec:	f3af 8000 	nop.w
 800f0f0:	ffc00000 	.word	0xffc00000
 800f0f4:	41dfffff 	.word	0x41dfffff
 800f0f8:	94a03595 	.word	0x94a03595
 800f0fc:	3fcfffff 	.word	0x3fcfffff

0800f100 <_strtod_r>:
 800f100:	4b01      	ldr	r3, [pc, #4]	@ (800f108 <_strtod_r+0x8>)
 800f102:	f7ff ba19 	b.w	800e538 <_strtod_l>
 800f106:	bf00      	nop
 800f108:	20000038 	.word	0x20000038

0800f10c <_strtol_l.constprop.0>:
 800f10c:	2b24      	cmp	r3, #36	@ 0x24
 800f10e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f112:	4686      	mov	lr, r0
 800f114:	4690      	mov	r8, r2
 800f116:	d801      	bhi.n	800f11c <_strtol_l.constprop.0+0x10>
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d106      	bne.n	800f12a <_strtol_l.constprop.0+0x1e>
 800f11c:	f000 f91c 	bl	800f358 <__errno>
 800f120:	2316      	movs	r3, #22
 800f122:	6003      	str	r3, [r0, #0]
 800f124:	2000      	movs	r0, #0
 800f126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12a:	4834      	ldr	r0, [pc, #208]	@ (800f1fc <_strtol_l.constprop.0+0xf0>)
 800f12c:	460d      	mov	r5, r1
 800f12e:	462a      	mov	r2, r5
 800f130:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f134:	5d06      	ldrb	r6, [r0, r4]
 800f136:	f016 0608 	ands.w	r6, r6, #8
 800f13a:	d1f8      	bne.n	800f12e <_strtol_l.constprop.0+0x22>
 800f13c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f13e:	d12d      	bne.n	800f19c <_strtol_l.constprop.0+0x90>
 800f140:	782c      	ldrb	r4, [r5, #0]
 800f142:	2601      	movs	r6, #1
 800f144:	1c95      	adds	r5, r2, #2
 800f146:	f033 0210 	bics.w	r2, r3, #16
 800f14a:	d109      	bne.n	800f160 <_strtol_l.constprop.0+0x54>
 800f14c:	2c30      	cmp	r4, #48	@ 0x30
 800f14e:	d12a      	bne.n	800f1a6 <_strtol_l.constprop.0+0x9a>
 800f150:	782a      	ldrb	r2, [r5, #0]
 800f152:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f156:	2a58      	cmp	r2, #88	@ 0x58
 800f158:	d125      	bne.n	800f1a6 <_strtol_l.constprop.0+0x9a>
 800f15a:	786c      	ldrb	r4, [r5, #1]
 800f15c:	2310      	movs	r3, #16
 800f15e:	3502      	adds	r5, #2
 800f160:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f164:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f168:	2200      	movs	r2, #0
 800f16a:	fbbc f9f3 	udiv	r9, ip, r3
 800f16e:	4610      	mov	r0, r2
 800f170:	fb03 ca19 	mls	sl, r3, r9, ip
 800f174:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f178:	2f09      	cmp	r7, #9
 800f17a:	d81b      	bhi.n	800f1b4 <_strtol_l.constprop.0+0xa8>
 800f17c:	463c      	mov	r4, r7
 800f17e:	42a3      	cmp	r3, r4
 800f180:	dd27      	ble.n	800f1d2 <_strtol_l.constprop.0+0xc6>
 800f182:	1c57      	adds	r7, r2, #1
 800f184:	d007      	beq.n	800f196 <_strtol_l.constprop.0+0x8a>
 800f186:	4581      	cmp	r9, r0
 800f188:	d320      	bcc.n	800f1cc <_strtol_l.constprop.0+0xc0>
 800f18a:	d101      	bne.n	800f190 <_strtol_l.constprop.0+0x84>
 800f18c:	45a2      	cmp	sl, r4
 800f18e:	db1d      	blt.n	800f1cc <_strtol_l.constprop.0+0xc0>
 800f190:	fb00 4003 	mla	r0, r0, r3, r4
 800f194:	2201      	movs	r2, #1
 800f196:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f19a:	e7eb      	b.n	800f174 <_strtol_l.constprop.0+0x68>
 800f19c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f19e:	bf04      	itt	eq
 800f1a0:	782c      	ldrbeq	r4, [r5, #0]
 800f1a2:	1c95      	addeq	r5, r2, #2
 800f1a4:	e7cf      	b.n	800f146 <_strtol_l.constprop.0+0x3a>
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1da      	bne.n	800f160 <_strtol_l.constprop.0+0x54>
 800f1aa:	2c30      	cmp	r4, #48	@ 0x30
 800f1ac:	bf0c      	ite	eq
 800f1ae:	2308      	moveq	r3, #8
 800f1b0:	230a      	movne	r3, #10
 800f1b2:	e7d5      	b.n	800f160 <_strtol_l.constprop.0+0x54>
 800f1b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f1b8:	2f19      	cmp	r7, #25
 800f1ba:	d801      	bhi.n	800f1c0 <_strtol_l.constprop.0+0xb4>
 800f1bc:	3c37      	subs	r4, #55	@ 0x37
 800f1be:	e7de      	b.n	800f17e <_strtol_l.constprop.0+0x72>
 800f1c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1c4:	2f19      	cmp	r7, #25
 800f1c6:	d804      	bhi.n	800f1d2 <_strtol_l.constprop.0+0xc6>
 800f1c8:	3c57      	subs	r4, #87	@ 0x57
 800f1ca:	e7d8      	b.n	800f17e <_strtol_l.constprop.0+0x72>
 800f1cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1d0:	e7e1      	b.n	800f196 <_strtol_l.constprop.0+0x8a>
 800f1d2:	1c53      	adds	r3, r2, #1
 800f1d4:	d108      	bne.n	800f1e8 <_strtol_l.constprop.0+0xdc>
 800f1d6:	2322      	movs	r3, #34	@ 0x22
 800f1d8:	f8ce 3000 	str.w	r3, [lr]
 800f1dc:	4660      	mov	r0, ip
 800f1de:	f1b8 0f00 	cmp.w	r8, #0
 800f1e2:	d0a0      	beq.n	800f126 <_strtol_l.constprop.0+0x1a>
 800f1e4:	1e69      	subs	r1, r5, #1
 800f1e6:	e006      	b.n	800f1f6 <_strtol_l.constprop.0+0xea>
 800f1e8:	b106      	cbz	r6, 800f1ec <_strtol_l.constprop.0+0xe0>
 800f1ea:	4240      	negs	r0, r0
 800f1ec:	f1b8 0f00 	cmp.w	r8, #0
 800f1f0:	d099      	beq.n	800f126 <_strtol_l.constprop.0+0x1a>
 800f1f2:	2a00      	cmp	r2, #0
 800f1f4:	d1f6      	bne.n	800f1e4 <_strtol_l.constprop.0+0xd8>
 800f1f6:	f8c8 1000 	str.w	r1, [r8]
 800f1fa:	e794      	b.n	800f126 <_strtol_l.constprop.0+0x1a>
 800f1fc:	08011f81 	.word	0x08011f81

0800f200 <_strtol_r>:
 800f200:	f7ff bf84 	b.w	800f10c <_strtol_l.constprop.0>

0800f204 <_fwalk_sglue>:
 800f204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f208:	4607      	mov	r7, r0
 800f20a:	4688      	mov	r8, r1
 800f20c:	4614      	mov	r4, r2
 800f20e:	2600      	movs	r6, #0
 800f210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f214:	f1b9 0901 	subs.w	r9, r9, #1
 800f218:	d505      	bpl.n	800f226 <_fwalk_sglue+0x22>
 800f21a:	6824      	ldr	r4, [r4, #0]
 800f21c:	2c00      	cmp	r4, #0
 800f21e:	d1f7      	bne.n	800f210 <_fwalk_sglue+0xc>
 800f220:	4630      	mov	r0, r6
 800f222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f226:	89ab      	ldrh	r3, [r5, #12]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d907      	bls.n	800f23c <_fwalk_sglue+0x38>
 800f22c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f230:	3301      	adds	r3, #1
 800f232:	d003      	beq.n	800f23c <_fwalk_sglue+0x38>
 800f234:	4629      	mov	r1, r5
 800f236:	4638      	mov	r0, r7
 800f238:	47c0      	blx	r8
 800f23a:	4306      	orrs	r6, r0
 800f23c:	3568      	adds	r5, #104	@ 0x68
 800f23e:	e7e9      	b.n	800f214 <_fwalk_sglue+0x10>

0800f240 <_puts_r>:
 800f240:	6a03      	ldr	r3, [r0, #32]
 800f242:	b570      	push	{r4, r5, r6, lr}
 800f244:	6884      	ldr	r4, [r0, #8]
 800f246:	4605      	mov	r5, r0
 800f248:	460e      	mov	r6, r1
 800f24a:	b90b      	cbnz	r3, 800f250 <_puts_r+0x10>
 800f24c:	f7ff f93e 	bl	800e4cc <__sinit>
 800f250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f252:	07db      	lsls	r3, r3, #31
 800f254:	d405      	bmi.n	800f262 <_puts_r+0x22>
 800f256:	89a3      	ldrh	r3, [r4, #12]
 800f258:	0598      	lsls	r0, r3, #22
 800f25a:	d402      	bmi.n	800f262 <_puts_r+0x22>
 800f25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f25e:	f000 f8a6 	bl	800f3ae <__retarget_lock_acquire_recursive>
 800f262:	89a3      	ldrh	r3, [r4, #12]
 800f264:	0719      	lsls	r1, r3, #28
 800f266:	d502      	bpl.n	800f26e <_puts_r+0x2e>
 800f268:	6923      	ldr	r3, [r4, #16]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d135      	bne.n	800f2da <_puts_r+0x9a>
 800f26e:	4621      	mov	r1, r4
 800f270:	4628      	mov	r0, r5
 800f272:	f002 fa31 	bl	80116d8 <__swsetup_r>
 800f276:	b380      	cbz	r0, 800f2da <_puts_r+0x9a>
 800f278:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f27c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f27e:	07da      	lsls	r2, r3, #31
 800f280:	d405      	bmi.n	800f28e <_puts_r+0x4e>
 800f282:	89a3      	ldrh	r3, [r4, #12]
 800f284:	059b      	lsls	r3, r3, #22
 800f286:	d402      	bmi.n	800f28e <_puts_r+0x4e>
 800f288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f28a:	f000 f891 	bl	800f3b0 <__retarget_lock_release_recursive>
 800f28e:	4628      	mov	r0, r5
 800f290:	bd70      	pop	{r4, r5, r6, pc}
 800f292:	2b00      	cmp	r3, #0
 800f294:	da04      	bge.n	800f2a0 <_puts_r+0x60>
 800f296:	69a2      	ldr	r2, [r4, #24]
 800f298:	429a      	cmp	r2, r3
 800f29a:	dc17      	bgt.n	800f2cc <_puts_r+0x8c>
 800f29c:	290a      	cmp	r1, #10
 800f29e:	d015      	beq.n	800f2cc <_puts_r+0x8c>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	1c5a      	adds	r2, r3, #1
 800f2a4:	6022      	str	r2, [r4, #0]
 800f2a6:	7019      	strb	r1, [r3, #0]
 800f2a8:	68a3      	ldr	r3, [r4, #8]
 800f2aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	60a3      	str	r3, [r4, #8]
 800f2b2:	2900      	cmp	r1, #0
 800f2b4:	d1ed      	bne.n	800f292 <_puts_r+0x52>
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	da11      	bge.n	800f2de <_puts_r+0x9e>
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	210a      	movs	r1, #10
 800f2be:	4628      	mov	r0, r5
 800f2c0:	f002 f9cc 	bl	801165c <__swbuf_r>
 800f2c4:	3001      	adds	r0, #1
 800f2c6:	d0d7      	beq.n	800f278 <_puts_r+0x38>
 800f2c8:	250a      	movs	r5, #10
 800f2ca:	e7d7      	b.n	800f27c <_puts_r+0x3c>
 800f2cc:	4622      	mov	r2, r4
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f002 f9c4 	bl	801165c <__swbuf_r>
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d1e7      	bne.n	800f2a8 <_puts_r+0x68>
 800f2d8:	e7ce      	b.n	800f278 <_puts_r+0x38>
 800f2da:	3e01      	subs	r6, #1
 800f2dc:	e7e4      	b.n	800f2a8 <_puts_r+0x68>
 800f2de:	6823      	ldr	r3, [r4, #0]
 800f2e0:	1c5a      	adds	r2, r3, #1
 800f2e2:	6022      	str	r2, [r4, #0]
 800f2e4:	220a      	movs	r2, #10
 800f2e6:	701a      	strb	r2, [r3, #0]
 800f2e8:	e7ee      	b.n	800f2c8 <_puts_r+0x88>
	...

0800f2ec <puts>:
 800f2ec:	4b02      	ldr	r3, [pc, #8]	@ (800f2f8 <puts+0xc>)
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	f7ff bfa5 	b.w	800f240 <_puts_r>
 800f2f6:	bf00      	nop
 800f2f8:	200001a4 	.word	0x200001a4

0800f2fc <strncmp>:
 800f2fc:	b510      	push	{r4, lr}
 800f2fe:	b16a      	cbz	r2, 800f31c <strncmp+0x20>
 800f300:	3901      	subs	r1, #1
 800f302:	1884      	adds	r4, r0, r2
 800f304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f308:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d103      	bne.n	800f318 <strncmp+0x1c>
 800f310:	42a0      	cmp	r0, r4
 800f312:	d001      	beq.n	800f318 <strncmp+0x1c>
 800f314:	2a00      	cmp	r2, #0
 800f316:	d1f5      	bne.n	800f304 <strncmp+0x8>
 800f318:	1ad0      	subs	r0, r2, r3
 800f31a:	bd10      	pop	{r4, pc}
 800f31c:	4610      	mov	r0, r2
 800f31e:	e7fc      	b.n	800f31a <strncmp+0x1e>

0800f320 <memset>:
 800f320:	4402      	add	r2, r0
 800f322:	4603      	mov	r3, r0
 800f324:	4293      	cmp	r3, r2
 800f326:	d100      	bne.n	800f32a <memset+0xa>
 800f328:	4770      	bx	lr
 800f32a:	f803 1b01 	strb.w	r1, [r3], #1
 800f32e:	e7f9      	b.n	800f324 <memset+0x4>

0800f330 <_localeconv_r>:
 800f330:	4800      	ldr	r0, [pc, #0]	@ (800f334 <_localeconv_r+0x4>)
 800f332:	4770      	bx	lr
 800f334:	20000128 	.word	0x20000128

0800f338 <_sbrk_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	4d06      	ldr	r5, [pc, #24]	@ (800f354 <_sbrk_r+0x1c>)
 800f33c:	2300      	movs	r3, #0
 800f33e:	4604      	mov	r4, r0
 800f340:	4608      	mov	r0, r1
 800f342:	602b      	str	r3, [r5, #0]
 800f344:	f7f3 fd9c 	bl	8002e80 <_sbrk>
 800f348:	1c43      	adds	r3, r0, #1
 800f34a:	d102      	bne.n	800f352 <_sbrk_r+0x1a>
 800f34c:	682b      	ldr	r3, [r5, #0]
 800f34e:	b103      	cbz	r3, 800f352 <_sbrk_r+0x1a>
 800f350:	6023      	str	r3, [r4, #0]
 800f352:	bd38      	pop	{r3, r4, r5, pc}
 800f354:	200014f8 	.word	0x200014f8

0800f358 <__errno>:
 800f358:	4b01      	ldr	r3, [pc, #4]	@ (800f360 <__errno+0x8>)
 800f35a:	6818      	ldr	r0, [r3, #0]
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	200001a4 	.word	0x200001a4

0800f364 <__libc_init_array>:
 800f364:	b570      	push	{r4, r5, r6, lr}
 800f366:	4d0d      	ldr	r5, [pc, #52]	@ (800f39c <__libc_init_array+0x38>)
 800f368:	4c0d      	ldr	r4, [pc, #52]	@ (800f3a0 <__libc_init_array+0x3c>)
 800f36a:	1b64      	subs	r4, r4, r5
 800f36c:	10a4      	asrs	r4, r4, #2
 800f36e:	2600      	movs	r6, #0
 800f370:	42a6      	cmp	r6, r4
 800f372:	d109      	bne.n	800f388 <__libc_init_array+0x24>
 800f374:	4d0b      	ldr	r5, [pc, #44]	@ (800f3a4 <__libc_init_array+0x40>)
 800f376:	4c0c      	ldr	r4, [pc, #48]	@ (800f3a8 <__libc_init_array+0x44>)
 800f378:	f002 fc9e 	bl	8011cb8 <_init>
 800f37c:	1b64      	subs	r4, r4, r5
 800f37e:	10a4      	asrs	r4, r4, #2
 800f380:	2600      	movs	r6, #0
 800f382:	42a6      	cmp	r6, r4
 800f384:	d105      	bne.n	800f392 <__libc_init_array+0x2e>
 800f386:	bd70      	pop	{r4, r5, r6, pc}
 800f388:	f855 3b04 	ldr.w	r3, [r5], #4
 800f38c:	4798      	blx	r3
 800f38e:	3601      	adds	r6, #1
 800f390:	e7ee      	b.n	800f370 <__libc_init_array+0xc>
 800f392:	f855 3b04 	ldr.w	r3, [r5], #4
 800f396:	4798      	blx	r3
 800f398:	3601      	adds	r6, #1
 800f39a:	e7f2      	b.n	800f382 <__libc_init_array+0x1e>
 800f39c:	08012318 	.word	0x08012318
 800f3a0:	08012318 	.word	0x08012318
 800f3a4:	08012318 	.word	0x08012318
 800f3a8:	0801231c 	.word	0x0801231c

0800f3ac <__retarget_lock_init_recursive>:
 800f3ac:	4770      	bx	lr

0800f3ae <__retarget_lock_acquire_recursive>:
 800f3ae:	4770      	bx	lr

0800f3b0 <__retarget_lock_release_recursive>:
 800f3b0:	4770      	bx	lr

0800f3b2 <memcpy>:
 800f3b2:	440a      	add	r2, r1
 800f3b4:	4291      	cmp	r1, r2
 800f3b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f3ba:	d100      	bne.n	800f3be <memcpy+0xc>
 800f3bc:	4770      	bx	lr
 800f3be:	b510      	push	{r4, lr}
 800f3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3c8:	4291      	cmp	r1, r2
 800f3ca:	d1f9      	bne.n	800f3c0 <memcpy+0xe>
 800f3cc:	bd10      	pop	{r4, pc}
	...

0800f3d0 <nan>:
 800f3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f3d8 <nan+0x8>
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	00000000 	.word	0x00000000
 800f3dc:	7ff80000 	.word	0x7ff80000

0800f3e0 <nanf>:
 800f3e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f3e8 <nanf+0x8>
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop
 800f3e8:	7fc00000 	.word	0x7fc00000

0800f3ec <__assert_func>:
 800f3ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3ee:	4614      	mov	r4, r2
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	4b09      	ldr	r3, [pc, #36]	@ (800f418 <__assert_func+0x2c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	68d8      	ldr	r0, [r3, #12]
 800f3fa:	b954      	cbnz	r4, 800f412 <__assert_func+0x26>
 800f3fc:	4b07      	ldr	r3, [pc, #28]	@ (800f41c <__assert_func+0x30>)
 800f3fe:	461c      	mov	r4, r3
 800f400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f404:	9100      	str	r1, [sp, #0]
 800f406:	462b      	mov	r3, r5
 800f408:	4905      	ldr	r1, [pc, #20]	@ (800f420 <__assert_func+0x34>)
 800f40a:	f002 f8e7 	bl	80115dc <fiprintf>
 800f40e:	f002 faab 	bl	8011968 <abort>
 800f412:	4b04      	ldr	r3, [pc, #16]	@ (800f424 <__assert_func+0x38>)
 800f414:	e7f4      	b.n	800f400 <__assert_func+0x14>
 800f416:	bf00      	nop
 800f418:	200001a4 	.word	0x200001a4
 800f41c:	080120bc 	.word	0x080120bc
 800f420:	0801208e 	.word	0x0801208e
 800f424:	08012081 	.word	0x08012081

0800f428 <quorem>:
 800f428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	6903      	ldr	r3, [r0, #16]
 800f42e:	690c      	ldr	r4, [r1, #16]
 800f430:	42a3      	cmp	r3, r4
 800f432:	4607      	mov	r7, r0
 800f434:	db7e      	blt.n	800f534 <quorem+0x10c>
 800f436:	3c01      	subs	r4, #1
 800f438:	f101 0814 	add.w	r8, r1, #20
 800f43c:	00a3      	lsls	r3, r4, #2
 800f43e:	f100 0514 	add.w	r5, r0, #20
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f448:	9301      	str	r3, [sp, #4]
 800f44a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f44e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f452:	3301      	adds	r3, #1
 800f454:	429a      	cmp	r2, r3
 800f456:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f45a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f45e:	d32e      	bcc.n	800f4be <quorem+0x96>
 800f460:	f04f 0a00 	mov.w	sl, #0
 800f464:	46c4      	mov	ip, r8
 800f466:	46ae      	mov	lr, r5
 800f468:	46d3      	mov	fp, sl
 800f46a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f46e:	b298      	uxth	r0, r3
 800f470:	fb06 a000 	mla	r0, r6, r0, sl
 800f474:	0c02      	lsrs	r2, r0, #16
 800f476:	0c1b      	lsrs	r3, r3, #16
 800f478:	fb06 2303 	mla	r3, r6, r3, r2
 800f47c:	f8de 2000 	ldr.w	r2, [lr]
 800f480:	b280      	uxth	r0, r0
 800f482:	b292      	uxth	r2, r2
 800f484:	1a12      	subs	r2, r2, r0
 800f486:	445a      	add	r2, fp
 800f488:	f8de 0000 	ldr.w	r0, [lr]
 800f48c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f490:	b29b      	uxth	r3, r3
 800f492:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f496:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f49a:	b292      	uxth	r2, r2
 800f49c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f4a0:	45e1      	cmp	r9, ip
 800f4a2:	f84e 2b04 	str.w	r2, [lr], #4
 800f4a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f4aa:	d2de      	bcs.n	800f46a <quorem+0x42>
 800f4ac:	9b00      	ldr	r3, [sp, #0]
 800f4ae:	58eb      	ldr	r3, [r5, r3]
 800f4b0:	b92b      	cbnz	r3, 800f4be <quorem+0x96>
 800f4b2:	9b01      	ldr	r3, [sp, #4]
 800f4b4:	3b04      	subs	r3, #4
 800f4b6:	429d      	cmp	r5, r3
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	d32f      	bcc.n	800f51c <quorem+0xf4>
 800f4bc:	613c      	str	r4, [r7, #16]
 800f4be:	4638      	mov	r0, r7
 800f4c0:	f001 fe5a 	bl	8011178 <__mcmp>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	db25      	blt.n	800f514 <quorem+0xec>
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4d0:	f8d1 c000 	ldr.w	ip, [r1]
 800f4d4:	fa1f fe82 	uxth.w	lr, r2
 800f4d8:	fa1f f38c 	uxth.w	r3, ip
 800f4dc:	eba3 030e 	sub.w	r3, r3, lr
 800f4e0:	4403      	add	r3, r0
 800f4e2:	0c12      	lsrs	r2, r2, #16
 800f4e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f4e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4f2:	45c1      	cmp	r9, r8
 800f4f4:	f841 3b04 	str.w	r3, [r1], #4
 800f4f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f4fc:	d2e6      	bcs.n	800f4cc <quorem+0xa4>
 800f4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f506:	b922      	cbnz	r2, 800f512 <quorem+0xea>
 800f508:	3b04      	subs	r3, #4
 800f50a:	429d      	cmp	r5, r3
 800f50c:	461a      	mov	r2, r3
 800f50e:	d30b      	bcc.n	800f528 <quorem+0x100>
 800f510:	613c      	str	r4, [r7, #16]
 800f512:	3601      	adds	r6, #1
 800f514:	4630      	mov	r0, r6
 800f516:	b003      	add	sp, #12
 800f518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51c:	6812      	ldr	r2, [r2, #0]
 800f51e:	3b04      	subs	r3, #4
 800f520:	2a00      	cmp	r2, #0
 800f522:	d1cb      	bne.n	800f4bc <quorem+0x94>
 800f524:	3c01      	subs	r4, #1
 800f526:	e7c6      	b.n	800f4b6 <quorem+0x8e>
 800f528:	6812      	ldr	r2, [r2, #0]
 800f52a:	3b04      	subs	r3, #4
 800f52c:	2a00      	cmp	r2, #0
 800f52e:	d1ef      	bne.n	800f510 <quorem+0xe8>
 800f530:	3c01      	subs	r4, #1
 800f532:	e7ea      	b.n	800f50a <quorem+0xe2>
 800f534:	2000      	movs	r0, #0
 800f536:	e7ee      	b.n	800f516 <quorem+0xee>

0800f538 <_dtoa_r>:
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	69c7      	ldr	r7, [r0, #28]
 800f53e:	b099      	sub	sp, #100	@ 0x64
 800f540:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f544:	ec55 4b10 	vmov	r4, r5, d0
 800f548:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f54a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f54c:	4683      	mov	fp, r0
 800f54e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f550:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f552:	b97f      	cbnz	r7, 800f574 <_dtoa_r+0x3c>
 800f554:	2010      	movs	r0, #16
 800f556:	f7fe fa81 	bl	800da5c <malloc>
 800f55a:	4602      	mov	r2, r0
 800f55c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f560:	b920      	cbnz	r0, 800f56c <_dtoa_r+0x34>
 800f562:	4ba7      	ldr	r3, [pc, #668]	@ (800f800 <_dtoa_r+0x2c8>)
 800f564:	21ef      	movs	r1, #239	@ 0xef
 800f566:	48a7      	ldr	r0, [pc, #668]	@ (800f804 <_dtoa_r+0x2cc>)
 800f568:	f7ff ff40 	bl	800f3ec <__assert_func>
 800f56c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f570:	6007      	str	r7, [r0, #0]
 800f572:	60c7      	str	r7, [r0, #12]
 800f574:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f578:	6819      	ldr	r1, [r3, #0]
 800f57a:	b159      	cbz	r1, 800f594 <_dtoa_r+0x5c>
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	604a      	str	r2, [r1, #4]
 800f580:	2301      	movs	r3, #1
 800f582:	4093      	lsls	r3, r2
 800f584:	608b      	str	r3, [r1, #8]
 800f586:	4658      	mov	r0, fp
 800f588:	f001 fb72 	bl	8010c70 <_Bfree>
 800f58c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f590:	2200      	movs	r2, #0
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	1e2b      	subs	r3, r5, #0
 800f596:	bfb9      	ittee	lt
 800f598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f59c:	9303      	strlt	r3, [sp, #12]
 800f59e:	2300      	movge	r3, #0
 800f5a0:	6033      	strge	r3, [r6, #0]
 800f5a2:	9f03      	ldr	r7, [sp, #12]
 800f5a4:	4b98      	ldr	r3, [pc, #608]	@ (800f808 <_dtoa_r+0x2d0>)
 800f5a6:	bfbc      	itt	lt
 800f5a8:	2201      	movlt	r2, #1
 800f5aa:	6032      	strlt	r2, [r6, #0]
 800f5ac:	43bb      	bics	r3, r7
 800f5ae:	d112      	bne.n	800f5d6 <_dtoa_r+0x9e>
 800f5b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f5b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f5b6:	6013      	str	r3, [r2, #0]
 800f5b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f5bc:	4323      	orrs	r3, r4
 800f5be:	f000 854d 	beq.w	801005c <_dtoa_r+0xb24>
 800f5c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f5c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f81c <_dtoa_r+0x2e4>
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 854f 	beq.w	801006c <_dtoa_r+0xb34>
 800f5ce:	f10a 0303 	add.w	r3, sl, #3
 800f5d2:	f000 bd49 	b.w	8010068 <_dtoa_r+0xb30>
 800f5d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	ec51 0b17 	vmov	r0, r1, d7
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f5e6:	f7f1 fa97 	bl	8000b18 <__aeabi_dcmpeq>
 800f5ea:	4680      	mov	r8, r0
 800f5ec:	b158      	cbz	r0, 800f606 <_dtoa_r+0xce>
 800f5ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	6013      	str	r3, [r2, #0]
 800f5f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f5f6:	b113      	cbz	r3, 800f5fe <_dtoa_r+0xc6>
 800f5f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f5fa:	4b84      	ldr	r3, [pc, #528]	@ (800f80c <_dtoa_r+0x2d4>)
 800f5fc:	6013      	str	r3, [r2, #0]
 800f5fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f820 <_dtoa_r+0x2e8>
 800f602:	f000 bd33 	b.w	801006c <_dtoa_r+0xb34>
 800f606:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f60a:	aa16      	add	r2, sp, #88	@ 0x58
 800f60c:	a917      	add	r1, sp, #92	@ 0x5c
 800f60e:	4658      	mov	r0, fp
 800f610:	f001 fed2 	bl	80113b8 <__d2b>
 800f614:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f618:	4681      	mov	r9, r0
 800f61a:	2e00      	cmp	r6, #0
 800f61c:	d077      	beq.n	800f70e <_dtoa_r+0x1d6>
 800f61e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f620:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f62c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f630:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f634:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f638:	4619      	mov	r1, r3
 800f63a:	2200      	movs	r2, #0
 800f63c:	4b74      	ldr	r3, [pc, #464]	@ (800f810 <_dtoa_r+0x2d8>)
 800f63e:	f7f0 fe4b 	bl	80002d8 <__aeabi_dsub>
 800f642:	a369      	add	r3, pc, #420	@ (adr r3, 800f7e8 <_dtoa_r+0x2b0>)
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	f7f0 fffe 	bl	8000648 <__aeabi_dmul>
 800f64c:	a368      	add	r3, pc, #416	@ (adr r3, 800f7f0 <_dtoa_r+0x2b8>)
 800f64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f652:	f7f0 fe43 	bl	80002dc <__adddf3>
 800f656:	4604      	mov	r4, r0
 800f658:	4630      	mov	r0, r6
 800f65a:	460d      	mov	r5, r1
 800f65c:	f7f0 ff8a 	bl	8000574 <__aeabi_i2d>
 800f660:	a365      	add	r3, pc, #404	@ (adr r3, 800f7f8 <_dtoa_r+0x2c0>)
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	f7f0 ffef 	bl	8000648 <__aeabi_dmul>
 800f66a:	4602      	mov	r2, r0
 800f66c:	460b      	mov	r3, r1
 800f66e:	4620      	mov	r0, r4
 800f670:	4629      	mov	r1, r5
 800f672:	f7f0 fe33 	bl	80002dc <__adddf3>
 800f676:	4604      	mov	r4, r0
 800f678:	460d      	mov	r5, r1
 800f67a:	f7f1 fa95 	bl	8000ba8 <__aeabi_d2iz>
 800f67e:	2200      	movs	r2, #0
 800f680:	4607      	mov	r7, r0
 800f682:	2300      	movs	r3, #0
 800f684:	4620      	mov	r0, r4
 800f686:	4629      	mov	r1, r5
 800f688:	f7f1 fa50 	bl	8000b2c <__aeabi_dcmplt>
 800f68c:	b140      	cbz	r0, 800f6a0 <_dtoa_r+0x168>
 800f68e:	4638      	mov	r0, r7
 800f690:	f7f0 ff70 	bl	8000574 <__aeabi_i2d>
 800f694:	4622      	mov	r2, r4
 800f696:	462b      	mov	r3, r5
 800f698:	f7f1 fa3e 	bl	8000b18 <__aeabi_dcmpeq>
 800f69c:	b900      	cbnz	r0, 800f6a0 <_dtoa_r+0x168>
 800f69e:	3f01      	subs	r7, #1
 800f6a0:	2f16      	cmp	r7, #22
 800f6a2:	d851      	bhi.n	800f748 <_dtoa_r+0x210>
 800f6a4:	4b5b      	ldr	r3, [pc, #364]	@ (800f814 <_dtoa_r+0x2dc>)
 800f6a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6b2:	f7f1 fa3b 	bl	8000b2c <__aeabi_dcmplt>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d048      	beq.n	800f74c <_dtoa_r+0x214>
 800f6ba:	3f01      	subs	r7, #1
 800f6bc:	2300      	movs	r3, #0
 800f6be:	9312      	str	r3, [sp, #72]	@ 0x48
 800f6c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f6c2:	1b9b      	subs	r3, r3, r6
 800f6c4:	1e5a      	subs	r2, r3, #1
 800f6c6:	bf44      	itt	mi
 800f6c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f6cc:	2300      	movmi	r3, #0
 800f6ce:	9208      	str	r2, [sp, #32]
 800f6d0:	bf54      	ite	pl
 800f6d2:	f04f 0800 	movpl.w	r8, #0
 800f6d6:	9308      	strmi	r3, [sp, #32]
 800f6d8:	2f00      	cmp	r7, #0
 800f6da:	db39      	blt.n	800f750 <_dtoa_r+0x218>
 800f6dc:	9b08      	ldr	r3, [sp, #32]
 800f6de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f6e0:	443b      	add	r3, r7
 800f6e2:	9308      	str	r3, [sp, #32]
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6ea:	2b09      	cmp	r3, #9
 800f6ec:	d864      	bhi.n	800f7b8 <_dtoa_r+0x280>
 800f6ee:	2b05      	cmp	r3, #5
 800f6f0:	bfc4      	itt	gt
 800f6f2:	3b04      	subgt	r3, #4
 800f6f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f8:	f1a3 0302 	sub.w	r3, r3, #2
 800f6fc:	bfcc      	ite	gt
 800f6fe:	2400      	movgt	r4, #0
 800f700:	2401      	movle	r4, #1
 800f702:	2b03      	cmp	r3, #3
 800f704:	d863      	bhi.n	800f7ce <_dtoa_r+0x296>
 800f706:	e8df f003 	tbb	[pc, r3]
 800f70a:	372a      	.short	0x372a
 800f70c:	5535      	.short	0x5535
 800f70e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f712:	441e      	add	r6, r3
 800f714:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f718:	2b20      	cmp	r3, #32
 800f71a:	bfc1      	itttt	gt
 800f71c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f720:	409f      	lslgt	r7, r3
 800f722:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f726:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f72a:	bfd6      	itet	le
 800f72c:	f1c3 0320 	rsble	r3, r3, #32
 800f730:	ea47 0003 	orrgt.w	r0, r7, r3
 800f734:	fa04 f003 	lslle.w	r0, r4, r3
 800f738:	f7f0 ff0c 	bl	8000554 <__aeabi_ui2d>
 800f73c:	2201      	movs	r2, #1
 800f73e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f742:	3e01      	subs	r6, #1
 800f744:	9214      	str	r2, [sp, #80]	@ 0x50
 800f746:	e777      	b.n	800f638 <_dtoa_r+0x100>
 800f748:	2301      	movs	r3, #1
 800f74a:	e7b8      	b.n	800f6be <_dtoa_r+0x186>
 800f74c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f74e:	e7b7      	b.n	800f6c0 <_dtoa_r+0x188>
 800f750:	427b      	negs	r3, r7
 800f752:	930a      	str	r3, [sp, #40]	@ 0x28
 800f754:	2300      	movs	r3, #0
 800f756:	eba8 0807 	sub.w	r8, r8, r7
 800f75a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f75c:	e7c4      	b.n	800f6e8 <_dtoa_r+0x1b0>
 800f75e:	2300      	movs	r3, #0
 800f760:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f764:	2b00      	cmp	r3, #0
 800f766:	dc35      	bgt.n	800f7d4 <_dtoa_r+0x29c>
 800f768:	2301      	movs	r3, #1
 800f76a:	9300      	str	r3, [sp, #0]
 800f76c:	9307      	str	r3, [sp, #28]
 800f76e:	461a      	mov	r2, r3
 800f770:	920e      	str	r2, [sp, #56]	@ 0x38
 800f772:	e00b      	b.n	800f78c <_dtoa_r+0x254>
 800f774:	2301      	movs	r3, #1
 800f776:	e7f3      	b.n	800f760 <_dtoa_r+0x228>
 800f778:	2300      	movs	r3, #0
 800f77a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f77e:	18fb      	adds	r3, r7, r3
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	3301      	adds	r3, #1
 800f784:	2b01      	cmp	r3, #1
 800f786:	9307      	str	r3, [sp, #28]
 800f788:	bfb8      	it	lt
 800f78a:	2301      	movlt	r3, #1
 800f78c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f790:	2100      	movs	r1, #0
 800f792:	2204      	movs	r2, #4
 800f794:	f102 0514 	add.w	r5, r2, #20
 800f798:	429d      	cmp	r5, r3
 800f79a:	d91f      	bls.n	800f7dc <_dtoa_r+0x2a4>
 800f79c:	6041      	str	r1, [r0, #4]
 800f79e:	4658      	mov	r0, fp
 800f7a0:	f001 fa26 	bl	8010bf0 <_Balloc>
 800f7a4:	4682      	mov	sl, r0
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	d13c      	bne.n	800f824 <_dtoa_r+0x2ec>
 800f7aa:	4b1b      	ldr	r3, [pc, #108]	@ (800f818 <_dtoa_r+0x2e0>)
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800f7b2:	e6d8      	b.n	800f566 <_dtoa_r+0x2e>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e7e0      	b.n	800f77a <_dtoa_r+0x242>
 800f7b8:	2401      	movs	r4, #1
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f7c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	9307      	str	r3, [sp, #28]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	2312      	movs	r3, #18
 800f7cc:	e7d0      	b.n	800f770 <_dtoa_r+0x238>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7d2:	e7f5      	b.n	800f7c0 <_dtoa_r+0x288>
 800f7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	9307      	str	r3, [sp, #28]
 800f7da:	e7d7      	b.n	800f78c <_dtoa_r+0x254>
 800f7dc:	3101      	adds	r1, #1
 800f7de:	0052      	lsls	r2, r2, #1
 800f7e0:	e7d8      	b.n	800f794 <_dtoa_r+0x25c>
 800f7e2:	bf00      	nop
 800f7e4:	f3af 8000 	nop.w
 800f7e8:	636f4361 	.word	0x636f4361
 800f7ec:	3fd287a7 	.word	0x3fd287a7
 800f7f0:	8b60c8b3 	.word	0x8b60c8b3
 800f7f4:	3fc68a28 	.word	0x3fc68a28
 800f7f8:	509f79fb 	.word	0x509f79fb
 800f7fc:	3fd34413 	.word	0x3fd34413
 800f800:	080120ca 	.word	0x080120ca
 800f804:	080120e1 	.word	0x080120e1
 800f808:	7ff00000 	.word	0x7ff00000
 800f80c:	08011efd 	.word	0x08011efd
 800f810:	3ff80000 	.word	0x3ff80000
 800f814:	08012248 	.word	0x08012248
 800f818:	08012139 	.word	0x08012139
 800f81c:	080120c6 	.word	0x080120c6
 800f820:	08011efc 	.word	0x08011efc
 800f824:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f828:	6018      	str	r0, [r3, #0]
 800f82a:	9b07      	ldr	r3, [sp, #28]
 800f82c:	2b0e      	cmp	r3, #14
 800f82e:	f200 80a4 	bhi.w	800f97a <_dtoa_r+0x442>
 800f832:	2c00      	cmp	r4, #0
 800f834:	f000 80a1 	beq.w	800f97a <_dtoa_r+0x442>
 800f838:	2f00      	cmp	r7, #0
 800f83a:	dd33      	ble.n	800f8a4 <_dtoa_r+0x36c>
 800f83c:	4bad      	ldr	r3, [pc, #692]	@ (800faf4 <_dtoa_r+0x5bc>)
 800f83e:	f007 020f 	and.w	r2, r7, #15
 800f842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f846:	ed93 7b00 	vldr	d7, [r3]
 800f84a:	05f8      	lsls	r0, r7, #23
 800f84c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f850:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f854:	d516      	bpl.n	800f884 <_dtoa_r+0x34c>
 800f856:	4ba8      	ldr	r3, [pc, #672]	@ (800faf8 <_dtoa_r+0x5c0>)
 800f858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f85c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f860:	f7f1 f81c 	bl	800089c <__aeabi_ddiv>
 800f864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f868:	f004 040f 	and.w	r4, r4, #15
 800f86c:	2603      	movs	r6, #3
 800f86e:	4da2      	ldr	r5, [pc, #648]	@ (800faf8 <_dtoa_r+0x5c0>)
 800f870:	b954      	cbnz	r4, 800f888 <_dtoa_r+0x350>
 800f872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f87a:	f7f1 f80f 	bl	800089c <__aeabi_ddiv>
 800f87e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f882:	e028      	b.n	800f8d6 <_dtoa_r+0x39e>
 800f884:	2602      	movs	r6, #2
 800f886:	e7f2      	b.n	800f86e <_dtoa_r+0x336>
 800f888:	07e1      	lsls	r1, r4, #31
 800f88a:	d508      	bpl.n	800f89e <_dtoa_r+0x366>
 800f88c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f890:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f894:	f7f0 fed8 	bl	8000648 <__aeabi_dmul>
 800f898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f89c:	3601      	adds	r6, #1
 800f89e:	1064      	asrs	r4, r4, #1
 800f8a0:	3508      	adds	r5, #8
 800f8a2:	e7e5      	b.n	800f870 <_dtoa_r+0x338>
 800f8a4:	f000 80d2 	beq.w	800fa4c <_dtoa_r+0x514>
 800f8a8:	427c      	negs	r4, r7
 800f8aa:	4b92      	ldr	r3, [pc, #584]	@ (800faf4 <_dtoa_r+0x5bc>)
 800f8ac:	4d92      	ldr	r5, [pc, #584]	@ (800faf8 <_dtoa_r+0x5c0>)
 800f8ae:	f004 020f 	and.w	r2, r4, #15
 800f8b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8be:	f7f0 fec3 	bl	8000648 <__aeabi_dmul>
 800f8c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8c6:	1124      	asrs	r4, r4, #4
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	2602      	movs	r6, #2
 800f8cc:	2c00      	cmp	r4, #0
 800f8ce:	f040 80b2 	bne.w	800fa36 <_dtoa_r+0x4fe>
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1d3      	bne.n	800f87e <_dtoa_r+0x346>
 800f8d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f000 80b7 	beq.w	800fa50 <_dtoa_r+0x518>
 800f8e2:	4b86      	ldr	r3, [pc, #536]	@ (800fafc <_dtoa_r+0x5c4>)
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	f7f1 f91f 	bl	8000b2c <__aeabi_dcmplt>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	f000 80ae 	beq.w	800fa50 <_dtoa_r+0x518>
 800f8f4:	9b07      	ldr	r3, [sp, #28]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f000 80aa 	beq.w	800fa50 <_dtoa_r+0x518>
 800f8fc:	9b00      	ldr	r3, [sp, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	dd37      	ble.n	800f972 <_dtoa_r+0x43a>
 800f902:	1e7b      	subs	r3, r7, #1
 800f904:	9304      	str	r3, [sp, #16]
 800f906:	4620      	mov	r0, r4
 800f908:	4b7d      	ldr	r3, [pc, #500]	@ (800fb00 <_dtoa_r+0x5c8>)
 800f90a:	2200      	movs	r2, #0
 800f90c:	4629      	mov	r1, r5
 800f90e:	f7f0 fe9b 	bl	8000648 <__aeabi_dmul>
 800f912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f916:	9c00      	ldr	r4, [sp, #0]
 800f918:	3601      	adds	r6, #1
 800f91a:	4630      	mov	r0, r6
 800f91c:	f7f0 fe2a 	bl	8000574 <__aeabi_i2d>
 800f920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f924:	f7f0 fe90 	bl	8000648 <__aeabi_dmul>
 800f928:	4b76      	ldr	r3, [pc, #472]	@ (800fb04 <_dtoa_r+0x5cc>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	f7f0 fcd6 	bl	80002dc <__adddf3>
 800f930:	4605      	mov	r5, r0
 800f932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f936:	2c00      	cmp	r4, #0
 800f938:	f040 808d 	bne.w	800fa56 <_dtoa_r+0x51e>
 800f93c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f940:	4b71      	ldr	r3, [pc, #452]	@ (800fb08 <_dtoa_r+0x5d0>)
 800f942:	2200      	movs	r2, #0
 800f944:	f7f0 fcc8 	bl	80002d8 <__aeabi_dsub>
 800f948:	4602      	mov	r2, r0
 800f94a:	460b      	mov	r3, r1
 800f94c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f950:	462a      	mov	r2, r5
 800f952:	4633      	mov	r3, r6
 800f954:	f7f1 f908 	bl	8000b68 <__aeabi_dcmpgt>
 800f958:	2800      	cmp	r0, #0
 800f95a:	f040 828b 	bne.w	800fe74 <_dtoa_r+0x93c>
 800f95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f962:	462a      	mov	r2, r5
 800f964:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f968:	f7f1 f8e0 	bl	8000b2c <__aeabi_dcmplt>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	f040 8128 	bne.w	800fbc2 <_dtoa_r+0x68a>
 800f972:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f976:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f97a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f2c0 815a 	blt.w	800fc36 <_dtoa_r+0x6fe>
 800f982:	2f0e      	cmp	r7, #14
 800f984:	f300 8157 	bgt.w	800fc36 <_dtoa_r+0x6fe>
 800f988:	4b5a      	ldr	r3, [pc, #360]	@ (800faf4 <_dtoa_r+0x5bc>)
 800f98a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f98e:	ed93 7b00 	vldr	d7, [r3]
 800f992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f994:	2b00      	cmp	r3, #0
 800f996:	ed8d 7b00 	vstr	d7, [sp]
 800f99a:	da03      	bge.n	800f9a4 <_dtoa_r+0x46c>
 800f99c:	9b07      	ldr	r3, [sp, #28]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f340 8101 	ble.w	800fba6 <_dtoa_r+0x66e>
 800f9a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f9a8:	4656      	mov	r6, sl
 800f9aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	f7f0 ff73 	bl	800089c <__aeabi_ddiv>
 800f9b6:	f7f1 f8f7 	bl	8000ba8 <__aeabi_d2iz>
 800f9ba:	4680      	mov	r8, r0
 800f9bc:	f7f0 fdda 	bl	8000574 <__aeabi_i2d>
 800f9c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9c4:	f7f0 fe40 	bl	8000648 <__aeabi_dmul>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f9d4:	f7f0 fc80 	bl	80002d8 <__aeabi_dsub>
 800f9d8:	f806 4b01 	strb.w	r4, [r6], #1
 800f9dc:	9d07      	ldr	r5, [sp, #28]
 800f9de:	eba6 040a 	sub.w	r4, r6, sl
 800f9e2:	42a5      	cmp	r5, r4
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	f040 8117 	bne.w	800fc1a <_dtoa_r+0x6e2>
 800f9ec:	f7f0 fc76 	bl	80002dc <__adddf3>
 800f9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	460d      	mov	r5, r1
 800f9f8:	f7f1 f8b6 	bl	8000b68 <__aeabi_dcmpgt>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	f040 80f9 	bne.w	800fbf4 <_dtoa_r+0x6bc>
 800fa02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa06:	4620      	mov	r0, r4
 800fa08:	4629      	mov	r1, r5
 800fa0a:	f7f1 f885 	bl	8000b18 <__aeabi_dcmpeq>
 800fa0e:	b118      	cbz	r0, 800fa18 <_dtoa_r+0x4e0>
 800fa10:	f018 0f01 	tst.w	r8, #1
 800fa14:	f040 80ee 	bne.w	800fbf4 <_dtoa_r+0x6bc>
 800fa18:	4649      	mov	r1, r9
 800fa1a:	4658      	mov	r0, fp
 800fa1c:	f001 f928 	bl	8010c70 <_Bfree>
 800fa20:	2300      	movs	r3, #0
 800fa22:	7033      	strb	r3, [r6, #0]
 800fa24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa26:	3701      	adds	r7, #1
 800fa28:	601f      	str	r7, [r3, #0]
 800fa2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f000 831d 	beq.w	801006c <_dtoa_r+0xb34>
 800fa32:	601e      	str	r6, [r3, #0]
 800fa34:	e31a      	b.n	801006c <_dtoa_r+0xb34>
 800fa36:	07e2      	lsls	r2, r4, #31
 800fa38:	d505      	bpl.n	800fa46 <_dtoa_r+0x50e>
 800fa3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa3e:	f7f0 fe03 	bl	8000648 <__aeabi_dmul>
 800fa42:	3601      	adds	r6, #1
 800fa44:	2301      	movs	r3, #1
 800fa46:	1064      	asrs	r4, r4, #1
 800fa48:	3508      	adds	r5, #8
 800fa4a:	e73f      	b.n	800f8cc <_dtoa_r+0x394>
 800fa4c:	2602      	movs	r6, #2
 800fa4e:	e742      	b.n	800f8d6 <_dtoa_r+0x39e>
 800fa50:	9c07      	ldr	r4, [sp, #28]
 800fa52:	9704      	str	r7, [sp, #16]
 800fa54:	e761      	b.n	800f91a <_dtoa_r+0x3e2>
 800fa56:	4b27      	ldr	r3, [pc, #156]	@ (800faf4 <_dtoa_r+0x5bc>)
 800fa58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fa5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa62:	4454      	add	r4, sl
 800fa64:	2900      	cmp	r1, #0
 800fa66:	d053      	beq.n	800fb10 <_dtoa_r+0x5d8>
 800fa68:	4928      	ldr	r1, [pc, #160]	@ (800fb0c <_dtoa_r+0x5d4>)
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	f7f0 ff16 	bl	800089c <__aeabi_ddiv>
 800fa70:	4633      	mov	r3, r6
 800fa72:	462a      	mov	r2, r5
 800fa74:	f7f0 fc30 	bl	80002d8 <__aeabi_dsub>
 800fa78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa7c:	4656      	mov	r6, sl
 800fa7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa82:	f7f1 f891 	bl	8000ba8 <__aeabi_d2iz>
 800fa86:	4605      	mov	r5, r0
 800fa88:	f7f0 fd74 	bl	8000574 <__aeabi_i2d>
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	460b      	mov	r3, r1
 800fa90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa94:	f7f0 fc20 	bl	80002d8 <__aeabi_dsub>
 800fa98:	3530      	adds	r5, #48	@ 0x30
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800faa2:	f806 5b01 	strb.w	r5, [r6], #1
 800faa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800faaa:	f7f1 f83f 	bl	8000b2c <__aeabi_dcmplt>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d171      	bne.n	800fb96 <_dtoa_r+0x65e>
 800fab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fab6:	4911      	ldr	r1, [pc, #68]	@ (800fafc <_dtoa_r+0x5c4>)
 800fab8:	2000      	movs	r0, #0
 800faba:	f7f0 fc0d 	bl	80002d8 <__aeabi_dsub>
 800fabe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fac2:	f7f1 f833 	bl	8000b2c <__aeabi_dcmplt>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	f040 8095 	bne.w	800fbf6 <_dtoa_r+0x6be>
 800facc:	42a6      	cmp	r6, r4
 800face:	f43f af50 	beq.w	800f972 <_dtoa_r+0x43a>
 800fad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fad6:	4b0a      	ldr	r3, [pc, #40]	@ (800fb00 <_dtoa_r+0x5c8>)
 800fad8:	2200      	movs	r2, #0
 800fada:	f7f0 fdb5 	bl	8000648 <__aeabi_dmul>
 800fade:	4b08      	ldr	r3, [pc, #32]	@ (800fb00 <_dtoa_r+0x5c8>)
 800fae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fae4:	2200      	movs	r2, #0
 800fae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faea:	f7f0 fdad 	bl	8000648 <__aeabi_dmul>
 800faee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faf2:	e7c4      	b.n	800fa7e <_dtoa_r+0x546>
 800faf4:	08012248 	.word	0x08012248
 800faf8:	08012220 	.word	0x08012220
 800fafc:	3ff00000 	.word	0x3ff00000
 800fb00:	40240000 	.word	0x40240000
 800fb04:	401c0000 	.word	0x401c0000
 800fb08:	40140000 	.word	0x40140000
 800fb0c:	3fe00000 	.word	0x3fe00000
 800fb10:	4631      	mov	r1, r6
 800fb12:	4628      	mov	r0, r5
 800fb14:	f7f0 fd98 	bl	8000648 <__aeabi_dmul>
 800fb18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb1c:	9415      	str	r4, [sp, #84]	@ 0x54
 800fb1e:	4656      	mov	r6, sl
 800fb20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb24:	f7f1 f840 	bl	8000ba8 <__aeabi_d2iz>
 800fb28:	4605      	mov	r5, r0
 800fb2a:	f7f0 fd23 	bl	8000574 <__aeabi_i2d>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb36:	f7f0 fbcf 	bl	80002d8 <__aeabi_dsub>
 800fb3a:	3530      	adds	r5, #48	@ 0x30
 800fb3c:	f806 5b01 	strb.w	r5, [r6], #1
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	42a6      	cmp	r6, r4
 800fb46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb4a:	f04f 0200 	mov.w	r2, #0
 800fb4e:	d124      	bne.n	800fb9a <_dtoa_r+0x662>
 800fb50:	4bac      	ldr	r3, [pc, #688]	@ (800fe04 <_dtoa_r+0x8cc>)
 800fb52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fb56:	f7f0 fbc1 	bl	80002dc <__adddf3>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb62:	f7f1 f801 	bl	8000b68 <__aeabi_dcmpgt>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d145      	bne.n	800fbf6 <_dtoa_r+0x6be>
 800fb6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb6e:	49a5      	ldr	r1, [pc, #660]	@ (800fe04 <_dtoa_r+0x8cc>)
 800fb70:	2000      	movs	r0, #0
 800fb72:	f7f0 fbb1 	bl	80002d8 <__aeabi_dsub>
 800fb76:	4602      	mov	r2, r0
 800fb78:	460b      	mov	r3, r1
 800fb7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb7e:	f7f0 ffd5 	bl	8000b2c <__aeabi_dcmplt>
 800fb82:	2800      	cmp	r0, #0
 800fb84:	f43f aef5 	beq.w	800f972 <_dtoa_r+0x43a>
 800fb88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fb8a:	1e73      	subs	r3, r6, #1
 800fb8c:	9315      	str	r3, [sp, #84]	@ 0x54
 800fb8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb92:	2b30      	cmp	r3, #48	@ 0x30
 800fb94:	d0f8      	beq.n	800fb88 <_dtoa_r+0x650>
 800fb96:	9f04      	ldr	r7, [sp, #16]
 800fb98:	e73e      	b.n	800fa18 <_dtoa_r+0x4e0>
 800fb9a:	4b9b      	ldr	r3, [pc, #620]	@ (800fe08 <_dtoa_r+0x8d0>)
 800fb9c:	f7f0 fd54 	bl	8000648 <__aeabi_dmul>
 800fba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fba4:	e7bc      	b.n	800fb20 <_dtoa_r+0x5e8>
 800fba6:	d10c      	bne.n	800fbc2 <_dtoa_r+0x68a>
 800fba8:	4b98      	ldr	r3, [pc, #608]	@ (800fe0c <_dtoa_r+0x8d4>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbb0:	f7f0 fd4a 	bl	8000648 <__aeabi_dmul>
 800fbb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbb8:	f7f0 ffcc 	bl	8000b54 <__aeabi_dcmpge>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	f000 8157 	beq.w	800fe70 <_dtoa_r+0x938>
 800fbc2:	2400      	movs	r4, #0
 800fbc4:	4625      	mov	r5, r4
 800fbc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbc8:	43db      	mvns	r3, r3
 800fbca:	9304      	str	r3, [sp, #16]
 800fbcc:	4656      	mov	r6, sl
 800fbce:	2700      	movs	r7, #0
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	4658      	mov	r0, fp
 800fbd4:	f001 f84c 	bl	8010c70 <_Bfree>
 800fbd8:	2d00      	cmp	r5, #0
 800fbda:	d0dc      	beq.n	800fb96 <_dtoa_r+0x65e>
 800fbdc:	b12f      	cbz	r7, 800fbea <_dtoa_r+0x6b2>
 800fbde:	42af      	cmp	r7, r5
 800fbe0:	d003      	beq.n	800fbea <_dtoa_r+0x6b2>
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	4658      	mov	r0, fp
 800fbe6:	f001 f843 	bl	8010c70 <_Bfree>
 800fbea:	4629      	mov	r1, r5
 800fbec:	4658      	mov	r0, fp
 800fbee:	f001 f83f 	bl	8010c70 <_Bfree>
 800fbf2:	e7d0      	b.n	800fb96 <_dtoa_r+0x65e>
 800fbf4:	9704      	str	r7, [sp, #16]
 800fbf6:	4633      	mov	r3, r6
 800fbf8:	461e      	mov	r6, r3
 800fbfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbfe:	2a39      	cmp	r2, #57	@ 0x39
 800fc00:	d107      	bne.n	800fc12 <_dtoa_r+0x6da>
 800fc02:	459a      	cmp	sl, r3
 800fc04:	d1f8      	bne.n	800fbf8 <_dtoa_r+0x6c0>
 800fc06:	9a04      	ldr	r2, [sp, #16]
 800fc08:	3201      	adds	r2, #1
 800fc0a:	9204      	str	r2, [sp, #16]
 800fc0c:	2230      	movs	r2, #48	@ 0x30
 800fc0e:	f88a 2000 	strb.w	r2, [sl]
 800fc12:	781a      	ldrb	r2, [r3, #0]
 800fc14:	3201      	adds	r2, #1
 800fc16:	701a      	strb	r2, [r3, #0]
 800fc18:	e7bd      	b.n	800fb96 <_dtoa_r+0x65e>
 800fc1a:	4b7b      	ldr	r3, [pc, #492]	@ (800fe08 <_dtoa_r+0x8d0>)
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f7f0 fd13 	bl	8000648 <__aeabi_dmul>
 800fc22:	2200      	movs	r2, #0
 800fc24:	2300      	movs	r3, #0
 800fc26:	4604      	mov	r4, r0
 800fc28:	460d      	mov	r5, r1
 800fc2a:	f7f0 ff75 	bl	8000b18 <__aeabi_dcmpeq>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	f43f aebb 	beq.w	800f9aa <_dtoa_r+0x472>
 800fc34:	e6f0      	b.n	800fa18 <_dtoa_r+0x4e0>
 800fc36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	f000 80db 	beq.w	800fdf4 <_dtoa_r+0x8bc>
 800fc3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc40:	2a01      	cmp	r2, #1
 800fc42:	f300 80bf 	bgt.w	800fdc4 <_dtoa_r+0x88c>
 800fc46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fc48:	2a00      	cmp	r2, #0
 800fc4a:	f000 80b7 	beq.w	800fdbc <_dtoa_r+0x884>
 800fc4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fc52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fc54:	4646      	mov	r6, r8
 800fc56:	9a08      	ldr	r2, [sp, #32]
 800fc58:	2101      	movs	r1, #1
 800fc5a:	441a      	add	r2, r3
 800fc5c:	4658      	mov	r0, fp
 800fc5e:	4498      	add	r8, r3
 800fc60:	9208      	str	r2, [sp, #32]
 800fc62:	f001 f903 	bl	8010e6c <__i2b>
 800fc66:	4605      	mov	r5, r0
 800fc68:	b15e      	cbz	r6, 800fc82 <_dtoa_r+0x74a>
 800fc6a:	9b08      	ldr	r3, [sp, #32]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	dd08      	ble.n	800fc82 <_dtoa_r+0x74a>
 800fc70:	42b3      	cmp	r3, r6
 800fc72:	9a08      	ldr	r2, [sp, #32]
 800fc74:	bfa8      	it	ge
 800fc76:	4633      	movge	r3, r6
 800fc78:	eba8 0803 	sub.w	r8, r8, r3
 800fc7c:	1af6      	subs	r6, r6, r3
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	9308      	str	r3, [sp, #32]
 800fc82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc84:	b1f3      	cbz	r3, 800fcc4 <_dtoa_r+0x78c>
 800fc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 80b7 	beq.w	800fdfc <_dtoa_r+0x8c4>
 800fc8e:	b18c      	cbz	r4, 800fcb4 <_dtoa_r+0x77c>
 800fc90:	4629      	mov	r1, r5
 800fc92:	4622      	mov	r2, r4
 800fc94:	4658      	mov	r0, fp
 800fc96:	f001 f9a9 	bl	8010fec <__pow5mult>
 800fc9a:	464a      	mov	r2, r9
 800fc9c:	4601      	mov	r1, r0
 800fc9e:	4605      	mov	r5, r0
 800fca0:	4658      	mov	r0, fp
 800fca2:	f001 f8f9 	bl	8010e98 <__multiply>
 800fca6:	4649      	mov	r1, r9
 800fca8:	9004      	str	r0, [sp, #16]
 800fcaa:	4658      	mov	r0, fp
 800fcac:	f000 ffe0 	bl	8010c70 <_Bfree>
 800fcb0:	9b04      	ldr	r3, [sp, #16]
 800fcb2:	4699      	mov	r9, r3
 800fcb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcb6:	1b1a      	subs	r2, r3, r4
 800fcb8:	d004      	beq.n	800fcc4 <_dtoa_r+0x78c>
 800fcba:	4649      	mov	r1, r9
 800fcbc:	4658      	mov	r0, fp
 800fcbe:	f001 f995 	bl	8010fec <__pow5mult>
 800fcc2:	4681      	mov	r9, r0
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	4658      	mov	r0, fp
 800fcc8:	f001 f8d0 	bl	8010e6c <__i2b>
 800fccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcce:	4604      	mov	r4, r0
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f000 81cf 	beq.w	8010074 <_dtoa_r+0xb3c>
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	4601      	mov	r1, r0
 800fcda:	4658      	mov	r0, fp
 800fcdc:	f001 f986 	bl	8010fec <__pow5mult>
 800fce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	4604      	mov	r4, r0
 800fce6:	f300 8095 	bgt.w	800fe14 <_dtoa_r+0x8dc>
 800fcea:	9b02      	ldr	r3, [sp, #8]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	f040 8087 	bne.w	800fe00 <_dtoa_r+0x8c8>
 800fcf2:	9b03      	ldr	r3, [sp, #12]
 800fcf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f040 8089 	bne.w	800fe10 <_dtoa_r+0x8d8>
 800fcfe:	9b03      	ldr	r3, [sp, #12]
 800fd00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd04:	0d1b      	lsrs	r3, r3, #20
 800fd06:	051b      	lsls	r3, r3, #20
 800fd08:	b12b      	cbz	r3, 800fd16 <_dtoa_r+0x7de>
 800fd0a:	9b08      	ldr	r3, [sp, #32]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	9308      	str	r3, [sp, #32]
 800fd10:	f108 0801 	add.w	r8, r8, #1
 800fd14:	2301      	movs	r3, #1
 800fd16:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 81b0 	beq.w	8010080 <_dtoa_r+0xb48>
 800fd20:	6923      	ldr	r3, [r4, #16]
 800fd22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd26:	6918      	ldr	r0, [r3, #16]
 800fd28:	f001 f854 	bl	8010dd4 <__hi0bits>
 800fd2c:	f1c0 0020 	rsb	r0, r0, #32
 800fd30:	9b08      	ldr	r3, [sp, #32]
 800fd32:	4418      	add	r0, r3
 800fd34:	f010 001f 	ands.w	r0, r0, #31
 800fd38:	d077      	beq.n	800fe2a <_dtoa_r+0x8f2>
 800fd3a:	f1c0 0320 	rsb	r3, r0, #32
 800fd3e:	2b04      	cmp	r3, #4
 800fd40:	dd6b      	ble.n	800fe1a <_dtoa_r+0x8e2>
 800fd42:	9b08      	ldr	r3, [sp, #32]
 800fd44:	f1c0 001c 	rsb	r0, r0, #28
 800fd48:	4403      	add	r3, r0
 800fd4a:	4480      	add	r8, r0
 800fd4c:	4406      	add	r6, r0
 800fd4e:	9308      	str	r3, [sp, #32]
 800fd50:	f1b8 0f00 	cmp.w	r8, #0
 800fd54:	dd05      	ble.n	800fd62 <_dtoa_r+0x82a>
 800fd56:	4649      	mov	r1, r9
 800fd58:	4642      	mov	r2, r8
 800fd5a:	4658      	mov	r0, fp
 800fd5c:	f001 f9a0 	bl	80110a0 <__lshift>
 800fd60:	4681      	mov	r9, r0
 800fd62:	9b08      	ldr	r3, [sp, #32]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	dd05      	ble.n	800fd74 <_dtoa_r+0x83c>
 800fd68:	4621      	mov	r1, r4
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	4658      	mov	r0, fp
 800fd6e:	f001 f997 	bl	80110a0 <__lshift>
 800fd72:	4604      	mov	r4, r0
 800fd74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d059      	beq.n	800fe2e <_dtoa_r+0x8f6>
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	4648      	mov	r0, r9
 800fd7e:	f001 f9fb 	bl	8011178 <__mcmp>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	da53      	bge.n	800fe2e <_dtoa_r+0x8f6>
 800fd86:	1e7b      	subs	r3, r7, #1
 800fd88:	9304      	str	r3, [sp, #16]
 800fd8a:	4649      	mov	r1, r9
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	220a      	movs	r2, #10
 800fd90:	4658      	mov	r0, fp
 800fd92:	f000 ff8f 	bl	8010cb4 <__multadd>
 800fd96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd98:	4681      	mov	r9, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	f000 8172 	beq.w	8010084 <_dtoa_r+0xb4c>
 800fda0:	2300      	movs	r3, #0
 800fda2:	4629      	mov	r1, r5
 800fda4:	220a      	movs	r2, #10
 800fda6:	4658      	mov	r0, fp
 800fda8:	f000 ff84 	bl	8010cb4 <__multadd>
 800fdac:	9b00      	ldr	r3, [sp, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	dc67      	bgt.n	800fe84 <_dtoa_r+0x94c>
 800fdb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	dc41      	bgt.n	800fe3e <_dtoa_r+0x906>
 800fdba:	e063      	b.n	800fe84 <_dtoa_r+0x94c>
 800fdbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fdbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fdc2:	e746      	b.n	800fc52 <_dtoa_r+0x71a>
 800fdc4:	9b07      	ldr	r3, [sp, #28]
 800fdc6:	1e5c      	subs	r4, r3, #1
 800fdc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdca:	42a3      	cmp	r3, r4
 800fdcc:	bfbf      	itttt	lt
 800fdce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fdd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fdd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fdd4:	1ae3      	sublt	r3, r4, r3
 800fdd6:	bfb4      	ite	lt
 800fdd8:	18d2      	addlt	r2, r2, r3
 800fdda:	1b1c      	subge	r4, r3, r4
 800fddc:	9b07      	ldr	r3, [sp, #28]
 800fdde:	bfbc      	itt	lt
 800fde0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fde2:	2400      	movlt	r4, #0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	bfb5      	itete	lt
 800fde8:	eba8 0603 	sublt.w	r6, r8, r3
 800fdec:	9b07      	ldrge	r3, [sp, #28]
 800fdee:	2300      	movlt	r3, #0
 800fdf0:	4646      	movge	r6, r8
 800fdf2:	e730      	b.n	800fc56 <_dtoa_r+0x71e>
 800fdf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fdf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fdf8:	4646      	mov	r6, r8
 800fdfa:	e735      	b.n	800fc68 <_dtoa_r+0x730>
 800fdfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fdfe:	e75c      	b.n	800fcba <_dtoa_r+0x782>
 800fe00:	2300      	movs	r3, #0
 800fe02:	e788      	b.n	800fd16 <_dtoa_r+0x7de>
 800fe04:	3fe00000 	.word	0x3fe00000
 800fe08:	40240000 	.word	0x40240000
 800fe0c:	40140000 	.word	0x40140000
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	e780      	b.n	800fd16 <_dtoa_r+0x7de>
 800fe14:	2300      	movs	r3, #0
 800fe16:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe18:	e782      	b.n	800fd20 <_dtoa_r+0x7e8>
 800fe1a:	d099      	beq.n	800fd50 <_dtoa_r+0x818>
 800fe1c:	9a08      	ldr	r2, [sp, #32]
 800fe1e:	331c      	adds	r3, #28
 800fe20:	441a      	add	r2, r3
 800fe22:	4498      	add	r8, r3
 800fe24:	441e      	add	r6, r3
 800fe26:	9208      	str	r2, [sp, #32]
 800fe28:	e792      	b.n	800fd50 <_dtoa_r+0x818>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	e7f6      	b.n	800fe1c <_dtoa_r+0x8e4>
 800fe2e:	9b07      	ldr	r3, [sp, #28]
 800fe30:	9704      	str	r7, [sp, #16]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	dc20      	bgt.n	800fe78 <_dtoa_r+0x940>
 800fe36:	9300      	str	r3, [sp, #0]
 800fe38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	dd1e      	ble.n	800fe7c <_dtoa_r+0x944>
 800fe3e:	9b00      	ldr	r3, [sp, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	f47f aec0 	bne.w	800fbc6 <_dtoa_r+0x68e>
 800fe46:	4621      	mov	r1, r4
 800fe48:	2205      	movs	r2, #5
 800fe4a:	4658      	mov	r0, fp
 800fe4c:	f000 ff32 	bl	8010cb4 <__multadd>
 800fe50:	4601      	mov	r1, r0
 800fe52:	4604      	mov	r4, r0
 800fe54:	4648      	mov	r0, r9
 800fe56:	f001 f98f 	bl	8011178 <__mcmp>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	f77f aeb3 	ble.w	800fbc6 <_dtoa_r+0x68e>
 800fe60:	4656      	mov	r6, sl
 800fe62:	2331      	movs	r3, #49	@ 0x31
 800fe64:	f806 3b01 	strb.w	r3, [r6], #1
 800fe68:	9b04      	ldr	r3, [sp, #16]
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	9304      	str	r3, [sp, #16]
 800fe6e:	e6ae      	b.n	800fbce <_dtoa_r+0x696>
 800fe70:	9c07      	ldr	r4, [sp, #28]
 800fe72:	9704      	str	r7, [sp, #16]
 800fe74:	4625      	mov	r5, r4
 800fe76:	e7f3      	b.n	800fe60 <_dtoa_r+0x928>
 800fe78:	9b07      	ldr	r3, [sp, #28]
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f000 8104 	beq.w	801008c <_dtoa_r+0xb54>
 800fe84:	2e00      	cmp	r6, #0
 800fe86:	dd05      	ble.n	800fe94 <_dtoa_r+0x95c>
 800fe88:	4629      	mov	r1, r5
 800fe8a:	4632      	mov	r2, r6
 800fe8c:	4658      	mov	r0, fp
 800fe8e:	f001 f907 	bl	80110a0 <__lshift>
 800fe92:	4605      	mov	r5, r0
 800fe94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d05a      	beq.n	800ff50 <_dtoa_r+0xa18>
 800fe9a:	6869      	ldr	r1, [r5, #4]
 800fe9c:	4658      	mov	r0, fp
 800fe9e:	f000 fea7 	bl	8010bf0 <_Balloc>
 800fea2:	4606      	mov	r6, r0
 800fea4:	b928      	cbnz	r0, 800feb2 <_dtoa_r+0x97a>
 800fea6:	4b84      	ldr	r3, [pc, #528]	@ (80100b8 <_dtoa_r+0xb80>)
 800fea8:	4602      	mov	r2, r0
 800feaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800feae:	f7ff bb5a 	b.w	800f566 <_dtoa_r+0x2e>
 800feb2:	692a      	ldr	r2, [r5, #16]
 800feb4:	3202      	adds	r2, #2
 800feb6:	0092      	lsls	r2, r2, #2
 800feb8:	f105 010c 	add.w	r1, r5, #12
 800febc:	300c      	adds	r0, #12
 800febe:	f7ff fa78 	bl	800f3b2 <memcpy>
 800fec2:	2201      	movs	r2, #1
 800fec4:	4631      	mov	r1, r6
 800fec6:	4658      	mov	r0, fp
 800fec8:	f001 f8ea 	bl	80110a0 <__lshift>
 800fecc:	f10a 0301 	add.w	r3, sl, #1
 800fed0:	9307      	str	r3, [sp, #28]
 800fed2:	9b00      	ldr	r3, [sp, #0]
 800fed4:	4453      	add	r3, sl
 800fed6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fed8:	9b02      	ldr	r3, [sp, #8]
 800feda:	f003 0301 	and.w	r3, r3, #1
 800fede:	462f      	mov	r7, r5
 800fee0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fee2:	4605      	mov	r5, r0
 800fee4:	9b07      	ldr	r3, [sp, #28]
 800fee6:	4621      	mov	r1, r4
 800fee8:	3b01      	subs	r3, #1
 800feea:	4648      	mov	r0, r9
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	f7ff fa9b 	bl	800f428 <quorem>
 800fef2:	4639      	mov	r1, r7
 800fef4:	9002      	str	r0, [sp, #8]
 800fef6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fefa:	4648      	mov	r0, r9
 800fefc:	f001 f93c 	bl	8011178 <__mcmp>
 800ff00:	462a      	mov	r2, r5
 800ff02:	9008      	str	r0, [sp, #32]
 800ff04:	4621      	mov	r1, r4
 800ff06:	4658      	mov	r0, fp
 800ff08:	f001 f952 	bl	80111b0 <__mdiff>
 800ff0c:	68c2      	ldr	r2, [r0, #12]
 800ff0e:	4606      	mov	r6, r0
 800ff10:	bb02      	cbnz	r2, 800ff54 <_dtoa_r+0xa1c>
 800ff12:	4601      	mov	r1, r0
 800ff14:	4648      	mov	r0, r9
 800ff16:	f001 f92f 	bl	8011178 <__mcmp>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	4631      	mov	r1, r6
 800ff1e:	4658      	mov	r0, fp
 800ff20:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff22:	f000 fea5 	bl	8010c70 <_Bfree>
 800ff26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff2a:	9e07      	ldr	r6, [sp, #28]
 800ff2c:	ea43 0102 	orr.w	r1, r3, r2
 800ff30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff32:	4319      	orrs	r1, r3
 800ff34:	d110      	bne.n	800ff58 <_dtoa_r+0xa20>
 800ff36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ff3a:	d029      	beq.n	800ff90 <_dtoa_r+0xa58>
 800ff3c:	9b08      	ldr	r3, [sp, #32]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	dd02      	ble.n	800ff48 <_dtoa_r+0xa10>
 800ff42:	9b02      	ldr	r3, [sp, #8]
 800ff44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ff48:	9b00      	ldr	r3, [sp, #0]
 800ff4a:	f883 8000 	strb.w	r8, [r3]
 800ff4e:	e63f      	b.n	800fbd0 <_dtoa_r+0x698>
 800ff50:	4628      	mov	r0, r5
 800ff52:	e7bb      	b.n	800fecc <_dtoa_r+0x994>
 800ff54:	2201      	movs	r2, #1
 800ff56:	e7e1      	b.n	800ff1c <_dtoa_r+0x9e4>
 800ff58:	9b08      	ldr	r3, [sp, #32]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	db04      	blt.n	800ff68 <_dtoa_r+0xa30>
 800ff5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff60:	430b      	orrs	r3, r1
 800ff62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ff64:	430b      	orrs	r3, r1
 800ff66:	d120      	bne.n	800ffaa <_dtoa_r+0xa72>
 800ff68:	2a00      	cmp	r2, #0
 800ff6a:	dded      	ble.n	800ff48 <_dtoa_r+0xa10>
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	2201      	movs	r2, #1
 800ff70:	4658      	mov	r0, fp
 800ff72:	f001 f895 	bl	80110a0 <__lshift>
 800ff76:	4621      	mov	r1, r4
 800ff78:	4681      	mov	r9, r0
 800ff7a:	f001 f8fd 	bl	8011178 <__mcmp>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	dc03      	bgt.n	800ff8a <_dtoa_r+0xa52>
 800ff82:	d1e1      	bne.n	800ff48 <_dtoa_r+0xa10>
 800ff84:	f018 0f01 	tst.w	r8, #1
 800ff88:	d0de      	beq.n	800ff48 <_dtoa_r+0xa10>
 800ff8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ff8e:	d1d8      	bne.n	800ff42 <_dtoa_r+0xa0a>
 800ff90:	9a00      	ldr	r2, [sp, #0]
 800ff92:	2339      	movs	r3, #57	@ 0x39
 800ff94:	7013      	strb	r3, [r2, #0]
 800ff96:	4633      	mov	r3, r6
 800ff98:	461e      	mov	r6, r3
 800ff9a:	3b01      	subs	r3, #1
 800ff9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ffa0:	2a39      	cmp	r2, #57	@ 0x39
 800ffa2:	d052      	beq.n	801004a <_dtoa_r+0xb12>
 800ffa4:	3201      	adds	r2, #1
 800ffa6:	701a      	strb	r2, [r3, #0]
 800ffa8:	e612      	b.n	800fbd0 <_dtoa_r+0x698>
 800ffaa:	2a00      	cmp	r2, #0
 800ffac:	dd07      	ble.n	800ffbe <_dtoa_r+0xa86>
 800ffae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ffb2:	d0ed      	beq.n	800ff90 <_dtoa_r+0xa58>
 800ffb4:	9a00      	ldr	r2, [sp, #0]
 800ffb6:	f108 0301 	add.w	r3, r8, #1
 800ffba:	7013      	strb	r3, [r2, #0]
 800ffbc:	e608      	b.n	800fbd0 <_dtoa_r+0x698>
 800ffbe:	9b07      	ldr	r3, [sp, #28]
 800ffc0:	9a07      	ldr	r2, [sp, #28]
 800ffc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ffc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d028      	beq.n	801001e <_dtoa_r+0xae6>
 800ffcc:	4649      	mov	r1, r9
 800ffce:	2300      	movs	r3, #0
 800ffd0:	220a      	movs	r2, #10
 800ffd2:	4658      	mov	r0, fp
 800ffd4:	f000 fe6e 	bl	8010cb4 <__multadd>
 800ffd8:	42af      	cmp	r7, r5
 800ffda:	4681      	mov	r9, r0
 800ffdc:	f04f 0300 	mov.w	r3, #0
 800ffe0:	f04f 020a 	mov.w	r2, #10
 800ffe4:	4639      	mov	r1, r7
 800ffe6:	4658      	mov	r0, fp
 800ffe8:	d107      	bne.n	800fffa <_dtoa_r+0xac2>
 800ffea:	f000 fe63 	bl	8010cb4 <__multadd>
 800ffee:	4607      	mov	r7, r0
 800fff0:	4605      	mov	r5, r0
 800fff2:	9b07      	ldr	r3, [sp, #28]
 800fff4:	3301      	adds	r3, #1
 800fff6:	9307      	str	r3, [sp, #28]
 800fff8:	e774      	b.n	800fee4 <_dtoa_r+0x9ac>
 800fffa:	f000 fe5b 	bl	8010cb4 <__multadd>
 800fffe:	4629      	mov	r1, r5
 8010000:	4607      	mov	r7, r0
 8010002:	2300      	movs	r3, #0
 8010004:	220a      	movs	r2, #10
 8010006:	4658      	mov	r0, fp
 8010008:	f000 fe54 	bl	8010cb4 <__multadd>
 801000c:	4605      	mov	r5, r0
 801000e:	e7f0      	b.n	800fff2 <_dtoa_r+0xaba>
 8010010:	9b00      	ldr	r3, [sp, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	bfcc      	ite	gt
 8010016:	461e      	movgt	r6, r3
 8010018:	2601      	movle	r6, #1
 801001a:	4456      	add	r6, sl
 801001c:	2700      	movs	r7, #0
 801001e:	4649      	mov	r1, r9
 8010020:	2201      	movs	r2, #1
 8010022:	4658      	mov	r0, fp
 8010024:	f001 f83c 	bl	80110a0 <__lshift>
 8010028:	4621      	mov	r1, r4
 801002a:	4681      	mov	r9, r0
 801002c:	f001 f8a4 	bl	8011178 <__mcmp>
 8010030:	2800      	cmp	r0, #0
 8010032:	dcb0      	bgt.n	800ff96 <_dtoa_r+0xa5e>
 8010034:	d102      	bne.n	801003c <_dtoa_r+0xb04>
 8010036:	f018 0f01 	tst.w	r8, #1
 801003a:	d1ac      	bne.n	800ff96 <_dtoa_r+0xa5e>
 801003c:	4633      	mov	r3, r6
 801003e:	461e      	mov	r6, r3
 8010040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010044:	2a30      	cmp	r2, #48	@ 0x30
 8010046:	d0fa      	beq.n	801003e <_dtoa_r+0xb06>
 8010048:	e5c2      	b.n	800fbd0 <_dtoa_r+0x698>
 801004a:	459a      	cmp	sl, r3
 801004c:	d1a4      	bne.n	800ff98 <_dtoa_r+0xa60>
 801004e:	9b04      	ldr	r3, [sp, #16]
 8010050:	3301      	adds	r3, #1
 8010052:	9304      	str	r3, [sp, #16]
 8010054:	2331      	movs	r3, #49	@ 0x31
 8010056:	f88a 3000 	strb.w	r3, [sl]
 801005a:	e5b9      	b.n	800fbd0 <_dtoa_r+0x698>
 801005c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801005e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80100bc <_dtoa_r+0xb84>
 8010062:	b11b      	cbz	r3, 801006c <_dtoa_r+0xb34>
 8010064:	f10a 0308 	add.w	r3, sl, #8
 8010068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801006a:	6013      	str	r3, [r2, #0]
 801006c:	4650      	mov	r0, sl
 801006e:	b019      	add	sp, #100	@ 0x64
 8010070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010076:	2b01      	cmp	r3, #1
 8010078:	f77f ae37 	ble.w	800fcea <_dtoa_r+0x7b2>
 801007c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801007e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010080:	2001      	movs	r0, #1
 8010082:	e655      	b.n	800fd30 <_dtoa_r+0x7f8>
 8010084:	9b00      	ldr	r3, [sp, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	f77f aed6 	ble.w	800fe38 <_dtoa_r+0x900>
 801008c:	4656      	mov	r6, sl
 801008e:	4621      	mov	r1, r4
 8010090:	4648      	mov	r0, r9
 8010092:	f7ff f9c9 	bl	800f428 <quorem>
 8010096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801009a:	f806 8b01 	strb.w	r8, [r6], #1
 801009e:	9b00      	ldr	r3, [sp, #0]
 80100a0:	eba6 020a 	sub.w	r2, r6, sl
 80100a4:	4293      	cmp	r3, r2
 80100a6:	ddb3      	ble.n	8010010 <_dtoa_r+0xad8>
 80100a8:	4649      	mov	r1, r9
 80100aa:	2300      	movs	r3, #0
 80100ac:	220a      	movs	r2, #10
 80100ae:	4658      	mov	r0, fp
 80100b0:	f000 fe00 	bl	8010cb4 <__multadd>
 80100b4:	4681      	mov	r9, r0
 80100b6:	e7ea      	b.n	801008e <_dtoa_r+0xb56>
 80100b8:	08012139 	.word	0x08012139
 80100bc:	080120bd 	.word	0x080120bd

080100c0 <_free_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4605      	mov	r5, r0
 80100c4:	2900      	cmp	r1, #0
 80100c6:	d041      	beq.n	801014c <_free_r+0x8c>
 80100c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100cc:	1f0c      	subs	r4, r1, #4
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	bfb8      	it	lt
 80100d2:	18e4      	addlt	r4, r4, r3
 80100d4:	f7fe f942 	bl	800e35c <__malloc_lock>
 80100d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010150 <_free_r+0x90>)
 80100da:	6813      	ldr	r3, [r2, #0]
 80100dc:	b933      	cbnz	r3, 80100ec <_free_r+0x2c>
 80100de:	6063      	str	r3, [r4, #4]
 80100e0:	6014      	str	r4, [r2, #0]
 80100e2:	4628      	mov	r0, r5
 80100e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100e8:	f7fe b93e 	b.w	800e368 <__malloc_unlock>
 80100ec:	42a3      	cmp	r3, r4
 80100ee:	d908      	bls.n	8010102 <_free_r+0x42>
 80100f0:	6820      	ldr	r0, [r4, #0]
 80100f2:	1821      	adds	r1, r4, r0
 80100f4:	428b      	cmp	r3, r1
 80100f6:	bf01      	itttt	eq
 80100f8:	6819      	ldreq	r1, [r3, #0]
 80100fa:	685b      	ldreq	r3, [r3, #4]
 80100fc:	1809      	addeq	r1, r1, r0
 80100fe:	6021      	streq	r1, [r4, #0]
 8010100:	e7ed      	b.n	80100de <_free_r+0x1e>
 8010102:	461a      	mov	r2, r3
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	b10b      	cbz	r3, 801010c <_free_r+0x4c>
 8010108:	42a3      	cmp	r3, r4
 801010a:	d9fa      	bls.n	8010102 <_free_r+0x42>
 801010c:	6811      	ldr	r1, [r2, #0]
 801010e:	1850      	adds	r0, r2, r1
 8010110:	42a0      	cmp	r0, r4
 8010112:	d10b      	bne.n	801012c <_free_r+0x6c>
 8010114:	6820      	ldr	r0, [r4, #0]
 8010116:	4401      	add	r1, r0
 8010118:	1850      	adds	r0, r2, r1
 801011a:	4283      	cmp	r3, r0
 801011c:	6011      	str	r1, [r2, #0]
 801011e:	d1e0      	bne.n	80100e2 <_free_r+0x22>
 8010120:	6818      	ldr	r0, [r3, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	6053      	str	r3, [r2, #4]
 8010126:	4408      	add	r0, r1
 8010128:	6010      	str	r0, [r2, #0]
 801012a:	e7da      	b.n	80100e2 <_free_r+0x22>
 801012c:	d902      	bls.n	8010134 <_free_r+0x74>
 801012e:	230c      	movs	r3, #12
 8010130:	602b      	str	r3, [r5, #0]
 8010132:	e7d6      	b.n	80100e2 <_free_r+0x22>
 8010134:	6820      	ldr	r0, [r4, #0]
 8010136:	1821      	adds	r1, r4, r0
 8010138:	428b      	cmp	r3, r1
 801013a:	bf04      	itt	eq
 801013c:	6819      	ldreq	r1, [r3, #0]
 801013e:	685b      	ldreq	r3, [r3, #4]
 8010140:	6063      	str	r3, [r4, #4]
 8010142:	bf04      	itt	eq
 8010144:	1809      	addeq	r1, r1, r0
 8010146:	6021      	streq	r1, [r4, #0]
 8010148:	6054      	str	r4, [r2, #4]
 801014a:	e7ca      	b.n	80100e2 <_free_r+0x22>
 801014c:	bd38      	pop	{r3, r4, r5, pc}
 801014e:	bf00      	nop
 8010150:	200013b4 	.word	0x200013b4

08010154 <rshift>:
 8010154:	6903      	ldr	r3, [r0, #16]
 8010156:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801015a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801015e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010162:	f100 0414 	add.w	r4, r0, #20
 8010166:	dd45      	ble.n	80101f4 <rshift+0xa0>
 8010168:	f011 011f 	ands.w	r1, r1, #31
 801016c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010170:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010174:	d10c      	bne.n	8010190 <rshift+0x3c>
 8010176:	f100 0710 	add.w	r7, r0, #16
 801017a:	4629      	mov	r1, r5
 801017c:	42b1      	cmp	r1, r6
 801017e:	d334      	bcc.n	80101ea <rshift+0x96>
 8010180:	1a9b      	subs	r3, r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	1eea      	subs	r2, r5, #3
 8010186:	4296      	cmp	r6, r2
 8010188:	bf38      	it	cc
 801018a:	2300      	movcc	r3, #0
 801018c:	4423      	add	r3, r4
 801018e:	e015      	b.n	80101bc <rshift+0x68>
 8010190:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010194:	f1c1 0820 	rsb	r8, r1, #32
 8010198:	40cf      	lsrs	r7, r1
 801019a:	f105 0e04 	add.w	lr, r5, #4
 801019e:	46a1      	mov	r9, r4
 80101a0:	4576      	cmp	r6, lr
 80101a2:	46f4      	mov	ip, lr
 80101a4:	d815      	bhi.n	80101d2 <rshift+0x7e>
 80101a6:	1a9a      	subs	r2, r3, r2
 80101a8:	0092      	lsls	r2, r2, #2
 80101aa:	3a04      	subs	r2, #4
 80101ac:	3501      	adds	r5, #1
 80101ae:	42ae      	cmp	r6, r5
 80101b0:	bf38      	it	cc
 80101b2:	2200      	movcc	r2, #0
 80101b4:	18a3      	adds	r3, r4, r2
 80101b6:	50a7      	str	r7, [r4, r2]
 80101b8:	b107      	cbz	r7, 80101bc <rshift+0x68>
 80101ba:	3304      	adds	r3, #4
 80101bc:	1b1a      	subs	r2, r3, r4
 80101be:	42a3      	cmp	r3, r4
 80101c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101c4:	bf08      	it	eq
 80101c6:	2300      	moveq	r3, #0
 80101c8:	6102      	str	r2, [r0, #16]
 80101ca:	bf08      	it	eq
 80101cc:	6143      	streq	r3, [r0, #20]
 80101ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d2:	f8dc c000 	ldr.w	ip, [ip]
 80101d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80101da:	ea4c 0707 	orr.w	r7, ip, r7
 80101de:	f849 7b04 	str.w	r7, [r9], #4
 80101e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80101e6:	40cf      	lsrs	r7, r1
 80101e8:	e7da      	b.n	80101a0 <rshift+0x4c>
 80101ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80101ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80101f2:	e7c3      	b.n	801017c <rshift+0x28>
 80101f4:	4623      	mov	r3, r4
 80101f6:	e7e1      	b.n	80101bc <rshift+0x68>

080101f8 <__hexdig_fun>:
 80101f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80101fc:	2b09      	cmp	r3, #9
 80101fe:	d802      	bhi.n	8010206 <__hexdig_fun+0xe>
 8010200:	3820      	subs	r0, #32
 8010202:	b2c0      	uxtb	r0, r0
 8010204:	4770      	bx	lr
 8010206:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801020a:	2b05      	cmp	r3, #5
 801020c:	d801      	bhi.n	8010212 <__hexdig_fun+0x1a>
 801020e:	3847      	subs	r0, #71	@ 0x47
 8010210:	e7f7      	b.n	8010202 <__hexdig_fun+0xa>
 8010212:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010216:	2b05      	cmp	r3, #5
 8010218:	d801      	bhi.n	801021e <__hexdig_fun+0x26>
 801021a:	3827      	subs	r0, #39	@ 0x27
 801021c:	e7f1      	b.n	8010202 <__hexdig_fun+0xa>
 801021e:	2000      	movs	r0, #0
 8010220:	4770      	bx	lr
	...

08010224 <__gethex>:
 8010224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010228:	b085      	sub	sp, #20
 801022a:	468a      	mov	sl, r1
 801022c:	9302      	str	r3, [sp, #8]
 801022e:	680b      	ldr	r3, [r1, #0]
 8010230:	9001      	str	r0, [sp, #4]
 8010232:	4690      	mov	r8, r2
 8010234:	1c9c      	adds	r4, r3, #2
 8010236:	46a1      	mov	r9, r4
 8010238:	f814 0b01 	ldrb.w	r0, [r4], #1
 801023c:	2830      	cmp	r0, #48	@ 0x30
 801023e:	d0fa      	beq.n	8010236 <__gethex+0x12>
 8010240:	eba9 0303 	sub.w	r3, r9, r3
 8010244:	f1a3 0b02 	sub.w	fp, r3, #2
 8010248:	f7ff ffd6 	bl	80101f8 <__hexdig_fun>
 801024c:	4605      	mov	r5, r0
 801024e:	2800      	cmp	r0, #0
 8010250:	d168      	bne.n	8010324 <__gethex+0x100>
 8010252:	49a0      	ldr	r1, [pc, #640]	@ (80104d4 <__gethex+0x2b0>)
 8010254:	2201      	movs	r2, #1
 8010256:	4648      	mov	r0, r9
 8010258:	f7ff f850 	bl	800f2fc <strncmp>
 801025c:	4607      	mov	r7, r0
 801025e:	2800      	cmp	r0, #0
 8010260:	d167      	bne.n	8010332 <__gethex+0x10e>
 8010262:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010266:	4626      	mov	r6, r4
 8010268:	f7ff ffc6 	bl	80101f8 <__hexdig_fun>
 801026c:	2800      	cmp	r0, #0
 801026e:	d062      	beq.n	8010336 <__gethex+0x112>
 8010270:	4623      	mov	r3, r4
 8010272:	7818      	ldrb	r0, [r3, #0]
 8010274:	2830      	cmp	r0, #48	@ 0x30
 8010276:	4699      	mov	r9, r3
 8010278:	f103 0301 	add.w	r3, r3, #1
 801027c:	d0f9      	beq.n	8010272 <__gethex+0x4e>
 801027e:	f7ff ffbb 	bl	80101f8 <__hexdig_fun>
 8010282:	fab0 f580 	clz	r5, r0
 8010286:	096d      	lsrs	r5, r5, #5
 8010288:	f04f 0b01 	mov.w	fp, #1
 801028c:	464a      	mov	r2, r9
 801028e:	4616      	mov	r6, r2
 8010290:	3201      	adds	r2, #1
 8010292:	7830      	ldrb	r0, [r6, #0]
 8010294:	f7ff ffb0 	bl	80101f8 <__hexdig_fun>
 8010298:	2800      	cmp	r0, #0
 801029a:	d1f8      	bne.n	801028e <__gethex+0x6a>
 801029c:	498d      	ldr	r1, [pc, #564]	@ (80104d4 <__gethex+0x2b0>)
 801029e:	2201      	movs	r2, #1
 80102a0:	4630      	mov	r0, r6
 80102a2:	f7ff f82b 	bl	800f2fc <strncmp>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d13f      	bne.n	801032a <__gethex+0x106>
 80102aa:	b944      	cbnz	r4, 80102be <__gethex+0x9a>
 80102ac:	1c74      	adds	r4, r6, #1
 80102ae:	4622      	mov	r2, r4
 80102b0:	4616      	mov	r6, r2
 80102b2:	3201      	adds	r2, #1
 80102b4:	7830      	ldrb	r0, [r6, #0]
 80102b6:	f7ff ff9f 	bl	80101f8 <__hexdig_fun>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d1f8      	bne.n	80102b0 <__gethex+0x8c>
 80102be:	1ba4      	subs	r4, r4, r6
 80102c0:	00a7      	lsls	r7, r4, #2
 80102c2:	7833      	ldrb	r3, [r6, #0]
 80102c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80102c8:	2b50      	cmp	r3, #80	@ 0x50
 80102ca:	d13e      	bne.n	801034a <__gethex+0x126>
 80102cc:	7873      	ldrb	r3, [r6, #1]
 80102ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80102d0:	d033      	beq.n	801033a <__gethex+0x116>
 80102d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80102d4:	d034      	beq.n	8010340 <__gethex+0x11c>
 80102d6:	1c71      	adds	r1, r6, #1
 80102d8:	2400      	movs	r4, #0
 80102da:	7808      	ldrb	r0, [r1, #0]
 80102dc:	f7ff ff8c 	bl	80101f8 <__hexdig_fun>
 80102e0:	1e43      	subs	r3, r0, #1
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	2b18      	cmp	r3, #24
 80102e6:	d830      	bhi.n	801034a <__gethex+0x126>
 80102e8:	f1a0 0210 	sub.w	r2, r0, #16
 80102ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80102f0:	f7ff ff82 	bl	80101f8 <__hexdig_fun>
 80102f4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80102f8:	fa5f fc8c 	uxtb.w	ip, ip
 80102fc:	f1bc 0f18 	cmp.w	ip, #24
 8010300:	f04f 030a 	mov.w	r3, #10
 8010304:	d91e      	bls.n	8010344 <__gethex+0x120>
 8010306:	b104      	cbz	r4, 801030a <__gethex+0xe6>
 8010308:	4252      	negs	r2, r2
 801030a:	4417      	add	r7, r2
 801030c:	f8ca 1000 	str.w	r1, [sl]
 8010310:	b1ed      	cbz	r5, 801034e <__gethex+0x12a>
 8010312:	f1bb 0f00 	cmp.w	fp, #0
 8010316:	bf0c      	ite	eq
 8010318:	2506      	moveq	r5, #6
 801031a:	2500      	movne	r5, #0
 801031c:	4628      	mov	r0, r5
 801031e:	b005      	add	sp, #20
 8010320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010324:	2500      	movs	r5, #0
 8010326:	462c      	mov	r4, r5
 8010328:	e7b0      	b.n	801028c <__gethex+0x68>
 801032a:	2c00      	cmp	r4, #0
 801032c:	d1c7      	bne.n	80102be <__gethex+0x9a>
 801032e:	4627      	mov	r7, r4
 8010330:	e7c7      	b.n	80102c2 <__gethex+0x9e>
 8010332:	464e      	mov	r6, r9
 8010334:	462f      	mov	r7, r5
 8010336:	2501      	movs	r5, #1
 8010338:	e7c3      	b.n	80102c2 <__gethex+0x9e>
 801033a:	2400      	movs	r4, #0
 801033c:	1cb1      	adds	r1, r6, #2
 801033e:	e7cc      	b.n	80102da <__gethex+0xb6>
 8010340:	2401      	movs	r4, #1
 8010342:	e7fb      	b.n	801033c <__gethex+0x118>
 8010344:	fb03 0002 	mla	r0, r3, r2, r0
 8010348:	e7ce      	b.n	80102e8 <__gethex+0xc4>
 801034a:	4631      	mov	r1, r6
 801034c:	e7de      	b.n	801030c <__gethex+0xe8>
 801034e:	eba6 0309 	sub.w	r3, r6, r9
 8010352:	3b01      	subs	r3, #1
 8010354:	4629      	mov	r1, r5
 8010356:	2b07      	cmp	r3, #7
 8010358:	dc0a      	bgt.n	8010370 <__gethex+0x14c>
 801035a:	9801      	ldr	r0, [sp, #4]
 801035c:	f000 fc48 	bl	8010bf0 <_Balloc>
 8010360:	4604      	mov	r4, r0
 8010362:	b940      	cbnz	r0, 8010376 <__gethex+0x152>
 8010364:	4b5c      	ldr	r3, [pc, #368]	@ (80104d8 <__gethex+0x2b4>)
 8010366:	4602      	mov	r2, r0
 8010368:	21e4      	movs	r1, #228	@ 0xe4
 801036a:	485c      	ldr	r0, [pc, #368]	@ (80104dc <__gethex+0x2b8>)
 801036c:	f7ff f83e 	bl	800f3ec <__assert_func>
 8010370:	3101      	adds	r1, #1
 8010372:	105b      	asrs	r3, r3, #1
 8010374:	e7ef      	b.n	8010356 <__gethex+0x132>
 8010376:	f100 0a14 	add.w	sl, r0, #20
 801037a:	2300      	movs	r3, #0
 801037c:	4655      	mov	r5, sl
 801037e:	469b      	mov	fp, r3
 8010380:	45b1      	cmp	r9, r6
 8010382:	d337      	bcc.n	80103f4 <__gethex+0x1d0>
 8010384:	f845 bb04 	str.w	fp, [r5], #4
 8010388:	eba5 050a 	sub.w	r5, r5, sl
 801038c:	10ad      	asrs	r5, r5, #2
 801038e:	6125      	str	r5, [r4, #16]
 8010390:	4658      	mov	r0, fp
 8010392:	f000 fd1f 	bl	8010dd4 <__hi0bits>
 8010396:	016d      	lsls	r5, r5, #5
 8010398:	f8d8 6000 	ldr.w	r6, [r8]
 801039c:	1a2d      	subs	r5, r5, r0
 801039e:	42b5      	cmp	r5, r6
 80103a0:	dd54      	ble.n	801044c <__gethex+0x228>
 80103a2:	1bad      	subs	r5, r5, r6
 80103a4:	4629      	mov	r1, r5
 80103a6:	4620      	mov	r0, r4
 80103a8:	f001 f8b3 	bl	8011512 <__any_on>
 80103ac:	4681      	mov	r9, r0
 80103ae:	b178      	cbz	r0, 80103d0 <__gethex+0x1ac>
 80103b0:	1e6b      	subs	r3, r5, #1
 80103b2:	1159      	asrs	r1, r3, #5
 80103b4:	f003 021f 	and.w	r2, r3, #31
 80103b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80103bc:	f04f 0901 	mov.w	r9, #1
 80103c0:	fa09 f202 	lsl.w	r2, r9, r2
 80103c4:	420a      	tst	r2, r1
 80103c6:	d003      	beq.n	80103d0 <__gethex+0x1ac>
 80103c8:	454b      	cmp	r3, r9
 80103ca:	dc36      	bgt.n	801043a <__gethex+0x216>
 80103cc:	f04f 0902 	mov.w	r9, #2
 80103d0:	4629      	mov	r1, r5
 80103d2:	4620      	mov	r0, r4
 80103d4:	f7ff febe 	bl	8010154 <rshift>
 80103d8:	442f      	add	r7, r5
 80103da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103de:	42bb      	cmp	r3, r7
 80103e0:	da42      	bge.n	8010468 <__gethex+0x244>
 80103e2:	9801      	ldr	r0, [sp, #4]
 80103e4:	4621      	mov	r1, r4
 80103e6:	f000 fc43 	bl	8010c70 <_Bfree>
 80103ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103ec:	2300      	movs	r3, #0
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	25a3      	movs	r5, #163	@ 0xa3
 80103f2:	e793      	b.n	801031c <__gethex+0xf8>
 80103f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80103f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80103fa:	d012      	beq.n	8010422 <__gethex+0x1fe>
 80103fc:	2b20      	cmp	r3, #32
 80103fe:	d104      	bne.n	801040a <__gethex+0x1e6>
 8010400:	f845 bb04 	str.w	fp, [r5], #4
 8010404:	f04f 0b00 	mov.w	fp, #0
 8010408:	465b      	mov	r3, fp
 801040a:	7830      	ldrb	r0, [r6, #0]
 801040c:	9303      	str	r3, [sp, #12]
 801040e:	f7ff fef3 	bl	80101f8 <__hexdig_fun>
 8010412:	9b03      	ldr	r3, [sp, #12]
 8010414:	f000 000f 	and.w	r0, r0, #15
 8010418:	4098      	lsls	r0, r3
 801041a:	ea4b 0b00 	orr.w	fp, fp, r0
 801041e:	3304      	adds	r3, #4
 8010420:	e7ae      	b.n	8010380 <__gethex+0x15c>
 8010422:	45b1      	cmp	r9, r6
 8010424:	d8ea      	bhi.n	80103fc <__gethex+0x1d8>
 8010426:	492b      	ldr	r1, [pc, #172]	@ (80104d4 <__gethex+0x2b0>)
 8010428:	9303      	str	r3, [sp, #12]
 801042a:	2201      	movs	r2, #1
 801042c:	4630      	mov	r0, r6
 801042e:	f7fe ff65 	bl	800f2fc <strncmp>
 8010432:	9b03      	ldr	r3, [sp, #12]
 8010434:	2800      	cmp	r0, #0
 8010436:	d1e1      	bne.n	80103fc <__gethex+0x1d8>
 8010438:	e7a2      	b.n	8010380 <__gethex+0x15c>
 801043a:	1ea9      	subs	r1, r5, #2
 801043c:	4620      	mov	r0, r4
 801043e:	f001 f868 	bl	8011512 <__any_on>
 8010442:	2800      	cmp	r0, #0
 8010444:	d0c2      	beq.n	80103cc <__gethex+0x1a8>
 8010446:	f04f 0903 	mov.w	r9, #3
 801044a:	e7c1      	b.n	80103d0 <__gethex+0x1ac>
 801044c:	da09      	bge.n	8010462 <__gethex+0x23e>
 801044e:	1b75      	subs	r5, r6, r5
 8010450:	4621      	mov	r1, r4
 8010452:	9801      	ldr	r0, [sp, #4]
 8010454:	462a      	mov	r2, r5
 8010456:	f000 fe23 	bl	80110a0 <__lshift>
 801045a:	1b7f      	subs	r7, r7, r5
 801045c:	4604      	mov	r4, r0
 801045e:	f100 0a14 	add.w	sl, r0, #20
 8010462:	f04f 0900 	mov.w	r9, #0
 8010466:	e7b8      	b.n	80103da <__gethex+0x1b6>
 8010468:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801046c:	42bd      	cmp	r5, r7
 801046e:	dd6f      	ble.n	8010550 <__gethex+0x32c>
 8010470:	1bed      	subs	r5, r5, r7
 8010472:	42ae      	cmp	r6, r5
 8010474:	dc34      	bgt.n	80104e0 <__gethex+0x2bc>
 8010476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801047a:	2b02      	cmp	r3, #2
 801047c:	d022      	beq.n	80104c4 <__gethex+0x2a0>
 801047e:	2b03      	cmp	r3, #3
 8010480:	d024      	beq.n	80104cc <__gethex+0x2a8>
 8010482:	2b01      	cmp	r3, #1
 8010484:	d115      	bne.n	80104b2 <__gethex+0x28e>
 8010486:	42ae      	cmp	r6, r5
 8010488:	d113      	bne.n	80104b2 <__gethex+0x28e>
 801048a:	2e01      	cmp	r6, #1
 801048c:	d10b      	bne.n	80104a6 <__gethex+0x282>
 801048e:	9a02      	ldr	r2, [sp, #8]
 8010490:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010494:	6013      	str	r3, [r2, #0]
 8010496:	2301      	movs	r3, #1
 8010498:	6123      	str	r3, [r4, #16]
 801049a:	f8ca 3000 	str.w	r3, [sl]
 801049e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104a0:	2562      	movs	r5, #98	@ 0x62
 80104a2:	601c      	str	r4, [r3, #0]
 80104a4:	e73a      	b.n	801031c <__gethex+0xf8>
 80104a6:	1e71      	subs	r1, r6, #1
 80104a8:	4620      	mov	r0, r4
 80104aa:	f001 f832 	bl	8011512 <__any_on>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d1ed      	bne.n	801048e <__gethex+0x26a>
 80104b2:	9801      	ldr	r0, [sp, #4]
 80104b4:	4621      	mov	r1, r4
 80104b6:	f000 fbdb 	bl	8010c70 <_Bfree>
 80104ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104bc:	2300      	movs	r3, #0
 80104be:	6013      	str	r3, [r2, #0]
 80104c0:	2550      	movs	r5, #80	@ 0x50
 80104c2:	e72b      	b.n	801031c <__gethex+0xf8>
 80104c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1f3      	bne.n	80104b2 <__gethex+0x28e>
 80104ca:	e7e0      	b.n	801048e <__gethex+0x26a>
 80104cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1dd      	bne.n	801048e <__gethex+0x26a>
 80104d2:	e7ee      	b.n	80104b2 <__gethex+0x28e>
 80104d4:	08011f25 	.word	0x08011f25
 80104d8:	08012139 	.word	0x08012139
 80104dc:	0801214a 	.word	0x0801214a
 80104e0:	1e6f      	subs	r7, r5, #1
 80104e2:	f1b9 0f00 	cmp.w	r9, #0
 80104e6:	d130      	bne.n	801054a <__gethex+0x326>
 80104e8:	b127      	cbz	r7, 80104f4 <__gethex+0x2d0>
 80104ea:	4639      	mov	r1, r7
 80104ec:	4620      	mov	r0, r4
 80104ee:	f001 f810 	bl	8011512 <__any_on>
 80104f2:	4681      	mov	r9, r0
 80104f4:	117a      	asrs	r2, r7, #5
 80104f6:	2301      	movs	r3, #1
 80104f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80104fc:	f007 071f 	and.w	r7, r7, #31
 8010500:	40bb      	lsls	r3, r7
 8010502:	4213      	tst	r3, r2
 8010504:	4629      	mov	r1, r5
 8010506:	4620      	mov	r0, r4
 8010508:	bf18      	it	ne
 801050a:	f049 0902 	orrne.w	r9, r9, #2
 801050e:	f7ff fe21 	bl	8010154 <rshift>
 8010512:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010516:	1b76      	subs	r6, r6, r5
 8010518:	2502      	movs	r5, #2
 801051a:	f1b9 0f00 	cmp.w	r9, #0
 801051e:	d047      	beq.n	80105b0 <__gethex+0x38c>
 8010520:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010524:	2b02      	cmp	r3, #2
 8010526:	d015      	beq.n	8010554 <__gethex+0x330>
 8010528:	2b03      	cmp	r3, #3
 801052a:	d017      	beq.n	801055c <__gethex+0x338>
 801052c:	2b01      	cmp	r3, #1
 801052e:	d109      	bne.n	8010544 <__gethex+0x320>
 8010530:	f019 0f02 	tst.w	r9, #2
 8010534:	d006      	beq.n	8010544 <__gethex+0x320>
 8010536:	f8da 3000 	ldr.w	r3, [sl]
 801053a:	ea49 0903 	orr.w	r9, r9, r3
 801053e:	f019 0f01 	tst.w	r9, #1
 8010542:	d10e      	bne.n	8010562 <__gethex+0x33e>
 8010544:	f045 0510 	orr.w	r5, r5, #16
 8010548:	e032      	b.n	80105b0 <__gethex+0x38c>
 801054a:	f04f 0901 	mov.w	r9, #1
 801054e:	e7d1      	b.n	80104f4 <__gethex+0x2d0>
 8010550:	2501      	movs	r5, #1
 8010552:	e7e2      	b.n	801051a <__gethex+0x2f6>
 8010554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010556:	f1c3 0301 	rsb	r3, r3, #1
 801055a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801055c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801055e:	2b00      	cmp	r3, #0
 8010560:	d0f0      	beq.n	8010544 <__gethex+0x320>
 8010562:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010566:	f104 0314 	add.w	r3, r4, #20
 801056a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801056e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010572:	f04f 0c00 	mov.w	ip, #0
 8010576:	4618      	mov	r0, r3
 8010578:	f853 2b04 	ldr.w	r2, [r3], #4
 801057c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010580:	d01b      	beq.n	80105ba <__gethex+0x396>
 8010582:	3201      	adds	r2, #1
 8010584:	6002      	str	r2, [r0, #0]
 8010586:	2d02      	cmp	r5, #2
 8010588:	f104 0314 	add.w	r3, r4, #20
 801058c:	d13c      	bne.n	8010608 <__gethex+0x3e4>
 801058e:	f8d8 2000 	ldr.w	r2, [r8]
 8010592:	3a01      	subs	r2, #1
 8010594:	42b2      	cmp	r2, r6
 8010596:	d109      	bne.n	80105ac <__gethex+0x388>
 8010598:	1171      	asrs	r1, r6, #5
 801059a:	2201      	movs	r2, #1
 801059c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80105a0:	f006 061f 	and.w	r6, r6, #31
 80105a4:	fa02 f606 	lsl.w	r6, r2, r6
 80105a8:	421e      	tst	r6, r3
 80105aa:	d13a      	bne.n	8010622 <__gethex+0x3fe>
 80105ac:	f045 0520 	orr.w	r5, r5, #32
 80105b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105b2:	601c      	str	r4, [r3, #0]
 80105b4:	9b02      	ldr	r3, [sp, #8]
 80105b6:	601f      	str	r7, [r3, #0]
 80105b8:	e6b0      	b.n	801031c <__gethex+0xf8>
 80105ba:	4299      	cmp	r1, r3
 80105bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80105c0:	d8d9      	bhi.n	8010576 <__gethex+0x352>
 80105c2:	68a3      	ldr	r3, [r4, #8]
 80105c4:	459b      	cmp	fp, r3
 80105c6:	db17      	blt.n	80105f8 <__gethex+0x3d4>
 80105c8:	6861      	ldr	r1, [r4, #4]
 80105ca:	9801      	ldr	r0, [sp, #4]
 80105cc:	3101      	adds	r1, #1
 80105ce:	f000 fb0f 	bl	8010bf0 <_Balloc>
 80105d2:	4681      	mov	r9, r0
 80105d4:	b918      	cbnz	r0, 80105de <__gethex+0x3ba>
 80105d6:	4b1a      	ldr	r3, [pc, #104]	@ (8010640 <__gethex+0x41c>)
 80105d8:	4602      	mov	r2, r0
 80105da:	2184      	movs	r1, #132	@ 0x84
 80105dc:	e6c5      	b.n	801036a <__gethex+0x146>
 80105de:	6922      	ldr	r2, [r4, #16]
 80105e0:	3202      	adds	r2, #2
 80105e2:	f104 010c 	add.w	r1, r4, #12
 80105e6:	0092      	lsls	r2, r2, #2
 80105e8:	300c      	adds	r0, #12
 80105ea:	f7fe fee2 	bl	800f3b2 <memcpy>
 80105ee:	4621      	mov	r1, r4
 80105f0:	9801      	ldr	r0, [sp, #4]
 80105f2:	f000 fb3d 	bl	8010c70 <_Bfree>
 80105f6:	464c      	mov	r4, r9
 80105f8:	6923      	ldr	r3, [r4, #16]
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010600:	6122      	str	r2, [r4, #16]
 8010602:	2201      	movs	r2, #1
 8010604:	615a      	str	r2, [r3, #20]
 8010606:	e7be      	b.n	8010586 <__gethex+0x362>
 8010608:	6922      	ldr	r2, [r4, #16]
 801060a:	455a      	cmp	r2, fp
 801060c:	dd0b      	ble.n	8010626 <__gethex+0x402>
 801060e:	2101      	movs	r1, #1
 8010610:	4620      	mov	r0, r4
 8010612:	f7ff fd9f 	bl	8010154 <rshift>
 8010616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801061a:	3701      	adds	r7, #1
 801061c:	42bb      	cmp	r3, r7
 801061e:	f6ff aee0 	blt.w	80103e2 <__gethex+0x1be>
 8010622:	2501      	movs	r5, #1
 8010624:	e7c2      	b.n	80105ac <__gethex+0x388>
 8010626:	f016 061f 	ands.w	r6, r6, #31
 801062a:	d0fa      	beq.n	8010622 <__gethex+0x3fe>
 801062c:	4453      	add	r3, sl
 801062e:	f1c6 0620 	rsb	r6, r6, #32
 8010632:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010636:	f000 fbcd 	bl	8010dd4 <__hi0bits>
 801063a:	42b0      	cmp	r0, r6
 801063c:	dbe7      	blt.n	801060e <__gethex+0x3ea>
 801063e:	e7f0      	b.n	8010622 <__gethex+0x3fe>
 8010640:	08012139 	.word	0x08012139

08010644 <L_shift>:
 8010644:	f1c2 0208 	rsb	r2, r2, #8
 8010648:	0092      	lsls	r2, r2, #2
 801064a:	b570      	push	{r4, r5, r6, lr}
 801064c:	f1c2 0620 	rsb	r6, r2, #32
 8010650:	6843      	ldr	r3, [r0, #4]
 8010652:	6804      	ldr	r4, [r0, #0]
 8010654:	fa03 f506 	lsl.w	r5, r3, r6
 8010658:	432c      	orrs	r4, r5
 801065a:	40d3      	lsrs	r3, r2
 801065c:	6004      	str	r4, [r0, #0]
 801065e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010662:	4288      	cmp	r0, r1
 8010664:	d3f4      	bcc.n	8010650 <L_shift+0xc>
 8010666:	bd70      	pop	{r4, r5, r6, pc}

08010668 <__match>:
 8010668:	b530      	push	{r4, r5, lr}
 801066a:	6803      	ldr	r3, [r0, #0]
 801066c:	3301      	adds	r3, #1
 801066e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010672:	b914      	cbnz	r4, 801067a <__match+0x12>
 8010674:	6003      	str	r3, [r0, #0]
 8010676:	2001      	movs	r0, #1
 8010678:	bd30      	pop	{r4, r5, pc}
 801067a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801067e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010682:	2d19      	cmp	r5, #25
 8010684:	bf98      	it	ls
 8010686:	3220      	addls	r2, #32
 8010688:	42a2      	cmp	r2, r4
 801068a:	d0f0      	beq.n	801066e <__match+0x6>
 801068c:	2000      	movs	r0, #0
 801068e:	e7f3      	b.n	8010678 <__match+0x10>

08010690 <__hexnan>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	680b      	ldr	r3, [r1, #0]
 8010696:	6801      	ldr	r1, [r0, #0]
 8010698:	115e      	asrs	r6, r3, #5
 801069a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801069e:	f013 031f 	ands.w	r3, r3, #31
 80106a2:	b087      	sub	sp, #28
 80106a4:	bf18      	it	ne
 80106a6:	3604      	addne	r6, #4
 80106a8:	2500      	movs	r5, #0
 80106aa:	1f37      	subs	r7, r6, #4
 80106ac:	4682      	mov	sl, r0
 80106ae:	4690      	mov	r8, r2
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80106b6:	46b9      	mov	r9, r7
 80106b8:	463c      	mov	r4, r7
 80106ba:	9502      	str	r5, [sp, #8]
 80106bc:	46ab      	mov	fp, r5
 80106be:	784a      	ldrb	r2, [r1, #1]
 80106c0:	1c4b      	adds	r3, r1, #1
 80106c2:	9303      	str	r3, [sp, #12]
 80106c4:	b342      	cbz	r2, 8010718 <__hexnan+0x88>
 80106c6:	4610      	mov	r0, r2
 80106c8:	9105      	str	r1, [sp, #20]
 80106ca:	9204      	str	r2, [sp, #16]
 80106cc:	f7ff fd94 	bl	80101f8 <__hexdig_fun>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d151      	bne.n	8010778 <__hexnan+0xe8>
 80106d4:	9a04      	ldr	r2, [sp, #16]
 80106d6:	9905      	ldr	r1, [sp, #20]
 80106d8:	2a20      	cmp	r2, #32
 80106da:	d818      	bhi.n	801070e <__hexnan+0x7e>
 80106dc:	9b02      	ldr	r3, [sp, #8]
 80106de:	459b      	cmp	fp, r3
 80106e0:	dd13      	ble.n	801070a <__hexnan+0x7a>
 80106e2:	454c      	cmp	r4, r9
 80106e4:	d206      	bcs.n	80106f4 <__hexnan+0x64>
 80106e6:	2d07      	cmp	r5, #7
 80106e8:	dc04      	bgt.n	80106f4 <__hexnan+0x64>
 80106ea:	462a      	mov	r2, r5
 80106ec:	4649      	mov	r1, r9
 80106ee:	4620      	mov	r0, r4
 80106f0:	f7ff ffa8 	bl	8010644 <L_shift>
 80106f4:	4544      	cmp	r4, r8
 80106f6:	d952      	bls.n	801079e <__hexnan+0x10e>
 80106f8:	2300      	movs	r3, #0
 80106fa:	f1a4 0904 	sub.w	r9, r4, #4
 80106fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010702:	f8cd b008 	str.w	fp, [sp, #8]
 8010706:	464c      	mov	r4, r9
 8010708:	461d      	mov	r5, r3
 801070a:	9903      	ldr	r1, [sp, #12]
 801070c:	e7d7      	b.n	80106be <__hexnan+0x2e>
 801070e:	2a29      	cmp	r2, #41	@ 0x29
 8010710:	d157      	bne.n	80107c2 <__hexnan+0x132>
 8010712:	3102      	adds	r1, #2
 8010714:	f8ca 1000 	str.w	r1, [sl]
 8010718:	f1bb 0f00 	cmp.w	fp, #0
 801071c:	d051      	beq.n	80107c2 <__hexnan+0x132>
 801071e:	454c      	cmp	r4, r9
 8010720:	d206      	bcs.n	8010730 <__hexnan+0xa0>
 8010722:	2d07      	cmp	r5, #7
 8010724:	dc04      	bgt.n	8010730 <__hexnan+0xa0>
 8010726:	462a      	mov	r2, r5
 8010728:	4649      	mov	r1, r9
 801072a:	4620      	mov	r0, r4
 801072c:	f7ff ff8a 	bl	8010644 <L_shift>
 8010730:	4544      	cmp	r4, r8
 8010732:	d936      	bls.n	80107a2 <__hexnan+0x112>
 8010734:	f1a8 0204 	sub.w	r2, r8, #4
 8010738:	4623      	mov	r3, r4
 801073a:	f853 1b04 	ldr.w	r1, [r3], #4
 801073e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010742:	429f      	cmp	r7, r3
 8010744:	d2f9      	bcs.n	801073a <__hexnan+0xaa>
 8010746:	1b3b      	subs	r3, r7, r4
 8010748:	f023 0303 	bic.w	r3, r3, #3
 801074c:	3304      	adds	r3, #4
 801074e:	3401      	adds	r4, #1
 8010750:	3e03      	subs	r6, #3
 8010752:	42b4      	cmp	r4, r6
 8010754:	bf88      	it	hi
 8010756:	2304      	movhi	r3, #4
 8010758:	4443      	add	r3, r8
 801075a:	2200      	movs	r2, #0
 801075c:	f843 2b04 	str.w	r2, [r3], #4
 8010760:	429f      	cmp	r7, r3
 8010762:	d2fb      	bcs.n	801075c <__hexnan+0xcc>
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	b91b      	cbnz	r3, 8010770 <__hexnan+0xe0>
 8010768:	4547      	cmp	r7, r8
 801076a:	d128      	bne.n	80107be <__hexnan+0x12e>
 801076c:	2301      	movs	r3, #1
 801076e:	603b      	str	r3, [r7, #0]
 8010770:	2005      	movs	r0, #5
 8010772:	b007      	add	sp, #28
 8010774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010778:	3501      	adds	r5, #1
 801077a:	2d08      	cmp	r5, #8
 801077c:	f10b 0b01 	add.w	fp, fp, #1
 8010780:	dd06      	ble.n	8010790 <__hexnan+0x100>
 8010782:	4544      	cmp	r4, r8
 8010784:	d9c1      	bls.n	801070a <__hexnan+0x7a>
 8010786:	2300      	movs	r3, #0
 8010788:	f844 3c04 	str.w	r3, [r4, #-4]
 801078c:	2501      	movs	r5, #1
 801078e:	3c04      	subs	r4, #4
 8010790:	6822      	ldr	r2, [r4, #0]
 8010792:	f000 000f 	and.w	r0, r0, #15
 8010796:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801079a:	6020      	str	r0, [r4, #0]
 801079c:	e7b5      	b.n	801070a <__hexnan+0x7a>
 801079e:	2508      	movs	r5, #8
 80107a0:	e7b3      	b.n	801070a <__hexnan+0x7a>
 80107a2:	9b01      	ldr	r3, [sp, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d0dd      	beq.n	8010764 <__hexnan+0xd4>
 80107a8:	f1c3 0320 	rsb	r3, r3, #32
 80107ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107b0:	40da      	lsrs	r2, r3
 80107b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80107b6:	4013      	ands	r3, r2
 80107b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80107bc:	e7d2      	b.n	8010764 <__hexnan+0xd4>
 80107be:	3f04      	subs	r7, #4
 80107c0:	e7d0      	b.n	8010764 <__hexnan+0xd4>
 80107c2:	2004      	movs	r0, #4
 80107c4:	e7d5      	b.n	8010772 <__hexnan+0xe2>

080107c6 <__ssputs_r>:
 80107c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107ca:	688e      	ldr	r6, [r1, #8]
 80107cc:	461f      	mov	r7, r3
 80107ce:	42be      	cmp	r6, r7
 80107d0:	680b      	ldr	r3, [r1, #0]
 80107d2:	4682      	mov	sl, r0
 80107d4:	460c      	mov	r4, r1
 80107d6:	4690      	mov	r8, r2
 80107d8:	d82d      	bhi.n	8010836 <__ssputs_r+0x70>
 80107da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80107de:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80107e2:	d026      	beq.n	8010832 <__ssputs_r+0x6c>
 80107e4:	6965      	ldr	r5, [r4, #20]
 80107e6:	6909      	ldr	r1, [r1, #16]
 80107e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107ec:	eba3 0901 	sub.w	r9, r3, r1
 80107f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107f4:	1c7b      	adds	r3, r7, #1
 80107f6:	444b      	add	r3, r9
 80107f8:	106d      	asrs	r5, r5, #1
 80107fa:	429d      	cmp	r5, r3
 80107fc:	bf38      	it	cc
 80107fe:	461d      	movcc	r5, r3
 8010800:	0553      	lsls	r3, r2, #21
 8010802:	d527      	bpl.n	8010854 <__ssputs_r+0x8e>
 8010804:	4629      	mov	r1, r5
 8010806:	f7fd f953 	bl	800dab0 <_malloc_r>
 801080a:	4606      	mov	r6, r0
 801080c:	b360      	cbz	r0, 8010868 <__ssputs_r+0xa2>
 801080e:	6921      	ldr	r1, [r4, #16]
 8010810:	464a      	mov	r2, r9
 8010812:	f7fe fdce 	bl	800f3b2 <memcpy>
 8010816:	89a3      	ldrh	r3, [r4, #12]
 8010818:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010820:	81a3      	strh	r3, [r4, #12]
 8010822:	6126      	str	r6, [r4, #16]
 8010824:	6165      	str	r5, [r4, #20]
 8010826:	444e      	add	r6, r9
 8010828:	eba5 0509 	sub.w	r5, r5, r9
 801082c:	6026      	str	r6, [r4, #0]
 801082e:	60a5      	str	r5, [r4, #8]
 8010830:	463e      	mov	r6, r7
 8010832:	42be      	cmp	r6, r7
 8010834:	d900      	bls.n	8010838 <__ssputs_r+0x72>
 8010836:	463e      	mov	r6, r7
 8010838:	6820      	ldr	r0, [r4, #0]
 801083a:	4632      	mov	r2, r6
 801083c:	4641      	mov	r1, r8
 801083e:	f001 f810 	bl	8011862 <memmove>
 8010842:	68a3      	ldr	r3, [r4, #8]
 8010844:	1b9b      	subs	r3, r3, r6
 8010846:	60a3      	str	r3, [r4, #8]
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	4433      	add	r3, r6
 801084c:	6023      	str	r3, [r4, #0]
 801084e:	2000      	movs	r0, #0
 8010850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010854:	462a      	mov	r2, r5
 8010856:	f000 fed3 	bl	8011600 <_realloc_r>
 801085a:	4606      	mov	r6, r0
 801085c:	2800      	cmp	r0, #0
 801085e:	d1e0      	bne.n	8010822 <__ssputs_r+0x5c>
 8010860:	6921      	ldr	r1, [r4, #16]
 8010862:	4650      	mov	r0, sl
 8010864:	f7ff fc2c 	bl	80100c0 <_free_r>
 8010868:	230c      	movs	r3, #12
 801086a:	f8ca 3000 	str.w	r3, [sl]
 801086e:	89a3      	ldrh	r3, [r4, #12]
 8010870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010874:	81a3      	strh	r3, [r4, #12]
 8010876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801087a:	e7e9      	b.n	8010850 <__ssputs_r+0x8a>

0801087c <_svfiprintf_r>:
 801087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010880:	4698      	mov	r8, r3
 8010882:	898b      	ldrh	r3, [r1, #12]
 8010884:	061b      	lsls	r3, r3, #24
 8010886:	b09d      	sub	sp, #116	@ 0x74
 8010888:	4607      	mov	r7, r0
 801088a:	460d      	mov	r5, r1
 801088c:	4614      	mov	r4, r2
 801088e:	d510      	bpl.n	80108b2 <_svfiprintf_r+0x36>
 8010890:	690b      	ldr	r3, [r1, #16]
 8010892:	b973      	cbnz	r3, 80108b2 <_svfiprintf_r+0x36>
 8010894:	2140      	movs	r1, #64	@ 0x40
 8010896:	f7fd f90b 	bl	800dab0 <_malloc_r>
 801089a:	6028      	str	r0, [r5, #0]
 801089c:	6128      	str	r0, [r5, #16]
 801089e:	b930      	cbnz	r0, 80108ae <_svfiprintf_r+0x32>
 80108a0:	230c      	movs	r3, #12
 80108a2:	603b      	str	r3, [r7, #0]
 80108a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108a8:	b01d      	add	sp, #116	@ 0x74
 80108aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ae:	2340      	movs	r3, #64	@ 0x40
 80108b0:	616b      	str	r3, [r5, #20]
 80108b2:	2300      	movs	r3, #0
 80108b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80108b6:	2320      	movs	r3, #32
 80108b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80108bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80108c0:	2330      	movs	r3, #48	@ 0x30
 80108c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010a60 <_svfiprintf_r+0x1e4>
 80108c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108ca:	f04f 0901 	mov.w	r9, #1
 80108ce:	4623      	mov	r3, r4
 80108d0:	469a      	mov	sl, r3
 80108d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108d6:	b10a      	cbz	r2, 80108dc <_svfiprintf_r+0x60>
 80108d8:	2a25      	cmp	r2, #37	@ 0x25
 80108da:	d1f9      	bne.n	80108d0 <_svfiprintf_r+0x54>
 80108dc:	ebba 0b04 	subs.w	fp, sl, r4
 80108e0:	d00b      	beq.n	80108fa <_svfiprintf_r+0x7e>
 80108e2:	465b      	mov	r3, fp
 80108e4:	4622      	mov	r2, r4
 80108e6:	4629      	mov	r1, r5
 80108e8:	4638      	mov	r0, r7
 80108ea:	f7ff ff6c 	bl	80107c6 <__ssputs_r>
 80108ee:	3001      	adds	r0, #1
 80108f0:	f000 80a7 	beq.w	8010a42 <_svfiprintf_r+0x1c6>
 80108f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108f6:	445a      	add	r2, fp
 80108f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80108fa:	f89a 3000 	ldrb.w	r3, [sl]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 809f 	beq.w	8010a42 <_svfiprintf_r+0x1c6>
 8010904:	2300      	movs	r3, #0
 8010906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801090a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801090e:	f10a 0a01 	add.w	sl, sl, #1
 8010912:	9304      	str	r3, [sp, #16]
 8010914:	9307      	str	r3, [sp, #28]
 8010916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801091a:	931a      	str	r3, [sp, #104]	@ 0x68
 801091c:	4654      	mov	r4, sl
 801091e:	2205      	movs	r2, #5
 8010920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010924:	484e      	ldr	r0, [pc, #312]	@ (8010a60 <_svfiprintf_r+0x1e4>)
 8010926:	f7ef fc7b 	bl	8000220 <memchr>
 801092a:	9a04      	ldr	r2, [sp, #16]
 801092c:	b9d8      	cbnz	r0, 8010966 <_svfiprintf_r+0xea>
 801092e:	06d0      	lsls	r0, r2, #27
 8010930:	bf44      	itt	mi
 8010932:	2320      	movmi	r3, #32
 8010934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010938:	0711      	lsls	r1, r2, #28
 801093a:	bf44      	itt	mi
 801093c:	232b      	movmi	r3, #43	@ 0x2b
 801093e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010942:	f89a 3000 	ldrb.w	r3, [sl]
 8010946:	2b2a      	cmp	r3, #42	@ 0x2a
 8010948:	d015      	beq.n	8010976 <_svfiprintf_r+0xfa>
 801094a:	9a07      	ldr	r2, [sp, #28]
 801094c:	4654      	mov	r4, sl
 801094e:	2000      	movs	r0, #0
 8010950:	f04f 0c0a 	mov.w	ip, #10
 8010954:	4621      	mov	r1, r4
 8010956:	f811 3b01 	ldrb.w	r3, [r1], #1
 801095a:	3b30      	subs	r3, #48	@ 0x30
 801095c:	2b09      	cmp	r3, #9
 801095e:	d94b      	bls.n	80109f8 <_svfiprintf_r+0x17c>
 8010960:	b1b0      	cbz	r0, 8010990 <_svfiprintf_r+0x114>
 8010962:	9207      	str	r2, [sp, #28]
 8010964:	e014      	b.n	8010990 <_svfiprintf_r+0x114>
 8010966:	eba0 0308 	sub.w	r3, r0, r8
 801096a:	fa09 f303 	lsl.w	r3, r9, r3
 801096e:	4313      	orrs	r3, r2
 8010970:	9304      	str	r3, [sp, #16]
 8010972:	46a2      	mov	sl, r4
 8010974:	e7d2      	b.n	801091c <_svfiprintf_r+0xa0>
 8010976:	9b03      	ldr	r3, [sp, #12]
 8010978:	1d19      	adds	r1, r3, #4
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	9103      	str	r1, [sp, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	bfbb      	ittet	lt
 8010982:	425b      	neglt	r3, r3
 8010984:	f042 0202 	orrlt.w	r2, r2, #2
 8010988:	9307      	strge	r3, [sp, #28]
 801098a:	9307      	strlt	r3, [sp, #28]
 801098c:	bfb8      	it	lt
 801098e:	9204      	strlt	r2, [sp, #16]
 8010990:	7823      	ldrb	r3, [r4, #0]
 8010992:	2b2e      	cmp	r3, #46	@ 0x2e
 8010994:	d10a      	bne.n	80109ac <_svfiprintf_r+0x130>
 8010996:	7863      	ldrb	r3, [r4, #1]
 8010998:	2b2a      	cmp	r3, #42	@ 0x2a
 801099a:	d132      	bne.n	8010a02 <_svfiprintf_r+0x186>
 801099c:	9b03      	ldr	r3, [sp, #12]
 801099e:	1d1a      	adds	r2, r3, #4
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	9203      	str	r2, [sp, #12]
 80109a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80109a8:	3402      	adds	r4, #2
 80109aa:	9305      	str	r3, [sp, #20]
 80109ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010a70 <_svfiprintf_r+0x1f4>
 80109b0:	7821      	ldrb	r1, [r4, #0]
 80109b2:	2203      	movs	r2, #3
 80109b4:	4650      	mov	r0, sl
 80109b6:	f7ef fc33 	bl	8000220 <memchr>
 80109ba:	b138      	cbz	r0, 80109cc <_svfiprintf_r+0x150>
 80109bc:	9b04      	ldr	r3, [sp, #16]
 80109be:	eba0 000a 	sub.w	r0, r0, sl
 80109c2:	2240      	movs	r2, #64	@ 0x40
 80109c4:	4082      	lsls	r2, r0
 80109c6:	4313      	orrs	r3, r2
 80109c8:	3401      	adds	r4, #1
 80109ca:	9304      	str	r3, [sp, #16]
 80109cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d0:	4824      	ldr	r0, [pc, #144]	@ (8010a64 <_svfiprintf_r+0x1e8>)
 80109d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109d6:	2206      	movs	r2, #6
 80109d8:	f7ef fc22 	bl	8000220 <memchr>
 80109dc:	2800      	cmp	r0, #0
 80109de:	d036      	beq.n	8010a4e <_svfiprintf_r+0x1d2>
 80109e0:	4b21      	ldr	r3, [pc, #132]	@ (8010a68 <_svfiprintf_r+0x1ec>)
 80109e2:	bb1b      	cbnz	r3, 8010a2c <_svfiprintf_r+0x1b0>
 80109e4:	9b03      	ldr	r3, [sp, #12]
 80109e6:	3307      	adds	r3, #7
 80109e8:	f023 0307 	bic.w	r3, r3, #7
 80109ec:	3308      	adds	r3, #8
 80109ee:	9303      	str	r3, [sp, #12]
 80109f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f2:	4433      	add	r3, r6
 80109f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80109f6:	e76a      	b.n	80108ce <_svfiprintf_r+0x52>
 80109f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80109fc:	460c      	mov	r4, r1
 80109fe:	2001      	movs	r0, #1
 8010a00:	e7a8      	b.n	8010954 <_svfiprintf_r+0xd8>
 8010a02:	2300      	movs	r3, #0
 8010a04:	3401      	adds	r4, #1
 8010a06:	9305      	str	r3, [sp, #20]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	f04f 0c0a 	mov.w	ip, #10
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a14:	3a30      	subs	r2, #48	@ 0x30
 8010a16:	2a09      	cmp	r2, #9
 8010a18:	d903      	bls.n	8010a22 <_svfiprintf_r+0x1a6>
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d0c6      	beq.n	80109ac <_svfiprintf_r+0x130>
 8010a1e:	9105      	str	r1, [sp, #20]
 8010a20:	e7c4      	b.n	80109ac <_svfiprintf_r+0x130>
 8010a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a26:	4604      	mov	r4, r0
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e7f0      	b.n	8010a0e <_svfiprintf_r+0x192>
 8010a2c:	ab03      	add	r3, sp, #12
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	462a      	mov	r2, r5
 8010a32:	4b0e      	ldr	r3, [pc, #56]	@ (8010a6c <_svfiprintf_r+0x1f0>)
 8010a34:	a904      	add	r1, sp, #16
 8010a36:	4638      	mov	r0, r7
 8010a38:	f7fc fde6 	bl	800d608 <_printf_float>
 8010a3c:	1c42      	adds	r2, r0, #1
 8010a3e:	4606      	mov	r6, r0
 8010a40:	d1d6      	bne.n	80109f0 <_svfiprintf_r+0x174>
 8010a42:	89ab      	ldrh	r3, [r5, #12]
 8010a44:	065b      	lsls	r3, r3, #25
 8010a46:	f53f af2d 	bmi.w	80108a4 <_svfiprintf_r+0x28>
 8010a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a4c:	e72c      	b.n	80108a8 <_svfiprintf_r+0x2c>
 8010a4e:	ab03      	add	r3, sp, #12
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	462a      	mov	r2, r5
 8010a54:	4b05      	ldr	r3, [pc, #20]	@ (8010a6c <_svfiprintf_r+0x1f0>)
 8010a56:	a904      	add	r1, sp, #16
 8010a58:	4638      	mov	r0, r7
 8010a5a:	f7fd f917 	bl	800dc8c <_printf_i>
 8010a5e:	e7ed      	b.n	8010a3c <_svfiprintf_r+0x1c0>
 8010a60:	080121aa 	.word	0x080121aa
 8010a64:	080121b4 	.word	0x080121b4
 8010a68:	0800d609 	.word	0x0800d609
 8010a6c:	080107c7 	.word	0x080107c7
 8010a70:	080121b0 	.word	0x080121b0

08010a74 <__ascii_mbtowc>:
 8010a74:	b082      	sub	sp, #8
 8010a76:	b901      	cbnz	r1, 8010a7a <__ascii_mbtowc+0x6>
 8010a78:	a901      	add	r1, sp, #4
 8010a7a:	b142      	cbz	r2, 8010a8e <__ascii_mbtowc+0x1a>
 8010a7c:	b14b      	cbz	r3, 8010a92 <__ascii_mbtowc+0x1e>
 8010a7e:	7813      	ldrb	r3, [r2, #0]
 8010a80:	600b      	str	r3, [r1, #0]
 8010a82:	7812      	ldrb	r2, [r2, #0]
 8010a84:	1e10      	subs	r0, r2, #0
 8010a86:	bf18      	it	ne
 8010a88:	2001      	movne	r0, #1
 8010a8a:	b002      	add	sp, #8
 8010a8c:	4770      	bx	lr
 8010a8e:	4610      	mov	r0, r2
 8010a90:	e7fb      	b.n	8010a8a <__ascii_mbtowc+0x16>
 8010a92:	f06f 0001 	mvn.w	r0, #1
 8010a96:	e7f8      	b.n	8010a8a <__ascii_mbtowc+0x16>

08010a98 <__sflush_r>:
 8010a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa0:	0716      	lsls	r6, r2, #28
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	d454      	bmi.n	8010b52 <__sflush_r+0xba>
 8010aa8:	684b      	ldr	r3, [r1, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	dc02      	bgt.n	8010ab4 <__sflush_r+0x1c>
 8010aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	dd48      	ble.n	8010b46 <__sflush_r+0xae>
 8010ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ab6:	2e00      	cmp	r6, #0
 8010ab8:	d045      	beq.n	8010b46 <__sflush_r+0xae>
 8010aba:	2300      	movs	r3, #0
 8010abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ac0:	682f      	ldr	r7, [r5, #0]
 8010ac2:	6a21      	ldr	r1, [r4, #32]
 8010ac4:	602b      	str	r3, [r5, #0]
 8010ac6:	d030      	beq.n	8010b2a <__sflush_r+0x92>
 8010ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010aca:	89a3      	ldrh	r3, [r4, #12]
 8010acc:	0759      	lsls	r1, r3, #29
 8010ace:	d505      	bpl.n	8010adc <__sflush_r+0x44>
 8010ad0:	6863      	ldr	r3, [r4, #4]
 8010ad2:	1ad2      	subs	r2, r2, r3
 8010ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ad6:	b10b      	cbz	r3, 8010adc <__sflush_r+0x44>
 8010ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ada:	1ad2      	subs	r2, r2, r3
 8010adc:	2300      	movs	r3, #0
 8010ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ae0:	6a21      	ldr	r1, [r4, #32]
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	47b0      	blx	r6
 8010ae6:	1c43      	adds	r3, r0, #1
 8010ae8:	89a3      	ldrh	r3, [r4, #12]
 8010aea:	d106      	bne.n	8010afa <__sflush_r+0x62>
 8010aec:	6829      	ldr	r1, [r5, #0]
 8010aee:	291d      	cmp	r1, #29
 8010af0:	d82b      	bhi.n	8010b4a <__sflush_r+0xb2>
 8010af2:	4a2a      	ldr	r2, [pc, #168]	@ (8010b9c <__sflush_r+0x104>)
 8010af4:	410a      	asrs	r2, r1
 8010af6:	07d6      	lsls	r6, r2, #31
 8010af8:	d427      	bmi.n	8010b4a <__sflush_r+0xb2>
 8010afa:	2200      	movs	r2, #0
 8010afc:	6062      	str	r2, [r4, #4]
 8010afe:	04d9      	lsls	r1, r3, #19
 8010b00:	6922      	ldr	r2, [r4, #16]
 8010b02:	6022      	str	r2, [r4, #0]
 8010b04:	d504      	bpl.n	8010b10 <__sflush_r+0x78>
 8010b06:	1c42      	adds	r2, r0, #1
 8010b08:	d101      	bne.n	8010b0e <__sflush_r+0x76>
 8010b0a:	682b      	ldr	r3, [r5, #0]
 8010b0c:	b903      	cbnz	r3, 8010b10 <__sflush_r+0x78>
 8010b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b12:	602f      	str	r7, [r5, #0]
 8010b14:	b1b9      	cbz	r1, 8010b46 <__sflush_r+0xae>
 8010b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b1a:	4299      	cmp	r1, r3
 8010b1c:	d002      	beq.n	8010b24 <__sflush_r+0x8c>
 8010b1e:	4628      	mov	r0, r5
 8010b20:	f7ff face 	bl	80100c0 <_free_r>
 8010b24:	2300      	movs	r3, #0
 8010b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b28:	e00d      	b.n	8010b46 <__sflush_r+0xae>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	47b0      	blx	r6
 8010b30:	4602      	mov	r2, r0
 8010b32:	1c50      	adds	r0, r2, #1
 8010b34:	d1c9      	bne.n	8010aca <__sflush_r+0x32>
 8010b36:	682b      	ldr	r3, [r5, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d0c6      	beq.n	8010aca <__sflush_r+0x32>
 8010b3c:	2b1d      	cmp	r3, #29
 8010b3e:	d001      	beq.n	8010b44 <__sflush_r+0xac>
 8010b40:	2b16      	cmp	r3, #22
 8010b42:	d11e      	bne.n	8010b82 <__sflush_r+0xea>
 8010b44:	602f      	str	r7, [r5, #0]
 8010b46:	2000      	movs	r0, #0
 8010b48:	e022      	b.n	8010b90 <__sflush_r+0xf8>
 8010b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b4e:	b21b      	sxth	r3, r3
 8010b50:	e01b      	b.n	8010b8a <__sflush_r+0xf2>
 8010b52:	690f      	ldr	r7, [r1, #16]
 8010b54:	2f00      	cmp	r7, #0
 8010b56:	d0f6      	beq.n	8010b46 <__sflush_r+0xae>
 8010b58:	0793      	lsls	r3, r2, #30
 8010b5a:	680e      	ldr	r6, [r1, #0]
 8010b5c:	bf08      	it	eq
 8010b5e:	694b      	ldreq	r3, [r1, #20]
 8010b60:	600f      	str	r7, [r1, #0]
 8010b62:	bf18      	it	ne
 8010b64:	2300      	movne	r3, #0
 8010b66:	eba6 0807 	sub.w	r8, r6, r7
 8010b6a:	608b      	str	r3, [r1, #8]
 8010b6c:	f1b8 0f00 	cmp.w	r8, #0
 8010b70:	dde9      	ble.n	8010b46 <__sflush_r+0xae>
 8010b72:	6a21      	ldr	r1, [r4, #32]
 8010b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010b76:	4643      	mov	r3, r8
 8010b78:	463a      	mov	r2, r7
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	47b0      	blx	r6
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	dc08      	bgt.n	8010b94 <__sflush_r+0xfc>
 8010b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b8a:	81a3      	strh	r3, [r4, #12]
 8010b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b94:	4407      	add	r7, r0
 8010b96:	eba8 0800 	sub.w	r8, r8, r0
 8010b9a:	e7e7      	b.n	8010b6c <__sflush_r+0xd4>
 8010b9c:	dfbffffe 	.word	0xdfbffffe

08010ba0 <_fflush_r>:
 8010ba0:	b538      	push	{r3, r4, r5, lr}
 8010ba2:	690b      	ldr	r3, [r1, #16]
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	460c      	mov	r4, r1
 8010ba8:	b913      	cbnz	r3, 8010bb0 <_fflush_r+0x10>
 8010baa:	2500      	movs	r5, #0
 8010bac:	4628      	mov	r0, r5
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
 8010bb0:	b118      	cbz	r0, 8010bba <_fflush_r+0x1a>
 8010bb2:	6a03      	ldr	r3, [r0, #32]
 8010bb4:	b90b      	cbnz	r3, 8010bba <_fflush_r+0x1a>
 8010bb6:	f7fd fc89 	bl	800e4cc <__sinit>
 8010bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d0f3      	beq.n	8010baa <_fflush_r+0xa>
 8010bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010bc4:	07d0      	lsls	r0, r2, #31
 8010bc6:	d404      	bmi.n	8010bd2 <_fflush_r+0x32>
 8010bc8:	0599      	lsls	r1, r3, #22
 8010bca:	d402      	bmi.n	8010bd2 <_fflush_r+0x32>
 8010bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bce:	f7fe fbee 	bl	800f3ae <__retarget_lock_acquire_recursive>
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	f7ff ff5f 	bl	8010a98 <__sflush_r>
 8010bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010bdc:	07da      	lsls	r2, r3, #31
 8010bde:	4605      	mov	r5, r0
 8010be0:	d4e4      	bmi.n	8010bac <_fflush_r+0xc>
 8010be2:	89a3      	ldrh	r3, [r4, #12]
 8010be4:	059b      	lsls	r3, r3, #22
 8010be6:	d4e1      	bmi.n	8010bac <_fflush_r+0xc>
 8010be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bea:	f7fe fbe1 	bl	800f3b0 <__retarget_lock_release_recursive>
 8010bee:	e7dd      	b.n	8010bac <_fflush_r+0xc>

08010bf0 <_Balloc>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	69c6      	ldr	r6, [r0, #28]
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	460d      	mov	r5, r1
 8010bf8:	b976      	cbnz	r6, 8010c18 <_Balloc+0x28>
 8010bfa:	2010      	movs	r0, #16
 8010bfc:	f7fc ff2e 	bl	800da5c <malloc>
 8010c00:	4602      	mov	r2, r0
 8010c02:	61e0      	str	r0, [r4, #28]
 8010c04:	b920      	cbnz	r0, 8010c10 <_Balloc+0x20>
 8010c06:	4b18      	ldr	r3, [pc, #96]	@ (8010c68 <_Balloc+0x78>)
 8010c08:	4818      	ldr	r0, [pc, #96]	@ (8010c6c <_Balloc+0x7c>)
 8010c0a:	216b      	movs	r1, #107	@ 0x6b
 8010c0c:	f7fe fbee 	bl	800f3ec <__assert_func>
 8010c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c14:	6006      	str	r6, [r0, #0]
 8010c16:	60c6      	str	r6, [r0, #12]
 8010c18:	69e6      	ldr	r6, [r4, #28]
 8010c1a:	68f3      	ldr	r3, [r6, #12]
 8010c1c:	b183      	cbz	r3, 8010c40 <_Balloc+0x50>
 8010c1e:	69e3      	ldr	r3, [r4, #28]
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c26:	b9b8      	cbnz	r0, 8010c58 <_Balloc+0x68>
 8010c28:	2101      	movs	r1, #1
 8010c2a:	fa01 f605 	lsl.w	r6, r1, r5
 8010c2e:	1d72      	adds	r2, r6, #5
 8010c30:	0092      	lsls	r2, r2, #2
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 fe9f 	bl	8011976 <_calloc_r>
 8010c38:	b160      	cbz	r0, 8010c54 <_Balloc+0x64>
 8010c3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c3e:	e00e      	b.n	8010c5e <_Balloc+0x6e>
 8010c40:	2221      	movs	r2, #33	@ 0x21
 8010c42:	2104      	movs	r1, #4
 8010c44:	4620      	mov	r0, r4
 8010c46:	f000 fe96 	bl	8011976 <_calloc_r>
 8010c4a:	69e3      	ldr	r3, [r4, #28]
 8010c4c:	60f0      	str	r0, [r6, #12]
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1e4      	bne.n	8010c1e <_Balloc+0x2e>
 8010c54:	2000      	movs	r0, #0
 8010c56:	bd70      	pop	{r4, r5, r6, pc}
 8010c58:	6802      	ldr	r2, [r0, #0]
 8010c5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c5e:	2300      	movs	r3, #0
 8010c60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c64:	e7f7      	b.n	8010c56 <_Balloc+0x66>
 8010c66:	bf00      	nop
 8010c68:	080120ca 	.word	0x080120ca
 8010c6c:	080121bb 	.word	0x080121bb

08010c70 <_Bfree>:
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	69c6      	ldr	r6, [r0, #28]
 8010c74:	4605      	mov	r5, r0
 8010c76:	460c      	mov	r4, r1
 8010c78:	b976      	cbnz	r6, 8010c98 <_Bfree+0x28>
 8010c7a:	2010      	movs	r0, #16
 8010c7c:	f7fc feee 	bl	800da5c <malloc>
 8010c80:	4602      	mov	r2, r0
 8010c82:	61e8      	str	r0, [r5, #28]
 8010c84:	b920      	cbnz	r0, 8010c90 <_Bfree+0x20>
 8010c86:	4b09      	ldr	r3, [pc, #36]	@ (8010cac <_Bfree+0x3c>)
 8010c88:	4809      	ldr	r0, [pc, #36]	@ (8010cb0 <_Bfree+0x40>)
 8010c8a:	218f      	movs	r1, #143	@ 0x8f
 8010c8c:	f7fe fbae 	bl	800f3ec <__assert_func>
 8010c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c94:	6006      	str	r6, [r0, #0]
 8010c96:	60c6      	str	r6, [r0, #12]
 8010c98:	b13c      	cbz	r4, 8010caa <_Bfree+0x3a>
 8010c9a:	69eb      	ldr	r3, [r5, #28]
 8010c9c:	6862      	ldr	r2, [r4, #4]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ca4:	6021      	str	r1, [r4, #0]
 8010ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010caa:	bd70      	pop	{r4, r5, r6, pc}
 8010cac:	080120ca 	.word	0x080120ca
 8010cb0:	080121bb 	.word	0x080121bb

08010cb4 <__multadd>:
 8010cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cb8:	690d      	ldr	r5, [r1, #16]
 8010cba:	4607      	mov	r7, r0
 8010cbc:	460c      	mov	r4, r1
 8010cbe:	461e      	mov	r6, r3
 8010cc0:	f101 0c14 	add.w	ip, r1, #20
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	f8dc 3000 	ldr.w	r3, [ip]
 8010cca:	b299      	uxth	r1, r3
 8010ccc:	fb02 6101 	mla	r1, r2, r1, r6
 8010cd0:	0c1e      	lsrs	r6, r3, #16
 8010cd2:	0c0b      	lsrs	r3, r1, #16
 8010cd4:	fb02 3306 	mla	r3, r2, r6, r3
 8010cd8:	b289      	uxth	r1, r1
 8010cda:	3001      	adds	r0, #1
 8010cdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ce0:	4285      	cmp	r5, r0
 8010ce2:	f84c 1b04 	str.w	r1, [ip], #4
 8010ce6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010cea:	dcec      	bgt.n	8010cc6 <__multadd+0x12>
 8010cec:	b30e      	cbz	r6, 8010d32 <__multadd+0x7e>
 8010cee:	68a3      	ldr	r3, [r4, #8]
 8010cf0:	42ab      	cmp	r3, r5
 8010cf2:	dc19      	bgt.n	8010d28 <__multadd+0x74>
 8010cf4:	6861      	ldr	r1, [r4, #4]
 8010cf6:	4638      	mov	r0, r7
 8010cf8:	3101      	adds	r1, #1
 8010cfa:	f7ff ff79 	bl	8010bf0 <_Balloc>
 8010cfe:	4680      	mov	r8, r0
 8010d00:	b928      	cbnz	r0, 8010d0e <__multadd+0x5a>
 8010d02:	4602      	mov	r2, r0
 8010d04:	4b0c      	ldr	r3, [pc, #48]	@ (8010d38 <__multadd+0x84>)
 8010d06:	480d      	ldr	r0, [pc, #52]	@ (8010d3c <__multadd+0x88>)
 8010d08:	21ba      	movs	r1, #186	@ 0xba
 8010d0a:	f7fe fb6f 	bl	800f3ec <__assert_func>
 8010d0e:	6922      	ldr	r2, [r4, #16]
 8010d10:	3202      	adds	r2, #2
 8010d12:	f104 010c 	add.w	r1, r4, #12
 8010d16:	0092      	lsls	r2, r2, #2
 8010d18:	300c      	adds	r0, #12
 8010d1a:	f7fe fb4a 	bl	800f3b2 <memcpy>
 8010d1e:	4621      	mov	r1, r4
 8010d20:	4638      	mov	r0, r7
 8010d22:	f7ff ffa5 	bl	8010c70 <_Bfree>
 8010d26:	4644      	mov	r4, r8
 8010d28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d2c:	3501      	adds	r5, #1
 8010d2e:	615e      	str	r6, [r3, #20]
 8010d30:	6125      	str	r5, [r4, #16]
 8010d32:	4620      	mov	r0, r4
 8010d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d38:	08012139 	.word	0x08012139
 8010d3c:	080121bb 	.word	0x080121bb

08010d40 <__s2b>:
 8010d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d44:	460c      	mov	r4, r1
 8010d46:	4615      	mov	r5, r2
 8010d48:	461f      	mov	r7, r3
 8010d4a:	2209      	movs	r2, #9
 8010d4c:	3308      	adds	r3, #8
 8010d4e:	4606      	mov	r6, r0
 8010d50:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d54:	2100      	movs	r1, #0
 8010d56:	2201      	movs	r2, #1
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	db09      	blt.n	8010d70 <__s2b+0x30>
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	f7ff ff47 	bl	8010bf0 <_Balloc>
 8010d62:	b940      	cbnz	r0, 8010d76 <__s2b+0x36>
 8010d64:	4602      	mov	r2, r0
 8010d66:	4b19      	ldr	r3, [pc, #100]	@ (8010dcc <__s2b+0x8c>)
 8010d68:	4819      	ldr	r0, [pc, #100]	@ (8010dd0 <__s2b+0x90>)
 8010d6a:	21d3      	movs	r1, #211	@ 0xd3
 8010d6c:	f7fe fb3e 	bl	800f3ec <__assert_func>
 8010d70:	0052      	lsls	r2, r2, #1
 8010d72:	3101      	adds	r1, #1
 8010d74:	e7f0      	b.n	8010d58 <__s2b+0x18>
 8010d76:	9b08      	ldr	r3, [sp, #32]
 8010d78:	6143      	str	r3, [r0, #20]
 8010d7a:	2d09      	cmp	r5, #9
 8010d7c:	f04f 0301 	mov.w	r3, #1
 8010d80:	6103      	str	r3, [r0, #16]
 8010d82:	dd16      	ble.n	8010db2 <__s2b+0x72>
 8010d84:	f104 0909 	add.w	r9, r4, #9
 8010d88:	46c8      	mov	r8, r9
 8010d8a:	442c      	add	r4, r5
 8010d8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d90:	4601      	mov	r1, r0
 8010d92:	3b30      	subs	r3, #48	@ 0x30
 8010d94:	220a      	movs	r2, #10
 8010d96:	4630      	mov	r0, r6
 8010d98:	f7ff ff8c 	bl	8010cb4 <__multadd>
 8010d9c:	45a0      	cmp	r8, r4
 8010d9e:	d1f5      	bne.n	8010d8c <__s2b+0x4c>
 8010da0:	f1a5 0408 	sub.w	r4, r5, #8
 8010da4:	444c      	add	r4, r9
 8010da6:	1b2d      	subs	r5, r5, r4
 8010da8:	1963      	adds	r3, r4, r5
 8010daa:	42bb      	cmp	r3, r7
 8010dac:	db04      	blt.n	8010db8 <__s2b+0x78>
 8010dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010db2:	340a      	adds	r4, #10
 8010db4:	2509      	movs	r5, #9
 8010db6:	e7f6      	b.n	8010da6 <__s2b+0x66>
 8010db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010dbc:	4601      	mov	r1, r0
 8010dbe:	3b30      	subs	r3, #48	@ 0x30
 8010dc0:	220a      	movs	r2, #10
 8010dc2:	4630      	mov	r0, r6
 8010dc4:	f7ff ff76 	bl	8010cb4 <__multadd>
 8010dc8:	e7ee      	b.n	8010da8 <__s2b+0x68>
 8010dca:	bf00      	nop
 8010dcc:	08012139 	.word	0x08012139
 8010dd0:	080121bb 	.word	0x080121bb

08010dd4 <__hi0bits>:
 8010dd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010dd8:	4603      	mov	r3, r0
 8010dda:	bf36      	itet	cc
 8010ddc:	0403      	lslcc	r3, r0, #16
 8010dde:	2000      	movcs	r0, #0
 8010de0:	2010      	movcc	r0, #16
 8010de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010de6:	bf3c      	itt	cc
 8010de8:	021b      	lslcc	r3, r3, #8
 8010dea:	3008      	addcc	r0, #8
 8010dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010df0:	bf3c      	itt	cc
 8010df2:	011b      	lslcc	r3, r3, #4
 8010df4:	3004      	addcc	r0, #4
 8010df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010dfa:	bf3c      	itt	cc
 8010dfc:	009b      	lslcc	r3, r3, #2
 8010dfe:	3002      	addcc	r0, #2
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	db05      	blt.n	8010e10 <__hi0bits+0x3c>
 8010e04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010e08:	f100 0001 	add.w	r0, r0, #1
 8010e0c:	bf08      	it	eq
 8010e0e:	2020      	moveq	r0, #32
 8010e10:	4770      	bx	lr

08010e12 <__lo0bits>:
 8010e12:	6803      	ldr	r3, [r0, #0]
 8010e14:	4602      	mov	r2, r0
 8010e16:	f013 0007 	ands.w	r0, r3, #7
 8010e1a:	d00b      	beq.n	8010e34 <__lo0bits+0x22>
 8010e1c:	07d9      	lsls	r1, r3, #31
 8010e1e:	d421      	bmi.n	8010e64 <__lo0bits+0x52>
 8010e20:	0798      	lsls	r0, r3, #30
 8010e22:	bf49      	itett	mi
 8010e24:	085b      	lsrmi	r3, r3, #1
 8010e26:	089b      	lsrpl	r3, r3, #2
 8010e28:	2001      	movmi	r0, #1
 8010e2a:	6013      	strmi	r3, [r2, #0]
 8010e2c:	bf5c      	itt	pl
 8010e2e:	6013      	strpl	r3, [r2, #0]
 8010e30:	2002      	movpl	r0, #2
 8010e32:	4770      	bx	lr
 8010e34:	b299      	uxth	r1, r3
 8010e36:	b909      	cbnz	r1, 8010e3c <__lo0bits+0x2a>
 8010e38:	0c1b      	lsrs	r3, r3, #16
 8010e3a:	2010      	movs	r0, #16
 8010e3c:	b2d9      	uxtb	r1, r3
 8010e3e:	b909      	cbnz	r1, 8010e44 <__lo0bits+0x32>
 8010e40:	3008      	adds	r0, #8
 8010e42:	0a1b      	lsrs	r3, r3, #8
 8010e44:	0719      	lsls	r1, r3, #28
 8010e46:	bf04      	itt	eq
 8010e48:	091b      	lsreq	r3, r3, #4
 8010e4a:	3004      	addeq	r0, #4
 8010e4c:	0799      	lsls	r1, r3, #30
 8010e4e:	bf04      	itt	eq
 8010e50:	089b      	lsreq	r3, r3, #2
 8010e52:	3002      	addeq	r0, #2
 8010e54:	07d9      	lsls	r1, r3, #31
 8010e56:	d403      	bmi.n	8010e60 <__lo0bits+0x4e>
 8010e58:	085b      	lsrs	r3, r3, #1
 8010e5a:	f100 0001 	add.w	r0, r0, #1
 8010e5e:	d003      	beq.n	8010e68 <__lo0bits+0x56>
 8010e60:	6013      	str	r3, [r2, #0]
 8010e62:	4770      	bx	lr
 8010e64:	2000      	movs	r0, #0
 8010e66:	4770      	bx	lr
 8010e68:	2020      	movs	r0, #32
 8010e6a:	4770      	bx	lr

08010e6c <__i2b>:
 8010e6c:	b510      	push	{r4, lr}
 8010e6e:	460c      	mov	r4, r1
 8010e70:	2101      	movs	r1, #1
 8010e72:	f7ff febd 	bl	8010bf0 <_Balloc>
 8010e76:	4602      	mov	r2, r0
 8010e78:	b928      	cbnz	r0, 8010e86 <__i2b+0x1a>
 8010e7a:	4b05      	ldr	r3, [pc, #20]	@ (8010e90 <__i2b+0x24>)
 8010e7c:	4805      	ldr	r0, [pc, #20]	@ (8010e94 <__i2b+0x28>)
 8010e7e:	f240 1145 	movw	r1, #325	@ 0x145
 8010e82:	f7fe fab3 	bl	800f3ec <__assert_func>
 8010e86:	2301      	movs	r3, #1
 8010e88:	6144      	str	r4, [r0, #20]
 8010e8a:	6103      	str	r3, [r0, #16]
 8010e8c:	bd10      	pop	{r4, pc}
 8010e8e:	bf00      	nop
 8010e90:	08012139 	.word	0x08012139
 8010e94:	080121bb 	.word	0x080121bb

08010e98 <__multiply>:
 8010e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	4614      	mov	r4, r2
 8010e9e:	690a      	ldr	r2, [r1, #16]
 8010ea0:	6923      	ldr	r3, [r4, #16]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	bfa8      	it	ge
 8010ea6:	4623      	movge	r3, r4
 8010ea8:	460f      	mov	r7, r1
 8010eaa:	bfa4      	itt	ge
 8010eac:	460c      	movge	r4, r1
 8010eae:	461f      	movge	r7, r3
 8010eb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010eb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010eb8:	68a3      	ldr	r3, [r4, #8]
 8010eba:	6861      	ldr	r1, [r4, #4]
 8010ebc:	eb0a 0609 	add.w	r6, sl, r9
 8010ec0:	42b3      	cmp	r3, r6
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	bfb8      	it	lt
 8010ec6:	3101      	addlt	r1, #1
 8010ec8:	f7ff fe92 	bl	8010bf0 <_Balloc>
 8010ecc:	b930      	cbnz	r0, 8010edc <__multiply+0x44>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	4b44      	ldr	r3, [pc, #272]	@ (8010fe4 <__multiply+0x14c>)
 8010ed2:	4845      	ldr	r0, [pc, #276]	@ (8010fe8 <__multiply+0x150>)
 8010ed4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010ed8:	f7fe fa88 	bl	800f3ec <__assert_func>
 8010edc:	f100 0514 	add.w	r5, r0, #20
 8010ee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010ee4:	462b      	mov	r3, r5
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	4543      	cmp	r3, r8
 8010eea:	d321      	bcc.n	8010f30 <__multiply+0x98>
 8010eec:	f107 0114 	add.w	r1, r7, #20
 8010ef0:	f104 0214 	add.w	r2, r4, #20
 8010ef4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010ef8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010efc:	9302      	str	r3, [sp, #8]
 8010efe:	1b13      	subs	r3, r2, r4
 8010f00:	3b15      	subs	r3, #21
 8010f02:	f023 0303 	bic.w	r3, r3, #3
 8010f06:	3304      	adds	r3, #4
 8010f08:	f104 0715 	add.w	r7, r4, #21
 8010f0c:	42ba      	cmp	r2, r7
 8010f0e:	bf38      	it	cc
 8010f10:	2304      	movcc	r3, #4
 8010f12:	9301      	str	r3, [sp, #4]
 8010f14:	9b02      	ldr	r3, [sp, #8]
 8010f16:	9103      	str	r1, [sp, #12]
 8010f18:	428b      	cmp	r3, r1
 8010f1a:	d80c      	bhi.n	8010f36 <__multiply+0x9e>
 8010f1c:	2e00      	cmp	r6, #0
 8010f1e:	dd03      	ble.n	8010f28 <__multiply+0x90>
 8010f20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d05b      	beq.n	8010fe0 <__multiply+0x148>
 8010f28:	6106      	str	r6, [r0, #16]
 8010f2a:	b005      	add	sp, #20
 8010f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f30:	f843 2b04 	str.w	r2, [r3], #4
 8010f34:	e7d8      	b.n	8010ee8 <__multiply+0x50>
 8010f36:	f8b1 a000 	ldrh.w	sl, [r1]
 8010f3a:	f1ba 0f00 	cmp.w	sl, #0
 8010f3e:	d024      	beq.n	8010f8a <__multiply+0xf2>
 8010f40:	f104 0e14 	add.w	lr, r4, #20
 8010f44:	46a9      	mov	r9, r5
 8010f46:	f04f 0c00 	mov.w	ip, #0
 8010f4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f4e:	f8d9 3000 	ldr.w	r3, [r9]
 8010f52:	fa1f fb87 	uxth.w	fp, r7
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	fb0a 330b 	mla	r3, sl, fp, r3
 8010f5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010f60:	f8d9 7000 	ldr.w	r7, [r9]
 8010f64:	4463      	add	r3, ip
 8010f66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010f6a:	fb0a c70b 	mla	r7, sl, fp, ip
 8010f6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010f78:	4572      	cmp	r2, lr
 8010f7a:	f849 3b04 	str.w	r3, [r9], #4
 8010f7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010f82:	d8e2      	bhi.n	8010f4a <__multiply+0xb2>
 8010f84:	9b01      	ldr	r3, [sp, #4]
 8010f86:	f845 c003 	str.w	ip, [r5, r3]
 8010f8a:	9b03      	ldr	r3, [sp, #12]
 8010f8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010f90:	3104      	adds	r1, #4
 8010f92:	f1b9 0f00 	cmp.w	r9, #0
 8010f96:	d021      	beq.n	8010fdc <__multiply+0x144>
 8010f98:	682b      	ldr	r3, [r5, #0]
 8010f9a:	f104 0c14 	add.w	ip, r4, #20
 8010f9e:	46ae      	mov	lr, r5
 8010fa0:	f04f 0a00 	mov.w	sl, #0
 8010fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8010fa8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010fac:	fb09 770b 	mla	r7, r9, fp, r7
 8010fb0:	4457      	add	r7, sl
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010fb8:	f84e 3b04 	str.w	r3, [lr], #4
 8010fbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010fc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010fc4:	f8be 3000 	ldrh.w	r3, [lr]
 8010fc8:	fb09 330a 	mla	r3, r9, sl, r3
 8010fcc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010fd0:	4562      	cmp	r2, ip
 8010fd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010fd6:	d8e5      	bhi.n	8010fa4 <__multiply+0x10c>
 8010fd8:	9f01      	ldr	r7, [sp, #4]
 8010fda:	51eb      	str	r3, [r5, r7]
 8010fdc:	3504      	adds	r5, #4
 8010fde:	e799      	b.n	8010f14 <__multiply+0x7c>
 8010fe0:	3e01      	subs	r6, #1
 8010fe2:	e79b      	b.n	8010f1c <__multiply+0x84>
 8010fe4:	08012139 	.word	0x08012139
 8010fe8:	080121bb 	.word	0x080121bb

08010fec <__pow5mult>:
 8010fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ff0:	4615      	mov	r5, r2
 8010ff2:	f012 0203 	ands.w	r2, r2, #3
 8010ff6:	4607      	mov	r7, r0
 8010ff8:	460e      	mov	r6, r1
 8010ffa:	d007      	beq.n	801100c <__pow5mult+0x20>
 8010ffc:	4c25      	ldr	r4, [pc, #148]	@ (8011094 <__pow5mult+0xa8>)
 8010ffe:	3a01      	subs	r2, #1
 8011000:	2300      	movs	r3, #0
 8011002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011006:	f7ff fe55 	bl	8010cb4 <__multadd>
 801100a:	4606      	mov	r6, r0
 801100c:	10ad      	asrs	r5, r5, #2
 801100e:	d03d      	beq.n	801108c <__pow5mult+0xa0>
 8011010:	69fc      	ldr	r4, [r7, #28]
 8011012:	b97c      	cbnz	r4, 8011034 <__pow5mult+0x48>
 8011014:	2010      	movs	r0, #16
 8011016:	f7fc fd21 	bl	800da5c <malloc>
 801101a:	4602      	mov	r2, r0
 801101c:	61f8      	str	r0, [r7, #28]
 801101e:	b928      	cbnz	r0, 801102c <__pow5mult+0x40>
 8011020:	4b1d      	ldr	r3, [pc, #116]	@ (8011098 <__pow5mult+0xac>)
 8011022:	481e      	ldr	r0, [pc, #120]	@ (801109c <__pow5mult+0xb0>)
 8011024:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011028:	f7fe f9e0 	bl	800f3ec <__assert_func>
 801102c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011030:	6004      	str	r4, [r0, #0]
 8011032:	60c4      	str	r4, [r0, #12]
 8011034:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801103c:	b94c      	cbnz	r4, 8011052 <__pow5mult+0x66>
 801103e:	f240 2171 	movw	r1, #625	@ 0x271
 8011042:	4638      	mov	r0, r7
 8011044:	f7ff ff12 	bl	8010e6c <__i2b>
 8011048:	2300      	movs	r3, #0
 801104a:	f8c8 0008 	str.w	r0, [r8, #8]
 801104e:	4604      	mov	r4, r0
 8011050:	6003      	str	r3, [r0, #0]
 8011052:	f04f 0900 	mov.w	r9, #0
 8011056:	07eb      	lsls	r3, r5, #31
 8011058:	d50a      	bpl.n	8011070 <__pow5mult+0x84>
 801105a:	4631      	mov	r1, r6
 801105c:	4622      	mov	r2, r4
 801105e:	4638      	mov	r0, r7
 8011060:	f7ff ff1a 	bl	8010e98 <__multiply>
 8011064:	4631      	mov	r1, r6
 8011066:	4680      	mov	r8, r0
 8011068:	4638      	mov	r0, r7
 801106a:	f7ff fe01 	bl	8010c70 <_Bfree>
 801106e:	4646      	mov	r6, r8
 8011070:	106d      	asrs	r5, r5, #1
 8011072:	d00b      	beq.n	801108c <__pow5mult+0xa0>
 8011074:	6820      	ldr	r0, [r4, #0]
 8011076:	b938      	cbnz	r0, 8011088 <__pow5mult+0x9c>
 8011078:	4622      	mov	r2, r4
 801107a:	4621      	mov	r1, r4
 801107c:	4638      	mov	r0, r7
 801107e:	f7ff ff0b 	bl	8010e98 <__multiply>
 8011082:	6020      	str	r0, [r4, #0]
 8011084:	f8c0 9000 	str.w	r9, [r0]
 8011088:	4604      	mov	r4, r0
 801108a:	e7e4      	b.n	8011056 <__pow5mult+0x6a>
 801108c:	4630      	mov	r0, r6
 801108e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011092:	bf00      	nop
 8011094:	08012214 	.word	0x08012214
 8011098:	080120ca 	.word	0x080120ca
 801109c:	080121bb 	.word	0x080121bb

080110a0 <__lshift>:
 80110a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a4:	460c      	mov	r4, r1
 80110a6:	6849      	ldr	r1, [r1, #4]
 80110a8:	6923      	ldr	r3, [r4, #16]
 80110aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80110ae:	68a3      	ldr	r3, [r4, #8]
 80110b0:	4607      	mov	r7, r0
 80110b2:	4691      	mov	r9, r2
 80110b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80110b8:	f108 0601 	add.w	r6, r8, #1
 80110bc:	42b3      	cmp	r3, r6
 80110be:	db0b      	blt.n	80110d8 <__lshift+0x38>
 80110c0:	4638      	mov	r0, r7
 80110c2:	f7ff fd95 	bl	8010bf0 <_Balloc>
 80110c6:	4605      	mov	r5, r0
 80110c8:	b948      	cbnz	r0, 80110de <__lshift+0x3e>
 80110ca:	4602      	mov	r2, r0
 80110cc:	4b28      	ldr	r3, [pc, #160]	@ (8011170 <__lshift+0xd0>)
 80110ce:	4829      	ldr	r0, [pc, #164]	@ (8011174 <__lshift+0xd4>)
 80110d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80110d4:	f7fe f98a 	bl	800f3ec <__assert_func>
 80110d8:	3101      	adds	r1, #1
 80110da:	005b      	lsls	r3, r3, #1
 80110dc:	e7ee      	b.n	80110bc <__lshift+0x1c>
 80110de:	2300      	movs	r3, #0
 80110e0:	f100 0114 	add.w	r1, r0, #20
 80110e4:	f100 0210 	add.w	r2, r0, #16
 80110e8:	4618      	mov	r0, r3
 80110ea:	4553      	cmp	r3, sl
 80110ec:	db33      	blt.n	8011156 <__lshift+0xb6>
 80110ee:	6920      	ldr	r0, [r4, #16]
 80110f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110f4:	f104 0314 	add.w	r3, r4, #20
 80110f8:	f019 091f 	ands.w	r9, r9, #31
 80110fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011104:	d02b      	beq.n	801115e <__lshift+0xbe>
 8011106:	f1c9 0e20 	rsb	lr, r9, #32
 801110a:	468a      	mov	sl, r1
 801110c:	2200      	movs	r2, #0
 801110e:	6818      	ldr	r0, [r3, #0]
 8011110:	fa00 f009 	lsl.w	r0, r0, r9
 8011114:	4310      	orrs	r0, r2
 8011116:	f84a 0b04 	str.w	r0, [sl], #4
 801111a:	f853 2b04 	ldr.w	r2, [r3], #4
 801111e:	459c      	cmp	ip, r3
 8011120:	fa22 f20e 	lsr.w	r2, r2, lr
 8011124:	d8f3      	bhi.n	801110e <__lshift+0x6e>
 8011126:	ebac 0304 	sub.w	r3, ip, r4
 801112a:	3b15      	subs	r3, #21
 801112c:	f023 0303 	bic.w	r3, r3, #3
 8011130:	3304      	adds	r3, #4
 8011132:	f104 0015 	add.w	r0, r4, #21
 8011136:	4584      	cmp	ip, r0
 8011138:	bf38      	it	cc
 801113a:	2304      	movcc	r3, #4
 801113c:	50ca      	str	r2, [r1, r3]
 801113e:	b10a      	cbz	r2, 8011144 <__lshift+0xa4>
 8011140:	f108 0602 	add.w	r6, r8, #2
 8011144:	3e01      	subs	r6, #1
 8011146:	4638      	mov	r0, r7
 8011148:	612e      	str	r6, [r5, #16]
 801114a:	4621      	mov	r1, r4
 801114c:	f7ff fd90 	bl	8010c70 <_Bfree>
 8011150:	4628      	mov	r0, r5
 8011152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011156:	f842 0f04 	str.w	r0, [r2, #4]!
 801115a:	3301      	adds	r3, #1
 801115c:	e7c5      	b.n	80110ea <__lshift+0x4a>
 801115e:	3904      	subs	r1, #4
 8011160:	f853 2b04 	ldr.w	r2, [r3], #4
 8011164:	f841 2f04 	str.w	r2, [r1, #4]!
 8011168:	459c      	cmp	ip, r3
 801116a:	d8f9      	bhi.n	8011160 <__lshift+0xc0>
 801116c:	e7ea      	b.n	8011144 <__lshift+0xa4>
 801116e:	bf00      	nop
 8011170:	08012139 	.word	0x08012139
 8011174:	080121bb 	.word	0x080121bb

08011178 <__mcmp>:
 8011178:	690a      	ldr	r2, [r1, #16]
 801117a:	4603      	mov	r3, r0
 801117c:	6900      	ldr	r0, [r0, #16]
 801117e:	1a80      	subs	r0, r0, r2
 8011180:	b530      	push	{r4, r5, lr}
 8011182:	d10e      	bne.n	80111a2 <__mcmp+0x2a>
 8011184:	3314      	adds	r3, #20
 8011186:	3114      	adds	r1, #20
 8011188:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801118c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011198:	4295      	cmp	r5, r2
 801119a:	d003      	beq.n	80111a4 <__mcmp+0x2c>
 801119c:	d205      	bcs.n	80111aa <__mcmp+0x32>
 801119e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80111a2:	bd30      	pop	{r4, r5, pc}
 80111a4:	42a3      	cmp	r3, r4
 80111a6:	d3f3      	bcc.n	8011190 <__mcmp+0x18>
 80111a8:	e7fb      	b.n	80111a2 <__mcmp+0x2a>
 80111aa:	2001      	movs	r0, #1
 80111ac:	e7f9      	b.n	80111a2 <__mcmp+0x2a>
	...

080111b0 <__mdiff>:
 80111b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b4:	4689      	mov	r9, r1
 80111b6:	4606      	mov	r6, r0
 80111b8:	4611      	mov	r1, r2
 80111ba:	4648      	mov	r0, r9
 80111bc:	4614      	mov	r4, r2
 80111be:	f7ff ffdb 	bl	8011178 <__mcmp>
 80111c2:	1e05      	subs	r5, r0, #0
 80111c4:	d112      	bne.n	80111ec <__mdiff+0x3c>
 80111c6:	4629      	mov	r1, r5
 80111c8:	4630      	mov	r0, r6
 80111ca:	f7ff fd11 	bl	8010bf0 <_Balloc>
 80111ce:	4602      	mov	r2, r0
 80111d0:	b928      	cbnz	r0, 80111de <__mdiff+0x2e>
 80111d2:	4b3f      	ldr	r3, [pc, #252]	@ (80112d0 <__mdiff+0x120>)
 80111d4:	f240 2137 	movw	r1, #567	@ 0x237
 80111d8:	483e      	ldr	r0, [pc, #248]	@ (80112d4 <__mdiff+0x124>)
 80111da:	f7fe f907 	bl	800f3ec <__assert_func>
 80111de:	2301      	movs	r3, #1
 80111e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80111e4:	4610      	mov	r0, r2
 80111e6:	b003      	add	sp, #12
 80111e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ec:	bfbc      	itt	lt
 80111ee:	464b      	movlt	r3, r9
 80111f0:	46a1      	movlt	r9, r4
 80111f2:	4630      	mov	r0, r6
 80111f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80111f8:	bfba      	itte	lt
 80111fa:	461c      	movlt	r4, r3
 80111fc:	2501      	movlt	r5, #1
 80111fe:	2500      	movge	r5, #0
 8011200:	f7ff fcf6 	bl	8010bf0 <_Balloc>
 8011204:	4602      	mov	r2, r0
 8011206:	b918      	cbnz	r0, 8011210 <__mdiff+0x60>
 8011208:	4b31      	ldr	r3, [pc, #196]	@ (80112d0 <__mdiff+0x120>)
 801120a:	f240 2145 	movw	r1, #581	@ 0x245
 801120e:	e7e3      	b.n	80111d8 <__mdiff+0x28>
 8011210:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011214:	6926      	ldr	r6, [r4, #16]
 8011216:	60c5      	str	r5, [r0, #12]
 8011218:	f109 0310 	add.w	r3, r9, #16
 801121c:	f109 0514 	add.w	r5, r9, #20
 8011220:	f104 0e14 	add.w	lr, r4, #20
 8011224:	f100 0b14 	add.w	fp, r0, #20
 8011228:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801122c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011230:	9301      	str	r3, [sp, #4]
 8011232:	46d9      	mov	r9, fp
 8011234:	f04f 0c00 	mov.w	ip, #0
 8011238:	9b01      	ldr	r3, [sp, #4]
 801123a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801123e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011242:	9301      	str	r3, [sp, #4]
 8011244:	fa1f f38a 	uxth.w	r3, sl
 8011248:	4619      	mov	r1, r3
 801124a:	b283      	uxth	r3, r0
 801124c:	1acb      	subs	r3, r1, r3
 801124e:	0c00      	lsrs	r0, r0, #16
 8011250:	4463      	add	r3, ip
 8011252:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011256:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801125a:	b29b      	uxth	r3, r3
 801125c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011260:	4576      	cmp	r6, lr
 8011262:	f849 3b04 	str.w	r3, [r9], #4
 8011266:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801126a:	d8e5      	bhi.n	8011238 <__mdiff+0x88>
 801126c:	1b33      	subs	r3, r6, r4
 801126e:	3b15      	subs	r3, #21
 8011270:	f023 0303 	bic.w	r3, r3, #3
 8011274:	3415      	adds	r4, #21
 8011276:	3304      	adds	r3, #4
 8011278:	42a6      	cmp	r6, r4
 801127a:	bf38      	it	cc
 801127c:	2304      	movcc	r3, #4
 801127e:	441d      	add	r5, r3
 8011280:	445b      	add	r3, fp
 8011282:	461e      	mov	r6, r3
 8011284:	462c      	mov	r4, r5
 8011286:	4544      	cmp	r4, r8
 8011288:	d30e      	bcc.n	80112a8 <__mdiff+0xf8>
 801128a:	f108 0103 	add.w	r1, r8, #3
 801128e:	1b49      	subs	r1, r1, r5
 8011290:	f021 0103 	bic.w	r1, r1, #3
 8011294:	3d03      	subs	r5, #3
 8011296:	45a8      	cmp	r8, r5
 8011298:	bf38      	it	cc
 801129a:	2100      	movcc	r1, #0
 801129c:	440b      	add	r3, r1
 801129e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112a2:	b191      	cbz	r1, 80112ca <__mdiff+0x11a>
 80112a4:	6117      	str	r7, [r2, #16]
 80112a6:	e79d      	b.n	80111e4 <__mdiff+0x34>
 80112a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80112ac:	46e6      	mov	lr, ip
 80112ae:	0c08      	lsrs	r0, r1, #16
 80112b0:	fa1c fc81 	uxtah	ip, ip, r1
 80112b4:	4471      	add	r1, lr
 80112b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80112ba:	b289      	uxth	r1, r1
 80112bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80112c0:	f846 1b04 	str.w	r1, [r6], #4
 80112c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80112c8:	e7dd      	b.n	8011286 <__mdiff+0xd6>
 80112ca:	3f01      	subs	r7, #1
 80112cc:	e7e7      	b.n	801129e <__mdiff+0xee>
 80112ce:	bf00      	nop
 80112d0:	08012139 	.word	0x08012139
 80112d4:	080121bb 	.word	0x080121bb

080112d8 <__ulp>:
 80112d8:	b082      	sub	sp, #8
 80112da:	ed8d 0b00 	vstr	d0, [sp]
 80112de:	9a01      	ldr	r2, [sp, #4]
 80112e0:	4b0f      	ldr	r3, [pc, #60]	@ (8011320 <__ulp+0x48>)
 80112e2:	4013      	ands	r3, r2
 80112e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	dc08      	bgt.n	80112fe <__ulp+0x26>
 80112ec:	425b      	negs	r3, r3
 80112ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80112f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80112f6:	da04      	bge.n	8011302 <__ulp+0x2a>
 80112f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80112fc:	4113      	asrs	r3, r2
 80112fe:	2200      	movs	r2, #0
 8011300:	e008      	b.n	8011314 <__ulp+0x3c>
 8011302:	f1a2 0314 	sub.w	r3, r2, #20
 8011306:	2b1e      	cmp	r3, #30
 8011308:	bfda      	itte	le
 801130a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801130e:	40da      	lsrle	r2, r3
 8011310:	2201      	movgt	r2, #1
 8011312:	2300      	movs	r3, #0
 8011314:	4619      	mov	r1, r3
 8011316:	4610      	mov	r0, r2
 8011318:	ec41 0b10 	vmov	d0, r0, r1
 801131c:	b002      	add	sp, #8
 801131e:	4770      	bx	lr
 8011320:	7ff00000 	.word	0x7ff00000

08011324 <__b2d>:
 8011324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011328:	6906      	ldr	r6, [r0, #16]
 801132a:	f100 0814 	add.w	r8, r0, #20
 801132e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011332:	1f37      	subs	r7, r6, #4
 8011334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011338:	4610      	mov	r0, r2
 801133a:	f7ff fd4b 	bl	8010dd4 <__hi0bits>
 801133e:	f1c0 0320 	rsb	r3, r0, #32
 8011342:	280a      	cmp	r0, #10
 8011344:	600b      	str	r3, [r1, #0]
 8011346:	491b      	ldr	r1, [pc, #108]	@ (80113b4 <__b2d+0x90>)
 8011348:	dc15      	bgt.n	8011376 <__b2d+0x52>
 801134a:	f1c0 0c0b 	rsb	ip, r0, #11
 801134e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011352:	45b8      	cmp	r8, r7
 8011354:	ea43 0501 	orr.w	r5, r3, r1
 8011358:	bf34      	ite	cc
 801135a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801135e:	2300      	movcs	r3, #0
 8011360:	3015      	adds	r0, #21
 8011362:	fa02 f000 	lsl.w	r0, r2, r0
 8011366:	fa23 f30c 	lsr.w	r3, r3, ip
 801136a:	4303      	orrs	r3, r0
 801136c:	461c      	mov	r4, r3
 801136e:	ec45 4b10 	vmov	d0, r4, r5
 8011372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011376:	45b8      	cmp	r8, r7
 8011378:	bf3a      	itte	cc
 801137a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801137e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011382:	2300      	movcs	r3, #0
 8011384:	380b      	subs	r0, #11
 8011386:	d012      	beq.n	80113ae <__b2d+0x8a>
 8011388:	f1c0 0120 	rsb	r1, r0, #32
 801138c:	fa23 f401 	lsr.w	r4, r3, r1
 8011390:	4082      	lsls	r2, r0
 8011392:	4322      	orrs	r2, r4
 8011394:	4547      	cmp	r7, r8
 8011396:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801139a:	bf8c      	ite	hi
 801139c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80113a0:	2200      	movls	r2, #0
 80113a2:	4083      	lsls	r3, r0
 80113a4:	40ca      	lsrs	r2, r1
 80113a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80113aa:	4313      	orrs	r3, r2
 80113ac:	e7de      	b.n	801136c <__b2d+0x48>
 80113ae:	ea42 0501 	orr.w	r5, r2, r1
 80113b2:	e7db      	b.n	801136c <__b2d+0x48>
 80113b4:	3ff00000 	.word	0x3ff00000

080113b8 <__d2b>:
 80113b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80113bc:	460f      	mov	r7, r1
 80113be:	2101      	movs	r1, #1
 80113c0:	ec59 8b10 	vmov	r8, r9, d0
 80113c4:	4616      	mov	r6, r2
 80113c6:	f7ff fc13 	bl	8010bf0 <_Balloc>
 80113ca:	4604      	mov	r4, r0
 80113cc:	b930      	cbnz	r0, 80113dc <__d2b+0x24>
 80113ce:	4602      	mov	r2, r0
 80113d0:	4b23      	ldr	r3, [pc, #140]	@ (8011460 <__d2b+0xa8>)
 80113d2:	4824      	ldr	r0, [pc, #144]	@ (8011464 <__d2b+0xac>)
 80113d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80113d8:	f7fe f808 	bl	800f3ec <__assert_func>
 80113dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80113e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113e4:	b10d      	cbz	r5, 80113ea <__d2b+0x32>
 80113e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80113ea:	9301      	str	r3, [sp, #4]
 80113ec:	f1b8 0300 	subs.w	r3, r8, #0
 80113f0:	d023      	beq.n	801143a <__d2b+0x82>
 80113f2:	4668      	mov	r0, sp
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	f7ff fd0c 	bl	8010e12 <__lo0bits>
 80113fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80113fe:	b1d0      	cbz	r0, 8011436 <__d2b+0x7e>
 8011400:	f1c0 0320 	rsb	r3, r0, #32
 8011404:	fa02 f303 	lsl.w	r3, r2, r3
 8011408:	430b      	orrs	r3, r1
 801140a:	40c2      	lsrs	r2, r0
 801140c:	6163      	str	r3, [r4, #20]
 801140e:	9201      	str	r2, [sp, #4]
 8011410:	9b01      	ldr	r3, [sp, #4]
 8011412:	61a3      	str	r3, [r4, #24]
 8011414:	2b00      	cmp	r3, #0
 8011416:	bf0c      	ite	eq
 8011418:	2201      	moveq	r2, #1
 801141a:	2202      	movne	r2, #2
 801141c:	6122      	str	r2, [r4, #16]
 801141e:	b1a5      	cbz	r5, 801144a <__d2b+0x92>
 8011420:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011424:	4405      	add	r5, r0
 8011426:	603d      	str	r5, [r7, #0]
 8011428:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801142c:	6030      	str	r0, [r6, #0]
 801142e:	4620      	mov	r0, r4
 8011430:	b003      	add	sp, #12
 8011432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011436:	6161      	str	r1, [r4, #20]
 8011438:	e7ea      	b.n	8011410 <__d2b+0x58>
 801143a:	a801      	add	r0, sp, #4
 801143c:	f7ff fce9 	bl	8010e12 <__lo0bits>
 8011440:	9b01      	ldr	r3, [sp, #4]
 8011442:	6163      	str	r3, [r4, #20]
 8011444:	3020      	adds	r0, #32
 8011446:	2201      	movs	r2, #1
 8011448:	e7e8      	b.n	801141c <__d2b+0x64>
 801144a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801144e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011452:	6038      	str	r0, [r7, #0]
 8011454:	6918      	ldr	r0, [r3, #16]
 8011456:	f7ff fcbd 	bl	8010dd4 <__hi0bits>
 801145a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801145e:	e7e5      	b.n	801142c <__d2b+0x74>
 8011460:	08012139 	.word	0x08012139
 8011464:	080121bb 	.word	0x080121bb

08011468 <__ratio>:
 8011468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146c:	b085      	sub	sp, #20
 801146e:	e9cd 1000 	strd	r1, r0, [sp]
 8011472:	a902      	add	r1, sp, #8
 8011474:	f7ff ff56 	bl	8011324 <__b2d>
 8011478:	9800      	ldr	r0, [sp, #0]
 801147a:	a903      	add	r1, sp, #12
 801147c:	ec55 4b10 	vmov	r4, r5, d0
 8011480:	f7ff ff50 	bl	8011324 <__b2d>
 8011484:	9b01      	ldr	r3, [sp, #4]
 8011486:	6919      	ldr	r1, [r3, #16]
 8011488:	9b00      	ldr	r3, [sp, #0]
 801148a:	691b      	ldr	r3, [r3, #16]
 801148c:	1ac9      	subs	r1, r1, r3
 801148e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011492:	1a9b      	subs	r3, r3, r2
 8011494:	ec5b ab10 	vmov	sl, fp, d0
 8011498:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801149c:	2b00      	cmp	r3, #0
 801149e:	bfce      	itee	gt
 80114a0:	462a      	movgt	r2, r5
 80114a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80114a6:	465a      	movle	r2, fp
 80114a8:	462f      	mov	r7, r5
 80114aa:	46d9      	mov	r9, fp
 80114ac:	bfcc      	ite	gt
 80114ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80114b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80114b6:	464b      	mov	r3, r9
 80114b8:	4652      	mov	r2, sl
 80114ba:	4620      	mov	r0, r4
 80114bc:	4639      	mov	r1, r7
 80114be:	f7ef f9ed 	bl	800089c <__aeabi_ddiv>
 80114c2:	ec41 0b10 	vmov	d0, r0, r1
 80114c6:	b005      	add	sp, #20
 80114c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114cc <__copybits>:
 80114cc:	3901      	subs	r1, #1
 80114ce:	b570      	push	{r4, r5, r6, lr}
 80114d0:	1149      	asrs	r1, r1, #5
 80114d2:	6914      	ldr	r4, [r2, #16]
 80114d4:	3101      	adds	r1, #1
 80114d6:	f102 0314 	add.w	r3, r2, #20
 80114da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80114de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80114e2:	1f05      	subs	r5, r0, #4
 80114e4:	42a3      	cmp	r3, r4
 80114e6:	d30c      	bcc.n	8011502 <__copybits+0x36>
 80114e8:	1aa3      	subs	r3, r4, r2
 80114ea:	3b11      	subs	r3, #17
 80114ec:	f023 0303 	bic.w	r3, r3, #3
 80114f0:	3211      	adds	r2, #17
 80114f2:	42a2      	cmp	r2, r4
 80114f4:	bf88      	it	hi
 80114f6:	2300      	movhi	r3, #0
 80114f8:	4418      	add	r0, r3
 80114fa:	2300      	movs	r3, #0
 80114fc:	4288      	cmp	r0, r1
 80114fe:	d305      	bcc.n	801150c <__copybits+0x40>
 8011500:	bd70      	pop	{r4, r5, r6, pc}
 8011502:	f853 6b04 	ldr.w	r6, [r3], #4
 8011506:	f845 6f04 	str.w	r6, [r5, #4]!
 801150a:	e7eb      	b.n	80114e4 <__copybits+0x18>
 801150c:	f840 3b04 	str.w	r3, [r0], #4
 8011510:	e7f4      	b.n	80114fc <__copybits+0x30>

08011512 <__any_on>:
 8011512:	f100 0214 	add.w	r2, r0, #20
 8011516:	6900      	ldr	r0, [r0, #16]
 8011518:	114b      	asrs	r3, r1, #5
 801151a:	4298      	cmp	r0, r3
 801151c:	b510      	push	{r4, lr}
 801151e:	db11      	blt.n	8011544 <__any_on+0x32>
 8011520:	dd0a      	ble.n	8011538 <__any_on+0x26>
 8011522:	f011 011f 	ands.w	r1, r1, #31
 8011526:	d007      	beq.n	8011538 <__any_on+0x26>
 8011528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801152c:	fa24 f001 	lsr.w	r0, r4, r1
 8011530:	fa00 f101 	lsl.w	r1, r0, r1
 8011534:	428c      	cmp	r4, r1
 8011536:	d10b      	bne.n	8011550 <__any_on+0x3e>
 8011538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801153c:	4293      	cmp	r3, r2
 801153e:	d803      	bhi.n	8011548 <__any_on+0x36>
 8011540:	2000      	movs	r0, #0
 8011542:	bd10      	pop	{r4, pc}
 8011544:	4603      	mov	r3, r0
 8011546:	e7f7      	b.n	8011538 <__any_on+0x26>
 8011548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801154c:	2900      	cmp	r1, #0
 801154e:	d0f5      	beq.n	801153c <__any_on+0x2a>
 8011550:	2001      	movs	r0, #1
 8011552:	e7f6      	b.n	8011542 <__any_on+0x30>

08011554 <__sread>:
 8011554:	b510      	push	{r4, lr}
 8011556:	460c      	mov	r4, r1
 8011558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801155c:	f000 f9e0 	bl	8011920 <_read_r>
 8011560:	2800      	cmp	r0, #0
 8011562:	bfab      	itete	ge
 8011564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011566:	89a3      	ldrhlt	r3, [r4, #12]
 8011568:	181b      	addge	r3, r3, r0
 801156a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801156e:	bfac      	ite	ge
 8011570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011572:	81a3      	strhlt	r3, [r4, #12]
 8011574:	bd10      	pop	{r4, pc}

08011576 <__swrite>:
 8011576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801157a:	461f      	mov	r7, r3
 801157c:	898b      	ldrh	r3, [r1, #12]
 801157e:	05db      	lsls	r3, r3, #23
 8011580:	4605      	mov	r5, r0
 8011582:	460c      	mov	r4, r1
 8011584:	4616      	mov	r6, r2
 8011586:	d505      	bpl.n	8011594 <__swrite+0x1e>
 8011588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801158c:	2302      	movs	r3, #2
 801158e:	2200      	movs	r2, #0
 8011590:	f000 f9b4 	bl	80118fc <_lseek_r>
 8011594:	89a3      	ldrh	r3, [r4, #12]
 8011596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801159a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801159e:	81a3      	strh	r3, [r4, #12]
 80115a0:	4632      	mov	r2, r6
 80115a2:	463b      	mov	r3, r7
 80115a4:	4628      	mov	r0, r5
 80115a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115aa:	f000 b9cb 	b.w	8011944 <_write_r>

080115ae <__sseek>:
 80115ae:	b510      	push	{r4, lr}
 80115b0:	460c      	mov	r4, r1
 80115b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b6:	f000 f9a1 	bl	80118fc <_lseek_r>
 80115ba:	1c43      	adds	r3, r0, #1
 80115bc:	89a3      	ldrh	r3, [r4, #12]
 80115be:	bf15      	itete	ne
 80115c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80115c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80115c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80115ca:	81a3      	strheq	r3, [r4, #12]
 80115cc:	bf18      	it	ne
 80115ce:	81a3      	strhne	r3, [r4, #12]
 80115d0:	bd10      	pop	{r4, pc}

080115d2 <__sclose>:
 80115d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115d6:	f000 b95f 	b.w	8011898 <_close_r>
	...

080115dc <fiprintf>:
 80115dc:	b40e      	push	{r1, r2, r3}
 80115de:	b503      	push	{r0, r1, lr}
 80115e0:	4601      	mov	r1, r0
 80115e2:	ab03      	add	r3, sp, #12
 80115e4:	4805      	ldr	r0, [pc, #20]	@ (80115fc <fiprintf+0x20>)
 80115e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ea:	6800      	ldr	r0, [r0, #0]
 80115ec:	9301      	str	r3, [sp, #4]
 80115ee:	f000 f9ff 	bl	80119f0 <_vfiprintf_r>
 80115f2:	b002      	add	sp, #8
 80115f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80115f8:	b003      	add	sp, #12
 80115fa:	4770      	bx	lr
 80115fc:	200001a4 	.word	0x200001a4

08011600 <_realloc_r>:
 8011600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011604:	4680      	mov	r8, r0
 8011606:	4615      	mov	r5, r2
 8011608:	460c      	mov	r4, r1
 801160a:	b921      	cbnz	r1, 8011616 <_realloc_r+0x16>
 801160c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011610:	4611      	mov	r1, r2
 8011612:	f7fc ba4d 	b.w	800dab0 <_malloc_r>
 8011616:	b92a      	cbnz	r2, 8011624 <_realloc_r+0x24>
 8011618:	f7fe fd52 	bl	80100c0 <_free_r>
 801161c:	2400      	movs	r4, #0
 801161e:	4620      	mov	r0, r4
 8011620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011624:	f000 fafc 	bl	8011c20 <_malloc_usable_size_r>
 8011628:	4285      	cmp	r5, r0
 801162a:	4606      	mov	r6, r0
 801162c:	d802      	bhi.n	8011634 <_realloc_r+0x34>
 801162e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011632:	d8f4      	bhi.n	801161e <_realloc_r+0x1e>
 8011634:	4629      	mov	r1, r5
 8011636:	4640      	mov	r0, r8
 8011638:	f7fc fa3a 	bl	800dab0 <_malloc_r>
 801163c:	4607      	mov	r7, r0
 801163e:	2800      	cmp	r0, #0
 8011640:	d0ec      	beq.n	801161c <_realloc_r+0x1c>
 8011642:	42b5      	cmp	r5, r6
 8011644:	462a      	mov	r2, r5
 8011646:	4621      	mov	r1, r4
 8011648:	bf28      	it	cs
 801164a:	4632      	movcs	r2, r6
 801164c:	f7fd feb1 	bl	800f3b2 <memcpy>
 8011650:	4621      	mov	r1, r4
 8011652:	4640      	mov	r0, r8
 8011654:	f7fe fd34 	bl	80100c0 <_free_r>
 8011658:	463c      	mov	r4, r7
 801165a:	e7e0      	b.n	801161e <_realloc_r+0x1e>

0801165c <__swbuf_r>:
 801165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165e:	460e      	mov	r6, r1
 8011660:	4614      	mov	r4, r2
 8011662:	4605      	mov	r5, r0
 8011664:	b118      	cbz	r0, 801166e <__swbuf_r+0x12>
 8011666:	6a03      	ldr	r3, [r0, #32]
 8011668:	b90b      	cbnz	r3, 801166e <__swbuf_r+0x12>
 801166a:	f7fc ff2f 	bl	800e4cc <__sinit>
 801166e:	69a3      	ldr	r3, [r4, #24]
 8011670:	60a3      	str	r3, [r4, #8]
 8011672:	89a3      	ldrh	r3, [r4, #12]
 8011674:	071a      	lsls	r2, r3, #28
 8011676:	d501      	bpl.n	801167c <__swbuf_r+0x20>
 8011678:	6923      	ldr	r3, [r4, #16]
 801167a:	b943      	cbnz	r3, 801168e <__swbuf_r+0x32>
 801167c:	4621      	mov	r1, r4
 801167e:	4628      	mov	r0, r5
 8011680:	f000 f82a 	bl	80116d8 <__swsetup_r>
 8011684:	b118      	cbz	r0, 801168e <__swbuf_r+0x32>
 8011686:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801168a:	4638      	mov	r0, r7
 801168c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801168e:	6823      	ldr	r3, [r4, #0]
 8011690:	6922      	ldr	r2, [r4, #16]
 8011692:	1a98      	subs	r0, r3, r2
 8011694:	6963      	ldr	r3, [r4, #20]
 8011696:	b2f6      	uxtb	r6, r6
 8011698:	4283      	cmp	r3, r0
 801169a:	4637      	mov	r7, r6
 801169c:	dc05      	bgt.n	80116aa <__swbuf_r+0x4e>
 801169e:	4621      	mov	r1, r4
 80116a0:	4628      	mov	r0, r5
 80116a2:	f7ff fa7d 	bl	8010ba0 <_fflush_r>
 80116a6:	2800      	cmp	r0, #0
 80116a8:	d1ed      	bne.n	8011686 <__swbuf_r+0x2a>
 80116aa:	68a3      	ldr	r3, [r4, #8]
 80116ac:	3b01      	subs	r3, #1
 80116ae:	60a3      	str	r3, [r4, #8]
 80116b0:	6823      	ldr	r3, [r4, #0]
 80116b2:	1c5a      	adds	r2, r3, #1
 80116b4:	6022      	str	r2, [r4, #0]
 80116b6:	701e      	strb	r6, [r3, #0]
 80116b8:	6962      	ldr	r2, [r4, #20]
 80116ba:	1c43      	adds	r3, r0, #1
 80116bc:	429a      	cmp	r2, r3
 80116be:	d004      	beq.n	80116ca <__swbuf_r+0x6e>
 80116c0:	89a3      	ldrh	r3, [r4, #12]
 80116c2:	07db      	lsls	r3, r3, #31
 80116c4:	d5e1      	bpl.n	801168a <__swbuf_r+0x2e>
 80116c6:	2e0a      	cmp	r6, #10
 80116c8:	d1df      	bne.n	801168a <__swbuf_r+0x2e>
 80116ca:	4621      	mov	r1, r4
 80116cc:	4628      	mov	r0, r5
 80116ce:	f7ff fa67 	bl	8010ba0 <_fflush_r>
 80116d2:	2800      	cmp	r0, #0
 80116d4:	d0d9      	beq.n	801168a <__swbuf_r+0x2e>
 80116d6:	e7d6      	b.n	8011686 <__swbuf_r+0x2a>

080116d8 <__swsetup_r>:
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	4b29      	ldr	r3, [pc, #164]	@ (8011780 <__swsetup_r+0xa8>)
 80116dc:	4605      	mov	r5, r0
 80116de:	6818      	ldr	r0, [r3, #0]
 80116e0:	460c      	mov	r4, r1
 80116e2:	b118      	cbz	r0, 80116ec <__swsetup_r+0x14>
 80116e4:	6a03      	ldr	r3, [r0, #32]
 80116e6:	b90b      	cbnz	r3, 80116ec <__swsetup_r+0x14>
 80116e8:	f7fc fef0 	bl	800e4cc <__sinit>
 80116ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116f0:	0719      	lsls	r1, r3, #28
 80116f2:	d422      	bmi.n	801173a <__swsetup_r+0x62>
 80116f4:	06da      	lsls	r2, r3, #27
 80116f6:	d407      	bmi.n	8011708 <__swsetup_r+0x30>
 80116f8:	2209      	movs	r2, #9
 80116fa:	602a      	str	r2, [r5, #0]
 80116fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011700:	81a3      	strh	r3, [r4, #12]
 8011702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011706:	e033      	b.n	8011770 <__swsetup_r+0x98>
 8011708:	0758      	lsls	r0, r3, #29
 801170a:	d512      	bpl.n	8011732 <__swsetup_r+0x5a>
 801170c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801170e:	b141      	cbz	r1, 8011722 <__swsetup_r+0x4a>
 8011710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011714:	4299      	cmp	r1, r3
 8011716:	d002      	beq.n	801171e <__swsetup_r+0x46>
 8011718:	4628      	mov	r0, r5
 801171a:	f7fe fcd1 	bl	80100c0 <_free_r>
 801171e:	2300      	movs	r3, #0
 8011720:	6363      	str	r3, [r4, #52]	@ 0x34
 8011722:	89a3      	ldrh	r3, [r4, #12]
 8011724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011728:	81a3      	strh	r3, [r4, #12]
 801172a:	2300      	movs	r3, #0
 801172c:	6063      	str	r3, [r4, #4]
 801172e:	6923      	ldr	r3, [r4, #16]
 8011730:	6023      	str	r3, [r4, #0]
 8011732:	89a3      	ldrh	r3, [r4, #12]
 8011734:	f043 0308 	orr.w	r3, r3, #8
 8011738:	81a3      	strh	r3, [r4, #12]
 801173a:	6923      	ldr	r3, [r4, #16]
 801173c:	b94b      	cbnz	r3, 8011752 <__swsetup_r+0x7a>
 801173e:	89a3      	ldrh	r3, [r4, #12]
 8011740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011748:	d003      	beq.n	8011752 <__swsetup_r+0x7a>
 801174a:	4621      	mov	r1, r4
 801174c:	4628      	mov	r0, r5
 801174e:	f000 f84c 	bl	80117ea <__smakebuf_r>
 8011752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011756:	f013 0201 	ands.w	r2, r3, #1
 801175a:	d00a      	beq.n	8011772 <__swsetup_r+0x9a>
 801175c:	2200      	movs	r2, #0
 801175e:	60a2      	str	r2, [r4, #8]
 8011760:	6962      	ldr	r2, [r4, #20]
 8011762:	4252      	negs	r2, r2
 8011764:	61a2      	str	r2, [r4, #24]
 8011766:	6922      	ldr	r2, [r4, #16]
 8011768:	b942      	cbnz	r2, 801177c <__swsetup_r+0xa4>
 801176a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801176e:	d1c5      	bne.n	80116fc <__swsetup_r+0x24>
 8011770:	bd38      	pop	{r3, r4, r5, pc}
 8011772:	0799      	lsls	r1, r3, #30
 8011774:	bf58      	it	pl
 8011776:	6962      	ldrpl	r2, [r4, #20]
 8011778:	60a2      	str	r2, [r4, #8]
 801177a:	e7f4      	b.n	8011766 <__swsetup_r+0x8e>
 801177c:	2000      	movs	r0, #0
 801177e:	e7f7      	b.n	8011770 <__swsetup_r+0x98>
 8011780:	200001a4 	.word	0x200001a4

08011784 <__ascii_wctomb>:
 8011784:	4603      	mov	r3, r0
 8011786:	4608      	mov	r0, r1
 8011788:	b141      	cbz	r1, 801179c <__ascii_wctomb+0x18>
 801178a:	2aff      	cmp	r2, #255	@ 0xff
 801178c:	d904      	bls.n	8011798 <__ascii_wctomb+0x14>
 801178e:	228a      	movs	r2, #138	@ 0x8a
 8011790:	601a      	str	r2, [r3, #0]
 8011792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011796:	4770      	bx	lr
 8011798:	700a      	strb	r2, [r1, #0]
 801179a:	2001      	movs	r0, #1
 801179c:	4770      	bx	lr

0801179e <__swhatbuf_r>:
 801179e:	b570      	push	{r4, r5, r6, lr}
 80117a0:	460c      	mov	r4, r1
 80117a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a6:	2900      	cmp	r1, #0
 80117a8:	b096      	sub	sp, #88	@ 0x58
 80117aa:	4615      	mov	r5, r2
 80117ac:	461e      	mov	r6, r3
 80117ae:	da0d      	bge.n	80117cc <__swhatbuf_r+0x2e>
 80117b0:	89a3      	ldrh	r3, [r4, #12]
 80117b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80117b6:	f04f 0100 	mov.w	r1, #0
 80117ba:	bf14      	ite	ne
 80117bc:	2340      	movne	r3, #64	@ 0x40
 80117be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80117c2:	2000      	movs	r0, #0
 80117c4:	6031      	str	r1, [r6, #0]
 80117c6:	602b      	str	r3, [r5, #0]
 80117c8:	b016      	add	sp, #88	@ 0x58
 80117ca:	bd70      	pop	{r4, r5, r6, pc}
 80117cc:	466a      	mov	r2, sp
 80117ce:	f000 f873 	bl	80118b8 <_fstat_r>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	dbec      	blt.n	80117b0 <__swhatbuf_r+0x12>
 80117d6:	9901      	ldr	r1, [sp, #4]
 80117d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80117dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80117e0:	4259      	negs	r1, r3
 80117e2:	4159      	adcs	r1, r3
 80117e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80117e8:	e7eb      	b.n	80117c2 <__swhatbuf_r+0x24>

080117ea <__smakebuf_r>:
 80117ea:	898b      	ldrh	r3, [r1, #12]
 80117ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117ee:	079d      	lsls	r5, r3, #30
 80117f0:	4606      	mov	r6, r0
 80117f2:	460c      	mov	r4, r1
 80117f4:	d507      	bpl.n	8011806 <__smakebuf_r+0x1c>
 80117f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80117fa:	6023      	str	r3, [r4, #0]
 80117fc:	6123      	str	r3, [r4, #16]
 80117fe:	2301      	movs	r3, #1
 8011800:	6163      	str	r3, [r4, #20]
 8011802:	b003      	add	sp, #12
 8011804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011806:	ab01      	add	r3, sp, #4
 8011808:	466a      	mov	r2, sp
 801180a:	f7ff ffc8 	bl	801179e <__swhatbuf_r>
 801180e:	9f00      	ldr	r7, [sp, #0]
 8011810:	4605      	mov	r5, r0
 8011812:	4639      	mov	r1, r7
 8011814:	4630      	mov	r0, r6
 8011816:	f7fc f94b 	bl	800dab0 <_malloc_r>
 801181a:	b948      	cbnz	r0, 8011830 <__smakebuf_r+0x46>
 801181c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011820:	059a      	lsls	r2, r3, #22
 8011822:	d4ee      	bmi.n	8011802 <__smakebuf_r+0x18>
 8011824:	f023 0303 	bic.w	r3, r3, #3
 8011828:	f043 0302 	orr.w	r3, r3, #2
 801182c:	81a3      	strh	r3, [r4, #12]
 801182e:	e7e2      	b.n	80117f6 <__smakebuf_r+0xc>
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	6020      	str	r0, [r4, #0]
 8011834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011838:	81a3      	strh	r3, [r4, #12]
 801183a:	9b01      	ldr	r3, [sp, #4]
 801183c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011840:	b15b      	cbz	r3, 801185a <__smakebuf_r+0x70>
 8011842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011846:	4630      	mov	r0, r6
 8011848:	f000 f848 	bl	80118dc <_isatty_r>
 801184c:	b128      	cbz	r0, 801185a <__smakebuf_r+0x70>
 801184e:	89a3      	ldrh	r3, [r4, #12]
 8011850:	f023 0303 	bic.w	r3, r3, #3
 8011854:	f043 0301 	orr.w	r3, r3, #1
 8011858:	81a3      	strh	r3, [r4, #12]
 801185a:	89a3      	ldrh	r3, [r4, #12]
 801185c:	431d      	orrs	r5, r3
 801185e:	81a5      	strh	r5, [r4, #12]
 8011860:	e7cf      	b.n	8011802 <__smakebuf_r+0x18>

08011862 <memmove>:
 8011862:	4288      	cmp	r0, r1
 8011864:	b510      	push	{r4, lr}
 8011866:	eb01 0402 	add.w	r4, r1, r2
 801186a:	d902      	bls.n	8011872 <memmove+0x10>
 801186c:	4284      	cmp	r4, r0
 801186e:	4623      	mov	r3, r4
 8011870:	d807      	bhi.n	8011882 <memmove+0x20>
 8011872:	1e43      	subs	r3, r0, #1
 8011874:	42a1      	cmp	r1, r4
 8011876:	d008      	beq.n	801188a <memmove+0x28>
 8011878:	f811 2b01 	ldrb.w	r2, [r1], #1
 801187c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011880:	e7f8      	b.n	8011874 <memmove+0x12>
 8011882:	4402      	add	r2, r0
 8011884:	4601      	mov	r1, r0
 8011886:	428a      	cmp	r2, r1
 8011888:	d100      	bne.n	801188c <memmove+0x2a>
 801188a:	bd10      	pop	{r4, pc}
 801188c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011890:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011894:	e7f7      	b.n	8011886 <memmove+0x24>
	...

08011898 <_close_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4d06      	ldr	r5, [pc, #24]	@ (80118b4 <_close_r+0x1c>)
 801189c:	2300      	movs	r3, #0
 801189e:	4604      	mov	r4, r0
 80118a0:	4608      	mov	r0, r1
 80118a2:	602b      	str	r3, [r5, #0]
 80118a4:	f7f1 fab8 	bl	8002e18 <_close>
 80118a8:	1c43      	adds	r3, r0, #1
 80118aa:	d102      	bne.n	80118b2 <_close_r+0x1a>
 80118ac:	682b      	ldr	r3, [r5, #0]
 80118ae:	b103      	cbz	r3, 80118b2 <_close_r+0x1a>
 80118b0:	6023      	str	r3, [r4, #0]
 80118b2:	bd38      	pop	{r3, r4, r5, pc}
 80118b4:	200014f8 	.word	0x200014f8

080118b8 <_fstat_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4d07      	ldr	r5, [pc, #28]	@ (80118d8 <_fstat_r+0x20>)
 80118bc:	2300      	movs	r3, #0
 80118be:	4604      	mov	r4, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	4611      	mov	r1, r2
 80118c4:	602b      	str	r3, [r5, #0]
 80118c6:	f7f1 fab3 	bl	8002e30 <_fstat>
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	d102      	bne.n	80118d4 <_fstat_r+0x1c>
 80118ce:	682b      	ldr	r3, [r5, #0]
 80118d0:	b103      	cbz	r3, 80118d4 <_fstat_r+0x1c>
 80118d2:	6023      	str	r3, [r4, #0]
 80118d4:	bd38      	pop	{r3, r4, r5, pc}
 80118d6:	bf00      	nop
 80118d8:	200014f8 	.word	0x200014f8

080118dc <_isatty_r>:
 80118dc:	b538      	push	{r3, r4, r5, lr}
 80118de:	4d06      	ldr	r5, [pc, #24]	@ (80118f8 <_isatty_r+0x1c>)
 80118e0:	2300      	movs	r3, #0
 80118e2:	4604      	mov	r4, r0
 80118e4:	4608      	mov	r0, r1
 80118e6:	602b      	str	r3, [r5, #0]
 80118e8:	f7f1 fab2 	bl	8002e50 <_isatty>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d102      	bne.n	80118f6 <_isatty_r+0x1a>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	b103      	cbz	r3, 80118f6 <_isatty_r+0x1a>
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	bd38      	pop	{r3, r4, r5, pc}
 80118f8:	200014f8 	.word	0x200014f8

080118fc <_lseek_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4d07      	ldr	r5, [pc, #28]	@ (801191c <_lseek_r+0x20>)
 8011900:	4604      	mov	r4, r0
 8011902:	4608      	mov	r0, r1
 8011904:	4611      	mov	r1, r2
 8011906:	2200      	movs	r2, #0
 8011908:	602a      	str	r2, [r5, #0]
 801190a:	461a      	mov	r2, r3
 801190c:	f7f1 faab 	bl	8002e66 <_lseek>
 8011910:	1c43      	adds	r3, r0, #1
 8011912:	d102      	bne.n	801191a <_lseek_r+0x1e>
 8011914:	682b      	ldr	r3, [r5, #0]
 8011916:	b103      	cbz	r3, 801191a <_lseek_r+0x1e>
 8011918:	6023      	str	r3, [r4, #0]
 801191a:	bd38      	pop	{r3, r4, r5, pc}
 801191c:	200014f8 	.word	0x200014f8

08011920 <_read_r>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	4d07      	ldr	r5, [pc, #28]	@ (8011940 <_read_r+0x20>)
 8011924:	4604      	mov	r4, r0
 8011926:	4608      	mov	r0, r1
 8011928:	4611      	mov	r1, r2
 801192a:	2200      	movs	r2, #0
 801192c:	602a      	str	r2, [r5, #0]
 801192e:	461a      	mov	r2, r3
 8011930:	f7f1 fa39 	bl	8002da6 <_read>
 8011934:	1c43      	adds	r3, r0, #1
 8011936:	d102      	bne.n	801193e <_read_r+0x1e>
 8011938:	682b      	ldr	r3, [r5, #0]
 801193a:	b103      	cbz	r3, 801193e <_read_r+0x1e>
 801193c:	6023      	str	r3, [r4, #0]
 801193e:	bd38      	pop	{r3, r4, r5, pc}
 8011940:	200014f8 	.word	0x200014f8

08011944 <_write_r>:
 8011944:	b538      	push	{r3, r4, r5, lr}
 8011946:	4d07      	ldr	r5, [pc, #28]	@ (8011964 <_write_r+0x20>)
 8011948:	4604      	mov	r4, r0
 801194a:	4608      	mov	r0, r1
 801194c:	4611      	mov	r1, r2
 801194e:	2200      	movs	r2, #0
 8011950:	602a      	str	r2, [r5, #0]
 8011952:	461a      	mov	r2, r3
 8011954:	f7f1 fa44 	bl	8002de0 <_write>
 8011958:	1c43      	adds	r3, r0, #1
 801195a:	d102      	bne.n	8011962 <_write_r+0x1e>
 801195c:	682b      	ldr	r3, [r5, #0]
 801195e:	b103      	cbz	r3, 8011962 <_write_r+0x1e>
 8011960:	6023      	str	r3, [r4, #0]
 8011962:	bd38      	pop	{r3, r4, r5, pc}
 8011964:	200014f8 	.word	0x200014f8

08011968 <abort>:
 8011968:	b508      	push	{r3, lr}
 801196a:	2006      	movs	r0, #6
 801196c:	f000 f988 	bl	8011c80 <raise>
 8011970:	2001      	movs	r0, #1
 8011972:	f7f1 fa0d 	bl	8002d90 <_exit>

08011976 <_calloc_r>:
 8011976:	b570      	push	{r4, r5, r6, lr}
 8011978:	fba1 5402 	umull	r5, r4, r1, r2
 801197c:	b93c      	cbnz	r4, 801198e <_calloc_r+0x18>
 801197e:	4629      	mov	r1, r5
 8011980:	f7fc f896 	bl	800dab0 <_malloc_r>
 8011984:	4606      	mov	r6, r0
 8011986:	b928      	cbnz	r0, 8011994 <_calloc_r+0x1e>
 8011988:	2600      	movs	r6, #0
 801198a:	4630      	mov	r0, r6
 801198c:	bd70      	pop	{r4, r5, r6, pc}
 801198e:	220c      	movs	r2, #12
 8011990:	6002      	str	r2, [r0, #0]
 8011992:	e7f9      	b.n	8011988 <_calloc_r+0x12>
 8011994:	462a      	mov	r2, r5
 8011996:	4621      	mov	r1, r4
 8011998:	f7fd fcc2 	bl	800f320 <memset>
 801199c:	e7f5      	b.n	801198a <_calloc_r+0x14>

0801199e <__sfputc_r>:
 801199e:	6893      	ldr	r3, [r2, #8]
 80119a0:	3b01      	subs	r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	b410      	push	{r4}
 80119a6:	6093      	str	r3, [r2, #8]
 80119a8:	da08      	bge.n	80119bc <__sfputc_r+0x1e>
 80119aa:	6994      	ldr	r4, [r2, #24]
 80119ac:	42a3      	cmp	r3, r4
 80119ae:	db01      	blt.n	80119b4 <__sfputc_r+0x16>
 80119b0:	290a      	cmp	r1, #10
 80119b2:	d103      	bne.n	80119bc <__sfputc_r+0x1e>
 80119b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b8:	f7ff be50 	b.w	801165c <__swbuf_r>
 80119bc:	6813      	ldr	r3, [r2, #0]
 80119be:	1c58      	adds	r0, r3, #1
 80119c0:	6010      	str	r0, [r2, #0]
 80119c2:	7019      	strb	r1, [r3, #0]
 80119c4:	4608      	mov	r0, r1
 80119c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119ca:	4770      	bx	lr

080119cc <__sfputs_r>:
 80119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ce:	4606      	mov	r6, r0
 80119d0:	460f      	mov	r7, r1
 80119d2:	4614      	mov	r4, r2
 80119d4:	18d5      	adds	r5, r2, r3
 80119d6:	42ac      	cmp	r4, r5
 80119d8:	d101      	bne.n	80119de <__sfputs_r+0x12>
 80119da:	2000      	movs	r0, #0
 80119dc:	e007      	b.n	80119ee <__sfputs_r+0x22>
 80119de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119e2:	463a      	mov	r2, r7
 80119e4:	4630      	mov	r0, r6
 80119e6:	f7ff ffda 	bl	801199e <__sfputc_r>
 80119ea:	1c43      	adds	r3, r0, #1
 80119ec:	d1f3      	bne.n	80119d6 <__sfputs_r+0xa>
 80119ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119f0 <_vfiprintf_r>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	460d      	mov	r5, r1
 80119f6:	b09d      	sub	sp, #116	@ 0x74
 80119f8:	4614      	mov	r4, r2
 80119fa:	4698      	mov	r8, r3
 80119fc:	4606      	mov	r6, r0
 80119fe:	b118      	cbz	r0, 8011a08 <_vfiprintf_r+0x18>
 8011a00:	6a03      	ldr	r3, [r0, #32]
 8011a02:	b90b      	cbnz	r3, 8011a08 <_vfiprintf_r+0x18>
 8011a04:	f7fc fd62 	bl	800e4cc <__sinit>
 8011a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a0a:	07d9      	lsls	r1, r3, #31
 8011a0c:	d405      	bmi.n	8011a1a <_vfiprintf_r+0x2a>
 8011a0e:	89ab      	ldrh	r3, [r5, #12]
 8011a10:	059a      	lsls	r2, r3, #22
 8011a12:	d402      	bmi.n	8011a1a <_vfiprintf_r+0x2a>
 8011a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a16:	f7fd fcca 	bl	800f3ae <__retarget_lock_acquire_recursive>
 8011a1a:	89ab      	ldrh	r3, [r5, #12]
 8011a1c:	071b      	lsls	r3, r3, #28
 8011a1e:	d501      	bpl.n	8011a24 <_vfiprintf_r+0x34>
 8011a20:	692b      	ldr	r3, [r5, #16]
 8011a22:	b99b      	cbnz	r3, 8011a4c <_vfiprintf_r+0x5c>
 8011a24:	4629      	mov	r1, r5
 8011a26:	4630      	mov	r0, r6
 8011a28:	f7ff fe56 	bl	80116d8 <__swsetup_r>
 8011a2c:	b170      	cbz	r0, 8011a4c <_vfiprintf_r+0x5c>
 8011a2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a30:	07dc      	lsls	r4, r3, #31
 8011a32:	d504      	bpl.n	8011a3e <_vfiprintf_r+0x4e>
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a38:	b01d      	add	sp, #116	@ 0x74
 8011a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3e:	89ab      	ldrh	r3, [r5, #12]
 8011a40:	0598      	lsls	r0, r3, #22
 8011a42:	d4f7      	bmi.n	8011a34 <_vfiprintf_r+0x44>
 8011a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a46:	f7fd fcb3 	bl	800f3b0 <__retarget_lock_release_recursive>
 8011a4a:	e7f3      	b.n	8011a34 <_vfiprintf_r+0x44>
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a50:	2320      	movs	r3, #32
 8011a52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a5a:	2330      	movs	r3, #48	@ 0x30
 8011a5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011c0c <_vfiprintf_r+0x21c>
 8011a60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a64:	f04f 0901 	mov.w	r9, #1
 8011a68:	4623      	mov	r3, r4
 8011a6a:	469a      	mov	sl, r3
 8011a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a70:	b10a      	cbz	r2, 8011a76 <_vfiprintf_r+0x86>
 8011a72:	2a25      	cmp	r2, #37	@ 0x25
 8011a74:	d1f9      	bne.n	8011a6a <_vfiprintf_r+0x7a>
 8011a76:	ebba 0b04 	subs.w	fp, sl, r4
 8011a7a:	d00b      	beq.n	8011a94 <_vfiprintf_r+0xa4>
 8011a7c:	465b      	mov	r3, fp
 8011a7e:	4622      	mov	r2, r4
 8011a80:	4629      	mov	r1, r5
 8011a82:	4630      	mov	r0, r6
 8011a84:	f7ff ffa2 	bl	80119cc <__sfputs_r>
 8011a88:	3001      	adds	r0, #1
 8011a8a:	f000 80a7 	beq.w	8011bdc <_vfiprintf_r+0x1ec>
 8011a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a90:	445a      	add	r2, fp
 8011a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a94:	f89a 3000 	ldrb.w	r3, [sl]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f000 809f 	beq.w	8011bdc <_vfiprintf_r+0x1ec>
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011aa8:	f10a 0a01 	add.w	sl, sl, #1
 8011aac:	9304      	str	r3, [sp, #16]
 8011aae:	9307      	str	r3, [sp, #28]
 8011ab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ab4:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ab6:	4654      	mov	r4, sl
 8011ab8:	2205      	movs	r2, #5
 8011aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011abe:	4853      	ldr	r0, [pc, #332]	@ (8011c0c <_vfiprintf_r+0x21c>)
 8011ac0:	f7ee fbae 	bl	8000220 <memchr>
 8011ac4:	9a04      	ldr	r2, [sp, #16]
 8011ac6:	b9d8      	cbnz	r0, 8011b00 <_vfiprintf_r+0x110>
 8011ac8:	06d1      	lsls	r1, r2, #27
 8011aca:	bf44      	itt	mi
 8011acc:	2320      	movmi	r3, #32
 8011ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ad2:	0713      	lsls	r3, r2, #28
 8011ad4:	bf44      	itt	mi
 8011ad6:	232b      	movmi	r3, #43	@ 0x2b
 8011ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011adc:	f89a 3000 	ldrb.w	r3, [sl]
 8011ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ae2:	d015      	beq.n	8011b10 <_vfiprintf_r+0x120>
 8011ae4:	9a07      	ldr	r2, [sp, #28]
 8011ae6:	4654      	mov	r4, sl
 8011ae8:	2000      	movs	r0, #0
 8011aea:	f04f 0c0a 	mov.w	ip, #10
 8011aee:	4621      	mov	r1, r4
 8011af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011af4:	3b30      	subs	r3, #48	@ 0x30
 8011af6:	2b09      	cmp	r3, #9
 8011af8:	d94b      	bls.n	8011b92 <_vfiprintf_r+0x1a2>
 8011afa:	b1b0      	cbz	r0, 8011b2a <_vfiprintf_r+0x13a>
 8011afc:	9207      	str	r2, [sp, #28]
 8011afe:	e014      	b.n	8011b2a <_vfiprintf_r+0x13a>
 8011b00:	eba0 0308 	sub.w	r3, r0, r8
 8011b04:	fa09 f303 	lsl.w	r3, r9, r3
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	9304      	str	r3, [sp, #16]
 8011b0c:	46a2      	mov	sl, r4
 8011b0e:	e7d2      	b.n	8011ab6 <_vfiprintf_r+0xc6>
 8011b10:	9b03      	ldr	r3, [sp, #12]
 8011b12:	1d19      	adds	r1, r3, #4
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	9103      	str	r1, [sp, #12]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	bfbb      	ittet	lt
 8011b1c:	425b      	neglt	r3, r3
 8011b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8011b22:	9307      	strge	r3, [sp, #28]
 8011b24:	9307      	strlt	r3, [sp, #28]
 8011b26:	bfb8      	it	lt
 8011b28:	9204      	strlt	r2, [sp, #16]
 8011b2a:	7823      	ldrb	r3, [r4, #0]
 8011b2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b2e:	d10a      	bne.n	8011b46 <_vfiprintf_r+0x156>
 8011b30:	7863      	ldrb	r3, [r4, #1]
 8011b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b34:	d132      	bne.n	8011b9c <_vfiprintf_r+0x1ac>
 8011b36:	9b03      	ldr	r3, [sp, #12]
 8011b38:	1d1a      	adds	r2, r3, #4
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	9203      	str	r2, [sp, #12]
 8011b3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b42:	3402      	adds	r4, #2
 8011b44:	9305      	str	r3, [sp, #20]
 8011b46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c1c <_vfiprintf_r+0x22c>
 8011b4a:	7821      	ldrb	r1, [r4, #0]
 8011b4c:	2203      	movs	r2, #3
 8011b4e:	4650      	mov	r0, sl
 8011b50:	f7ee fb66 	bl	8000220 <memchr>
 8011b54:	b138      	cbz	r0, 8011b66 <_vfiprintf_r+0x176>
 8011b56:	9b04      	ldr	r3, [sp, #16]
 8011b58:	eba0 000a 	sub.w	r0, r0, sl
 8011b5c:	2240      	movs	r2, #64	@ 0x40
 8011b5e:	4082      	lsls	r2, r0
 8011b60:	4313      	orrs	r3, r2
 8011b62:	3401      	adds	r4, #1
 8011b64:	9304      	str	r3, [sp, #16]
 8011b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b6a:	4829      	ldr	r0, [pc, #164]	@ (8011c10 <_vfiprintf_r+0x220>)
 8011b6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b70:	2206      	movs	r2, #6
 8011b72:	f7ee fb55 	bl	8000220 <memchr>
 8011b76:	2800      	cmp	r0, #0
 8011b78:	d03f      	beq.n	8011bfa <_vfiprintf_r+0x20a>
 8011b7a:	4b26      	ldr	r3, [pc, #152]	@ (8011c14 <_vfiprintf_r+0x224>)
 8011b7c:	bb1b      	cbnz	r3, 8011bc6 <_vfiprintf_r+0x1d6>
 8011b7e:	9b03      	ldr	r3, [sp, #12]
 8011b80:	3307      	adds	r3, #7
 8011b82:	f023 0307 	bic.w	r3, r3, #7
 8011b86:	3308      	adds	r3, #8
 8011b88:	9303      	str	r3, [sp, #12]
 8011b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b8c:	443b      	add	r3, r7
 8011b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b90:	e76a      	b.n	8011a68 <_vfiprintf_r+0x78>
 8011b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b96:	460c      	mov	r4, r1
 8011b98:	2001      	movs	r0, #1
 8011b9a:	e7a8      	b.n	8011aee <_vfiprintf_r+0xfe>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	3401      	adds	r4, #1
 8011ba0:	9305      	str	r3, [sp, #20]
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	f04f 0c0a 	mov.w	ip, #10
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bae:	3a30      	subs	r2, #48	@ 0x30
 8011bb0:	2a09      	cmp	r2, #9
 8011bb2:	d903      	bls.n	8011bbc <_vfiprintf_r+0x1cc>
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d0c6      	beq.n	8011b46 <_vfiprintf_r+0x156>
 8011bb8:	9105      	str	r1, [sp, #20]
 8011bba:	e7c4      	b.n	8011b46 <_vfiprintf_r+0x156>
 8011bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e7f0      	b.n	8011ba8 <_vfiprintf_r+0x1b8>
 8011bc6:	ab03      	add	r3, sp, #12
 8011bc8:	9300      	str	r3, [sp, #0]
 8011bca:	462a      	mov	r2, r5
 8011bcc:	4b12      	ldr	r3, [pc, #72]	@ (8011c18 <_vfiprintf_r+0x228>)
 8011bce:	a904      	add	r1, sp, #16
 8011bd0:	4630      	mov	r0, r6
 8011bd2:	f7fb fd19 	bl	800d608 <_printf_float>
 8011bd6:	4607      	mov	r7, r0
 8011bd8:	1c78      	adds	r0, r7, #1
 8011bda:	d1d6      	bne.n	8011b8a <_vfiprintf_r+0x19a>
 8011bdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bde:	07d9      	lsls	r1, r3, #31
 8011be0:	d405      	bmi.n	8011bee <_vfiprintf_r+0x1fe>
 8011be2:	89ab      	ldrh	r3, [r5, #12]
 8011be4:	059a      	lsls	r2, r3, #22
 8011be6:	d402      	bmi.n	8011bee <_vfiprintf_r+0x1fe>
 8011be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bea:	f7fd fbe1 	bl	800f3b0 <__retarget_lock_release_recursive>
 8011bee:	89ab      	ldrh	r3, [r5, #12]
 8011bf0:	065b      	lsls	r3, r3, #25
 8011bf2:	f53f af1f 	bmi.w	8011a34 <_vfiprintf_r+0x44>
 8011bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bf8:	e71e      	b.n	8011a38 <_vfiprintf_r+0x48>
 8011bfa:	ab03      	add	r3, sp, #12
 8011bfc:	9300      	str	r3, [sp, #0]
 8011bfe:	462a      	mov	r2, r5
 8011c00:	4b05      	ldr	r3, [pc, #20]	@ (8011c18 <_vfiprintf_r+0x228>)
 8011c02:	a904      	add	r1, sp, #16
 8011c04:	4630      	mov	r0, r6
 8011c06:	f7fc f841 	bl	800dc8c <_printf_i>
 8011c0a:	e7e4      	b.n	8011bd6 <_vfiprintf_r+0x1e6>
 8011c0c:	080121aa 	.word	0x080121aa
 8011c10:	080121b4 	.word	0x080121b4
 8011c14:	0800d609 	.word	0x0800d609
 8011c18:	080119cd 	.word	0x080119cd
 8011c1c:	080121b0 	.word	0x080121b0

08011c20 <_malloc_usable_size_r>:
 8011c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c24:	1f18      	subs	r0, r3, #4
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	bfbc      	itt	lt
 8011c2a:	580b      	ldrlt	r3, [r1, r0]
 8011c2c:	18c0      	addlt	r0, r0, r3
 8011c2e:	4770      	bx	lr

08011c30 <_raise_r>:
 8011c30:	291f      	cmp	r1, #31
 8011c32:	b538      	push	{r3, r4, r5, lr}
 8011c34:	4605      	mov	r5, r0
 8011c36:	460c      	mov	r4, r1
 8011c38:	d904      	bls.n	8011c44 <_raise_r+0x14>
 8011c3a:	2316      	movs	r3, #22
 8011c3c:	6003      	str	r3, [r0, #0]
 8011c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c42:	bd38      	pop	{r3, r4, r5, pc}
 8011c44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011c46:	b112      	cbz	r2, 8011c4e <_raise_r+0x1e>
 8011c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c4c:	b94b      	cbnz	r3, 8011c62 <_raise_r+0x32>
 8011c4e:	4628      	mov	r0, r5
 8011c50:	f000 f830 	bl	8011cb4 <_getpid_r>
 8011c54:	4622      	mov	r2, r4
 8011c56:	4601      	mov	r1, r0
 8011c58:	4628      	mov	r0, r5
 8011c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c5e:	f000 b817 	b.w	8011c90 <_kill_r>
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d00a      	beq.n	8011c7c <_raise_r+0x4c>
 8011c66:	1c59      	adds	r1, r3, #1
 8011c68:	d103      	bne.n	8011c72 <_raise_r+0x42>
 8011c6a:	2316      	movs	r3, #22
 8011c6c:	6003      	str	r3, [r0, #0]
 8011c6e:	2001      	movs	r0, #1
 8011c70:	e7e7      	b.n	8011c42 <_raise_r+0x12>
 8011c72:	2100      	movs	r1, #0
 8011c74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011c78:	4620      	mov	r0, r4
 8011c7a:	4798      	blx	r3
 8011c7c:	2000      	movs	r0, #0
 8011c7e:	e7e0      	b.n	8011c42 <_raise_r+0x12>

08011c80 <raise>:
 8011c80:	4b02      	ldr	r3, [pc, #8]	@ (8011c8c <raise+0xc>)
 8011c82:	4601      	mov	r1, r0
 8011c84:	6818      	ldr	r0, [r3, #0]
 8011c86:	f7ff bfd3 	b.w	8011c30 <_raise_r>
 8011c8a:	bf00      	nop
 8011c8c:	200001a4 	.word	0x200001a4

08011c90 <_kill_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	4d07      	ldr	r5, [pc, #28]	@ (8011cb0 <_kill_r+0x20>)
 8011c94:	2300      	movs	r3, #0
 8011c96:	4604      	mov	r4, r0
 8011c98:	4608      	mov	r0, r1
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	602b      	str	r3, [r5, #0]
 8011c9e:	f7f1 f867 	bl	8002d70 <_kill>
 8011ca2:	1c43      	adds	r3, r0, #1
 8011ca4:	d102      	bne.n	8011cac <_kill_r+0x1c>
 8011ca6:	682b      	ldr	r3, [r5, #0]
 8011ca8:	b103      	cbz	r3, 8011cac <_kill_r+0x1c>
 8011caa:	6023      	str	r3, [r4, #0]
 8011cac:	bd38      	pop	{r3, r4, r5, pc}
 8011cae:	bf00      	nop
 8011cb0:	200014f8 	.word	0x200014f8

08011cb4 <_getpid_r>:
 8011cb4:	f7f1 b854 	b.w	8002d60 <_getpid>

08011cb8 <_init>:
 8011cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cba:	bf00      	nop
 8011cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cbe:	bc08      	pop	{r3}
 8011cc0:	469e      	mov	lr, r3
 8011cc2:	4770      	bx	lr

08011cc4 <_fini>:
 8011cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cc6:	bf00      	nop
 8011cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cca:	bc08      	pop	{r3}
 8011ccc:	469e      	mov	lr, r3
 8011cce:	4770      	bx	lr
