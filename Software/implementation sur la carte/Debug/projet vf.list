
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d78  0800dd58  0800dd58  0001dd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fad0  0800fad0  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800fad0  0800fad0  0001fad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fad8  0800fad8  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fad8  0800fad8  0001fad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fadc  0800fadc  0001fadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800fae0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  20000228  0800fd08  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c78  0800fd08  00020c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154e8  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003487  00000000  00000000  00035783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00038c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d77  00000000  00000000  00039da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ff0  00000000  00000000  0003ab17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e01  00000000  00000000  0005db07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8f2c  00000000  00000000  00075908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006180  00000000  00000000  0013e834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001449b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd40 	.word	0x0800dd40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800dd40 	.word	0x0800dd40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <QMC_init>:
//code recuperer et fonctionnel, il utilise une fonction init, permettant d'initialiser le capteur correctement en ecrivant dans ces registres selon le datasheet,
//puis d'une fonction read, qui lit le capteur puis met à jour la structurede donnée

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2211      	movs	r2, #17
 8001008:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800100a:	2301      	movs	r3, #1
 800100c:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2bc8      	cmp	r3, #200	; 0xc8
 8001018:	d107      	bne.n	800102a <QMC_init+0x3a>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	b2da      	uxtb	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	711a      	strb	r2, [r3, #4]
 8001028:	e024      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d107      	bne.n	8001040 <QMC_init+0x50>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	e019      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b32      	cmp	r3, #50	; 0x32
 8001044:	d107      	bne.n	8001056 <QMC_init+0x66>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	711a      	strb	r2, [r3, #4]
 8001054:	e00e      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d104      	bne.n	8001066 <QMC_init+0x76>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	791a      	ldrb	r2, [r3, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	711a      	strb	r2, [r3, #4]
 8001064:	e006      	b.n	8001074 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	f043 030c 	orr.w	r3, r3, #12
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	220b      	movs	r2, #11
 800108a:	211a      	movs	r1, #26
 800108c:	f003 fc2e 	bl	80048ec <HAL_I2C_Mem_Write>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <QMC_init+0xaa>
 8001096:	2301      	movs	r3, #1
 8001098:	e014      	b.n	80010c4 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	3301      	adds	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2209      	movs	r2, #9
 80010b2:	211a      	movs	r1, #26
 80010b4:	f003 fc1a 	bl	80048ec <HAL_I2C_Mem_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <QMC_init+0xd2>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <QMC_init+0xd4>

	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010dc:	d104      	bne.n	80010e8 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e6:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ee:	d104      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f8:	6013      	str	r3, [r2, #0]

	}
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000690 	.word	0x20000690
 800110c:	20000694 	.word	0x20000694

08001110 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800111e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001128:	d922      	bls.n	8001170 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001132:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800113c:	4413      	add	r3, r2
 800113e:	89fa      	ldrh	r2, [r7, #14]
 8001140:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001142:	4618      	mov	r0, r3
 8001144:	f008 fda5 	bl	8009c92 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001152:	1899      	adds	r1, r3, r2
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800115a:	461a      	mov	r2, r3
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800115e:	f008 fd98 	bl	8009c92 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	e01b      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 8001178:	4413      	add	r3, r2
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 800117c:	4614      	mov	r4, r2
 800117e:	469c      	mov	ip, r3
 8001180:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001184:	4665      	mov	r5, ip
 8001186:	4626      	mov	r6, r4
 8001188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118a:	6028      	str	r0, [r5, #0]
 800118c:	6069      	str	r1, [r5, #4]
 800118e:	60aa      	str	r2, [r5, #8]
 8001190:	60eb      	str	r3, [r5, #12]
 8001192:	3410      	adds	r4, #16
 8001194:	f10c 0c10 	add.w	ip, ip, #16
 8001198:	4574      	cmp	r4, lr
 800119a:	d1f3      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3340      	adds	r3, #64	; 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 80011a6:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011ae:	f005 fa21 	bl	80065f4 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0204 	bic.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011c8:	f005 fa14 	bl	80065f4 <HAL_UART_Receive_DMA>
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	2000040a 	.word	0x2000040a
 80011d8:	20000408 	.word	0x20000408
 80011dc:	2000044c 	.word	0x2000044c
 80011e0:	2000040c 	.word	0x2000040c
 80011e4:	20000338 	.word	0x20000338
 80011e8:	200003c0 	.word	0x200003c0

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f002 fbd0 	bl	8003996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f84d 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f000 f9c9 	bl	8001590 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fe:	f000 f9a9 	bl	8001554 <MX_DMA_Init>
  MX_I2C1_Init();
 8001202:	f000 f8cd 	bl	80013a0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001206:	f000 f90b 	bl	8001420 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800120a:	f000 f977 	bl	80014fc <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 800120e:	f000 f947 	bl	80014a0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001212:	f000 f893 	bl	800133c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

	ssd1306_Init();
 8001216:	f000 fe37 	bl	8001e88 <ssd1306_Init>
	HAL_Delay(100);
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f002 fc30 	bl	8003a80 <HAL_Delay>
	ssd1306_Fill(Black);
 8001220:	2000      	movs	r0, #0
 8001222:	f000 fe9b 	bl	8001f5c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);//start screen
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <main+0x94>)
 8001232:	2120      	movs	r1, #32
 8001234:	2020      	movs	r0, #32
 8001236:	f000 ffeb 	bl	8002210 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();//demarrage des différents périphériques en i2c, qui ont besoin detre configuré
 800123a:	f000 fea7 	bl	8001f8c <ssd1306_UpdateScreen>
	QMC_init(&compasdata,&hi2c1,10);
 800123e:	220a      	movs	r2, #10
 8001240:	4910      	ldr	r1, [pc, #64]	; (8001284 <main+0x98>)
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <main+0x9c>)
 8001244:	f7ff fed4 	bl	8000ff0 <QMC_init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);//pour l'instant le gps est toujours alimenté
 8001248:	2201      	movs	r2, #1
 800124a:	2102      	movs	r1, #2
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f003 fa80 	bl	8004754 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001258:	f002 fc12 	bl	8003a80 <HAL_Delay>


	HAL_UART_Abort(&hlpuart1);
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <main+0xa0>)
 800125e:	f005 fa15 	bl	800668c <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	490a      	ldr	r1, [pc, #40]	; (8001290 <main+0xa4>)
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <main+0xa0>)
 8001268:	f005 f9c4 	bl	80065f4 <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 800126c:	2000      	movs	r0, #0
 800126e:	f000 fe75 	bl	8001f5c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001272:	f000 fe8b 	bl	8001f8c <ssd1306_UpdateScreen>

    /* USER CODE BEGIN 3 */



		statemachine();//on execute la machine à etat
 8001276:	f001 f857 	bl	8002328 <statemachine>
		ssd1306_UpdateScreen();//la machine a état ce sera occupe de mettre les choses necessaire dans le buffer du processeur necessaire a envoyer a l'ecran, il reste plus qu'a l'envoyer en i2c
 800127a:	f000 fe87 	bl	8001f8c <ssd1306_UpdateScreen>
		statemachine();//on execute la machine à etat
 800127e:	e7fa      	b.n	8001276 <main+0x8a>
 8001280:	0800dedc 	.word	0x0800dedc
 8001284:	20000258 	.word	0x20000258
 8001288:	20000b08 	.word	0x20000b08
 800128c:	20000338 	.word	0x20000338
 8001290:	2000040c 	.word	0x2000040c

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b096      	sub	sp, #88	; 0x58
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2244      	movs	r2, #68	; 0x44
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 fbd9 	bl	8009a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ba:	f003 ffd7 	bl	800526c <HAL_PWREx_ControlVoltageScaling>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012c4:	f000 f9dc 	bl	8001680 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012c8:	2310      	movs	r3, #16
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012dc:	2301      	movs	r3, #1
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012e4:	2328      	movs	r3, #40	; 0x28
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012e8:	2307      	movs	r3, #7
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 f80d 	bl	8005318 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001304:	f000 f9bc 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2303      	movs	r3, #3
 800130e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001314:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	2104      	movs	r1, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f004 fc0c 	bl	8005b40 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800132e:	f000 f9a7 	bl	8001680 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3758      	adds	r7, #88	; 0x58
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2224      	movs	r2, #36	; 0x24
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f008 fb86 	bl	8009a5a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_DAC1_Init+0x60>)
 8001352:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001356:	f002 fcc8 	bl	8003cea <HAL_DAC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001360:	f000 f98e 	bl	8001680 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001380:	f002 fcd5 	bl	8003d2e <HAL_DAC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800138a:	f000 f979 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000244 	.word	0x20000244
 800139c:	40007400 	.word	0x40007400

080013a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_I2C1_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_I2C1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <MX_I2C1_Init+0x7c>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_I2C1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <MX_I2C1_Init+0x74>)
 80013dc:	f003 f9ea 	bl	80047b4 <HAL_I2C_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013e6:	f000 f94b 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ee:	f003 fdf5 	bl	8004fdc <HAL_I2CEx_ConfigAnalogFilter>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f000 f942 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_I2C1_Init+0x74>)
 8001400:	f003 fe37 	bl	8005072 <HAL_I2CEx_ConfigDigitalFilter>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 f939 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000258 	.word	0x20000258
 8001418:	40005400 	.word	0x40005400
 800141c:	00202538 	.word	0x00202538

08001420 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_I2C3_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_I2C3_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_I2C3_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <MX_I2C3_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_I2C3_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_I2C3_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_I2C3_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_I2C3_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C3_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C3_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C3_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <MX_I2C3_Init+0x74>)
 800145c:	f003 f9aa 	bl	80047b4 <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 f90b 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_I2C3_Init+0x74>)
 800146e:	f003 fdb5 	bl	8004fdc <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 f902 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_I2C3_Init+0x74>)
 8001480:	f003 fdf7 	bl	8005072 <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f8f9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002ac 	.word	0x200002ac
 8001498:	40005c00 	.word	0x40005c00
 800149c:	00202538 	.word	0x00202538

080014a0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <MX_LPTIM1_Init+0x58>)
 80014a8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014b2:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80014b6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014e0:	f003 fe14 	bl	800510c <HAL_LPTIM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80014ea:	f000 f8c9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000300 	.word	0x20000300
 80014f8:	40007c00 	.word	0x40007c00

080014fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <MX_LPUART1_UART_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001508:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800150c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800153a:	f005 f80d 	bl	8006558 <HAL_UART_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 f89c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000338 	.word	0x20000338
 8001550:	40008000 	.word	0x40008000

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_DMA_Init+0x38>)
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <MX_DMA_Init+0x38>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6493      	str	r3, [r2, #72]	; 0x48
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_DMA_Init+0x38>)
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2045      	movs	r0, #69	; 0x45
 8001578:	f002 fb81 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 800157c:	2045      	movs	r0, #69	; 0x45
 800157e:	f002 fb9a 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a32      	ldr	r2, [pc, #200]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a26      	ldr	r2, [pc, #152]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2102      	movs	r1, #2
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f003 f8ad 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2101      	movs	r1, #1
 80015fe:	481e      	ldr	r0, [pc, #120]	; (8001678 <MX_GPIO_Init+0xe8>)
 8001600:	f003 f8a8 	bl	8004754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001604:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001610:	2302      	movs	r3, #2
 8001612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <MX_GPIO_Init+0xec>)
 800161c:	f002 ff30 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001620:	2302      	movs	r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f002 ff21 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_GPIO_Init+0xe8>)
 8001656:	f002 ff13 	bl	8004480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2028      	movs	r0, #40	; 0x28
 8001660:	f002 fb0d 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001664:	2028      	movs	r0, #40	; 0x28
 8001666:	f002 fb26 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>

0800168a <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe fdec 	bl	8000270 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	2b04      	cmp	r3, #4
 800169c:	d801      	bhi.n	80016a2 <gps_checksum+0x18>
 800169e:	2300      	movs	r3, #0
 80016a0:	e038      	b.n	8001714 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe fde4 	bl	8000270 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	3b04      	subs	r3, #4
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe fddb 	bl	8000270 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	3b03      	subs	r3, #3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e00a      	b.n	80016e6 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	4053      	eors	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3301      	adds	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe fdc2 	bl	8000270 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	1f5a      	subs	r2, r3, #5
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8ec      	bhi.n	80016d0 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2210      	movs	r2, #16
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 f9d2 	bl	8008aa8 <strtol>
 8001704:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	d101      	bne.n	8001712 <gps_checksum+0x88>
        return 1;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001712:	2300      	movs	r3, #0
    }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b0b7      	sub	sp, #220	; 0xdc
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2264      	movs	r2, #100	; 0x64
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f008 f990 	bl	8009a5a <memset>
    char *marker = strtok(inputString, ",");
 800173a:	49c2      	ldr	r1, [pc, #776]	; (8001a44 <nmea_GPGGA+0x328>)
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f008 f9a7 	bl	8009a90 <strtok>
 8001742:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001746:	e027      	b.n	8001798 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001748:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800174c:	f7fe fd90 	bl	8000270 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001758:	1c63      	adds	r3, r4, #1
 800175a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800175e:	4610      	mov	r0, r2
 8001760:	f006 f9ea 	bl	8007b38 <malloc>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	00a3      	lsls	r3, r4, #2
 800176a:	33d8      	adds	r3, #216	; 0xd8
 800176c:	443b      	add	r3, r7
 800176e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001776:	3b01      	subs	r3, #1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	33d8      	adds	r3, #216	; 0xd8
 800177c:	443b      	add	r3, r7
 800177e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001782:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001786:	4618      	mov	r0, r3
 8001788:	f008 fa7b 	bl	8009c82 <strcpy>
        marker = strtok(NULL, ",");
 800178c:	49ad      	ldr	r1, [pc, #692]	; (8001a44 <nmea_GPGGA+0x328>)
 800178e:	2000      	movs	r0, #0
 8001790:	f008 f97e 	bl	8009a90 <strtok>
 8001794:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1d3      	bne.n	8001748 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	332c      	adds	r3, #44	; 0x2c
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f008 fa62 	bl	8009c82 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80017be:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80017c2:	2b53      	cmp	r3, #83	; 0x53
 80017c4:	d004      	beq.n	80017d0 <nmea_GPGGA+0xb4>
 80017c6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80017ca:	2b4e      	cmp	r3, #78	; 0x4e
 80017cc:	f040 8159 	bne.w	8001a82 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017d6:	e010      	b.n	80017fa <nmea_GPGGA+0xde>
 80017d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017de:	4413      	add	r3, r2
 80017e0:	7819      	ldrb	r1, [r3, #0]
 80017e2:	f107 021c 	add.w	r2, r7, #28
 80017e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017ea:	4413      	add	r3, r2
 80017ec:	460a      	mov	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017f4:	3301      	adds	r3, #1
 80017f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017fe:	2b01      	cmp	r3, #1
 8001800:	ddea      	ble.n	80017d8 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001808:	e011      	b.n	800182e <nmea_GPGGA+0x112>
 800180a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800180c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001810:	3302      	adds	r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	f107 0214 	add.w	r2, r7, #20
 800181a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800181e:	4413      	add	r3, r2
 8001820:	460a      	mov	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001828:	3301      	adds	r3, #1
 800182a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800182e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001832:	2b05      	cmp	r3, #5
 8001834:	dde9      	ble.n	800180a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	220a      	movs	r2, #10
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f007 f932 	bl	8008aa8 <strtol>
 8001844:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f007 f840 	bl	80088d4 <strtof>
 8001854:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001858:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001868:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001a48 <nmea_GPGGA+0x32c>
 800186c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe66 	bl	8000548 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800188a:	e010      	b.n	80018ae <nmea_GPGGA+0x192>
 800188c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001892:	4413      	add	r3, r2
 8001894:	7819      	ldrb	r1, [r3, #0]
 8001896:	f107 0210 	add.w	r2, r7, #16
 800189a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800189e:	4413      	add	r3, r2
 80018a0:	460a      	mov	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	ddea      	ble.n	800188c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018bc:	e011      	b.n	80018e2 <nmea_GPGGA+0x1c6>
 80018be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c4:	3303      	adds	r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	7819      	ldrb	r1, [r3, #0]
 80018ca:	f107 0208 	add.w	r2, r7, #8
 80018ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018d2:	4413      	add	r3, r2
 80018d4:	460a      	mov	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	dde9      	ble.n	80018be <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	220a      	movs	r2, #10
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f007 f8d8 	bl	8008aa8 <strtol>
 80018f8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f006 ffe6 	bl	80088d4 <strtof>
 8001908:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800190c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001918:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800191c:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001a48 <nmea_GPGGA+0x32c>
 8001920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe0c 	bl	8000548 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001944:	f7ff f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d176      	bne.n	8001a3c <nmea_GPGGA+0x320>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800195a:	f7ff f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d16b      	bne.n	8001a3c <nmea_GPGGA+0x320>
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <nmea_GPGGA+0x330>)
 800196a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800196e:	f7ff f8b5 	bl	8000adc <__aeabi_dcmplt>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d061      	beq.n	8001a3c <nmea_GPGGA+0x320>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <nmea_GPGGA+0x334>)
 800197e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001982:	f7ff f8ab 	bl	8000adc <__aeabi_dcmplt>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d057      	beq.n	8001a3c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001992:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800199c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80019a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80019ae:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 ff8d 	bl	80088d4 <strtof>
 80019ba:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80019be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80019c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d102      	bne.n	80019d2 <nmea_GPGGA+0x2b6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	e001      	b.n	80019d6 <nmea_GPGGA+0x2ba>
 80019d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	220a      	movs	r2, #10
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f007 f861 	bl	8008aa8 <strtol>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80019ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ee:	220a      	movs	r2, #10
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 f858 	bl	8008aa8 <strtol>
 80019f8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80019fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfcc      	ite	gt
 8001a04:	2301      	movgt	r3, #1
 8001a06:	2300      	movle	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f006 ff5d 	bl	80088d4 <strtof>
 8001a1a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001a1e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d102      	bne.n	8001a32 <nmea_GPGGA+0x316>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	e001      	b.n	8001a36 <nmea_GPGGA+0x31a>
 8001a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001a3a:	e022      	b.n	8001a82 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a42:	e016      	b.n	8001a72 <nmea_GPGGA+0x356>
 8001a44:	0800dd58 	.word	0x0800dd58
 8001a48:	42700000 	.word	0x42700000
 8001a4c:	40568000 	.word	0x40568000
 8001a50:	40668000 	.word	0x40668000
 8001a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	33d8      	adds	r3, #216	; 0xd8
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f006 f870 	bl	8007b48 <free>
 8001a68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbea      	blt.n	8001a54 <nmea_GPGGA+0x338>
            return 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e019      	b.n	8001ab6 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a88:	e00e      	b.n	8001aa8 <nmea_GPGGA+0x38c>
 8001a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	33d8      	adds	r3, #216	; 0xd8
 8001a92:	443b      	add	r3, r7
 8001a94:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f006 f855 	bl	8007b48 <free>
 8001a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001aa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbea      	blt.n	8001a8a <nmea_GPGGA+0x36e>
    return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	37dc      	adds	r7, #220	; 0xdc
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	bf00      	nop

08001ac0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b0a3      	sub	sp, #140	; 0x8c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2264      	movs	r2, #100	; 0x64
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f007 ffbe 	bl	8009a5a <memset>
    char *marker = strtok(inputString, ",");
 8001ade:	493b      	ldr	r1, [pc, #236]	; (8001bcc <nmea_GPGSA+0x10c>)
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f007 ffd5 	bl	8009a90 <strtok>
 8001ae6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001aea:	e027      	b.n	8001b3c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001aec:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001af0:	f7fe fbbe 	bl	8000270 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001afc:	1c63      	adds	r3, r4, #1
 8001afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b02:	4610      	mov	r0, r2
 8001b04:	f006 f818 	bl	8007b38 <malloc>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	00a3      	lsls	r3, r4, #2
 8001b0e:	3388      	adds	r3, #136	; 0x88
 8001b10:	443b      	add	r3, r7
 8001b12:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3388      	adds	r3, #136	; 0x88
 8001b20:	443b      	add	r3, r7
 8001b22:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001b26:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f008 f8a9 	bl	8009c82 <strcpy>
        marker = strtok(NULL, ",");
 8001b30:	4926      	ldr	r1, [pc, #152]	; (8001bcc <nmea_GPGSA+0x10c>)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f007 ffac 	bl	8009a90 <strtok>
 8001b38:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1d3      	bne.n	8001aec <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	220a      	movs	r2, #10
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f006 ffac 	bl	8008aa8 <strtol>
 8001b50:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	bfcc      	ite	gt
 8001b58:	2301      	movgt	r3, #1
 8001b5a:	2300      	movle	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001b68:	2303      	movs	r3, #3
 8001b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b6c:	e00e      	b.n	8001b8c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3388      	adds	r3, #136	; 0x88
 8001b74:	443b      	add	r3, r7
 8001b76:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b82:	3301      	adds	r3, #1
 8001b84:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b88:	3301      	adds	r3, #1
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b8e:	2b0e      	cmp	r3, #14
 8001b90:	dded      	ble.n	8001b6e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b9c:	e00b      	b.n	8001bb6 <nmea_GPGSA+0xf6>
 8001b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3388      	adds	r3, #136	; 0x88
 8001ba4:	443b      	add	r3, r7
 8001ba6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f005 ffcc 	bl	8007b48 <free>
 8001bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
 8001bb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbee      	blt.n	8001b9e <nmea_GPGSA+0xde>
    return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	378c      	adds	r7, #140	; 0x8c
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800dd58 	.word	0x0800dd58

08001bd0 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b0a1      	sub	sp, #132	; 0x84
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2264      	movs	r2, #100	; 0x64
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f007 ff37 	bl	8009a5a <memset>
    char *marker = strtok(inputString, ",");
 8001bec:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <nmea_GNRMC+0xe0>)
 8001bee:	6838      	ldr	r0, [r7, #0]
 8001bf0:	f007 ff4e 	bl	8009a90 <strtok>
 8001bf4:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001bf6:	e021      	b.n	8001c3c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001bf8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001bfa:	f7fe fb39 	bl	8000270 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001c04:	1c63      	adds	r3, r4, #1
 8001c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f005 ff95 	bl	8007b38 <malloc>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	00a3      	lsls	r3, r4, #2
 8001c14:	3380      	adds	r3, #128	; 0x80
 8001c16:	443b      	add	r3, r7
 8001c18:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3380      	adds	r3, #128	; 0x80
 8001c24:	443b      	add	r3, r7
 8001c26:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f008 f828 	bl	8009c82 <strcpy>
        marker = strtok(NULL, ",");
 8001c32:	491f      	ldr	r1, [pc, #124]	; (8001cb0 <nmea_GNRMC+0xe0>)
 8001c34:	2000      	movs	r0, #0
 8001c36:	f007 ff2b 	bl	8009a90 <strtok>
 8001c3a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1da      	bne.n	8001bf8 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 fe44 	bl	80088d4 <strtof>
 8001c4c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001c50:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c52:	f7fe fc79 	bl	8000548 <__aeabi_f2d>
 8001c56:	a314      	add	r3, pc, #80	; (adr r3, 8001ca8 <nmea_GNRMC+0xd8>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fdf6 	bl	800084c <__aeabi_ddiv>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffbe 	bl	8000be8 <__aeabi_d2f>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001c72:	2300      	movs	r3, #0
 8001c74:	677b      	str	r3, [r7, #116]	; 0x74
 8001c76:	e00b      	b.n	8001c90 <nmea_GNRMC+0xc0>
 8001c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3380      	adds	r3, #128	; 0x80
 8001c7e:	443b      	add	r3, r7
 8001c80:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 ff5f 	bl	8007b48 <free>
 8001c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8001c90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbef      	blt.n	8001c78 <nmea_GNRMC+0xa8>
    return 1;
 8001c98:	2301      	movs	r3, #1
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3784      	adds	r7, #132	; 0x84
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	be76c8b4 	.word	0xbe76c8b4
 8001cac:	3fff1a9f 	.word	0x3fff1a9f
 8001cb0:	0800dd58 	.word	0x0800dd58

08001cb4 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001cbe:	223c      	movs	r2, #60	; 0x3c
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	484e      	ldr	r0, [pc, #312]	; (8001dfc <nmea_parse+0x148>)
 8001cc4:	f007 fec9 	bl	8009a5a <memset>
    char * token = strtok(buffer, "$");
 8001cc8:	494d      	ldr	r1, [pc, #308]	; (8001e00 <nmea_parse+0x14c>)
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f007 fee0 	bl	8009a90 <strtok>
 8001cd0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001cd6:	e01d      	b.n	8001d14 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7fe fac9 	bl	8000270 <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	693c      	ldr	r4, [r7, #16]
 8001ce4:	1c63      	adds	r3, r4, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f005 ff25 	bl	8007b38 <malloc>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <nmea_parse+0x148>)
 8001cf4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <nmea_parse+0x148>)
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	6979      	ldr	r1, [r7, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f007 ffbc 	bl	8009c82 <strcpy>
        token = strtok(NULL, "$");
 8001d0a:	493d      	ldr	r1, [pc, #244]	; (8001e00 <nmea_parse+0x14c>)
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f007 febf 	bl	8009a90 <strtok>
 8001d12:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1de      	bne.n	8001cd8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e052      	b.n	8001dc6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001d20:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <nmea_parse+0x148>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	4936      	ldr	r1, [pc, #216]	; (8001e04 <nmea_parse+0x150>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 ff0c 	bl	8009b48 <strstr>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d044      	beq.n	8001dc0 <nmea_parse+0x10c>
 8001d36:	4a31      	ldr	r2, [pc, #196]	; (8001dfc <nmea_parse+0x148>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fca3 	bl	800168a <gps_checksum>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <nmea_parse+0x148>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	492d      	ldr	r1, [pc, #180]	; (8001e08 <nmea_parse+0x154>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f007 fef7 	bl	8009b48 <strstr>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <nmea_parse+0x148>)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff30 	bl	8001bd0 <nmea_GNRMC>
 8001d70:	e026      	b.n	8001dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <nmea_parse+0x148>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	4924      	ldr	r1, [pc, #144]	; (8001e0c <nmea_parse+0x158>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f007 fee3 	bl	8009b48 <strstr>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <nmea_parse+0x148>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fe94 	bl	8001ac0 <nmea_GPGSA>
 8001d98:	e012      	b.n	8001dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <nmea_parse+0x148>)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	491b      	ldr	r1, [pc, #108]	; (8001e10 <nmea_parse+0x15c>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f007 fecf 	bl	8009b48 <strstr>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001db0:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <nmea_parse+0x148>)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fcae 	bl	800171c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dba8      	blt.n	8001d20 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	e009      	b.n	8001de8 <nmea_parse+0x134>
 8001dd4:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <nmea_parse+0x148>)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 feb3 	bl	8007b48 <free>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <nmea_parse+0x120>


}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200006ac 	.word	0x200006ac
 8001e00:	0800dd5c 	.word	0x0800dd5c
 8001e04:	0800dd60 	.word	0x0800dd60
 8001e08:	0800dd64 	.word	0x0800dd64
 8001e0c:	0800dd6c 	.word	0x0800dd6c
 8001e10:	0800dd74 	.word	0x0800dd74

08001e14 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af04      	add	r7, sp, #16
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	2301      	movs	r3, #1
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	1dfb      	adds	r3, r7, #7
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4803      	ldr	r0, [pc, #12]	; (8001e50 <ssd1306_WriteCommand+0x2c>)
 8001e44:	f002 fd52 	bl	80048ec <HAL_I2C_Mem_Write>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200002ac 	.word	0x200002ac

08001e54 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f04f 32ff 	mov.w	r2, #4294967295
 8001e66:	9202      	str	r2, [sp, #8]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	2178      	movs	r1, #120	; 0x78
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <ssd1306_WriteData+0x30>)
 8001e76:	f002 fd39 	bl	80048ec <HAL_I2C_Mem_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200002ac 	.word	0x200002ac

08001e88 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e8c:	f7ff ffc2 	bl	8001e14 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	f001 fdf5 	bl	8003a80 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 fa28 	bl	80022ec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e9c:	2020      	movs	r0, #32
 8001e9e:	f7ff ffc1 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff ffbe 	bl	8001e24 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ea8:	20b0      	movs	r0, #176	; 0xb0
 8001eaa:	f7ff ffbb 	bl	8001e24 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001eae:	20c8      	movs	r0, #200	; 0xc8
 8001eb0:	f7ff ffb8 	bl	8001e24 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ffb5 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f7ff ffb2 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ec0:	2040      	movs	r0, #64	; 0x40
 8001ec2:	f7ff ffaf 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ec6:	20ff      	movs	r0, #255	; 0xff
 8001ec8:	f000 f9fd 	bl	80022c6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ecc:	20a1      	movs	r0, #161	; 0xa1
 8001ece:	f7ff ffa9 	bl	8001e24 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ed2:	20a6      	movs	r0, #166	; 0xa6
 8001ed4:	f7ff ffa6 	bl	8001e24 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ed8:	20a8      	movs	r0, #168	; 0xa8
 8001eda:	f7ff ffa3 	bl	8001e24 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ede:	203f      	movs	r0, #63	; 0x3f
 8001ee0:	f7ff ffa0 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ee4:	20a4      	movs	r0, #164	; 0xa4
 8001ee6:	f7ff ff9d 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001eea:	20d3      	movs	r0, #211	; 0xd3
 8001eec:	f7ff ff9a 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff ff97 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ef6:	20d5      	movs	r0, #213	; 0xd5
 8001ef8:	f7ff ff94 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001efc:	20f0      	movs	r0, #240	; 0xf0
 8001efe:	f7ff ff91 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f02:	20d9      	movs	r0, #217	; 0xd9
 8001f04:	f7ff ff8e 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f08:	2022      	movs	r0, #34	; 0x22
 8001f0a:	f7ff ff8b 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f0e:	20da      	movs	r0, #218	; 0xda
 8001f10:	f7ff ff88 	bl	8001e24 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f14:	2012      	movs	r0, #18
 8001f16:	f7ff ff85 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f1a:	20db      	movs	r0, #219	; 0xdb
 8001f1c:	f7ff ff82 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f20:	2020      	movs	r0, #32
 8001f22:	f7ff ff7f 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f26:	208d      	movs	r0, #141	; 0x8d
 8001f28:	f7ff ff7c 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	f7ff ff79 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 f9da 	bl	80022ec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 f80f 	bl	8001f5c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f3e:	f000 f825 	bl	8001f8c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f4e:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	711a      	strb	r2, [r3, #4]
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000ae8 	.word	0x20000ae8

08001f5c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <ssd1306_Fill+0x14>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <ssd1306_Fill+0x16>
 8001f70:	23ff      	movs	r3, #255	; 0xff
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	4619      	mov	r1, r3
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <ssd1306_Fill+0x2c>)
 8001f7a:	f007 fd6e 	bl	8009a5a <memset>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200006e8 	.word	0x200006e8

08001f8c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	e016      	b.n	8001fc6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3b50      	subs	r3, #80	; 0x50
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff40 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff ff3d 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001faa:	2010      	movs	r0, #16
 8001fac:	f7ff ff3a 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <ssd1306_UpdateScreen+0x4c>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff4a 	bl	8001e54 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9e5      	bls.n	8001f98 <ssd1306_UpdateScreen+0xc>
    }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200006e8 	.word	0x200006e8

08001fdc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	71bb      	strb	r3, [r7, #6]
 8001fea:	4613      	mov	r3, r2
 8001fec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db3d      	blt.n	8002072 <ssd1306_DrawPixel+0x96>
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	2b3f      	cmp	r3, #63	; 0x3f
 8001ffa:	d83a      	bhi.n	8002072 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d11a      	bne.n	8002038 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	b2d8      	uxtb	r0, r3
 800200a:	4603      	mov	r3, r0
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	4413      	add	r3, r2
 8002010:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	b25a      	sxtb	r2, r3
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	b25b      	sxtb	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b259      	sxtb	r1, r3
 8002028:	79fa      	ldrb	r2, [r7, #7]
 800202a:	4603      	mov	r3, r0
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	4413      	add	r3, r2
 8002030:	b2c9      	uxtb	r1, r1
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002034:	54d1      	strb	r1, [r2, r3]
 8002036:	e01d      	b.n	8002074 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	4603      	mov	r3, r0
 8002042:	01db      	lsls	r3, r3, #7
 8002044:	4413      	add	r3, r2
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	b25a      	sxtb	r2, r3
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	b25b      	sxtb	r3, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	b25b      	sxtb	r3, r3
 800205e:	4013      	ands	r3, r2
 8002060:	b259      	sxtb	r1, r3
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	4603      	mov	r3, r0
 8002066:	01db      	lsls	r3, r3, #7
 8002068:	4413      	add	r3, r2
 800206a:	b2c9      	uxtb	r1, r1
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 800206e:	54d1      	strb	r1, [r2, r3]
 8002070:	e000      	b.n	8002074 <ssd1306_DrawPixel+0x98>
        return;
 8002072:	bf00      	nop
    }
}
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200006e8 	.word	0x200006e8

08002084 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	4604      	mov	r4, r0
 800208c:	1d38      	adds	r0, r7, #4
 800208e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002092:	461a      	mov	r2, r3
 8002094:	4623      	mov	r3, r4
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	4613      	mov	r3, r2
 800209a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b1f      	cmp	r3, #31
 80020a0:	d902      	bls.n	80020a8 <ssd1306_WriteChar+0x24>
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b7e      	cmp	r3, #126	; 0x7e
 80020a6:	d901      	bls.n	80020ac <ssd1306_WriteChar+0x28>
        return 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e06d      	b.n	8002188 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <ssd1306_WriteChar+0x10c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	793b      	ldrb	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	dc06      	bgt.n	80020c8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020ba:	4b35      	ldr	r3, [pc, #212]	; (8002190 <ssd1306_WriteChar+0x10c>)
 80020bc:	885b      	ldrh	r3, [r3, #2]
 80020be:	461a      	mov	r2, r3
 80020c0:	797b      	ldrb	r3, [r7, #5]
 80020c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	dd01      	ble.n	80020cc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e05d      	b.n	8002188 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e04c      	b.n	800216c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	3b20      	subs	r3, #32
 80020d8:	7979      	ldrb	r1, [r7, #5]
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	440b      	add	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e034      	b.n	800215c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d012      	beq.n	8002128 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	7bba      	ldrb	r2, [r7, #14]
 8002120:	4619      	mov	r1, r3
 8002122:	f7ff ff5b 	bl	8001fdc <ssd1306_DrawPixel>
 8002126:	e016      	b.n	8002156 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <ssd1306_WriteChar+0x10c>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4413      	add	r3, r2
 8002134:	b2d8      	uxtb	r0, r3
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002138:	885b      	ldrh	r3, [r3, #2]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4413      	add	r3, r2
 8002142:	b2d9      	uxtb	r1, r3
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	f7ff ff43 	bl	8001fdc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	3301      	adds	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	793b      	ldrb	r3, [r7, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4293      	cmp	r3, r2
 8002164:	d3c5      	bcc.n	80020f2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	797b      	ldrb	r3, [r7, #5]
 800216e:	461a      	mov	r2, r3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4293      	cmp	r3, r2
 8002174:	d3ad      	bcc.n	80020d2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002178:	881a      	ldrh	r2, [r3, #0]
 800217a:	793b      	ldrb	r3, [r7, #4]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4413      	add	r3, r2
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b03      	ldr	r3, [pc, #12]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002184:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3724      	adds	r7, #36	; 0x24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	20000ae8 	.word	0x20000ae8

08002194 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	1d38      	adds	r0, r7, #4
 800219e:	e880 0006 	stmia.w	r0, {r1, r2}
 80021a2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80021a4:	e012      	b.n	80021cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	7818      	ldrb	r0, [r3, #0]
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	1d3a      	adds	r2, r7, #4
 80021ae:	ca06      	ldmia	r2, {r1, r2}
 80021b0:	f7ff ff68 	bl	8002084 <ssd1306_WriteChar>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d002      	beq.n	80021c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	e008      	b.n	80021d8 <ssd1306_WriteString+0x44>
        }
        str++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3301      	adds	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e8      	bne.n	80021a6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	460a      	mov	r2, r1
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	4613      	mov	r3, r2
 80021ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <ssd1306_SetCursor+0x2c>)
 80021f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <ssd1306_SetCursor+0x2c>)
 80021fe:	805a      	strh	r2, [r3, #2]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000ae8 	.word	0x20000ae8

08002210 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	603a      	str	r2, [r7, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	3307      	adds	r3, #7
 800222a:	2b00      	cmp	r3, #0
 800222c:	da00      	bge.n	8002230 <ssd1306_DrawBitmap+0x20>
 800222e:	3307      	adds	r3, #7
 8002230:	10db      	asrs	r3, r3, #3
 8002232:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db3e      	blt.n	80022be <ssd1306_DrawBitmap+0xae>
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	2b3f      	cmp	r3, #63	; 0x3f
 8002244:	d83b      	bhi.n	80022be <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002246:	2300      	movs	r3, #0
 8002248:	73bb      	strb	r3, [r7, #14]
 800224a:	e033      	b.n	80022b4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	737b      	strb	r3, [r7, #13]
 8002250:	e026      	b.n	80022a0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002252:	7b7b      	ldrb	r3, [r7, #13]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e00d      	b.n	8002280 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	7b7a      	ldrb	r2, [r7, #13]
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4413      	add	r3, r2
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da08      	bge.n	800229a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002288:	79fa      	ldrb	r2, [r7, #7]
 800228a:	7b7b      	ldrb	r3, [r7, #13]
 800228c:	4413      	add	r3, r2
 800228e:	b2db      	uxtb	r3, r3
 8002290:	7f3a      	ldrb	r2, [r7, #28]
 8002292:	79b9      	ldrb	r1, [r7, #6]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fea1 	bl	8001fdc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800229a:	7b7b      	ldrb	r3, [r7, #13]
 800229c:	3301      	adds	r3, #1
 800229e:	737b      	strb	r3, [r7, #13]
 80022a0:	7b7a      	ldrb	r2, [r7, #13]
 80022a2:	797b      	ldrb	r3, [r7, #5]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3d4      	bcc.n	8002252 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73bb      	strb	r3, [r7, #14]
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	3301      	adds	r3, #1
 80022b2:	71bb      	strb	r3, [r7, #6]
 80022b4:	7bba      	ldrb	r2, [r7, #14]
 80022b6:	7e3b      	ldrb	r3, [r7, #24]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3c7      	bcc.n	800224c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80022bc:	e000      	b.n	80022c0 <ssd1306_DrawBitmap+0xb0>
        return;
 80022be:	bf00      	nop
}
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80022d0:	2381      	movs	r3, #129	; 0x81
 80022d2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fda4 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fda0 	bl	8001e24 <ssd1306_WriteCommand>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80022fc:	23af      	movs	r3, #175	; 0xaf
 80022fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <ssd1306_SetDisplayOn+0x38>)
 8002302:	2201      	movs	r2, #1
 8002304:	715a      	strb	r2, [r3, #5]
 8002306:	e004      	b.n	8002312 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002308:	23ae      	movs	r3, #174	; 0xae
 800230a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <ssd1306_SetDisplayOn+0x38>)
 800230e:	2200      	movs	r2, #0
 8002310:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fd85 	bl	8001e24 <ssd1306_WriteCommand>
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000ae8 	.word	0x20000ae8

08002328 <statemachine>:
		};



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002328:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800232c:	ed2d 8b02 	vpush	{d8}
 8002330:	b096      	sub	sp, #88	; 0x58
 8002332:	af04      	add	r7, sp, #16
	switch(state){
 8002334:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <statemachine+0x1ac>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b05      	cmp	r3, #5
 800233a:	f200 8727 	bhi.w	800318c <statemachine+0xe64>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <statemachine+0x1c>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	0800235d 	.word	0x0800235d
 8002348:	08002469 	.word	0x08002469
 800234c:	08002711 	.word	0x08002711
 8002350:	08002855 	.word	0x08002855
 8002354:	08002957 	.word	0x08002957
 8002358:	08002c83 	.word	0x08002c83
		  case STATE_INIT:
			  ssd1306_Fill(Black);
 800235c:	2000      	movs	r0, #0
 800235e:	f7ff fdfd 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002362:	495d      	ldr	r1, [pc, #372]	; (80024d8 <statemachine+0x1b0>)
 8002364:	485d      	ldr	r0, [pc, #372]	; (80024dc <statemachine+0x1b4>)
 8002366:	f7ff fca5 	bl	8001cb4 <nmea_parse>
			  if(myData.fix == 1){
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <statemachine+0x1b4>)
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	2b01      	cmp	r3, #1
 8002370:	d14e      	bne.n	8002410 <statemachine+0xe8>
						char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002372:	2014      	movs	r0, #20
 8002374:	f005 fbe0 	bl	8007b38 <malloc>
 8002378:	4603      	mov	r3, r0
 800237a:	607b      	str	r3, [r7, #4]
						ssd1306_SetCursor(32, 32);
 800237c:	2120      	movs	r1, #32
 800237e:	2020      	movs	r0, #32
 8002380:	f7ff ff2e 	bl	80021e0 <ssd1306_SetCursor>
						snprintf(str,15, "Latitude:");
 8002384:	4a56      	ldr	r2, [pc, #344]	; (80024e0 <statemachine+0x1b8>)
 8002386:	210f      	movs	r1, #15
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f007 facf 	bl	800992c <sniprintf>
						ssd1306_WriteString(str, Font_6x8, White);
 800238e:	4a55      	ldr	r2, [pc, #340]	; (80024e4 <statemachine+0x1bc>)
 8002390:	2301      	movs	r3, #1
 8002392:	ca06      	ldmia	r2, {r1, r2}
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fefd 	bl	8002194 <ssd1306_WriteString>
						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800239a:	4b50      	ldr	r3, [pc, #320]	; (80024dc <statemachine+0x1b4>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	e9cd 2300 	strd	r2, r3, [sp]
 80023a4:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <statemachine+0x1c0>)
 80023a6:	210f      	movs	r1, #15
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f007 fabf 	bl	800992c <sniprintf>
						ssd1306_SetCursor(32, 40);
 80023ae:	2128      	movs	r1, #40	; 0x28
 80023b0:	2020      	movs	r0, #32
 80023b2:	f7ff ff15 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_6x8, White);
 80023b6:	4a4b      	ldr	r2, [pc, #300]	; (80024e4 <statemachine+0x1bc>)
 80023b8:	2301      	movs	r3, #1
 80023ba:	ca06      	ldmia	r2, {r1, r2}
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff fee9 	bl	8002194 <ssd1306_WriteString>
						snprintf(str,15, "Longitude:");
 80023c2:	4a4a      	ldr	r2, [pc, #296]	; (80024ec <statemachine+0x1c4>)
 80023c4:	210f      	movs	r1, #15
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f007 fab0 	bl	800992c <sniprintf>
						ssd1306_SetCursor(32, 48);
 80023cc:	2130      	movs	r1, #48	; 0x30
 80023ce:	2020      	movs	r0, #32
 80023d0:	f7ff ff06 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_6x8, White);
 80023d4:	4a43      	ldr	r2, [pc, #268]	; (80024e4 <statemachine+0x1bc>)
 80023d6:	2301      	movs	r3, #1
 80023d8:	ca06      	ldmia	r2, {r1, r2}
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff feda 	bl	8002194 <ssd1306_WriteString>
						snprintf(str,15, "%0.7f",myData.longitude);
 80023e0:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <statemachine+0x1b4>)
 80023e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e6:	e9cd 2300 	strd	r2, r3, [sp]
 80023ea:	4a3f      	ldr	r2, [pc, #252]	; (80024e8 <statemachine+0x1c0>)
 80023ec:	210f      	movs	r1, #15
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f007 fa9c 	bl	800992c <sniprintf>
						ssd1306_SetCursor(32, 56);
 80023f4:	2138      	movs	r1, #56	; 0x38
 80023f6:	2020      	movs	r0, #32
 80023f8:	f7ff fef2 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString(str, Font_6x8, White);
 80023fc:	4a39      	ldr	r2, [pc, #228]	; (80024e4 <statemachine+0x1bc>)
 80023fe:	2301      	movs	r3, #1
 8002400:	ca06      	ldmia	r2, {r1, r2}
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fec6 	bl	8002194 <ssd1306_WriteString>
						free(str);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f005 fb9d 	bl	8007b48 <free>
 800240e:	e01b      	b.n	8002448 <statemachine+0x120>
					}
				else{ //if the GPS doesn't have a fix, print a message
						char *str = (char*)malloc(sizeof(char)*20);
 8002410:	2014      	movs	r0, #20
 8002412:	f005 fb91 	bl	8007b38 <malloc>
 8002416:	4603      	mov	r3, r0
 8002418:	60bb      	str	r3, [r7, #8]
						ssd1306_SetCursor(32, 32);
 800241a:	2120      	movs	r1, #32
 800241c:	2020      	movs	r0, #32
 800241e:	f7ff fedf 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString("Pos screen", Font_6x8, White);
 8002422:	4a30      	ldr	r2, [pc, #192]	; (80024e4 <statemachine+0x1bc>)
 8002424:	2301      	movs	r3, #1
 8002426:	ca06      	ldmia	r2, {r1, r2}
 8002428:	4831      	ldr	r0, [pc, #196]	; (80024f0 <statemachine+0x1c8>)
 800242a:	f7ff feb3 	bl	8002194 <ssd1306_WriteString>
						ssd1306_SetCursor(32, 44);
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	2020      	movs	r0, #32
 8002432:	f7ff fed5 	bl	80021e0 <ssd1306_SetCursor>
						ssd1306_WriteString("Wait gps", Font_6x8, White);
 8002436:	4a2b      	ldr	r2, [pc, #172]	; (80024e4 <statemachine+0x1bc>)
 8002438:	2301      	movs	r3, #1
 800243a:	ca06      	ldmia	r2, {r1, r2}
 800243c:	482d      	ldr	r0, [pc, #180]	; (80024f4 <statemachine+0x1cc>)
 800243e:	f7ff fea9 	bl	8002194 <ssd1306_WriteString>
						free(str);
 8002442:	68b8      	ldr	r0, [r7, #8]
 8002444:	f005 fb80 	bl	8007b48 <free>
					}
					if(BTN_A>=1){
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <statemachine+0x1d0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f340 8691 	ble.w	8003174 <statemachine+0xe4c>
							state++;//un appuie sur le bouton a nous fait passer a l'etat suivant
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <statemachine+0x1ac>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <statemachine+0x1ac>)
 800245c:	701a      	strb	r2, [r3, #0]
							BTN_A=0;//important le le reset afin que la condition marche encore a letat suivant
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <statemachine+0x1d0>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
						}
			  break;
 8002464:	f000 be86 	b.w	8003174 <statemachine+0xe4c>
		  case STATE_SPEED:
			  ssd1306_Fill(Black);
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff fd77 	bl	8001f5c <ssd1306_Fill>
			 ssd1306_SetCursor(32, 32);
 800246e:	2120      	movs	r1, #32
 8002470:	2020      	movs	r0, #32
 8002472:	f7ff feb5 	bl	80021e0 <ssd1306_SetCursor>
			 nmea_parse(&myData, DataBuffer);
 8002476:	4918      	ldr	r1, [pc, #96]	; (80024d8 <statemachine+0x1b0>)
 8002478:	4818      	ldr	r0, [pc, #96]	; (80024dc <statemachine+0x1b4>)
 800247a:	f7ff fc1b 	bl	8001cb4 <nmea_parse>
			 if(myData.speed>=vitmax){
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <statemachine+0x1b4>)
 8002480:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <statemachine+0x1d4>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	db03      	blt.n	800249c <statemachine+0x174>
				 vitmax=myData.speed;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <statemachine+0x1b4>)
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <statemachine+0x1d4>)
 800249a:	6013      	str	r3, [r2, #0]
			 }
			 float pace=0;
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
			 float sec=0;
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
			 if (myData.speed!=0){
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <statemachine+0x1b4>)
 80024aa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d027      	beq.n	8002508 <statemachine+0x1e0>
				 pace=1000/(60*myData.speed);//ici on convertie la vitesse en m/s en un pace en mim/Km on ecarte les erreure possite comme la division par 0
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <statemachine+0x1b4>)
 80024ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002500 <statemachine+0x1d8>
 80024c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024c6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002504 <statemachine+0x1dc>
 80024ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ce:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80024d2:	e01b      	b.n	800250c <statemachine+0x1e4>
 80024d4:	20000698 	.word	0x20000698
 80024d8:	2000044c 	.word	0x2000044c
 80024dc:	20000650 	.word	0x20000650
 80024e0:	0800dd7c 	.word	0x0800dd7c
 80024e4:	20000000 	.word	0x20000000
 80024e8:	0800dd88 	.word	0x0800dd88
 80024ec:	0800dd90 	.word	0x0800dd90
 80024f0:	0800dd9c 	.word	0x0800dd9c
 80024f4:	0800dda8 	.word	0x0800dda8
 80024f8:	20000690 	.word	0x20000690
 80024fc:	20000af0 	.word	0x20000af0
 8002500:	42700000 	.word	0x42700000
 8002504:	447a0000 	.word	0x447a0000
			 }
			 else {
				 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 8002508:	4bc1      	ldr	r3, [pc, #772]	; (8002810 <statemachine+0x4e8>)
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
			 }
			 if((pace-floor(pace))>=0.60){//conversion en minute
 800250c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800250e:	f7fe f81b 	bl	8000548 <__aeabi_f2d>
 8002512:	4604      	mov	r4, r0
 8002514:	460d      	mov	r5, r1
 8002516:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002518:	f7fe f816 	bl	8000548 <__aeabi_f2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	ec43 2b10 	vmov	d0, r2, r3
 8002524:	f00a f8b8 	bl	800c698 <floor>
 8002528:	ec53 2b10 	vmov	r2, r3, d0
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fd feaa 	bl	8000288 <__aeabi_dsub>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	a3b0      	add	r3, pc, #704	; (adr r3, 8002800 <statemachine+0x4d8>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe fadf 	bl	8000b04 <__aeabi_dcmpge>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02c      	beq.n	80025a6 <statemachine+0x27e>
				 pace=pace+1;
 800254c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002554:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002558:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				 sec=(pace-floor(pace))-0.60;
 800255c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800255e:	f7fd fff3 	bl	8000548 <__aeabi_f2d>
 8002562:	4604      	mov	r4, r0
 8002564:	460d      	mov	r5, r1
 8002566:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002568:	f7fd ffee 	bl	8000548 <__aeabi_f2d>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	ec43 2b10 	vmov	d0, r2, r3
 8002574:	f00a f890 	bl	800c698 <floor>
 8002578:	ec53 2b10 	vmov	r2, r3, d0
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fd fe82 	bl	8000288 <__aeabi_dsub>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	a39c      	add	r3, pc, #624	; (adr r3, 8002800 <statemachine+0x4d8>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fd fe79 	bl	8000288 <__aeabi_dsub>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fe fb23 	bl	8000be8 <__aeabi_d2f>
 80025a2:	4603      	mov	r3, r0
 80025a4:	643b      	str	r3, [r7, #64]	; 0x40
			 }
			 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80025a6:	4b9b      	ldr	r3, [pc, #620]	; (8002814 <statemachine+0x4ec>)
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d176      	bne.n	800269c <statemachine+0x374>
			 						char * str = (char*)malloc(sizeof(char)*20);
 80025ae:	2014      	movs	r0, #20
 80025b0:	f005 fac2 	bl	8007b38 <malloc>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
			 						snprintf(str,15, "Vitmax=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 80025b8:	4b97      	ldr	r3, [pc, #604]	; (8002818 <statemachine+0x4f0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffc3 	bl	8000548 <__aeabi_f2d>
 80025c2:	a391      	add	r3, pc, #580	; (adr r3, 8002808 <statemachine+0x4e0>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9cd 2300 	strd	r2, r3, [sp]
 80025d4:	4a91      	ldr	r2, [pc, #580]	; (800281c <statemachine+0x4f4>)
 80025d6:	210f      	movs	r1, #15
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f007 f9a7 	bl	800992c <sniprintf>
			 						ssd1306_SetCursor(32, 32);
 80025de:	2120      	movs	r1, #32
 80025e0:	2020      	movs	r0, #32
 80025e2:	f7ff fdfd 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString(str, Font_6x8, White);
 80025e6:	4a8e      	ldr	r2, [pc, #568]	; (8002820 <statemachine+0x4f8>)
 80025e8:	2301      	movs	r3, #1
 80025ea:	ca06      	ldmia	r2, {r1, r2}
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fdd1 	bl	8002194 <ssd1306_WriteString>
			 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <statemachine+0x4ec>)
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ffa6 	bl	8000548 <__aeabi_f2d>
 80025fc:	a382      	add	r3, pc, #520	; (adr r3, 8002808 <statemachine+0x4e0>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fd fff9 	bl	80005f8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9cd 2300 	strd	r2, r3, [sp]
 800260e:	4a85      	ldr	r2, [pc, #532]	; (8002824 <statemachine+0x4fc>)
 8002610:	210f      	movs	r1, #15
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f007 f98a 	bl	800992c <sniprintf>
			 						ssd1306_SetCursor(32, 42);
 8002618:	212a      	movs	r1, #42	; 0x2a
 800261a:	2020      	movs	r0, #32
 800261c:	f7ff fde0 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString(str, Font_6x8, White);
 8002620:	4a7f      	ldr	r2, [pc, #508]	; (8002820 <statemachine+0x4f8>)
 8002622:	2301      	movs	r3, #1
 8002624:	ca06      	ldmia	r2, {r1, r2}
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff fdb4 	bl	8002194 <ssd1306_WriteString>
			 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec*100));//affichage au format minute puis seconde
 800262c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800262e:	f7fd ff8b 	bl	8000548 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	ec43 2b10 	vmov	d0, r2, r3
 800263a:	f00a f82d 	bl	800c698 <floor>
 800263e:	eeb0 8a40 	vmov.f32	s16, s0
 8002642:	eef0 8a60 	vmov.f32	s17, s1
 8002646:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800264a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002828 <statemachine+0x500>
 800264e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002652:	ee17 0a90 	vmov	r0, s15
 8002656:	f7fd ff77 	bl	8000548 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	ec43 2b10 	vmov	d0, r2, r3
 8002662:	f00a f819 	bl	800c698 <floor>
 8002666:	eeb0 7a40 	vmov.f32	s14, s0
 800266a:	eef0 7a60 	vmov.f32	s15, s1
 800266e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002672:	ed8d 8b00 	vstr	d8, [sp]
 8002676:	4a6d      	ldr	r2, [pc, #436]	; (800282c <statemachine+0x504>)
 8002678:	210f      	movs	r1, #15
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f007 f956 	bl	800992c <sniprintf>
			 						ssd1306_SetCursor(32, 52);
 8002680:	2134      	movs	r1, #52	; 0x34
 8002682:	2020      	movs	r0, #32
 8002684:	f7ff fdac 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString(str, Font_6x8, White);
 8002688:	4a65      	ldr	r2, [pc, #404]	; (8002820 <statemachine+0x4f8>)
 800268a:	2301      	movs	r3, #1
 800268c:	ca06      	ldmia	r2, {r1, r2}
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff fd80 	bl	8002194 <ssd1306_WriteString>
			 						free(str);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f005 fa57 	bl	8007b48 <free>
 800269a:	e01b      	b.n	80026d4 <statemachine+0x3ac>
			 					}
			 	else{ //if the GPS doesn't have a fix, print a message
			 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 800269c:	2014      	movs	r0, #20
 800269e:	f005 fa4b 	bl	8007b38 <malloc>
 80026a2:	4603      	mov	r3, r0
 80026a4:	613b      	str	r3, [r7, #16]
			 						ssd1306_SetCursor(32, 32);
 80026a6:	2120      	movs	r1, #32
 80026a8:	2020      	movs	r0, #32
 80026aa:	f7ff fd99 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString("Speed screen", Font_6x8, White);
 80026ae:	4a5c      	ldr	r2, [pc, #368]	; (8002820 <statemachine+0x4f8>)
 80026b0:	2301      	movs	r3, #1
 80026b2:	ca06      	ldmia	r2, {r1, r2}
 80026b4:	485e      	ldr	r0, [pc, #376]	; (8002830 <statemachine+0x508>)
 80026b6:	f7ff fd6d 	bl	8002194 <ssd1306_WriteString>
			 						ssd1306_SetCursor(32, 44);
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	2020      	movs	r0, #32
 80026be:	f7ff fd8f 	bl	80021e0 <ssd1306_SetCursor>
			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 80026c2:	4a57      	ldr	r2, [pc, #348]	; (8002820 <statemachine+0x4f8>)
 80026c4:	2301      	movs	r3, #1
 80026c6:	ca06      	ldmia	r2, {r1, r2}
 80026c8:	485a      	ldr	r0, [pc, #360]	; (8002834 <statemachine+0x50c>)
 80026ca:	f7ff fd63 	bl	8002194 <ssd1306_WriteString>
			 						free(str);
 80026ce:	6938      	ldr	r0, [r7, #16]
 80026d0:	f005 fa3a 	bl	8007b48 <free>
			 					}
			 if(BTN_B>=1){
 80026d4:	4b58      	ldr	r3, [pc, #352]	; (8002838 <statemachine+0x510>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	dd06      	ble.n	80026ea <statemachine+0x3c2>
			 vitmax=0;
 80026dc:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <statemachine+0x4f0>)
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
			 BTN_B=0;//on reset la vitesse max par un appuie sur le bouton b
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <statemachine+0x510>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
			 	}
			 				HAL_Delay(100);
 80026ea:	2064      	movs	r0, #100	; 0x64
 80026ec:	f001 f9c8 	bl	8003a80 <HAL_Delay>
			 				if(BTN_A>=1){
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <statemachine+0x514>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f340 853f 	ble.w	8003178 <statemachine+0xe50>
			 					state++;
 80026fa:	4b51      	ldr	r3, [pc, #324]	; (8002840 <statemachine+0x518>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <statemachine+0x518>)
 8002704:	701a      	strb	r2, [r3, #0]
			 					BTN_A=0;
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <statemachine+0x514>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
			  	}
			  break;
 800270c:	f000 bd34 	b.w	8003178 <statemachine+0xe50>
		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8002710:	2000      	movs	r0, #0
 8002712:	f7ff fc23 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002716:	494b      	ldr	r1, [pc, #300]	; (8002844 <statemachine+0x51c>)
 8002718:	483e      	ldr	r0, [pc, #248]	; (8002814 <statemachine+0x4ec>)
 800271a:	f7ff facb 	bl	8001cb4 <nmea_parse>
			  ssd1306_SetCursor(32, 32);
 800271e:	2120      	movs	r1, #32
 8002720:	2020      	movs	r0, #32
 8002722:	f7ff fd5d 	bl	80021e0 <ssd1306_SetCursor>
			  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8002726:	4a3e      	ldr	r2, [pc, #248]	; (8002820 <statemachine+0x4f8>)
 8002728:	2301      	movs	r3, #1
 800272a:	ca06      	ldmia	r2, {r1, r2}
 800272c:	4846      	ldr	r0, [pc, #280]	; (8002848 <statemachine+0x520>)
 800272e:	f7ff fd31 	bl	8002194 <ssd1306_WriteString>
			  int heure=0;
 8002732:	2300      	movs	r3, #0
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);//conversion de l'heure en gmt+2 (heure de londre/paris)
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <statemachine+0x4ec>)
 8002738:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800273c:	f003 020f 	and.w	r2, r3, #15
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	461a      	mov	r2, r3
 800274a:	4b32      	ldr	r3, [pc, #200]	; (8002814 <statemachine+0x4ec>)
 800274c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	4413      	add	r3, r2
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
			  if((heure+2)>=24){
 8002758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275a:	2b15      	cmp	r3, #21
 800275c:	dd03      	ble.n	8002766 <statemachine+0x43e>
				  heure=heure-22;
 800275e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002760:	3b16      	subs	r3, #22
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002764:	e002      	b.n	800276c <statemachine+0x444>
			  }
			  else{
				  heure=heure+2;
 8002766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002768:	3302      	adds	r3, #2
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
			  }

			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <statemachine+0x4ec>)
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	2b01      	cmp	r3, #1
 8002772:	d121      	bne.n	80027b8 <statemachine+0x490>
			  			 						char * str = (char*)malloc(sizeof(char)*20);
 8002774:	2014      	movs	r0, #20
 8002776:	f005 f9df 	bl	8007b38 <malloc>
 800277a:	4603      	mov	r3, r0
 800277c:	617b      	str	r3, [r7, #20]
			  			 						ssd1306_SetCursor(34, 42);
 800277e:	212a      	movs	r1, #42	; 0x2a
 8002780:	2022      	movs	r0, #34	; 0x22
 8002782:	f7ff fd2d 	bl	80021e0 <ssd1306_SetCursor>
			  			 						snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <statemachine+0x4ec>)
 8002788:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800278c:	461a      	mov	r2, r3
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <statemachine+0x4ec>)
 8002790:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	9200      	str	r2, [sp, #0]
 8002798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279a:	4a2c      	ldr	r2, [pc, #176]	; (800284c <statemachine+0x524>)
 800279c:	210f      	movs	r1, #15
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f007 f8c4 	bl	800992c <sniprintf>
			  			 						ssd1306_WriteString(str, Font_11x18, White);//affichage de l'heure en grand
 80027a4:	4a2a      	ldr	r2, [pc, #168]	; (8002850 <statemachine+0x528>)
 80027a6:	2301      	movs	r3, #1
 80027a8:	ca06      	ldmia	r2, {r1, r2}
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff fcf2 	bl	8002194 <ssd1306_WriteString>
//			  			 						snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
//			  			 						ssd1306_WriteString(str, Font_6x8, White);
			  			 						free(str);
 80027b0:	6978      	ldr	r0, [r7, #20]
 80027b2:	f005 f9c9 	bl	8007b48 <free>
 80027b6:	e011      	b.n	80027dc <statemachine+0x4b4>
			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 80027b8:	2014      	movs	r0, #20
 80027ba:	f005 f9bd 	bl	8007b38 <malloc>
 80027be:	4603      	mov	r3, r0
 80027c0:	61bb      	str	r3, [r7, #24]
			  			 						ssd1306_SetCursor(32, 44);
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	2020      	movs	r0, #32
 80027c6:	f7ff fd0b 	bl	80021e0 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 80027ca:	4a15      	ldr	r2, [pc, #84]	; (8002820 <statemachine+0x4f8>)
 80027cc:	2301      	movs	r3, #1
 80027ce:	ca06      	ldmia	r2, {r1, r2}
 80027d0:	4818      	ldr	r0, [pc, #96]	; (8002834 <statemachine+0x50c>)
 80027d2:	f7ff fcdf 	bl	8002194 <ssd1306_WriteString>
			  			 						free(str);
 80027d6:	69b8      	ldr	r0, [r7, #24]
 80027d8:	f005 f9b6 	bl	8007b48 <free>
			  			 	}
				  if(BTN_A>=1){
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <statemachine+0x514>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f340 84cb 	ble.w	800317c <statemachine+0xe54>
			  		state++;
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <statemachine+0x518>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <statemachine+0x518>)
 80027f0:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <statemachine+0x514>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 80027f8:	f000 bcc0 	b.w	800317c <statemachine+0xe54>
 80027fc:	f3af 8000 	nop.w
 8002800:	33333333 	.word	0x33333333
 8002804:	3fe33333 	.word	0x3fe33333
 8002808:	cccccccd 	.word	0xcccccccd
 800280c:	400ccccc 	.word	0x400ccccc
 8002810:	461c3c00 	.word	0x461c3c00
 8002814:	20000650 	.word	0x20000650
 8002818:	20000af0 	.word	0x20000af0
 800281c:	0800ddb4 	.word	0x0800ddb4
 8002820:	20000000 	.word	0x20000000
 8002824:	0800ddc0 	.word	0x0800ddc0
 8002828:	42c80000 	.word	0x42c80000
 800282c:	0800ddc8 	.word	0x0800ddc8
 8002830:	0800dddc 	.word	0x0800dddc
 8002834:	0800dda8 	.word	0x0800dda8
 8002838:	20000694 	.word	0x20000694
 800283c:	20000690 	.word	0x20000690
 8002840:	20000698 	.word	0x20000698
 8002844:	2000044c 	.word	0x2000044c
 8002848:	0800ddec 	.word	0x0800ddec
 800284c:	0800ddf8 	.word	0x0800ddf8
 8002850:	20000008 	.word	0x20000008
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8002854:	2000      	movs	r0, #0
 8002856:	f7ff fb81 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800285a:	4995      	ldr	r1, [pc, #596]	; (8002ab0 <statemachine+0x788>)
 800285c:	4895      	ldr	r0, [pc, #596]	; (8002ab4 <statemachine+0x78c>)
 800285e:	f7ff fa29 	bl	8001cb4 <nmea_parse>
			  if(BTN_B==0){
 8002862:	4b95      	ldr	r3, [pc, #596]	; (8002ab8 <statemachine+0x790>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d152      	bne.n	8002910 <statemachine+0x5e8>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 800286a:	4b92      	ldr	r3, [pc, #584]	; (8002ab4 <statemachine+0x78c>)
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	2b01      	cmp	r3, #1
 8002870:	d131      	bne.n	80028d6 <statemachine+0x5ae>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8002872:	2014      	movs	r0, #20
 8002874:	f005 f960 	bl	8007b38 <malloc>
 8002878:	4603      	mov	r3, r0
 800287a:	61fb      	str	r3, [r7, #28]
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800287c:	4b8d      	ldr	r3, [pc, #564]	; (8002ab4 <statemachine+0x78c>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe61 	bl	8000548 <__aeabi_f2d>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	e9cd 2300 	strd	r2, r3, [sp]
 800288e:	4a8b      	ldr	r2, [pc, #556]	; (8002abc <statemachine+0x794>)
 8002890:	210f      	movs	r1, #15
 8002892:	69f8      	ldr	r0, [r7, #28]
 8002894:	f007 f84a 	bl	800992c <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8002898:	2120      	movs	r1, #32
 800289a:	2020      	movs	r0, #32
 800289c:	f7ff fca0 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80028a0:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <statemachine+0x798>)
 80028a2:	2301      	movs	r3, #1
 80028a4:	ca06      	ldmia	r2, {r1, r2}
 80028a6:	69f8      	ldr	r0, [r7, #28]
 80028a8:	f7ff fc74 	bl	8002194 <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <statemachine+0x78c>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	4a84      	ldr	r2, [pc, #528]	; (8002ac4 <statemachine+0x79c>)
 80028b2:	210f      	movs	r1, #15
 80028b4:	69f8      	ldr	r0, [r7, #28]
 80028b6:	f007 f839 	bl	800992c <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80028ba:	212a      	movs	r1, #42	; 0x2a
 80028bc:	2020      	movs	r0, #32
 80028be:	f7ff fc8f 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80028c2:	4a7f      	ldr	r2, [pc, #508]	; (8002ac0 <statemachine+0x798>)
 80028c4:	2301      	movs	r3, #1
 80028c6:	ca06      	ldmia	r2, {r1, r2}
 80028c8:	69f8      	ldr	r0, [r7, #28]
 80028ca:	f7ff fc63 	bl	8002194 <ssd1306_WriteString>
			 			 						free(str);
 80028ce:	69f8      	ldr	r0, [r7, #28]
 80028d0:	f005 f93a 	bl	8007b48 <free>
 80028d4:	e02f      	b.n	8002936 <statemachine+0x60e>
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 80028d6:	2014      	movs	r0, #20
 80028d8:	f005 f92e 	bl	8007b38 <malloc>
 80028dc:	4603      	mov	r3, r0
 80028de:	623b      	str	r3, [r7, #32]
			 			 						ssd1306_SetCursor(32, 32);
 80028e0:	2120      	movs	r1, #32
 80028e2:	2020      	movs	r0, #32
 80028e4:	f7ff fc7c 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("information", Font_6x8, White);
 80028e8:	4a75      	ldr	r2, [pc, #468]	; (8002ac0 <statemachine+0x798>)
 80028ea:	2301      	movs	r3, #1
 80028ec:	ca06      	ldmia	r2, {r1, r2}
 80028ee:	4876      	ldr	r0, [pc, #472]	; (8002ac8 <statemachine+0x7a0>)
 80028f0:	f7ff fc50 	bl	8002194 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 44);
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	2020      	movs	r0, #32
 80028f8:	f7ff fc72 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 80028fc:	4a70      	ldr	r2, [pc, #448]	; (8002ac0 <statemachine+0x798>)
 80028fe:	2301      	movs	r3, #1
 8002900:	ca06      	ldmia	r2, {r1, r2}
 8002902:	4872      	ldr	r0, [pc, #456]	; (8002acc <statemachine+0x7a4>)
 8002904:	f7ff fc46 	bl	8002194 <ssd1306_WriteString>
			 			 						free(str);
 8002908:	6a38      	ldr	r0, [r7, #32]
 800290a:	f005 f91d 	bl	8007b48 <free>
 800290e:	e012      	b.n	8002936 <statemachine+0x60e>
			 			 					}
			  }
			  else{
			  		ssd1306_DrawBitmap(32, 32, speciale, 64, 64, White);
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2340      	movs	r3, #64	; 0x40
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2340      	movs	r3, #64	; 0x40
 800291a:	4a6d      	ldr	r2, [pc, #436]	; (8002ad0 <statemachine+0x7a8>)
 800291c:	2120      	movs	r1, #32
 800291e:	2020      	movs	r0, #32
 8002920:	f7ff fc76 	bl	8002210 <ssd1306_DrawBitmap>
			  		ssd1306_UpdateScreen();//easter egg
 8002924:	f7ff fb32 	bl	8001f8c <ssd1306_UpdateScreen>
			  		HAL_Delay(1500);
 8002928:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800292c:	f001 f8a8 	bl	8003a80 <HAL_Delay>
			  		BTN_B=0;
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <statemachine+0x790>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A>=1){
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <statemachine+0x7ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f340 8420 	ble.w	8003180 <statemachine+0xe58>
			  		state++;
 8002940:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <statemachine+0x7b0>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <statemachine+0x7b0>)
 800294a:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800294c:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <statemachine+0x7ac>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8002952:	f000 bc15 	b.w	8003180 <statemachine+0xe58>
		  case STATE_DISTANCEA://très mal écrit juste pour tester le modele de distance orthodromique.
			  ssd1306_Fill(Black);
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fb00 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800295c:	4954      	ldr	r1, [pc, #336]	; (8002ab0 <statemachine+0x788>)
 800295e:	4855      	ldr	r0, [pc, #340]	; (8002ab4 <statemachine+0x78c>)
 8002960:	f7ff f9a8 	bl	8001cb4 <nmea_parse>

			  if(myData.fix == 1){
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <statemachine+0x78c>)
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 815f 	bne.w	8002c2c <statemachine+0x904>
			  char *str = (char*)malloc(sizeof(char)*20);
 800296e:	2014      	movs	r0, #20
 8002970:	f005 f8e2 	bl	8007b38 <malloc>
 8002974:	4603      	mov	r3, r0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
			  switch(statedistanceville){
 8002978:	4b58      	ldr	r3, [pc, #352]	; (8002adc <statemachine+0x7b4>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <statemachine+0x660>
 8002980:	2b01      	cmp	r3, #1
 8002982:	f000 80b9 	beq.w	8002af8 <statemachine+0x7d0>
 8002986:	e14d      	b.n	8002c24 <statemachine+0x8fc>

			  case STATE_VILLE1:
				  ssd1306_SetCursor(32, 32);
 8002988:	2120      	movs	r1, #32
 800298a:	2020      	movs	r0, #32
 800298c:	f7ff fc28 	bl	80021e0 <ssd1306_SetCursor>
				  ssd1306_WriteString("paris", Font_6x8, White);
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <statemachine+0x798>)
 8002992:	2301      	movs	r3, #1
 8002994:	ca06      	ldmia	r2, {r1, r2}
 8002996:	4852      	ldr	r0, [pc, #328]	; (8002ae0 <statemachine+0x7b8>)
 8002998:	f7ff fbfc 	bl	8002194 <ssd1306_WriteString>
				  ssd1306_SetCursor(32, 40);
 800299c:	2128      	movs	r1, #40	; 0x28
 800299e:	2020      	movs	r0, #32
 80029a0:	f7ff fc1e 	bl	80021e0 <ssd1306_SetCursor>
				  ssd1306_WriteString("distance", Font_6x8, White);
 80029a4:	4a46      	ldr	r2, [pc, #280]	; (8002ac0 <statemachine+0x798>)
 80029a6:	2301      	movs	r3, #1
 80029a8:	ca06      	ldmia	r2, {r1, r2}
 80029aa:	484e      	ldr	r0, [pc, #312]	; (8002ae4 <statemachine+0x7bc>)
 80029ac:	f7ff fbf2 	bl	8002194 <ssd1306_WriteString>
				  snprintf(str,15, "%0.0f Km",floor(distancepoint(&myData,paris)));
 80029b0:	4c4d      	ldr	r4, [pc, #308]	; (8002ae8 <statemachine+0x7c0>)
 80029b2:	466d      	mov	r5, sp
 80029b4:	f104 0308 	add.w	r3, r4, #8
 80029b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029be:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029c2:	483c      	ldr	r0, [pc, #240]	; (8002ab4 <statemachine+0x78c>)
 80029c4:	f000 ff24 	bl	8003810 <distancepoint>
 80029c8:	eeb0 7a40 	vmov.f32	s14, s0
 80029cc:	eef0 7a60 	vmov.f32	s15, s1
 80029d0:	eeb0 0a47 	vmov.f32	s0, s14
 80029d4:	eef0 0a67 	vmov.f32	s1, s15
 80029d8:	f009 fe5e 	bl	800c698 <floor>
 80029dc:	eeb0 7a40 	vmov.f32	s14, s0
 80029e0:	eef0 7a60 	vmov.f32	s15, s1
 80029e4:	ed8d 7b00 	vstr	d7, [sp]
 80029e8:	4a40      	ldr	r2, [pc, #256]	; (8002aec <statemachine+0x7c4>)
 80029ea:	210f      	movs	r1, #15
 80029ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ee:	f006 ff9d 	bl	800992c <sniprintf>
				  ssd1306_SetCursor(50, 48);
 80029f2:	2130      	movs	r1, #48	; 0x30
 80029f4:	2032      	movs	r0, #50	; 0x32
 80029f6:	f7ff fbf3 	bl	80021e0 <ssd1306_SetCursor>
				  ssd1306_WriteString(str, Font_6x8, White);
 80029fa:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <statemachine+0x798>)
 80029fc:	2301      	movs	r3, #1
 80029fe:	ca06      	ldmia	r2, {r1, r2}
 8002a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a02:	f7ff fbc7 	bl	8002194 <ssd1306_WriteString>
				  snprintf(str,15, "%0.1f m",(distancepoint(&myData,paris)-floor(distancepoint(&myData,paris)))*1000);
 8002a06:	4c38      	ldr	r4, [pc, #224]	; (8002ae8 <statemachine+0x7c0>)
 8002a08:	466d      	mov	r5, sp
 8002a0a:	f104 0308 	add.w	r3, r4, #8
 8002a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a18:	4826      	ldr	r0, [pc, #152]	; (8002ab4 <statemachine+0x78c>)
 8002a1a:	f000 fef9 	bl	8003810 <distancepoint>
 8002a1e:	ec59 8b10 	vmov	r8, r9, d0
 8002a22:	4c31      	ldr	r4, [pc, #196]	; (8002ae8 <statemachine+0x7c0>)
 8002a24:	466d      	mov	r5, sp
 8002a26:	f104 0308 	add.w	r3, r4, #8
 8002a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a30:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a34:	481f      	ldr	r0, [pc, #124]	; (8002ab4 <statemachine+0x78c>)
 8002a36:	f000 feeb 	bl	8003810 <distancepoint>
 8002a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a3e:	eef0 7a60 	vmov.f32	s15, s1
 8002a42:	eeb0 0a47 	vmov.f32	s0, s14
 8002a46:	eef0 0a67 	vmov.f32	s1, s15
 8002a4a:	f009 fe25 	bl	800c698 <floor>
 8002a4e:	ec53 2b10 	vmov	r2, r3, d0
 8002a52:	4640      	mov	r0, r8
 8002a54:	4649      	mov	r1, r9
 8002a56:	f7fd fc17 	bl	8000288 <__aeabi_dsub>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <statemachine+0x7c8>)
 8002a68:	f7fd fdc6 	bl	80005f8 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	e9cd 2300 	strd	r2, r3, [sp]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <statemachine+0x7cc>)
 8002a76:	210f      	movs	r1, #15
 8002a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a7a:	f006 ff57 	bl	800992c <sniprintf>
				  ssd1306_SetCursor(45, 56);
 8002a7e:	2138      	movs	r1, #56	; 0x38
 8002a80:	202d      	movs	r0, #45	; 0x2d
 8002a82:	f7ff fbad 	bl	80021e0 <ssd1306_SetCursor>
				  ssd1306_WriteString(str, Font_6x8, White);
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <statemachine+0x798>)
 8002a88:	2301      	movs	r3, #1
 8002a8a:	ca06      	ldmia	r2, {r1, r2}
 8002a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a8e:	f7ff fb81 	bl	8002194 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <statemachine+0x790>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f340 80c1 	ble.w	8002c1e <statemachine+0x8f6>
				  			  statedistanceville++;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <statemachine+0x7b4>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <statemachine+0x7b4>)
 8002aa6:	701a      	strb	r2, [r3, #0]
				  			  	BTN_B=0;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <statemachine+0x790>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
				  			  	}



				  break;
 8002aae:	e0b6      	b.n	8002c1e <statemachine+0x8f6>
 8002ab0:	2000044c 	.word	0x2000044c
 8002ab4:	20000650 	.word	0x20000650
 8002ab8:	20000694 	.word	0x20000694
 8002abc:	0800de00 	.word	0x0800de00
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	0800de0c 	.word	0x0800de0c
 8002ac8:	0800de18 	.word	0x0800de18
 8002acc:	0800dda8 	.word	0x0800dda8
 8002ad0:	0800f328 	.word	0x0800f328
 8002ad4:	20000690 	.word	0x20000690
 8002ad8:	20000698 	.word	0x20000698
 8002adc:	200006a9 	.word	0x200006a9
 8002ae0:	0800de24 	.word	0x0800de24
 8002ae4:	0800de2c 	.word	0x0800de2c
 8002ae8:	20000010 	.word	0x20000010
 8002aec:	0800de38 	.word	0x0800de38
 8002af0:	408f4000 	.word	0x408f4000
 8002af4:	0800de44 	.word	0x0800de44
			  case STATE_VILLE2:
				  ssd1306_SetCursor(32, 32);
 8002af8:	2120      	movs	r1, #32
 8002afa:	2020      	movs	r0, #32
 8002afc:	f7ff fb70 	bl	80021e0 <ssd1306_SetCursor>
				 				  ssd1306_WriteString("ensea", Font_6x8, White);
 8002b00:	4aa1      	ldr	r2, [pc, #644]	; (8002d88 <statemachine+0xa60>)
 8002b02:	2301      	movs	r3, #1
 8002b04:	ca06      	ldmia	r2, {r1, r2}
 8002b06:	48a1      	ldr	r0, [pc, #644]	; (8002d8c <statemachine+0xa64>)
 8002b08:	f7ff fb44 	bl	8002194 <ssd1306_WriteString>
				 				  ssd1306_SetCursor(32, 40);
 8002b0c:	2128      	movs	r1, #40	; 0x28
 8002b0e:	2020      	movs	r0, #32
 8002b10:	f7ff fb66 	bl	80021e0 <ssd1306_SetCursor>
				 				  ssd1306_WriteString("distance", Font_6x8, White);
 8002b14:	4a9c      	ldr	r2, [pc, #624]	; (8002d88 <statemachine+0xa60>)
 8002b16:	2301      	movs	r3, #1
 8002b18:	ca06      	ldmia	r2, {r1, r2}
 8002b1a:	489d      	ldr	r0, [pc, #628]	; (8002d90 <statemachine+0xa68>)
 8002b1c:	f7ff fb3a 	bl	8002194 <ssd1306_WriteString>
				 				  snprintf(str,15, "%0.0f Km",floor(distancepoint(&myData,ensea)));
 8002b20:	4c9c      	ldr	r4, [pc, #624]	; (8002d94 <statemachine+0xa6c>)
 8002b22:	466d      	mov	r5, sp
 8002b24:	f104 0308 	add.w	r3, r4, #8
 8002b28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b2e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b32:	4899      	ldr	r0, [pc, #612]	; (8002d98 <statemachine+0xa70>)
 8002b34:	f000 fe6c 	bl	8003810 <distancepoint>
 8002b38:	eeb0 7a40 	vmov.f32	s14, s0
 8002b3c:	eef0 7a60 	vmov.f32	s15, s1
 8002b40:	eeb0 0a47 	vmov.f32	s0, s14
 8002b44:	eef0 0a67 	vmov.f32	s1, s15
 8002b48:	f009 fda6 	bl	800c698 <floor>
 8002b4c:	eeb0 7a40 	vmov.f32	s14, s0
 8002b50:	eef0 7a60 	vmov.f32	s15, s1
 8002b54:	ed8d 7b00 	vstr	d7, [sp]
 8002b58:	4a90      	ldr	r2, [pc, #576]	; (8002d9c <statemachine+0xa74>)
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b5e:	f006 fee5 	bl	800992c <sniprintf>
				 				  ssd1306_SetCursor(50, 48);
 8002b62:	2130      	movs	r1, #48	; 0x30
 8002b64:	2032      	movs	r0, #50	; 0x32
 8002b66:	f7ff fb3b 	bl	80021e0 <ssd1306_SetCursor>
				 				  ssd1306_WriteString(str, Font_6x8, White);
 8002b6a:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <statemachine+0xa60>)
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	ca06      	ldmia	r2, {r1, r2}
 8002b70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b72:	f7ff fb0f 	bl	8002194 <ssd1306_WriteString>
				 				  snprintf(str,15, "%0.1f m",(distancepoint(&myData,ensea)-floor(distancepoint(&myData,ensea)))*1000);
 8002b76:	4c87      	ldr	r4, [pc, #540]	; (8002d94 <statemachine+0xa6c>)
 8002b78:	466d      	mov	r5, sp
 8002b7a:	f104 0308 	add.w	r3, r4, #8
 8002b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b84:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b88:	4883      	ldr	r0, [pc, #524]	; (8002d98 <statemachine+0xa70>)
 8002b8a:	f000 fe41 	bl	8003810 <distancepoint>
 8002b8e:	ec59 8b10 	vmov	r8, r9, d0
 8002b92:	4c80      	ldr	r4, [pc, #512]	; (8002d94 <statemachine+0xa6c>)
 8002b94:	466d      	mov	r5, sp
 8002b96:	f104 0308 	add.w	r3, r4, #8
 8002b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002ba0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ba4:	487c      	ldr	r0, [pc, #496]	; (8002d98 <statemachine+0xa70>)
 8002ba6:	f000 fe33 	bl	8003810 <distancepoint>
 8002baa:	eeb0 7a40 	vmov.f32	s14, s0
 8002bae:	eef0 7a60 	vmov.f32	s15, s1
 8002bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb6:	eef0 0a67 	vmov.f32	s1, s15
 8002bba:	f009 fd6d 	bl	800c698 <floor>
 8002bbe:	ec53 2b10 	vmov	r2, r3, d0
 8002bc2:	4640      	mov	r0, r8
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	f7fd fb5f 	bl	8000288 <__aeabi_dsub>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <statemachine+0xa78>)
 8002bd8:	f7fd fd0e 	bl	80005f8 <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	e9cd 2300 	strd	r2, r3, [sp]
 8002be4:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <statemachine+0xa7c>)
 8002be6:	210f      	movs	r1, #15
 8002be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bea:	f006 fe9f 	bl	800992c <sniprintf>
				 				  ssd1306_SetCursor(45, 56);
 8002bee:	2138      	movs	r1, #56	; 0x38
 8002bf0:	202d      	movs	r0, #45	; 0x2d
 8002bf2:	f7ff faf5 	bl	80021e0 <ssd1306_SetCursor>
				 				  ssd1306_WriteString(str, Font_6x8, White);
 8002bf6:	4a64      	ldr	r2, [pc, #400]	; (8002d88 <statemachine+0xa60>)
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	ca06      	ldmia	r2, {r1, r2}
 8002bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bfe:	f7ff fac9 	bl	8002194 <ssd1306_WriteString>
				 				 if(BTN_B>=1){
 8002c02:	4b69      	ldr	r3, [pc, #420]	; (8002da8 <statemachine+0xa80>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	dd0b      	ble.n	8002c22 <statemachine+0x8fa>
				 					statedistanceville--;
 8002c0a:	4b68      	ldr	r3, [pc, #416]	; (8002dac <statemachine+0xa84>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b66      	ldr	r3, [pc, #408]	; (8002dac <statemachine+0xa84>)
 8002c14:	701a      	strb	r2, [r3, #0]
				 					BTN_B=0;
 8002c16:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <statemachine+0xa80>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
				 				}

				  break;
 8002c1c:	e001      	b.n	8002c22 <statemachine+0x8fa>
				  break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <statemachine+0x8fc>
				  break;
 8002c22:	bf00      	nop

			  }
			  free(str);
 8002c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c26:	f004 ff8f 	bl	8007b48 <free>
 8002c2a:	e01b      	b.n	8002c64 <statemachine+0x93c>
			  }
			  else{
				  char *str = (char*)malloc(sizeof(char)*20);
 8002c2c:	2014      	movs	r0, #20
 8002c2e:	f004 ff83 	bl	8007b38 <malloc>
 8002c32:	4603      	mov	r3, r0
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
				  ssd1306_SetCursor(32, 32);
 8002c36:	2120      	movs	r1, #32
 8002c38:	2020      	movs	r0, #32
 8002c3a:	f7ff fad1 	bl	80021e0 <ssd1306_SetCursor>
				  ssd1306_WriteString("distanceville", Font_6x8, White);
 8002c3e:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <statemachine+0xa60>)
 8002c40:	2301      	movs	r3, #1
 8002c42:	ca06      	ldmia	r2, {r1, r2}
 8002c44:	485a      	ldr	r0, [pc, #360]	; (8002db0 <statemachine+0xa88>)
 8002c46:	f7ff faa5 	bl	8002194 <ssd1306_WriteString>
				  ssd1306_SetCursor(32, 44);
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	2020      	movs	r0, #32
 8002c4e:	f7ff fac7 	bl	80021e0 <ssd1306_SetCursor>
				  ssd1306_WriteString("Wait gps", Font_6x8, White);
 8002c52:	4a4d      	ldr	r2, [pc, #308]	; (8002d88 <statemachine+0xa60>)
 8002c54:	2301      	movs	r3, #1
 8002c56:	ca06      	ldmia	r2, {r1, r2}
 8002c58:	4856      	ldr	r0, [pc, #344]	; (8002db4 <statemachine+0xa8c>)
 8002c5a:	f7ff fa9b 	bl	8002194 <ssd1306_WriteString>
				  free(str);
 8002c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c60:	f004 ff72 	bl	8007b48 <free>
			  }

			  if(BTN_A>=1){
 8002c64:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <statemachine+0xa90>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f340 828b 	ble.w	8003184 <statemachine+0xe5c>
			  	state++;
 8002c6e:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <statemachine+0xa94>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <statemachine+0xa94>)
 8002c78:	701a      	strb	r2, [r3, #0]
			  	BTN_A=0;
 8002c7a:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <statemachine+0xa90>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
			  	}

			  break;
 8002c80:	e280      	b.n	8003184 <statemachine+0xe5c>

		  case STATE_CHOOSE:
		  		if(choose==0){//choose se met a jour à 1 dès que le choix de l'heure de fin a été fait ainsi on nous le redemande jamais avant que le compte a rebours soit finis
 8002c82:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <statemachine+0xa98>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 8104 	bne.w	8002e94 <statemachine+0xb6c>

			  ssd1306_Fill(Black);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff f965 	bl	8001f5c <ssd1306_Fill>
		  			ssd1306_SetCursor(32, 32);
 8002c92:	2120      	movs	r1, #32
 8002c94:	2020      	movs	r0, #32
 8002c96:	f7ff faa3 	bl	80021e0 <ssd1306_SetCursor>
		  			ssd1306_WriteString("choosehoure", Font_6x8, White);
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <statemachine+0xa60>)
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	ca06      	ldmia	r2, {r1, r2}
 8002ca0:	4848      	ldr	r0, [pc, #288]	; (8002dc4 <statemachine+0xa9c>)
 8002ca2:	f7ff fa77 	bl	8002194 <ssd1306_WriteString>
		  		switch(statecpt){
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <statemachine+0xaa0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	f000 8098 	beq.w	8002de0 <statemachine+0xab8>
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	f300 8269 	bgt.w	8003188 <statemachine+0xe60>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <statemachine+0x998>
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d032      	beq.n	8002d24 <statemachine+0x9fc>




		  		}
		  		 break;
 8002cbe:	e263      	b.n	8003188 <statemachine+0xe60>
		  				if(BTN_A>=1){
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <statemachine+0xa90>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	dd07      	ble.n	8002cd8 <statemachine+0x9b0>
		  					(boumheure)=(boumheure)+1;// on choisi l'heure avec le bouton a et on passe aux minutes avec le bouton b
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <statemachine+0xaa4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4a3f      	ldr	r2, [pc, #252]	; (8002dcc <statemachine+0xaa4>)
 8002cd0:	6013      	str	r3, [r2, #0]
		  					BTN_A=0;
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <statemachine+0xa90>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
		  				if(boumheure>=24){
 8002cd8:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <statemachine+0xaa4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b17      	cmp	r3, #23
 8002cde:	dd02      	ble.n	8002ce6 <statemachine+0x9be>
		  					boumheure=0;
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <statemachine+0xaa4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
		  				if(BTN_B>=1){
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <statemachine+0xa80>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	dd08      	ble.n	8002d00 <statemachine+0x9d8>
		  					statecpt++;
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <statemachine+0xaa0>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <statemachine+0xaa0>)
 8002cf8:	701a      	strb	r2, [r3, #0]
		  					BTN_B=0;
 8002cfa:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <statemachine+0xa80>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
		  				ssd1306_SetCursor(32, 42);
 8002d00:	212a      	movs	r1, #42	; 0x2a
 8002d02:	2020      	movs	r0, #32
 8002d04:	f7ff fa6c 	bl	80021e0 <ssd1306_SetCursor>
		  				snprintf(str,15, "hr:%d",boumheure);
 8002d08:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <statemachine+0xaa4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <statemachine+0xaa8>)
 8002d0e:	210f      	movs	r1, #15
 8002d10:	4830      	ldr	r0, [pc, #192]	; (8002dd4 <statemachine+0xaac>)
 8002d12:	f006 fe0b 	bl	800992c <sniprintf>
		  				ssd1306_WriteString(str, Font_6x8, White);
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <statemachine+0xa60>)
 8002d18:	2301      	movs	r3, #1
 8002d1a:	ca06      	ldmia	r2, {r1, r2}
 8002d1c:	482d      	ldr	r0, [pc, #180]	; (8002dd4 <statemachine+0xaac>)
 8002d1e:	f7ff fa39 	bl	8002194 <ssd1306_WriteString>
		  				break;
 8002d22:	e226      	b.n	8003172 <statemachine+0xe4a>
		  				if(BTN_A>=1){
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <statemachine+0xa90>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dd07      	ble.n	8002d3c <statemachine+0xa14>
		  					(boumminutes)=(boumminutes)+1;
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <statemachine+0xab0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <statemachine+0xab0>)
 8002d34:	6013      	str	r3, [r2, #0]
		  					BTN_A=0;
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <statemachine+0xa90>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
		  				if(boumminutes>=59){
 8002d3c:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <statemachine+0xab0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b3a      	cmp	r3, #58	; 0x3a
 8002d42:	dd02      	ble.n	8002d4a <statemachine+0xa22>
		  					boumminutes=0;
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <statemachine+0xab0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
		  				if(BTN_B>=1){
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <statemachine+0xa80>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	dd08      	ble.n	8002d64 <statemachine+0xa3c>
		  					statecpt++;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <statemachine+0xaa0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <statemachine+0xaa0>)
 8002d5c:	701a      	strb	r2, [r3, #0]
		  					BTN_B=0;
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <statemachine+0xa80>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
		  				ssd1306_SetCursor(32, 42);
 8002d64:	212a      	movs	r1, #42	; 0x2a
 8002d66:	2020      	movs	r0, #32
 8002d68:	f7ff fa3a 	bl	80021e0 <ssd1306_SetCursor>
		  				snprintf(str,15, "min:%d",boumminutes);
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <statemachine+0xab0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <statemachine+0xab4>)
 8002d72:	210f      	movs	r1, #15
 8002d74:	4817      	ldr	r0, [pc, #92]	; (8002dd4 <statemachine+0xaac>)
 8002d76:	f006 fdd9 	bl	800992c <sniprintf>
		  				ssd1306_WriteString(str, Font_6x8, White);
 8002d7a:	4a03      	ldr	r2, [pc, #12]	; (8002d88 <statemachine+0xa60>)
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	ca06      	ldmia	r2, {r1, r2}
 8002d80:	4814      	ldr	r0, [pc, #80]	; (8002dd4 <statemachine+0xaac>)
 8002d82:	f7ff fa07 	bl	8002194 <ssd1306_WriteString>
		  				break;
 8002d86:	e1f4      	b.n	8003172 <statemachine+0xe4a>
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	0800de4c 	.word	0x0800de4c
 8002d90:	0800de2c 	.word	0x0800de2c
 8002d94:	20000028 	.word	0x20000028
 8002d98:	20000650 	.word	0x20000650
 8002d9c:	0800de38 	.word	0x0800de38
 8002da0:	408f4000 	.word	0x408f4000
 8002da4:	0800de44 	.word	0x0800de44
 8002da8:	20000694 	.word	0x20000694
 8002dac:	200006a9 	.word	0x200006a9
 8002db0:	0800de54 	.word	0x0800de54
 8002db4:	0800dda8 	.word	0x0800dda8
 8002db8:	20000690 	.word	0x20000690
 8002dbc:	20000698 	.word	0x20000698
 8002dc0:	200006a4 	.word	0x200006a4
 8002dc4:	0800de64 	.word	0x0800de64
 8002dc8:	200006a8 	.word	0x200006a8
 8002dcc:	2000069c 	.word	0x2000069c
 8002dd0:	0800de70 	.word	0x0800de70
 8002dd4:	20000af4 	.word	0x20000af4
 8002dd8:	200006a0 	.word	0x200006a0
 8002ddc:	0800de78 	.word	0x0800de78
		  				ssd1306_Fill(Black);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7ff f8bb 	bl	8001f5c <ssd1306_Fill>
		  				char * str = (char*)malloc(sizeof(char)*20);
 8002de6:	2014      	movs	r0, #20
 8002de8:	f004 fea6 	bl	8007b38 <malloc>
 8002dec:	4603      	mov	r3, r0
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
		  				ssd1306_WriteString("heure choisi:", Font_6x8, White);
 8002df0:	4a60      	ldr	r2, [pc, #384]	; (8002f74 <statemachine+0xc4c>)
 8002df2:	2301      	movs	r3, #1
 8002df4:	ca06      	ldmia	r2, {r1, r2}
 8002df6:	4860      	ldr	r0, [pc, #384]	; (8002f78 <statemachine+0xc50>)
 8002df8:	f7ff f9cc 	bl	8002194 <ssd1306_WriteString>
		  				ssd1306_SetCursor(32, 42);
 8002dfc:	212a      	movs	r1, #42	; 0x2a
 8002dfe:	2020      	movs	r0, #32
 8002e00:	f7ff f9ee 	bl	80021e0 <ssd1306_SetCursor>
		  				snprintf(str,15, "%dH%dMin",boumheure,boumminutes);
 8002e04:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <statemachine+0xc54>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <statemachine+0xc58>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	4a5c      	ldr	r2, [pc, #368]	; (8002f84 <statemachine+0xc5c>)
 8002e12:	210f      	movs	r1, #15
 8002e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e16:	f006 fd89 	bl	800992c <sniprintf>
		  				ssd1306_WriteString(str, Font_6x8, White);
 8002e1a:	4a56      	ldr	r2, [pc, #344]	; (8002f74 <statemachine+0xc4c>)
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	ca06      	ldmia	r2, {r1, r2}
 8002e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e22:	f7ff f9b7 	bl	8002194 <ssd1306_WriteString>
		  				ssd1306_UpdateScreen();
 8002e26:	f7ff f8b1 	bl	8001f8c <ssd1306_UpdateScreen>
		  				HAL_Delay(2000);
 8002e2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e2e:	f000 fe27 	bl	8003a80 <HAL_Delay>
		  				choose=1;
 8002e32:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <statemachine+0xc60>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
		  				free(str);
 8002e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e3a:	f004 fe85 	bl	8007b48 <free>
		  				statecpt--;
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <statemachine+0xc64>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b51      	ldr	r3, [pc, #324]	; (8002f8c <statemachine+0xc64>)
 8002e48:	701a      	strb	r2, [r3, #0]
		  				statecpt--;
 8002e4a:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <statemachine+0xc64>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b4e      	ldr	r3, [pc, #312]	; (8002f8c <statemachine+0xc64>)
 8002e54:	701a      	strb	r2, [r3, #0]
		  				state--;
 8002e56:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <statemachine+0xc68>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b4c      	ldr	r3, [pc, #304]	; (8002f90 <statemachine+0xc68>)
 8002e60:	701a      	strb	r2, [r3, #0]
		  				state--;//state=state-4 ne marche pas pour une raison que nous ignorons
 8002e62:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <statemachine+0xc68>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b49      	ldr	r3, [pc, #292]	; (8002f90 <statemachine+0xc68>)
 8002e6c:	701a      	strb	r2, [r3, #0]
		  				state--;
 8002e6e:	4b48      	ldr	r3, [pc, #288]	; (8002f90 <statemachine+0xc68>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <statemachine+0xc68>)
 8002e78:	701a      	strb	r2, [r3, #0]
		  				state--;
 8002e7a:	4b45      	ldr	r3, [pc, #276]	; (8002f90 <statemachine+0xc68>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4b43      	ldr	r3, [pc, #268]	; (8002f90 <statemachine+0xc68>)
 8002e84:	701a      	strb	r2, [r3, #0]
		  				state--;
 8002e86:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <statemachine+0xc68>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <statemachine+0xc68>)
 8002e90:	701a      	strb	r2, [r3, #0]
		  				break;
 8002e92:	e16e      	b.n	8003172 <statemachine+0xe4a>
		  			ssd1306_Fill(Black);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff f861 	bl	8001f5c <ssd1306_Fill>
		  			nmea_parse(&myData, DataBuffer);
 8002e9a:	493e      	ldr	r1, [pc, #248]	; (8002f94 <statemachine+0xc6c>)
 8002e9c:	483e      	ldr	r0, [pc, #248]	; (8002f98 <statemachine+0xc70>)
 8002e9e:	f7fe ff09 	bl	8001cb4 <nmea_parse>
		  			ssd1306_SetCursor(32, 32);
 8002ea2:	2120      	movs	r1, #32
 8002ea4:	2020      	movs	r0, #32
 8002ea6:	f7ff f99b 	bl	80021e0 <ssd1306_SetCursor>
		  			ssd1306_WriteString("tps restant:", Font_6x8, White);// mode compte a rebours apres le choix
 8002eaa:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <statemachine+0xc4c>)
 8002eac:	2301      	movs	r3, #1
 8002eae:	ca06      	ldmia	r2, {r1, r2}
 8002eb0:	483a      	ldr	r0, [pc, #232]	; (8002f9c <statemachine+0xc74>)
 8002eb2:	f7ff f96f 	bl	8002194 <ssd1306_WriteString>
		  						  int heure=0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
		  						  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002eba:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <statemachine+0xc70>)
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	f040 811f 	bne.w	8003102 <statemachine+0xdda>
		  							heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8002ec4:	4b34      	ldr	r3, [pc, #208]	; (8002f98 <statemachine+0xc70>)
 8002ec6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <statemachine+0xc70>)
 8002eda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4413      	add	r3, r2
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
		  							if((heure+2)>=24){
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	2b15      	cmp	r3, #21
 8002eea:	dd03      	ble.n	8002ef4 <statemachine+0xbcc>
		  									 heure=heure-22;
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	3b16      	subs	r3, #22
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef2:	e002      	b.n	8002efa <statemachine+0xbd2>
		  									heure=heure+2;
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
		  							  	char * str = (char*)malloc(sizeof(char)*20);
 8002efa:	2014      	movs	r0, #20
 8002efc:	f004 fe1c 	bl	8007b38 <malloc>
 8002f00:	4603      	mov	r3, r0
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
		  						  		ssd1306_SetCursor(34, 40);
 8002f04:	2128      	movs	r1, #40	; 0x28
 8002f06:	2022      	movs	r0, #34	; 0x22
 8002f08:	f7ff f96a 	bl	80021e0 <ssd1306_SetCursor>
		  						  		if((boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F)))>=0){
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <statemachine+0xc58>)
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <statemachine+0xc70>)
 8002f12:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <statemachine+0xc70>)
 8002f26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4413      	add	r3, r2
 8002f30:	1acb      	subs	r3, r1, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db36      	blt.n	8002fa4 <statemachine+0xc7c>
		  						  			 					snprintf(str,15, "%d:%d",(boumheure-heure),(boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F))));// on s'assure de bien afficher le temps restant
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <statemachine+0xc54>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	1ad0      	subs	r0, r2, r3
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <statemachine+0xc58>)
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <statemachine+0xc70>)
 8002f44:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <statemachine+0xc70>)
 8002f58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	4413      	add	r3, r2
 8002f62:	1acb      	subs	r3, r1, r3
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <statemachine+0xc78>)
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6e:	f006 fcdd 	bl	800992c <sniprintf>
 8002f72:	e037      	b.n	8002fe4 <statemachine+0xcbc>
 8002f74:	20000000 	.word	0x20000000
 8002f78:	0800de80 	.word	0x0800de80
 8002f7c:	2000069c 	.word	0x2000069c
 8002f80:	200006a0 	.word	0x200006a0
 8002f84:	0800de90 	.word	0x0800de90
 8002f88:	200006a4 	.word	0x200006a4
 8002f8c:	200006a8 	.word	0x200006a8
 8002f90:	20000698 	.word	0x20000698
 8002f94:	2000044c 	.word	0x2000044c
 8002f98:	20000650 	.word	0x20000650
 8002f9c:	0800de9c 	.word	0x0800de9c
 8002fa0:	0800deac 	.word	0x0800deac
		  						  			 					snprintf(str,15, "%d:%d",(boumheure-heure)-1,60+(boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F))));
 8002fa4:	4b7d      	ldr	r3, [pc, #500]	; (800319c <statemachine+0xe74>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	1e58      	subs	r0, r3, #1
 8002fae:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <statemachine+0xe78>)
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <statemachine+0xe7c>)
 8002fb4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b77      	ldr	r3, [pc, #476]	; (80031a4 <statemachine+0xe7c>)
 8002fc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	4413      	add	r3, r2
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	333c      	adds	r3, #60	; 0x3c
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a73      	ldr	r2, [pc, #460]	; (80031a8 <statemachine+0xe80>)
 8002fdc:	210f      	movs	r1, #15
 8002fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe0:	f006 fca4 	bl	800992c <sniprintf>
		  						  			 				ssd1306_WriteString(str, Font_11x18, White);
 8002fe4:	4a71      	ldr	r2, [pc, #452]	; (80031ac <statemachine+0xe84>)
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	ca06      	ldmia	r2, {r1, r2}
 8002fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fec:	f7ff f8d2 	bl	8002194 <ssd1306_WriteString>
		  						  			 				snprintf(str,15, "%d sec",60-(((myData.lastMeasure[4]&0x0F)*10)+(myData.lastMeasure[5]&0x0F)));
 8002ff0:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <statemachine+0xe7c>)
 8002ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	461a      	mov	r2, r3
 8003004:	4b67      	ldr	r3, [pc, #412]	; (80031a4 <statemachine+0xe7c>)
 8003006:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4413      	add	r3, r2
 8003010:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8003014:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <statemachine+0xe88>)
 8003016:	210f      	movs	r1, #15
 8003018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800301a:	f006 fc87 	bl	800992c <sniprintf>
		  						  			 				ssd1306_SetCursor(34, 58);
 800301e:	213a      	movs	r1, #58	; 0x3a
 8003020:	2022      	movs	r0, #34	; 0x22
 8003022:	f7ff f8dd 	bl	80021e0 <ssd1306_SetCursor>
		  						  			 				ssd1306_WriteString(str, Font_6x8, White);
 8003026:	4a63      	ldr	r2, [pc, #396]	; (80031b4 <statemachine+0xe8c>)
 8003028:	2301      	movs	r3, #1
 800302a:	ca06      	ldmia	r2, {r1, r2}
 800302c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800302e:	f7ff f8b1 	bl	8002194 <ssd1306_WriteString>
		  						  			 				free(str);
 8003032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003034:	f004 fd88 	bl	8007b48 <free>
		  						  		if((boumheure-heure)<=0&&(boumminutes-((myData.lastMeasure[2]&0x0F)*10+(myData.lastMeasure[3]&0x0F)))<=0){// si le compte a rebours tombe a zero on allume un gpio, on affiche un message puis on reset definitivement le compte a rebours
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <statemachine+0xe74>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	dc70      	bgt.n	8003126 <statemachine+0xdfe>
 8003044:	4b56      	ldr	r3, [pc, #344]	; (80031a0 <statemachine+0xe78>)
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <statemachine+0xe7c>)
 800304a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	461a      	mov	r2, r3
 800305c:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <statemachine+0xe7c>)
 800305e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	4413      	add	r3, r2
 8003068:	1acb      	subs	r3, r1, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	dc5b      	bgt.n	8003126 <statemachine+0xdfe>
		  						  			 							HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 800306e:	2201      	movs	r2, #1
 8003070:	2110      	movs	r1, #16
 8003072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003076:	f001 fb6d 	bl	8004754 <HAL_GPIO_WritePin>
		  						  			 						ssd1306_Fill(Black);
 800307a:	2000      	movs	r0, #0
 800307c:	f7fe ff6e 	bl	8001f5c <ssd1306_Fill>
		  						  			 							ssd1306_SetCursor(32, 48);
 8003080:	2130      	movs	r1, #48	; 0x30
 8003082:	2020      	movs	r0, #32
 8003084:	f7ff f8ac 	bl	80021e0 <ssd1306_SetCursor>
		  						  			 							ssd1306_WriteString("explosion", Font_6x8, White);
 8003088:	4a4a      	ldr	r2, [pc, #296]	; (80031b4 <statemachine+0xe8c>)
 800308a:	2301      	movs	r3, #1
 800308c:	ca06      	ldmia	r2, {r1, r2}
 800308e:	484a      	ldr	r0, [pc, #296]	; (80031b8 <statemachine+0xe90>)
 8003090:	f7ff f880 	bl	8002194 <ssd1306_WriteString>
		  						  			 						ssd1306_UpdateScreen();
 8003094:	f7fe ff7a 	bl	8001f8c <ssd1306_UpdateScreen>
		  						  			 						HAL_Delay(2000);
 8003098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800309c:	f000 fcf0 	bl	8003a80 <HAL_Delay>
		  						  			 							HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2110      	movs	r1, #16
 80030a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a8:	f001 fb54 	bl	8004754 <HAL_GPIO_WritePin>
		  						  			 							boumheure=0;
 80030ac:	4b3b      	ldr	r3, [pc, #236]	; (800319c <statemachine+0xe74>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
		  						  			 							boumminutes=0;
 80030b2:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <statemachine+0xe78>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
		  						  			 							choose=0;
 80030b8:	4b40      	ldr	r3, [pc, #256]	; (80031bc <statemachine+0xe94>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
		  						  			 							state--;
 80030be:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <statemachine+0xe98>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <statemachine+0xe98>)
 80030c8:	701a      	strb	r2, [r3, #0]
		  						  			 							state--;//state=state-4 ne marche pas pour une raison que nous ignorons
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <statemachine+0xe98>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <statemachine+0xe98>)
 80030d4:	701a      	strb	r2, [r3, #0]
		  						  			 							state--;
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <statemachine+0xe98>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	3b01      	subs	r3, #1
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <statemachine+0xe98>)
 80030e0:	701a      	strb	r2, [r3, #0]
		  						  			 							state--;
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <statemachine+0xe98>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <statemachine+0xe98>)
 80030ec:	701a      	strb	r2, [r3, #0]
		  						  			 							state--;
 80030ee:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <statemachine+0xe98>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <statemachine+0xe98>)
 80030f8:	701a      	strb	r2, [r3, #0]
		  						  			 							BTN_A=0;
 80030fa:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <statemachine+0xe9c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e011      	b.n	8003126 <statemachine+0xdfe>
		  						  			 						char *str = (char*)malloc(sizeof(char)*20);
 8003102:	2014      	movs	r0, #20
 8003104:	f004 fd18 	bl	8007b38 <malloc>
 8003108:	4603      	mov	r3, r0
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
		  						  			 						ssd1306_SetCursor(32, 44);
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	2020      	movs	r0, #32
 8003110:	f7ff f866 	bl	80021e0 <ssd1306_SetCursor>
		  						  			 						ssd1306_WriteString("Wait gps", Font_6x8, White);
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <statemachine+0xe8c>)
 8003116:	2301      	movs	r3, #1
 8003118:	ca06      	ldmia	r2, {r1, r2}
 800311a:	482b      	ldr	r0, [pc, #172]	; (80031c8 <statemachine+0xea0>)
 800311c:	f7ff f83a 	bl	8002194 <ssd1306_WriteString>
		  						  			 						free(str);
 8003120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003122:	f004 fd11 	bl	8007b48 <free>
		  						  if(BTN_A>=1){
 8003126:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <statemachine+0xe9c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	dd2c      	ble.n	8003188 <statemachine+0xe60>
		  							state--;
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <statemachine+0xe98>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	3b01      	subs	r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <statemachine+0xe98>)
 8003138:	701a      	strb	r2, [r3, #0]
		  							state--;//state=state-4 ne marche pas pour une raison que nous ignorons
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <statemachine+0xe98>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	3b01      	subs	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <statemachine+0xe98>)
 8003144:	701a      	strb	r2, [r3, #0]
		  							state--;
 8003146:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <statemachine+0xe98>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	3b01      	subs	r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <statemachine+0xe98>)
 8003150:	701a      	strb	r2, [r3, #0]
		  							state--;
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <statemachine+0xe98>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3b01      	subs	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <statemachine+0xe98>)
 800315c:	701a      	strb	r2, [r3, #0]
		  							state--;
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <statemachine+0xe98>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	3b01      	subs	r3, #1
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <statemachine+0xe98>)
 8003168:	701a      	strb	r2, [r3, #0]
		  							BTN_A=0;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <statemachine+0xe9c>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
		  		 break;
 8003170:	e00a      	b.n	8003188 <statemachine+0xe60>
 8003172:	e009      	b.n	8003188 <statemachine+0xe60>
			  break;
 8003174:	bf00      	nop
 8003176:	e008      	b.n	800318a <statemachine+0xe62>
			  break;
 8003178:	bf00      	nop
 800317a:	e006      	b.n	800318a <statemachine+0xe62>
			  break;
 800317c:	bf00      	nop
 800317e:	e004      	b.n	800318a <statemachine+0xe62>
			  break;
 8003180:	bf00      	nop
 8003182:	e002      	b.n	800318a <statemachine+0xe62>
			  break;
 8003184:	bf00      	nop
 8003186:	e000      	b.n	800318a <statemachine+0xe62>
		  		 break;
 8003188:	bf00      	nop
	}

return ;
 800318a:	bf00      	nop
 800318c:	bf00      	nop
}
 800318e:	3748      	adds	r7, #72	; 0x48
 8003190:	46bd      	mov	sp, r7
 8003192:	ecbd 8b02 	vpop	{d8}
 8003196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800319a:	bf00      	nop
 800319c:	2000069c 	.word	0x2000069c
 80031a0:	200006a0 	.word	0x200006a0
 80031a4:	20000650 	.word	0x20000650
 80031a8:	0800deac 	.word	0x0800deac
 80031ac:	20000008 	.word	0x20000008
 80031b0:	0800deb4 	.word	0x0800deb4
 80031b4:	20000000 	.word	0x20000000
 80031b8:	0800debc 	.word	0x0800debc
 80031bc:	200006a4 	.word	0x200006a4
 80031c0:	20000698 	.word	0x20000698
 80031c4:	20000690 	.word	0x20000690
 80031c8:	0800dda8 	.word	0x0800dda8

080031cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_MspInit+0x44>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <HAL_MspInit+0x44>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6613      	str	r3, [r2, #96]	; 0x60
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_MspInit+0x44>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_MspInit+0x44>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_MspInit+0x44>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_MspInit+0x44>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <HAL_DAC_MspInit+0x74>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d124      	bne.n	8003280 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_DAC_MspInit+0x78>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <HAL_DAC_MspInit+0x78>)
 800323c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_DAC_MspInit+0x78>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_DAC_MspInit+0x78>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <HAL_DAC_MspInit+0x78>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_DAC_MspInit+0x78>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003266:	2310      	movs	r3, #16
 8003268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800326a:	2303      	movs	r3, #3
 800326c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800327c:	f001 f900 	bl	8004480 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003280:	bf00      	nop
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40007400 	.word	0x40007400
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b0a2      	sub	sp, #136	; 0x88
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032a8:	f107 0320 	add.w	r3, r7, #32
 80032ac:	2254      	movs	r2, #84	; 0x54
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f006 fbd2 	bl	8009a5a <memset>
  if(hi2c->Instance==I2C1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a4f      	ldr	r2, [pc, #316]	; (80033f8 <HAL_I2C_MspInit+0x168>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d13a      	bne.n	8003336 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032c4:	2300      	movs	r3, #0
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c8:	f107 0320 	add.w	r3, r7, #32
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 fe5b 	bl	8005f88 <HAL_RCCEx_PeriphCLKConfig>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80032d8:	f7fe f9d2 	bl	8001680 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 80032de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e0:	4a46      	ldr	r2, [pc, #280]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e8:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 80032ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032fa:	2312      	movs	r3, #18
 80032fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003302:	2303      	movs	r3, #3
 8003304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003308:	2304      	movs	r3, #4
 800330a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003318:	f001 f8b2 	bl	8004480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800331c:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	4a36      	ldr	r2, [pc, #216]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 8003322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003326:	6593      	str	r3, [r2, #88]	; 0x58
 8003328:	4b34      	ldr	r3, [pc, #208]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003334:	e05c      	b.n	80033f0 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a31      	ldr	r2, [pc, #196]	; (8003400 <HAL_I2C_MspInit+0x170>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d157      	bne.n	80033f0 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003344:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003346:	2300      	movs	r3, #0
 8003348:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800334a:	f107 0320 	add.w	r3, r7, #32
 800334e:	4618      	mov	r0, r3
 8003350:	f002 fe1a 	bl	8005f88 <HAL_RCCEx_PeriphCLKConfig>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800335a:	f7fe f991 	bl	8001680 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	4a26      	ldr	r2, [pc, #152]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 800336c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 8003378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 800337c:	f043 0302 	orr.w	r3, r3, #2
 8003380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003392:	2312      	movs	r3, #18
 8003394:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	2303      	movs	r3, #3
 800339c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033a0:	2304      	movs	r3, #4
 80033a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033aa:	4619      	mov	r1, r3
 80033ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b0:	f001 f866 	bl	8004480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033b4:	2310      	movs	r3, #16
 80033b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b8:	2312      	movs	r3, #18
 80033ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033c6:	2304      	movs	r3, #4
 80033c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033d0:	4619      	mov	r1, r3
 80033d2:	480c      	ldr	r0, [pc, #48]	; (8003404 <HAL_I2C_MspInit+0x174>)
 80033d4:	f001 f854 	bl	8004480 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 80033de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033e2:	6593      	str	r3, [r2, #88]	; 0x58
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_I2C_MspInit+0x16c>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3788      	adds	r7, #136	; 0x88
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40005400 	.word	0x40005400
 80033fc:	40021000 	.word	0x40021000
 8003400:	40005c00 	.word	0x40005c00
 8003404:	48000400 	.word	0x48000400

08003408 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b098      	sub	sp, #96	; 0x60
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	2254      	movs	r2, #84	; 0x54
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f006 fb1e 	bl	8009a5a <memset>
  if(hlptim->Instance==LPTIM1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_LPTIM_MspInit+0x60>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d11a      	bne.n	800345e <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800342c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800342e:	2300      	movs	r3, #0
 8003430:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fda6 	bl	8005f88 <HAL_RCCEx_PeriphCLKConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8003442:	f7fe f91d 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_LPTIM_MspInit+0x64>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	4a08      	ldr	r2, [pc, #32]	; (800346c <HAL_LPTIM_MspInit+0x64>)
 800344c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003450:	6593      	str	r3, [r2, #88]	; 0x58
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_LPTIM_MspInit+0x64>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800345e:	bf00      	nop
 8003460:	3760      	adds	r7, #96	; 0x60
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40007c00 	.word	0x40007c00
 800346c:	40021000 	.word	0x40021000

08003470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b09e      	sub	sp, #120	; 0x78
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	2254      	movs	r2, #84	; 0x54
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f006 fae2 	bl	8009a5a <memset>
  if(huart->Instance==LPUART1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a38      	ldr	r2, [pc, #224]	; (800357c <HAL_UART_MspInit+0x10c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d168      	bne.n	8003572 <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80034a0:	2320      	movs	r3, #32
 80034a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80034a4:	2300      	movs	r3, #0
 80034a6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fd6b 	bl	8005f88 <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80034b8:	f7fe f8e2 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80034bc:	4b30      	ldr	r3, [pc, #192]	; (8003580 <HAL_UART_MspInit+0x110>)
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <HAL_UART_MspInit+0x110>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_UART_MspInit+0x110>)
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_UART_MspInit+0x110>)
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_UART_MspInit+0x110>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_UART_MspInit+0x110>)
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034ec:	230c      	movs	r3, #12
 80034ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80034fc:	2308      	movs	r3, #8
 80034fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003504:	4619      	mov	r1, r3
 8003506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800350a:	f000 ffb9 	bl	8004480 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003510:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_UART_MspInit+0x118>)
 8003512:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003516:	2204      	movs	r2, #4
 8003518:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_UART_MspInit+0x114>)
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003520:	4b18      	ldr	r3, [pc, #96]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003522:	2200      	movs	r2, #0
 8003524:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800352c:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_UART_MspInit+0x114>)
 800352e:	2200      	movs	r2, #0
 8003530:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_UART_MspInit+0x114>)
 800353a:	2220      	movs	r2, #32
 800353c:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003544:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8003546:	480f      	ldr	r0, [pc, #60]	; (8003584 <HAL_UART_MspInit+0x114>)
 8003548:	f000 fd18 	bl	8003f7c <HAL_DMA_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003552:	f7fe f895 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_UART_MspInit+0x114>)
 800355a:	675a      	str	r2, [r3, #116]	; 0x74
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_UART_MspInit+0x114>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2046      	movs	r0, #70	; 0x46
 8003568:	f000 fb89 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800356c:	2046      	movs	r0, #70	; 0x46
 800356e:	f000 fba2 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003572:	bf00      	nop
 8003574:	3778      	adds	r7, #120	; 0x78
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40008000 	.word	0x40008000
 8003580:	40021000 	.word	0x40021000
 8003584:	200003c0 	.word	0x200003c0
 8003588:	40020480 	.word	0x40020480

0800358c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003590:	e7fe      	b.n	8003590 <NMI_Handler+0x4>
	...

08003594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 8003598:	2000      	movs	r0, #0
 800359a:	f7fe fcdf 	bl	8001f5c <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 800359e:	2124      	movs	r1, #36	; 0x24
 80035a0:	2021      	movs	r0, #33	; 0x21
 80035a2:	f7fe fe1d 	bl	80021e0 <ssd1306_SetCursor>
	  ssd1306_WriteString("rincee en", Font_6x8, White);
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HardFault_Handler+0x38>)
 80035a8:	2301      	movs	r3, #1
 80035aa:	ca06      	ldmia	r2, {r1, r2}
 80035ac:	4808      	ldr	r0, [pc, #32]	; (80035d0 <HardFault_Handler+0x3c>)
 80035ae:	f7fe fdf1 	bl	8002194 <ssd1306_WriteString>
	  ssd1306_SetCursor(33, 46);
 80035b2:	212e      	movs	r1, #46	; 0x2e
 80035b4:	2021      	movs	r0, #33	; 0x21
 80035b6:	f7fe fe13 	bl	80021e0 <ssd1306_SetCursor>
	  ssd1306_WriteString("code", Font_6x8, White);
 80035ba:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HardFault_Handler+0x38>)
 80035bc:	2301      	movs	r3, #1
 80035be:	ca06      	ldmia	r2, {r1, r2}
 80035c0:	4804      	ldr	r0, [pc, #16]	; (80035d4 <HardFault_Handler+0x40>)
 80035c2:	f7fe fde7 	bl	8002194 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80035c6:	f7fe fce1 	bl	8001f8c <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 80035ca:	e7e5      	b.n	8003598 <HardFault_Handler+0x4>
 80035cc:	20000000 	.word	0x20000000
 80035d0:	0800dec8 	.word	0x0800dec8
 80035d4:	0800ded4 	.word	0x0800ded4

080035d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035dc:	e7fe      	b.n	80035dc <MemManage_Handler+0x4>

080035de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035e2:	e7fe      	b.n	80035e2 <BusFault_Handler+0x4>

080035e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035e8:	e7fe      	b.n	80035e8 <UsageFault_Handler+0x4>

080035ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003618:	f000 fa12 	bl	8003a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}

08003620 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003624:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003628:	f001 f8ac 	bl	8004784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800362c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003630:	f001 f8a8 	bl	8004784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}

08003638 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <DMA2_Channel7_IRQHandler+0x10>)
 800363e:	f000 fe34 	bl	80042aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200003c0 	.word	0x200003c0

0800364c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <LPUART1_IRQHandler+0x10>)
 8003652:	f003 f917 	bl	8006884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000338 	.word	0x20000338

08003660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return 1;
 8003664:	2301      	movs	r3, #1
}
 8003666:	4618      	mov	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <_kill>:

int _kill(int pid, int sig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800367a:	f006 fad5 	bl	8009c28 <__errno>
 800367e:	4603      	mov	r3, r0
 8003680:	2216      	movs	r2, #22
 8003682:	601a      	str	r2, [r3, #0]
  return -1;
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_exit>:

void _exit (int status)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003698:	f04f 31ff 	mov.w	r1, #4294967295
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ffe7 	bl	8003670 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036a2:	e7fe      	b.n	80036a2 <_exit+0x12>

080036a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e00a      	b.n	80036cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036b6:	f3af 8000 	nop.w
 80036ba:	4601      	mov	r1, r0
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	60ba      	str	r2, [r7, #8]
 80036c2:	b2ca      	uxtb	r2, r1
 80036c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3301      	adds	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dbf0      	blt.n	80036b6 <_read+0x12>
  }

  return len;
 80036d4:	687b      	ldr	r3, [r7, #4]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e009      	b.n	8003704 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	60ba      	str	r2, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3301      	adds	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	dbf1      	blt.n	80036f0 <_write+0x12>
  }
  return len;
 800370c:	687b      	ldr	r3, [r7, #4]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <_close>:

int _close(int file)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800373e:	605a      	str	r2, [r3, #4]
  return 0;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <_isatty>:

int _isatty(int file)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003756:	2301      	movs	r3, #1
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <_sbrk+0x5c>)
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <_sbrk+0x60>)
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <_sbrk+0x64>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <_sbrk+0x64>)
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <_sbrk+0x68>)
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <_sbrk+0x64>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d207      	bcs.n	80037c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b0:	f006 fa3a 	bl	8009c28 <__errno>
 80037b4:	4603      	mov	r3, r0
 80037b6:	220c      	movs	r2, #12
 80037b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
 80037be:	e009      	b.n	80037d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <_sbrk+0x64>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <_sbrk+0x64>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <_sbrk+0x64>)
 80037d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037d2:	68fb      	ldr	r3, [r7, #12]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20010000 	.word	0x20010000
 80037e0:	00000400 	.word	0x00000400
 80037e4:	20000b24 	.word	0x20000b24
 80037e8:	20000c78 	.word	0x20000c78

080037ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <SystemInit+0x20>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <SystemInit+0x20>)
 80037f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <distancepoint>:
#include "ville.h"
#include "math.h"
#include "nmea_parse.h"


double distancepoint(GPS * gpsdata,VILLE_t villedata){
 8003810:	b082      	sub	sp, #8
 8003812:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003820:	e881 000c 	stmia.w	r1, {r2, r3}
	double distance=0;
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	distance=60*acosl(sinl(gpsdata->latitude)*sinl(villedata.latville)+cosl(gpsdata->latitude)*cosl(villedata.latville)*cosl((villedata.lonville)-(gpsdata->longitude)))*(1.852);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	ed93 7b00 	vldr	d7, [r3]
 8003836:	eeb0 0a47 	vmov.f32	s0, s14
 800383a:	eef0 0a67 	vmov.f32	s1, s15
 800383e:	f008 ff25 	bl	800c68c <sinl>
 8003842:	ec55 4b10 	vmov	r4, r5, d0
 8003846:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800384a:	eeb0 0a47 	vmov.f32	s0, s14
 800384e:	eef0 0a67 	vmov.f32	s1, s15
 8003852:	f008 ff1b 	bl	800c68c <sinl>
 8003856:	ec53 2b10 	vmov	r2, r3, d0
 800385a:	4620      	mov	r0, r4
 800385c:	4629      	mov	r1, r5
 800385e:	f7fc fecb 	bl	80005f8 <__aeabi_dmul>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4614      	mov	r4, r2
 8003868:	461d      	mov	r5, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	ed93 7b00 	vldr	d7, [r3]
 8003870:	eeb0 0a47 	vmov.f32	s0, s14
 8003874:	eef0 0a67 	vmov.f32	s1, s15
 8003878:	f008 ff06 	bl	800c688 <cosl>
 800387c:	ec59 8b10 	vmov	r8, r9, d0
 8003880:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003884:	eeb0 0a47 	vmov.f32	s0, s14
 8003888:	eef0 0a67 	vmov.f32	s1, s15
 800388c:	f008 fefc 	bl	800c688 <cosl>
 8003890:	ec53 2b10 	vmov	r2, r3, d0
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fc feae 	bl	80005f8 <__aeabi_dmul>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4690      	mov	r8, r2
 80038a2:	4699      	mov	r9, r3
 80038a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038ae:	f7fc fceb 	bl	8000288 <__aeabi_dsub>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	ec43 2b17 	vmov	d7, r2, r3
 80038ba:	eeb0 0a47 	vmov.f32	s0, s14
 80038be:	eef0 0a67 	vmov.f32	s1, s15
 80038c2:	f008 fee1 	bl	800c688 <cosl>
 80038c6:	ec53 2b10 	vmov	r2, r3, d0
 80038ca:	4640      	mov	r0, r8
 80038cc:	4649      	mov	r1, r9
 80038ce:	f7fc fe93 	bl	80005f8 <__aeabi_dmul>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4620      	mov	r0, r4
 80038d8:	4629      	mov	r1, r5
 80038da:	f7fc fcd7 	bl	800028c <__adddf3>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	ec43 2b17 	vmov	d7, r2, r3
 80038e6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ea:	eef0 0a67 	vmov.f32	s1, s15
 80038ee:	f008 fecf 	bl	800c690 <acosl>
 80038f2:	ec51 0b10 	vmov	r0, r1, d0
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <distancepoint+0x130>)
 80038fc:	f7fc fe7c 	bl	80005f8 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	a30b      	add	r3, pc, #44	; (adr r3, 8003938 <distancepoint+0x128>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fe73 	bl	80005f8 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return distance;
 800391a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800391e:	ec43 2b17 	vmov	d7, r2, r3

}
 8003922:	eeb0 0a47 	vmov.f32	s0, s14
 8003926:	eef0 0a67 	vmov.f32	s1, s15
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8003932:	b002      	add	sp, #8
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	c083126f 	.word	0xc083126f
 800393c:	3ffda1ca 	.word	0x3ffda1ca
 8003940:	404e0000 	.word	0x404e0000

08003944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800397c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003948:	f7ff ff50 	bl	80037ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800394c:	480c      	ldr	r0, [pc, #48]	; (8003980 <LoopForever+0x6>)
  ldr r1, =_edata
 800394e:	490d      	ldr	r1, [pc, #52]	; (8003984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003950:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <LoopForever+0xe>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003954:	e002      	b.n	800395c <LoopCopyDataInit>

08003956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395a:	3304      	adds	r3, #4

0800395c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800395c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800395e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003960:	d3f9      	bcc.n	8003956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003964:	4c0a      	ldr	r4, [pc, #40]	; (8003990 <LoopForever+0x16>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003968:	e001      	b.n	800396e <LoopFillZerobss>

0800396a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800396c:	3204      	adds	r2, #4

0800396e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800396e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003970:	d3fb      	bcc.n	800396a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003972:	f006 f95f 	bl	8009c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003976:	f7fd fc39 	bl	80011ec <main>

0800397a <LoopForever>:

LoopForever:
    b LoopForever
 800397a:	e7fe      	b.n	800397a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800397c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003984:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003988:	0800fae0 	.word	0x0800fae0
  ldr r2, =_sbss
 800398c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003990:	20000c78 	.word	0x20000c78

08003994 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003994:	e7fe      	b.n	8003994 <ADC1_IRQHandler>

08003996 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a0:	2003      	movs	r0, #3
 80039a2:	f000 f961 	bl	8003c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039a6:	200f      	movs	r0, #15
 80039a8:	f000 f80e 	bl	80039c8 <HAL_InitTick>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	71fb      	strb	r3, [r7, #7]
 80039b6:	e001      	b.n	80039bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039b8:	f7ff fc08 	bl	80031cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039bc:	79fb      	ldrb	r3, [r7, #7]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039d4:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <HAL_InitTick+0x6c>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_InitTick+0x70>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <HAL_InitTick+0x6c>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4619      	mov	r1, r3
 80039e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f96d 	bl	8003cd2 <HAL_SYSTICK_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d809      	bhi.n	8003a18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a04:	2200      	movs	r2, #0
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f000 f937 	bl	8003c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <HAL_InitTick+0x74>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e007      	b.n	8003a28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e004      	b.n	8003a28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e001      	b.n	8003a28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000048 	.word	0x20000048
 8003a38:	20000040 	.word	0x20000040
 8003a3c:	20000044 	.word	0x20000044

08003a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x20>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_IncTick+0x24>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_IncTick+0x24>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000048 	.word	0x20000048
 8003a64:	20000b28 	.word	0x20000b28

08003a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_GetTick+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000b28 	.word	0x20000b28

08003a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7ff ffee 	bl	8003a68 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d005      	beq.n	8003aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_Delay+0x44>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aa6:	bf00      	nop
 8003aa8:	f7ff ffde 	bl	8003a68 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d8f7      	bhi.n	8003aa8 <HAL_Delay+0x28>
  {
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000048 	.word	0x20000048

08003ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <__NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db0b      	blt.n	8003b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	4907      	ldr	r1, [pc, #28]	; (8003b64 <__NVIC_EnableIRQ+0x38>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000e100 	.word	0xe000e100

08003b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0a      	blt.n	8003b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <__NVIC_SetPriority+0x4c>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b90:	e00a      	b.n	8003ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <__NVIC_SetPriority+0x50>)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	761a      	strb	r2, [r3, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf28      	it	cs
 8003bda:	2304      	movcs	r3, #4
 8003bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d902      	bls.n	8003bec <NVIC_EncodePriority+0x30>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3b03      	subs	r3, #3
 8003bea:	e000      	b.n	8003bee <NVIC_EncodePriority+0x32>
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	4313      	orrs	r3, r2
         );
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	; 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c34:	d301      	bcc.n	8003c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <SysTick_Config+0x40>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c42:	210f      	movs	r1, #15
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	f7ff ff8e 	bl	8003b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <SysTick_Config+0x40>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <SysTick_Config+0x40>)
 8003c54:	2207      	movs	r2, #7
 8003c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	e000e010 	.word	0xe000e010

08003c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff29 	bl	8003ac8 <__NVIC_SetPriorityGrouping>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c90:	f7ff ff3e 	bl	8003b10 <__NVIC_GetPriorityGrouping>
 8003c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff8e 	bl	8003bbc <NVIC_EncodePriority>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff5d 	bl	8003b68 <__NVIC_SetPriority>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff31 	bl	8003b2c <__NVIC_EnableIRQ>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffa2 	bl	8003c24 <SysTick_Config>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e014      	b.n	8003d26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	791b      	ldrb	r3, [r3, #4]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fa81 	bl	8003214 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b088      	sub	sp, #32
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	795b      	ldrb	r3, [r3, #5]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_DAC_ConfigChannel+0x1c>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e114      	b.n	8003f74 <HAL_DAC_ConfigChannel+0x246>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	f040 8081 	bne.w	8003e62 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d60:	f7ff fe82 	bl	8003a68 <HAL_GetTick>
 8003d64:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d140      	bne.n	8003dee <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d6c:	e018      	b.n	8003da0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d6e:	f7ff fe7b 	bl	8003a68 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d911      	bls.n	8003da0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f043 0208 	orr.w	r2, r3, #8
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0e9      	b.n	8003f74 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1df      	bne.n	8003d6e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003dae:	2001      	movs	r0, #1
 8003db0:	f7ff fe66 	bl	8003a80 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	6992      	ldr	r2, [r2, #24]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8003dbe:	e023      	b.n	8003e08 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003dc0:	f7ff fe52 	bl	8003a68 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d90f      	bls.n	8003dee <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	da0a      	bge.n	8003dee <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f043 0208 	orr.w	r2, r3, #8
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2203      	movs	r2, #3
 8003de8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0c2      	b.n	8003f74 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dbe3      	blt.n	8003dc0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7ff fe41 	bl	8003a80 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	6992      	ldr	r2, [r2, #24]
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	ea02 0103 	and.w	r1, r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	21ff      	movs	r1, #255	; 0xff
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	ea02 0103 	and.w	r1, r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d11d      	bne.n	8003ea6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	221f      	movs	r2, #31
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	400a      	ands	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	22c0      	movs	r2, #192	; 0xc0
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	400a      	ands	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e098      	b.n	80040c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <HAL_DMA_Init+0x150>)
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d80f      	bhi.n	8003fba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_DMA_Init+0x154>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a4b      	ldr	r2, [pc, #300]	; (80040d4 <HAL_DMA_Init+0x158>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	009a      	lsls	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a48      	ldr	r2, [pc, #288]	; (80040d8 <HAL_DMA_Init+0x15c>)
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fb8:	e00e      	b.n	8003fd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b46      	ldr	r3, [pc, #280]	; (80040dc <HAL_DMA_Init+0x160>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a43      	ldr	r2, [pc, #268]	; (80040d4 <HAL_DMA_Init+0x158>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	009a      	lsls	r2, r3, #2
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a42      	ldr	r2, [pc, #264]	; (80040e0 <HAL_DMA_Init+0x164>)
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004032:	d039      	beq.n	80040a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <HAL_DMA_Init+0x15c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d11a      	bne.n	8004074 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800403e:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <HAL_DMA_Init+0x168>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f003 031c 	and.w	r3, r3, #28
 800404a:	210f      	movs	r1, #15
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	4924      	ldr	r1, [pc, #144]	; (80040e4 <HAL_DMA_Init+0x168>)
 8004054:	4013      	ands	r3, r2
 8004056:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004058:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <HAL_DMA_Init+0x168>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 031c 	and.w	r3, r3, #28
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	491d      	ldr	r1, [pc, #116]	; (80040e4 <HAL_DMA_Init+0x168>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
 8004072:	e019      	b.n	80040a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004074:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <HAL_DMA_Init+0x16c>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	f003 031c 	and.w	r3, r3, #28
 8004080:	210f      	movs	r1, #15
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	4917      	ldr	r1, [pc, #92]	; (80040e8 <HAL_DMA_Init+0x16c>)
 800408a:	4013      	ands	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_DMA_Init+0x16c>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f003 031c 	and.w	r3, r3, #28
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	4911      	ldr	r1, [pc, #68]	; (80040e8 <HAL_DMA_Init+0x16c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40020407 	.word	0x40020407
 80040d0:	bffdfff8 	.word	0xbffdfff8
 80040d4:	cccccccd 	.word	0xcccccccd
 80040d8:	40020000 	.word	0x40020000
 80040dc:	bffdfbf8 	.word	0xbffdfbf8
 80040e0:	40020400 	.word	0x40020400
 80040e4:	400200a8 	.word	0x400200a8
 80040e8:	400204a8 	.word	0x400204a8

080040ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_DMA_Start_IT+0x20>
 8004108:	2302      	movs	r3, #2
 800410a:	e04b      	b.n	80041a4 <HAL_DMA_Start_IT+0xb8>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d13a      	bne.n	8004196 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f96b 	bl	8004420 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 020e 	orr.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e00f      	b.n	8004184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0204 	bic.w	r2, r2, #4
 8004172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 020a 	orr.w	r2, r2, #10
 8004182:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e005      	b.n	80041a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d008      	beq.n	80041d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2204      	movs	r2, #4
 80041c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e022      	b.n	800421c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 020e 	bic.w	r2, r2, #14
 80041e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	f003 021c 	and.w	r2, r3, #28
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d005      	beq.n	800424c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e029      	b.n	80042a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020e 	bic.w	r2, r2, #14
 800425a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	f003 021c 	and.w	r2, r3, #28
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2101      	movs	r1, #1
 800427a:	fa01 f202 	lsl.w	r2, r1, r2
 800427e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
    }
  }
  return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f003 031c 	and.w	r3, r3, #28
 80042ca:	2204      	movs	r2, #4
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d026      	beq.n	8004324 <HAL_DMA_IRQHandler+0x7a>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d021      	beq.n	8004324 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0204 	bic.w	r2, r2, #4
 80042fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f003 021c 	and.w	r2, r3, #28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2104      	movs	r1, #4
 800430c:	fa01 f202 	lsl.w	r2, r1, r2
 8004310:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	2b00      	cmp	r3, #0
 8004318:	d071      	beq.n	80043fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004322:	e06c      	b.n	80043fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 031c 	and.w	r3, r3, #28
 800432c:	2202      	movs	r2, #2
 800432e:	409a      	lsls	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02e      	beq.n	8004396 <HAL_DMA_IRQHandler+0xec>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d029      	beq.n	8004396 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020a 	bic.w	r2, r2, #10
 800435e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	f003 021c 	and.w	r2, r3, #28
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2102      	movs	r1, #2
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d038      	beq.n	80043fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004394:	e033      	b.n	80043fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f003 031c 	and.w	r3, r3, #28
 800439e:	2208      	movs	r2, #8
 80043a0:	409a      	lsls	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02a      	beq.n	8004400 <HAL_DMA_IRQHandler+0x156>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d025      	beq.n	8004400 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 020e 	bic.w	r2, r2, #14
 80043c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f003 021c 	and.w	r2, r3, #28
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f202 	lsl.w	r2, r1, r2
 80043d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
}
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	f003 021c 	and.w	r2, r3, #28
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b10      	cmp	r3, #16
 8004450:	d108      	bne.n	8004464 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004462:	e007      	b.n	8004474 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800448e:	e148      	b.n	8004722 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 813a 	beq.w	800471c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d005      	beq.n	80044c0 <HAL_GPIO_Init+0x40>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d130      	bne.n	8004522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044f6:	2201      	movs	r2, #1
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0201 	and.w	r2, r3, #1
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b03      	cmp	r3, #3
 800452c:	d017      	beq.n	800455e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	2203      	movs	r2, #3
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d123      	bne.n	80045b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	08da      	lsrs	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3208      	adds	r2, #8
 8004572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	220f      	movs	r2, #15
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	08da      	lsrs	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3208      	adds	r2, #8
 80045ac:	6939      	ldr	r1, [r7, #16]
 80045ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	2203      	movs	r2, #3
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 0203 	and.w	r2, r3, #3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8094 	beq.w	800471c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f4:	4b52      	ldr	r3, [pc, #328]	; (8004740 <HAL_GPIO_Init+0x2c0>)
 80045f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f8:	4a51      	ldr	r2, [pc, #324]	; (8004740 <HAL_GPIO_Init+0x2c0>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6613      	str	r3, [r2, #96]	; 0x60
 8004600:	4b4f      	ldr	r3, [pc, #316]	; (8004740 <HAL_GPIO_Init+0x2c0>)
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800460c:	4a4d      	ldr	r2, [pc, #308]	; (8004744 <HAL_GPIO_Init+0x2c4>)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	3302      	adds	r3, #2
 8004614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	220f      	movs	r2, #15
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004636:	d00d      	beq.n	8004654 <HAL_GPIO_Init+0x1d4>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a43      	ldr	r2, [pc, #268]	; (8004748 <HAL_GPIO_Init+0x2c8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <HAL_GPIO_Init+0x1d0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a42      	ldr	r2, [pc, #264]	; (800474c <HAL_GPIO_Init+0x2cc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d101      	bne.n	800464c <HAL_GPIO_Init+0x1cc>
 8004648:	2302      	movs	r3, #2
 800464a:	e004      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 800464c:	2307      	movs	r3, #7
 800464e:	e002      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_GPIO_Init+0x1d6>
 8004654:	2300      	movs	r3, #0
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	f002 0203 	and.w	r2, r2, #3
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	4093      	lsls	r3, r2
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004666:	4937      	ldr	r1, [pc, #220]	; (8004744 <HAL_GPIO_Init+0x2c4>)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	3302      	adds	r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43db      	mvns	r3, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004698:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800469e:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046c2:	4a23      	ldr	r2, [pc, #140]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046c8:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004716:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <HAL_GPIO_Init+0x2d0>)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	3301      	adds	r3, #1
 8004720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f aeaf 	bne.w	8004490 <HAL_GPIO_Init+0x10>
  }
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40021000 	.word	0x40021000
 8004744:	40010000 	.word	0x40010000
 8004748:	48000400 	.word	0x48000400
 800474c:	48000800 	.word	0x48000800
 8004750:	40010400 	.word	0x40010400

08004754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
 8004760:	4613      	mov	r3, r2
 8004762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004764:	787b      	ldrb	r3, [r7, #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800476a:	887a      	ldrh	r2, [r7, #2]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004770:	e002      	b.n	8004778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800479a:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fc92 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40010400 	.word	0x40010400

080047b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e08d      	b.n	80048e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fe fd58 	bl	8003290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	; 0x24
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004804:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004814:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d107      	bne.n	800482e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	e006      	b.n	800483c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800483a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d108      	bne.n	8004856 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	e007      	b.n	8004866 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004864:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004888:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	461a      	mov	r2, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	817b      	strh	r3, [r7, #10]
 80048fe:	460b      	mov	r3, r1
 8004900:	813b      	strh	r3, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b20      	cmp	r3, #32
 8004910:	f040 80f9 	bne.w	8004b06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_I2C_Mem_Write+0x34>
 800491a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0ed      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_I2C_Mem_Write+0x4e>
 8004936:	2302      	movs	r3, #2
 8004938:	e0e6      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004942:	f7ff f891 	bl	8003a68 <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2319      	movs	r3, #25
 800494e:	2201      	movs	r2, #1
 8004950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f955 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0d1      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2221      	movs	r2, #33	; 0x21
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800498c:	88f8      	ldrh	r0, [r7, #6]
 800498e:	893a      	ldrh	r2, [r7, #8]
 8004990:	8979      	ldrh	r1, [r7, #10]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4603      	mov	r3, r0
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f8b9 	bl	8004b14 <I2C_RequestMemoryWrite>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0a9      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2bff      	cmp	r3, #255	; 0xff
 80049bc:	d90e      	bls.n	80049dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	8979      	ldrh	r1, [r7, #10]
 80049cc:	2300      	movs	r3, #0
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 facf 	bl	8004f78 <I2C_TransferConfig>
 80049da:	e00f      	b.n	80049fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	8979      	ldrh	r1, [r7, #10]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fabe 	bl	8004f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f94e 	bl	8004ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e07b      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d034      	beq.n	8004ab4 <HAL_I2C_Mem_Write+0x1c8>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d130      	bne.n	8004ab4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f8d1 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e04d      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2bff      	cmp	r3, #255	; 0xff
 8004a74:	d90e      	bls.n	8004a94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	22ff      	movs	r2, #255	; 0xff
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	8979      	ldrh	r1, [r7, #10]
 8004a84:	2300      	movs	r3, #0
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa73 	bl	8004f78 <I2C_TransferConfig>
 8004a92:	e00f      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	8979      	ldrh	r1, [r7, #10]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fa62 	bl	8004f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d19e      	bne.n	80049fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f934 	bl	8004d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e01a      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <HAL_I2C_Mem_Write+0x224>)
 8004ae6:	400b      	ands	r3, r1
 8004ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	fe00e800 	.word	0xfe00e800

08004b14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	817b      	strh	r3, [r7, #10]
 8004b26:	460b      	mov	r3, r1
 8004b28:	813b      	strh	r3, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	8979      	ldrh	r1, [r7, #10]
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <I2C_RequestMemoryWrite+0xa4>)
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fa1b 	bl	8004f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f8ab 	bl	8004ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e02c      	b.n	8004bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28
 8004b66:	e015      	b.n	8004b94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b68:	893b      	ldrh	r3, [r7, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	69b9      	ldr	r1, [r7, #24]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f891 	bl	8004ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e012      	b.n	8004bb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8a:	893b      	ldrh	r3, [r7, #8]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2180      	movs	r1, #128	; 0x80
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f830 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	80002000 	.word	0x80002000

08004bbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d103      	bne.n	8004bda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d007      	beq.n	8004bf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	619a      	str	r2, [r3, #24]
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c14:	e031      	b.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d02d      	beq.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fe ff23 	bl	8003a68 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d122      	bne.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d113      	bne.n	8004c7a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e00f      	b.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d0be      	beq.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cae:	e033      	b.n	8004d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f87f 	bl	8004db8 <I2C_IsErrorOccurred>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e031      	b.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d025      	beq.n	8004d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ccc:	f7fe fecc 	bl	8003a68 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d11a      	bne.n	8004d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d013      	beq.n	8004d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e007      	b.n	8004d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d1c4      	bne.n	8004cb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d3c:	e02f      	b.n	8004d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f838 	bl	8004db8 <I2C_IsErrorOccurred>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e02d      	b.n	8004dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fe fe89 	bl	8003a68 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11a      	bne.n	8004d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d013      	beq.n	8004d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e007      	b.n	8004dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d1c8      	bne.n	8004d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d068      	beq.n	8004eb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2210      	movs	r2, #16
 8004dea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dec:	e049      	b.n	8004e82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d045      	beq.n	8004e82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fe fe37 	bl	8003a68 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_IsErrorOccurred+0x54>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d13a      	bne.n	8004e82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2e:	d121      	bne.n	8004e74 <I2C_IsErrorOccurred+0xbc>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e36:	d01d      	beq.n	8004e74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d01a      	beq.n	8004e74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e4e:	f7fe fe0b 	bl	8003a68 <HAL_GetTick>
 8004e52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e54:	e00e      	b.n	8004e74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e56:	f7fe fe07 	bl	8003a68 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b19      	cmp	r3, #25
 8004e62:	d907      	bls.n	8004e74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	f043 0320 	orr.w	r3, r3, #32
 8004e6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e72:	e006      	b.n	8004e82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d1e9      	bne.n	8004e56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d003      	beq.n	8004e98 <I2C_IsErrorOccurred+0xe0>
 8004e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0aa      	beq.n	8004dee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f043 0308 	orr.w	r3, r3, #8
 8004ef0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004efa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	f043 0302 	orr.w	r3, r3, #2
 8004f12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01c      	beq.n	8004f66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff fe45 	bl	8004bbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <I2C_IsErrorOccurred+0x1bc>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3728      	adds	r7, #40	; 0x28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	fe00e800 	.word	0xfe00e800

08004f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	817b      	strh	r3, [r7, #10]
 8004f86:	4613      	mov	r3, r2
 8004f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f8a:	897b      	ldrh	r3, [r7, #10]
 8004f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f90:	7a7b      	ldrb	r3, [r7, #9]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	0d5b      	lsrs	r3, r3, #21
 8004fb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <I2C_TransferConfig+0x60>)
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	ea02 0103 	and.w	r1, r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	03ff63ff 	.word	0x03ff63ff

08004fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d138      	bne.n	8005064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e032      	b.n	8005066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800502e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b20      	cmp	r3, #32
 8005086:	d139      	bne.n	80050fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005092:	2302      	movs	r3, #2
 8005094:	e033      	b.n	80050fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2224      	movs	r2, #36	; 0x24
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e08f      	b.n	800523e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fe f965 	bl	8003408 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d004      	beq.n	8005160 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800515e:	d103      	bne.n	8005168 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 031e 	bic.w	r3, r3, #30
 8005166:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005170:	4293      	cmp	r3, r2
 8005172:	d005      	beq.n	8005180 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800517a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800517e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_LPTIM_Init+0x13c>)
 8005184:	4013      	ands	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005190:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005196:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800519c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80051a2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d107      	bne.n	80051c2 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80051ba:	4313      	orrs	r3, r2
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d004      	beq.n	80051d4 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051d2:	d107      	bne.n	80051e4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80051dc:	4313      	orrs	r3, r2
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00a      	beq.n	8005206 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80051f8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80051fe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a0e      	ldr	r2, [pc, #56]	; (800524c <HAL_LPTIM_Init+0x140>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	621a      	str	r2, [r3, #32]
 8005228:	e004      	b.n	8005234 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005232:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	ff19f1fe 	.word	0xff19f1fe
 800524c:	40007c00 	.word	0x40007c00

08005250 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <HAL_PWREx_GetVoltageRange+0x18>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40007000 	.word	0x40007000

0800526c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527a:	d130      	bne.n	80052de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800527c:	4b23      	ldr	r3, [pc, #140]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d038      	beq.n	80052fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005292:	4a1e      	ldr	r2, [pc, #120]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005298:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2232      	movs	r2, #50	; 0x32
 80052a0:	fb02 f303 	mul.w	r3, r2, r3
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	0c9b      	lsrs	r3, r3, #18
 80052ac:	3301      	adds	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b0:	e002      	b.n	80052b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b8:	4b14      	ldr	r3, [pc, #80]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d102      	bne.n	80052cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f2      	bne.n	80052b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d8:	d110      	bne.n	80052fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e00f      	b.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ea:	d007      	beq.n	80052fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052f4:	4a05      	ldr	r2, [pc, #20]	; (800530c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40007000 	.word	0x40007000
 8005310:	20000040 	.word	0x20000040
 8005314:	431bde83 	.word	0x431bde83

08005318 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f000 bc02 	b.w	8005b30 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532c:	4b96      	ldr	r3, [pc, #600]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 030c 	and.w	r3, r3, #12
 8005334:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005336:	4b94      	ldr	r3, [pc, #592]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80e4 	beq.w	8005516 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <HAL_RCC_OscConfig+0x4c>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b0c      	cmp	r3, #12
 8005358:	f040 808b 	bne.w	8005472 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b01      	cmp	r3, #1
 8005360:	f040 8087 	bne.w	8005472 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005364:	4b88      	ldr	r3, [pc, #544]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_OscConfig+0x64>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e3d9      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	4b81      	ldr	r3, [pc, #516]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <HAL_RCC_OscConfig+0x7e>
 800538c:	4b7e      	ldr	r3, [pc, #504]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005394:	e005      	b.n	80053a2 <HAL_RCC_OscConfig+0x8a>
 8005396:	4b7c      	ldr	r3, [pc, #496]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d223      	bcs.n	80053ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fd8c 	bl	8005ec8 <RCC_SetFlashLatencyFromMSIRange>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e3ba      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ba:	4b73      	ldr	r3, [pc, #460]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a72      	ldr	r2, [pc, #456]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053c0:	f043 0308 	orr.w	r3, r3, #8
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4b70      	ldr	r3, [pc, #448]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	496d      	ldr	r1, [pc, #436]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053d8:	4b6b      	ldr	r3, [pc, #428]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	4968      	ldr	r1, [pc, #416]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
 80053ec:	e025      	b.n	800543a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ee:	4b66      	ldr	r3, [pc, #408]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a65      	ldr	r2, [pc, #404]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053f4:	f043 0308 	orr.w	r3, r3, #8
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b63      	ldr	r3, [pc, #396]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	4960      	ldr	r1, [pc, #384]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800540c:	4b5e      	ldr	r3, [pc, #376]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	495b      	ldr	r1, [pc, #364]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fd4c 	bl	8005ec8 <RCC_SetFlashLatencyFromMSIRange>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e37a      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800543a:	f000 fc81 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 800543e:	4602      	mov	r2, r0
 8005440:	4b51      	ldr	r3, [pc, #324]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	4950      	ldr	r1, [pc, #320]	; (800558c <HAL_RCC_OscConfig+0x274>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	4a4e      	ldr	r2, [pc, #312]	; (8005590 <HAL_RCC_OscConfig+0x278>)
 8005458:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800545a:	4b4e      	ldr	r3, [pc, #312]	; (8005594 <HAL_RCC_OscConfig+0x27c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fab2 	bl	80039c8 <HAL_InitTick>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d052      	beq.n	8005514 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	e35e      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d032      	beq.n	80054e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800547a:	4b43      	ldr	r3, [pc, #268]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a42      	ldr	r2, [pc, #264]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005486:	f7fe faef 	bl	8003a68 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800548e:	f7fe faeb 	bl	8003a68 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e347      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054a0:	4b39      	ldr	r3, [pc, #228]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a35      	ldr	r2, [pc, #212]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4b33      	ldr	r3, [pc, #204]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4930      	ldr	r1, [pc, #192]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ca:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	492b      	ldr	r1, [pc, #172]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]
 80054de:	e01a      	b.n	8005516 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054e0:	4b29      	ldr	r3, [pc, #164]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a28      	ldr	r2, [pc, #160]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054ec:	f7fe fabc 	bl	8003a68 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054f4:	f7fe fab8 	bl	8003a68 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e314      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005506:	4b20      	ldr	r3, [pc, #128]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x1dc>
 8005512:	e000      	b.n	8005516 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d073      	beq.n	800560a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d005      	beq.n	8005534 <HAL_RCC_OscConfig+0x21c>
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d10e      	bne.n	800554c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d10b      	bne.n	800554c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005534:	4b14      	ldr	r3, [pc, #80]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d063      	beq.n	8005608 <HAL_RCC_OscConfig+0x2f0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d15f      	bne.n	8005608 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e2f1      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005554:	d106      	bne.n	8005564 <HAL_RCC_OscConfig+0x24c>
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a0b      	ldr	r2, [pc, #44]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800555c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e025      	b.n	80055b0 <HAL_RCC_OscConfig+0x298>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800556c:	d114      	bne.n	8005598 <HAL_RCC_OscConfig+0x280>
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a05      	ldr	r2, [pc, #20]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4b03      	ldr	r3, [pc, #12]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a02      	ldr	r2, [pc, #8]	; (8005588 <HAL_RCC_OscConfig+0x270>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e013      	b.n	80055b0 <HAL_RCC_OscConfig+0x298>
 8005588:	40021000 	.word	0x40021000
 800558c:	0800f428 	.word	0x0800f428
 8005590:	20000040 	.word	0x20000040
 8005594:	20000044 	.word	0x20000044
 8005598:	4ba0      	ldr	r3, [pc, #640]	; (800581c <HAL_RCC_OscConfig+0x504>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a9f      	ldr	r2, [pc, #636]	; (800581c <HAL_RCC_OscConfig+0x504>)
 800559e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	4b9d      	ldr	r3, [pc, #628]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a9c      	ldr	r2, [pc, #624]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80055aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d013      	beq.n	80055e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fe fa56 	bl	8003a68 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c0:	f7fe fa52 	bl	8003a68 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e2ae      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d2:	4b92      	ldr	r3, [pc, #584]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x2a8>
 80055de:	e014      	b.n	800560a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fe fa42 	bl	8003a68 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e8:	f7fe fa3e 	bl	8003a68 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	; 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e29a      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055fa:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCC_OscConfig+0x2d0>
 8005606:	e000      	b.n	800560a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d060      	beq.n	80056d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b04      	cmp	r3, #4
 800561a:	d005      	beq.n	8005628 <HAL_RCC_OscConfig+0x310>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b0c      	cmp	r3, #12
 8005620:	d119      	bne.n	8005656 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d116      	bne.n	8005656 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005628:	4b7c      	ldr	r3, [pc, #496]	; (800581c <HAL_RCC_OscConfig+0x504>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_RCC_OscConfig+0x328>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e277      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005640:	4b76      	ldr	r3, [pc, #472]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	4973      	ldr	r1, [pc, #460]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005650:	4313      	orrs	r3, r2
 8005652:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005654:	e040      	b.n	80056d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d023      	beq.n	80056a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800565e:	4b6f      	ldr	r3, [pc, #444]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6e      	ldr	r2, [pc, #440]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fe f9fd 	bl	8003a68 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005672:	f7fe f9f9 	bl	8003a68 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e255      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005684:	4b65      	ldr	r3, [pc, #404]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	4b62      	ldr	r3, [pc, #392]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	495f      	ldr	r1, [pc, #380]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
 80056a4:	e018      	b.n	80056d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a6:	4b5d      	ldr	r3, [pc, #372]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a5c      	ldr	r2, [pc, #368]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80056ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fe f9d9 	bl	8003a68 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ba:	f7fe f9d5 	bl	8003a68 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e231      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056cc:	4b53      	ldr	r3, [pc, #332]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f0      	bne.n	80056ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d03c      	beq.n	800575e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01c      	beq.n	8005726 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80056ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f2:	4a4a      	ldr	r2, [pc, #296]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fe f9b4 	bl	8003a68 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005704:	f7fe f9b0 	bl	8003a68 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e20c      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005716:	4b41      	ldr	r3, [pc, #260]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0ef      	beq.n	8005704 <HAL_RCC_OscConfig+0x3ec>
 8005724:	e01b      	b.n	800575e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005726:	4b3d      	ldr	r3, [pc, #244]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572c:	4a3b      	ldr	r2, [pc, #236]	; (800581c <HAL_RCC_OscConfig+0x504>)
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005736:	f7fe f997 	bl	8003a68 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800573e:	f7fe f993 	bl	8003a68 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e1ef      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005750:	4b32      	ldr	r3, [pc, #200]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1ef      	bne.n	800573e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80a6 	beq.w	80058b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800576c:	2300      	movs	r3, #0
 800576e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005770:	4b2a      	ldr	r3, [pc, #168]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <HAL_RCC_OscConfig+0x504>)
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	4a26      	ldr	r2, [pc, #152]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005786:	6593      	str	r3, [r2, #88]	; 0x58
 8005788:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_RCC_OscConfig+0x504>)
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005794:	2301      	movs	r3, #1
 8005796:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005798:	4b21      	ldr	r3, [pc, #132]	; (8005820 <HAL_RCC_OscConfig+0x508>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d118      	bne.n	80057d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a4:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <HAL_RCC_OscConfig+0x508>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <HAL_RCC_OscConfig+0x508>)
 80057aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b0:	f7fe f95a 	bl	8003a68 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b8:	f7fe f956 	bl	8003a68 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1b2      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <HAL_RCC_OscConfig+0x508>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d108      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4d8>
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	4a0d      	ldr	r2, [pc, #52]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057ee:	e029      	b.n	8005844 <HAL_RCC_OscConfig+0x52c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d115      	bne.n	8005824 <HAL_RCC_OscConfig+0x50c>
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <HAL_RCC_OscConfig+0x504>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	4a07      	ldr	r2, [pc, #28]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005800:	f043 0304 	orr.w	r3, r3, #4
 8005804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <HAL_RCC_OscConfig+0x504>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580e:	4a03      	ldr	r2, [pc, #12]	; (800581c <HAL_RCC_OscConfig+0x504>)
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005818:	e014      	b.n	8005844 <HAL_RCC_OscConfig+0x52c>
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
 8005820:	40007000 	.word	0x40007000
 8005824:	4b9a      	ldr	r3, [pc, #616]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	4a99      	ldr	r2, [pc, #612]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005834:	4b96      	ldr	r3, [pc, #600]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	4a95      	ldr	r2, [pc, #596]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 800583c:	f023 0304 	bic.w	r3, r3, #4
 8005840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d016      	beq.n	800587a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584c:	f7fe f90c 	bl	8003a68 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7fe f908 	bl	8003a68 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e162      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800586a:	4b89      	ldr	r3, [pc, #548]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0ed      	beq.n	8005854 <HAL_RCC_OscConfig+0x53c>
 8005878:	e015      	b.n	80058a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587a:	f7fe f8f5 	bl	8003a68 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005880:	e00a      	b.n	8005898 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fe f8f1 	bl	8003a68 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e14b      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005898:	4b7d      	ldr	r3, [pc, #500]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1ed      	bne.n	8005882 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058a6:	7ffb      	ldrb	r3, [r7, #31]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d105      	bne.n	80058b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ac:	4b78      	ldr	r3, [pc, #480]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b0:	4a77      	ldr	r2, [pc, #476]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80058b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03c      	beq.n	800593e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01c      	beq.n	8005906 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058cc:	4b70      	ldr	r3, [pc, #448]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80058ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d2:	4a6f      	ldr	r2, [pc, #444]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fe f8c4 	bl	8003a68 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058e4:	f7fe f8c0 	bl	8003a68 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e11c      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058f6:	4b66      	ldr	r3, [pc, #408]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80058f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0ef      	beq.n	80058e4 <HAL_RCC_OscConfig+0x5cc>
 8005904:	e01b      	b.n	800593e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005906:	4b62      	ldr	r3, [pc, #392]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800590c:	4a60      	ldr	r2, [pc, #384]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fe f8a7 	bl	8003a68 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800591e:	f7fe f8a3 	bl	8003a68 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e0ff      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005930:	4b57      	ldr	r3, [pc, #348]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1ef      	bne.n	800591e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 80f3 	beq.w	8005b2e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	2b02      	cmp	r3, #2
 800594e:	f040 80c9 	bne.w	8005ae4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005952:	4b4f      	ldr	r3, [pc, #316]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f003 0203 	and.w	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	429a      	cmp	r2, r3
 8005964:	d12c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	3b01      	subs	r3, #1
 8005972:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d123      	bne.n	80059c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005984:	429a      	cmp	r2, r3
 8005986:	d11b      	bne.n	80059c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005994:	429a      	cmp	r2, r3
 8005996:	d113      	bne.n	80059c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	3b01      	subs	r3, #1
 80059a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d109      	bne.n	80059c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	3b01      	subs	r3, #1
 80059ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d06b      	beq.n	8005a98 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d062      	beq.n	8005a8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059c6:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0ac      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80059dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059e2:	f7fe f841 	bl	8003a68 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fe f83d 	bl	8003a68 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e099      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a08:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCC_OscConfig+0x77c>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	0112      	lsls	r2, r2, #4
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a22:	0212      	lsls	r2, r2, #8
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a2a:	0852      	lsrs	r2, r2, #1
 8005a2c:	3a01      	subs	r2, #1
 8005a2e:	0552      	lsls	r2, r2, #21
 8005a30:	4311      	orrs	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a36:	0852      	lsrs	r2, r2, #1
 8005a38:	3a01      	subs	r2, #1
 8005a3a:	0652      	lsls	r2, r2, #25
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a42:	06d2      	lsls	r2, r2, #27
 8005a44:	430a      	orrs	r2, r1
 8005a46:	4912      	ldr	r1, [pc, #72]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0f      	ldr	r2, [pc, #60]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a64:	f7fe f800 	bl	8003a68 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6c:	f7fd fffc 	bl	8003a68 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e058      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <HAL_RCC_OscConfig+0x778>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a8a:	e050      	b.n	8005b2e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e04f      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
 8005a90:	40021000 	.word	0x40021000
 8005a94:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a98:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d144      	bne.n	8005b2e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a23      	ldr	r2, [pc, #140]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab0:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005abc:	f7fd ffd4 	bl	8003a68 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fd ffd0 	bl	8003a68 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e02c      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad6:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x7ac>
 8005ae2:	e024      	b.n	8005b2e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b0c      	cmp	r3, #12
 8005ae8:	d01f      	beq.n	8005b2a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a12      	ldr	r2, [pc, #72]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af6:	f7fd ffb7 	bl	8003a68 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afe:	f7fd ffb3 	bl	8003a68 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e00f      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	4905      	ldr	r1, [pc, #20]	; (8005b38 <HAL_RCC_OscConfig+0x820>)
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_OscConfig+0x824>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60cb      	str	r3, [r1, #12]
 8005b28:	e001      	b.n	8005b2e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	feeefffc 	.word	0xfeeefffc

08005b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0e7      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4b75      	ldr	r3, [pc, #468]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d910      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b72      	ldr	r3, [pc, #456]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 0207 	bic.w	r2, r3, #7
 8005b6a:	4970      	ldr	r1, [pc, #448]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0cf      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d010      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	4b66      	ldr	r3, [pc, #408]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d908      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba0:	4b63      	ldr	r3, [pc, #396]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4960      	ldr	r1, [pc, #384]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d04c      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc6:	4b5a      	ldr	r3, [pc, #360]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d121      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0a6      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d107      	bne.n	8005bee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bde:	4b54      	ldr	r3, [pc, #336]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d115      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e09a      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d107      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bf6:	4b4e      	ldr	r3, [pc, #312]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e08e      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c06:	4b4a      	ldr	r3, [pc, #296]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e086      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c16:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f023 0203 	bic.w	r2, r3, #3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4943      	ldr	r1, [pc, #268]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c28:	f7fd ff1e 	bl	8003a68 <HAL_GetTick>
 8005c2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c30:	f7fd ff1a 	bl	8003a68 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e06e      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c46:	4b3a      	ldr	r3, [pc, #232]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 020c 	and.w	r2, r3, #12
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d1eb      	bne.n	8005c30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d010      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d208      	bcs.n	8005c86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c74:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	492b      	ldr	r1, [pc, #172]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c86:	4b29      	ldr	r3, [pc, #164]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d210      	bcs.n	8005cb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c94:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f023 0207 	bic.w	r2, r3, #7
 8005c9c:	4923      	ldr	r1, [pc, #140]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca4:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <HAL_RCC_ClockConfig+0x1ec>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e036      	b.n	8005d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	4918      	ldr	r1, [pc, #96]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ce0:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4910      	ldr	r1, [pc, #64]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cf4:	f000 f824 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	490b      	ldr	r1, [pc, #44]	; (8005d34 <HAL_RCC_ClockConfig+0x1f4>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d10:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <HAL_RCC_ClockConfig+0x1f8>)
 8005d12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d14:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <HAL_RCC_ClockConfig+0x1fc>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fd fe55 	bl	80039c8 <HAL_InitTick>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d22:	7afb      	ldrb	r3, [r7, #11]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40022000 	.word	0x40022000
 8005d30:	40021000 	.word	0x40021000
 8005d34:	0800f428 	.word	0x0800f428
 8005d38:	20000040 	.word	0x20000040
 8005d3c:	20000044 	.word	0x20000044

08005d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d58:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0x34>
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	2b0c      	cmp	r3, #12
 8005d6c:	d121      	bne.n	8005db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d11e      	bne.n	8005db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d74:	4b34      	ldr	r3, [pc, #208]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d80:	4b31      	ldr	r3, [pc, #196]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e005      	b.n	8005d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d90:	4b2d      	ldr	r3, [pc, #180]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10d      	bne.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005db0:	e00a      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d102      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e004      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dc4:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b0c      	cmp	r3, #12
 8005dcc:	d134      	bne.n	8005e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d003      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0xac>
 8005de4:	e005      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8005de8:	617b      	str	r3, [r7, #20]
      break;
 8005dea:	e005      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005dec:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dee:	617b      	str	r3, [r7, #20]
      break;
 8005df0:	e002      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	617b      	str	r3, [r7, #20]
      break;
 8005df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005df8:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	091b      	lsrs	r3, r3, #4
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	3301      	adds	r3, #1
 8005e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e06:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	fb03 f202 	mul.w	r2, r3, r2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	0e5b      	lsrs	r3, r3, #25
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	3301      	adds	r3, #1
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e38:	69bb      	ldr	r3, [r7, #24]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3724      	adds	r7, #36	; 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	0800f440 	.word	0x0800f440
 8005e50:	00f42400 	.word	0x00f42400
 8005e54:	007a1200 	.word	0x007a1200

08005e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000040 	.word	0x20000040

08005e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e74:	f7ff fff0 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	4904      	ldr	r1, [pc, #16]	; (8005e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e86:	5ccb      	ldrb	r3, [r1, r3]
 8005e88:	f003 031f 	and.w	r3, r3, #31
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40021000 	.word	0x40021000
 8005e98:	0800f438 	.word	0x0800f438

08005e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ea0:	f7ff ffda 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	0adb      	lsrs	r3, r3, #11
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	4904      	ldr	r1, [pc, #16]	; (8005ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	0800f438 	.word	0x0800f438

08005ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ed4:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ee0:	f7ff f9b6 	bl	8005250 <HAL_PWREx_GetVoltageRange>
 8005ee4:	6178      	str	r0, [r7, #20]
 8005ee6:	e014      	b.n	8005f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef4:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f00:	f7ff f9a6 	bl	8005250 <HAL_PWREx_GetVoltageRange>
 8005f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f06:	4b1e      	ldr	r3, [pc, #120]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0a:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f18:	d10b      	bne.n	8005f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b80      	cmp	r3, #128	; 0x80
 8005f1e:	d919      	bls.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2ba0      	cmp	r3, #160	; 0xa0
 8005f24:	d902      	bls.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f26:	2302      	movs	r3, #2
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	e013      	b.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e010      	b.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b80      	cmp	r3, #128	; 0x80
 8005f36:	d902      	bls.n	8005f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f38:	2303      	movs	r3, #3
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	e00a      	b.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d102      	bne.n	8005f4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f44:	2302      	movs	r3, #2
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e004      	b.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b70      	cmp	r3, #112	; 0x70
 8005f4e:	d101      	bne.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f50:	2301      	movs	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 0207 	bic.w	r2, r3, #7
 8005f5c:	4909      	ldr	r1, [pc, #36]	; (8005f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d001      	beq.n	8005f76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40021000 	.word	0x40021000
 8005f84:	40022000 	.word	0x40022000

08005f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f90:	2300      	movs	r3, #0
 8005f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f94:	2300      	movs	r3, #0
 8005f96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d031      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fac:	d01a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005fae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fb2:	d814      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fbc:	d10f      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005fbe:	4b5d      	ldr	r3, [pc, #372]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4a5c      	ldr	r2, [pc, #368]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fca:	e00c      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 f9ce 	bl	8006374 <RCCEx_PLLSAI1_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fdc:	e003      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe6:	7cfb      	ldrb	r3, [r7, #19]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10b      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fec:	4b51      	ldr	r3, [pc, #324]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	494e      	ldr	r1, [pc, #312]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006002:	e001      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 809e 	beq.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006016:	2300      	movs	r3, #0
 8006018:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800601a:	4b46      	ldr	r3, [pc, #280]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800602a:	2300      	movs	r3, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006030:	4b40      	ldr	r3, [pc, #256]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	4a3f      	ldr	r2, [pc, #252]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800603a:	6593      	str	r3, [r2, #88]	; 0x58
 800603c:	4b3d      	ldr	r3, [pc, #244]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006048:	2301      	movs	r3, #1
 800604a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800604c:	4b3a      	ldr	r3, [pc, #232]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a39      	ldr	r2, [pc, #228]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006058:	f7fd fd06 	bl	8003a68 <HAL_GetTick>
 800605c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800605e:	e009      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006060:	f7fd fd02 	bl	8003a68 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d902      	bls.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	74fb      	strb	r3, [r7, #19]
        break;
 8006072:	e005      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006074:	4b30      	ldr	r3, [pc, #192]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0ef      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d15a      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006086:	4b2b      	ldr	r3, [pc, #172]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006090:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01e      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d019      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060a2:	4b24      	ldr	r3, [pc, #144]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060ae:	4b21      	ldr	r3, [pc, #132]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b4:	4a1f      	ldr	r2, [pc, #124]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060ce:	4a19      	ldr	r2, [pc, #100]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d016      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fd fcc2 	bl	8003a68 <HAL_GetTick>
 80060e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e6:	e00b      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e8:	f7fd fcbe 	bl	8003a68 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d902      	bls.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	74fb      	strb	r3, [r7, #19]
            break;
 80060fe:	e006      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ec      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800610e:	7cfb      	ldrb	r3, [r7, #19]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006122:	4904      	ldr	r1, [pc, #16]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800612a:	e009      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	74bb      	strb	r3, [r7, #18]
 8006130:	e006      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006132:	bf00      	nop
 8006134:	40021000 	.word	0x40021000
 8006138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	7cfb      	ldrb	r3, [r7, #19]
 800613e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006140:	7c7b      	ldrb	r3, [r7, #17]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d105      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006146:	4b8a      	ldr	r3, [pc, #552]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614a:	4a89      	ldr	r2, [pc, #548]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800614c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006150:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800615e:	4b84      	ldr	r3, [pc, #528]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f023 0203 	bic.w	r2, r3, #3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	4980      	ldr	r1, [pc, #512]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006180:	4b7b      	ldr	r3, [pc, #492]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	f023 020c 	bic.w	r2, r3, #12
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	4978      	ldr	r1, [pc, #480]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061a2:	4b73      	ldr	r3, [pc, #460]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	496f      	ldr	r1, [pc, #444]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061c4:	4b6a      	ldr	r3, [pc, #424]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	4967      	ldr	r1, [pc, #412]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061e6:	4b62      	ldr	r3, [pc, #392]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	495e      	ldr	r1, [pc, #376]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006208:	4b59      	ldr	r3, [pc, #356]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	4956      	ldr	r1, [pc, #344]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800622a:	4b51      	ldr	r3, [pc, #324]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800622c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006230:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	494d      	ldr	r1, [pc, #308]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d028      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800624c:	4b48      	ldr	r3, [pc, #288]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	4945      	ldr	r1, [pc, #276]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800626a:	d106      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800626c:	4b40      	ldr	r3, [pc, #256]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a3f      	ldr	r2, [pc, #252]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006276:	60d3      	str	r3, [r2, #12]
 8006278:	e011      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006282:	d10c      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f872 	bl	8006374 <RCCEx_PLLSAI1_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006294:	7cfb      	ldrb	r3, [r7, #19]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800629a:	7cfb      	ldrb	r3, [r7, #19]
 800629c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d028      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062aa:	4b31      	ldr	r3, [pc, #196]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	492d      	ldr	r1, [pc, #180]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c8:	d106      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ca:	4b29      	ldr	r3, [pc, #164]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	4a28      	ldr	r2, [pc, #160]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d4:	60d3      	str	r3, [r2, #12]
 80062d6:	e011      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062e0:	d10c      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2101      	movs	r1, #1
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f843 	bl	8006374 <RCCEx_PLLSAI1_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80062f8:	7cfb      	ldrb	r3, [r7, #19]
 80062fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01c      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800630a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	4916      	ldr	r1, [pc, #88]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006326:	d10c      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	2102      	movs	r1, #2
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f820 	bl	8006374 <RCCEx_PLLSAI1_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800634e:	4b08      	ldr	r3, [pc, #32]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635c:	4904      	ldr	r1, [pc, #16]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006364:	7cbb      	ldrb	r3, [r7, #18]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40021000 	.word	0x40021000

08006374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006382:	4b74      	ldr	r3, [pc, #464]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d018      	beq.n	80063c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800638e:	4b71      	ldr	r3, [pc, #452]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f003 0203 	and.w	r2, r3, #3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d10d      	bne.n	80063ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
       ||
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063a6:	4b6b      	ldr	r3, [pc, #428]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	091b      	lsrs	r3, r3, #4
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
       ||
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d047      	beq.n	800644a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
 80063be:	e044      	b.n	800644a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d018      	beq.n	80063fa <RCCEx_PLLSAI1_Config+0x86>
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d825      	bhi.n	8006418 <RCCEx_PLLSAI1_Config+0xa4>
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d002      	beq.n	80063d6 <RCCEx_PLLSAI1_Config+0x62>
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d009      	beq.n	80063e8 <RCCEx_PLLSAI1_Config+0x74>
 80063d4:	e020      	b.n	8006418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063d6:	4b5f      	ldr	r3, [pc, #380]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d11d      	bne.n	800641e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063e6:	e01a      	b.n	800641e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063e8:	4b5a      	ldr	r3, [pc, #360]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d116      	bne.n	8006422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063f8:	e013      	b.n	8006422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10f      	bne.n	8006426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006406:	4b53      	ldr	r3, [pc, #332]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006416:	e006      	b.n	8006426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
      break;
 800641c:	e004      	b.n	8006428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006426:	bf00      	nop
    }

    if(status == HAL_OK)
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800642e:	4b49      	ldr	r3, [pc, #292]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6819      	ldr	r1, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	3b01      	subs	r3, #1
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	430b      	orrs	r3, r1
 8006444:	4943      	ldr	r1, [pc, #268]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006446:	4313      	orrs	r3, r2
 8006448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d17c      	bne.n	800654a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006450:	4b40      	ldr	r3, [pc, #256]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a3f      	ldr	r2, [pc, #252]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800645a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800645c:	f7fd fb04 	bl	8003a68 <HAL_GetTick>
 8006460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006462:	e009      	b.n	8006478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006464:	f7fd fb00 	bl	8003a68 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d902      	bls.n	8006478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	73fb      	strb	r3, [r7, #15]
        break;
 8006476:	e005      	b.n	8006484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006478:	4b36      	ldr	r3, [pc, #216]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1ef      	bne.n	8006464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d15f      	bne.n	800654a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d110      	bne.n	80064b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006490:	4b30      	ldr	r3, [pc, #192]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6892      	ldr	r2, [r2, #8]
 80064a0:	0211      	lsls	r1, r2, #8
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	68d2      	ldr	r2, [r2, #12]
 80064a6:	06d2      	lsls	r2, r2, #27
 80064a8:	430a      	orrs	r2, r1
 80064aa:	492a      	ldr	r1, [pc, #168]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	610b      	str	r3, [r1, #16]
 80064b0:	e027      	b.n	8006502 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d112      	bne.n	80064de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064b8:	4b26      	ldr	r3, [pc, #152]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80064c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6892      	ldr	r2, [r2, #8]
 80064c8:	0211      	lsls	r1, r2, #8
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6912      	ldr	r2, [r2, #16]
 80064ce:	0852      	lsrs	r2, r2, #1
 80064d0:	3a01      	subs	r2, #1
 80064d2:	0552      	lsls	r2, r2, #21
 80064d4:	430a      	orrs	r2, r1
 80064d6:	491f      	ldr	r1, [pc, #124]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	610b      	str	r3, [r1, #16]
 80064dc:	e011      	b.n	8006502 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064de:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6892      	ldr	r2, [r2, #8]
 80064ee:	0211      	lsls	r1, r2, #8
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6952      	ldr	r2, [r2, #20]
 80064f4:	0852      	lsrs	r2, r2, #1
 80064f6:	3a01      	subs	r2, #1
 80064f8:	0652      	lsls	r2, r2, #25
 80064fa:	430a      	orrs	r2, r1
 80064fc:	4915      	ldr	r1, [pc, #84]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006502:	4b14      	ldr	r3, [pc, #80]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a13      	ldr	r2, [pc, #76]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006508:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800650c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650e:	f7fd faab 	bl	8003a68 <HAL_GetTick>
 8006512:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006514:	e009      	b.n	800652a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006516:	f7fd faa7 	bl	8003a68 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d902      	bls.n	800652a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	73fb      	strb	r3, [r7, #15]
          break;
 8006528:	e005      	b.n	8006536 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0ef      	beq.n	8006516 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d106      	bne.n	800654a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	4903      	ldr	r1, [pc, #12]	; (8006554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40021000 	.word	0x40021000

08006558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e040      	b.n	80065ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fc ff78 	bl	8003470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2224      	movs	r2, #36	; 0x24
 8006584:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 feb0 	bl	8007304 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc81 	bl	8006eac <UART_SetConfig>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e01b      	b.n	80065ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 ff2f 	bl	8007448 <UART_CheckIdleState>
 80065ea:	4603      	mov	r3, r0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006608:	2b20      	cmp	r3, #32
 800660a:	d137      	bne.n	800667c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_UART_Receive_DMA+0x24>
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e030      	b.n	800667e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <HAL_UART_Receive_DMA+0x94>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01f      	beq.n	800666c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d018      	beq.n	800666c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	613b      	str	r3, [r7, #16]
   return(result);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	61bb      	str	r3, [r7, #24]
   return(result);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e6      	bne.n	800663a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	461a      	mov	r2, r3
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fff8 	bl	8007668 <UART_Start_Receive_DMA>
 8006678:	4603      	mov	r3, r0
 800667a:	e000      	b.n	800667e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800667c:	2302      	movs	r3, #2
  }
}
 800667e:	4618      	mov	r0, r3
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40008000 	.word	0x40008000

0800668c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b0a0      	sub	sp, #128	; 0x80
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80066a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066a4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80066a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b4:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80066b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80066c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80066d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066e6:	657a      	str	r2, [r7, #84]	; 0x54
 80066e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e5      	bne.n	80066c6 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d118      	bne.n	8006734 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	677b      	str	r3, [r7, #116]	; 0x74
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006720:	643b      	str	r3, [r7, #64]	; 0x40
 8006722:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e6      	bne.n	8006702 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d137      	bne.n	80067b2 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	61fb      	str	r3, [r7, #28]
   return(result);
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006758:	673b      	str	r3, [r7, #112]	; 0x70
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	2b00      	cmp	r3, #0
 800677c:	d019      	beq.n	80067b2 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	2200      	movs	r2, #0
 8006784:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd fd0e 	bl	80041ac <HAL_DMA_Abort>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4618      	mov	r0, r3
 800679c:	f7fd fe34 	bl	8004408 <HAL_DMA_GetError>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d105      	bne.n	80067b2 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2210      	movs	r2, #16
 80067aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e063      	b.n	800687a <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d137      	bne.n	8006830 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067e0:	61ba      	str	r2, [r7, #24]
 80067e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6979      	ldr	r1, [r7, #20]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	613b      	str	r3, [r7, #16]
   return(result);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e5      	bne.n	80067c0 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d019      	beq.n	8006830 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	2200      	movs	r2, #0
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006808:	4618      	mov	r0, r3
 800680a:	f7fd fccf 	bl	80041ac <HAL_DMA_Abort>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006818:	4618      	mov	r0, r3
 800681a:	f7fd fdf5 	bl	8004408 <HAL_DMA_GetError>
 800681e:	4603      	mov	r3, r0
 8006820:	2b20      	cmp	r3, #32
 8006822:	d105      	bne.n	8006830 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2210      	movs	r2, #16
 8006828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e024      	b.n	800687a <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	220f      	movs	r2, #15
 8006846:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	8b1b      	ldrh	r3, [r3, #24]
 800684e:	b29a      	uxth	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0208 	orr.w	r2, r2, #8
 8006858:	b292      	uxth	r2, r2
 800685a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3780      	adds	r7, #128	; 0x80
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b0ba      	sub	sp, #232	; 0xe8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80068b2:	4013      	ands	r3, r2
 80068b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d115      	bne.n	80068ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00f      	beq.n	80068ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 82ae 	beq.w	8006e3e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
      }
      return;
 80068ea:	e2a8      	b.n	8006e3e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80068ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8117 	beq.w	8006b24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006902:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006906:	4b85      	ldr	r3, [pc, #532]	; (8006b1c <HAL_UART_IRQHandler+0x298>)
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 810a 	beq.w	8006b24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d011      	beq.n	8006940 <HAL_UART_IRQHandler+0xbc>
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2201      	movs	r2, #1
 800692e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d011      	beq.n	8006970 <HAL_UART_IRQHandler+0xec>
 800694c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2202      	movs	r2, #2
 800695e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006966:	f043 0204 	orr.w	r2, r3, #4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d011      	beq.n	80069a0 <HAL_UART_IRQHandler+0x11c>
 800697c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2204      	movs	r2, #4
 800698e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006996:	f043 0202 	orr.w	r2, r3, #2
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d017      	beq.n	80069dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d105      	bne.n	80069c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00b      	beq.n	80069dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2208      	movs	r2, #8
 80069ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d2:	f043 0208 	orr.w	r2, r3, #8
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d012      	beq.n	8006a0e <HAL_UART_IRQHandler+0x18a>
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00c      	beq.n	8006a0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8214 	beq.w	8006e42 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	d005      	beq.n	8006a66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d04f      	beq.n	8006b06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fec4 	bl	80077f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	d141      	bne.n	8006afe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1d9      	bne.n	8006a7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d013      	beq.n	8006af6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad2:	4a13      	ldr	r2, [pc, #76]	; (8006b20 <HAL_UART_IRQHandler+0x29c>)
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fd fba4 	bl	8004228 <HAL_DMA_Abort_IT>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d017      	beq.n	8006b16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	e00f      	b.n	8006b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9c2 	bl	8006e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	e00b      	b.n	8006b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9be 	bl	8006e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b04:	e007      	b.n	8006b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f9ba 	bl	8006e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006b14:	e195      	b.n	8006e42 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b16:	bf00      	nop
    return;
 8006b18:	e193      	b.n	8006e42 <HAL_UART_IRQHandler+0x5be>
 8006b1a:	bf00      	nop
 8006b1c:	04000120 	.word	0x04000120
 8006b20:	08007aa5 	.word	0x08007aa5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	f040 814e 	bne.w	8006dca <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b32:	f003 0310 	and.w	r3, r3, #16
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8147 	beq.w	8006dca <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8140 	beq.w	8006dca <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	f040 80b8 	bne.w	8006cd2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8167 	beq.w	8006e46 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b82:	429a      	cmp	r2, r3
 8006b84:	f080 815f 	bcs.w	8006e46 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 8086 	bne.w	8006cb0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1da      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e1      	bne.n	8006bee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e3      	bne.n	8006c2a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c80:	f023 0310 	bic.w	r3, r3, #16
 8006c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e4      	bne.n	8006c70 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fd fa7e 	bl	80041ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f8e2 	bl	8006e94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cd0:	e0b9      	b.n	8006e46 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80ab 	beq.w	8006e4a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80a6 	beq.w	8006e4a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d20:	647b      	str	r3, [r7, #68]	; 0x44
 8006d22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e4      	bne.n	8006cfe <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	623b      	str	r3, [r7, #32]
   return(result);
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d58:	633a      	str	r2, [r7, #48]	; 0x30
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e3      	bne.n	8006d34 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f023 0310 	bic.w	r3, r3, #16
 8006d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	69b9      	ldr	r1, [r7, #24]
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	617b      	str	r3, [r7, #20]
   return(result);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e4      	bne.n	8006d80 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f866 	bl	8006e94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dc8:	e03f      	b.n	8006e4a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00e      	beq.n	8006df4 <HAL_UART_IRQHandler+0x570>
 8006dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d008      	beq.n	8006df4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006dea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fe99 	bl	8007b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006df2:	e02d      	b.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00e      	beq.n	8006e1e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01c      	beq.n	8006e4e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
    }
    return;
 8006e1c:	e017      	b.n	8006e4e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d012      	beq.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fe4a 	bl	8007ad0 <UART_EndTransmit_IT>
    return;
 8006e3c:	e008      	b.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006e3e:	bf00      	nop
 8006e40:	e006      	b.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006e42:	bf00      	nop
 8006e44:	e004      	b.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006e46:	bf00      	nop
 8006e48:	e002      	b.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006e4a:	bf00      	nop
 8006e4c:	e000      	b.n	8006e50 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006e4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006e50:	37e8      	adds	r7, #232	; 0xe8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop

08006e58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb0:	b08a      	sub	sp, #40	; 0x28
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4bb4      	ldr	r3, [pc, #720]	; (80071ac <UART_SetConfig+0x300>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4aa9      	ldr	r2, [pc, #676]	; (80071b0 <UART_SetConfig+0x304>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f14:	4313      	orrs	r3, r2
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4aa0      	ldr	r2, [pc, #640]	; (80071b4 <UART_SetConfig+0x308>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d126      	bne.n	8006f84 <UART_SetConfig+0xd8>
 8006f36:	4ba0      	ldr	r3, [pc, #640]	; (80071b8 <UART_SetConfig+0x30c>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d81b      	bhi.n	8006f7c <UART_SetConfig+0xd0>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <UART_SetConfig+0xa0>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f5d 	.word	0x08006f5d
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006f75 	.word	0x08006f75
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f62:	e080      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006f64:	2302      	movs	r3, #2
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6a:	e07c      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f72:	e078      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006f74:	2308      	movs	r3, #8
 8006f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f7a:	e074      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f82:	e070      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a8c      	ldr	r2, [pc, #560]	; (80071bc <UART_SetConfig+0x310>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d138      	bne.n	8007000 <UART_SetConfig+0x154>
 8006f8e:	4b8a      	ldr	r3, [pc, #552]	; (80071b8 <UART_SetConfig+0x30c>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	f003 030c 	and.w	r3, r3, #12
 8006f98:	2b0c      	cmp	r3, #12
 8006f9a:	d82d      	bhi.n	8006ff8 <UART_SetConfig+0x14c>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0xf8>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fd9 	.word	0x08006fd9
 8006fa8:	08006ff9 	.word	0x08006ff9
 8006fac:	08006ff9 	.word	0x08006ff9
 8006fb0:	08006ff9 	.word	0x08006ff9
 8006fb4:	08006fe9 	.word	0x08006fe9
 8006fb8:	08006ff9 	.word	0x08006ff9
 8006fbc:	08006ff9 	.word	0x08006ff9
 8006fc0:	08006ff9 	.word	0x08006ff9
 8006fc4:	08006fe1 	.word	0x08006fe1
 8006fc8:	08006ff9 	.word	0x08006ff9
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	08006ff9 	.word	0x08006ff9
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fde:	e042      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e03e      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fee:	e03a      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff6:	e036      	b.n	8007066 <UART_SetConfig+0x1ba>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffe:	e032      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a6a      	ldr	r2, [pc, #424]	; (80071b0 <UART_SetConfig+0x304>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d12a      	bne.n	8007060 <UART_SetConfig+0x1b4>
 800700a:	4b6b      	ldr	r3, [pc, #428]	; (80071b8 <UART_SetConfig+0x30c>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007018:	d01a      	beq.n	8007050 <UART_SetConfig+0x1a4>
 800701a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800701e:	d81b      	bhi.n	8007058 <UART_SetConfig+0x1ac>
 8007020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007024:	d00c      	beq.n	8007040 <UART_SetConfig+0x194>
 8007026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702a:	d815      	bhi.n	8007058 <UART_SetConfig+0x1ac>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <UART_SetConfig+0x18c>
 8007030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007034:	d008      	beq.n	8007048 <UART_SetConfig+0x19c>
 8007036:	e00f      	b.n	8007058 <UART_SetConfig+0x1ac>
 8007038:	2300      	movs	r3, #0
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703e:	e012      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007040:	2302      	movs	r3, #2
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007046:	e00e      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704e:	e00a      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007056:	e006      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705e:	e002      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a51      	ldr	r2, [pc, #324]	; (80071b0 <UART_SetConfig+0x304>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d17a      	bne.n	8007166 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007074:	2b08      	cmp	r3, #8
 8007076:	d824      	bhi.n	80070c2 <UART_SetConfig+0x216>
 8007078:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <UART_SetConfig+0x1d4>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	080070a5 	.word	0x080070a5
 8007084:	080070c3 	.word	0x080070c3
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070c3 	.word	0x080070c3
 8007090:	080070b3 	.word	0x080070b3
 8007094:	080070c3 	.word	0x080070c3
 8007098:	080070c3 	.word	0x080070c3
 800709c:	080070c3 	.word	0x080070c3
 80070a0:	080070bb 	.word	0x080070bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a4:	f7fe fee4 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 80070a8:	61f8      	str	r0, [r7, #28]
        break;
 80070aa:	e010      	b.n	80070ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070ac:	4b44      	ldr	r3, [pc, #272]	; (80071c0 <UART_SetConfig+0x314>)
 80070ae:	61fb      	str	r3, [r7, #28]
        break;
 80070b0:	e00d      	b.n	80070ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b2:	f7fe fe45 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 80070b6:	61f8      	str	r0, [r7, #28]
        break;
 80070b8:	e009      	b.n	80070ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070be:	61fb      	str	r3, [r7, #28]
        break;
 80070c0:	e005      	b.n	80070ce <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8107 	beq.w	80072e4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	4413      	add	r3, r2
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d305      	bcc.n	80070f2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d903      	bls.n	80070fa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070f8:	e0f4      	b.n	80072e4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2200      	movs	r2, #0
 80070fe:	461c      	mov	r4, r3
 8007100:	4615      	mov	r5, r2
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	022b      	lsls	r3, r5, #8
 800710c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007110:	0222      	lsls	r2, r4, #8
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	6849      	ldr	r1, [r1, #4]
 8007116:	0849      	lsrs	r1, r1, #1
 8007118:	2000      	movs	r0, #0
 800711a:	4688      	mov	r8, r1
 800711c:	4681      	mov	r9, r0
 800711e:	eb12 0a08 	adds.w	sl, r2, r8
 8007122:	eb43 0b09 	adc.w	fp, r3, r9
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	603b      	str	r3, [r7, #0]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007134:	4650      	mov	r0, sl
 8007136:	4659      	mov	r1, fp
 8007138:	f7f9 fda6 	bl	8000c88 <__aeabi_uldivmod>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4613      	mov	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714a:	d308      	bcc.n	800715e <UART_SetConfig+0x2b2>
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007152:	d204      	bcs.n	800715e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	60da      	str	r2, [r3, #12]
 800715c:	e0c2      	b.n	80072e4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007164:	e0be      	b.n	80072e4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716e:	d16a      	bne.n	8007246 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007174:	2b08      	cmp	r3, #8
 8007176:	d834      	bhi.n	80071e2 <UART_SetConfig+0x336>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <UART_SetConfig+0x2d4>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071c5 	.word	0x080071c5
 8007188:	080071cd 	.word	0x080071cd
 800718c:	080071e3 	.word	0x080071e3
 8007190:	080071d3 	.word	0x080071d3
 8007194:	080071e3 	.word	0x080071e3
 8007198:	080071e3 	.word	0x080071e3
 800719c:	080071e3 	.word	0x080071e3
 80071a0:	080071db 	.word	0x080071db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a4:	f7fe fe64 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 80071a8:	61f8      	str	r0, [r7, #28]
        break;
 80071aa:	e020      	b.n	80071ee <UART_SetConfig+0x342>
 80071ac:	efff69f3 	.word	0xefff69f3
 80071b0:	40008000 	.word	0x40008000
 80071b4:	40013800 	.word	0x40013800
 80071b8:	40021000 	.word	0x40021000
 80071bc:	40004400 	.word	0x40004400
 80071c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c4:	f7fe fe6a 	bl	8005e9c <HAL_RCC_GetPCLK2Freq>
 80071c8:	61f8      	str	r0, [r7, #28]
        break;
 80071ca:	e010      	b.n	80071ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071cc:	4b4c      	ldr	r3, [pc, #304]	; (8007300 <UART_SetConfig+0x454>)
 80071ce:	61fb      	str	r3, [r7, #28]
        break;
 80071d0:	e00d      	b.n	80071ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071d2:	f7fe fdb5 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 80071d6:	61f8      	str	r0, [r7, #28]
        break;
 80071d8:	e009      	b.n	80071ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071de:	61fb      	str	r3, [r7, #28]
        break;
 80071e0:	e005      	b.n	80071ee <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d077      	beq.n	80072e4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	005a      	lsls	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	085b      	lsrs	r3, r3, #1
 80071fe:	441a      	add	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b0f      	cmp	r3, #15
 800720e:	d916      	bls.n	800723e <UART_SetConfig+0x392>
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007216:	d212      	bcs.n	800723e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f023 030f 	bic.w	r3, r3, #15
 8007220:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	085b      	lsrs	r3, r3, #1
 8007226:	b29b      	uxth	r3, r3
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	b29a      	uxth	r2, r3
 800722e:	8afb      	ldrh	r3, [r7, #22]
 8007230:	4313      	orrs	r3, r2
 8007232:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	8afa      	ldrh	r2, [r7, #22]
 800723a:	60da      	str	r2, [r3, #12]
 800723c:	e052      	b.n	80072e4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007244:	e04e      	b.n	80072e4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800724a:	2b08      	cmp	r3, #8
 800724c:	d827      	bhi.n	800729e <UART_SetConfig+0x3f2>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x3a8>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007279 	.word	0x08007279
 8007258:	08007281 	.word	0x08007281
 800725c:	08007289 	.word	0x08007289
 8007260:	0800729f 	.word	0x0800729f
 8007264:	0800728f 	.word	0x0800728f
 8007268:	0800729f 	.word	0x0800729f
 800726c:	0800729f 	.word	0x0800729f
 8007270:	0800729f 	.word	0x0800729f
 8007274:	08007297 	.word	0x08007297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007278:	f7fe fdfa 	bl	8005e70 <HAL_RCC_GetPCLK1Freq>
 800727c:	61f8      	str	r0, [r7, #28]
        break;
 800727e:	e014      	b.n	80072aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007280:	f7fe fe0c 	bl	8005e9c <HAL_RCC_GetPCLK2Freq>
 8007284:	61f8      	str	r0, [r7, #28]
        break;
 8007286:	e010      	b.n	80072aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007288:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <UART_SetConfig+0x454>)
 800728a:	61fb      	str	r3, [r7, #28]
        break;
 800728c:	e00d      	b.n	80072aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728e:	f7fe fd57 	bl	8005d40 <HAL_RCC_GetSysClockFreq>
 8007292:	61f8      	str	r0, [r7, #28]
        break;
 8007294:	e009      	b.n	80072aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729a:	61fb      	str	r3, [r7, #28]
        break;
 800729c:	e005      	b.n	80072aa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072a8:	bf00      	nop
    }

    if (pclk != 0U)
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d019      	beq.n	80072e4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	085a      	lsrs	r2, r3, #1
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d909      	bls.n	80072de <UART_SetConfig+0x432>
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d0:	d205      	bcs.n	80072de <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60da      	str	r2, [r3, #12]
 80072dc:	e002      	b.n	80072e4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80072f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3728      	adds	r7, #40	; 0x28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072fe:	bf00      	nop
 8007300:	00f42400 	.word	0x00f42400

08007304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01a      	beq.n	800741a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007402:	d10a      	bne.n	800741a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b098      	sub	sp, #96	; 0x60
 800744c:	af02      	add	r7, sp, #8
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007458:	f7fc fb06 	bl	8003a68 <HAL_GetTick>
 800745c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b08      	cmp	r3, #8
 800746a:	d12e      	bne.n	80074ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800746c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007474:	2200      	movs	r2, #0
 8007476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f88c 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d021      	beq.n	80074ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800749a:	653b      	str	r3, [r7, #80]	; 0x50
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a4:	647b      	str	r3, [r7, #68]	; 0x44
 80074a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e6      	bne.n	8007486 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e062      	b.n	8007590 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d149      	bne.n	800756c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074e0:	2200      	movs	r2, #0
 80074e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f856 	bl	8007598 <UART_WaitOnFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d03c      	beq.n	800756c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007510:	633b      	str	r3, [r7, #48]	; 0x30
 8007512:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e6      	bne.n	80074f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3308      	adds	r3, #8
 800752a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	60fb      	str	r3, [r7, #12]
   return(result);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0301 	bic.w	r3, r3, #1
 800753a:	64bb      	str	r3, [r7, #72]	; 0x48
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007544:	61fa      	str	r2, [r7, #28]
 8007546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	69b9      	ldr	r1, [r7, #24]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	617b      	str	r3, [r7, #20]
   return(result);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e5      	bne.n	8007524 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e011      	b.n	8007590 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3758      	adds	r7, #88	; 0x58
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	4613      	mov	r3, r2
 80075a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a8:	e049      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b0:	d045      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b2:	f7fc fa59 	bl	8003a68 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d302      	bcc.n	80075c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e048      	b.n	800765e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d031      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d110      	bne.n	800760a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2208      	movs	r2, #8
 80075ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f8ff 	bl	80077f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2208      	movs	r2, #8
 80075fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e029      	b.n	800765e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007618:	d111      	bne.n	800763e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f8e5 	bl	80077f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e00f      	b.n	800765e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4013      	ands	r3, r2
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	429a      	cmp	r2, r3
 800765a:	d0a6      	beq.n	80075aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b096      	sub	sp, #88	; 0x58
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2222      	movs	r2, #34	; 0x22
 8007690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007698:	2b00      	cmp	r3, #0
 800769a:	d028      	beq.n	80076ee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a0:	4a3e      	ldr	r2, [pc, #248]	; (800779c <UART_Start_Receive_DMA+0x134>)
 80076a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a8:	4a3d      	ldr	r2, [pc, #244]	; (80077a0 <UART_Start_Receive_DMA+0x138>)
 80076aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b0:	4a3c      	ldr	r2, [pc, #240]	; (80077a4 <UART_Start_Receive_DMA+0x13c>)
 80076b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b8:	2200      	movs	r2, #0
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3324      	adds	r3, #36	; 0x24
 80076c6:	4619      	mov	r1, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076cc:	461a      	mov	r2, r3
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	f7fc fd0c 	bl	80040ec <HAL_DMA_Start_IT>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2210      	movs	r2, #16
 80076de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e051      	b.n	8007792 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d018      	beq.n	8007728 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800770a:	657b      	str	r3, [r7, #84]	; 0x54
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007714:	64bb      	str	r3, [r7, #72]	; 0x48
 8007716:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800771a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e6      	bne.n	80076f6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	653b      	str	r3, [r7, #80]	; 0x50
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007748:	637a      	str	r2, [r7, #52]	; 0x34
 800774a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800774e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e5      	bne.n	8007728 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3308      	adds	r3, #8
 8007762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	613b      	str	r3, [r7, #16]
   return(result);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800777c:	623a      	str	r2, [r7, #32]
 800777e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	69f9      	ldr	r1, [r7, #28]
 8007782:	6a3a      	ldr	r2, [r7, #32]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	61bb      	str	r3, [r7, #24]
   return(result);
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e5      	bne.n	800775c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3758      	adds	r7, #88	; 0x58
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	080078bd 	.word	0x080078bd
 80077a0:	080079e9 	.word	0x080079e9
 80077a4:	08007a27 	.word	0x08007a27

080077a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	61bb      	str	r3, [r7, #24]
 80077d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6979      	ldr	r1, [r7, #20]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	613b      	str	r3, [r7, #16]
   return(result);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e6      	bne.n	80077b0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80077e8:	bf00      	nop
 80077ea:	3724      	adds	r7, #36	; 0x24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b095      	sub	sp, #84	; 0x54
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781a:	643b      	str	r3, [r7, #64]	; 0x40
 800781c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e6      	bne.n	80077fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3308      	adds	r3, #8
 8007834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	61fb      	str	r3, [r7, #28]
   return(result);
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	64bb      	str	r3, [r7, #72]	; 0x48
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e5      	bne.n	800782e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007866:	2b01      	cmp	r3, #1
 8007868:	d118      	bne.n	800789c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	60bb      	str	r3, [r7, #8]
   return(result);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f023 0310 	bic.w	r3, r3, #16
 800787e:	647b      	str	r3, [r7, #68]	; 0x44
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6979      	ldr	r1, [r7, #20]
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	613b      	str	r3, [r7, #16]
   return(result);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e6      	bne.n	800786a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078b0:	bf00      	nop
 80078b2:	3754      	adds	r7, #84	; 0x54
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b09c      	sub	sp, #112	; 0x70
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d171      	bne.n	80079bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80078d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078da:	2200      	movs	r2, #0
 80078dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	667b      	str	r3, [r7, #100]	; 0x64
 800792a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007932:	647a      	str	r2, [r7, #68]	; 0x44
 8007934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e5      	bne.n	8007912 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	623b      	str	r3, [r7, #32]
   return(result);
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800795c:	663b      	str	r3, [r7, #96]	; 0x60
 800795e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3308      	adds	r3, #8
 8007964:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007966:	633a      	str	r2, [r7, #48]	; 0x30
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e5      	bne.n	8007946 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800797a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007986:	2b01      	cmp	r3, #1
 8007988:	d118      	bne.n	80079bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	60fb      	str	r3, [r7, #12]
   return(result);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0310 	bic.w	r3, r3, #16
 800799e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	69b9      	ldr	r1, [r7, #24]
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	617b      	str	r3, [r7, #20]
   return(result);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079be:	2200      	movs	r2, #0
 80079c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d107      	bne.n	80079da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079d0:	4619      	mov	r1, r3
 80079d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80079d4:	f7ff fa5e 	bl	8006e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079d8:	e002      	b.n	80079e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80079da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80079dc:	f7f9 fb98 	bl	8001110 <HAL_UART_RxCpltCallback>
}
 80079e0:	bf00      	nop
 80079e2:	3770      	adds	r7, #112	; 0x70
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d109      	bne.n	8007a18 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a0a:	085b      	lsrs	r3, r3, #1
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff fa3f 	bl	8006e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a16:	e002      	b.n	8007a1e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff fa27 	bl	8006e6c <HAL_UART_RxHalfCpltCallback>
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a38:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4c:	2b80      	cmp	r3, #128	; 0x80
 8007a4e:	d109      	bne.n	8007a64 <UART_DMAError+0x3e>
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b21      	cmp	r3, #33	; 0x21
 8007a54:	d106      	bne.n	8007a64 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007a5e:	6978      	ldr	r0, [r7, #20]
 8007a60:	f7ff fea2 	bl	80077a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6e:	2b40      	cmp	r3, #64	; 0x40
 8007a70:	d109      	bne.n	8007a86 <UART_DMAError+0x60>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b22      	cmp	r3, #34	; 0x22
 8007a76:	d106      	bne.n	8007a86 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007a80:	6978      	ldr	r0, [r7, #20]
 8007a82:	f7ff feb7 	bl	80077f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8c:	f043 0210 	orr.w	r2, r3, #16
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a96:	6978      	ldr	r0, [r7, #20]
 8007a98:	f7ff f9f2 	bl	8006e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a9c:	bf00      	nop
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7ff f9dc 	bl	8006e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac8:	bf00      	nop
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	61bb      	str	r3, [r7, #24]
 8007af8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6979      	ldr	r1, [r7, #20]
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	613b      	str	r3, [r7, #16]
   return(result);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e6      	bne.n	8007ad8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff f99e 	bl	8006e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b1c:	bf00      	nop
 8007b1e:	3720      	adds	r7, #32
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <malloc>:
 8007b38:	4b02      	ldr	r3, [pc, #8]	; (8007b44 <malloc+0xc>)
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	f000 b82b 	b.w	8007b98 <_malloc_r>
 8007b42:	bf00      	nop
 8007b44:	20000210 	.word	0x20000210

08007b48 <free>:
 8007b48:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <free+0xc>)
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	f002 bf55 	b.w	800a9fc <_free_r>
 8007b52:	bf00      	nop
 8007b54:	20000210 	.word	0x20000210

08007b58 <sbrk_aligned>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4e0e      	ldr	r6, [pc, #56]	; (8007b94 <sbrk_aligned+0x3c>)
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	6831      	ldr	r1, [r6, #0]
 8007b60:	4605      	mov	r5, r0
 8007b62:	b911      	cbnz	r1, 8007b6a <sbrk_aligned+0x12>
 8007b64:	f002 f83e 	bl	8009be4 <_sbrk_r>
 8007b68:	6030      	str	r0, [r6, #0]
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f002 f839 	bl	8009be4 <_sbrk_r>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	d00a      	beq.n	8007b8c <sbrk_aligned+0x34>
 8007b76:	1cc4      	adds	r4, r0, #3
 8007b78:	f024 0403 	bic.w	r4, r4, #3
 8007b7c:	42a0      	cmp	r0, r4
 8007b7e:	d007      	beq.n	8007b90 <sbrk_aligned+0x38>
 8007b80:	1a21      	subs	r1, r4, r0
 8007b82:	4628      	mov	r0, r5
 8007b84:	f002 f82e 	bl	8009be4 <_sbrk_r>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d101      	bne.n	8007b90 <sbrk_aligned+0x38>
 8007b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b90:	4620      	mov	r0, r4
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	20000b30 	.word	0x20000b30

08007b98 <_malloc_r>:
 8007b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	1ccd      	adds	r5, r1, #3
 8007b9e:	f025 0503 	bic.w	r5, r5, #3
 8007ba2:	3508      	adds	r5, #8
 8007ba4:	2d0c      	cmp	r5, #12
 8007ba6:	bf38      	it	cc
 8007ba8:	250c      	movcc	r5, #12
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	4607      	mov	r7, r0
 8007bae:	db01      	blt.n	8007bb4 <_malloc_r+0x1c>
 8007bb0:	42a9      	cmp	r1, r5
 8007bb2:	d905      	bls.n	8007bc0 <_malloc_r+0x28>
 8007bb4:	230c      	movs	r3, #12
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	2600      	movs	r6, #0
 8007bba:	4630      	mov	r0, r6
 8007bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c94 <_malloc_r+0xfc>
 8007bc4:	f000 f868 	bl	8007c98 <__malloc_lock>
 8007bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bcc:	461c      	mov	r4, r3
 8007bce:	bb5c      	cbnz	r4, 8007c28 <_malloc_r+0x90>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	f7ff ffc0 	bl	8007b58 <sbrk_aligned>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	4604      	mov	r4, r0
 8007bdc:	d155      	bne.n	8007c8a <_malloc_r+0xf2>
 8007bde:	f8d8 4000 	ldr.w	r4, [r8]
 8007be2:	4626      	mov	r6, r4
 8007be4:	2e00      	cmp	r6, #0
 8007be6:	d145      	bne.n	8007c74 <_malloc_r+0xdc>
 8007be8:	2c00      	cmp	r4, #0
 8007bea:	d048      	beq.n	8007c7e <_malloc_r+0xe6>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	eb04 0903 	add.w	r9, r4, r3
 8007bf6:	f001 fff5 	bl	8009be4 <_sbrk_r>
 8007bfa:	4581      	cmp	r9, r0
 8007bfc:	d13f      	bne.n	8007c7e <_malloc_r+0xe6>
 8007bfe:	6821      	ldr	r1, [r4, #0]
 8007c00:	1a6d      	subs	r5, r5, r1
 8007c02:	4629      	mov	r1, r5
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7ff ffa7 	bl	8007b58 <sbrk_aligned>
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d037      	beq.n	8007c7e <_malloc_r+0xe6>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	442b      	add	r3, r5
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	f8d8 3000 	ldr.w	r3, [r8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d038      	beq.n	8007c8e <_malloc_r+0xf6>
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	42a2      	cmp	r2, r4
 8007c20:	d12b      	bne.n	8007c7a <_malloc_r+0xe2>
 8007c22:	2200      	movs	r2, #0
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	e00f      	b.n	8007c48 <_malloc_r+0xb0>
 8007c28:	6822      	ldr	r2, [r4, #0]
 8007c2a:	1b52      	subs	r2, r2, r5
 8007c2c:	d41f      	bmi.n	8007c6e <_malloc_r+0xd6>
 8007c2e:	2a0b      	cmp	r2, #11
 8007c30:	d917      	bls.n	8007c62 <_malloc_r+0xca>
 8007c32:	1961      	adds	r1, r4, r5
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	6025      	str	r5, [r4, #0]
 8007c38:	bf18      	it	ne
 8007c3a:	6059      	strne	r1, [r3, #4]
 8007c3c:	6863      	ldr	r3, [r4, #4]
 8007c3e:	bf08      	it	eq
 8007c40:	f8c8 1000 	streq.w	r1, [r8]
 8007c44:	5162      	str	r2, [r4, r5]
 8007c46:	604b      	str	r3, [r1, #4]
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f104 060b 	add.w	r6, r4, #11
 8007c4e:	f000 f829 	bl	8007ca4 <__malloc_unlock>
 8007c52:	f026 0607 	bic.w	r6, r6, #7
 8007c56:	1d23      	adds	r3, r4, #4
 8007c58:	1af2      	subs	r2, r6, r3
 8007c5a:	d0ae      	beq.n	8007bba <_malloc_r+0x22>
 8007c5c:	1b9b      	subs	r3, r3, r6
 8007c5e:	50a3      	str	r3, [r4, r2]
 8007c60:	e7ab      	b.n	8007bba <_malloc_r+0x22>
 8007c62:	42a3      	cmp	r3, r4
 8007c64:	6862      	ldr	r2, [r4, #4]
 8007c66:	d1dd      	bne.n	8007c24 <_malloc_r+0x8c>
 8007c68:	f8c8 2000 	str.w	r2, [r8]
 8007c6c:	e7ec      	b.n	8007c48 <_malloc_r+0xb0>
 8007c6e:	4623      	mov	r3, r4
 8007c70:	6864      	ldr	r4, [r4, #4]
 8007c72:	e7ac      	b.n	8007bce <_malloc_r+0x36>
 8007c74:	4634      	mov	r4, r6
 8007c76:	6876      	ldr	r6, [r6, #4]
 8007c78:	e7b4      	b.n	8007be4 <_malloc_r+0x4c>
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	e7cc      	b.n	8007c18 <_malloc_r+0x80>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	603b      	str	r3, [r7, #0]
 8007c82:	4638      	mov	r0, r7
 8007c84:	f000 f80e 	bl	8007ca4 <__malloc_unlock>
 8007c88:	e797      	b.n	8007bba <_malloc_r+0x22>
 8007c8a:	6025      	str	r5, [r4, #0]
 8007c8c:	e7dc      	b.n	8007c48 <_malloc_r+0xb0>
 8007c8e:	605b      	str	r3, [r3, #4]
 8007c90:	deff      	udf	#255	; 0xff
 8007c92:	bf00      	nop
 8007c94:	20000b2c 	.word	0x20000b2c

08007c98 <__malloc_lock>:
 8007c98:	4801      	ldr	r0, [pc, #4]	; (8007ca0 <__malloc_lock+0x8>)
 8007c9a:	f001 bff0 	b.w	8009c7e <__retarget_lock_acquire_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	20000c74 	.word	0x20000c74

08007ca4 <__malloc_unlock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__malloc_unlock+0x8>)
 8007ca6:	f001 bfeb 	b.w	8009c80 <__retarget_lock_release_recursive>
 8007caa:	bf00      	nop
 8007cac:	20000c74 	.word	0x20000c74

08007cb0 <sulp>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	460d      	mov	r5, r1
 8007cb6:	ec45 4b10 	vmov	d0, r4, r5
 8007cba:	4616      	mov	r6, r2
 8007cbc:	f003 fdc0 	bl	800b840 <__ulp>
 8007cc0:	ec51 0b10 	vmov	r0, r1, d0
 8007cc4:	b17e      	cbz	r6, 8007ce6 <sulp+0x36>
 8007cc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	dd09      	ble.n	8007ce6 <sulp+0x36>
 8007cd2:	051b      	lsls	r3, r3, #20
 8007cd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cd8:	2400      	movs	r4, #0
 8007cda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cde:	4622      	mov	r2, r4
 8007ce0:	462b      	mov	r3, r5
 8007ce2:	f7f8 fc89 	bl	80005f8 <__aeabi_dmul>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}

08007ce8 <_strtod_l>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	ed2d 8b02 	vpush	{d8}
 8007cf0:	b09b      	sub	sp, #108	; 0x6c
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	9216      	str	r2, [sp, #88]	; 0x58
 8007cfa:	460d      	mov	r5, r1
 8007cfc:	f04f 0800 	mov.w	r8, #0
 8007d00:	f04f 0900 	mov.w	r9, #0
 8007d04:	460a      	mov	r2, r1
 8007d06:	9215      	str	r2, [sp, #84]	; 0x54
 8007d08:	7811      	ldrb	r1, [r2, #0]
 8007d0a:	292b      	cmp	r1, #43	; 0x2b
 8007d0c:	d04c      	beq.n	8007da8 <_strtod_l+0xc0>
 8007d0e:	d83a      	bhi.n	8007d86 <_strtod_l+0x9e>
 8007d10:	290d      	cmp	r1, #13
 8007d12:	d834      	bhi.n	8007d7e <_strtod_l+0x96>
 8007d14:	2908      	cmp	r1, #8
 8007d16:	d834      	bhi.n	8007d82 <_strtod_l+0x9a>
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d03d      	beq.n	8007d98 <_strtod_l+0xb0>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	920a      	str	r2, [sp, #40]	; 0x28
 8007d20:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007d22:	7832      	ldrb	r2, [r6, #0]
 8007d24:	2a30      	cmp	r2, #48	; 0x30
 8007d26:	f040 80b4 	bne.w	8007e92 <_strtod_l+0x1aa>
 8007d2a:	7872      	ldrb	r2, [r6, #1]
 8007d2c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007d30:	2a58      	cmp	r2, #88	; 0x58
 8007d32:	d170      	bne.n	8007e16 <_strtod_l+0x12e>
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	ab16      	add	r3, sp, #88	; 0x58
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	4a8e      	ldr	r2, [pc, #568]	; (8007f78 <_strtod_l+0x290>)
 8007d40:	ab17      	add	r3, sp, #92	; 0x5c
 8007d42:	a915      	add	r1, sp, #84	; 0x54
 8007d44:	4620      	mov	r0, r4
 8007d46:	f002 ff0d 	bl	800ab64 <__gethex>
 8007d4a:	f010 070f 	ands.w	r7, r0, #15
 8007d4e:	4605      	mov	r5, r0
 8007d50:	d005      	beq.n	8007d5e <_strtod_l+0x76>
 8007d52:	2f06      	cmp	r7, #6
 8007d54:	d12a      	bne.n	8007dac <_strtod_l+0xc4>
 8007d56:	3601      	adds	r6, #1
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9615      	str	r6, [sp, #84]	; 0x54
 8007d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f040 857f 	bne.w	8008864 <_strtod_l+0xb7c>
 8007d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d68:	b1db      	cbz	r3, 8007da2 <_strtod_l+0xba>
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d70:	ec43 2b10 	vmov	d0, r2, r3
 8007d74:	b01b      	add	sp, #108	; 0x6c
 8007d76:	ecbd 8b02 	vpop	{d8}
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	2920      	cmp	r1, #32
 8007d80:	d1cc      	bne.n	8007d1c <_strtod_l+0x34>
 8007d82:	3201      	adds	r2, #1
 8007d84:	e7bf      	b.n	8007d06 <_strtod_l+0x1e>
 8007d86:	292d      	cmp	r1, #45	; 0x2d
 8007d88:	d1c8      	bne.n	8007d1c <_strtod_l+0x34>
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	910a      	str	r1, [sp, #40]	; 0x28
 8007d8e:	1c51      	adds	r1, r2, #1
 8007d90:	9115      	str	r1, [sp, #84]	; 0x54
 8007d92:	7852      	ldrb	r2, [r2, #1]
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	d1c3      	bne.n	8007d20 <_strtod_l+0x38>
 8007d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d9a:	9515      	str	r5, [sp, #84]	; 0x54
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 855f 	bne.w	8008860 <_strtod_l+0xb78>
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	e7e3      	b.n	8007d70 <_strtod_l+0x88>
 8007da8:	2100      	movs	r1, #0
 8007daa:	e7ef      	b.n	8007d8c <_strtod_l+0xa4>
 8007dac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007dae:	b13a      	cbz	r2, 8007dc0 <_strtod_l+0xd8>
 8007db0:	2135      	movs	r1, #53	; 0x35
 8007db2:	a818      	add	r0, sp, #96	; 0x60
 8007db4:	f003 fe41 	bl	800ba3a <__copybits>
 8007db8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f003 fa14 	bl	800b1e8 <_Bfree>
 8007dc0:	3f01      	subs	r7, #1
 8007dc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007dc4:	2f04      	cmp	r7, #4
 8007dc6:	d806      	bhi.n	8007dd6 <_strtod_l+0xee>
 8007dc8:	e8df f007 	tbb	[pc, r7]
 8007dcc:	201d0314 	.word	0x201d0314
 8007dd0:	14          	.byte	0x14
 8007dd1:	00          	.byte	0x00
 8007dd2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007dd6:	05e9      	lsls	r1, r5, #23
 8007dd8:	bf48      	it	mi
 8007dda:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007dde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007de2:	0d1b      	lsrs	r3, r3, #20
 8007de4:	051b      	lsls	r3, r3, #20
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1b9      	bne.n	8007d5e <_strtod_l+0x76>
 8007dea:	f001 ff1d 	bl	8009c28 <__errno>
 8007dee:	2322      	movs	r3, #34	; 0x22
 8007df0:	6003      	str	r3, [r0, #0]
 8007df2:	e7b4      	b.n	8007d5e <_strtod_l+0x76>
 8007df4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007df8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007e04:	e7e7      	b.n	8007dd6 <_strtod_l+0xee>
 8007e06:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007f80 <_strtod_l+0x298>
 8007e0a:	e7e4      	b.n	8007dd6 <_strtod_l+0xee>
 8007e0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007e10:	f04f 38ff 	mov.w	r8, #4294967295
 8007e14:	e7df      	b.n	8007dd6 <_strtod_l+0xee>
 8007e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	9215      	str	r2, [sp, #84]	; 0x54
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b30      	cmp	r3, #48	; 0x30
 8007e20:	d0f9      	beq.n	8007e16 <_strtod_l+0x12e>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d09b      	beq.n	8007d5e <_strtod_l+0x76>
 8007e26:	2301      	movs	r3, #1
 8007e28:	f04f 0a00 	mov.w	sl, #0
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007e36:	46d3      	mov	fp, sl
 8007e38:	220a      	movs	r2, #10
 8007e3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007e3c:	7806      	ldrb	r6, [r0, #0]
 8007e3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e42:	b2d9      	uxtb	r1, r3
 8007e44:	2909      	cmp	r1, #9
 8007e46:	d926      	bls.n	8007e96 <_strtod_l+0x1ae>
 8007e48:	494c      	ldr	r1, [pc, #304]	; (8007f7c <_strtod_l+0x294>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f001 fe0d 	bl	8009a6a <strncmp>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d030      	beq.n	8007eb6 <_strtod_l+0x1ce>
 8007e54:	2000      	movs	r0, #0
 8007e56:	4632      	mov	r2, r6
 8007e58:	9005      	str	r0, [sp, #20]
 8007e5a:	465e      	mov	r6, fp
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2a65      	cmp	r2, #101	; 0x65
 8007e60:	d001      	beq.n	8007e66 <_strtod_l+0x17e>
 8007e62:	2a45      	cmp	r2, #69	; 0x45
 8007e64:	d113      	bne.n	8007e8e <_strtod_l+0x1a6>
 8007e66:	b91e      	cbnz	r6, 8007e70 <_strtod_l+0x188>
 8007e68:	9a04      	ldr	r2, [sp, #16]
 8007e6a:	4302      	orrs	r2, r0
 8007e6c:	d094      	beq.n	8007d98 <_strtod_l+0xb0>
 8007e6e:	2600      	movs	r6, #0
 8007e70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007e72:	1c6a      	adds	r2, r5, #1
 8007e74:	9215      	str	r2, [sp, #84]	; 0x54
 8007e76:	786a      	ldrb	r2, [r5, #1]
 8007e78:	2a2b      	cmp	r2, #43	; 0x2b
 8007e7a:	d074      	beq.n	8007f66 <_strtod_l+0x27e>
 8007e7c:	2a2d      	cmp	r2, #45	; 0x2d
 8007e7e:	d078      	beq.n	8007f72 <_strtod_l+0x28a>
 8007e80:	f04f 0c00 	mov.w	ip, #0
 8007e84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e88:	2909      	cmp	r1, #9
 8007e8a:	d97f      	bls.n	8007f8c <_strtod_l+0x2a4>
 8007e8c:	9515      	str	r5, [sp, #84]	; 0x54
 8007e8e:	2700      	movs	r7, #0
 8007e90:	e09e      	b.n	8007fd0 <_strtod_l+0x2e8>
 8007e92:	2300      	movs	r3, #0
 8007e94:	e7c8      	b.n	8007e28 <_strtod_l+0x140>
 8007e96:	f1bb 0f08 	cmp.w	fp, #8
 8007e9a:	bfd8      	it	le
 8007e9c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007e9e:	f100 0001 	add.w	r0, r0, #1
 8007ea2:	bfda      	itte	le
 8007ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ea8:	9309      	strle	r3, [sp, #36]	; 0x24
 8007eaa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007eae:	f10b 0b01 	add.w	fp, fp, #1
 8007eb2:	9015      	str	r0, [sp, #84]	; 0x54
 8007eb4:	e7c1      	b.n	8007e3a <_strtod_l+0x152>
 8007eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	9215      	str	r2, [sp, #84]	; 0x54
 8007ebc:	785a      	ldrb	r2, [r3, #1]
 8007ebe:	f1bb 0f00 	cmp.w	fp, #0
 8007ec2:	d037      	beq.n	8007f34 <_strtod_l+0x24c>
 8007ec4:	9005      	str	r0, [sp, #20]
 8007ec6:	465e      	mov	r6, fp
 8007ec8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d912      	bls.n	8007ef6 <_strtod_l+0x20e>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e7c4      	b.n	8007e5e <_strtod_l+0x176>
 8007ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	9215      	str	r2, [sp, #84]	; 0x54
 8007eda:	785a      	ldrb	r2, [r3, #1]
 8007edc:	3001      	adds	r0, #1
 8007ede:	2a30      	cmp	r2, #48	; 0x30
 8007ee0:	d0f8      	beq.n	8007ed4 <_strtod_l+0x1ec>
 8007ee2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	f200 84c1 	bhi.w	800886e <_strtod_l+0xb86>
 8007eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eee:	9005      	str	r0, [sp, #20]
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	3a30      	subs	r2, #48	; 0x30
 8007ef8:	f100 0301 	add.w	r3, r0, #1
 8007efc:	d014      	beq.n	8007f28 <_strtod_l+0x240>
 8007efe:	9905      	ldr	r1, [sp, #20]
 8007f00:	4419      	add	r1, r3
 8007f02:	9105      	str	r1, [sp, #20]
 8007f04:	4633      	mov	r3, r6
 8007f06:	eb00 0c06 	add.w	ip, r0, r6
 8007f0a:	210a      	movs	r1, #10
 8007f0c:	4563      	cmp	r3, ip
 8007f0e:	d113      	bne.n	8007f38 <_strtod_l+0x250>
 8007f10:	1833      	adds	r3, r6, r0
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	f106 0601 	add.w	r6, r6, #1
 8007f18:	4406      	add	r6, r0
 8007f1a:	dc1a      	bgt.n	8007f52 <_strtod_l+0x26a>
 8007f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f1e:	230a      	movs	r3, #10
 8007f20:	fb03 2301 	mla	r3, r3, r1, r2
 8007f24:	9309      	str	r3, [sp, #36]	; 0x24
 8007f26:	2300      	movs	r3, #0
 8007f28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f2a:	1c51      	adds	r1, r2, #1
 8007f2c:	9115      	str	r1, [sp, #84]	; 0x54
 8007f2e:	7852      	ldrb	r2, [r2, #1]
 8007f30:	4618      	mov	r0, r3
 8007f32:	e7c9      	b.n	8007ec8 <_strtod_l+0x1e0>
 8007f34:	4658      	mov	r0, fp
 8007f36:	e7d2      	b.n	8007ede <_strtod_l+0x1f6>
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	f103 0301 	add.w	r3, r3, #1
 8007f3e:	dc03      	bgt.n	8007f48 <_strtod_l+0x260>
 8007f40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f42:	434f      	muls	r7, r1
 8007f44:	9709      	str	r7, [sp, #36]	; 0x24
 8007f46:	e7e1      	b.n	8007f0c <_strtod_l+0x224>
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	bfd8      	it	le
 8007f4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007f50:	e7dc      	b.n	8007f0c <_strtod_l+0x224>
 8007f52:	2e10      	cmp	r6, #16
 8007f54:	bfdc      	itt	le
 8007f56:	230a      	movle	r3, #10
 8007f58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007f5c:	e7e3      	b.n	8007f26 <_strtod_l+0x23e>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9305      	str	r3, [sp, #20]
 8007f62:	2301      	movs	r3, #1
 8007f64:	e780      	b.n	8007e68 <_strtod_l+0x180>
 8007f66:	f04f 0c00 	mov.w	ip, #0
 8007f6a:	1caa      	adds	r2, r5, #2
 8007f6c:	9215      	str	r2, [sp, #84]	; 0x54
 8007f6e:	78aa      	ldrb	r2, [r5, #2]
 8007f70:	e788      	b.n	8007e84 <_strtod_l+0x19c>
 8007f72:	f04f 0c01 	mov.w	ip, #1
 8007f76:	e7f8      	b.n	8007f6a <_strtod_l+0x282>
 8007f78:	0800f474 	.word	0x0800f474
 8007f7c:	0800f470 	.word	0x0800f470
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f86:	1c51      	adds	r1, r2, #1
 8007f88:	9115      	str	r1, [sp, #84]	; 0x54
 8007f8a:	7852      	ldrb	r2, [r2, #1]
 8007f8c:	2a30      	cmp	r2, #48	; 0x30
 8007f8e:	d0f9      	beq.n	8007f84 <_strtod_l+0x29c>
 8007f90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f94:	2908      	cmp	r1, #8
 8007f96:	f63f af7a 	bhi.w	8007e8e <_strtod_l+0x1a6>
 8007f9a:	3a30      	subs	r2, #48	; 0x30
 8007f9c:	9208      	str	r2, [sp, #32]
 8007f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fa0:	920c      	str	r2, [sp, #48]	; 0x30
 8007fa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fa4:	1c57      	adds	r7, r2, #1
 8007fa6:	9715      	str	r7, [sp, #84]	; 0x54
 8007fa8:	7852      	ldrb	r2, [r2, #1]
 8007faa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007fae:	f1be 0f09 	cmp.w	lr, #9
 8007fb2:	d938      	bls.n	8008026 <_strtod_l+0x33e>
 8007fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fb6:	1a7f      	subs	r7, r7, r1
 8007fb8:	2f08      	cmp	r7, #8
 8007fba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007fbe:	dc03      	bgt.n	8007fc8 <_strtod_l+0x2e0>
 8007fc0:	9908      	ldr	r1, [sp, #32]
 8007fc2:	428f      	cmp	r7, r1
 8007fc4:	bfa8      	it	ge
 8007fc6:	460f      	movge	r7, r1
 8007fc8:	f1bc 0f00 	cmp.w	ip, #0
 8007fcc:	d000      	beq.n	8007fd0 <_strtod_l+0x2e8>
 8007fce:	427f      	negs	r7, r7
 8007fd0:	2e00      	cmp	r6, #0
 8007fd2:	d14f      	bne.n	8008074 <_strtod_l+0x38c>
 8007fd4:	9904      	ldr	r1, [sp, #16]
 8007fd6:	4301      	orrs	r1, r0
 8007fd8:	f47f aec1 	bne.w	8007d5e <_strtod_l+0x76>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f aedb 	bne.w	8007d98 <_strtod_l+0xb0>
 8007fe2:	2a69      	cmp	r2, #105	; 0x69
 8007fe4:	d029      	beq.n	800803a <_strtod_l+0x352>
 8007fe6:	dc26      	bgt.n	8008036 <_strtod_l+0x34e>
 8007fe8:	2a49      	cmp	r2, #73	; 0x49
 8007fea:	d026      	beq.n	800803a <_strtod_l+0x352>
 8007fec:	2a4e      	cmp	r2, #78	; 0x4e
 8007fee:	f47f aed3 	bne.w	8007d98 <_strtod_l+0xb0>
 8007ff2:	499b      	ldr	r1, [pc, #620]	; (8008260 <_strtod_l+0x578>)
 8007ff4:	a815      	add	r0, sp, #84	; 0x54
 8007ff6:	f002 fff5 	bl	800afe4 <__match>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f43f aecc 	beq.w	8007d98 <_strtod_l+0xb0>
 8008000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b28      	cmp	r3, #40	; 0x28
 8008006:	d12f      	bne.n	8008068 <_strtod_l+0x380>
 8008008:	4996      	ldr	r1, [pc, #600]	; (8008264 <_strtod_l+0x57c>)
 800800a:	aa18      	add	r2, sp, #96	; 0x60
 800800c:	a815      	add	r0, sp, #84	; 0x54
 800800e:	f002 fffd 	bl	800b00c <__hexnan>
 8008012:	2805      	cmp	r0, #5
 8008014:	d128      	bne.n	8008068 <_strtod_l+0x380>
 8008016:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800801c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008020:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008024:	e69b      	b.n	8007d5e <_strtod_l+0x76>
 8008026:	9f08      	ldr	r7, [sp, #32]
 8008028:	210a      	movs	r1, #10
 800802a:	fb01 2107 	mla	r1, r1, r7, r2
 800802e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008032:	9208      	str	r2, [sp, #32]
 8008034:	e7b5      	b.n	8007fa2 <_strtod_l+0x2ba>
 8008036:	2a6e      	cmp	r2, #110	; 0x6e
 8008038:	e7d9      	b.n	8007fee <_strtod_l+0x306>
 800803a:	498b      	ldr	r1, [pc, #556]	; (8008268 <_strtod_l+0x580>)
 800803c:	a815      	add	r0, sp, #84	; 0x54
 800803e:	f002 ffd1 	bl	800afe4 <__match>
 8008042:	2800      	cmp	r0, #0
 8008044:	f43f aea8 	beq.w	8007d98 <_strtod_l+0xb0>
 8008048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800804a:	4988      	ldr	r1, [pc, #544]	; (800826c <_strtod_l+0x584>)
 800804c:	3b01      	subs	r3, #1
 800804e:	a815      	add	r0, sp, #84	; 0x54
 8008050:	9315      	str	r3, [sp, #84]	; 0x54
 8008052:	f002 ffc7 	bl	800afe4 <__match>
 8008056:	b910      	cbnz	r0, 800805e <_strtod_l+0x376>
 8008058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800805a:	3301      	adds	r3, #1
 800805c:	9315      	str	r3, [sp, #84]	; 0x54
 800805e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800827c <_strtod_l+0x594>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	e67a      	b.n	8007d5e <_strtod_l+0x76>
 8008068:	4881      	ldr	r0, [pc, #516]	; (8008270 <_strtod_l+0x588>)
 800806a:	f001 fe21 	bl	8009cb0 <nan>
 800806e:	ec59 8b10 	vmov	r8, r9, d0
 8008072:	e674      	b.n	8007d5e <_strtod_l+0x76>
 8008074:	9b05      	ldr	r3, [sp, #20]
 8008076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008078:	1afb      	subs	r3, r7, r3
 800807a:	f1bb 0f00 	cmp.w	fp, #0
 800807e:	bf08      	it	eq
 8008080:	46b3      	moveq	fp, r6
 8008082:	2e10      	cmp	r6, #16
 8008084:	9308      	str	r3, [sp, #32]
 8008086:	4635      	mov	r5, r6
 8008088:	bfa8      	it	ge
 800808a:	2510      	movge	r5, #16
 800808c:	f7f8 fa3a 	bl	8000504 <__aeabi_ui2d>
 8008090:	2e09      	cmp	r6, #9
 8008092:	4680      	mov	r8, r0
 8008094:	4689      	mov	r9, r1
 8008096:	dd13      	ble.n	80080c0 <_strtod_l+0x3d8>
 8008098:	4b76      	ldr	r3, [pc, #472]	; (8008274 <_strtod_l+0x58c>)
 800809a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800809e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80080a2:	f7f8 faa9 	bl	80005f8 <__aeabi_dmul>
 80080a6:	4680      	mov	r8, r0
 80080a8:	4650      	mov	r0, sl
 80080aa:	4689      	mov	r9, r1
 80080ac:	f7f8 fa2a 	bl	8000504 <__aeabi_ui2d>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 f8e8 	bl	800028c <__adddf3>
 80080bc:	4680      	mov	r8, r0
 80080be:	4689      	mov	r9, r1
 80080c0:	2e0f      	cmp	r6, #15
 80080c2:	dc38      	bgt.n	8008136 <_strtod_l+0x44e>
 80080c4:	9b08      	ldr	r3, [sp, #32]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f43f ae49 	beq.w	8007d5e <_strtod_l+0x76>
 80080cc:	dd24      	ble.n	8008118 <_strtod_l+0x430>
 80080ce:	2b16      	cmp	r3, #22
 80080d0:	dc0b      	bgt.n	80080ea <_strtod_l+0x402>
 80080d2:	4968      	ldr	r1, [pc, #416]	; (8008274 <_strtod_l+0x58c>)
 80080d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080dc:	4642      	mov	r2, r8
 80080de:	464b      	mov	r3, r9
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	e639      	b.n	8007d5e <_strtod_l+0x76>
 80080ea:	9a08      	ldr	r2, [sp, #32]
 80080ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80080f0:	4293      	cmp	r3, r2
 80080f2:	db20      	blt.n	8008136 <_strtod_l+0x44e>
 80080f4:	4c5f      	ldr	r4, [pc, #380]	; (8008274 <_strtod_l+0x58c>)
 80080f6:	f1c6 060f 	rsb	r6, r6, #15
 80080fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80080fe:	4642      	mov	r2, r8
 8008100:	464b      	mov	r3, r9
 8008102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008106:	f7f8 fa77 	bl	80005f8 <__aeabi_dmul>
 800810a:	9b08      	ldr	r3, [sp, #32]
 800810c:	1b9e      	subs	r6, r3, r6
 800810e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008112:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008116:	e7e3      	b.n	80080e0 <_strtod_l+0x3f8>
 8008118:	9b08      	ldr	r3, [sp, #32]
 800811a:	3316      	adds	r3, #22
 800811c:	db0b      	blt.n	8008136 <_strtod_l+0x44e>
 800811e:	9b05      	ldr	r3, [sp, #20]
 8008120:	1bdf      	subs	r7, r3, r7
 8008122:	4b54      	ldr	r3, [pc, #336]	; (8008274 <_strtod_l+0x58c>)
 8008124:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812c:	4640      	mov	r0, r8
 800812e:	4649      	mov	r1, r9
 8008130:	f7f8 fb8c 	bl	800084c <__aeabi_ddiv>
 8008134:	e7d6      	b.n	80080e4 <_strtod_l+0x3fc>
 8008136:	9b08      	ldr	r3, [sp, #32]
 8008138:	1b75      	subs	r5, r6, r5
 800813a:	441d      	add	r5, r3
 800813c:	2d00      	cmp	r5, #0
 800813e:	dd70      	ble.n	8008222 <_strtod_l+0x53a>
 8008140:	f015 030f 	ands.w	r3, r5, #15
 8008144:	d00a      	beq.n	800815c <_strtod_l+0x474>
 8008146:	494b      	ldr	r1, [pc, #300]	; (8008274 <_strtod_l+0x58c>)
 8008148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800814c:	4642      	mov	r2, r8
 800814e:	464b      	mov	r3, r9
 8008150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008154:	f7f8 fa50 	bl	80005f8 <__aeabi_dmul>
 8008158:	4680      	mov	r8, r0
 800815a:	4689      	mov	r9, r1
 800815c:	f035 050f 	bics.w	r5, r5, #15
 8008160:	d04d      	beq.n	80081fe <_strtod_l+0x516>
 8008162:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008166:	dd22      	ble.n	80081ae <_strtod_l+0x4c6>
 8008168:	2500      	movs	r5, #0
 800816a:	46ab      	mov	fp, r5
 800816c:	9509      	str	r5, [sp, #36]	; 0x24
 800816e:	9505      	str	r5, [sp, #20]
 8008170:	2322      	movs	r3, #34	; 0x22
 8008172:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800827c <_strtod_l+0x594>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	f04f 0800 	mov.w	r8, #0
 800817c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817e:	2b00      	cmp	r3, #0
 8008180:	f43f aded 	beq.w	8007d5e <_strtod_l+0x76>
 8008184:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008186:	4620      	mov	r0, r4
 8008188:	f003 f82e 	bl	800b1e8 <_Bfree>
 800818c:	9905      	ldr	r1, [sp, #20]
 800818e:	4620      	mov	r0, r4
 8008190:	f003 f82a 	bl	800b1e8 <_Bfree>
 8008194:	4659      	mov	r1, fp
 8008196:	4620      	mov	r0, r4
 8008198:	f003 f826 	bl	800b1e8 <_Bfree>
 800819c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819e:	4620      	mov	r0, r4
 80081a0:	f003 f822 	bl	800b1e8 <_Bfree>
 80081a4:	4629      	mov	r1, r5
 80081a6:	4620      	mov	r0, r4
 80081a8:	f003 f81e 	bl	800b1e8 <_Bfree>
 80081ac:	e5d7      	b.n	8007d5e <_strtod_l+0x76>
 80081ae:	4b32      	ldr	r3, [pc, #200]	; (8008278 <_strtod_l+0x590>)
 80081b0:	9304      	str	r3, [sp, #16]
 80081b2:	2300      	movs	r3, #0
 80081b4:	112d      	asrs	r5, r5, #4
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	469a      	mov	sl, r3
 80081bc:	2d01      	cmp	r5, #1
 80081be:	dc21      	bgt.n	8008204 <_strtod_l+0x51c>
 80081c0:	b10b      	cbz	r3, 80081c6 <_strtod_l+0x4de>
 80081c2:	4680      	mov	r8, r0
 80081c4:	4689      	mov	r9, r1
 80081c6:	492c      	ldr	r1, [pc, #176]	; (8008278 <_strtod_l+0x590>)
 80081c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80081cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80081d0:	4642      	mov	r2, r8
 80081d2:	464b      	mov	r3, r9
 80081d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081d8:	f7f8 fa0e 	bl	80005f8 <__aeabi_dmul>
 80081dc:	4b27      	ldr	r3, [pc, #156]	; (800827c <_strtod_l+0x594>)
 80081de:	460a      	mov	r2, r1
 80081e0:	400b      	ands	r3, r1
 80081e2:	4927      	ldr	r1, [pc, #156]	; (8008280 <_strtod_l+0x598>)
 80081e4:	428b      	cmp	r3, r1
 80081e6:	4680      	mov	r8, r0
 80081e8:	d8be      	bhi.n	8008168 <_strtod_l+0x480>
 80081ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081ee:	428b      	cmp	r3, r1
 80081f0:	bf86      	itte	hi
 80081f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008284 <_strtod_l+0x59c>
 80081f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80081fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80081fe:	2300      	movs	r3, #0
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	e07b      	b.n	80082fc <_strtod_l+0x614>
 8008204:	07ea      	lsls	r2, r5, #31
 8008206:	d505      	bpl.n	8008214 <_strtod_l+0x52c>
 8008208:	9b04      	ldr	r3, [sp, #16]
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f7f8 f9f3 	bl	80005f8 <__aeabi_dmul>
 8008212:	2301      	movs	r3, #1
 8008214:	9a04      	ldr	r2, [sp, #16]
 8008216:	3208      	adds	r2, #8
 8008218:	f10a 0a01 	add.w	sl, sl, #1
 800821c:	106d      	asrs	r5, r5, #1
 800821e:	9204      	str	r2, [sp, #16]
 8008220:	e7cc      	b.n	80081bc <_strtod_l+0x4d4>
 8008222:	d0ec      	beq.n	80081fe <_strtod_l+0x516>
 8008224:	426d      	negs	r5, r5
 8008226:	f015 020f 	ands.w	r2, r5, #15
 800822a:	d00a      	beq.n	8008242 <_strtod_l+0x55a>
 800822c:	4b11      	ldr	r3, [pc, #68]	; (8008274 <_strtod_l+0x58c>)
 800822e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008232:	4640      	mov	r0, r8
 8008234:	4649      	mov	r1, r9
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 fb07 	bl	800084c <__aeabi_ddiv>
 800823e:	4680      	mov	r8, r0
 8008240:	4689      	mov	r9, r1
 8008242:	112d      	asrs	r5, r5, #4
 8008244:	d0db      	beq.n	80081fe <_strtod_l+0x516>
 8008246:	2d1f      	cmp	r5, #31
 8008248:	dd1e      	ble.n	8008288 <_strtod_l+0x5a0>
 800824a:	2500      	movs	r5, #0
 800824c:	46ab      	mov	fp, r5
 800824e:	9509      	str	r5, [sp, #36]	; 0x24
 8008250:	9505      	str	r5, [sp, #20]
 8008252:	2322      	movs	r3, #34	; 0x22
 8008254:	f04f 0800 	mov.w	r8, #0
 8008258:	f04f 0900 	mov.w	r9, #0
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	e78d      	b.n	800817c <_strtod_l+0x494>
 8008260:	0800f5d6 	.word	0x0800f5d6
 8008264:	0800f488 	.word	0x0800f488
 8008268:	0800f5ce 	.word	0x0800f5ce
 800826c:	0800f6ba 	.word	0x0800f6ba
 8008270:	0800f6b6 	.word	0x0800f6b6
 8008274:	0800f810 	.word	0x0800f810
 8008278:	0800f7e8 	.word	0x0800f7e8
 800827c:	7ff00000 	.word	0x7ff00000
 8008280:	7ca00000 	.word	0x7ca00000
 8008284:	7fefffff 	.word	0x7fefffff
 8008288:	f015 0310 	ands.w	r3, r5, #16
 800828c:	bf18      	it	ne
 800828e:	236a      	movne	r3, #106	; 0x6a
 8008290:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008634 <_strtod_l+0x94c>
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	2300      	movs	r3, #0
 800829c:	07ea      	lsls	r2, r5, #31
 800829e:	d504      	bpl.n	80082aa <_strtod_l+0x5c2>
 80082a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80082a4:	f7f8 f9a8 	bl	80005f8 <__aeabi_dmul>
 80082a8:	2301      	movs	r3, #1
 80082aa:	106d      	asrs	r5, r5, #1
 80082ac:	f10a 0a08 	add.w	sl, sl, #8
 80082b0:	d1f4      	bne.n	800829c <_strtod_l+0x5b4>
 80082b2:	b10b      	cbz	r3, 80082b8 <_strtod_l+0x5d0>
 80082b4:	4680      	mov	r8, r0
 80082b6:	4689      	mov	r9, r1
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	b1bb      	cbz	r3, 80082ec <_strtod_l+0x604>
 80082bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80082c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	4649      	mov	r1, r9
 80082c8:	dd10      	ble.n	80082ec <_strtod_l+0x604>
 80082ca:	2b1f      	cmp	r3, #31
 80082cc:	f340 811e 	ble.w	800850c <_strtod_l+0x824>
 80082d0:	2b34      	cmp	r3, #52	; 0x34
 80082d2:	bfde      	ittt	le
 80082d4:	f04f 33ff 	movle.w	r3, #4294967295
 80082d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082dc:	4093      	lslle	r3, r2
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	bfcc      	ite	gt
 80082e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80082e8:	ea03 0901 	andle.w	r9, r3, r1
 80082ec:	2200      	movs	r2, #0
 80082ee:	2300      	movs	r3, #0
 80082f0:	4640      	mov	r0, r8
 80082f2:	4649      	mov	r1, r9
 80082f4:	f7f8 fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d1a6      	bne.n	800824a <_strtod_l+0x562>
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008302:	4633      	mov	r3, r6
 8008304:	465a      	mov	r2, fp
 8008306:	4620      	mov	r0, r4
 8008308:	f002 ffd6 	bl	800b2b8 <__s2b>
 800830c:	9009      	str	r0, [sp, #36]	; 0x24
 800830e:	2800      	cmp	r0, #0
 8008310:	f43f af2a 	beq.w	8008168 <_strtod_l+0x480>
 8008314:	9a08      	ldr	r2, [sp, #32]
 8008316:	9b05      	ldr	r3, [sp, #20]
 8008318:	2a00      	cmp	r2, #0
 800831a:	eba3 0307 	sub.w	r3, r3, r7
 800831e:	bfa8      	it	ge
 8008320:	2300      	movge	r3, #0
 8008322:	930c      	str	r3, [sp, #48]	; 0x30
 8008324:	2500      	movs	r5, #0
 8008326:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800832a:	9312      	str	r3, [sp, #72]	; 0x48
 800832c:	46ab      	mov	fp, r5
 800832e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008330:	4620      	mov	r0, r4
 8008332:	6859      	ldr	r1, [r3, #4]
 8008334:	f002 ff18 	bl	800b168 <_Balloc>
 8008338:	9005      	str	r0, [sp, #20]
 800833a:	2800      	cmp	r0, #0
 800833c:	f43f af18 	beq.w	8008170 <_strtod_l+0x488>
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	691a      	ldr	r2, [r3, #16]
 8008344:	3202      	adds	r2, #2
 8008346:	f103 010c 	add.w	r1, r3, #12
 800834a:	0092      	lsls	r2, r2, #2
 800834c:	300c      	adds	r0, #12
 800834e:	f001 fca0 	bl	8009c92 <memcpy>
 8008352:	ec49 8b10 	vmov	d0, r8, r9
 8008356:	aa18      	add	r2, sp, #96	; 0x60
 8008358:	a917      	add	r1, sp, #92	; 0x5c
 800835a:	4620      	mov	r0, r4
 800835c:	f003 fae0 	bl	800b920 <__d2b>
 8008360:	ec49 8b18 	vmov	d8, r8, r9
 8008364:	9016      	str	r0, [sp, #88]	; 0x58
 8008366:	2800      	cmp	r0, #0
 8008368:	f43f af02 	beq.w	8008170 <_strtod_l+0x488>
 800836c:	2101      	movs	r1, #1
 800836e:	4620      	mov	r0, r4
 8008370:	f003 f83a 	bl	800b3e8 <__i2b>
 8008374:	4683      	mov	fp, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f aefa 	beq.w	8008170 <_strtod_l+0x488>
 800837c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800837e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008380:	2e00      	cmp	r6, #0
 8008382:	bfab      	itete	ge
 8008384:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008386:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008388:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800838a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800838e:	bfac      	ite	ge
 8008390:	eb06 0a03 	addge.w	sl, r6, r3
 8008394:	1b9f      	sublt	r7, r3, r6
 8008396:	9b04      	ldr	r3, [sp, #16]
 8008398:	1af6      	subs	r6, r6, r3
 800839a:	4416      	add	r6, r2
 800839c:	4ba0      	ldr	r3, [pc, #640]	; (8008620 <_strtod_l+0x938>)
 800839e:	3e01      	subs	r6, #1
 80083a0:	429e      	cmp	r6, r3
 80083a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083a6:	f280 80c4 	bge.w	8008532 <_strtod_l+0x84a>
 80083aa:	1b9b      	subs	r3, r3, r6
 80083ac:	2b1f      	cmp	r3, #31
 80083ae:	eba2 0203 	sub.w	r2, r2, r3
 80083b2:	f04f 0101 	mov.w	r1, #1
 80083b6:	f300 80b0 	bgt.w	800851a <_strtod_l+0x832>
 80083ba:	fa01 f303 	lsl.w	r3, r1, r3
 80083be:	930e      	str	r3, [sp, #56]	; 0x38
 80083c0:	2300      	movs	r3, #0
 80083c2:	930d      	str	r3, [sp, #52]	; 0x34
 80083c4:	eb0a 0602 	add.w	r6, sl, r2
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	45b2      	cmp	sl, r6
 80083cc:	4417      	add	r7, r2
 80083ce:	441f      	add	r7, r3
 80083d0:	4653      	mov	r3, sl
 80083d2:	bfa8      	it	ge
 80083d4:	4633      	movge	r3, r6
 80083d6:	42bb      	cmp	r3, r7
 80083d8:	bfa8      	it	ge
 80083da:	463b      	movge	r3, r7
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bfc2      	ittt	gt
 80083e0:	1af6      	subgt	r6, r6, r3
 80083e2:	1aff      	subgt	r7, r7, r3
 80083e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80083e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dd17      	ble.n	800841e <_strtod_l+0x736>
 80083ee:	4659      	mov	r1, fp
 80083f0:	461a      	mov	r2, r3
 80083f2:	4620      	mov	r0, r4
 80083f4:	f003 f8b8 	bl	800b568 <__pow5mult>
 80083f8:	4683      	mov	fp, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f43f aeb8 	beq.w	8008170 <_strtod_l+0x488>
 8008400:	4601      	mov	r1, r0
 8008402:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008404:	4620      	mov	r0, r4
 8008406:	f003 f805 	bl	800b414 <__multiply>
 800840a:	900b      	str	r0, [sp, #44]	; 0x2c
 800840c:	2800      	cmp	r0, #0
 800840e:	f43f aeaf 	beq.w	8008170 <_strtod_l+0x488>
 8008412:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008414:	4620      	mov	r0, r4
 8008416:	f002 fee7 	bl	800b1e8 <_Bfree>
 800841a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800841c:	9316      	str	r3, [sp, #88]	; 0x58
 800841e:	2e00      	cmp	r6, #0
 8008420:	f300 808c 	bgt.w	800853c <_strtod_l+0x854>
 8008424:	9b08      	ldr	r3, [sp, #32]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dd08      	ble.n	800843c <_strtod_l+0x754>
 800842a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800842c:	9905      	ldr	r1, [sp, #20]
 800842e:	4620      	mov	r0, r4
 8008430:	f003 f89a 	bl	800b568 <__pow5mult>
 8008434:	9005      	str	r0, [sp, #20]
 8008436:	2800      	cmp	r0, #0
 8008438:	f43f ae9a 	beq.w	8008170 <_strtod_l+0x488>
 800843c:	2f00      	cmp	r7, #0
 800843e:	dd08      	ble.n	8008452 <_strtod_l+0x76a>
 8008440:	9905      	ldr	r1, [sp, #20]
 8008442:	463a      	mov	r2, r7
 8008444:	4620      	mov	r0, r4
 8008446:	f003 f8e9 	bl	800b61c <__lshift>
 800844a:	9005      	str	r0, [sp, #20]
 800844c:	2800      	cmp	r0, #0
 800844e:	f43f ae8f 	beq.w	8008170 <_strtod_l+0x488>
 8008452:	f1ba 0f00 	cmp.w	sl, #0
 8008456:	dd08      	ble.n	800846a <_strtod_l+0x782>
 8008458:	4659      	mov	r1, fp
 800845a:	4652      	mov	r2, sl
 800845c:	4620      	mov	r0, r4
 800845e:	f003 f8dd 	bl	800b61c <__lshift>
 8008462:	4683      	mov	fp, r0
 8008464:	2800      	cmp	r0, #0
 8008466:	f43f ae83 	beq.w	8008170 <_strtod_l+0x488>
 800846a:	9a05      	ldr	r2, [sp, #20]
 800846c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800846e:	4620      	mov	r0, r4
 8008470:	f003 f95c 	bl	800b72c <__mdiff>
 8008474:	4605      	mov	r5, r0
 8008476:	2800      	cmp	r0, #0
 8008478:	f43f ae7a 	beq.w	8008170 <_strtod_l+0x488>
 800847c:	68c3      	ldr	r3, [r0, #12]
 800847e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008480:	2300      	movs	r3, #0
 8008482:	60c3      	str	r3, [r0, #12]
 8008484:	4659      	mov	r1, fp
 8008486:	f003 f935 	bl	800b6f4 <__mcmp>
 800848a:	2800      	cmp	r0, #0
 800848c:	da60      	bge.n	8008550 <_strtod_l+0x868>
 800848e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008490:	ea53 0308 	orrs.w	r3, r3, r8
 8008494:	f040 8084 	bne.w	80085a0 <_strtod_l+0x8b8>
 8008498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800849c:	2b00      	cmp	r3, #0
 800849e:	d17f      	bne.n	80085a0 <_strtod_l+0x8b8>
 80084a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084a4:	0d1b      	lsrs	r3, r3, #20
 80084a6:	051b      	lsls	r3, r3, #20
 80084a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084ac:	d978      	bls.n	80085a0 <_strtod_l+0x8b8>
 80084ae:	696b      	ldr	r3, [r5, #20]
 80084b0:	b913      	cbnz	r3, 80084b8 <_strtod_l+0x7d0>
 80084b2:	692b      	ldr	r3, [r5, #16]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	dd73      	ble.n	80085a0 <_strtod_l+0x8b8>
 80084b8:	4629      	mov	r1, r5
 80084ba:	2201      	movs	r2, #1
 80084bc:	4620      	mov	r0, r4
 80084be:	f003 f8ad 	bl	800b61c <__lshift>
 80084c2:	4659      	mov	r1, fp
 80084c4:	4605      	mov	r5, r0
 80084c6:	f003 f915 	bl	800b6f4 <__mcmp>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	dd68      	ble.n	80085a0 <_strtod_l+0x8b8>
 80084ce:	9904      	ldr	r1, [sp, #16]
 80084d0:	4a54      	ldr	r2, [pc, #336]	; (8008624 <_strtod_l+0x93c>)
 80084d2:	464b      	mov	r3, r9
 80084d4:	2900      	cmp	r1, #0
 80084d6:	f000 8084 	beq.w	80085e2 <_strtod_l+0x8fa>
 80084da:	ea02 0109 	and.w	r1, r2, r9
 80084de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084e2:	dc7e      	bgt.n	80085e2 <_strtod_l+0x8fa>
 80084e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084e8:	f77f aeb3 	ble.w	8008252 <_strtod_l+0x56a>
 80084ec:	4b4e      	ldr	r3, [pc, #312]	; (8008628 <_strtod_l+0x940>)
 80084ee:	4640      	mov	r0, r8
 80084f0:	4649      	mov	r1, r9
 80084f2:	2200      	movs	r2, #0
 80084f4:	f7f8 f880 	bl	80005f8 <__aeabi_dmul>
 80084f8:	4b4a      	ldr	r3, [pc, #296]	; (8008624 <_strtod_l+0x93c>)
 80084fa:	400b      	ands	r3, r1
 80084fc:	4680      	mov	r8, r0
 80084fe:	4689      	mov	r9, r1
 8008500:	2b00      	cmp	r3, #0
 8008502:	f47f ae3f 	bne.w	8008184 <_strtod_l+0x49c>
 8008506:	2322      	movs	r3, #34	; 0x22
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	e63b      	b.n	8008184 <_strtod_l+0x49c>
 800850c:	f04f 32ff 	mov.w	r2, #4294967295
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	ea03 0808 	and.w	r8, r3, r8
 8008518:	e6e8      	b.n	80082ec <_strtod_l+0x604>
 800851a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800851e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008522:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008526:	36e2      	adds	r6, #226	; 0xe2
 8008528:	fa01 f306 	lsl.w	r3, r1, r6
 800852c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008530:	e748      	b.n	80083c4 <_strtod_l+0x6dc>
 8008532:	2100      	movs	r1, #0
 8008534:	2301      	movs	r3, #1
 8008536:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800853a:	e743      	b.n	80083c4 <_strtod_l+0x6dc>
 800853c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800853e:	4632      	mov	r2, r6
 8008540:	4620      	mov	r0, r4
 8008542:	f003 f86b 	bl	800b61c <__lshift>
 8008546:	9016      	str	r0, [sp, #88]	; 0x58
 8008548:	2800      	cmp	r0, #0
 800854a:	f47f af6b 	bne.w	8008424 <_strtod_l+0x73c>
 800854e:	e60f      	b.n	8008170 <_strtod_l+0x488>
 8008550:	46ca      	mov	sl, r9
 8008552:	d171      	bne.n	8008638 <_strtod_l+0x950>
 8008554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008556:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800855a:	b352      	cbz	r2, 80085b2 <_strtod_l+0x8ca>
 800855c:	4a33      	ldr	r2, [pc, #204]	; (800862c <_strtod_l+0x944>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d12a      	bne.n	80085b8 <_strtod_l+0x8d0>
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	4641      	mov	r1, r8
 8008566:	b1fb      	cbz	r3, 80085a8 <_strtod_l+0x8c0>
 8008568:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <_strtod_l+0x93c>)
 800856a:	ea09 0303 	and.w	r3, r9, r3
 800856e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008572:	f04f 32ff 	mov.w	r2, #4294967295
 8008576:	d81a      	bhi.n	80085ae <_strtod_l+0x8c6>
 8008578:	0d1b      	lsrs	r3, r3, #20
 800857a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	4299      	cmp	r1, r3
 8008584:	d118      	bne.n	80085b8 <_strtod_l+0x8d0>
 8008586:	4b2a      	ldr	r3, [pc, #168]	; (8008630 <_strtod_l+0x948>)
 8008588:	459a      	cmp	sl, r3
 800858a:	d102      	bne.n	8008592 <_strtod_l+0x8aa>
 800858c:	3101      	adds	r1, #1
 800858e:	f43f adef 	beq.w	8008170 <_strtod_l+0x488>
 8008592:	4b24      	ldr	r3, [pc, #144]	; (8008624 <_strtod_l+0x93c>)
 8008594:	ea0a 0303 	and.w	r3, sl, r3
 8008598:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800859c:	f04f 0800 	mov.w	r8, #0
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1a2      	bne.n	80084ec <_strtod_l+0x804>
 80085a6:	e5ed      	b.n	8008184 <_strtod_l+0x49c>
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ac:	e7e9      	b.n	8008582 <_strtod_l+0x89a>
 80085ae:	4613      	mov	r3, r2
 80085b0:	e7e7      	b.n	8008582 <_strtod_l+0x89a>
 80085b2:	ea53 0308 	orrs.w	r3, r3, r8
 80085b6:	d08a      	beq.n	80084ce <_strtod_l+0x7e6>
 80085b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ba:	b1e3      	cbz	r3, 80085f6 <_strtod_l+0x90e>
 80085bc:	ea13 0f0a 	tst.w	r3, sl
 80085c0:	d0ee      	beq.n	80085a0 <_strtod_l+0x8b8>
 80085c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c4:	9a04      	ldr	r2, [sp, #16]
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	b1c3      	cbz	r3, 80085fe <_strtod_l+0x916>
 80085cc:	f7ff fb70 	bl	8007cb0 <sulp>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	ec51 0b18 	vmov	r0, r1, d8
 80085d8:	f7f7 fe58 	bl	800028c <__adddf3>
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	e7de      	b.n	80085a0 <_strtod_l+0x8b8>
 80085e2:	4013      	ands	r3, r2
 80085e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80085ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80085f0:	f04f 38ff 	mov.w	r8, #4294967295
 80085f4:	e7d4      	b.n	80085a0 <_strtod_l+0x8b8>
 80085f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f8:	ea13 0f08 	tst.w	r3, r8
 80085fc:	e7e0      	b.n	80085c0 <_strtod_l+0x8d8>
 80085fe:	f7ff fb57 	bl	8007cb0 <sulp>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	ec51 0b18 	vmov	r0, r1, d8
 800860a:	f7f7 fe3d 	bl	8000288 <__aeabi_dsub>
 800860e:	2200      	movs	r2, #0
 8008610:	2300      	movs	r3, #0
 8008612:	4680      	mov	r8, r0
 8008614:	4689      	mov	r9, r1
 8008616:	f7f8 fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800861a:	2800      	cmp	r0, #0
 800861c:	d0c0      	beq.n	80085a0 <_strtod_l+0x8b8>
 800861e:	e618      	b.n	8008252 <_strtod_l+0x56a>
 8008620:	fffffc02 	.word	0xfffffc02
 8008624:	7ff00000 	.word	0x7ff00000
 8008628:	39500000 	.word	0x39500000
 800862c:	000fffff 	.word	0x000fffff
 8008630:	7fefffff 	.word	0x7fefffff
 8008634:	0800f4a0 	.word	0x0800f4a0
 8008638:	4659      	mov	r1, fp
 800863a:	4628      	mov	r0, r5
 800863c:	f003 f9ca 	bl	800b9d4 <__ratio>
 8008640:	ec57 6b10 	vmov	r6, r7, d0
 8008644:	ee10 0a10 	vmov	r0, s0
 8008648:	2200      	movs	r2, #0
 800864a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800864e:	4639      	mov	r1, r7
 8008650:	f7f8 fa4e 	bl	8000af0 <__aeabi_dcmple>
 8008654:	2800      	cmp	r0, #0
 8008656:	d071      	beq.n	800873c <_strtod_l+0xa54>
 8008658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d17c      	bne.n	8008758 <_strtod_l+0xa70>
 800865e:	f1b8 0f00 	cmp.w	r8, #0
 8008662:	d15a      	bne.n	800871a <_strtod_l+0xa32>
 8008664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008668:	2b00      	cmp	r3, #0
 800866a:	d15d      	bne.n	8008728 <_strtod_l+0xa40>
 800866c:	4b90      	ldr	r3, [pc, #576]	; (80088b0 <_strtod_l+0xbc8>)
 800866e:	2200      	movs	r2, #0
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f8 fa32 	bl	8000adc <__aeabi_dcmplt>
 8008678:	2800      	cmp	r0, #0
 800867a:	d15c      	bne.n	8008736 <_strtod_l+0xa4e>
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	4b8c      	ldr	r3, [pc, #560]	; (80088b4 <_strtod_l+0xbcc>)
 8008682:	2200      	movs	r2, #0
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008690:	9606      	str	r6, [sp, #24]
 8008692:	9307      	str	r3, [sp, #28]
 8008694:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008698:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800869c:	4b86      	ldr	r3, [pc, #536]	; (80088b8 <_strtod_l+0xbd0>)
 800869e:	ea0a 0303 	and.w	r3, sl, r3
 80086a2:	930d      	str	r3, [sp, #52]	; 0x34
 80086a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086a6:	4b85      	ldr	r3, [pc, #532]	; (80088bc <_strtod_l+0xbd4>)
 80086a8:	429a      	cmp	r2, r3
 80086aa:	f040 8090 	bne.w	80087ce <_strtod_l+0xae6>
 80086ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80086b2:	ec49 8b10 	vmov	d0, r8, r9
 80086b6:	f003 f8c3 	bl	800b840 <__ulp>
 80086ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086be:	ec51 0b10 	vmov	r0, r1, d0
 80086c2:	f7f7 ff99 	bl	80005f8 <__aeabi_dmul>
 80086c6:	4642      	mov	r2, r8
 80086c8:	464b      	mov	r3, r9
 80086ca:	f7f7 fddf 	bl	800028c <__adddf3>
 80086ce:	460b      	mov	r3, r1
 80086d0:	4979      	ldr	r1, [pc, #484]	; (80088b8 <_strtod_l+0xbd0>)
 80086d2:	4a7b      	ldr	r2, [pc, #492]	; (80088c0 <_strtod_l+0xbd8>)
 80086d4:	4019      	ands	r1, r3
 80086d6:	4291      	cmp	r1, r2
 80086d8:	4680      	mov	r8, r0
 80086da:	d944      	bls.n	8008766 <_strtod_l+0xa7e>
 80086dc:	ee18 2a90 	vmov	r2, s17
 80086e0:	4b78      	ldr	r3, [pc, #480]	; (80088c4 <_strtod_l+0xbdc>)
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d104      	bne.n	80086f0 <_strtod_l+0xa08>
 80086e6:	ee18 3a10 	vmov	r3, s16
 80086ea:	3301      	adds	r3, #1
 80086ec:	f43f ad40 	beq.w	8008170 <_strtod_l+0x488>
 80086f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80088c4 <_strtod_l+0xbdc>
 80086f4:	f04f 38ff 	mov.w	r8, #4294967295
 80086f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086fa:	4620      	mov	r0, r4
 80086fc:	f002 fd74 	bl	800b1e8 <_Bfree>
 8008700:	9905      	ldr	r1, [sp, #20]
 8008702:	4620      	mov	r0, r4
 8008704:	f002 fd70 	bl	800b1e8 <_Bfree>
 8008708:	4659      	mov	r1, fp
 800870a:	4620      	mov	r0, r4
 800870c:	f002 fd6c 	bl	800b1e8 <_Bfree>
 8008710:	4629      	mov	r1, r5
 8008712:	4620      	mov	r0, r4
 8008714:	f002 fd68 	bl	800b1e8 <_Bfree>
 8008718:	e609      	b.n	800832e <_strtod_l+0x646>
 800871a:	f1b8 0f01 	cmp.w	r8, #1
 800871e:	d103      	bne.n	8008728 <_strtod_l+0xa40>
 8008720:	f1b9 0f00 	cmp.w	r9, #0
 8008724:	f43f ad95 	beq.w	8008252 <_strtod_l+0x56a>
 8008728:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008880 <_strtod_l+0xb98>
 800872c:	4f60      	ldr	r7, [pc, #384]	; (80088b0 <_strtod_l+0xbc8>)
 800872e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008732:	2600      	movs	r6, #0
 8008734:	e7ae      	b.n	8008694 <_strtod_l+0x9ac>
 8008736:	4f5f      	ldr	r7, [pc, #380]	; (80088b4 <_strtod_l+0xbcc>)
 8008738:	2600      	movs	r6, #0
 800873a:	e7a7      	b.n	800868c <_strtod_l+0x9a4>
 800873c:	4b5d      	ldr	r3, [pc, #372]	; (80088b4 <_strtod_l+0xbcc>)
 800873e:	4630      	mov	r0, r6
 8008740:	4639      	mov	r1, r7
 8008742:	2200      	movs	r2, #0
 8008744:	f7f7 ff58 	bl	80005f8 <__aeabi_dmul>
 8008748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d09c      	beq.n	800868c <_strtod_l+0x9a4>
 8008752:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008756:	e79d      	b.n	8008694 <_strtod_l+0x9ac>
 8008758:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008888 <_strtod_l+0xba0>
 800875c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008760:	ec57 6b17 	vmov	r6, r7, d7
 8008764:	e796      	b.n	8008694 <_strtod_l+0x9ac>
 8008766:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	46ca      	mov	sl, r9
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1c2      	bne.n	80086f8 <_strtod_l+0xa10>
 8008772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008778:	0d1b      	lsrs	r3, r3, #20
 800877a:	051b      	lsls	r3, r3, #20
 800877c:	429a      	cmp	r2, r3
 800877e:	d1bb      	bne.n	80086f8 <_strtod_l+0xa10>
 8008780:	4630      	mov	r0, r6
 8008782:	4639      	mov	r1, r7
 8008784:	f7f8 fa98 	bl	8000cb8 <__aeabi_d2lz>
 8008788:	f7f7 ff08 	bl	800059c <__aeabi_l2d>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4630      	mov	r0, r6
 8008792:	4639      	mov	r1, r7
 8008794:	f7f7 fd78 	bl	8000288 <__aeabi_dsub>
 8008798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800879a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800879e:	ea43 0308 	orr.w	r3, r3, r8
 80087a2:	4313      	orrs	r3, r2
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	d054      	beq.n	8008854 <_strtod_l+0xb6c>
 80087aa:	a339      	add	r3, pc, #228	; (adr r3, 8008890 <_strtod_l+0xba8>)
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	f7f8 f994 	bl	8000adc <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f47f ace5 	bne.w	8008184 <_strtod_l+0x49c>
 80087ba:	a337      	add	r3, pc, #220	; (adr r3, 8008898 <_strtod_l+0xbb0>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f8 f9a8 	bl	8000b18 <__aeabi_dcmpgt>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d095      	beq.n	80086f8 <_strtod_l+0xa10>
 80087cc:	e4da      	b.n	8008184 <_strtod_l+0x49c>
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	b333      	cbz	r3, 8008820 <_strtod_l+0xb38>
 80087d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087d8:	d822      	bhi.n	8008820 <_strtod_l+0xb38>
 80087da:	a331      	add	r3, pc, #196	; (adr r3, 80088a0 <_strtod_l+0xbb8>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	4630      	mov	r0, r6
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f8 f984 	bl	8000af0 <__aeabi_dcmple>
 80087e8:	b1a0      	cbz	r0, 8008814 <_strtod_l+0xb2c>
 80087ea:	4639      	mov	r1, r7
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7f8 f9db 	bl	8000ba8 <__aeabi_d2uiz>
 80087f2:	2801      	cmp	r0, #1
 80087f4:	bf38      	it	cc
 80087f6:	2001      	movcc	r0, #1
 80087f8:	f7f7 fe84 	bl	8000504 <__aeabi_ui2d>
 80087fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087fe:	4606      	mov	r6, r0
 8008800:	460f      	mov	r7, r1
 8008802:	bb23      	cbnz	r3, 800884e <_strtod_l+0xb66>
 8008804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008808:	9010      	str	r0, [sp, #64]	; 0x40
 800880a:	9311      	str	r3, [sp, #68]	; 0x44
 800880c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008810:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008818:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008820:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008824:	eeb0 0a48 	vmov.f32	s0, s16
 8008828:	eef0 0a68 	vmov.f32	s1, s17
 800882c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008830:	f003 f806 	bl	800b840 <__ulp>
 8008834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008838:	ec53 2b10 	vmov	r2, r3, d0
 800883c:	f7f7 fedc 	bl	80005f8 <__aeabi_dmul>
 8008840:	ec53 2b18 	vmov	r2, r3, d8
 8008844:	f7f7 fd22 	bl	800028c <__adddf3>
 8008848:	4680      	mov	r8, r0
 800884a:	4689      	mov	r9, r1
 800884c:	e78d      	b.n	800876a <_strtod_l+0xa82>
 800884e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008852:	e7db      	b.n	800880c <_strtod_l+0xb24>
 8008854:	a314      	add	r3, pc, #80	; (adr r3, 80088a8 <_strtod_l+0xbc0>)
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f7f8 f93f 	bl	8000adc <__aeabi_dcmplt>
 800885e:	e7b3      	b.n	80087c8 <_strtod_l+0xae0>
 8008860:	2300      	movs	r3, #0
 8008862:	930a      	str	r3, [sp, #40]	; 0x28
 8008864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	f7ff ba7c 	b.w	8007d66 <_strtod_l+0x7e>
 800886e:	2a65      	cmp	r2, #101	; 0x65
 8008870:	f43f ab75 	beq.w	8007f5e <_strtod_l+0x276>
 8008874:	2a45      	cmp	r2, #69	; 0x45
 8008876:	f43f ab72 	beq.w	8007f5e <_strtod_l+0x276>
 800887a:	2301      	movs	r3, #1
 800887c:	f7ff bbaa 	b.w	8007fd4 <_strtod_l+0x2ec>
 8008880:	00000000 	.word	0x00000000
 8008884:	bff00000 	.word	0xbff00000
 8008888:	00000000 	.word	0x00000000
 800888c:	3ff00000 	.word	0x3ff00000
 8008890:	94a03595 	.word	0x94a03595
 8008894:	3fdfffff 	.word	0x3fdfffff
 8008898:	35afe535 	.word	0x35afe535
 800889c:	3fe00000 	.word	0x3fe00000
 80088a0:	ffc00000 	.word	0xffc00000
 80088a4:	41dfffff 	.word	0x41dfffff
 80088a8:	94a03595 	.word	0x94a03595
 80088ac:	3fcfffff 	.word	0x3fcfffff
 80088b0:	3ff00000 	.word	0x3ff00000
 80088b4:	3fe00000 	.word	0x3fe00000
 80088b8:	7ff00000 	.word	0x7ff00000
 80088bc:	7fe00000 	.word	0x7fe00000
 80088c0:	7c9fffff 	.word	0x7c9fffff
 80088c4:	7fefffff 	.word	0x7fefffff

080088c8 <_strtod_r>:
 80088c8:	4b01      	ldr	r3, [pc, #4]	; (80088d0 <_strtod_r+0x8>)
 80088ca:	f7ff ba0d 	b.w	8007ce8 <_strtod_l>
 80088ce:	bf00      	nop
 80088d0:	20000058 	.word	0x20000058

080088d4 <strtof>:
 80088d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800899c <strtof+0xc8>
 80088dc:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <strtof+0xb4>)
 80088de:	460a      	mov	r2, r1
 80088e0:	ed2d 8b02 	vpush	{d8}
 80088e4:	4601      	mov	r1, r0
 80088e6:	f8d8 0000 	ldr.w	r0, [r8]
 80088ea:	f7ff f9fd 	bl	8007ce8 <_strtod_l>
 80088ee:	ec55 4b10 	vmov	r4, r5, d0
 80088f2:	ee10 2a10 	vmov	r2, s0
 80088f6:	ee10 0a10 	vmov	r0, s0
 80088fa:	462b      	mov	r3, r5
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7f8 f915 	bl	8000b2c <__aeabi_dcmpun>
 8008902:	b190      	cbz	r0, 800892a <strtof+0x56>
 8008904:	2d00      	cmp	r5, #0
 8008906:	4821      	ldr	r0, [pc, #132]	; (800898c <strtof+0xb8>)
 8008908:	da09      	bge.n	800891e <strtof+0x4a>
 800890a:	f001 f9d9 	bl	8009cc0 <nanf>
 800890e:	eeb1 8a40 	vneg.f32	s16, s0
 8008912:	eeb0 0a48 	vmov.f32	s0, s16
 8008916:	ecbd 8b02 	vpop	{d8}
 800891a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800891e:	ecbd 8b02 	vpop	{d8}
 8008922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	f001 b9cb 	b.w	8009cc0 <nanf>
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f8 f95b 	bl	8000be8 <__aeabi_d2f>
 8008932:	ee08 0a10 	vmov	s16, r0
 8008936:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008990 <strtof+0xbc>
 800893a:	eeb0 7ac8 	vabs.f32	s14, s16
 800893e:	eeb4 7a67 	vcmp.f32	s14, s15
 8008942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008946:	dd11      	ble.n	800896c <strtof+0x98>
 8008948:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800894c:	4b11      	ldr	r3, [pc, #68]	; (8008994 <strtof+0xc0>)
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	4620      	mov	r0, r4
 8008954:	4639      	mov	r1, r7
 8008956:	f7f8 f8e9 	bl	8000b2c <__aeabi_dcmpun>
 800895a:	b980      	cbnz	r0, 800897e <strtof+0xaa>
 800895c:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <strtof+0xc0>)
 800895e:	f04f 32ff 	mov.w	r2, #4294967295
 8008962:	4620      	mov	r0, r4
 8008964:	4639      	mov	r1, r7
 8008966:	f7f8 f8c3 	bl	8000af0 <__aeabi_dcmple>
 800896a:	b940      	cbnz	r0, 800897e <strtof+0xaa>
 800896c:	ee18 3a10 	vmov	r3, s16
 8008970:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008974:	d1cd      	bne.n	8008912 <strtof+0x3e>
 8008976:	4b08      	ldr	r3, [pc, #32]	; (8008998 <strtof+0xc4>)
 8008978:	402b      	ands	r3, r5
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0c9      	beq.n	8008912 <strtof+0x3e>
 800897e:	f8d8 3000 	ldr.w	r3, [r8]
 8008982:	2222      	movs	r2, #34	; 0x22
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	e7c4      	b.n	8008912 <strtof+0x3e>
 8008988:	20000058 	.word	0x20000058
 800898c:	0800f6b6 	.word	0x0800f6b6
 8008990:	7f7fffff 	.word	0x7f7fffff
 8008994:	7fefffff 	.word	0x7fefffff
 8008998:	7ff00000 	.word	0x7ff00000
 800899c:	20000210 	.word	0x20000210

080089a0 <_strtol_l.constprop.0>:
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a6:	d001      	beq.n	80089ac <_strtol_l.constprop.0+0xc>
 80089a8:	2b24      	cmp	r3, #36	; 0x24
 80089aa:	d906      	bls.n	80089ba <_strtol_l.constprop.0+0x1a>
 80089ac:	f001 f93c 	bl	8009c28 <__errno>
 80089b0:	2316      	movs	r3, #22
 80089b2:	6003      	str	r3, [r0, #0]
 80089b4:	2000      	movs	r0, #0
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008aa0 <_strtol_l.constprop.0+0x100>
 80089be:	460d      	mov	r5, r1
 80089c0:	462e      	mov	r6, r5
 80089c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80089ca:	f017 0708 	ands.w	r7, r7, #8
 80089ce:	d1f7      	bne.n	80089c0 <_strtol_l.constprop.0+0x20>
 80089d0:	2c2d      	cmp	r4, #45	; 0x2d
 80089d2:	d132      	bne.n	8008a3a <_strtol_l.constprop.0+0x9a>
 80089d4:	782c      	ldrb	r4, [r5, #0]
 80089d6:	2701      	movs	r7, #1
 80089d8:	1cb5      	adds	r5, r6, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d05b      	beq.n	8008a96 <_strtol_l.constprop.0+0xf6>
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d109      	bne.n	80089f6 <_strtol_l.constprop.0+0x56>
 80089e2:	2c30      	cmp	r4, #48	; 0x30
 80089e4:	d107      	bne.n	80089f6 <_strtol_l.constprop.0+0x56>
 80089e6:	782c      	ldrb	r4, [r5, #0]
 80089e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089ec:	2c58      	cmp	r4, #88	; 0x58
 80089ee:	d14d      	bne.n	8008a8c <_strtol_l.constprop.0+0xec>
 80089f0:	786c      	ldrb	r4, [r5, #1]
 80089f2:	2310      	movs	r3, #16
 80089f4:	3502      	adds	r5, #2
 80089f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80089fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80089fe:	f04f 0e00 	mov.w	lr, #0
 8008a02:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a06:	4676      	mov	r6, lr
 8008a08:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a10:	f1bc 0f09 	cmp.w	ip, #9
 8008a14:	d816      	bhi.n	8008a44 <_strtol_l.constprop.0+0xa4>
 8008a16:	4664      	mov	r4, ip
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	dd24      	ble.n	8008a66 <_strtol_l.constprop.0+0xc6>
 8008a1c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a20:	d008      	beq.n	8008a34 <_strtol_l.constprop.0+0x94>
 8008a22:	45b1      	cmp	r9, r6
 8008a24:	d31c      	bcc.n	8008a60 <_strtol_l.constprop.0+0xc0>
 8008a26:	d101      	bne.n	8008a2c <_strtol_l.constprop.0+0x8c>
 8008a28:	45a2      	cmp	sl, r4
 8008a2a:	db19      	blt.n	8008a60 <_strtol_l.constprop.0+0xc0>
 8008a2c:	fb06 4603 	mla	r6, r6, r3, r4
 8008a30:	f04f 0e01 	mov.w	lr, #1
 8008a34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a38:	e7e8      	b.n	8008a0c <_strtol_l.constprop.0+0x6c>
 8008a3a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a3c:	bf04      	itt	eq
 8008a3e:	782c      	ldrbeq	r4, [r5, #0]
 8008a40:	1cb5      	addeq	r5, r6, #2
 8008a42:	e7ca      	b.n	80089da <_strtol_l.constprop.0+0x3a>
 8008a44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a48:	f1bc 0f19 	cmp.w	ip, #25
 8008a4c:	d801      	bhi.n	8008a52 <_strtol_l.constprop.0+0xb2>
 8008a4e:	3c37      	subs	r4, #55	; 0x37
 8008a50:	e7e2      	b.n	8008a18 <_strtol_l.constprop.0+0x78>
 8008a52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a56:	f1bc 0f19 	cmp.w	ip, #25
 8008a5a:	d804      	bhi.n	8008a66 <_strtol_l.constprop.0+0xc6>
 8008a5c:	3c57      	subs	r4, #87	; 0x57
 8008a5e:	e7db      	b.n	8008a18 <_strtol_l.constprop.0+0x78>
 8008a60:	f04f 3eff 	mov.w	lr, #4294967295
 8008a64:	e7e6      	b.n	8008a34 <_strtol_l.constprop.0+0x94>
 8008a66:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a6a:	d105      	bne.n	8008a78 <_strtol_l.constprop.0+0xd8>
 8008a6c:	2322      	movs	r3, #34	; 0x22
 8008a6e:	6003      	str	r3, [r0, #0]
 8008a70:	4646      	mov	r6, r8
 8008a72:	b942      	cbnz	r2, 8008a86 <_strtol_l.constprop.0+0xe6>
 8008a74:	4630      	mov	r0, r6
 8008a76:	e79e      	b.n	80089b6 <_strtol_l.constprop.0+0x16>
 8008a78:	b107      	cbz	r7, 8008a7c <_strtol_l.constprop.0+0xdc>
 8008a7a:	4276      	negs	r6, r6
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	d0f9      	beq.n	8008a74 <_strtol_l.constprop.0+0xd4>
 8008a80:	f1be 0f00 	cmp.w	lr, #0
 8008a84:	d000      	beq.n	8008a88 <_strtol_l.constprop.0+0xe8>
 8008a86:	1e69      	subs	r1, r5, #1
 8008a88:	6011      	str	r1, [r2, #0]
 8008a8a:	e7f3      	b.n	8008a74 <_strtol_l.constprop.0+0xd4>
 8008a8c:	2430      	movs	r4, #48	; 0x30
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1b1      	bne.n	80089f6 <_strtol_l.constprop.0+0x56>
 8008a92:	2308      	movs	r3, #8
 8008a94:	e7af      	b.n	80089f6 <_strtol_l.constprop.0+0x56>
 8008a96:	2c30      	cmp	r4, #48	; 0x30
 8008a98:	d0a5      	beq.n	80089e6 <_strtol_l.constprop.0+0x46>
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	e7ab      	b.n	80089f6 <_strtol_l.constprop.0+0x56>
 8008a9e:	bf00      	nop
 8008aa0:	0800f4c9 	.word	0x0800f4c9

08008aa4 <_strtol_r>:
 8008aa4:	f7ff bf7c 	b.w	80089a0 <_strtol_l.constprop.0>

08008aa8 <strtol>:
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	460a      	mov	r2, r1
 8008aac:	4601      	mov	r1, r0
 8008aae:	4802      	ldr	r0, [pc, #8]	; (8008ab8 <strtol+0x10>)
 8008ab0:	6800      	ldr	r0, [r0, #0]
 8008ab2:	f7ff bf75 	b.w	80089a0 <_strtol_l.constprop.0>
 8008ab6:	bf00      	nop
 8008ab8:	20000210 	.word	0x20000210

08008abc <__cvt>:
 8008abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	ec55 4b10 	vmov	r4, r5, d0
 8008ac4:	2d00      	cmp	r5, #0
 8008ac6:	460e      	mov	r6, r1
 8008ac8:	4619      	mov	r1, r3
 8008aca:	462b      	mov	r3, r5
 8008acc:	bfbb      	ittet	lt
 8008ace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ad2:	461d      	movlt	r5, r3
 8008ad4:	2300      	movge	r3, #0
 8008ad6:	232d      	movlt	r3, #45	; 0x2d
 8008ad8:	700b      	strb	r3, [r1, #0]
 8008ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008adc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ae0:	4691      	mov	r9, r2
 8008ae2:	f023 0820 	bic.w	r8, r3, #32
 8008ae6:	bfbc      	itt	lt
 8008ae8:	4622      	movlt	r2, r4
 8008aea:	4614      	movlt	r4, r2
 8008aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008af0:	d005      	beq.n	8008afe <__cvt+0x42>
 8008af2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008af6:	d100      	bne.n	8008afa <__cvt+0x3e>
 8008af8:	3601      	adds	r6, #1
 8008afa:	2102      	movs	r1, #2
 8008afc:	e000      	b.n	8008b00 <__cvt+0x44>
 8008afe:	2103      	movs	r1, #3
 8008b00:	ab03      	add	r3, sp, #12
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	ab02      	add	r3, sp, #8
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	ec45 4b10 	vmov	d0, r4, r5
 8008b0c:	4653      	mov	r3, sl
 8008b0e:	4632      	mov	r2, r6
 8008b10:	f001 f982 	bl	8009e18 <_dtoa_r>
 8008b14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b18:	4607      	mov	r7, r0
 8008b1a:	d102      	bne.n	8008b22 <__cvt+0x66>
 8008b1c:	f019 0f01 	tst.w	r9, #1
 8008b20:	d022      	beq.n	8008b68 <__cvt+0xac>
 8008b22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b26:	eb07 0906 	add.w	r9, r7, r6
 8008b2a:	d110      	bne.n	8008b4e <__cvt+0x92>
 8008b2c:	783b      	ldrb	r3, [r7, #0]
 8008b2e:	2b30      	cmp	r3, #48	; 0x30
 8008b30:	d10a      	bne.n	8008b48 <__cvt+0x8c>
 8008b32:	2200      	movs	r2, #0
 8008b34:	2300      	movs	r3, #0
 8008b36:	4620      	mov	r0, r4
 8008b38:	4629      	mov	r1, r5
 8008b3a:	f7f7 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b3e:	b918      	cbnz	r0, 8008b48 <__cvt+0x8c>
 8008b40:	f1c6 0601 	rsb	r6, r6, #1
 8008b44:	f8ca 6000 	str.w	r6, [sl]
 8008b48:	f8da 3000 	ldr.w	r3, [sl]
 8008b4c:	4499      	add	r9, r3
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2300      	movs	r3, #0
 8008b52:	4620      	mov	r0, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b5a:	b108      	cbz	r0, 8008b60 <__cvt+0xa4>
 8008b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b60:	2230      	movs	r2, #48	; 0x30
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	454b      	cmp	r3, r9
 8008b66:	d307      	bcc.n	8008b78 <__cvt+0xbc>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b6c:	1bdb      	subs	r3, r3, r7
 8008b6e:	4638      	mov	r0, r7
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	b004      	add	sp, #16
 8008b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b78:	1c59      	adds	r1, r3, #1
 8008b7a:	9103      	str	r1, [sp, #12]
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	e7f0      	b.n	8008b62 <__cvt+0xa6>

08008b80 <__exponent>:
 8008b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b82:	4603      	mov	r3, r0
 8008b84:	2900      	cmp	r1, #0
 8008b86:	bfb8      	it	lt
 8008b88:	4249      	neglt	r1, r1
 8008b8a:	f803 2b02 	strb.w	r2, [r3], #2
 8008b8e:	bfb4      	ite	lt
 8008b90:	222d      	movlt	r2, #45	; 0x2d
 8008b92:	222b      	movge	r2, #43	; 0x2b
 8008b94:	2909      	cmp	r1, #9
 8008b96:	7042      	strb	r2, [r0, #1]
 8008b98:	dd2a      	ble.n	8008bf0 <__exponent+0x70>
 8008b9a:	f10d 0207 	add.w	r2, sp, #7
 8008b9e:	4617      	mov	r7, r2
 8008ba0:	260a      	movs	r6, #10
 8008ba2:	4694      	mov	ip, r2
 8008ba4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008ba8:	fb06 1415 	mls	r4, r6, r5, r1
 8008bac:	3430      	adds	r4, #48	; 0x30
 8008bae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	2c63      	cmp	r4, #99	; 0x63
 8008bb6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008bba:	4629      	mov	r1, r5
 8008bbc:	dcf1      	bgt.n	8008ba2 <__exponent+0x22>
 8008bbe:	3130      	adds	r1, #48	; 0x30
 8008bc0:	f1ac 0402 	sub.w	r4, ip, #2
 8008bc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008bc8:	1c41      	adds	r1, r0, #1
 8008bca:	4622      	mov	r2, r4
 8008bcc:	42ba      	cmp	r2, r7
 8008bce:	d30a      	bcc.n	8008be6 <__exponent+0x66>
 8008bd0:	f10d 0209 	add.w	r2, sp, #9
 8008bd4:	eba2 020c 	sub.w	r2, r2, ip
 8008bd8:	42bc      	cmp	r4, r7
 8008bda:	bf88      	it	hi
 8008bdc:	2200      	movhi	r2, #0
 8008bde:	4413      	add	r3, r2
 8008be0:	1a18      	subs	r0, r3, r0
 8008be2:	b003      	add	sp, #12
 8008be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008bea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008bee:	e7ed      	b.n	8008bcc <__exponent+0x4c>
 8008bf0:	2330      	movs	r3, #48	; 0x30
 8008bf2:	3130      	adds	r1, #48	; 0x30
 8008bf4:	7083      	strb	r3, [r0, #2]
 8008bf6:	70c1      	strb	r1, [r0, #3]
 8008bf8:	1d03      	adds	r3, r0, #4
 8008bfa:	e7f1      	b.n	8008be0 <__exponent+0x60>

08008bfc <_printf_float>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	ed2d 8b02 	vpush	{d8}
 8008c04:	b08d      	sub	sp, #52	; 0x34
 8008c06:	460c      	mov	r4, r1
 8008c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	461f      	mov	r7, r3
 8008c10:	4605      	mov	r5, r0
 8008c12:	f000 ffaf 	bl	8009b74 <_localeconv_r>
 8008c16:	f8d0 a000 	ldr.w	sl, [r0]
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	f7f7 fb28 	bl	8000270 <strlen>
 8008c20:	2300      	movs	r3, #0
 8008c22:	930a      	str	r3, [sp, #40]	; 0x28
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	9305      	str	r3, [sp, #20]
 8008c28:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c30:	3307      	adds	r3, #7
 8008c32:	f023 0307 	bic.w	r3, r3, #7
 8008c36:	f103 0208 	add.w	r2, r3, #8
 8008c3a:	f8c8 2000 	str.w	r2, [r8]
 8008c3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c4c:	ee08 0a10 	vmov	s16, r0
 8008c50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c58:	4b9e      	ldr	r3, [pc, #632]	; (8008ed4 <_printf_float+0x2d8>)
 8008c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5e:	f7f7 ff65 	bl	8000b2c <__aeabi_dcmpun>
 8008c62:	bb88      	cbnz	r0, 8008cc8 <_printf_float+0xcc>
 8008c64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c68:	4b9a      	ldr	r3, [pc, #616]	; (8008ed4 <_printf_float+0x2d8>)
 8008c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6e:	f7f7 ff3f 	bl	8000af0 <__aeabi_dcmple>
 8008c72:	bb48      	cbnz	r0, 8008cc8 <_printf_float+0xcc>
 8008c74:	2200      	movs	r2, #0
 8008c76:	2300      	movs	r3, #0
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	f7f7 ff2e 	bl	8000adc <__aeabi_dcmplt>
 8008c80:	b110      	cbz	r0, 8008c88 <_printf_float+0x8c>
 8008c82:	232d      	movs	r3, #45	; 0x2d
 8008c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c88:	4a93      	ldr	r2, [pc, #588]	; (8008ed8 <_printf_float+0x2dc>)
 8008c8a:	4b94      	ldr	r3, [pc, #592]	; (8008edc <_printf_float+0x2e0>)
 8008c8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c90:	bf94      	ite	ls
 8008c92:	4690      	movls	r8, r2
 8008c94:	4698      	movhi	r8, r3
 8008c96:	2303      	movs	r3, #3
 8008c98:	6123      	str	r3, [r4, #16]
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	f023 0304 	bic.w	r3, r3, #4
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	f04f 0900 	mov.w	r9, #0
 8008ca6:	9700      	str	r7, [sp, #0]
 8008ca8:	4633      	mov	r3, r6
 8008caa:	aa0b      	add	r2, sp, #44	; 0x2c
 8008cac:	4621      	mov	r1, r4
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f000 f9da 	bl	8009068 <_printf_common>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f040 8090 	bne.w	8008dda <_printf_float+0x1de>
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	b00d      	add	sp, #52	; 0x34
 8008cc0:	ecbd 8b02 	vpop	{d8}
 8008cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	4642      	mov	r2, r8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4649      	mov	r1, r9
 8008cd0:	f7f7 ff2c 	bl	8000b2c <__aeabi_dcmpun>
 8008cd4:	b140      	cbz	r0, 8008ce8 <_printf_float+0xec>
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bfbc      	itt	lt
 8008cdc:	232d      	movlt	r3, #45	; 0x2d
 8008cde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ce2:	4a7f      	ldr	r2, [pc, #508]	; (8008ee0 <_printf_float+0x2e4>)
 8008ce4:	4b7f      	ldr	r3, [pc, #508]	; (8008ee4 <_printf_float+0x2e8>)
 8008ce6:	e7d1      	b.n	8008c8c <_printf_float+0x90>
 8008ce8:	6863      	ldr	r3, [r4, #4]
 8008cea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cee:	9206      	str	r2, [sp, #24]
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	d13f      	bne.n	8008d74 <_printf_float+0x178>
 8008cf4:	2306      	movs	r3, #6
 8008cf6:	6063      	str	r3, [r4, #4]
 8008cf8:	9b05      	ldr	r3, [sp, #20]
 8008cfa:	6861      	ldr	r1, [r4, #4]
 8008cfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d00:	2300      	movs	r3, #0
 8008d02:	9303      	str	r3, [sp, #12]
 8008d04:	ab0a      	add	r3, sp, #40	; 0x28
 8008d06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d0a:	ab09      	add	r3, sp, #36	; 0x24
 8008d0c:	ec49 8b10 	vmov	d0, r8, r9
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	6022      	str	r2, [r4, #0]
 8008d14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f7ff fecf 	bl	8008abc <__cvt>
 8008d1e:	9b06      	ldr	r3, [sp, #24]
 8008d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d22:	2b47      	cmp	r3, #71	; 0x47
 8008d24:	4680      	mov	r8, r0
 8008d26:	d108      	bne.n	8008d3a <_printf_float+0x13e>
 8008d28:	1cc8      	adds	r0, r1, #3
 8008d2a:	db02      	blt.n	8008d32 <_printf_float+0x136>
 8008d2c:	6863      	ldr	r3, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	dd41      	ble.n	8008db6 <_printf_float+0x1ba>
 8008d32:	f1ab 0302 	sub.w	r3, fp, #2
 8008d36:	fa5f fb83 	uxtb.w	fp, r3
 8008d3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d3e:	d820      	bhi.n	8008d82 <_printf_float+0x186>
 8008d40:	3901      	subs	r1, #1
 8008d42:	465a      	mov	r2, fp
 8008d44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d48:	9109      	str	r1, [sp, #36]	; 0x24
 8008d4a:	f7ff ff19 	bl	8008b80 <__exponent>
 8008d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d50:	1813      	adds	r3, r2, r0
 8008d52:	2a01      	cmp	r2, #1
 8008d54:	4681      	mov	r9, r0
 8008d56:	6123      	str	r3, [r4, #16]
 8008d58:	dc02      	bgt.n	8008d60 <_printf_float+0x164>
 8008d5a:	6822      	ldr	r2, [r4, #0]
 8008d5c:	07d2      	lsls	r2, r2, #31
 8008d5e:	d501      	bpl.n	8008d64 <_printf_float+0x168>
 8008d60:	3301      	adds	r3, #1
 8008d62:	6123      	str	r3, [r4, #16]
 8008d64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d09c      	beq.n	8008ca6 <_printf_float+0xaa>
 8008d6c:	232d      	movs	r3, #45	; 0x2d
 8008d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d72:	e798      	b.n	8008ca6 <_printf_float+0xaa>
 8008d74:	9a06      	ldr	r2, [sp, #24]
 8008d76:	2a47      	cmp	r2, #71	; 0x47
 8008d78:	d1be      	bne.n	8008cf8 <_printf_float+0xfc>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1bc      	bne.n	8008cf8 <_printf_float+0xfc>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e7b9      	b.n	8008cf6 <_printf_float+0xfa>
 8008d82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d86:	d118      	bne.n	8008dba <_printf_float+0x1be>
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	6863      	ldr	r3, [r4, #4]
 8008d8c:	dd0b      	ble.n	8008da6 <_printf_float+0x1aa>
 8008d8e:	6121      	str	r1, [r4, #16]
 8008d90:	b913      	cbnz	r3, 8008d98 <_printf_float+0x19c>
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	07d0      	lsls	r0, r2, #31
 8008d96:	d502      	bpl.n	8008d9e <_printf_float+0x1a2>
 8008d98:	3301      	adds	r3, #1
 8008d9a:	440b      	add	r3, r1
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008da0:	f04f 0900 	mov.w	r9, #0
 8008da4:	e7de      	b.n	8008d64 <_printf_float+0x168>
 8008da6:	b913      	cbnz	r3, 8008dae <_printf_float+0x1b2>
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	07d2      	lsls	r2, r2, #31
 8008dac:	d501      	bpl.n	8008db2 <_printf_float+0x1b6>
 8008dae:	3302      	adds	r3, #2
 8008db0:	e7f4      	b.n	8008d9c <_printf_float+0x1a0>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e7f2      	b.n	8008d9c <_printf_float+0x1a0>
 8008db6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	db05      	blt.n	8008dcc <_printf_float+0x1d0>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	6121      	str	r1, [r4, #16]
 8008dc4:	07d8      	lsls	r0, r3, #31
 8008dc6:	d5ea      	bpl.n	8008d9e <_printf_float+0x1a2>
 8008dc8:	1c4b      	adds	r3, r1, #1
 8008dca:	e7e7      	b.n	8008d9c <_printf_float+0x1a0>
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	bfd4      	ite	le
 8008dd0:	f1c1 0202 	rsble	r2, r1, #2
 8008dd4:	2201      	movgt	r2, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	e7e0      	b.n	8008d9c <_printf_float+0x1a0>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	055a      	lsls	r2, r3, #21
 8008dde:	d407      	bmi.n	8008df0 <_printf_float+0x1f4>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	4642      	mov	r2, r8
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	d12c      	bne.n	8008e48 <_printf_float+0x24c>
 8008dee:	e764      	b.n	8008cba <_printf_float+0xbe>
 8008df0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008df4:	f240 80e0 	bls.w	8008fb8 <_printf_float+0x3bc>
 8008df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f7f7 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d034      	beq.n	8008e72 <_printf_float+0x276>
 8008e08:	4a37      	ldr	r2, [pc, #220]	; (8008ee8 <_printf_float+0x2ec>)
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4628      	mov	r0, r5
 8008e10:	47b8      	blx	r7
 8008e12:	3001      	adds	r0, #1
 8008e14:	f43f af51 	beq.w	8008cba <_printf_float+0xbe>
 8008e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	db02      	blt.n	8008e26 <_printf_float+0x22a>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	07d8      	lsls	r0, r3, #31
 8008e24:	d510      	bpl.n	8008e48 <_printf_float+0x24c>
 8008e26:	ee18 3a10 	vmov	r3, s16
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4628      	mov	r0, r5
 8008e30:	47b8      	blx	r7
 8008e32:	3001      	adds	r0, #1
 8008e34:	f43f af41 	beq.w	8008cba <_printf_float+0xbe>
 8008e38:	f04f 0800 	mov.w	r8, #0
 8008e3c:	f104 091a 	add.w	r9, r4, #26
 8008e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e42:	3b01      	subs	r3, #1
 8008e44:	4543      	cmp	r3, r8
 8008e46:	dc09      	bgt.n	8008e5c <_printf_float+0x260>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	079b      	lsls	r3, r3, #30
 8008e4c:	f100 8107 	bmi.w	800905e <_printf_float+0x462>
 8008e50:	68e0      	ldr	r0, [r4, #12]
 8008e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e54:	4298      	cmp	r0, r3
 8008e56:	bfb8      	it	lt
 8008e58:	4618      	movlt	r0, r3
 8008e5a:	e730      	b.n	8008cbe <_printf_float+0xc2>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	464a      	mov	r2, r9
 8008e60:	4631      	mov	r1, r6
 8008e62:	4628      	mov	r0, r5
 8008e64:	47b8      	blx	r7
 8008e66:	3001      	adds	r0, #1
 8008e68:	f43f af27 	beq.w	8008cba <_printf_float+0xbe>
 8008e6c:	f108 0801 	add.w	r8, r8, #1
 8008e70:	e7e6      	b.n	8008e40 <_printf_float+0x244>
 8008e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dc39      	bgt.n	8008eec <_printf_float+0x2f0>
 8008e78:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <_printf_float+0x2ec>)
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	4628      	mov	r0, r5
 8008e80:	47b8      	blx	r7
 8008e82:	3001      	adds	r0, #1
 8008e84:	f43f af19 	beq.w	8008cba <_printf_float+0xbe>
 8008e88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	d102      	bne.n	8008e96 <_printf_float+0x29a>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	07d9      	lsls	r1, r3, #31
 8008e94:	d5d8      	bpl.n	8008e48 <_printf_float+0x24c>
 8008e96:	ee18 3a10 	vmov	r3, s16
 8008e9a:	4652      	mov	r2, sl
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b8      	blx	r7
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	f43f af09 	beq.w	8008cba <_printf_float+0xbe>
 8008ea8:	f04f 0900 	mov.w	r9, #0
 8008eac:	f104 0a1a 	add.w	sl, r4, #26
 8008eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb2:	425b      	negs	r3, r3
 8008eb4:	454b      	cmp	r3, r9
 8008eb6:	dc01      	bgt.n	8008ebc <_printf_float+0x2c0>
 8008eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eba:	e792      	b.n	8008de2 <_printf_float+0x1e6>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4652      	mov	r2, sl
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	47b8      	blx	r7
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	f43f aef7 	beq.w	8008cba <_printf_float+0xbe>
 8008ecc:	f109 0901 	add.w	r9, r9, #1
 8008ed0:	e7ee      	b.n	8008eb0 <_printf_float+0x2b4>
 8008ed2:	bf00      	nop
 8008ed4:	7fefffff 	.word	0x7fefffff
 8008ed8:	0800f5c9 	.word	0x0800f5c9
 8008edc:	0800f5cd 	.word	0x0800f5cd
 8008ee0:	0800f5d1 	.word	0x0800f5d1
 8008ee4:	0800f5d5 	.word	0x0800f5d5
 8008ee8:	0800f5d9 	.word	0x0800f5d9
 8008eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	bfa8      	it	ge
 8008ef4:	461a      	movge	r2, r3
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	4691      	mov	r9, r2
 8008efa:	dc37      	bgt.n	8008f6c <_printf_float+0x370>
 8008efc:	f04f 0b00 	mov.w	fp, #0
 8008f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f04:	f104 021a 	add.w	r2, r4, #26
 8008f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f0a:	9305      	str	r3, [sp, #20]
 8008f0c:	eba3 0309 	sub.w	r3, r3, r9
 8008f10:	455b      	cmp	r3, fp
 8008f12:	dc33      	bgt.n	8008f7c <_printf_float+0x380>
 8008f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	db3b      	blt.n	8008f94 <_printf_float+0x398>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	07da      	lsls	r2, r3, #31
 8008f20:	d438      	bmi.n	8008f94 <_printf_float+0x398>
 8008f22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f26:	eba2 0903 	sub.w	r9, r2, r3
 8008f2a:	9b05      	ldr	r3, [sp, #20]
 8008f2c:	1ad2      	subs	r2, r2, r3
 8008f2e:	4591      	cmp	r9, r2
 8008f30:	bfa8      	it	ge
 8008f32:	4691      	movge	r9, r2
 8008f34:	f1b9 0f00 	cmp.w	r9, #0
 8008f38:	dc35      	bgt.n	8008fa6 <_printf_float+0x3aa>
 8008f3a:	f04f 0800 	mov.w	r8, #0
 8008f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f42:	f104 0a1a 	add.w	sl, r4, #26
 8008f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f4a:	1a9b      	subs	r3, r3, r2
 8008f4c:	eba3 0309 	sub.w	r3, r3, r9
 8008f50:	4543      	cmp	r3, r8
 8008f52:	f77f af79 	ble.w	8008e48 <_printf_float+0x24c>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4652      	mov	r2, sl
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	f43f aeaa 	beq.w	8008cba <_printf_float+0xbe>
 8008f66:	f108 0801 	add.w	r8, r8, #1
 8008f6a:	e7ec      	b.n	8008f46 <_printf_float+0x34a>
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4642      	mov	r2, r8
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	d1c0      	bne.n	8008efc <_printf_float+0x300>
 8008f7a:	e69e      	b.n	8008cba <_printf_float+0xbe>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	9205      	str	r2, [sp, #20]
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f ae97 	beq.w	8008cba <_printf_float+0xbe>
 8008f8c:	9a05      	ldr	r2, [sp, #20]
 8008f8e:	f10b 0b01 	add.w	fp, fp, #1
 8008f92:	e7b9      	b.n	8008f08 <_printf_float+0x30c>
 8008f94:	ee18 3a10 	vmov	r3, s16
 8008f98:	4652      	mov	r2, sl
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1be      	bne.n	8008f22 <_printf_float+0x326>
 8008fa4:	e689      	b.n	8008cba <_printf_float+0xbe>
 8008fa6:	9a05      	ldr	r2, [sp, #20]
 8008fa8:	464b      	mov	r3, r9
 8008faa:	4442      	add	r2, r8
 8008fac:	4631      	mov	r1, r6
 8008fae:	4628      	mov	r0, r5
 8008fb0:	47b8      	blx	r7
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	d1c1      	bne.n	8008f3a <_printf_float+0x33e>
 8008fb6:	e680      	b.n	8008cba <_printf_float+0xbe>
 8008fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fba:	2a01      	cmp	r2, #1
 8008fbc:	dc01      	bgt.n	8008fc2 <_printf_float+0x3c6>
 8008fbe:	07db      	lsls	r3, r3, #31
 8008fc0:	d53a      	bpl.n	8009038 <_printf_float+0x43c>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b8      	blx	r7
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f43f ae74 	beq.w	8008cba <_printf_float+0xbe>
 8008fd2:	ee18 3a10 	vmov	r3, s16
 8008fd6:	4652      	mov	r2, sl
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f ae6b 	beq.w	8008cba <_printf_float+0xbe>
 8008fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2300      	movs	r3, #0
 8008fec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008ff0:	f7f7 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff4:	b9d8      	cbnz	r0, 800902e <_printf_float+0x432>
 8008ff6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ffa:	f108 0201 	add.w	r2, r8, #1
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	d10e      	bne.n	8009026 <_printf_float+0x42a>
 8009008:	e657      	b.n	8008cba <_printf_float+0xbe>
 800900a:	2301      	movs	r3, #1
 800900c:	4652      	mov	r2, sl
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	f43f ae50 	beq.w	8008cba <_printf_float+0xbe>
 800901a:	f108 0801 	add.w	r8, r8, #1
 800901e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009020:	3b01      	subs	r3, #1
 8009022:	4543      	cmp	r3, r8
 8009024:	dcf1      	bgt.n	800900a <_printf_float+0x40e>
 8009026:	464b      	mov	r3, r9
 8009028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800902c:	e6da      	b.n	8008de4 <_printf_float+0x1e8>
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	f104 0a1a 	add.w	sl, r4, #26
 8009036:	e7f2      	b.n	800901e <_printf_float+0x422>
 8009038:	2301      	movs	r3, #1
 800903a:	4642      	mov	r2, r8
 800903c:	e7df      	b.n	8008ffe <_printf_float+0x402>
 800903e:	2301      	movs	r3, #1
 8009040:	464a      	mov	r2, r9
 8009042:	4631      	mov	r1, r6
 8009044:	4628      	mov	r0, r5
 8009046:	47b8      	blx	r7
 8009048:	3001      	adds	r0, #1
 800904a:	f43f ae36 	beq.w	8008cba <_printf_float+0xbe>
 800904e:	f108 0801 	add.w	r8, r8, #1
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009056:	1a5b      	subs	r3, r3, r1
 8009058:	4543      	cmp	r3, r8
 800905a:	dcf0      	bgt.n	800903e <_printf_float+0x442>
 800905c:	e6f8      	b.n	8008e50 <_printf_float+0x254>
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	f104 0919 	add.w	r9, r4, #25
 8009066:	e7f4      	b.n	8009052 <_printf_float+0x456>

08009068 <_printf_common>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	4616      	mov	r6, r2
 800906e:	4699      	mov	r9, r3
 8009070:	688a      	ldr	r2, [r1, #8]
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009078:	4293      	cmp	r3, r2
 800907a:	bfb8      	it	lt
 800907c:	4613      	movlt	r3, r2
 800907e:	6033      	str	r3, [r6, #0]
 8009080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009084:	4607      	mov	r7, r0
 8009086:	460c      	mov	r4, r1
 8009088:	b10a      	cbz	r2, 800908e <_printf_common+0x26>
 800908a:	3301      	adds	r3, #1
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	0699      	lsls	r1, r3, #26
 8009092:	bf42      	ittt	mi
 8009094:	6833      	ldrmi	r3, [r6, #0]
 8009096:	3302      	addmi	r3, #2
 8009098:	6033      	strmi	r3, [r6, #0]
 800909a:	6825      	ldr	r5, [r4, #0]
 800909c:	f015 0506 	ands.w	r5, r5, #6
 80090a0:	d106      	bne.n	80090b0 <_printf_common+0x48>
 80090a2:	f104 0a19 	add.w	sl, r4, #25
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	6832      	ldr	r2, [r6, #0]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dc26      	bgt.n	80090fe <_printf_common+0x96>
 80090b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b4:	1e13      	subs	r3, r2, #0
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	0692      	lsls	r2, r2, #26
 80090be:	d42b      	bmi.n	8009118 <_printf_common+0xb0>
 80090c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c4:	4649      	mov	r1, r9
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d01e      	beq.n	800910c <_printf_common+0xa4>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	6922      	ldr	r2, [r4, #16]
 80090d2:	f003 0306 	and.w	r3, r3, #6
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	bf02      	ittt	eq
 80090da:	68e5      	ldreq	r5, [r4, #12]
 80090dc:	6833      	ldreq	r3, [r6, #0]
 80090de:	1aed      	subeq	r5, r5, r3
 80090e0:	68a3      	ldr	r3, [r4, #8]
 80090e2:	bf0c      	ite	eq
 80090e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e8:	2500      	movne	r5, #0
 80090ea:	4293      	cmp	r3, r2
 80090ec:	bfc4      	itt	gt
 80090ee:	1a9b      	subgt	r3, r3, r2
 80090f0:	18ed      	addgt	r5, r5, r3
 80090f2:	2600      	movs	r6, #0
 80090f4:	341a      	adds	r4, #26
 80090f6:	42b5      	cmp	r5, r6
 80090f8:	d11a      	bne.n	8009130 <_printf_common+0xc8>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e008      	b.n	8009110 <_printf_common+0xa8>
 80090fe:	2301      	movs	r3, #1
 8009100:	4652      	mov	r2, sl
 8009102:	4649      	mov	r1, r9
 8009104:	4638      	mov	r0, r7
 8009106:	47c0      	blx	r8
 8009108:	3001      	adds	r0, #1
 800910a:	d103      	bne.n	8009114 <_printf_common+0xac>
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009114:	3501      	adds	r5, #1
 8009116:	e7c6      	b.n	80090a6 <_printf_common+0x3e>
 8009118:	18e1      	adds	r1, r4, r3
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	2030      	movs	r0, #48	; 0x30
 800911e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009122:	4422      	add	r2, r4
 8009124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800912c:	3302      	adds	r3, #2
 800912e:	e7c7      	b.n	80090c0 <_printf_common+0x58>
 8009130:	2301      	movs	r3, #1
 8009132:	4622      	mov	r2, r4
 8009134:	4649      	mov	r1, r9
 8009136:	4638      	mov	r0, r7
 8009138:	47c0      	blx	r8
 800913a:	3001      	adds	r0, #1
 800913c:	d0e6      	beq.n	800910c <_printf_common+0xa4>
 800913e:	3601      	adds	r6, #1
 8009140:	e7d9      	b.n	80090f6 <_printf_common+0x8e>
	...

08009144 <_printf_i>:
 8009144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	7e0f      	ldrb	r7, [r1, #24]
 800914a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800914c:	2f78      	cmp	r7, #120	; 0x78
 800914e:	4691      	mov	r9, r2
 8009150:	4680      	mov	r8, r0
 8009152:	460c      	mov	r4, r1
 8009154:	469a      	mov	sl, r3
 8009156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800915a:	d807      	bhi.n	800916c <_printf_i+0x28>
 800915c:	2f62      	cmp	r7, #98	; 0x62
 800915e:	d80a      	bhi.n	8009176 <_printf_i+0x32>
 8009160:	2f00      	cmp	r7, #0
 8009162:	f000 80d4 	beq.w	800930e <_printf_i+0x1ca>
 8009166:	2f58      	cmp	r7, #88	; 0x58
 8009168:	f000 80c0 	beq.w	80092ec <_printf_i+0x1a8>
 800916c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009174:	e03a      	b.n	80091ec <_printf_i+0xa8>
 8009176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800917a:	2b15      	cmp	r3, #21
 800917c:	d8f6      	bhi.n	800916c <_printf_i+0x28>
 800917e:	a101      	add	r1, pc, #4	; (adr r1, 8009184 <_printf_i+0x40>)
 8009180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009184:	080091dd 	.word	0x080091dd
 8009188:	080091f1 	.word	0x080091f1
 800918c:	0800916d 	.word	0x0800916d
 8009190:	0800916d 	.word	0x0800916d
 8009194:	0800916d 	.word	0x0800916d
 8009198:	0800916d 	.word	0x0800916d
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	0800916d 	.word	0x0800916d
 80091a4:	0800916d 	.word	0x0800916d
 80091a8:	0800916d 	.word	0x0800916d
 80091ac:	0800916d 	.word	0x0800916d
 80091b0:	080092f5 	.word	0x080092f5
 80091b4:	0800921d 	.word	0x0800921d
 80091b8:	080092af 	.word	0x080092af
 80091bc:	0800916d 	.word	0x0800916d
 80091c0:	0800916d 	.word	0x0800916d
 80091c4:	08009317 	.word	0x08009317
 80091c8:	0800916d 	.word	0x0800916d
 80091cc:	0800921d 	.word	0x0800921d
 80091d0:	0800916d 	.word	0x0800916d
 80091d4:	0800916d 	.word	0x0800916d
 80091d8:	080092b7 	.word	0x080092b7
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	1d1a      	adds	r2, r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	602a      	str	r2, [r5, #0]
 80091e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091ec:	2301      	movs	r3, #1
 80091ee:	e09f      	b.n	8009330 <_printf_i+0x1ec>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	0607      	lsls	r7, r0, #24
 80091f6:	f103 0104 	add.w	r1, r3, #4
 80091fa:	6029      	str	r1, [r5, #0]
 80091fc:	d501      	bpl.n	8009202 <_printf_i+0xbe>
 80091fe:	681e      	ldr	r6, [r3, #0]
 8009200:	e003      	b.n	800920a <_printf_i+0xc6>
 8009202:	0646      	lsls	r6, r0, #25
 8009204:	d5fb      	bpl.n	80091fe <_printf_i+0xba>
 8009206:	f9b3 6000 	ldrsh.w	r6, [r3]
 800920a:	2e00      	cmp	r6, #0
 800920c:	da03      	bge.n	8009216 <_printf_i+0xd2>
 800920e:	232d      	movs	r3, #45	; 0x2d
 8009210:	4276      	negs	r6, r6
 8009212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009216:	485a      	ldr	r0, [pc, #360]	; (8009380 <_printf_i+0x23c>)
 8009218:	230a      	movs	r3, #10
 800921a:	e012      	b.n	8009242 <_printf_i+0xfe>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	6029      	str	r1, [r5, #0]
 8009224:	0605      	lsls	r5, r0, #24
 8009226:	d501      	bpl.n	800922c <_printf_i+0xe8>
 8009228:	681e      	ldr	r6, [r3, #0]
 800922a:	e002      	b.n	8009232 <_printf_i+0xee>
 800922c:	0641      	lsls	r1, r0, #25
 800922e:	d5fb      	bpl.n	8009228 <_printf_i+0xe4>
 8009230:	881e      	ldrh	r6, [r3, #0]
 8009232:	4853      	ldr	r0, [pc, #332]	; (8009380 <_printf_i+0x23c>)
 8009234:	2f6f      	cmp	r7, #111	; 0x6f
 8009236:	bf0c      	ite	eq
 8009238:	2308      	moveq	r3, #8
 800923a:	230a      	movne	r3, #10
 800923c:	2100      	movs	r1, #0
 800923e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009242:	6865      	ldr	r5, [r4, #4]
 8009244:	60a5      	str	r5, [r4, #8]
 8009246:	2d00      	cmp	r5, #0
 8009248:	bfa2      	ittt	ge
 800924a:	6821      	ldrge	r1, [r4, #0]
 800924c:	f021 0104 	bicge.w	r1, r1, #4
 8009250:	6021      	strge	r1, [r4, #0]
 8009252:	b90e      	cbnz	r6, 8009258 <_printf_i+0x114>
 8009254:	2d00      	cmp	r5, #0
 8009256:	d04b      	beq.n	80092f0 <_printf_i+0x1ac>
 8009258:	4615      	mov	r5, r2
 800925a:	fbb6 f1f3 	udiv	r1, r6, r3
 800925e:	fb03 6711 	mls	r7, r3, r1, r6
 8009262:	5dc7      	ldrb	r7, [r0, r7]
 8009264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009268:	4637      	mov	r7, r6
 800926a:	42bb      	cmp	r3, r7
 800926c:	460e      	mov	r6, r1
 800926e:	d9f4      	bls.n	800925a <_printf_i+0x116>
 8009270:	2b08      	cmp	r3, #8
 8009272:	d10b      	bne.n	800928c <_printf_i+0x148>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	07de      	lsls	r6, r3, #31
 8009278:	d508      	bpl.n	800928c <_printf_i+0x148>
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6861      	ldr	r1, [r4, #4]
 800927e:	4299      	cmp	r1, r3
 8009280:	bfde      	ittt	le
 8009282:	2330      	movle	r3, #48	; 0x30
 8009284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800928c:	1b52      	subs	r2, r2, r5
 800928e:	6122      	str	r2, [r4, #16]
 8009290:	f8cd a000 	str.w	sl, [sp]
 8009294:	464b      	mov	r3, r9
 8009296:	aa03      	add	r2, sp, #12
 8009298:	4621      	mov	r1, r4
 800929a:	4640      	mov	r0, r8
 800929c:	f7ff fee4 	bl	8009068 <_printf_common>
 80092a0:	3001      	adds	r0, #1
 80092a2:	d14a      	bne.n	800933a <_printf_i+0x1f6>
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	b004      	add	sp, #16
 80092aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	f043 0320 	orr.w	r3, r3, #32
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	4833      	ldr	r0, [pc, #204]	; (8009384 <_printf_i+0x240>)
 80092b8:	2778      	movs	r7, #120	; 0x78
 80092ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	6829      	ldr	r1, [r5, #0]
 80092c2:	061f      	lsls	r7, r3, #24
 80092c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80092c8:	d402      	bmi.n	80092d0 <_printf_i+0x18c>
 80092ca:	065f      	lsls	r7, r3, #25
 80092cc:	bf48      	it	mi
 80092ce:	b2b6      	uxthmi	r6, r6
 80092d0:	07df      	lsls	r7, r3, #31
 80092d2:	bf48      	it	mi
 80092d4:	f043 0320 	orrmi.w	r3, r3, #32
 80092d8:	6029      	str	r1, [r5, #0]
 80092da:	bf48      	it	mi
 80092dc:	6023      	strmi	r3, [r4, #0]
 80092de:	b91e      	cbnz	r6, 80092e8 <_printf_i+0x1a4>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	f023 0320 	bic.w	r3, r3, #32
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	2310      	movs	r3, #16
 80092ea:	e7a7      	b.n	800923c <_printf_i+0xf8>
 80092ec:	4824      	ldr	r0, [pc, #144]	; (8009380 <_printf_i+0x23c>)
 80092ee:	e7e4      	b.n	80092ba <_printf_i+0x176>
 80092f0:	4615      	mov	r5, r2
 80092f2:	e7bd      	b.n	8009270 <_printf_i+0x12c>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	6826      	ldr	r6, [r4, #0]
 80092f8:	6961      	ldr	r1, [r4, #20]
 80092fa:	1d18      	adds	r0, r3, #4
 80092fc:	6028      	str	r0, [r5, #0]
 80092fe:	0635      	lsls	r5, r6, #24
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	d501      	bpl.n	8009308 <_printf_i+0x1c4>
 8009304:	6019      	str	r1, [r3, #0]
 8009306:	e002      	b.n	800930e <_printf_i+0x1ca>
 8009308:	0670      	lsls	r0, r6, #25
 800930a:	d5fb      	bpl.n	8009304 <_printf_i+0x1c0>
 800930c:	8019      	strh	r1, [r3, #0]
 800930e:	2300      	movs	r3, #0
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	4615      	mov	r5, r2
 8009314:	e7bc      	b.n	8009290 <_printf_i+0x14c>
 8009316:	682b      	ldr	r3, [r5, #0]
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	602a      	str	r2, [r5, #0]
 800931c:	681d      	ldr	r5, [r3, #0]
 800931e:	6862      	ldr	r2, [r4, #4]
 8009320:	2100      	movs	r1, #0
 8009322:	4628      	mov	r0, r5
 8009324:	f7f6 ff54 	bl	80001d0 <memchr>
 8009328:	b108      	cbz	r0, 800932e <_printf_i+0x1ea>
 800932a:	1b40      	subs	r0, r0, r5
 800932c:	6060      	str	r0, [r4, #4]
 800932e:	6863      	ldr	r3, [r4, #4]
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	2300      	movs	r3, #0
 8009334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009338:	e7aa      	b.n	8009290 <_printf_i+0x14c>
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	462a      	mov	r2, r5
 800933e:	4649      	mov	r1, r9
 8009340:	4640      	mov	r0, r8
 8009342:	47d0      	blx	sl
 8009344:	3001      	adds	r0, #1
 8009346:	d0ad      	beq.n	80092a4 <_printf_i+0x160>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	079b      	lsls	r3, r3, #30
 800934c:	d413      	bmi.n	8009376 <_printf_i+0x232>
 800934e:	68e0      	ldr	r0, [r4, #12]
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	4298      	cmp	r0, r3
 8009354:	bfb8      	it	lt
 8009356:	4618      	movlt	r0, r3
 8009358:	e7a6      	b.n	80092a8 <_printf_i+0x164>
 800935a:	2301      	movs	r3, #1
 800935c:	4632      	mov	r2, r6
 800935e:	4649      	mov	r1, r9
 8009360:	4640      	mov	r0, r8
 8009362:	47d0      	blx	sl
 8009364:	3001      	adds	r0, #1
 8009366:	d09d      	beq.n	80092a4 <_printf_i+0x160>
 8009368:	3501      	adds	r5, #1
 800936a:	68e3      	ldr	r3, [r4, #12]
 800936c:	9903      	ldr	r1, [sp, #12]
 800936e:	1a5b      	subs	r3, r3, r1
 8009370:	42ab      	cmp	r3, r5
 8009372:	dcf2      	bgt.n	800935a <_printf_i+0x216>
 8009374:	e7eb      	b.n	800934e <_printf_i+0x20a>
 8009376:	2500      	movs	r5, #0
 8009378:	f104 0619 	add.w	r6, r4, #25
 800937c:	e7f5      	b.n	800936a <_printf_i+0x226>
 800937e:	bf00      	nop
 8009380:	0800f5db 	.word	0x0800f5db
 8009384:	0800f5ec 	.word	0x0800f5ec

08009388 <_scanf_float>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	b087      	sub	sp, #28
 800938e:	4617      	mov	r7, r2
 8009390:	9303      	str	r3, [sp, #12]
 8009392:	688b      	ldr	r3, [r1, #8]
 8009394:	1e5a      	subs	r2, r3, #1
 8009396:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800939a:	bf83      	ittte	hi
 800939c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80093a0:	195b      	addhi	r3, r3, r5
 80093a2:	9302      	strhi	r3, [sp, #8]
 80093a4:	2300      	movls	r3, #0
 80093a6:	bf86      	itte	hi
 80093a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80093ac:	608b      	strhi	r3, [r1, #8]
 80093ae:	9302      	strls	r3, [sp, #8]
 80093b0:	680b      	ldr	r3, [r1, #0]
 80093b2:	468b      	mov	fp, r1
 80093b4:	2500      	movs	r5, #0
 80093b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80093ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80093be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80093c2:	4680      	mov	r8, r0
 80093c4:	460c      	mov	r4, r1
 80093c6:	465e      	mov	r6, fp
 80093c8:	46aa      	mov	sl, r5
 80093ca:	46a9      	mov	r9, r5
 80093cc:	9501      	str	r5, [sp, #4]
 80093ce:	68a2      	ldr	r2, [r4, #8]
 80093d0:	b152      	cbz	r2, 80093e8 <_scanf_float+0x60>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b4e      	cmp	r3, #78	; 0x4e
 80093d8:	d864      	bhi.n	80094a4 <_scanf_float+0x11c>
 80093da:	2b40      	cmp	r3, #64	; 0x40
 80093dc:	d83c      	bhi.n	8009458 <_scanf_float+0xd0>
 80093de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80093e2:	b2c8      	uxtb	r0, r1
 80093e4:	280e      	cmp	r0, #14
 80093e6:	d93a      	bls.n	800945e <_scanf_float+0xd6>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	d003      	beq.n	80093f6 <_scanf_float+0x6e>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093fa:	f1ba 0f01 	cmp.w	sl, #1
 80093fe:	f200 8113 	bhi.w	8009628 <_scanf_float+0x2a0>
 8009402:	455e      	cmp	r6, fp
 8009404:	f200 8105 	bhi.w	8009612 <_scanf_float+0x28a>
 8009408:	2501      	movs	r5, #1
 800940a:	4628      	mov	r0, r5
 800940c:	b007      	add	sp, #28
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009416:	2a0d      	cmp	r2, #13
 8009418:	d8e6      	bhi.n	80093e8 <_scanf_float+0x60>
 800941a:	a101      	add	r1, pc, #4	; (adr r1, 8009420 <_scanf_float+0x98>)
 800941c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009420:	0800955f 	.word	0x0800955f
 8009424:	080093e9 	.word	0x080093e9
 8009428:	080093e9 	.word	0x080093e9
 800942c:	080093e9 	.word	0x080093e9
 8009430:	080095bf 	.word	0x080095bf
 8009434:	08009597 	.word	0x08009597
 8009438:	080093e9 	.word	0x080093e9
 800943c:	080093e9 	.word	0x080093e9
 8009440:	0800956d 	.word	0x0800956d
 8009444:	080093e9 	.word	0x080093e9
 8009448:	080093e9 	.word	0x080093e9
 800944c:	080093e9 	.word	0x080093e9
 8009450:	080093e9 	.word	0x080093e9
 8009454:	08009525 	.word	0x08009525
 8009458:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800945c:	e7db      	b.n	8009416 <_scanf_float+0x8e>
 800945e:	290e      	cmp	r1, #14
 8009460:	d8c2      	bhi.n	80093e8 <_scanf_float+0x60>
 8009462:	a001      	add	r0, pc, #4	; (adr r0, 8009468 <_scanf_float+0xe0>)
 8009464:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009468:	08009517 	.word	0x08009517
 800946c:	080093e9 	.word	0x080093e9
 8009470:	08009517 	.word	0x08009517
 8009474:	080095ab 	.word	0x080095ab
 8009478:	080093e9 	.word	0x080093e9
 800947c:	080094c5 	.word	0x080094c5
 8009480:	08009501 	.word	0x08009501
 8009484:	08009501 	.word	0x08009501
 8009488:	08009501 	.word	0x08009501
 800948c:	08009501 	.word	0x08009501
 8009490:	08009501 	.word	0x08009501
 8009494:	08009501 	.word	0x08009501
 8009498:	08009501 	.word	0x08009501
 800949c:	08009501 	.word	0x08009501
 80094a0:	08009501 	.word	0x08009501
 80094a4:	2b6e      	cmp	r3, #110	; 0x6e
 80094a6:	d809      	bhi.n	80094bc <_scanf_float+0x134>
 80094a8:	2b60      	cmp	r3, #96	; 0x60
 80094aa:	d8b2      	bhi.n	8009412 <_scanf_float+0x8a>
 80094ac:	2b54      	cmp	r3, #84	; 0x54
 80094ae:	d077      	beq.n	80095a0 <_scanf_float+0x218>
 80094b0:	2b59      	cmp	r3, #89	; 0x59
 80094b2:	d199      	bne.n	80093e8 <_scanf_float+0x60>
 80094b4:	2d07      	cmp	r5, #7
 80094b6:	d197      	bne.n	80093e8 <_scanf_float+0x60>
 80094b8:	2508      	movs	r5, #8
 80094ba:	e029      	b.n	8009510 <_scanf_float+0x188>
 80094bc:	2b74      	cmp	r3, #116	; 0x74
 80094be:	d06f      	beq.n	80095a0 <_scanf_float+0x218>
 80094c0:	2b79      	cmp	r3, #121	; 0x79
 80094c2:	e7f6      	b.n	80094b2 <_scanf_float+0x12a>
 80094c4:	6821      	ldr	r1, [r4, #0]
 80094c6:	05c8      	lsls	r0, r1, #23
 80094c8:	d51a      	bpl.n	8009500 <_scanf_float+0x178>
 80094ca:	9b02      	ldr	r3, [sp, #8]
 80094cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80094d0:	6021      	str	r1, [r4, #0]
 80094d2:	f109 0901 	add.w	r9, r9, #1
 80094d6:	b11b      	cbz	r3, 80094e0 <_scanf_float+0x158>
 80094d8:	3b01      	subs	r3, #1
 80094da:	3201      	adds	r2, #1
 80094dc:	9302      	str	r3, [sp, #8]
 80094de:	60a2      	str	r2, [r4, #8]
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	60a3      	str	r3, [r4, #8]
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	6123      	str	r3, [r4, #16]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	607b      	str	r3, [r7, #4]
 80094f4:	f340 8084 	ble.w	8009600 <_scanf_float+0x278>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	3301      	adds	r3, #1
 80094fc:	603b      	str	r3, [r7, #0]
 80094fe:	e766      	b.n	80093ce <_scanf_float+0x46>
 8009500:	eb1a 0f05 	cmn.w	sl, r5
 8009504:	f47f af70 	bne.w	80093e8 <_scanf_float+0x60>
 8009508:	6822      	ldr	r2, [r4, #0]
 800950a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800950e:	6022      	str	r2, [r4, #0]
 8009510:	f806 3b01 	strb.w	r3, [r6], #1
 8009514:	e7e4      	b.n	80094e0 <_scanf_float+0x158>
 8009516:	6822      	ldr	r2, [r4, #0]
 8009518:	0610      	lsls	r0, r2, #24
 800951a:	f57f af65 	bpl.w	80093e8 <_scanf_float+0x60>
 800951e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009522:	e7f4      	b.n	800950e <_scanf_float+0x186>
 8009524:	f1ba 0f00 	cmp.w	sl, #0
 8009528:	d10e      	bne.n	8009548 <_scanf_float+0x1c0>
 800952a:	f1b9 0f00 	cmp.w	r9, #0
 800952e:	d10e      	bne.n	800954e <_scanf_float+0x1c6>
 8009530:	6822      	ldr	r2, [r4, #0]
 8009532:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009536:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800953a:	d108      	bne.n	800954e <_scanf_float+0x1c6>
 800953c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009540:	6022      	str	r2, [r4, #0]
 8009542:	f04f 0a01 	mov.w	sl, #1
 8009546:	e7e3      	b.n	8009510 <_scanf_float+0x188>
 8009548:	f1ba 0f02 	cmp.w	sl, #2
 800954c:	d055      	beq.n	80095fa <_scanf_float+0x272>
 800954e:	2d01      	cmp	r5, #1
 8009550:	d002      	beq.n	8009558 <_scanf_float+0x1d0>
 8009552:	2d04      	cmp	r5, #4
 8009554:	f47f af48 	bne.w	80093e8 <_scanf_float+0x60>
 8009558:	3501      	adds	r5, #1
 800955a:	b2ed      	uxtb	r5, r5
 800955c:	e7d8      	b.n	8009510 <_scanf_float+0x188>
 800955e:	f1ba 0f01 	cmp.w	sl, #1
 8009562:	f47f af41 	bne.w	80093e8 <_scanf_float+0x60>
 8009566:	f04f 0a02 	mov.w	sl, #2
 800956a:	e7d1      	b.n	8009510 <_scanf_float+0x188>
 800956c:	b97d      	cbnz	r5, 800958e <_scanf_float+0x206>
 800956e:	f1b9 0f00 	cmp.w	r9, #0
 8009572:	f47f af3c 	bne.w	80093ee <_scanf_float+0x66>
 8009576:	6822      	ldr	r2, [r4, #0]
 8009578:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800957c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009580:	f47f af39 	bne.w	80093f6 <_scanf_float+0x6e>
 8009584:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009588:	6022      	str	r2, [r4, #0]
 800958a:	2501      	movs	r5, #1
 800958c:	e7c0      	b.n	8009510 <_scanf_float+0x188>
 800958e:	2d03      	cmp	r5, #3
 8009590:	d0e2      	beq.n	8009558 <_scanf_float+0x1d0>
 8009592:	2d05      	cmp	r5, #5
 8009594:	e7de      	b.n	8009554 <_scanf_float+0x1cc>
 8009596:	2d02      	cmp	r5, #2
 8009598:	f47f af26 	bne.w	80093e8 <_scanf_float+0x60>
 800959c:	2503      	movs	r5, #3
 800959e:	e7b7      	b.n	8009510 <_scanf_float+0x188>
 80095a0:	2d06      	cmp	r5, #6
 80095a2:	f47f af21 	bne.w	80093e8 <_scanf_float+0x60>
 80095a6:	2507      	movs	r5, #7
 80095a8:	e7b2      	b.n	8009510 <_scanf_float+0x188>
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	0591      	lsls	r1, r2, #22
 80095ae:	f57f af1b 	bpl.w	80093e8 <_scanf_float+0x60>
 80095b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80095bc:	e7a8      	b.n	8009510 <_scanf_float+0x188>
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80095c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80095c8:	d006      	beq.n	80095d8 <_scanf_float+0x250>
 80095ca:	0550      	lsls	r0, r2, #21
 80095cc:	f57f af0c 	bpl.w	80093e8 <_scanf_float+0x60>
 80095d0:	f1b9 0f00 	cmp.w	r9, #0
 80095d4:	f43f af0f 	beq.w	80093f6 <_scanf_float+0x6e>
 80095d8:	0591      	lsls	r1, r2, #22
 80095da:	bf58      	it	pl
 80095dc:	9901      	ldrpl	r1, [sp, #4]
 80095de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095e2:	bf58      	it	pl
 80095e4:	eba9 0101 	subpl.w	r1, r9, r1
 80095e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80095ec:	bf58      	it	pl
 80095ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	f04f 0900 	mov.w	r9, #0
 80095f8:	e78a      	b.n	8009510 <_scanf_float+0x188>
 80095fa:	f04f 0a03 	mov.w	sl, #3
 80095fe:	e787      	b.n	8009510 <_scanf_float+0x188>
 8009600:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009604:	4639      	mov	r1, r7
 8009606:	4640      	mov	r0, r8
 8009608:	4798      	blx	r3
 800960a:	2800      	cmp	r0, #0
 800960c:	f43f aedf 	beq.w	80093ce <_scanf_float+0x46>
 8009610:	e6ea      	b.n	80093e8 <_scanf_float+0x60>
 8009612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800961a:	463a      	mov	r2, r7
 800961c:	4640      	mov	r0, r8
 800961e:	4798      	blx	r3
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	3b01      	subs	r3, #1
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	e6ec      	b.n	8009402 <_scanf_float+0x7a>
 8009628:	1e6b      	subs	r3, r5, #1
 800962a:	2b06      	cmp	r3, #6
 800962c:	d825      	bhi.n	800967a <_scanf_float+0x2f2>
 800962e:	2d02      	cmp	r5, #2
 8009630:	d836      	bhi.n	80096a0 <_scanf_float+0x318>
 8009632:	455e      	cmp	r6, fp
 8009634:	f67f aee8 	bls.w	8009408 <_scanf_float+0x80>
 8009638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800963c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009640:	463a      	mov	r2, r7
 8009642:	4640      	mov	r0, r8
 8009644:	4798      	blx	r3
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	3b01      	subs	r3, #1
 800964a:	6123      	str	r3, [r4, #16]
 800964c:	e7f1      	b.n	8009632 <_scanf_float+0x2aa>
 800964e:	9802      	ldr	r0, [sp, #8]
 8009650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009654:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009658:	9002      	str	r0, [sp, #8]
 800965a:	463a      	mov	r2, r7
 800965c:	4640      	mov	r0, r8
 800965e:	4798      	blx	r3
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	3b01      	subs	r3, #1
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800966a:	fa5f fa8a 	uxtb.w	sl, sl
 800966e:	f1ba 0f02 	cmp.w	sl, #2
 8009672:	d1ec      	bne.n	800964e <_scanf_float+0x2c6>
 8009674:	3d03      	subs	r5, #3
 8009676:	b2ed      	uxtb	r5, r5
 8009678:	1b76      	subs	r6, r6, r5
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	05da      	lsls	r2, r3, #23
 800967e:	d52f      	bpl.n	80096e0 <_scanf_float+0x358>
 8009680:	055b      	lsls	r3, r3, #21
 8009682:	d510      	bpl.n	80096a6 <_scanf_float+0x31e>
 8009684:	455e      	cmp	r6, fp
 8009686:	f67f aebf 	bls.w	8009408 <_scanf_float+0x80>
 800968a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800968e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009692:	463a      	mov	r2, r7
 8009694:	4640      	mov	r0, r8
 8009696:	4798      	blx	r3
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	3b01      	subs	r3, #1
 800969c:	6123      	str	r3, [r4, #16]
 800969e:	e7f1      	b.n	8009684 <_scanf_float+0x2fc>
 80096a0:	46aa      	mov	sl, r5
 80096a2:	9602      	str	r6, [sp, #8]
 80096a4:	e7df      	b.n	8009666 <_scanf_float+0x2de>
 80096a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	2965      	cmp	r1, #101	; 0x65
 80096ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80096b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	d00c      	beq.n	80096d4 <_scanf_float+0x34c>
 80096ba:	2945      	cmp	r1, #69	; 0x45
 80096bc:	d00a      	beq.n	80096d4 <_scanf_float+0x34c>
 80096be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096c2:	463a      	mov	r2, r7
 80096c4:	4640      	mov	r0, r8
 80096c6:	4798      	blx	r3
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	1eb5      	subs	r5, r6, #2
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096d8:	463a      	mov	r2, r7
 80096da:	4640      	mov	r0, r8
 80096dc:	4798      	blx	r3
 80096de:	462e      	mov	r6, r5
 80096e0:	6825      	ldr	r5, [r4, #0]
 80096e2:	f015 0510 	ands.w	r5, r5, #16
 80096e6:	d158      	bne.n	800979a <_scanf_float+0x412>
 80096e8:	7035      	strb	r5, [r6, #0]
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f4:	d11c      	bne.n	8009730 <_scanf_float+0x3a8>
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	454b      	cmp	r3, r9
 80096fa:	eba3 0209 	sub.w	r2, r3, r9
 80096fe:	d124      	bne.n	800974a <_scanf_float+0x3c2>
 8009700:	2200      	movs	r2, #0
 8009702:	4659      	mov	r1, fp
 8009704:	4640      	mov	r0, r8
 8009706:	f7ff f8df 	bl	80088c8 <_strtod_r>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	6821      	ldr	r1, [r4, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f011 0f02 	tst.w	r1, #2
 8009714:	ec57 6b10 	vmov	r6, r7, d0
 8009718:	f103 0204 	add.w	r2, r3, #4
 800971c:	d020      	beq.n	8009760 <_scanf_float+0x3d8>
 800971e:	9903      	ldr	r1, [sp, #12]
 8009720:	600a      	str	r2, [r1, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	e9c3 6700 	strd	r6, r7, [r3]
 8009728:	68e3      	ldr	r3, [r4, #12]
 800972a:	3301      	adds	r3, #1
 800972c:	60e3      	str	r3, [r4, #12]
 800972e:	e66c      	b.n	800940a <_scanf_float+0x82>
 8009730:	9b04      	ldr	r3, [sp, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0e4      	beq.n	8009700 <_scanf_float+0x378>
 8009736:	9905      	ldr	r1, [sp, #20]
 8009738:	230a      	movs	r3, #10
 800973a:	462a      	mov	r2, r5
 800973c:	3101      	adds	r1, #1
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff f9b0 	bl	8008aa4 <_strtol_r>
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	9e05      	ldr	r6, [sp, #20]
 8009748:	1ac2      	subs	r2, r0, r3
 800974a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800974e:	429e      	cmp	r6, r3
 8009750:	bf28      	it	cs
 8009752:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009756:	4912      	ldr	r1, [pc, #72]	; (80097a0 <_scanf_float+0x418>)
 8009758:	4630      	mov	r0, r6
 800975a:	f000 f91b 	bl	8009994 <siprintf>
 800975e:	e7cf      	b.n	8009700 <_scanf_float+0x378>
 8009760:	f011 0f04 	tst.w	r1, #4
 8009764:	9903      	ldr	r1, [sp, #12]
 8009766:	600a      	str	r2, [r1, #0]
 8009768:	d1db      	bne.n	8009722 <_scanf_float+0x39a>
 800976a:	f8d3 8000 	ldr.w	r8, [r3]
 800976e:	ee10 2a10 	vmov	r2, s0
 8009772:	ee10 0a10 	vmov	r0, s0
 8009776:	463b      	mov	r3, r7
 8009778:	4639      	mov	r1, r7
 800977a:	f7f7 f9d7 	bl	8000b2c <__aeabi_dcmpun>
 800977e:	b128      	cbz	r0, 800978c <_scanf_float+0x404>
 8009780:	4808      	ldr	r0, [pc, #32]	; (80097a4 <_scanf_float+0x41c>)
 8009782:	f000 fa9d 	bl	8009cc0 <nanf>
 8009786:	ed88 0a00 	vstr	s0, [r8]
 800978a:	e7cd      	b.n	8009728 <_scanf_float+0x3a0>
 800978c:	4630      	mov	r0, r6
 800978e:	4639      	mov	r1, r7
 8009790:	f7f7 fa2a 	bl	8000be8 <__aeabi_d2f>
 8009794:	f8c8 0000 	str.w	r0, [r8]
 8009798:	e7c6      	b.n	8009728 <_scanf_float+0x3a0>
 800979a:	2500      	movs	r5, #0
 800979c:	e635      	b.n	800940a <_scanf_float+0x82>
 800979e:	bf00      	nop
 80097a0:	0800f5fd 	.word	0x0800f5fd
 80097a4:	0800f6b6 	.word	0x0800f6b6

080097a8 <std>:
 80097a8:	2300      	movs	r3, #0
 80097aa:	b510      	push	{r4, lr}
 80097ac:	4604      	mov	r4, r0
 80097ae:	e9c0 3300 	strd	r3, r3, [r0]
 80097b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097b6:	6083      	str	r3, [r0, #8]
 80097b8:	8181      	strh	r1, [r0, #12]
 80097ba:	6643      	str	r3, [r0, #100]	; 0x64
 80097bc:	81c2      	strh	r2, [r0, #14]
 80097be:	6183      	str	r3, [r0, #24]
 80097c0:	4619      	mov	r1, r3
 80097c2:	2208      	movs	r2, #8
 80097c4:	305c      	adds	r0, #92	; 0x5c
 80097c6:	f000 f948 	bl	8009a5a <memset>
 80097ca:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <std+0x58>)
 80097cc:	6263      	str	r3, [r4, #36]	; 0x24
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <std+0x5c>)
 80097d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80097d2:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <std+0x60>)
 80097d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <std+0x64>)
 80097d8:	6323      	str	r3, [r4, #48]	; 0x30
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <std+0x68>)
 80097dc:	6224      	str	r4, [r4, #32]
 80097de:	429c      	cmp	r4, r3
 80097e0:	d006      	beq.n	80097f0 <std+0x48>
 80097e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097e6:	4294      	cmp	r4, r2
 80097e8:	d002      	beq.n	80097f0 <std+0x48>
 80097ea:	33d0      	adds	r3, #208	; 0xd0
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d105      	bne.n	80097fc <std+0x54>
 80097f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f8:	f000 ba40 	b.w	8009c7c <__retarget_lock_init_recursive>
 80097fc:	bd10      	pop	{r4, pc}
 80097fe:	bf00      	nop
 8009800:	080099d5 	.word	0x080099d5
 8009804:	080099f7 	.word	0x080099f7
 8009808:	08009a2f 	.word	0x08009a2f
 800980c:	08009a53 	.word	0x08009a53
 8009810:	20000b34 	.word	0x20000b34

08009814 <stdio_exit_handler>:
 8009814:	4a02      	ldr	r2, [pc, #8]	; (8009820 <stdio_exit_handler+0xc>)
 8009816:	4903      	ldr	r1, [pc, #12]	; (8009824 <stdio_exit_handler+0x10>)
 8009818:	4803      	ldr	r0, [pc, #12]	; (8009828 <stdio_exit_handler+0x14>)
 800981a:	f000 b869 	b.w	80098f0 <_fwalk_sglue>
 800981e:	bf00      	nop
 8009820:	2000004c 	.word	0x2000004c
 8009824:	0800be99 	.word	0x0800be99
 8009828:	200001c4 	.word	0x200001c4

0800982c <cleanup_stdio>:
 800982c:	6841      	ldr	r1, [r0, #4]
 800982e:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <cleanup_stdio+0x34>)
 8009830:	4299      	cmp	r1, r3
 8009832:	b510      	push	{r4, lr}
 8009834:	4604      	mov	r4, r0
 8009836:	d001      	beq.n	800983c <cleanup_stdio+0x10>
 8009838:	f002 fb2e 	bl	800be98 <_fflush_r>
 800983c:	68a1      	ldr	r1, [r4, #8]
 800983e:	4b09      	ldr	r3, [pc, #36]	; (8009864 <cleanup_stdio+0x38>)
 8009840:	4299      	cmp	r1, r3
 8009842:	d002      	beq.n	800984a <cleanup_stdio+0x1e>
 8009844:	4620      	mov	r0, r4
 8009846:	f002 fb27 	bl	800be98 <_fflush_r>
 800984a:	68e1      	ldr	r1, [r4, #12]
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <cleanup_stdio+0x3c>)
 800984e:	4299      	cmp	r1, r3
 8009850:	d004      	beq.n	800985c <cleanup_stdio+0x30>
 8009852:	4620      	mov	r0, r4
 8009854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009858:	f002 bb1e 	b.w	800be98 <_fflush_r>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	bf00      	nop
 8009860:	20000b34 	.word	0x20000b34
 8009864:	20000b9c 	.word	0x20000b9c
 8009868:	20000c04 	.word	0x20000c04

0800986c <global_stdio_init.part.0>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4b0b      	ldr	r3, [pc, #44]	; (800989c <global_stdio_init.part.0+0x30>)
 8009870:	4c0b      	ldr	r4, [pc, #44]	; (80098a0 <global_stdio_init.part.0+0x34>)
 8009872:	4a0c      	ldr	r2, [pc, #48]	; (80098a4 <global_stdio_init.part.0+0x38>)
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	4620      	mov	r0, r4
 8009878:	2200      	movs	r2, #0
 800987a:	2104      	movs	r1, #4
 800987c:	f7ff ff94 	bl	80097a8 <std>
 8009880:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009884:	2201      	movs	r2, #1
 8009886:	2109      	movs	r1, #9
 8009888:	f7ff ff8e 	bl	80097a8 <std>
 800988c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009890:	2202      	movs	r2, #2
 8009892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009896:	2112      	movs	r1, #18
 8009898:	f7ff bf86 	b.w	80097a8 <std>
 800989c:	20000c6c 	.word	0x20000c6c
 80098a0:	20000b34 	.word	0x20000b34
 80098a4:	08009815 	.word	0x08009815

080098a8 <__sfp_lock_acquire>:
 80098a8:	4801      	ldr	r0, [pc, #4]	; (80098b0 <__sfp_lock_acquire+0x8>)
 80098aa:	f000 b9e8 	b.w	8009c7e <__retarget_lock_acquire_recursive>
 80098ae:	bf00      	nop
 80098b0:	20000c75 	.word	0x20000c75

080098b4 <__sfp_lock_release>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__sfp_lock_release+0x8>)
 80098b6:	f000 b9e3 	b.w	8009c80 <__retarget_lock_release_recursive>
 80098ba:	bf00      	nop
 80098bc:	20000c75 	.word	0x20000c75

080098c0 <__sinit>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	4604      	mov	r4, r0
 80098c4:	f7ff fff0 	bl	80098a8 <__sfp_lock_acquire>
 80098c8:	6a23      	ldr	r3, [r4, #32]
 80098ca:	b11b      	cbz	r3, 80098d4 <__sinit+0x14>
 80098cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d0:	f7ff bff0 	b.w	80098b4 <__sfp_lock_release>
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <__sinit+0x28>)
 80098d6:	6223      	str	r3, [r4, #32]
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <__sinit+0x2c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f5      	bne.n	80098cc <__sinit+0xc>
 80098e0:	f7ff ffc4 	bl	800986c <global_stdio_init.part.0>
 80098e4:	e7f2      	b.n	80098cc <__sinit+0xc>
 80098e6:	bf00      	nop
 80098e8:	0800982d 	.word	0x0800982d
 80098ec:	20000c6c 	.word	0x20000c6c

080098f0 <_fwalk_sglue>:
 80098f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f4:	4607      	mov	r7, r0
 80098f6:	4688      	mov	r8, r1
 80098f8:	4614      	mov	r4, r2
 80098fa:	2600      	movs	r6, #0
 80098fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009900:	f1b9 0901 	subs.w	r9, r9, #1
 8009904:	d505      	bpl.n	8009912 <_fwalk_sglue+0x22>
 8009906:	6824      	ldr	r4, [r4, #0]
 8009908:	2c00      	cmp	r4, #0
 800990a:	d1f7      	bne.n	80098fc <_fwalk_sglue+0xc>
 800990c:	4630      	mov	r0, r6
 800990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d907      	bls.n	8009928 <_fwalk_sglue+0x38>
 8009918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800991c:	3301      	adds	r3, #1
 800991e:	d003      	beq.n	8009928 <_fwalk_sglue+0x38>
 8009920:	4629      	mov	r1, r5
 8009922:	4638      	mov	r0, r7
 8009924:	47c0      	blx	r8
 8009926:	4306      	orrs	r6, r0
 8009928:	3568      	adds	r5, #104	; 0x68
 800992a:	e7e9      	b.n	8009900 <_fwalk_sglue+0x10>

0800992c <sniprintf>:
 800992c:	b40c      	push	{r2, r3}
 800992e:	b530      	push	{r4, r5, lr}
 8009930:	4b17      	ldr	r3, [pc, #92]	; (8009990 <sniprintf+0x64>)
 8009932:	1e0c      	subs	r4, r1, #0
 8009934:	681d      	ldr	r5, [r3, #0]
 8009936:	b09d      	sub	sp, #116	; 0x74
 8009938:	da08      	bge.n	800994c <sniprintf+0x20>
 800993a:	238b      	movs	r3, #139	; 0x8b
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	f04f 30ff 	mov.w	r0, #4294967295
 8009942:	b01d      	add	sp, #116	; 0x74
 8009944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009948:	b002      	add	sp, #8
 800994a:	4770      	bx	lr
 800994c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009950:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009954:	bf14      	ite	ne
 8009956:	f104 33ff 	addne.w	r3, r4, #4294967295
 800995a:	4623      	moveq	r3, r4
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009964:	9002      	str	r0, [sp, #8]
 8009966:	9006      	str	r0, [sp, #24]
 8009968:	f8ad 3016 	strh.w	r3, [sp, #22]
 800996c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800996e:	ab21      	add	r3, sp, #132	; 0x84
 8009970:	a902      	add	r1, sp, #8
 8009972:	4628      	mov	r0, r5
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	f002 f90b 	bl	800bb90 <_svfiprintf_r>
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	bfbc      	itt	lt
 800997e:	238b      	movlt	r3, #139	; 0x8b
 8009980:	602b      	strlt	r3, [r5, #0]
 8009982:	2c00      	cmp	r4, #0
 8009984:	d0dd      	beq.n	8009942 <sniprintf+0x16>
 8009986:	9b02      	ldr	r3, [sp, #8]
 8009988:	2200      	movs	r2, #0
 800998a:	701a      	strb	r2, [r3, #0]
 800998c:	e7d9      	b.n	8009942 <sniprintf+0x16>
 800998e:	bf00      	nop
 8009990:	20000210 	.word	0x20000210

08009994 <siprintf>:
 8009994:	b40e      	push	{r1, r2, r3}
 8009996:	b500      	push	{lr}
 8009998:	b09c      	sub	sp, #112	; 0x70
 800999a:	ab1d      	add	r3, sp, #116	; 0x74
 800999c:	9002      	str	r0, [sp, #8]
 800999e:	9006      	str	r0, [sp, #24]
 80099a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099a4:	4809      	ldr	r0, [pc, #36]	; (80099cc <siprintf+0x38>)
 80099a6:	9107      	str	r1, [sp, #28]
 80099a8:	9104      	str	r1, [sp, #16]
 80099aa:	4909      	ldr	r1, [pc, #36]	; (80099d0 <siprintf+0x3c>)
 80099ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b0:	9105      	str	r1, [sp, #20]
 80099b2:	6800      	ldr	r0, [r0, #0]
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	a902      	add	r1, sp, #8
 80099b8:	f002 f8ea 	bl	800bb90 <_svfiprintf_r>
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	2200      	movs	r2, #0
 80099c0:	701a      	strb	r2, [r3, #0]
 80099c2:	b01c      	add	sp, #112	; 0x70
 80099c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c8:	b003      	add	sp, #12
 80099ca:	4770      	bx	lr
 80099cc:	20000210 	.word	0x20000210
 80099d0:	ffff0208 	.word	0xffff0208

080099d4 <__sread>:
 80099d4:	b510      	push	{r4, lr}
 80099d6:	460c      	mov	r4, r1
 80099d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099dc:	f000 f8f0 	bl	8009bc0 <_read_r>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	bfab      	itete	ge
 80099e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099e6:	89a3      	ldrhlt	r3, [r4, #12]
 80099e8:	181b      	addge	r3, r3, r0
 80099ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ee:	bfac      	ite	ge
 80099f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80099f2:	81a3      	strhlt	r3, [r4, #12]
 80099f4:	bd10      	pop	{r4, pc}

080099f6 <__swrite>:
 80099f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fa:	461f      	mov	r7, r3
 80099fc:	898b      	ldrh	r3, [r1, #12]
 80099fe:	05db      	lsls	r3, r3, #23
 8009a00:	4605      	mov	r5, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	4616      	mov	r6, r2
 8009a06:	d505      	bpl.n	8009a14 <__swrite+0x1e>
 8009a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f000 f8c4 	bl	8009b9c <_lseek_r>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	4632      	mov	r2, r6
 8009a22:	463b      	mov	r3, r7
 8009a24:	4628      	mov	r0, r5
 8009a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2a:	f000 b8eb 	b.w	8009c04 <_write_r>

08009a2e <__sseek>:
 8009a2e:	b510      	push	{r4, lr}
 8009a30:	460c      	mov	r4, r1
 8009a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a36:	f000 f8b1 	bl	8009b9c <_lseek_r>
 8009a3a:	1c43      	adds	r3, r0, #1
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	bf15      	itete	ne
 8009a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a4a:	81a3      	strheq	r3, [r4, #12]
 8009a4c:	bf18      	it	ne
 8009a4e:	81a3      	strhne	r3, [r4, #12]
 8009a50:	bd10      	pop	{r4, pc}

08009a52 <__sclose>:
 8009a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a56:	f000 b891 	b.w	8009b7c <_close_r>

08009a5a <memset>:
 8009a5a:	4402      	add	r2, r0
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d100      	bne.n	8009a64 <memset+0xa>
 8009a62:	4770      	bx	lr
 8009a64:	f803 1b01 	strb.w	r1, [r3], #1
 8009a68:	e7f9      	b.n	8009a5e <memset+0x4>

08009a6a <strncmp>:
 8009a6a:	b510      	push	{r4, lr}
 8009a6c:	b16a      	cbz	r2, 8009a8a <strncmp+0x20>
 8009a6e:	3901      	subs	r1, #1
 8009a70:	1884      	adds	r4, r0, r2
 8009a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d103      	bne.n	8009a86 <strncmp+0x1c>
 8009a7e:	42a0      	cmp	r0, r4
 8009a80:	d001      	beq.n	8009a86 <strncmp+0x1c>
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	d1f5      	bne.n	8009a72 <strncmp+0x8>
 8009a86:	1ad0      	subs	r0, r2, r3
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	e7fc      	b.n	8009a88 <strncmp+0x1e>
	...

08009a90 <strtok>:
 8009a90:	4b16      	ldr	r3, [pc, #88]	; (8009aec <strtok+0x5c>)
 8009a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a94:	681e      	ldr	r6, [r3, #0]
 8009a96:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009a98:	4605      	mov	r5, r0
 8009a9a:	b9fc      	cbnz	r4, 8009adc <strtok+0x4c>
 8009a9c:	2050      	movs	r0, #80	; 0x50
 8009a9e:	9101      	str	r1, [sp, #4]
 8009aa0:	f7fe f84a 	bl	8007b38 <malloc>
 8009aa4:	9901      	ldr	r1, [sp, #4]
 8009aa6:	6470      	str	r0, [r6, #68]	; 0x44
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	b920      	cbnz	r0, 8009ab6 <strtok+0x26>
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <strtok+0x60>)
 8009aae:	4811      	ldr	r0, [pc, #68]	; (8009af4 <strtok+0x64>)
 8009ab0:	215b      	movs	r1, #91	; 0x5b
 8009ab2:	f000 f90b 	bl	8009ccc <__assert_func>
 8009ab6:	e9c0 4400 	strd	r4, r4, [r0]
 8009aba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009abe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009ac2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009ac6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009aca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009ace:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009ad2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009ad6:	6184      	str	r4, [r0, #24]
 8009ad8:	7704      	strb	r4, [r0, #28]
 8009ada:	6244      	str	r4, [r0, #36]	; 0x24
 8009adc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	b002      	add	sp, #8
 8009ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ae8:	f000 b806 	b.w	8009af8 <__strtok_r>
 8009aec:	20000210 	.word	0x20000210
 8009af0:	0800f602 	.word	0x0800f602
 8009af4:	0800f619 	.word	0x0800f619

08009af8 <__strtok_r>:
 8009af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afa:	b908      	cbnz	r0, 8009b00 <__strtok_r+0x8>
 8009afc:	6810      	ldr	r0, [r2, #0]
 8009afe:	b188      	cbz	r0, 8009b24 <__strtok_r+0x2c>
 8009b00:	4604      	mov	r4, r0
 8009b02:	4620      	mov	r0, r4
 8009b04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009b08:	460f      	mov	r7, r1
 8009b0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009b0e:	b91e      	cbnz	r6, 8009b18 <__strtok_r+0x20>
 8009b10:	b965      	cbnz	r5, 8009b2c <__strtok_r+0x34>
 8009b12:	6015      	str	r5, [r2, #0]
 8009b14:	4628      	mov	r0, r5
 8009b16:	e005      	b.n	8009b24 <__strtok_r+0x2c>
 8009b18:	42b5      	cmp	r5, r6
 8009b1a:	d1f6      	bne.n	8009b0a <__strtok_r+0x12>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1f0      	bne.n	8009b02 <__strtok_r+0xa>
 8009b20:	6014      	str	r4, [r2, #0]
 8009b22:	7003      	strb	r3, [r0, #0]
 8009b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b26:	461c      	mov	r4, r3
 8009b28:	e00c      	b.n	8009b44 <__strtok_r+0x4c>
 8009b2a:	b915      	cbnz	r5, 8009b32 <__strtok_r+0x3a>
 8009b2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b30:	460e      	mov	r6, r1
 8009b32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009b36:	42ab      	cmp	r3, r5
 8009b38:	d1f7      	bne.n	8009b2a <__strtok_r+0x32>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0f3      	beq.n	8009b26 <__strtok_r+0x2e>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009b44:	6014      	str	r4, [r2, #0]
 8009b46:	e7ed      	b.n	8009b24 <__strtok_r+0x2c>

08009b48 <strstr>:
 8009b48:	780a      	ldrb	r2, [r1, #0]
 8009b4a:	b570      	push	{r4, r5, r6, lr}
 8009b4c:	b96a      	cbnz	r2, 8009b6a <strstr+0x22>
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d109      	bne.n	8009b68 <strstr+0x20>
 8009b54:	460c      	mov	r4, r1
 8009b56:	4605      	mov	r5, r0
 8009b58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0f6      	beq.n	8009b4e <strstr+0x6>
 8009b60:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009b64:	429e      	cmp	r6, r3
 8009b66:	d0f7      	beq.n	8009b58 <strstr+0x10>
 8009b68:	3001      	adds	r0, #1
 8009b6a:	7803      	ldrb	r3, [r0, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1ef      	bne.n	8009b50 <strstr+0x8>
 8009b70:	4618      	mov	r0, r3
 8009b72:	e7ec      	b.n	8009b4e <strstr+0x6>

08009b74 <_localeconv_r>:
 8009b74:	4800      	ldr	r0, [pc, #0]	; (8009b78 <_localeconv_r+0x4>)
 8009b76:	4770      	bx	lr
 8009b78:	20000148 	.word	0x20000148

08009b7c <_close_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d06      	ldr	r5, [pc, #24]	; (8009b98 <_close_r+0x1c>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f9 fdc5 	bl	8003716 <_close>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_close_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_close_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20000c70 	.word	0x20000c70

08009b9c <_lseek_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d07      	ldr	r5, [pc, #28]	; (8009bbc <_lseek_r+0x20>)
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	4608      	mov	r0, r1
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	602a      	str	r2, [r5, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f7f9 fdda 	bl	8003764 <_lseek>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_lseek_r+0x1e>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_lseek_r+0x1e>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20000c70 	.word	0x20000c70

08009bc0 <_read_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4d07      	ldr	r5, [pc, #28]	; (8009be0 <_read_r+0x20>)
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	4611      	mov	r1, r2
 8009bca:	2200      	movs	r2, #0
 8009bcc:	602a      	str	r2, [r5, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f7f9 fd68 	bl	80036a4 <_read>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_read_r+0x1e>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_read_r+0x1e>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	20000c70 	.word	0x20000c70

08009be4 <_sbrk_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4d06      	ldr	r5, [pc, #24]	; (8009c00 <_sbrk_r+0x1c>)
 8009be8:	2300      	movs	r3, #0
 8009bea:	4604      	mov	r4, r0
 8009bec:	4608      	mov	r0, r1
 8009bee:	602b      	str	r3, [r5, #0]
 8009bf0:	f7f9 fdc6 	bl	8003780 <_sbrk>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_sbrk_r+0x1a>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_sbrk_r+0x1a>
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	20000c70 	.word	0x20000c70

08009c04 <_write_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d07      	ldr	r5, [pc, #28]	; (8009c24 <_write_r+0x20>)
 8009c08:	4604      	mov	r4, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	602a      	str	r2, [r5, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f7f9 fd63 	bl	80036de <_write>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_write_r+0x1e>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_write_r+0x1e>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	20000c70 	.word	0x20000c70

08009c28 <__errno>:
 8009c28:	4b01      	ldr	r3, [pc, #4]	; (8009c30 <__errno+0x8>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	20000210 	.word	0x20000210

08009c34 <__libc_init_array>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	4d0d      	ldr	r5, [pc, #52]	; (8009c6c <__libc_init_array+0x38>)
 8009c38:	4c0d      	ldr	r4, [pc, #52]	; (8009c70 <__libc_init_array+0x3c>)
 8009c3a:	1b64      	subs	r4, r4, r5
 8009c3c:	10a4      	asrs	r4, r4, #2
 8009c3e:	2600      	movs	r6, #0
 8009c40:	42a6      	cmp	r6, r4
 8009c42:	d109      	bne.n	8009c58 <__libc_init_array+0x24>
 8009c44:	4d0b      	ldr	r5, [pc, #44]	; (8009c74 <__libc_init_array+0x40>)
 8009c46:	4c0c      	ldr	r4, [pc, #48]	; (8009c78 <__libc_init_array+0x44>)
 8009c48:	f004 f87a 	bl	800dd40 <_init>
 8009c4c:	1b64      	subs	r4, r4, r5
 8009c4e:	10a4      	asrs	r4, r4, #2
 8009c50:	2600      	movs	r6, #0
 8009c52:	42a6      	cmp	r6, r4
 8009c54:	d105      	bne.n	8009c62 <__libc_init_array+0x2e>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5c:	4798      	blx	r3
 8009c5e:	3601      	adds	r6, #1
 8009c60:	e7ee      	b.n	8009c40 <__libc_init_array+0xc>
 8009c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c66:	4798      	blx	r3
 8009c68:	3601      	adds	r6, #1
 8009c6a:	e7f2      	b.n	8009c52 <__libc_init_array+0x1e>
 8009c6c:	0800fad8 	.word	0x0800fad8
 8009c70:	0800fad8 	.word	0x0800fad8
 8009c74:	0800fad8 	.word	0x0800fad8
 8009c78:	0800fadc 	.word	0x0800fadc

08009c7c <__retarget_lock_init_recursive>:
 8009c7c:	4770      	bx	lr

08009c7e <__retarget_lock_acquire_recursive>:
 8009c7e:	4770      	bx	lr

08009c80 <__retarget_lock_release_recursive>:
 8009c80:	4770      	bx	lr

08009c82 <strcpy>:
 8009c82:	4603      	mov	r3, r0
 8009c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c88:	f803 2b01 	strb.w	r2, [r3], #1
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d1f9      	bne.n	8009c84 <strcpy+0x2>
 8009c90:	4770      	bx	lr

08009c92 <memcpy>:
 8009c92:	440a      	add	r2, r1
 8009c94:	4291      	cmp	r1, r2
 8009c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c9a:	d100      	bne.n	8009c9e <memcpy+0xc>
 8009c9c:	4770      	bx	lr
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ca8:	4291      	cmp	r1, r2
 8009caa:	d1f9      	bne.n	8009ca0 <memcpy+0xe>
 8009cac:	bd10      	pop	{r4, pc}
	...

08009cb0 <nan>:
 8009cb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009cb8 <nan+0x8>
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	00000000 	.word	0x00000000
 8009cbc:	7ff80000 	.word	0x7ff80000

08009cc0 <nanf>:
 8009cc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009cc8 <nanf+0x8>
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	7fc00000 	.word	0x7fc00000

08009ccc <__assert_func>:
 8009ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cce:	4614      	mov	r4, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <__assert_func+0x2c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	68d8      	ldr	r0, [r3, #12]
 8009cda:	b14c      	cbz	r4, 8009cf0 <__assert_func+0x24>
 8009cdc:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <__assert_func+0x30>)
 8009cde:	9100      	str	r1, [sp, #0]
 8009ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ce4:	4906      	ldr	r1, [pc, #24]	; (8009d00 <__assert_func+0x34>)
 8009ce6:	462b      	mov	r3, r5
 8009ce8:	f002 f8fe 	bl	800bee8 <fiprintf>
 8009cec:	f002 f928 	bl	800bf40 <abort>
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <__assert_func+0x38>)
 8009cf2:	461c      	mov	r4, r3
 8009cf4:	e7f3      	b.n	8009cde <__assert_func+0x12>
 8009cf6:	bf00      	nop
 8009cf8:	20000210 	.word	0x20000210
 8009cfc:	0800f67b 	.word	0x0800f67b
 8009d00:	0800f688 	.word	0x0800f688
 8009d04:	0800f6b6 	.word	0x0800f6b6

08009d08 <quorem>:
 8009d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	6903      	ldr	r3, [r0, #16]
 8009d0e:	690c      	ldr	r4, [r1, #16]
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	4607      	mov	r7, r0
 8009d14:	db7e      	blt.n	8009e14 <quorem+0x10c>
 8009d16:	3c01      	subs	r4, #1
 8009d18:	f101 0814 	add.w	r8, r1, #20
 8009d1c:	f100 0514 	add.w	r5, r0, #20
 8009d20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	429a      	cmp	r2, r3
 8009d32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d3e:	d331      	bcc.n	8009da4 <quorem+0x9c>
 8009d40:	f04f 0e00 	mov.w	lr, #0
 8009d44:	4640      	mov	r0, r8
 8009d46:	46ac      	mov	ip, r5
 8009d48:	46f2      	mov	sl, lr
 8009d4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d4e:	b293      	uxth	r3, r2
 8009d50:	fb06 e303 	mla	r3, r6, r3, lr
 8009d54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d58:	0c1a      	lsrs	r2, r3, #16
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	ebaa 0303 	sub.w	r3, sl, r3
 8009d60:	f8dc a000 	ldr.w	sl, [ip]
 8009d64:	fa13 f38a 	uxtah	r3, r3, sl
 8009d68:	fb06 220e 	mla	r2, r6, lr, r2
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	9b00      	ldr	r3, [sp, #0]
 8009d70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d74:	b292      	uxth	r2, r2
 8009d76:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d7e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d82:	4581      	cmp	r9, r0
 8009d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d88:	f84c 3b04 	str.w	r3, [ip], #4
 8009d8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d90:	d2db      	bcs.n	8009d4a <quorem+0x42>
 8009d92:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d96:	b92b      	cbnz	r3, 8009da4 <quorem+0x9c>
 8009d98:	9b01      	ldr	r3, [sp, #4]
 8009d9a:	3b04      	subs	r3, #4
 8009d9c:	429d      	cmp	r5, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	d32c      	bcc.n	8009dfc <quorem+0xf4>
 8009da2:	613c      	str	r4, [r7, #16]
 8009da4:	4638      	mov	r0, r7
 8009da6:	f001 fca5 	bl	800b6f4 <__mcmp>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	db22      	blt.n	8009df4 <quorem+0xec>
 8009dae:	3601      	adds	r6, #1
 8009db0:	4629      	mov	r1, r5
 8009db2:	2000      	movs	r0, #0
 8009db4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009db8:	f8d1 c000 	ldr.w	ip, [r1]
 8009dbc:	b293      	uxth	r3, r2
 8009dbe:	1ac3      	subs	r3, r0, r3
 8009dc0:	0c12      	lsrs	r2, r2, #16
 8009dc2:	fa13 f38c 	uxtah	r3, r3, ip
 8009dc6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dd4:	45c1      	cmp	r9, r8
 8009dd6:	f841 3b04 	str.w	r3, [r1], #4
 8009dda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009dde:	d2e9      	bcs.n	8009db4 <quorem+0xac>
 8009de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009de4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009de8:	b922      	cbnz	r2, 8009df4 <quorem+0xec>
 8009dea:	3b04      	subs	r3, #4
 8009dec:	429d      	cmp	r5, r3
 8009dee:	461a      	mov	r2, r3
 8009df0:	d30a      	bcc.n	8009e08 <quorem+0x100>
 8009df2:	613c      	str	r4, [r7, #16]
 8009df4:	4630      	mov	r0, r6
 8009df6:	b003      	add	sp, #12
 8009df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	3b04      	subs	r3, #4
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	d1ce      	bne.n	8009da2 <quorem+0x9a>
 8009e04:	3c01      	subs	r4, #1
 8009e06:	e7c9      	b.n	8009d9c <quorem+0x94>
 8009e08:	6812      	ldr	r2, [r2, #0]
 8009e0a:	3b04      	subs	r3, #4
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	d1f0      	bne.n	8009df2 <quorem+0xea>
 8009e10:	3c01      	subs	r4, #1
 8009e12:	e7eb      	b.n	8009dec <quorem+0xe4>
 8009e14:	2000      	movs	r0, #0
 8009e16:	e7ee      	b.n	8009df6 <quorem+0xee>

08009e18 <_dtoa_r>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	ed2d 8b04 	vpush	{d8-d9}
 8009e20:	69c5      	ldr	r5, [r0, #28]
 8009e22:	b093      	sub	sp, #76	; 0x4c
 8009e24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e28:	ec57 6b10 	vmov	r6, r7, d0
 8009e2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e30:	9107      	str	r1, [sp, #28]
 8009e32:	4604      	mov	r4, r0
 8009e34:	920a      	str	r2, [sp, #40]	; 0x28
 8009e36:	930d      	str	r3, [sp, #52]	; 0x34
 8009e38:	b975      	cbnz	r5, 8009e58 <_dtoa_r+0x40>
 8009e3a:	2010      	movs	r0, #16
 8009e3c:	f7fd fe7c 	bl	8007b38 <malloc>
 8009e40:	4602      	mov	r2, r0
 8009e42:	61e0      	str	r0, [r4, #28]
 8009e44:	b920      	cbnz	r0, 8009e50 <_dtoa_r+0x38>
 8009e46:	4bae      	ldr	r3, [pc, #696]	; (800a100 <_dtoa_r+0x2e8>)
 8009e48:	21ef      	movs	r1, #239	; 0xef
 8009e4a:	48ae      	ldr	r0, [pc, #696]	; (800a104 <_dtoa_r+0x2ec>)
 8009e4c:	f7ff ff3e 	bl	8009ccc <__assert_func>
 8009e50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e54:	6005      	str	r5, [r0, #0]
 8009e56:	60c5      	str	r5, [r0, #12]
 8009e58:	69e3      	ldr	r3, [r4, #28]
 8009e5a:	6819      	ldr	r1, [r3, #0]
 8009e5c:	b151      	cbz	r1, 8009e74 <_dtoa_r+0x5c>
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	604a      	str	r2, [r1, #4]
 8009e62:	2301      	movs	r3, #1
 8009e64:	4093      	lsls	r3, r2
 8009e66:	608b      	str	r3, [r1, #8]
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f001 f9bd 	bl	800b1e8 <_Bfree>
 8009e6e:	69e3      	ldr	r3, [r4, #28]
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	1e3b      	subs	r3, r7, #0
 8009e76:	bfbb      	ittet	lt
 8009e78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e7c:	9303      	strlt	r3, [sp, #12]
 8009e7e:	2300      	movge	r3, #0
 8009e80:	2201      	movlt	r2, #1
 8009e82:	bfac      	ite	ge
 8009e84:	f8c8 3000 	strge.w	r3, [r8]
 8009e88:	f8c8 2000 	strlt.w	r2, [r8]
 8009e8c:	4b9e      	ldr	r3, [pc, #632]	; (800a108 <_dtoa_r+0x2f0>)
 8009e8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009e92:	ea33 0308 	bics.w	r3, r3, r8
 8009e96:	d11b      	bne.n	8009ed0 <_dtoa_r+0xb8>
 8009e98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009ea4:	4333      	orrs	r3, r6
 8009ea6:	f000 8593 	beq.w	800a9d0 <_dtoa_r+0xbb8>
 8009eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eac:	b963      	cbnz	r3, 8009ec8 <_dtoa_r+0xb0>
 8009eae:	4b97      	ldr	r3, [pc, #604]	; (800a10c <_dtoa_r+0x2f4>)
 8009eb0:	e027      	b.n	8009f02 <_dtoa_r+0xea>
 8009eb2:	4b97      	ldr	r3, [pc, #604]	; (800a110 <_dtoa_r+0x2f8>)
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	9800      	ldr	r0, [sp, #0]
 8009ebe:	b013      	add	sp, #76	; 0x4c
 8009ec0:	ecbd 8b04 	vpop	{d8-d9}
 8009ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec8:	4b90      	ldr	r3, [pc, #576]	; (800a10c <_dtoa_r+0x2f4>)
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	3303      	adds	r3, #3
 8009ece:	e7f3      	b.n	8009eb8 <_dtoa_r+0xa0>
 8009ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	ec51 0b17 	vmov	r0, r1, d7
 8009eda:	eeb0 8a47 	vmov.f32	s16, s14
 8009ede:	eef0 8a67 	vmov.f32	s17, s15
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f7f6 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ee8:	4681      	mov	r9, r0
 8009eea:	b160      	cbz	r0, 8009f06 <_dtoa_r+0xee>
 8009eec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eee:	2301      	movs	r3, #1
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 8568 	beq.w	800a9ca <_dtoa_r+0xbb2>
 8009efa:	4b86      	ldr	r3, [pc, #536]	; (800a114 <_dtoa_r+0x2fc>)
 8009efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	e7da      	b.n	8009ebc <_dtoa_r+0xa4>
 8009f06:	aa10      	add	r2, sp, #64	; 0x40
 8009f08:	a911      	add	r1, sp, #68	; 0x44
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f10:	eef0 0a68 	vmov.f32	s1, s17
 8009f14:	f001 fd04 	bl	800b920 <__d2b>
 8009f18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	d07f      	beq.n	800a022 <_dtoa_r+0x20a>
 8009f22:	ee18 3a90 	vmov	r3, s17
 8009f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f2e:	ec51 0b18 	vmov	r0, r1, d8
 8009f32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009f3e:	4619      	mov	r1, r3
 8009f40:	2200      	movs	r2, #0
 8009f42:	4b75      	ldr	r3, [pc, #468]	; (800a118 <_dtoa_r+0x300>)
 8009f44:	f7f6 f9a0 	bl	8000288 <__aeabi_dsub>
 8009f48:	a367      	add	r3, pc, #412	; (adr r3, 800a0e8 <_dtoa_r+0x2d0>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 fb53 	bl	80005f8 <__aeabi_dmul>
 8009f52:	a367      	add	r3, pc, #412	; (adr r3, 800a0f0 <_dtoa_r+0x2d8>)
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f7f6 f998 	bl	800028c <__adddf3>
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	460f      	mov	r7, r1
 8009f62:	f7f6 fadf 	bl	8000524 <__aeabi_i2d>
 8009f66:	a364      	add	r3, pc, #400	; (adr r3, 800a0f8 <_dtoa_r+0x2e0>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 fb44 	bl	80005f8 <__aeabi_dmul>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4630      	mov	r0, r6
 8009f76:	4639      	mov	r1, r7
 8009f78:	f7f6 f988 	bl	800028c <__adddf3>
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	f7f6 fdea 	bl	8000b58 <__aeabi_d2iz>
 8009f84:	2200      	movs	r2, #0
 8009f86:	4683      	mov	fp, r0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	f7f6 fda5 	bl	8000adc <__aeabi_dcmplt>
 8009f92:	b148      	cbz	r0, 8009fa8 <_dtoa_r+0x190>
 8009f94:	4658      	mov	r0, fp
 8009f96:	f7f6 fac5 	bl	8000524 <__aeabi_i2d>
 8009f9a:	4632      	mov	r2, r6
 8009f9c:	463b      	mov	r3, r7
 8009f9e:	f7f6 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa2:	b908      	cbnz	r0, 8009fa8 <_dtoa_r+0x190>
 8009fa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fa8:	f1bb 0f16 	cmp.w	fp, #22
 8009fac:	d857      	bhi.n	800a05e <_dtoa_r+0x246>
 8009fae:	4b5b      	ldr	r3, [pc, #364]	; (800a11c <_dtoa_r+0x304>)
 8009fb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	ec51 0b18 	vmov	r0, r1, d8
 8009fbc:	f7f6 fd8e 	bl	8000adc <__aeabi_dcmplt>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d04e      	beq.n	800a062 <_dtoa_r+0x24a>
 8009fc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fc8:	2300      	movs	r3, #0
 8009fca:	930c      	str	r3, [sp, #48]	; 0x30
 8009fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fce:	1b5b      	subs	r3, r3, r5
 8009fd0:	1e5a      	subs	r2, r3, #1
 8009fd2:	bf45      	ittet	mi
 8009fd4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009fd8:	9305      	strmi	r3, [sp, #20]
 8009fda:	2300      	movpl	r3, #0
 8009fdc:	2300      	movmi	r3, #0
 8009fde:	9206      	str	r2, [sp, #24]
 8009fe0:	bf54      	ite	pl
 8009fe2:	9305      	strpl	r3, [sp, #20]
 8009fe4:	9306      	strmi	r3, [sp, #24]
 8009fe6:	f1bb 0f00 	cmp.w	fp, #0
 8009fea:	db3c      	blt.n	800a066 <_dtoa_r+0x24e>
 8009fec:	9b06      	ldr	r3, [sp, #24]
 8009fee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009ff2:	445b      	add	r3, fp
 8009ff4:	9306      	str	r3, [sp, #24]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9308      	str	r3, [sp, #32]
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	2b09      	cmp	r3, #9
 8009ffe:	d868      	bhi.n	800a0d2 <_dtoa_r+0x2ba>
 800a000:	2b05      	cmp	r3, #5
 800a002:	bfc4      	itt	gt
 800a004:	3b04      	subgt	r3, #4
 800a006:	9307      	strgt	r3, [sp, #28]
 800a008:	9b07      	ldr	r3, [sp, #28]
 800a00a:	f1a3 0302 	sub.w	r3, r3, #2
 800a00e:	bfcc      	ite	gt
 800a010:	2500      	movgt	r5, #0
 800a012:	2501      	movle	r5, #1
 800a014:	2b03      	cmp	r3, #3
 800a016:	f200 8085 	bhi.w	800a124 <_dtoa_r+0x30c>
 800a01a:	e8df f003 	tbb	[pc, r3]
 800a01e:	3b2e      	.short	0x3b2e
 800a020:	5839      	.short	0x5839
 800a022:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a026:	441d      	add	r5, r3
 800a028:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	bfc1      	itttt	gt
 800a030:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a034:	fa08 f803 	lslgt.w	r8, r8, r3
 800a038:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a03c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a040:	bfd6      	itet	le
 800a042:	f1c3 0320 	rsble	r3, r3, #32
 800a046:	ea48 0003 	orrgt.w	r0, r8, r3
 800a04a:	fa06 f003 	lslle.w	r0, r6, r3
 800a04e:	f7f6 fa59 	bl	8000504 <__aeabi_ui2d>
 800a052:	2201      	movs	r2, #1
 800a054:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a058:	3d01      	subs	r5, #1
 800a05a:	920e      	str	r2, [sp, #56]	; 0x38
 800a05c:	e76f      	b.n	8009f3e <_dtoa_r+0x126>
 800a05e:	2301      	movs	r3, #1
 800a060:	e7b3      	b.n	8009fca <_dtoa_r+0x1b2>
 800a062:	900c      	str	r0, [sp, #48]	; 0x30
 800a064:	e7b2      	b.n	8009fcc <_dtoa_r+0x1b4>
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	eba3 030b 	sub.w	r3, r3, fp
 800a06c:	9305      	str	r3, [sp, #20]
 800a06e:	f1cb 0300 	rsb	r3, fp, #0
 800a072:	9308      	str	r3, [sp, #32]
 800a074:	2300      	movs	r3, #0
 800a076:	930b      	str	r3, [sp, #44]	; 0x2c
 800a078:	e7bf      	b.n	8009ffa <_dtoa_r+0x1e2>
 800a07a:	2300      	movs	r3, #0
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a080:	2b00      	cmp	r3, #0
 800a082:	dc52      	bgt.n	800a12a <_dtoa_r+0x312>
 800a084:	2301      	movs	r3, #1
 800a086:	9301      	str	r3, [sp, #4]
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	461a      	mov	r2, r3
 800a08c:	920a      	str	r2, [sp, #40]	; 0x28
 800a08e:	e00b      	b.n	800a0a8 <_dtoa_r+0x290>
 800a090:	2301      	movs	r3, #1
 800a092:	e7f3      	b.n	800a07c <_dtoa_r+0x264>
 800a094:	2300      	movs	r3, #0
 800a096:	9309      	str	r3, [sp, #36]	; 0x24
 800a098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09a:	445b      	add	r3, fp
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	bfb8      	it	lt
 800a0a6:	2301      	movlt	r3, #1
 800a0a8:	69e0      	ldr	r0, [r4, #28]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	f102 0614 	add.w	r6, r2, #20
 800a0b2:	429e      	cmp	r6, r3
 800a0b4:	d93d      	bls.n	800a132 <_dtoa_r+0x31a>
 800a0b6:	6041      	str	r1, [r0, #4]
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f001 f855 	bl	800b168 <_Balloc>
 800a0be:	9000      	str	r0, [sp, #0]
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d139      	bne.n	800a138 <_dtoa_r+0x320>
 800a0c4:	4b16      	ldr	r3, [pc, #88]	; (800a120 <_dtoa_r+0x308>)
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	f240 11af 	movw	r1, #431	; 0x1af
 800a0cc:	e6bd      	b.n	8009e4a <_dtoa_r+0x32>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e7e1      	b.n	800a096 <_dtoa_r+0x27e>
 800a0d2:	2501      	movs	r5, #1
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	9307      	str	r3, [sp, #28]
 800a0d8:	9509      	str	r5, [sp, #36]	; 0x24
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2312      	movs	r3, #18
 800a0e6:	e7d1      	b.n	800a08c <_dtoa_r+0x274>
 800a0e8:	636f4361 	.word	0x636f4361
 800a0ec:	3fd287a7 	.word	0x3fd287a7
 800a0f0:	8b60c8b3 	.word	0x8b60c8b3
 800a0f4:	3fc68a28 	.word	0x3fc68a28
 800a0f8:	509f79fb 	.word	0x509f79fb
 800a0fc:	3fd34413 	.word	0x3fd34413
 800a100:	0800f602 	.word	0x0800f602
 800a104:	0800f6c4 	.word	0x0800f6c4
 800a108:	7ff00000 	.word	0x7ff00000
 800a10c:	0800f6c0 	.word	0x0800f6c0
 800a110:	0800f6b7 	.word	0x0800f6b7
 800a114:	0800f5da 	.word	0x0800f5da
 800a118:	3ff80000 	.word	0x3ff80000
 800a11c:	0800f810 	.word	0x0800f810
 800a120:	0800f71c 	.word	0x0800f71c
 800a124:	2301      	movs	r3, #1
 800a126:	9309      	str	r3, [sp, #36]	; 0x24
 800a128:	e7d7      	b.n	800a0da <_dtoa_r+0x2c2>
 800a12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	e7ba      	b.n	800a0a8 <_dtoa_r+0x290>
 800a132:	3101      	adds	r1, #1
 800a134:	0052      	lsls	r2, r2, #1
 800a136:	e7ba      	b.n	800a0ae <_dtoa_r+0x296>
 800a138:	69e3      	ldr	r3, [r4, #28]
 800a13a:	9a00      	ldr	r2, [sp, #0]
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	2b0e      	cmp	r3, #14
 800a142:	f200 80a8 	bhi.w	800a296 <_dtoa_r+0x47e>
 800a146:	2d00      	cmp	r5, #0
 800a148:	f000 80a5 	beq.w	800a296 <_dtoa_r+0x47e>
 800a14c:	f1bb 0f00 	cmp.w	fp, #0
 800a150:	dd38      	ble.n	800a1c4 <_dtoa_r+0x3ac>
 800a152:	4bc0      	ldr	r3, [pc, #768]	; (800a454 <_dtoa_r+0x63c>)
 800a154:	f00b 020f 	and.w	r2, fp, #15
 800a158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a15c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a160:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a164:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a168:	d019      	beq.n	800a19e <_dtoa_r+0x386>
 800a16a:	4bbb      	ldr	r3, [pc, #748]	; (800a458 <_dtoa_r+0x640>)
 800a16c:	ec51 0b18 	vmov	r0, r1, d8
 800a170:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a174:	f7f6 fb6a 	bl	800084c <__aeabi_ddiv>
 800a178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a17c:	f008 080f 	and.w	r8, r8, #15
 800a180:	2503      	movs	r5, #3
 800a182:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a458 <_dtoa_r+0x640>
 800a186:	f1b8 0f00 	cmp.w	r8, #0
 800a18a:	d10a      	bne.n	800a1a2 <_dtoa_r+0x38a>
 800a18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a190:	4632      	mov	r2, r6
 800a192:	463b      	mov	r3, r7
 800a194:	f7f6 fb5a 	bl	800084c <__aeabi_ddiv>
 800a198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a19c:	e02b      	b.n	800a1f6 <_dtoa_r+0x3de>
 800a19e:	2502      	movs	r5, #2
 800a1a0:	e7ef      	b.n	800a182 <_dtoa_r+0x36a>
 800a1a2:	f018 0f01 	tst.w	r8, #1
 800a1a6:	d008      	beq.n	800a1ba <_dtoa_r+0x3a2>
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a1b0:	f7f6 fa22 	bl	80005f8 <__aeabi_dmul>
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a1be:	f109 0908 	add.w	r9, r9, #8
 800a1c2:	e7e0      	b.n	800a186 <_dtoa_r+0x36e>
 800a1c4:	f000 809f 	beq.w	800a306 <_dtoa_r+0x4ee>
 800a1c8:	f1cb 0600 	rsb	r6, fp, #0
 800a1cc:	4ba1      	ldr	r3, [pc, #644]	; (800a454 <_dtoa_r+0x63c>)
 800a1ce:	4fa2      	ldr	r7, [pc, #648]	; (800a458 <_dtoa_r+0x640>)
 800a1d0:	f006 020f 	and.w	r2, r6, #15
 800a1d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	ec51 0b18 	vmov	r0, r1, d8
 800a1e0:	f7f6 fa0a 	bl	80005f8 <__aeabi_dmul>
 800a1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e8:	1136      	asrs	r6, r6, #4
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2502      	movs	r5, #2
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	d17e      	bne.n	800a2f0 <_dtoa_r+0x4d8>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1d0      	bne.n	800a198 <_dtoa_r+0x380>
 800a1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 8084 	beq.w	800a30a <_dtoa_r+0x4f2>
 800a202:	4b96      	ldr	r3, [pc, #600]	; (800a45c <_dtoa_r+0x644>)
 800a204:	2200      	movs	r2, #0
 800a206:	4640      	mov	r0, r8
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f6 fc67 	bl	8000adc <__aeabi_dcmplt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d07b      	beq.n	800a30a <_dtoa_r+0x4f2>
 800a212:	9b04      	ldr	r3, [sp, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d078      	beq.n	800a30a <_dtoa_r+0x4f2>
 800a218:	9b01      	ldr	r3, [sp, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dd39      	ble.n	800a292 <_dtoa_r+0x47a>
 800a21e:	4b90      	ldr	r3, [pc, #576]	; (800a460 <_dtoa_r+0x648>)
 800a220:	2200      	movs	r2, #0
 800a222:	4640      	mov	r0, r8
 800a224:	4649      	mov	r1, r9
 800a226:	f7f6 f9e7 	bl	80005f8 <__aeabi_dmul>
 800a22a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a22e:	9e01      	ldr	r6, [sp, #4]
 800a230:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a234:	3501      	adds	r5, #1
 800a236:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7f6 f972 	bl	8000524 <__aeabi_i2d>
 800a240:	4642      	mov	r2, r8
 800a242:	464b      	mov	r3, r9
 800a244:	f7f6 f9d8 	bl	80005f8 <__aeabi_dmul>
 800a248:	4b86      	ldr	r3, [pc, #536]	; (800a464 <_dtoa_r+0x64c>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	f7f6 f81e 	bl	800028c <__adddf3>
 800a250:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a258:	9303      	str	r3, [sp, #12]
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	d158      	bne.n	800a310 <_dtoa_r+0x4f8>
 800a25e:	4b82      	ldr	r3, [pc, #520]	; (800a468 <_dtoa_r+0x650>)
 800a260:	2200      	movs	r2, #0
 800a262:	4640      	mov	r0, r8
 800a264:	4649      	mov	r1, r9
 800a266:	f7f6 f80f 	bl	8000288 <__aeabi_dsub>
 800a26a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a26e:	4680      	mov	r8, r0
 800a270:	4689      	mov	r9, r1
 800a272:	f7f6 fc51 	bl	8000b18 <__aeabi_dcmpgt>
 800a276:	2800      	cmp	r0, #0
 800a278:	f040 8296 	bne.w	800a7a8 <_dtoa_r+0x990>
 800a27c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a280:	4640      	mov	r0, r8
 800a282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a286:	4649      	mov	r1, r9
 800a288:	f7f6 fc28 	bl	8000adc <__aeabi_dcmplt>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f040 8289 	bne.w	800a7a4 <_dtoa_r+0x98c>
 800a292:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f2c0 814e 	blt.w	800a53a <_dtoa_r+0x722>
 800a29e:	f1bb 0f0e 	cmp.w	fp, #14
 800a2a2:	f300 814a 	bgt.w	800a53a <_dtoa_r+0x722>
 800a2a6:	4b6b      	ldr	r3, [pc, #428]	; (800a454 <_dtoa_r+0x63c>)
 800a2a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f280 80dc 	bge.w	800a470 <_dtoa_r+0x658>
 800a2b8:	9b04      	ldr	r3, [sp, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f300 80d8 	bgt.w	800a470 <_dtoa_r+0x658>
 800a2c0:	f040 826f 	bne.w	800a7a2 <_dtoa_r+0x98a>
 800a2c4:	4b68      	ldr	r3, [pc, #416]	; (800a468 <_dtoa_r+0x650>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	f7f6 f994 	bl	80005f8 <__aeabi_dmul>
 800a2d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d4:	f7f6 fc16 	bl	8000b04 <__aeabi_dcmpge>
 800a2d8:	9e04      	ldr	r6, [sp, #16]
 800a2da:	4637      	mov	r7, r6
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f040 8245 	bne.w	800a76c <_dtoa_r+0x954>
 800a2e2:	9d00      	ldr	r5, [sp, #0]
 800a2e4:	2331      	movs	r3, #49	; 0x31
 800a2e6:	f805 3b01 	strb.w	r3, [r5], #1
 800a2ea:	f10b 0b01 	add.w	fp, fp, #1
 800a2ee:	e241      	b.n	800a774 <_dtoa_r+0x95c>
 800a2f0:	07f2      	lsls	r2, r6, #31
 800a2f2:	d505      	bpl.n	800a300 <_dtoa_r+0x4e8>
 800a2f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f8:	f7f6 f97e 	bl	80005f8 <__aeabi_dmul>
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	2301      	movs	r3, #1
 800a300:	1076      	asrs	r6, r6, #1
 800a302:	3708      	adds	r7, #8
 800a304:	e773      	b.n	800a1ee <_dtoa_r+0x3d6>
 800a306:	2502      	movs	r5, #2
 800a308:	e775      	b.n	800a1f6 <_dtoa_r+0x3de>
 800a30a:	9e04      	ldr	r6, [sp, #16]
 800a30c:	465f      	mov	r7, fp
 800a30e:	e792      	b.n	800a236 <_dtoa_r+0x41e>
 800a310:	9900      	ldr	r1, [sp, #0]
 800a312:	4b50      	ldr	r3, [pc, #320]	; (800a454 <_dtoa_r+0x63c>)
 800a314:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a318:	4431      	add	r1, r6
 800a31a:	9102      	str	r1, [sp, #8]
 800a31c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a31e:	eeb0 9a47 	vmov.f32	s18, s14
 800a322:	eef0 9a67 	vmov.f32	s19, s15
 800a326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a32a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a32e:	2900      	cmp	r1, #0
 800a330:	d044      	beq.n	800a3bc <_dtoa_r+0x5a4>
 800a332:	494e      	ldr	r1, [pc, #312]	; (800a46c <_dtoa_r+0x654>)
 800a334:	2000      	movs	r0, #0
 800a336:	f7f6 fa89 	bl	800084c <__aeabi_ddiv>
 800a33a:	ec53 2b19 	vmov	r2, r3, d9
 800a33e:	f7f5 ffa3 	bl	8000288 <__aeabi_dsub>
 800a342:	9d00      	ldr	r5, [sp, #0]
 800a344:	ec41 0b19 	vmov	d9, r0, r1
 800a348:	4649      	mov	r1, r9
 800a34a:	4640      	mov	r0, r8
 800a34c:	f7f6 fc04 	bl	8000b58 <__aeabi_d2iz>
 800a350:	4606      	mov	r6, r0
 800a352:	f7f6 f8e7 	bl	8000524 <__aeabi_i2d>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4640      	mov	r0, r8
 800a35c:	4649      	mov	r1, r9
 800a35e:	f7f5 ff93 	bl	8000288 <__aeabi_dsub>
 800a362:	3630      	adds	r6, #48	; 0x30
 800a364:	f805 6b01 	strb.w	r6, [r5], #1
 800a368:	ec53 2b19 	vmov	r2, r3, d9
 800a36c:	4680      	mov	r8, r0
 800a36e:	4689      	mov	r9, r1
 800a370:	f7f6 fbb4 	bl	8000adc <__aeabi_dcmplt>
 800a374:	2800      	cmp	r0, #0
 800a376:	d164      	bne.n	800a442 <_dtoa_r+0x62a>
 800a378:	4642      	mov	r2, r8
 800a37a:	464b      	mov	r3, r9
 800a37c:	4937      	ldr	r1, [pc, #220]	; (800a45c <_dtoa_r+0x644>)
 800a37e:	2000      	movs	r0, #0
 800a380:	f7f5 ff82 	bl	8000288 <__aeabi_dsub>
 800a384:	ec53 2b19 	vmov	r2, r3, d9
 800a388:	f7f6 fba8 	bl	8000adc <__aeabi_dcmplt>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f040 80b6 	bne.w	800a4fe <_dtoa_r+0x6e6>
 800a392:	9b02      	ldr	r3, [sp, #8]
 800a394:	429d      	cmp	r5, r3
 800a396:	f43f af7c 	beq.w	800a292 <_dtoa_r+0x47a>
 800a39a:	4b31      	ldr	r3, [pc, #196]	; (800a460 <_dtoa_r+0x648>)
 800a39c:	ec51 0b19 	vmov	r0, r1, d9
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f7f6 f929 	bl	80005f8 <__aeabi_dmul>
 800a3a6:	4b2e      	ldr	r3, [pc, #184]	; (800a460 <_dtoa_r+0x648>)
 800a3a8:	ec41 0b19 	vmov	d9, r0, r1
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f6 f921 	bl	80005f8 <__aeabi_dmul>
 800a3b6:	4680      	mov	r8, r0
 800a3b8:	4689      	mov	r9, r1
 800a3ba:	e7c5      	b.n	800a348 <_dtoa_r+0x530>
 800a3bc:	ec51 0b17 	vmov	r0, r1, d7
 800a3c0:	f7f6 f91a 	bl	80005f8 <__aeabi_dmul>
 800a3c4:	9b02      	ldr	r3, [sp, #8]
 800a3c6:	9d00      	ldr	r5, [sp, #0]
 800a3c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3ca:	ec41 0b19 	vmov	d9, r0, r1
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f7f6 fbc1 	bl	8000b58 <__aeabi_d2iz>
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	f7f6 f8a4 	bl	8000524 <__aeabi_i2d>
 800a3dc:	3630      	adds	r6, #48	; 0x30
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	f7f5 ff4f 	bl	8000288 <__aeabi_dsub>
 800a3ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a3ee:	9b02      	ldr	r3, [sp, #8]
 800a3f0:	429d      	cmp	r5, r3
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	d124      	bne.n	800a446 <_dtoa_r+0x62e>
 800a3fc:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <_dtoa_r+0x654>)
 800a3fe:	ec51 0b19 	vmov	r0, r1, d9
 800a402:	f7f5 ff43 	bl	800028c <__adddf3>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f6 fb83 	bl	8000b18 <__aeabi_dcmpgt>
 800a412:	2800      	cmp	r0, #0
 800a414:	d173      	bne.n	800a4fe <_dtoa_r+0x6e6>
 800a416:	ec53 2b19 	vmov	r2, r3, d9
 800a41a:	4914      	ldr	r1, [pc, #80]	; (800a46c <_dtoa_r+0x654>)
 800a41c:	2000      	movs	r0, #0
 800a41e:	f7f5 ff33 	bl	8000288 <__aeabi_dsub>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4640      	mov	r0, r8
 800a428:	4649      	mov	r1, r9
 800a42a:	f7f6 fb57 	bl	8000adc <__aeabi_dcmplt>
 800a42e:	2800      	cmp	r0, #0
 800a430:	f43f af2f 	beq.w	800a292 <_dtoa_r+0x47a>
 800a434:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a436:	1e6b      	subs	r3, r5, #1
 800a438:	930f      	str	r3, [sp, #60]	; 0x3c
 800a43a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a43e:	2b30      	cmp	r3, #48	; 0x30
 800a440:	d0f8      	beq.n	800a434 <_dtoa_r+0x61c>
 800a442:	46bb      	mov	fp, r7
 800a444:	e04a      	b.n	800a4dc <_dtoa_r+0x6c4>
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <_dtoa_r+0x648>)
 800a448:	f7f6 f8d6 	bl	80005f8 <__aeabi_dmul>
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	e7bd      	b.n	800a3ce <_dtoa_r+0x5b6>
 800a452:	bf00      	nop
 800a454:	0800f810 	.word	0x0800f810
 800a458:	0800f7e8 	.word	0x0800f7e8
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	40240000 	.word	0x40240000
 800a464:	401c0000 	.word	0x401c0000
 800a468:	40140000 	.word	0x40140000
 800a46c:	3fe00000 	.word	0x3fe00000
 800a470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a474:	9d00      	ldr	r5, [sp, #0]
 800a476:	4642      	mov	r2, r8
 800a478:	464b      	mov	r3, r9
 800a47a:	4630      	mov	r0, r6
 800a47c:	4639      	mov	r1, r7
 800a47e:	f7f6 f9e5 	bl	800084c <__aeabi_ddiv>
 800a482:	f7f6 fb69 	bl	8000b58 <__aeabi_d2iz>
 800a486:	9001      	str	r0, [sp, #4]
 800a488:	f7f6 f84c 	bl	8000524 <__aeabi_i2d>
 800a48c:	4642      	mov	r2, r8
 800a48e:	464b      	mov	r3, r9
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f5 fef4 	bl	8000288 <__aeabi_dsub>
 800a4a0:	9e01      	ldr	r6, [sp, #4]
 800a4a2:	9f04      	ldr	r7, [sp, #16]
 800a4a4:	3630      	adds	r6, #48	; 0x30
 800a4a6:	f805 6b01 	strb.w	r6, [r5], #1
 800a4aa:	9e00      	ldr	r6, [sp, #0]
 800a4ac:	1bae      	subs	r6, r5, r6
 800a4ae:	42b7      	cmp	r7, r6
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	d134      	bne.n	800a520 <_dtoa_r+0x708>
 800a4b6:	f7f5 fee9 	bl	800028c <__adddf3>
 800a4ba:	4642      	mov	r2, r8
 800a4bc:	464b      	mov	r3, r9
 800a4be:	4606      	mov	r6, r0
 800a4c0:	460f      	mov	r7, r1
 800a4c2:	f7f6 fb29 	bl	8000b18 <__aeabi_dcmpgt>
 800a4c6:	b9c8      	cbnz	r0, 800a4fc <_dtoa_r+0x6e4>
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	464b      	mov	r3, r9
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	f7f6 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4d4:	b110      	cbz	r0, 800a4dc <_dtoa_r+0x6c4>
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	07db      	lsls	r3, r3, #31
 800a4da:	d40f      	bmi.n	800a4fc <_dtoa_r+0x6e4>
 800a4dc:	4651      	mov	r1, sl
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 fe82 	bl	800b1e8 <_Bfree>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4e8:	702b      	strb	r3, [r5, #0]
 800a4ea:	f10b 0301 	add.w	r3, fp, #1
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f43f ace2 	beq.w	8009ebc <_dtoa_r+0xa4>
 800a4f8:	601d      	str	r5, [r3, #0]
 800a4fa:	e4df      	b.n	8009ebc <_dtoa_r+0xa4>
 800a4fc:	465f      	mov	r7, fp
 800a4fe:	462b      	mov	r3, r5
 800a500:	461d      	mov	r5, r3
 800a502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a506:	2a39      	cmp	r2, #57	; 0x39
 800a508:	d106      	bne.n	800a518 <_dtoa_r+0x700>
 800a50a:	9a00      	ldr	r2, [sp, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d1f7      	bne.n	800a500 <_dtoa_r+0x6e8>
 800a510:	9900      	ldr	r1, [sp, #0]
 800a512:	2230      	movs	r2, #48	; 0x30
 800a514:	3701      	adds	r7, #1
 800a516:	700a      	strb	r2, [r1, #0]
 800a518:	781a      	ldrb	r2, [r3, #0]
 800a51a:	3201      	adds	r2, #1
 800a51c:	701a      	strb	r2, [r3, #0]
 800a51e:	e790      	b.n	800a442 <_dtoa_r+0x62a>
 800a520:	4ba3      	ldr	r3, [pc, #652]	; (800a7b0 <_dtoa_r+0x998>)
 800a522:	2200      	movs	r2, #0
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	2200      	movs	r2, #0
 800a52a:	2300      	movs	r3, #0
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
 800a530:	f7f6 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 800a534:	2800      	cmp	r0, #0
 800a536:	d09e      	beq.n	800a476 <_dtoa_r+0x65e>
 800a538:	e7d0      	b.n	800a4dc <_dtoa_r+0x6c4>
 800a53a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	f000 80ca 	beq.w	800a6d6 <_dtoa_r+0x8be>
 800a542:	9a07      	ldr	r2, [sp, #28]
 800a544:	2a01      	cmp	r2, #1
 800a546:	f300 80ad 	bgt.w	800a6a4 <_dtoa_r+0x88c>
 800a54a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a54c:	2a00      	cmp	r2, #0
 800a54e:	f000 80a5 	beq.w	800a69c <_dtoa_r+0x884>
 800a552:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a556:	9e08      	ldr	r6, [sp, #32]
 800a558:	9d05      	ldr	r5, [sp, #20]
 800a55a:	9a05      	ldr	r2, [sp, #20]
 800a55c:	441a      	add	r2, r3
 800a55e:	9205      	str	r2, [sp, #20]
 800a560:	9a06      	ldr	r2, [sp, #24]
 800a562:	2101      	movs	r1, #1
 800a564:	441a      	add	r2, r3
 800a566:	4620      	mov	r0, r4
 800a568:	9206      	str	r2, [sp, #24]
 800a56a:	f000 ff3d 	bl	800b3e8 <__i2b>
 800a56e:	4607      	mov	r7, r0
 800a570:	b165      	cbz	r5, 800a58c <_dtoa_r+0x774>
 800a572:	9b06      	ldr	r3, [sp, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	dd09      	ble.n	800a58c <_dtoa_r+0x774>
 800a578:	42ab      	cmp	r3, r5
 800a57a:	9a05      	ldr	r2, [sp, #20]
 800a57c:	bfa8      	it	ge
 800a57e:	462b      	movge	r3, r5
 800a580:	1ad2      	subs	r2, r2, r3
 800a582:	9205      	str	r2, [sp, #20]
 800a584:	9a06      	ldr	r2, [sp, #24]
 800a586:	1aed      	subs	r5, r5, r3
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	9306      	str	r3, [sp, #24]
 800a58c:	9b08      	ldr	r3, [sp, #32]
 800a58e:	b1f3      	cbz	r3, 800a5ce <_dtoa_r+0x7b6>
 800a590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 80a3 	beq.w	800a6de <_dtoa_r+0x8c6>
 800a598:	2e00      	cmp	r6, #0
 800a59a:	dd10      	ble.n	800a5be <_dtoa_r+0x7a6>
 800a59c:	4639      	mov	r1, r7
 800a59e:	4632      	mov	r2, r6
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f000 ffe1 	bl	800b568 <__pow5mult>
 800a5a6:	4652      	mov	r2, sl
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f000 ff31 	bl	800b414 <__multiply>
 800a5b2:	4651      	mov	r1, sl
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f000 fe16 	bl	800b1e8 <_Bfree>
 800a5bc:	46c2      	mov	sl, r8
 800a5be:	9b08      	ldr	r3, [sp, #32]
 800a5c0:	1b9a      	subs	r2, r3, r6
 800a5c2:	d004      	beq.n	800a5ce <_dtoa_r+0x7b6>
 800a5c4:	4651      	mov	r1, sl
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 ffce 	bl	800b568 <__pow5mult>
 800a5cc:	4682      	mov	sl, r0
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 ff09 	bl	800b3e8 <__i2b>
 800a5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	4606      	mov	r6, r0
 800a5dc:	f340 8081 	ble.w	800a6e2 <_dtoa_r+0x8ca>
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 ffbf 	bl	800b568 <__pow5mult>
 800a5ea:	9b07      	ldr	r3, [sp, #28]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	dd7a      	ble.n	800a6e8 <_dtoa_r+0x8d0>
 800a5f2:	f04f 0800 	mov.w	r8, #0
 800a5f6:	6933      	ldr	r3, [r6, #16]
 800a5f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5fc:	6918      	ldr	r0, [r3, #16]
 800a5fe:	f000 fea5 	bl	800b34c <__hi0bits>
 800a602:	f1c0 0020 	rsb	r0, r0, #32
 800a606:	9b06      	ldr	r3, [sp, #24]
 800a608:	4418      	add	r0, r3
 800a60a:	f010 001f 	ands.w	r0, r0, #31
 800a60e:	f000 8094 	beq.w	800a73a <_dtoa_r+0x922>
 800a612:	f1c0 0320 	rsb	r3, r0, #32
 800a616:	2b04      	cmp	r3, #4
 800a618:	f340 8085 	ble.w	800a726 <_dtoa_r+0x90e>
 800a61c:	9b05      	ldr	r3, [sp, #20]
 800a61e:	f1c0 001c 	rsb	r0, r0, #28
 800a622:	4403      	add	r3, r0
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	9b06      	ldr	r3, [sp, #24]
 800a628:	4403      	add	r3, r0
 800a62a:	4405      	add	r5, r0
 800a62c:	9306      	str	r3, [sp, #24]
 800a62e:	9b05      	ldr	r3, [sp, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dd05      	ble.n	800a640 <_dtoa_r+0x828>
 800a634:	4651      	mov	r1, sl
 800a636:	461a      	mov	r2, r3
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 ffef 	bl	800b61c <__lshift>
 800a63e:	4682      	mov	sl, r0
 800a640:	9b06      	ldr	r3, [sp, #24]
 800a642:	2b00      	cmp	r3, #0
 800a644:	dd05      	ble.n	800a652 <_dtoa_r+0x83a>
 800a646:	4631      	mov	r1, r6
 800a648:	461a      	mov	r2, r3
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 ffe6 	bl	800b61c <__lshift>
 800a650:	4606      	mov	r6, r0
 800a652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a654:	2b00      	cmp	r3, #0
 800a656:	d072      	beq.n	800a73e <_dtoa_r+0x926>
 800a658:	4631      	mov	r1, r6
 800a65a:	4650      	mov	r0, sl
 800a65c:	f001 f84a 	bl	800b6f4 <__mcmp>
 800a660:	2800      	cmp	r0, #0
 800a662:	da6c      	bge.n	800a73e <_dtoa_r+0x926>
 800a664:	2300      	movs	r3, #0
 800a666:	4651      	mov	r1, sl
 800a668:	220a      	movs	r2, #10
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fdde 	bl	800b22c <__multadd>
 800a670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a672:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a676:	4682      	mov	sl, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 81b0 	beq.w	800a9de <_dtoa_r+0xbc6>
 800a67e:	2300      	movs	r3, #0
 800a680:	4639      	mov	r1, r7
 800a682:	220a      	movs	r2, #10
 800a684:	4620      	mov	r0, r4
 800a686:	f000 fdd1 	bl	800b22c <__multadd>
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	4607      	mov	r7, r0
 800a690:	f300 8096 	bgt.w	800a7c0 <_dtoa_r+0x9a8>
 800a694:	9b07      	ldr	r3, [sp, #28]
 800a696:	2b02      	cmp	r3, #2
 800a698:	dc59      	bgt.n	800a74e <_dtoa_r+0x936>
 800a69a:	e091      	b.n	800a7c0 <_dtoa_r+0x9a8>
 800a69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a69e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6a2:	e758      	b.n	800a556 <_dtoa_r+0x73e>
 800a6a4:	9b04      	ldr	r3, [sp, #16]
 800a6a6:	1e5e      	subs	r6, r3, #1
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	42b3      	cmp	r3, r6
 800a6ac:	bfbf      	itttt	lt
 800a6ae:	9b08      	ldrlt	r3, [sp, #32]
 800a6b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a6b2:	9608      	strlt	r6, [sp, #32]
 800a6b4:	1af3      	sublt	r3, r6, r3
 800a6b6:	bfb4      	ite	lt
 800a6b8:	18d2      	addlt	r2, r2, r3
 800a6ba:	1b9e      	subge	r6, r3, r6
 800a6bc:	9b04      	ldr	r3, [sp, #16]
 800a6be:	bfbc      	itt	lt
 800a6c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a6c2:	2600      	movlt	r6, #0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bfb7      	itett	lt
 800a6c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a6cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a6d0:	1a9d      	sublt	r5, r3, r2
 800a6d2:	2300      	movlt	r3, #0
 800a6d4:	e741      	b.n	800a55a <_dtoa_r+0x742>
 800a6d6:	9e08      	ldr	r6, [sp, #32]
 800a6d8:	9d05      	ldr	r5, [sp, #20]
 800a6da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a6dc:	e748      	b.n	800a570 <_dtoa_r+0x758>
 800a6de:	9a08      	ldr	r2, [sp, #32]
 800a6e0:	e770      	b.n	800a5c4 <_dtoa_r+0x7ac>
 800a6e2:	9b07      	ldr	r3, [sp, #28]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	dc19      	bgt.n	800a71c <_dtoa_r+0x904>
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	b9bb      	cbnz	r3, 800a71c <_dtoa_r+0x904>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6f2:	b99b      	cbnz	r3, 800a71c <_dtoa_r+0x904>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6fa:	0d1b      	lsrs	r3, r3, #20
 800a6fc:	051b      	lsls	r3, r3, #20
 800a6fe:	b183      	cbz	r3, 800a722 <_dtoa_r+0x90a>
 800a700:	9b05      	ldr	r3, [sp, #20]
 800a702:	3301      	adds	r3, #1
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	9b06      	ldr	r3, [sp, #24]
 800a708:	3301      	adds	r3, #1
 800a70a:	9306      	str	r3, [sp, #24]
 800a70c:	f04f 0801 	mov.w	r8, #1
 800a710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a712:	2b00      	cmp	r3, #0
 800a714:	f47f af6f 	bne.w	800a5f6 <_dtoa_r+0x7de>
 800a718:	2001      	movs	r0, #1
 800a71a:	e774      	b.n	800a606 <_dtoa_r+0x7ee>
 800a71c:	f04f 0800 	mov.w	r8, #0
 800a720:	e7f6      	b.n	800a710 <_dtoa_r+0x8f8>
 800a722:	4698      	mov	r8, r3
 800a724:	e7f4      	b.n	800a710 <_dtoa_r+0x8f8>
 800a726:	d082      	beq.n	800a62e <_dtoa_r+0x816>
 800a728:	9a05      	ldr	r2, [sp, #20]
 800a72a:	331c      	adds	r3, #28
 800a72c:	441a      	add	r2, r3
 800a72e:	9205      	str	r2, [sp, #20]
 800a730:	9a06      	ldr	r2, [sp, #24]
 800a732:	441a      	add	r2, r3
 800a734:	441d      	add	r5, r3
 800a736:	9206      	str	r2, [sp, #24]
 800a738:	e779      	b.n	800a62e <_dtoa_r+0x816>
 800a73a:	4603      	mov	r3, r0
 800a73c:	e7f4      	b.n	800a728 <_dtoa_r+0x910>
 800a73e:	9b04      	ldr	r3, [sp, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	dc37      	bgt.n	800a7b4 <_dtoa_r+0x99c>
 800a744:	9b07      	ldr	r3, [sp, #28]
 800a746:	2b02      	cmp	r3, #2
 800a748:	dd34      	ble.n	800a7b4 <_dtoa_r+0x99c>
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	9b01      	ldr	r3, [sp, #4]
 800a750:	b963      	cbnz	r3, 800a76c <_dtoa_r+0x954>
 800a752:	4631      	mov	r1, r6
 800a754:	2205      	movs	r2, #5
 800a756:	4620      	mov	r0, r4
 800a758:	f000 fd68 	bl	800b22c <__multadd>
 800a75c:	4601      	mov	r1, r0
 800a75e:	4606      	mov	r6, r0
 800a760:	4650      	mov	r0, sl
 800a762:	f000 ffc7 	bl	800b6f4 <__mcmp>
 800a766:	2800      	cmp	r0, #0
 800a768:	f73f adbb 	bgt.w	800a2e2 <_dtoa_r+0x4ca>
 800a76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76e:	9d00      	ldr	r5, [sp, #0]
 800a770:	ea6f 0b03 	mvn.w	fp, r3
 800a774:	f04f 0800 	mov.w	r8, #0
 800a778:	4631      	mov	r1, r6
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fd34 	bl	800b1e8 <_Bfree>
 800a780:	2f00      	cmp	r7, #0
 800a782:	f43f aeab 	beq.w	800a4dc <_dtoa_r+0x6c4>
 800a786:	f1b8 0f00 	cmp.w	r8, #0
 800a78a:	d005      	beq.n	800a798 <_dtoa_r+0x980>
 800a78c:	45b8      	cmp	r8, r7
 800a78e:	d003      	beq.n	800a798 <_dtoa_r+0x980>
 800a790:	4641      	mov	r1, r8
 800a792:	4620      	mov	r0, r4
 800a794:	f000 fd28 	bl	800b1e8 <_Bfree>
 800a798:	4639      	mov	r1, r7
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 fd24 	bl	800b1e8 <_Bfree>
 800a7a0:	e69c      	b.n	800a4dc <_dtoa_r+0x6c4>
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	4637      	mov	r7, r6
 800a7a6:	e7e1      	b.n	800a76c <_dtoa_r+0x954>
 800a7a8:	46bb      	mov	fp, r7
 800a7aa:	4637      	mov	r7, r6
 800a7ac:	e599      	b.n	800a2e2 <_dtoa_r+0x4ca>
 800a7ae:	bf00      	nop
 800a7b0:	40240000 	.word	0x40240000
 800a7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 80c8 	beq.w	800a94c <_dtoa_r+0xb34>
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	dd05      	ble.n	800a7d0 <_dtoa_r+0x9b8>
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	462a      	mov	r2, r5
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 ff27 	bl	800b61c <__lshift>
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	f1b8 0f00 	cmp.w	r8, #0
 800a7d4:	d05b      	beq.n	800a88e <_dtoa_r+0xa76>
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fcc5 	bl	800b168 <_Balloc>
 800a7de:	4605      	mov	r5, r0
 800a7e0:	b928      	cbnz	r0, 800a7ee <_dtoa_r+0x9d6>
 800a7e2:	4b83      	ldr	r3, [pc, #524]	; (800a9f0 <_dtoa_r+0xbd8>)
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a7ea:	f7ff bb2e 	b.w	8009e4a <_dtoa_r+0x32>
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	3202      	adds	r2, #2
 800a7f2:	0092      	lsls	r2, r2, #2
 800a7f4:	f107 010c 	add.w	r1, r7, #12
 800a7f8:	300c      	adds	r0, #12
 800a7fa:	f7ff fa4a 	bl	8009c92 <memcpy>
 800a7fe:	2201      	movs	r2, #1
 800a800:	4629      	mov	r1, r5
 800a802:	4620      	mov	r0, r4
 800a804:	f000 ff0a 	bl	800b61c <__lshift>
 800a808:	9b00      	ldr	r3, [sp, #0]
 800a80a:	3301      	adds	r3, #1
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a812:	4413      	add	r3, r2
 800a814:	9308      	str	r3, [sp, #32]
 800a816:	9b02      	ldr	r3, [sp, #8]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	46b8      	mov	r8, r7
 800a81e:	9306      	str	r3, [sp, #24]
 800a820:	4607      	mov	r7, r0
 800a822:	9b04      	ldr	r3, [sp, #16]
 800a824:	4631      	mov	r1, r6
 800a826:	3b01      	subs	r3, #1
 800a828:	4650      	mov	r0, sl
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	f7ff fa6c 	bl	8009d08 <quorem>
 800a830:	4641      	mov	r1, r8
 800a832:	9002      	str	r0, [sp, #8]
 800a834:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a838:	4650      	mov	r0, sl
 800a83a:	f000 ff5b 	bl	800b6f4 <__mcmp>
 800a83e:	463a      	mov	r2, r7
 800a840:	9005      	str	r0, [sp, #20]
 800a842:	4631      	mov	r1, r6
 800a844:	4620      	mov	r0, r4
 800a846:	f000 ff71 	bl	800b72c <__mdiff>
 800a84a:	68c2      	ldr	r2, [r0, #12]
 800a84c:	4605      	mov	r5, r0
 800a84e:	bb02      	cbnz	r2, 800a892 <_dtoa_r+0xa7a>
 800a850:	4601      	mov	r1, r0
 800a852:	4650      	mov	r0, sl
 800a854:	f000 ff4e 	bl	800b6f4 <__mcmp>
 800a858:	4602      	mov	r2, r0
 800a85a:	4629      	mov	r1, r5
 800a85c:	4620      	mov	r0, r4
 800a85e:	9209      	str	r2, [sp, #36]	; 0x24
 800a860:	f000 fcc2 	bl	800b1e8 <_Bfree>
 800a864:	9b07      	ldr	r3, [sp, #28]
 800a866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a868:	9d04      	ldr	r5, [sp, #16]
 800a86a:	ea43 0102 	orr.w	r1, r3, r2
 800a86e:	9b06      	ldr	r3, [sp, #24]
 800a870:	4319      	orrs	r1, r3
 800a872:	d110      	bne.n	800a896 <_dtoa_r+0xa7e>
 800a874:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a878:	d029      	beq.n	800a8ce <_dtoa_r+0xab6>
 800a87a:	9b05      	ldr	r3, [sp, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	dd02      	ble.n	800a886 <_dtoa_r+0xa6e>
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	f883 9000 	strb.w	r9, [r3]
 800a88c:	e774      	b.n	800a778 <_dtoa_r+0x960>
 800a88e:	4638      	mov	r0, r7
 800a890:	e7ba      	b.n	800a808 <_dtoa_r+0x9f0>
 800a892:	2201      	movs	r2, #1
 800a894:	e7e1      	b.n	800a85a <_dtoa_r+0xa42>
 800a896:	9b05      	ldr	r3, [sp, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db04      	blt.n	800a8a6 <_dtoa_r+0xa8e>
 800a89c:	9907      	ldr	r1, [sp, #28]
 800a89e:	430b      	orrs	r3, r1
 800a8a0:	9906      	ldr	r1, [sp, #24]
 800a8a2:	430b      	orrs	r3, r1
 800a8a4:	d120      	bne.n	800a8e8 <_dtoa_r+0xad0>
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	dded      	ble.n	800a886 <_dtoa_r+0xa6e>
 800a8aa:	4651      	mov	r1, sl
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 feb4 	bl	800b61c <__lshift>
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	f000 ff1c 	bl	800b6f4 <__mcmp>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	dc03      	bgt.n	800a8c8 <_dtoa_r+0xab0>
 800a8c0:	d1e1      	bne.n	800a886 <_dtoa_r+0xa6e>
 800a8c2:	f019 0f01 	tst.w	r9, #1
 800a8c6:	d0de      	beq.n	800a886 <_dtoa_r+0xa6e>
 800a8c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8cc:	d1d8      	bne.n	800a880 <_dtoa_r+0xa68>
 800a8ce:	9a01      	ldr	r2, [sp, #4]
 800a8d0:	2339      	movs	r3, #57	; 0x39
 800a8d2:	7013      	strb	r3, [r2, #0]
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	461d      	mov	r5, r3
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a8de:	2a39      	cmp	r2, #57	; 0x39
 800a8e0:	d06c      	beq.n	800a9bc <_dtoa_r+0xba4>
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	701a      	strb	r2, [r3, #0]
 800a8e6:	e747      	b.n	800a778 <_dtoa_r+0x960>
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	dd07      	ble.n	800a8fc <_dtoa_r+0xae4>
 800a8ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8f0:	d0ed      	beq.n	800a8ce <_dtoa_r+0xab6>
 800a8f2:	9a01      	ldr	r2, [sp, #4]
 800a8f4:	f109 0301 	add.w	r3, r9, #1
 800a8f8:	7013      	strb	r3, [r2, #0]
 800a8fa:	e73d      	b.n	800a778 <_dtoa_r+0x960>
 800a8fc:	9b04      	ldr	r3, [sp, #16]
 800a8fe:	9a08      	ldr	r2, [sp, #32]
 800a900:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a904:	4293      	cmp	r3, r2
 800a906:	d043      	beq.n	800a990 <_dtoa_r+0xb78>
 800a908:	4651      	mov	r1, sl
 800a90a:	2300      	movs	r3, #0
 800a90c:	220a      	movs	r2, #10
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 fc8c 	bl	800b22c <__multadd>
 800a914:	45b8      	cmp	r8, r7
 800a916:	4682      	mov	sl, r0
 800a918:	f04f 0300 	mov.w	r3, #0
 800a91c:	f04f 020a 	mov.w	r2, #10
 800a920:	4641      	mov	r1, r8
 800a922:	4620      	mov	r0, r4
 800a924:	d107      	bne.n	800a936 <_dtoa_r+0xb1e>
 800a926:	f000 fc81 	bl	800b22c <__multadd>
 800a92a:	4680      	mov	r8, r0
 800a92c:	4607      	mov	r7, r0
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	3301      	adds	r3, #1
 800a932:	9304      	str	r3, [sp, #16]
 800a934:	e775      	b.n	800a822 <_dtoa_r+0xa0a>
 800a936:	f000 fc79 	bl	800b22c <__multadd>
 800a93a:	4639      	mov	r1, r7
 800a93c:	4680      	mov	r8, r0
 800a93e:	2300      	movs	r3, #0
 800a940:	220a      	movs	r2, #10
 800a942:	4620      	mov	r0, r4
 800a944:	f000 fc72 	bl	800b22c <__multadd>
 800a948:	4607      	mov	r7, r0
 800a94a:	e7f0      	b.n	800a92e <_dtoa_r+0xb16>
 800a94c:	9b04      	ldr	r3, [sp, #16]
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	9d00      	ldr	r5, [sp, #0]
 800a952:	4631      	mov	r1, r6
 800a954:	4650      	mov	r0, sl
 800a956:	f7ff f9d7 	bl	8009d08 <quorem>
 800a95a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a95e:	9b00      	ldr	r3, [sp, #0]
 800a960:	f805 9b01 	strb.w	r9, [r5], #1
 800a964:	1aea      	subs	r2, r5, r3
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	4293      	cmp	r3, r2
 800a96a:	dd07      	ble.n	800a97c <_dtoa_r+0xb64>
 800a96c:	4651      	mov	r1, sl
 800a96e:	2300      	movs	r3, #0
 800a970:	220a      	movs	r2, #10
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fc5a 	bl	800b22c <__multadd>
 800a978:	4682      	mov	sl, r0
 800a97a:	e7ea      	b.n	800a952 <_dtoa_r+0xb3a>
 800a97c:	9b01      	ldr	r3, [sp, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	bfc8      	it	gt
 800a982:	461d      	movgt	r5, r3
 800a984:	9b00      	ldr	r3, [sp, #0]
 800a986:	bfd8      	it	le
 800a988:	2501      	movle	r5, #1
 800a98a:	441d      	add	r5, r3
 800a98c:	f04f 0800 	mov.w	r8, #0
 800a990:	4651      	mov	r1, sl
 800a992:	2201      	movs	r2, #1
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fe41 	bl	800b61c <__lshift>
 800a99a:	4631      	mov	r1, r6
 800a99c:	4682      	mov	sl, r0
 800a99e:	f000 fea9 	bl	800b6f4 <__mcmp>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	dc96      	bgt.n	800a8d4 <_dtoa_r+0xabc>
 800a9a6:	d102      	bne.n	800a9ae <_dtoa_r+0xb96>
 800a9a8:	f019 0f01 	tst.w	r9, #1
 800a9ac:	d192      	bne.n	800a8d4 <_dtoa_r+0xabc>
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	461d      	mov	r5, r3
 800a9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9b6:	2a30      	cmp	r2, #48	; 0x30
 800a9b8:	d0fa      	beq.n	800a9b0 <_dtoa_r+0xb98>
 800a9ba:	e6dd      	b.n	800a778 <_dtoa_r+0x960>
 800a9bc:	9a00      	ldr	r2, [sp, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d189      	bne.n	800a8d6 <_dtoa_r+0xabe>
 800a9c2:	f10b 0b01 	add.w	fp, fp, #1
 800a9c6:	2331      	movs	r3, #49	; 0x31
 800a9c8:	e796      	b.n	800a8f8 <_dtoa_r+0xae0>
 800a9ca:	4b0a      	ldr	r3, [pc, #40]	; (800a9f4 <_dtoa_r+0xbdc>)
 800a9cc:	f7ff ba99 	b.w	8009f02 <_dtoa_r+0xea>
 800a9d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f47f aa6d 	bne.w	8009eb2 <_dtoa_r+0x9a>
 800a9d8:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <_dtoa_r+0xbe0>)
 800a9da:	f7ff ba92 	b.w	8009f02 <_dtoa_r+0xea>
 800a9de:	9b01      	ldr	r3, [sp, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dcb5      	bgt.n	800a950 <_dtoa_r+0xb38>
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	f73f aeb1 	bgt.w	800a74e <_dtoa_r+0x936>
 800a9ec:	e7b0      	b.n	800a950 <_dtoa_r+0xb38>
 800a9ee:	bf00      	nop
 800a9f0:	0800f71c 	.word	0x0800f71c
 800a9f4:	0800f5d9 	.word	0x0800f5d9
 800a9f8:	0800f6b7 	.word	0x0800f6b7

0800a9fc <_free_r>:
 800a9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d044      	beq.n	800aa8c <_free_r+0x90>
 800aa02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa06:	9001      	str	r0, [sp, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa0e:	bfb8      	it	lt
 800aa10:	18e4      	addlt	r4, r4, r3
 800aa12:	f7fd f941 	bl	8007c98 <__malloc_lock>
 800aa16:	4a1e      	ldr	r2, [pc, #120]	; (800aa90 <_free_r+0x94>)
 800aa18:	9801      	ldr	r0, [sp, #4]
 800aa1a:	6813      	ldr	r3, [r2, #0]
 800aa1c:	b933      	cbnz	r3, 800aa2c <_free_r+0x30>
 800aa1e:	6063      	str	r3, [r4, #4]
 800aa20:	6014      	str	r4, [r2, #0]
 800aa22:	b003      	add	sp, #12
 800aa24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa28:	f7fd b93c 	b.w	8007ca4 <__malloc_unlock>
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	d908      	bls.n	800aa42 <_free_r+0x46>
 800aa30:	6825      	ldr	r5, [r4, #0]
 800aa32:	1961      	adds	r1, r4, r5
 800aa34:	428b      	cmp	r3, r1
 800aa36:	bf01      	itttt	eq
 800aa38:	6819      	ldreq	r1, [r3, #0]
 800aa3a:	685b      	ldreq	r3, [r3, #4]
 800aa3c:	1949      	addeq	r1, r1, r5
 800aa3e:	6021      	streq	r1, [r4, #0]
 800aa40:	e7ed      	b.n	800aa1e <_free_r+0x22>
 800aa42:	461a      	mov	r2, r3
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	b10b      	cbz	r3, 800aa4c <_free_r+0x50>
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d9fa      	bls.n	800aa42 <_free_r+0x46>
 800aa4c:	6811      	ldr	r1, [r2, #0]
 800aa4e:	1855      	adds	r5, r2, r1
 800aa50:	42a5      	cmp	r5, r4
 800aa52:	d10b      	bne.n	800aa6c <_free_r+0x70>
 800aa54:	6824      	ldr	r4, [r4, #0]
 800aa56:	4421      	add	r1, r4
 800aa58:	1854      	adds	r4, r2, r1
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	6011      	str	r1, [r2, #0]
 800aa5e:	d1e0      	bne.n	800aa22 <_free_r+0x26>
 800aa60:	681c      	ldr	r4, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	6053      	str	r3, [r2, #4]
 800aa66:	440c      	add	r4, r1
 800aa68:	6014      	str	r4, [r2, #0]
 800aa6a:	e7da      	b.n	800aa22 <_free_r+0x26>
 800aa6c:	d902      	bls.n	800aa74 <_free_r+0x78>
 800aa6e:	230c      	movs	r3, #12
 800aa70:	6003      	str	r3, [r0, #0]
 800aa72:	e7d6      	b.n	800aa22 <_free_r+0x26>
 800aa74:	6825      	ldr	r5, [r4, #0]
 800aa76:	1961      	adds	r1, r4, r5
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	bf04      	itt	eq
 800aa7c:	6819      	ldreq	r1, [r3, #0]
 800aa7e:	685b      	ldreq	r3, [r3, #4]
 800aa80:	6063      	str	r3, [r4, #4]
 800aa82:	bf04      	itt	eq
 800aa84:	1949      	addeq	r1, r1, r5
 800aa86:	6021      	streq	r1, [r4, #0]
 800aa88:	6054      	str	r4, [r2, #4]
 800aa8a:	e7ca      	b.n	800aa22 <_free_r+0x26>
 800aa8c:	b003      	add	sp, #12
 800aa8e:	bd30      	pop	{r4, r5, pc}
 800aa90:	20000b2c 	.word	0x20000b2c

0800aa94 <rshift>:
 800aa94:	6903      	ldr	r3, [r0, #16]
 800aa96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaa2:	f100 0414 	add.w	r4, r0, #20
 800aaa6:	dd45      	ble.n	800ab34 <rshift+0xa0>
 800aaa8:	f011 011f 	ands.w	r1, r1, #31
 800aaac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aab4:	d10c      	bne.n	800aad0 <rshift+0x3c>
 800aab6:	f100 0710 	add.w	r7, r0, #16
 800aaba:	4629      	mov	r1, r5
 800aabc:	42b1      	cmp	r1, r6
 800aabe:	d334      	bcc.n	800ab2a <rshift+0x96>
 800aac0:	1a9b      	subs	r3, r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	1eea      	subs	r2, r5, #3
 800aac6:	4296      	cmp	r6, r2
 800aac8:	bf38      	it	cc
 800aaca:	2300      	movcc	r3, #0
 800aacc:	4423      	add	r3, r4
 800aace:	e015      	b.n	800aafc <rshift+0x68>
 800aad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aad4:	f1c1 0820 	rsb	r8, r1, #32
 800aad8:	40cf      	lsrs	r7, r1
 800aada:	f105 0e04 	add.w	lr, r5, #4
 800aade:	46a1      	mov	r9, r4
 800aae0:	4576      	cmp	r6, lr
 800aae2:	46f4      	mov	ip, lr
 800aae4:	d815      	bhi.n	800ab12 <rshift+0x7e>
 800aae6:	1a9a      	subs	r2, r3, r2
 800aae8:	0092      	lsls	r2, r2, #2
 800aaea:	3a04      	subs	r2, #4
 800aaec:	3501      	adds	r5, #1
 800aaee:	42ae      	cmp	r6, r5
 800aaf0:	bf38      	it	cc
 800aaf2:	2200      	movcc	r2, #0
 800aaf4:	18a3      	adds	r3, r4, r2
 800aaf6:	50a7      	str	r7, [r4, r2]
 800aaf8:	b107      	cbz	r7, 800aafc <rshift+0x68>
 800aafa:	3304      	adds	r3, #4
 800aafc:	1b1a      	subs	r2, r3, r4
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab04:	bf08      	it	eq
 800ab06:	2300      	moveq	r3, #0
 800ab08:	6102      	str	r2, [r0, #16]
 800ab0a:	bf08      	it	eq
 800ab0c:	6143      	streq	r3, [r0, #20]
 800ab0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab12:	f8dc c000 	ldr.w	ip, [ip]
 800ab16:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab1a:	ea4c 0707 	orr.w	r7, ip, r7
 800ab1e:	f849 7b04 	str.w	r7, [r9], #4
 800ab22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab26:	40cf      	lsrs	r7, r1
 800ab28:	e7da      	b.n	800aae0 <rshift+0x4c>
 800ab2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab32:	e7c3      	b.n	800aabc <rshift+0x28>
 800ab34:	4623      	mov	r3, r4
 800ab36:	e7e1      	b.n	800aafc <rshift+0x68>

0800ab38 <__hexdig_fun>:
 800ab38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	d802      	bhi.n	800ab46 <__hexdig_fun+0xe>
 800ab40:	3820      	subs	r0, #32
 800ab42:	b2c0      	uxtb	r0, r0
 800ab44:	4770      	bx	lr
 800ab46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab4a:	2b05      	cmp	r3, #5
 800ab4c:	d801      	bhi.n	800ab52 <__hexdig_fun+0x1a>
 800ab4e:	3847      	subs	r0, #71	; 0x47
 800ab50:	e7f7      	b.n	800ab42 <__hexdig_fun+0xa>
 800ab52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d801      	bhi.n	800ab5e <__hexdig_fun+0x26>
 800ab5a:	3827      	subs	r0, #39	; 0x27
 800ab5c:	e7f1      	b.n	800ab42 <__hexdig_fun+0xa>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	4770      	bx	lr
	...

0800ab64 <__gethex>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	4617      	mov	r7, r2
 800ab6a:	680a      	ldr	r2, [r1, #0]
 800ab6c:	b085      	sub	sp, #20
 800ab6e:	f102 0b02 	add.w	fp, r2, #2
 800ab72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab7a:	4681      	mov	r9, r0
 800ab7c:	468a      	mov	sl, r1
 800ab7e:	9302      	str	r3, [sp, #8]
 800ab80:	32fe      	adds	r2, #254	; 0xfe
 800ab82:	eb02 030b 	add.w	r3, r2, fp
 800ab86:	46d8      	mov	r8, fp
 800ab88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	2830      	cmp	r0, #48	; 0x30
 800ab90:	d0f7      	beq.n	800ab82 <__gethex+0x1e>
 800ab92:	f7ff ffd1 	bl	800ab38 <__hexdig_fun>
 800ab96:	4604      	mov	r4, r0
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d138      	bne.n	800ac0e <__gethex+0xaa>
 800ab9c:	49a7      	ldr	r1, [pc, #668]	; (800ae3c <__gethex+0x2d8>)
 800ab9e:	2201      	movs	r2, #1
 800aba0:	4640      	mov	r0, r8
 800aba2:	f7fe ff62 	bl	8009a6a <strncmp>
 800aba6:	4606      	mov	r6, r0
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d169      	bne.n	800ac80 <__gethex+0x11c>
 800abac:	f898 0001 	ldrb.w	r0, [r8, #1]
 800abb0:	465d      	mov	r5, fp
 800abb2:	f7ff ffc1 	bl	800ab38 <__hexdig_fun>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d064      	beq.n	800ac84 <__gethex+0x120>
 800abba:	465a      	mov	r2, fp
 800abbc:	7810      	ldrb	r0, [r2, #0]
 800abbe:	2830      	cmp	r0, #48	; 0x30
 800abc0:	4690      	mov	r8, r2
 800abc2:	f102 0201 	add.w	r2, r2, #1
 800abc6:	d0f9      	beq.n	800abbc <__gethex+0x58>
 800abc8:	f7ff ffb6 	bl	800ab38 <__hexdig_fun>
 800abcc:	2301      	movs	r3, #1
 800abce:	fab0 f480 	clz	r4, r0
 800abd2:	0964      	lsrs	r4, r4, #5
 800abd4:	465e      	mov	r6, fp
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	4642      	mov	r2, r8
 800abda:	4615      	mov	r5, r2
 800abdc:	3201      	adds	r2, #1
 800abde:	7828      	ldrb	r0, [r5, #0]
 800abe0:	f7ff ffaa 	bl	800ab38 <__hexdig_fun>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d1f8      	bne.n	800abda <__gethex+0x76>
 800abe8:	4994      	ldr	r1, [pc, #592]	; (800ae3c <__gethex+0x2d8>)
 800abea:	2201      	movs	r2, #1
 800abec:	4628      	mov	r0, r5
 800abee:	f7fe ff3c 	bl	8009a6a <strncmp>
 800abf2:	b978      	cbnz	r0, 800ac14 <__gethex+0xb0>
 800abf4:	b946      	cbnz	r6, 800ac08 <__gethex+0xa4>
 800abf6:	1c6e      	adds	r6, r5, #1
 800abf8:	4632      	mov	r2, r6
 800abfa:	4615      	mov	r5, r2
 800abfc:	3201      	adds	r2, #1
 800abfe:	7828      	ldrb	r0, [r5, #0]
 800ac00:	f7ff ff9a 	bl	800ab38 <__hexdig_fun>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d1f8      	bne.n	800abfa <__gethex+0x96>
 800ac08:	1b73      	subs	r3, r6, r5
 800ac0a:	009e      	lsls	r6, r3, #2
 800ac0c:	e004      	b.n	800ac18 <__gethex+0xb4>
 800ac0e:	2400      	movs	r4, #0
 800ac10:	4626      	mov	r6, r4
 800ac12:	e7e1      	b.n	800abd8 <__gethex+0x74>
 800ac14:	2e00      	cmp	r6, #0
 800ac16:	d1f7      	bne.n	800ac08 <__gethex+0xa4>
 800ac18:	782b      	ldrb	r3, [r5, #0]
 800ac1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac1e:	2b50      	cmp	r3, #80	; 0x50
 800ac20:	d13d      	bne.n	800ac9e <__gethex+0x13a>
 800ac22:	786b      	ldrb	r3, [r5, #1]
 800ac24:	2b2b      	cmp	r3, #43	; 0x2b
 800ac26:	d02f      	beq.n	800ac88 <__gethex+0x124>
 800ac28:	2b2d      	cmp	r3, #45	; 0x2d
 800ac2a:	d031      	beq.n	800ac90 <__gethex+0x12c>
 800ac2c:	1c69      	adds	r1, r5, #1
 800ac2e:	f04f 0b00 	mov.w	fp, #0
 800ac32:	7808      	ldrb	r0, [r1, #0]
 800ac34:	f7ff ff80 	bl	800ab38 <__hexdig_fun>
 800ac38:	1e42      	subs	r2, r0, #1
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	2a18      	cmp	r2, #24
 800ac3e:	d82e      	bhi.n	800ac9e <__gethex+0x13a>
 800ac40:	f1a0 0210 	sub.w	r2, r0, #16
 800ac44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac48:	f7ff ff76 	bl	800ab38 <__hexdig_fun>
 800ac4c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac50:	fa5f fc8c 	uxtb.w	ip, ip
 800ac54:	f1bc 0f18 	cmp.w	ip, #24
 800ac58:	d91d      	bls.n	800ac96 <__gethex+0x132>
 800ac5a:	f1bb 0f00 	cmp.w	fp, #0
 800ac5e:	d000      	beq.n	800ac62 <__gethex+0xfe>
 800ac60:	4252      	negs	r2, r2
 800ac62:	4416      	add	r6, r2
 800ac64:	f8ca 1000 	str.w	r1, [sl]
 800ac68:	b1dc      	cbz	r4, 800aca2 <__gethex+0x13e>
 800ac6a:	9b01      	ldr	r3, [sp, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bf14      	ite	ne
 800ac70:	f04f 0800 	movne.w	r8, #0
 800ac74:	f04f 0806 	moveq.w	r8, #6
 800ac78:	4640      	mov	r0, r8
 800ac7a:	b005      	add	sp, #20
 800ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac80:	4645      	mov	r5, r8
 800ac82:	4626      	mov	r6, r4
 800ac84:	2401      	movs	r4, #1
 800ac86:	e7c7      	b.n	800ac18 <__gethex+0xb4>
 800ac88:	f04f 0b00 	mov.w	fp, #0
 800ac8c:	1ca9      	adds	r1, r5, #2
 800ac8e:	e7d0      	b.n	800ac32 <__gethex+0xce>
 800ac90:	f04f 0b01 	mov.w	fp, #1
 800ac94:	e7fa      	b.n	800ac8c <__gethex+0x128>
 800ac96:	230a      	movs	r3, #10
 800ac98:	fb03 0002 	mla	r0, r3, r2, r0
 800ac9c:	e7d0      	b.n	800ac40 <__gethex+0xdc>
 800ac9e:	4629      	mov	r1, r5
 800aca0:	e7e0      	b.n	800ac64 <__gethex+0x100>
 800aca2:	eba5 0308 	sub.w	r3, r5, r8
 800aca6:	3b01      	subs	r3, #1
 800aca8:	4621      	mov	r1, r4
 800acaa:	2b07      	cmp	r3, #7
 800acac:	dc0a      	bgt.n	800acc4 <__gethex+0x160>
 800acae:	4648      	mov	r0, r9
 800acb0:	f000 fa5a 	bl	800b168 <_Balloc>
 800acb4:	4604      	mov	r4, r0
 800acb6:	b940      	cbnz	r0, 800acca <__gethex+0x166>
 800acb8:	4b61      	ldr	r3, [pc, #388]	; (800ae40 <__gethex+0x2dc>)
 800acba:	4602      	mov	r2, r0
 800acbc:	21e4      	movs	r1, #228	; 0xe4
 800acbe:	4861      	ldr	r0, [pc, #388]	; (800ae44 <__gethex+0x2e0>)
 800acc0:	f7ff f804 	bl	8009ccc <__assert_func>
 800acc4:	3101      	adds	r1, #1
 800acc6:	105b      	asrs	r3, r3, #1
 800acc8:	e7ef      	b.n	800acaa <__gethex+0x146>
 800acca:	f100 0a14 	add.w	sl, r0, #20
 800acce:	2300      	movs	r3, #0
 800acd0:	495a      	ldr	r1, [pc, #360]	; (800ae3c <__gethex+0x2d8>)
 800acd2:	f8cd a004 	str.w	sl, [sp, #4]
 800acd6:	469b      	mov	fp, r3
 800acd8:	45a8      	cmp	r8, r5
 800acda:	d342      	bcc.n	800ad62 <__gethex+0x1fe>
 800acdc:	9801      	ldr	r0, [sp, #4]
 800acde:	f840 bb04 	str.w	fp, [r0], #4
 800ace2:	eba0 000a 	sub.w	r0, r0, sl
 800ace6:	1080      	asrs	r0, r0, #2
 800ace8:	6120      	str	r0, [r4, #16]
 800acea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800acee:	4658      	mov	r0, fp
 800acf0:	f000 fb2c 	bl	800b34c <__hi0bits>
 800acf4:	683d      	ldr	r5, [r7, #0]
 800acf6:	eba8 0000 	sub.w	r0, r8, r0
 800acfa:	42a8      	cmp	r0, r5
 800acfc:	dd59      	ble.n	800adb2 <__gethex+0x24e>
 800acfe:	eba0 0805 	sub.w	r8, r0, r5
 800ad02:	4641      	mov	r1, r8
 800ad04:	4620      	mov	r0, r4
 800ad06:	f000 febb 	bl	800ba80 <__any_on>
 800ad0a:	4683      	mov	fp, r0
 800ad0c:	b1b8      	cbz	r0, 800ad3e <__gethex+0x1da>
 800ad0e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad12:	1159      	asrs	r1, r3, #5
 800ad14:	f003 021f 	and.w	r2, r3, #31
 800ad18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad1c:	f04f 0b01 	mov.w	fp, #1
 800ad20:	fa0b f202 	lsl.w	r2, fp, r2
 800ad24:	420a      	tst	r2, r1
 800ad26:	d00a      	beq.n	800ad3e <__gethex+0x1da>
 800ad28:	455b      	cmp	r3, fp
 800ad2a:	dd06      	ble.n	800ad3a <__gethex+0x1d6>
 800ad2c:	f1a8 0102 	sub.w	r1, r8, #2
 800ad30:	4620      	mov	r0, r4
 800ad32:	f000 fea5 	bl	800ba80 <__any_on>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d138      	bne.n	800adac <__gethex+0x248>
 800ad3a:	f04f 0b02 	mov.w	fp, #2
 800ad3e:	4641      	mov	r1, r8
 800ad40:	4620      	mov	r0, r4
 800ad42:	f7ff fea7 	bl	800aa94 <rshift>
 800ad46:	4446      	add	r6, r8
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	42b3      	cmp	r3, r6
 800ad4c:	da41      	bge.n	800add2 <__gethex+0x26e>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4648      	mov	r0, r9
 800ad52:	f000 fa49 	bl	800b1e8 <_Bfree>
 800ad56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ad60:	e78a      	b.n	800ac78 <__gethex+0x114>
 800ad62:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ad66:	2a2e      	cmp	r2, #46	; 0x2e
 800ad68:	d014      	beq.n	800ad94 <__gethex+0x230>
 800ad6a:	2b20      	cmp	r3, #32
 800ad6c:	d106      	bne.n	800ad7c <__gethex+0x218>
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	f843 bb04 	str.w	fp, [r3], #4
 800ad74:	f04f 0b00 	mov.w	fp, #0
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	465b      	mov	r3, fp
 800ad7c:	7828      	ldrb	r0, [r5, #0]
 800ad7e:	9303      	str	r3, [sp, #12]
 800ad80:	f7ff feda 	bl	800ab38 <__hexdig_fun>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	f000 000f 	and.w	r0, r0, #15
 800ad8a:	4098      	lsls	r0, r3
 800ad8c:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad90:	3304      	adds	r3, #4
 800ad92:	e7a1      	b.n	800acd8 <__gethex+0x174>
 800ad94:	45a8      	cmp	r8, r5
 800ad96:	d8e8      	bhi.n	800ad6a <__gethex+0x206>
 800ad98:	2201      	movs	r2, #1
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	9303      	str	r3, [sp, #12]
 800ad9e:	f7fe fe64 	bl	8009a6a <strncmp>
 800ada2:	4926      	ldr	r1, [pc, #152]	; (800ae3c <__gethex+0x2d8>)
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d1df      	bne.n	800ad6a <__gethex+0x206>
 800adaa:	e795      	b.n	800acd8 <__gethex+0x174>
 800adac:	f04f 0b03 	mov.w	fp, #3
 800adb0:	e7c5      	b.n	800ad3e <__gethex+0x1da>
 800adb2:	da0b      	bge.n	800adcc <__gethex+0x268>
 800adb4:	eba5 0800 	sub.w	r8, r5, r0
 800adb8:	4621      	mov	r1, r4
 800adba:	4642      	mov	r2, r8
 800adbc:	4648      	mov	r0, r9
 800adbe:	f000 fc2d 	bl	800b61c <__lshift>
 800adc2:	eba6 0608 	sub.w	r6, r6, r8
 800adc6:	4604      	mov	r4, r0
 800adc8:	f100 0a14 	add.w	sl, r0, #20
 800adcc:	f04f 0b00 	mov.w	fp, #0
 800add0:	e7ba      	b.n	800ad48 <__gethex+0x1e4>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	42b3      	cmp	r3, r6
 800add6:	dd73      	ble.n	800aec0 <__gethex+0x35c>
 800add8:	1b9e      	subs	r6, r3, r6
 800adda:	42b5      	cmp	r5, r6
 800addc:	dc34      	bgt.n	800ae48 <__gethex+0x2e4>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d023      	beq.n	800ae2c <__gethex+0x2c8>
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d025      	beq.n	800ae34 <__gethex+0x2d0>
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d115      	bne.n	800ae18 <__gethex+0x2b4>
 800adec:	42b5      	cmp	r5, r6
 800adee:	d113      	bne.n	800ae18 <__gethex+0x2b4>
 800adf0:	2d01      	cmp	r5, #1
 800adf2:	d10b      	bne.n	800ae0c <__gethex+0x2a8>
 800adf4:	9a02      	ldr	r2, [sp, #8]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	2301      	movs	r3, #1
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	f8ca 3000 	str.w	r3, [sl]
 800ae02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae04:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ae08:	601c      	str	r4, [r3, #0]
 800ae0a:	e735      	b.n	800ac78 <__gethex+0x114>
 800ae0c:	1e69      	subs	r1, r5, #1
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 fe36 	bl	800ba80 <__any_on>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d1ed      	bne.n	800adf4 <__gethex+0x290>
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4648      	mov	r0, r9
 800ae1c:	f000 f9e4 	bl	800b1e8 <_Bfree>
 800ae20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae22:	2300      	movs	r3, #0
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae2a:	e725      	b.n	800ac78 <__gethex+0x114>
 800ae2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1f2      	bne.n	800ae18 <__gethex+0x2b4>
 800ae32:	e7df      	b.n	800adf4 <__gethex+0x290>
 800ae34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1dc      	bne.n	800adf4 <__gethex+0x290>
 800ae3a:	e7ed      	b.n	800ae18 <__gethex+0x2b4>
 800ae3c:	0800f470 	.word	0x0800f470
 800ae40:	0800f71c 	.word	0x0800f71c
 800ae44:	0800f72d 	.word	0x0800f72d
 800ae48:	f106 38ff 	add.w	r8, r6, #4294967295
 800ae4c:	f1bb 0f00 	cmp.w	fp, #0
 800ae50:	d133      	bne.n	800aeba <__gethex+0x356>
 800ae52:	f1b8 0f00 	cmp.w	r8, #0
 800ae56:	d004      	beq.n	800ae62 <__gethex+0x2fe>
 800ae58:	4641      	mov	r1, r8
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fe10 	bl	800ba80 <__any_on>
 800ae60:	4683      	mov	fp, r0
 800ae62:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ae66:	2301      	movs	r3, #1
 800ae68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ae6c:	f008 081f 	and.w	r8, r8, #31
 800ae70:	fa03 f308 	lsl.w	r3, r3, r8
 800ae74:	4213      	tst	r3, r2
 800ae76:	4631      	mov	r1, r6
 800ae78:	4620      	mov	r0, r4
 800ae7a:	bf18      	it	ne
 800ae7c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ae80:	1bad      	subs	r5, r5, r6
 800ae82:	f7ff fe07 	bl	800aa94 <rshift>
 800ae86:	687e      	ldr	r6, [r7, #4]
 800ae88:	f04f 0802 	mov.w	r8, #2
 800ae8c:	f1bb 0f00 	cmp.w	fp, #0
 800ae90:	d04a      	beq.n	800af28 <__gethex+0x3c4>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d016      	beq.n	800aec6 <__gethex+0x362>
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d018      	beq.n	800aece <__gethex+0x36a>
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d109      	bne.n	800aeb4 <__gethex+0x350>
 800aea0:	f01b 0f02 	tst.w	fp, #2
 800aea4:	d006      	beq.n	800aeb4 <__gethex+0x350>
 800aea6:	f8da 3000 	ldr.w	r3, [sl]
 800aeaa:	ea4b 0b03 	orr.w	fp, fp, r3
 800aeae:	f01b 0f01 	tst.w	fp, #1
 800aeb2:	d10f      	bne.n	800aed4 <__gethex+0x370>
 800aeb4:	f048 0810 	orr.w	r8, r8, #16
 800aeb8:	e036      	b.n	800af28 <__gethex+0x3c4>
 800aeba:	f04f 0b01 	mov.w	fp, #1
 800aebe:	e7d0      	b.n	800ae62 <__gethex+0x2fe>
 800aec0:	f04f 0801 	mov.w	r8, #1
 800aec4:	e7e2      	b.n	800ae8c <__gethex+0x328>
 800aec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aec8:	f1c3 0301 	rsb	r3, r3, #1
 800aecc:	930f      	str	r3, [sp, #60]	; 0x3c
 800aece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0ef      	beq.n	800aeb4 <__gethex+0x350>
 800aed4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aed8:	f104 0214 	add.w	r2, r4, #20
 800aedc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800aee6:	2300      	movs	r3, #0
 800aee8:	4694      	mov	ip, r2
 800aeea:	f852 1b04 	ldr.w	r1, [r2], #4
 800aeee:	f1b1 3fff 	cmp.w	r1, #4294967295
 800aef2:	d01e      	beq.n	800af32 <__gethex+0x3ce>
 800aef4:	3101      	adds	r1, #1
 800aef6:	f8cc 1000 	str.w	r1, [ip]
 800aefa:	f1b8 0f02 	cmp.w	r8, #2
 800aefe:	f104 0214 	add.w	r2, r4, #20
 800af02:	d13d      	bne.n	800af80 <__gethex+0x41c>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	3b01      	subs	r3, #1
 800af08:	42ab      	cmp	r3, r5
 800af0a:	d10b      	bne.n	800af24 <__gethex+0x3c0>
 800af0c:	1169      	asrs	r1, r5, #5
 800af0e:	2301      	movs	r3, #1
 800af10:	f005 051f 	and.w	r5, r5, #31
 800af14:	fa03 f505 	lsl.w	r5, r3, r5
 800af18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af1c:	421d      	tst	r5, r3
 800af1e:	bf18      	it	ne
 800af20:	f04f 0801 	movne.w	r8, #1
 800af24:	f048 0820 	orr.w	r8, r8, #32
 800af28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af2a:	601c      	str	r4, [r3, #0]
 800af2c:	9b02      	ldr	r3, [sp, #8]
 800af2e:	601e      	str	r6, [r3, #0]
 800af30:	e6a2      	b.n	800ac78 <__gethex+0x114>
 800af32:	4290      	cmp	r0, r2
 800af34:	f842 3c04 	str.w	r3, [r2, #-4]
 800af38:	d8d6      	bhi.n	800aee8 <__gethex+0x384>
 800af3a:	68a2      	ldr	r2, [r4, #8]
 800af3c:	4593      	cmp	fp, r2
 800af3e:	db17      	blt.n	800af70 <__gethex+0x40c>
 800af40:	6861      	ldr	r1, [r4, #4]
 800af42:	4648      	mov	r0, r9
 800af44:	3101      	adds	r1, #1
 800af46:	f000 f90f 	bl	800b168 <_Balloc>
 800af4a:	4682      	mov	sl, r0
 800af4c:	b918      	cbnz	r0, 800af56 <__gethex+0x3f2>
 800af4e:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <__gethex+0x458>)
 800af50:	4602      	mov	r2, r0
 800af52:	2184      	movs	r1, #132	; 0x84
 800af54:	e6b3      	b.n	800acbe <__gethex+0x15a>
 800af56:	6922      	ldr	r2, [r4, #16]
 800af58:	3202      	adds	r2, #2
 800af5a:	f104 010c 	add.w	r1, r4, #12
 800af5e:	0092      	lsls	r2, r2, #2
 800af60:	300c      	adds	r0, #12
 800af62:	f7fe fe96 	bl	8009c92 <memcpy>
 800af66:	4621      	mov	r1, r4
 800af68:	4648      	mov	r0, r9
 800af6a:	f000 f93d 	bl	800b1e8 <_Bfree>
 800af6e:	4654      	mov	r4, sl
 800af70:	6922      	ldr	r2, [r4, #16]
 800af72:	1c51      	adds	r1, r2, #1
 800af74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af78:	6121      	str	r1, [r4, #16]
 800af7a:	2101      	movs	r1, #1
 800af7c:	6151      	str	r1, [r2, #20]
 800af7e:	e7bc      	b.n	800aefa <__gethex+0x396>
 800af80:	6921      	ldr	r1, [r4, #16]
 800af82:	4559      	cmp	r1, fp
 800af84:	dd0b      	ble.n	800af9e <__gethex+0x43a>
 800af86:	2101      	movs	r1, #1
 800af88:	4620      	mov	r0, r4
 800af8a:	f7ff fd83 	bl	800aa94 <rshift>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	3601      	adds	r6, #1
 800af92:	42b3      	cmp	r3, r6
 800af94:	f6ff aedb 	blt.w	800ad4e <__gethex+0x1ea>
 800af98:	f04f 0801 	mov.w	r8, #1
 800af9c:	e7c2      	b.n	800af24 <__gethex+0x3c0>
 800af9e:	f015 051f 	ands.w	r5, r5, #31
 800afa2:	d0f9      	beq.n	800af98 <__gethex+0x434>
 800afa4:	9b01      	ldr	r3, [sp, #4]
 800afa6:	441a      	add	r2, r3
 800afa8:	f1c5 0520 	rsb	r5, r5, #32
 800afac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800afb0:	f000 f9cc 	bl	800b34c <__hi0bits>
 800afb4:	42a8      	cmp	r0, r5
 800afb6:	dbe6      	blt.n	800af86 <__gethex+0x422>
 800afb8:	e7ee      	b.n	800af98 <__gethex+0x434>
 800afba:	bf00      	nop
 800afbc:	0800f71c 	.word	0x0800f71c

0800afc0 <L_shift>:
 800afc0:	f1c2 0208 	rsb	r2, r2, #8
 800afc4:	0092      	lsls	r2, r2, #2
 800afc6:	b570      	push	{r4, r5, r6, lr}
 800afc8:	f1c2 0620 	rsb	r6, r2, #32
 800afcc:	6843      	ldr	r3, [r0, #4]
 800afce:	6804      	ldr	r4, [r0, #0]
 800afd0:	fa03 f506 	lsl.w	r5, r3, r6
 800afd4:	432c      	orrs	r4, r5
 800afd6:	40d3      	lsrs	r3, r2
 800afd8:	6004      	str	r4, [r0, #0]
 800afda:	f840 3f04 	str.w	r3, [r0, #4]!
 800afde:	4288      	cmp	r0, r1
 800afe0:	d3f4      	bcc.n	800afcc <L_shift+0xc>
 800afe2:	bd70      	pop	{r4, r5, r6, pc}

0800afe4 <__match>:
 800afe4:	b530      	push	{r4, r5, lr}
 800afe6:	6803      	ldr	r3, [r0, #0]
 800afe8:	3301      	adds	r3, #1
 800afea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afee:	b914      	cbnz	r4, 800aff6 <__match+0x12>
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	2001      	movs	r0, #1
 800aff4:	bd30      	pop	{r4, r5, pc}
 800aff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800affe:	2d19      	cmp	r5, #25
 800b000:	bf98      	it	ls
 800b002:	3220      	addls	r2, #32
 800b004:	42a2      	cmp	r2, r4
 800b006:	d0f0      	beq.n	800afea <__match+0x6>
 800b008:	2000      	movs	r0, #0
 800b00a:	e7f3      	b.n	800aff4 <__match+0x10>

0800b00c <__hexnan>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	680b      	ldr	r3, [r1, #0]
 800b012:	6801      	ldr	r1, [r0, #0]
 800b014:	115e      	asrs	r6, r3, #5
 800b016:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b01a:	f013 031f 	ands.w	r3, r3, #31
 800b01e:	b087      	sub	sp, #28
 800b020:	bf18      	it	ne
 800b022:	3604      	addne	r6, #4
 800b024:	2500      	movs	r5, #0
 800b026:	1f37      	subs	r7, r6, #4
 800b028:	4682      	mov	sl, r0
 800b02a:	4690      	mov	r8, r2
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b032:	46b9      	mov	r9, r7
 800b034:	463c      	mov	r4, r7
 800b036:	9502      	str	r5, [sp, #8]
 800b038:	46ab      	mov	fp, r5
 800b03a:	784a      	ldrb	r2, [r1, #1]
 800b03c:	1c4b      	adds	r3, r1, #1
 800b03e:	9303      	str	r3, [sp, #12]
 800b040:	b342      	cbz	r2, 800b094 <__hexnan+0x88>
 800b042:	4610      	mov	r0, r2
 800b044:	9105      	str	r1, [sp, #20]
 800b046:	9204      	str	r2, [sp, #16]
 800b048:	f7ff fd76 	bl	800ab38 <__hexdig_fun>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d14f      	bne.n	800b0f0 <__hexnan+0xe4>
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	9905      	ldr	r1, [sp, #20]
 800b054:	2a20      	cmp	r2, #32
 800b056:	d818      	bhi.n	800b08a <__hexnan+0x7e>
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	459b      	cmp	fp, r3
 800b05c:	dd13      	ble.n	800b086 <__hexnan+0x7a>
 800b05e:	454c      	cmp	r4, r9
 800b060:	d206      	bcs.n	800b070 <__hexnan+0x64>
 800b062:	2d07      	cmp	r5, #7
 800b064:	dc04      	bgt.n	800b070 <__hexnan+0x64>
 800b066:	462a      	mov	r2, r5
 800b068:	4649      	mov	r1, r9
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7ff ffa8 	bl	800afc0 <L_shift>
 800b070:	4544      	cmp	r4, r8
 800b072:	d950      	bls.n	800b116 <__hexnan+0x10a>
 800b074:	2300      	movs	r3, #0
 800b076:	f1a4 0904 	sub.w	r9, r4, #4
 800b07a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b07e:	f8cd b008 	str.w	fp, [sp, #8]
 800b082:	464c      	mov	r4, r9
 800b084:	461d      	mov	r5, r3
 800b086:	9903      	ldr	r1, [sp, #12]
 800b088:	e7d7      	b.n	800b03a <__hexnan+0x2e>
 800b08a:	2a29      	cmp	r2, #41	; 0x29
 800b08c:	d155      	bne.n	800b13a <__hexnan+0x12e>
 800b08e:	3102      	adds	r1, #2
 800b090:	f8ca 1000 	str.w	r1, [sl]
 800b094:	f1bb 0f00 	cmp.w	fp, #0
 800b098:	d04f      	beq.n	800b13a <__hexnan+0x12e>
 800b09a:	454c      	cmp	r4, r9
 800b09c:	d206      	bcs.n	800b0ac <__hexnan+0xa0>
 800b09e:	2d07      	cmp	r5, #7
 800b0a0:	dc04      	bgt.n	800b0ac <__hexnan+0xa0>
 800b0a2:	462a      	mov	r2, r5
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7ff ff8a 	bl	800afc0 <L_shift>
 800b0ac:	4544      	cmp	r4, r8
 800b0ae:	d934      	bls.n	800b11a <__hexnan+0x10e>
 800b0b0:	f1a8 0204 	sub.w	r2, r8, #4
 800b0b4:	4623      	mov	r3, r4
 800b0b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b0be:	429f      	cmp	r7, r3
 800b0c0:	d2f9      	bcs.n	800b0b6 <__hexnan+0xaa>
 800b0c2:	1b3b      	subs	r3, r7, r4
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	3e03      	subs	r6, #3
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	42a6      	cmp	r6, r4
 800b0d0:	bf38      	it	cc
 800b0d2:	2304      	movcc	r3, #4
 800b0d4:	4443      	add	r3, r8
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f843 2b04 	str.w	r2, [r3], #4
 800b0dc:	429f      	cmp	r7, r3
 800b0de:	d2fb      	bcs.n	800b0d8 <__hexnan+0xcc>
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	b91b      	cbnz	r3, 800b0ec <__hexnan+0xe0>
 800b0e4:	4547      	cmp	r7, r8
 800b0e6:	d126      	bne.n	800b136 <__hexnan+0x12a>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	603b      	str	r3, [r7, #0]
 800b0ec:	2005      	movs	r0, #5
 800b0ee:	e025      	b.n	800b13c <__hexnan+0x130>
 800b0f0:	3501      	adds	r5, #1
 800b0f2:	2d08      	cmp	r5, #8
 800b0f4:	f10b 0b01 	add.w	fp, fp, #1
 800b0f8:	dd06      	ble.n	800b108 <__hexnan+0xfc>
 800b0fa:	4544      	cmp	r4, r8
 800b0fc:	d9c3      	bls.n	800b086 <__hexnan+0x7a>
 800b0fe:	2300      	movs	r3, #0
 800b100:	f844 3c04 	str.w	r3, [r4, #-4]
 800b104:	2501      	movs	r5, #1
 800b106:	3c04      	subs	r4, #4
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	f000 000f 	and.w	r0, r0, #15
 800b10e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b112:	6020      	str	r0, [r4, #0]
 800b114:	e7b7      	b.n	800b086 <__hexnan+0x7a>
 800b116:	2508      	movs	r5, #8
 800b118:	e7b5      	b.n	800b086 <__hexnan+0x7a>
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0df      	beq.n	800b0e0 <__hexnan+0xd4>
 800b120:	f1c3 0320 	rsb	r3, r3, #32
 800b124:	f04f 32ff 	mov.w	r2, #4294967295
 800b128:	40da      	lsrs	r2, r3
 800b12a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b12e:	4013      	ands	r3, r2
 800b130:	f846 3c04 	str.w	r3, [r6, #-4]
 800b134:	e7d4      	b.n	800b0e0 <__hexnan+0xd4>
 800b136:	3f04      	subs	r7, #4
 800b138:	e7d2      	b.n	800b0e0 <__hexnan+0xd4>
 800b13a:	2004      	movs	r0, #4
 800b13c:	b007      	add	sp, #28
 800b13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b142 <__ascii_mbtowc>:
 800b142:	b082      	sub	sp, #8
 800b144:	b901      	cbnz	r1, 800b148 <__ascii_mbtowc+0x6>
 800b146:	a901      	add	r1, sp, #4
 800b148:	b142      	cbz	r2, 800b15c <__ascii_mbtowc+0x1a>
 800b14a:	b14b      	cbz	r3, 800b160 <__ascii_mbtowc+0x1e>
 800b14c:	7813      	ldrb	r3, [r2, #0]
 800b14e:	600b      	str	r3, [r1, #0]
 800b150:	7812      	ldrb	r2, [r2, #0]
 800b152:	1e10      	subs	r0, r2, #0
 800b154:	bf18      	it	ne
 800b156:	2001      	movne	r0, #1
 800b158:	b002      	add	sp, #8
 800b15a:	4770      	bx	lr
 800b15c:	4610      	mov	r0, r2
 800b15e:	e7fb      	b.n	800b158 <__ascii_mbtowc+0x16>
 800b160:	f06f 0001 	mvn.w	r0, #1
 800b164:	e7f8      	b.n	800b158 <__ascii_mbtowc+0x16>
	...

0800b168 <_Balloc>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	69c6      	ldr	r6, [r0, #28]
 800b16c:	4604      	mov	r4, r0
 800b16e:	460d      	mov	r5, r1
 800b170:	b976      	cbnz	r6, 800b190 <_Balloc+0x28>
 800b172:	2010      	movs	r0, #16
 800b174:	f7fc fce0 	bl	8007b38 <malloc>
 800b178:	4602      	mov	r2, r0
 800b17a:	61e0      	str	r0, [r4, #28]
 800b17c:	b920      	cbnz	r0, 800b188 <_Balloc+0x20>
 800b17e:	4b18      	ldr	r3, [pc, #96]	; (800b1e0 <_Balloc+0x78>)
 800b180:	4818      	ldr	r0, [pc, #96]	; (800b1e4 <_Balloc+0x7c>)
 800b182:	216b      	movs	r1, #107	; 0x6b
 800b184:	f7fe fda2 	bl	8009ccc <__assert_func>
 800b188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b18c:	6006      	str	r6, [r0, #0]
 800b18e:	60c6      	str	r6, [r0, #12]
 800b190:	69e6      	ldr	r6, [r4, #28]
 800b192:	68f3      	ldr	r3, [r6, #12]
 800b194:	b183      	cbz	r3, 800b1b8 <_Balloc+0x50>
 800b196:	69e3      	ldr	r3, [r4, #28]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b19e:	b9b8      	cbnz	r0, 800b1d0 <_Balloc+0x68>
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b1a6:	1d72      	adds	r2, r6, #5
 800b1a8:	0092      	lsls	r2, r2, #2
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 fecf 	bl	800bf4e <_calloc_r>
 800b1b0:	b160      	cbz	r0, 800b1cc <_Balloc+0x64>
 800b1b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1b6:	e00e      	b.n	800b1d6 <_Balloc+0x6e>
 800b1b8:	2221      	movs	r2, #33	; 0x21
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 fec6 	bl	800bf4e <_calloc_r>
 800b1c2:	69e3      	ldr	r3, [r4, #28]
 800b1c4:	60f0      	str	r0, [r6, #12]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1e4      	bne.n	800b196 <_Balloc+0x2e>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	bd70      	pop	{r4, r5, r6, pc}
 800b1d0:	6802      	ldr	r2, [r0, #0]
 800b1d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1dc:	e7f7      	b.n	800b1ce <_Balloc+0x66>
 800b1de:	bf00      	nop
 800b1e0:	0800f602 	.word	0x0800f602
 800b1e4:	0800f78d 	.word	0x0800f78d

0800b1e8 <_Bfree>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	69c6      	ldr	r6, [r0, #28]
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	b976      	cbnz	r6, 800b210 <_Bfree+0x28>
 800b1f2:	2010      	movs	r0, #16
 800b1f4:	f7fc fca0 	bl	8007b38 <malloc>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	61e8      	str	r0, [r5, #28]
 800b1fc:	b920      	cbnz	r0, 800b208 <_Bfree+0x20>
 800b1fe:	4b09      	ldr	r3, [pc, #36]	; (800b224 <_Bfree+0x3c>)
 800b200:	4809      	ldr	r0, [pc, #36]	; (800b228 <_Bfree+0x40>)
 800b202:	218f      	movs	r1, #143	; 0x8f
 800b204:	f7fe fd62 	bl	8009ccc <__assert_func>
 800b208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b20c:	6006      	str	r6, [r0, #0]
 800b20e:	60c6      	str	r6, [r0, #12]
 800b210:	b13c      	cbz	r4, 800b222 <_Bfree+0x3a>
 800b212:	69eb      	ldr	r3, [r5, #28]
 800b214:	6862      	ldr	r2, [r4, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b21c:	6021      	str	r1, [r4, #0]
 800b21e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	0800f602 	.word	0x0800f602
 800b228:	0800f78d 	.word	0x0800f78d

0800b22c <__multadd>:
 800b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b230:	690d      	ldr	r5, [r1, #16]
 800b232:	4607      	mov	r7, r0
 800b234:	460c      	mov	r4, r1
 800b236:	461e      	mov	r6, r3
 800b238:	f101 0c14 	add.w	ip, r1, #20
 800b23c:	2000      	movs	r0, #0
 800b23e:	f8dc 3000 	ldr.w	r3, [ip]
 800b242:	b299      	uxth	r1, r3
 800b244:	fb02 6101 	mla	r1, r2, r1, r6
 800b248:	0c1e      	lsrs	r6, r3, #16
 800b24a:	0c0b      	lsrs	r3, r1, #16
 800b24c:	fb02 3306 	mla	r3, r2, r6, r3
 800b250:	b289      	uxth	r1, r1
 800b252:	3001      	adds	r0, #1
 800b254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b258:	4285      	cmp	r5, r0
 800b25a:	f84c 1b04 	str.w	r1, [ip], #4
 800b25e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b262:	dcec      	bgt.n	800b23e <__multadd+0x12>
 800b264:	b30e      	cbz	r6, 800b2aa <__multadd+0x7e>
 800b266:	68a3      	ldr	r3, [r4, #8]
 800b268:	42ab      	cmp	r3, r5
 800b26a:	dc19      	bgt.n	800b2a0 <__multadd+0x74>
 800b26c:	6861      	ldr	r1, [r4, #4]
 800b26e:	4638      	mov	r0, r7
 800b270:	3101      	adds	r1, #1
 800b272:	f7ff ff79 	bl	800b168 <_Balloc>
 800b276:	4680      	mov	r8, r0
 800b278:	b928      	cbnz	r0, 800b286 <__multadd+0x5a>
 800b27a:	4602      	mov	r2, r0
 800b27c:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <__multadd+0x84>)
 800b27e:	480d      	ldr	r0, [pc, #52]	; (800b2b4 <__multadd+0x88>)
 800b280:	21ba      	movs	r1, #186	; 0xba
 800b282:	f7fe fd23 	bl	8009ccc <__assert_func>
 800b286:	6922      	ldr	r2, [r4, #16]
 800b288:	3202      	adds	r2, #2
 800b28a:	f104 010c 	add.w	r1, r4, #12
 800b28e:	0092      	lsls	r2, r2, #2
 800b290:	300c      	adds	r0, #12
 800b292:	f7fe fcfe 	bl	8009c92 <memcpy>
 800b296:	4621      	mov	r1, r4
 800b298:	4638      	mov	r0, r7
 800b29a:	f7ff ffa5 	bl	800b1e8 <_Bfree>
 800b29e:	4644      	mov	r4, r8
 800b2a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	615e      	str	r6, [r3, #20]
 800b2a8:	6125      	str	r5, [r4, #16]
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b0:	0800f71c 	.word	0x0800f71c
 800b2b4:	0800f78d 	.word	0x0800f78d

0800b2b8 <__s2b>:
 800b2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2bc:	460c      	mov	r4, r1
 800b2be:	4615      	mov	r5, r2
 800b2c0:	461f      	mov	r7, r3
 800b2c2:	2209      	movs	r2, #9
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	db09      	blt.n	800b2e8 <__s2b+0x30>
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f7ff ff47 	bl	800b168 <_Balloc>
 800b2da:	b940      	cbnz	r0, 800b2ee <__s2b+0x36>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	4b19      	ldr	r3, [pc, #100]	; (800b344 <__s2b+0x8c>)
 800b2e0:	4819      	ldr	r0, [pc, #100]	; (800b348 <__s2b+0x90>)
 800b2e2:	21d3      	movs	r1, #211	; 0xd3
 800b2e4:	f7fe fcf2 	bl	8009ccc <__assert_func>
 800b2e8:	0052      	lsls	r2, r2, #1
 800b2ea:	3101      	adds	r1, #1
 800b2ec:	e7f0      	b.n	800b2d0 <__s2b+0x18>
 800b2ee:	9b08      	ldr	r3, [sp, #32]
 800b2f0:	6143      	str	r3, [r0, #20]
 800b2f2:	2d09      	cmp	r5, #9
 800b2f4:	f04f 0301 	mov.w	r3, #1
 800b2f8:	6103      	str	r3, [r0, #16]
 800b2fa:	dd16      	ble.n	800b32a <__s2b+0x72>
 800b2fc:	f104 0909 	add.w	r9, r4, #9
 800b300:	46c8      	mov	r8, r9
 800b302:	442c      	add	r4, r5
 800b304:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b308:	4601      	mov	r1, r0
 800b30a:	3b30      	subs	r3, #48	; 0x30
 800b30c:	220a      	movs	r2, #10
 800b30e:	4630      	mov	r0, r6
 800b310:	f7ff ff8c 	bl	800b22c <__multadd>
 800b314:	45a0      	cmp	r8, r4
 800b316:	d1f5      	bne.n	800b304 <__s2b+0x4c>
 800b318:	f1a5 0408 	sub.w	r4, r5, #8
 800b31c:	444c      	add	r4, r9
 800b31e:	1b2d      	subs	r5, r5, r4
 800b320:	1963      	adds	r3, r4, r5
 800b322:	42bb      	cmp	r3, r7
 800b324:	db04      	blt.n	800b330 <__s2b+0x78>
 800b326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32a:	340a      	adds	r4, #10
 800b32c:	2509      	movs	r5, #9
 800b32e:	e7f6      	b.n	800b31e <__s2b+0x66>
 800b330:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b334:	4601      	mov	r1, r0
 800b336:	3b30      	subs	r3, #48	; 0x30
 800b338:	220a      	movs	r2, #10
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff ff76 	bl	800b22c <__multadd>
 800b340:	e7ee      	b.n	800b320 <__s2b+0x68>
 800b342:	bf00      	nop
 800b344:	0800f71c 	.word	0x0800f71c
 800b348:	0800f78d 	.word	0x0800f78d

0800b34c <__hi0bits>:
 800b34c:	0c03      	lsrs	r3, r0, #16
 800b34e:	041b      	lsls	r3, r3, #16
 800b350:	b9d3      	cbnz	r3, 800b388 <__hi0bits+0x3c>
 800b352:	0400      	lsls	r0, r0, #16
 800b354:	2310      	movs	r3, #16
 800b356:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b35a:	bf04      	itt	eq
 800b35c:	0200      	lsleq	r0, r0, #8
 800b35e:	3308      	addeq	r3, #8
 800b360:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b364:	bf04      	itt	eq
 800b366:	0100      	lsleq	r0, r0, #4
 800b368:	3304      	addeq	r3, #4
 800b36a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b36e:	bf04      	itt	eq
 800b370:	0080      	lsleq	r0, r0, #2
 800b372:	3302      	addeq	r3, #2
 800b374:	2800      	cmp	r0, #0
 800b376:	db05      	blt.n	800b384 <__hi0bits+0x38>
 800b378:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b37c:	f103 0301 	add.w	r3, r3, #1
 800b380:	bf08      	it	eq
 800b382:	2320      	moveq	r3, #32
 800b384:	4618      	mov	r0, r3
 800b386:	4770      	bx	lr
 800b388:	2300      	movs	r3, #0
 800b38a:	e7e4      	b.n	800b356 <__hi0bits+0xa>

0800b38c <__lo0bits>:
 800b38c:	6803      	ldr	r3, [r0, #0]
 800b38e:	f013 0207 	ands.w	r2, r3, #7
 800b392:	d00c      	beq.n	800b3ae <__lo0bits+0x22>
 800b394:	07d9      	lsls	r1, r3, #31
 800b396:	d422      	bmi.n	800b3de <__lo0bits+0x52>
 800b398:	079a      	lsls	r2, r3, #30
 800b39a:	bf49      	itett	mi
 800b39c:	085b      	lsrmi	r3, r3, #1
 800b39e:	089b      	lsrpl	r3, r3, #2
 800b3a0:	6003      	strmi	r3, [r0, #0]
 800b3a2:	2201      	movmi	r2, #1
 800b3a4:	bf5c      	itt	pl
 800b3a6:	6003      	strpl	r3, [r0, #0]
 800b3a8:	2202      	movpl	r2, #2
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4770      	bx	lr
 800b3ae:	b299      	uxth	r1, r3
 800b3b0:	b909      	cbnz	r1, 800b3b6 <__lo0bits+0x2a>
 800b3b2:	0c1b      	lsrs	r3, r3, #16
 800b3b4:	2210      	movs	r2, #16
 800b3b6:	b2d9      	uxtb	r1, r3
 800b3b8:	b909      	cbnz	r1, 800b3be <__lo0bits+0x32>
 800b3ba:	3208      	adds	r2, #8
 800b3bc:	0a1b      	lsrs	r3, r3, #8
 800b3be:	0719      	lsls	r1, r3, #28
 800b3c0:	bf04      	itt	eq
 800b3c2:	091b      	lsreq	r3, r3, #4
 800b3c4:	3204      	addeq	r2, #4
 800b3c6:	0799      	lsls	r1, r3, #30
 800b3c8:	bf04      	itt	eq
 800b3ca:	089b      	lsreq	r3, r3, #2
 800b3cc:	3202      	addeq	r2, #2
 800b3ce:	07d9      	lsls	r1, r3, #31
 800b3d0:	d403      	bmi.n	800b3da <__lo0bits+0x4e>
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	f102 0201 	add.w	r2, r2, #1
 800b3d8:	d003      	beq.n	800b3e2 <__lo0bits+0x56>
 800b3da:	6003      	str	r3, [r0, #0]
 800b3dc:	e7e5      	b.n	800b3aa <__lo0bits+0x1e>
 800b3de:	2200      	movs	r2, #0
 800b3e0:	e7e3      	b.n	800b3aa <__lo0bits+0x1e>
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	e7e1      	b.n	800b3aa <__lo0bits+0x1e>
	...

0800b3e8 <__i2b>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	f7ff febb 	bl	800b168 <_Balloc>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	b928      	cbnz	r0, 800b402 <__i2b+0x1a>
 800b3f6:	4b05      	ldr	r3, [pc, #20]	; (800b40c <__i2b+0x24>)
 800b3f8:	4805      	ldr	r0, [pc, #20]	; (800b410 <__i2b+0x28>)
 800b3fa:	f240 1145 	movw	r1, #325	; 0x145
 800b3fe:	f7fe fc65 	bl	8009ccc <__assert_func>
 800b402:	2301      	movs	r3, #1
 800b404:	6144      	str	r4, [r0, #20]
 800b406:	6103      	str	r3, [r0, #16]
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	bf00      	nop
 800b40c:	0800f71c 	.word	0x0800f71c
 800b410:	0800f78d 	.word	0x0800f78d

0800b414 <__multiply>:
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	4691      	mov	r9, r2
 800b41a:	690a      	ldr	r2, [r1, #16]
 800b41c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b420:	429a      	cmp	r2, r3
 800b422:	bfb8      	it	lt
 800b424:	460b      	movlt	r3, r1
 800b426:	460c      	mov	r4, r1
 800b428:	bfbc      	itt	lt
 800b42a:	464c      	movlt	r4, r9
 800b42c:	4699      	movlt	r9, r3
 800b42e:	6927      	ldr	r7, [r4, #16]
 800b430:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b434:	68a3      	ldr	r3, [r4, #8]
 800b436:	6861      	ldr	r1, [r4, #4]
 800b438:	eb07 060a 	add.w	r6, r7, sl
 800b43c:	42b3      	cmp	r3, r6
 800b43e:	b085      	sub	sp, #20
 800b440:	bfb8      	it	lt
 800b442:	3101      	addlt	r1, #1
 800b444:	f7ff fe90 	bl	800b168 <_Balloc>
 800b448:	b930      	cbnz	r0, 800b458 <__multiply+0x44>
 800b44a:	4602      	mov	r2, r0
 800b44c:	4b44      	ldr	r3, [pc, #272]	; (800b560 <__multiply+0x14c>)
 800b44e:	4845      	ldr	r0, [pc, #276]	; (800b564 <__multiply+0x150>)
 800b450:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b454:	f7fe fc3a 	bl	8009ccc <__assert_func>
 800b458:	f100 0514 	add.w	r5, r0, #20
 800b45c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b460:	462b      	mov	r3, r5
 800b462:	2200      	movs	r2, #0
 800b464:	4543      	cmp	r3, r8
 800b466:	d321      	bcc.n	800b4ac <__multiply+0x98>
 800b468:	f104 0314 	add.w	r3, r4, #20
 800b46c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b470:	f109 0314 	add.w	r3, r9, #20
 800b474:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b478:	9202      	str	r2, [sp, #8]
 800b47a:	1b3a      	subs	r2, r7, r4
 800b47c:	3a15      	subs	r2, #21
 800b47e:	f022 0203 	bic.w	r2, r2, #3
 800b482:	3204      	adds	r2, #4
 800b484:	f104 0115 	add.w	r1, r4, #21
 800b488:	428f      	cmp	r7, r1
 800b48a:	bf38      	it	cc
 800b48c:	2204      	movcc	r2, #4
 800b48e:	9201      	str	r2, [sp, #4]
 800b490:	9a02      	ldr	r2, [sp, #8]
 800b492:	9303      	str	r3, [sp, #12]
 800b494:	429a      	cmp	r2, r3
 800b496:	d80c      	bhi.n	800b4b2 <__multiply+0x9e>
 800b498:	2e00      	cmp	r6, #0
 800b49a:	dd03      	ble.n	800b4a4 <__multiply+0x90>
 800b49c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d05b      	beq.n	800b55c <__multiply+0x148>
 800b4a4:	6106      	str	r6, [r0, #16]
 800b4a6:	b005      	add	sp, #20
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ac:	f843 2b04 	str.w	r2, [r3], #4
 800b4b0:	e7d8      	b.n	800b464 <__multiply+0x50>
 800b4b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4b6:	f1ba 0f00 	cmp.w	sl, #0
 800b4ba:	d024      	beq.n	800b506 <__multiply+0xf2>
 800b4bc:	f104 0e14 	add.w	lr, r4, #20
 800b4c0:	46a9      	mov	r9, r5
 800b4c2:	f04f 0c00 	mov.w	ip, #0
 800b4c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4ca:	f8d9 1000 	ldr.w	r1, [r9]
 800b4ce:	fa1f fb82 	uxth.w	fp, r2
 800b4d2:	b289      	uxth	r1, r1
 800b4d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4dc:	f8d9 2000 	ldr.w	r2, [r9]
 800b4e0:	4461      	add	r1, ip
 800b4e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4ee:	b289      	uxth	r1, r1
 800b4f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4f4:	4577      	cmp	r7, lr
 800b4f6:	f849 1b04 	str.w	r1, [r9], #4
 800b4fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4fe:	d8e2      	bhi.n	800b4c6 <__multiply+0xb2>
 800b500:	9a01      	ldr	r2, [sp, #4]
 800b502:	f845 c002 	str.w	ip, [r5, r2]
 800b506:	9a03      	ldr	r2, [sp, #12]
 800b508:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b50c:	3304      	adds	r3, #4
 800b50e:	f1b9 0f00 	cmp.w	r9, #0
 800b512:	d021      	beq.n	800b558 <__multiply+0x144>
 800b514:	6829      	ldr	r1, [r5, #0]
 800b516:	f104 0c14 	add.w	ip, r4, #20
 800b51a:	46ae      	mov	lr, r5
 800b51c:	f04f 0a00 	mov.w	sl, #0
 800b520:	f8bc b000 	ldrh.w	fp, [ip]
 800b524:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b528:	fb09 220b 	mla	r2, r9, fp, r2
 800b52c:	4452      	add	r2, sl
 800b52e:	b289      	uxth	r1, r1
 800b530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b534:	f84e 1b04 	str.w	r1, [lr], #4
 800b538:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b53c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b540:	f8be 1000 	ldrh.w	r1, [lr]
 800b544:	fb09 110a 	mla	r1, r9, sl, r1
 800b548:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b54c:	4567      	cmp	r7, ip
 800b54e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b552:	d8e5      	bhi.n	800b520 <__multiply+0x10c>
 800b554:	9a01      	ldr	r2, [sp, #4]
 800b556:	50a9      	str	r1, [r5, r2]
 800b558:	3504      	adds	r5, #4
 800b55a:	e799      	b.n	800b490 <__multiply+0x7c>
 800b55c:	3e01      	subs	r6, #1
 800b55e:	e79b      	b.n	800b498 <__multiply+0x84>
 800b560:	0800f71c 	.word	0x0800f71c
 800b564:	0800f78d 	.word	0x0800f78d

0800b568 <__pow5mult>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	4615      	mov	r5, r2
 800b56e:	f012 0203 	ands.w	r2, r2, #3
 800b572:	4606      	mov	r6, r0
 800b574:	460f      	mov	r7, r1
 800b576:	d007      	beq.n	800b588 <__pow5mult+0x20>
 800b578:	4c25      	ldr	r4, [pc, #148]	; (800b610 <__pow5mult+0xa8>)
 800b57a:	3a01      	subs	r2, #1
 800b57c:	2300      	movs	r3, #0
 800b57e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b582:	f7ff fe53 	bl	800b22c <__multadd>
 800b586:	4607      	mov	r7, r0
 800b588:	10ad      	asrs	r5, r5, #2
 800b58a:	d03d      	beq.n	800b608 <__pow5mult+0xa0>
 800b58c:	69f4      	ldr	r4, [r6, #28]
 800b58e:	b97c      	cbnz	r4, 800b5b0 <__pow5mult+0x48>
 800b590:	2010      	movs	r0, #16
 800b592:	f7fc fad1 	bl	8007b38 <malloc>
 800b596:	4602      	mov	r2, r0
 800b598:	61f0      	str	r0, [r6, #28]
 800b59a:	b928      	cbnz	r0, 800b5a8 <__pow5mult+0x40>
 800b59c:	4b1d      	ldr	r3, [pc, #116]	; (800b614 <__pow5mult+0xac>)
 800b59e:	481e      	ldr	r0, [pc, #120]	; (800b618 <__pow5mult+0xb0>)
 800b5a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b5a4:	f7fe fb92 	bl	8009ccc <__assert_func>
 800b5a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5ac:	6004      	str	r4, [r0, #0]
 800b5ae:	60c4      	str	r4, [r0, #12]
 800b5b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b5b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5b8:	b94c      	cbnz	r4, 800b5ce <__pow5mult+0x66>
 800b5ba:	f240 2171 	movw	r1, #625	; 0x271
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f7ff ff12 	bl	800b3e8 <__i2b>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	6003      	str	r3, [r0, #0]
 800b5ce:	f04f 0900 	mov.w	r9, #0
 800b5d2:	07eb      	lsls	r3, r5, #31
 800b5d4:	d50a      	bpl.n	800b5ec <__pow5mult+0x84>
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7ff ff1a 	bl	800b414 <__multiply>
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f7ff fdff 	bl	800b1e8 <_Bfree>
 800b5ea:	4647      	mov	r7, r8
 800b5ec:	106d      	asrs	r5, r5, #1
 800b5ee:	d00b      	beq.n	800b608 <__pow5mult+0xa0>
 800b5f0:	6820      	ldr	r0, [r4, #0]
 800b5f2:	b938      	cbnz	r0, 800b604 <__pow5mult+0x9c>
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f7ff ff0b 	bl	800b414 <__multiply>
 800b5fe:	6020      	str	r0, [r4, #0]
 800b600:	f8c0 9000 	str.w	r9, [r0]
 800b604:	4604      	mov	r4, r0
 800b606:	e7e4      	b.n	800b5d2 <__pow5mult+0x6a>
 800b608:	4638      	mov	r0, r7
 800b60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60e:	bf00      	nop
 800b610:	0800f8d8 	.word	0x0800f8d8
 800b614:	0800f602 	.word	0x0800f602
 800b618:	0800f78d 	.word	0x0800f78d

0800b61c <__lshift>:
 800b61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	460c      	mov	r4, r1
 800b622:	6849      	ldr	r1, [r1, #4]
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b62a:	68a3      	ldr	r3, [r4, #8]
 800b62c:	4607      	mov	r7, r0
 800b62e:	4691      	mov	r9, r2
 800b630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b634:	f108 0601 	add.w	r6, r8, #1
 800b638:	42b3      	cmp	r3, r6
 800b63a:	db0b      	blt.n	800b654 <__lshift+0x38>
 800b63c:	4638      	mov	r0, r7
 800b63e:	f7ff fd93 	bl	800b168 <_Balloc>
 800b642:	4605      	mov	r5, r0
 800b644:	b948      	cbnz	r0, 800b65a <__lshift+0x3e>
 800b646:	4602      	mov	r2, r0
 800b648:	4b28      	ldr	r3, [pc, #160]	; (800b6ec <__lshift+0xd0>)
 800b64a:	4829      	ldr	r0, [pc, #164]	; (800b6f0 <__lshift+0xd4>)
 800b64c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b650:	f7fe fb3c 	bl	8009ccc <__assert_func>
 800b654:	3101      	adds	r1, #1
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	e7ee      	b.n	800b638 <__lshift+0x1c>
 800b65a:	2300      	movs	r3, #0
 800b65c:	f100 0114 	add.w	r1, r0, #20
 800b660:	f100 0210 	add.w	r2, r0, #16
 800b664:	4618      	mov	r0, r3
 800b666:	4553      	cmp	r3, sl
 800b668:	db33      	blt.n	800b6d2 <__lshift+0xb6>
 800b66a:	6920      	ldr	r0, [r4, #16]
 800b66c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b670:	f104 0314 	add.w	r3, r4, #20
 800b674:	f019 091f 	ands.w	r9, r9, #31
 800b678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b67c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b680:	d02b      	beq.n	800b6da <__lshift+0xbe>
 800b682:	f1c9 0e20 	rsb	lr, r9, #32
 800b686:	468a      	mov	sl, r1
 800b688:	2200      	movs	r2, #0
 800b68a:	6818      	ldr	r0, [r3, #0]
 800b68c:	fa00 f009 	lsl.w	r0, r0, r9
 800b690:	4310      	orrs	r0, r2
 800b692:	f84a 0b04 	str.w	r0, [sl], #4
 800b696:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69a:	459c      	cmp	ip, r3
 800b69c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6a0:	d8f3      	bhi.n	800b68a <__lshift+0x6e>
 800b6a2:	ebac 0304 	sub.w	r3, ip, r4
 800b6a6:	3b15      	subs	r3, #21
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	f104 0015 	add.w	r0, r4, #21
 800b6b2:	4584      	cmp	ip, r0
 800b6b4:	bf38      	it	cc
 800b6b6:	2304      	movcc	r3, #4
 800b6b8:	50ca      	str	r2, [r1, r3]
 800b6ba:	b10a      	cbz	r2, 800b6c0 <__lshift+0xa4>
 800b6bc:	f108 0602 	add.w	r6, r8, #2
 800b6c0:	3e01      	subs	r6, #1
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	612e      	str	r6, [r5, #16]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	f7ff fd8e 	bl	800b1e8 <_Bfree>
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	e7c5      	b.n	800b666 <__lshift+0x4a>
 800b6da:	3904      	subs	r1, #4
 800b6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6e4:	459c      	cmp	ip, r3
 800b6e6:	d8f9      	bhi.n	800b6dc <__lshift+0xc0>
 800b6e8:	e7ea      	b.n	800b6c0 <__lshift+0xa4>
 800b6ea:	bf00      	nop
 800b6ec:	0800f71c 	.word	0x0800f71c
 800b6f0:	0800f78d 	.word	0x0800f78d

0800b6f4 <__mcmp>:
 800b6f4:	b530      	push	{r4, r5, lr}
 800b6f6:	6902      	ldr	r2, [r0, #16]
 800b6f8:	690c      	ldr	r4, [r1, #16]
 800b6fa:	1b12      	subs	r2, r2, r4
 800b6fc:	d10e      	bne.n	800b71c <__mcmp+0x28>
 800b6fe:	f100 0314 	add.w	r3, r0, #20
 800b702:	3114      	adds	r1, #20
 800b704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b70c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b714:	42a5      	cmp	r5, r4
 800b716:	d003      	beq.n	800b720 <__mcmp+0x2c>
 800b718:	d305      	bcc.n	800b726 <__mcmp+0x32>
 800b71a:	2201      	movs	r2, #1
 800b71c:	4610      	mov	r0, r2
 800b71e:	bd30      	pop	{r4, r5, pc}
 800b720:	4283      	cmp	r3, r0
 800b722:	d3f3      	bcc.n	800b70c <__mcmp+0x18>
 800b724:	e7fa      	b.n	800b71c <__mcmp+0x28>
 800b726:	f04f 32ff 	mov.w	r2, #4294967295
 800b72a:	e7f7      	b.n	800b71c <__mcmp+0x28>

0800b72c <__mdiff>:
 800b72c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	460c      	mov	r4, r1
 800b732:	4606      	mov	r6, r0
 800b734:	4611      	mov	r1, r2
 800b736:	4620      	mov	r0, r4
 800b738:	4690      	mov	r8, r2
 800b73a:	f7ff ffdb 	bl	800b6f4 <__mcmp>
 800b73e:	1e05      	subs	r5, r0, #0
 800b740:	d110      	bne.n	800b764 <__mdiff+0x38>
 800b742:	4629      	mov	r1, r5
 800b744:	4630      	mov	r0, r6
 800b746:	f7ff fd0f 	bl	800b168 <_Balloc>
 800b74a:	b930      	cbnz	r0, 800b75a <__mdiff+0x2e>
 800b74c:	4b3a      	ldr	r3, [pc, #232]	; (800b838 <__mdiff+0x10c>)
 800b74e:	4602      	mov	r2, r0
 800b750:	f240 2137 	movw	r1, #567	; 0x237
 800b754:	4839      	ldr	r0, [pc, #228]	; (800b83c <__mdiff+0x110>)
 800b756:	f7fe fab9 	bl	8009ccc <__assert_func>
 800b75a:	2301      	movs	r3, #1
 800b75c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b764:	bfa4      	itt	ge
 800b766:	4643      	movge	r3, r8
 800b768:	46a0      	movge	r8, r4
 800b76a:	4630      	mov	r0, r6
 800b76c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b770:	bfa6      	itte	ge
 800b772:	461c      	movge	r4, r3
 800b774:	2500      	movge	r5, #0
 800b776:	2501      	movlt	r5, #1
 800b778:	f7ff fcf6 	bl	800b168 <_Balloc>
 800b77c:	b920      	cbnz	r0, 800b788 <__mdiff+0x5c>
 800b77e:	4b2e      	ldr	r3, [pc, #184]	; (800b838 <__mdiff+0x10c>)
 800b780:	4602      	mov	r2, r0
 800b782:	f240 2145 	movw	r1, #581	; 0x245
 800b786:	e7e5      	b.n	800b754 <__mdiff+0x28>
 800b788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b78c:	6926      	ldr	r6, [r4, #16]
 800b78e:	60c5      	str	r5, [r0, #12]
 800b790:	f104 0914 	add.w	r9, r4, #20
 800b794:	f108 0514 	add.w	r5, r8, #20
 800b798:	f100 0e14 	add.w	lr, r0, #20
 800b79c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7a4:	f108 0210 	add.w	r2, r8, #16
 800b7a8:	46f2      	mov	sl, lr
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7b4:	fa11 f88b 	uxtah	r8, r1, fp
 800b7b8:	b299      	uxth	r1, r3
 800b7ba:	0c1b      	lsrs	r3, r3, #16
 800b7bc:	eba8 0801 	sub.w	r8, r8, r1
 800b7c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7c8:	fa1f f888 	uxth.w	r8, r8
 800b7cc:	1419      	asrs	r1, r3, #16
 800b7ce:	454e      	cmp	r6, r9
 800b7d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7d4:	f84a 3b04 	str.w	r3, [sl], #4
 800b7d8:	d8e8      	bhi.n	800b7ac <__mdiff+0x80>
 800b7da:	1b33      	subs	r3, r6, r4
 800b7dc:	3b15      	subs	r3, #21
 800b7de:	f023 0303 	bic.w	r3, r3, #3
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	3415      	adds	r4, #21
 800b7e6:	42a6      	cmp	r6, r4
 800b7e8:	bf38      	it	cc
 800b7ea:	2304      	movcc	r3, #4
 800b7ec:	441d      	add	r5, r3
 800b7ee:	4473      	add	r3, lr
 800b7f0:	469e      	mov	lr, r3
 800b7f2:	462e      	mov	r6, r5
 800b7f4:	4566      	cmp	r6, ip
 800b7f6:	d30e      	bcc.n	800b816 <__mdiff+0xea>
 800b7f8:	f10c 0203 	add.w	r2, ip, #3
 800b7fc:	1b52      	subs	r2, r2, r5
 800b7fe:	f022 0203 	bic.w	r2, r2, #3
 800b802:	3d03      	subs	r5, #3
 800b804:	45ac      	cmp	ip, r5
 800b806:	bf38      	it	cc
 800b808:	2200      	movcc	r2, #0
 800b80a:	4413      	add	r3, r2
 800b80c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b810:	b17a      	cbz	r2, 800b832 <__mdiff+0x106>
 800b812:	6107      	str	r7, [r0, #16]
 800b814:	e7a4      	b.n	800b760 <__mdiff+0x34>
 800b816:	f856 8b04 	ldr.w	r8, [r6], #4
 800b81a:	fa11 f288 	uxtah	r2, r1, r8
 800b81e:	1414      	asrs	r4, r2, #16
 800b820:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b824:	b292      	uxth	r2, r2
 800b826:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b82a:	f84e 2b04 	str.w	r2, [lr], #4
 800b82e:	1421      	asrs	r1, r4, #16
 800b830:	e7e0      	b.n	800b7f4 <__mdiff+0xc8>
 800b832:	3f01      	subs	r7, #1
 800b834:	e7ea      	b.n	800b80c <__mdiff+0xe0>
 800b836:	bf00      	nop
 800b838:	0800f71c 	.word	0x0800f71c
 800b83c:	0800f78d 	.word	0x0800f78d

0800b840 <__ulp>:
 800b840:	b082      	sub	sp, #8
 800b842:	ed8d 0b00 	vstr	d0, [sp]
 800b846:	9a01      	ldr	r2, [sp, #4]
 800b848:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <__ulp+0x48>)
 800b84a:	4013      	ands	r3, r2
 800b84c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b850:	2b00      	cmp	r3, #0
 800b852:	dc08      	bgt.n	800b866 <__ulp+0x26>
 800b854:	425b      	negs	r3, r3
 800b856:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b85a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b85e:	da04      	bge.n	800b86a <__ulp+0x2a>
 800b860:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b864:	4113      	asrs	r3, r2
 800b866:	2200      	movs	r2, #0
 800b868:	e008      	b.n	800b87c <__ulp+0x3c>
 800b86a:	f1a2 0314 	sub.w	r3, r2, #20
 800b86e:	2b1e      	cmp	r3, #30
 800b870:	bfda      	itte	le
 800b872:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b876:	40da      	lsrle	r2, r3
 800b878:	2201      	movgt	r2, #1
 800b87a:	2300      	movs	r3, #0
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	ec41 0b10 	vmov	d0, r0, r1
 800b884:	b002      	add	sp, #8
 800b886:	4770      	bx	lr
 800b888:	7ff00000 	.word	0x7ff00000

0800b88c <__b2d>:
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	6906      	ldr	r6, [r0, #16]
 800b892:	f100 0814 	add.w	r8, r0, #20
 800b896:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b89a:	1f37      	subs	r7, r6, #4
 800b89c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	f7ff fd53 	bl	800b34c <__hi0bits>
 800b8a6:	f1c0 0320 	rsb	r3, r0, #32
 800b8aa:	280a      	cmp	r0, #10
 800b8ac:	600b      	str	r3, [r1, #0]
 800b8ae:	491b      	ldr	r1, [pc, #108]	; (800b91c <__b2d+0x90>)
 800b8b0:	dc15      	bgt.n	800b8de <__b2d+0x52>
 800b8b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b8b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b8ba:	45b8      	cmp	r8, r7
 800b8bc:	ea43 0501 	orr.w	r5, r3, r1
 800b8c0:	bf34      	ite	cc
 800b8c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b8c6:	2300      	movcs	r3, #0
 800b8c8:	3015      	adds	r0, #21
 800b8ca:	fa02 f000 	lsl.w	r0, r2, r0
 800b8ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800b8d2:	4303      	orrs	r3, r0
 800b8d4:	461c      	mov	r4, r3
 800b8d6:	ec45 4b10 	vmov	d0, r4, r5
 800b8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8de:	45b8      	cmp	r8, r7
 800b8e0:	bf3a      	itte	cc
 800b8e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b8e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b8ea:	2300      	movcs	r3, #0
 800b8ec:	380b      	subs	r0, #11
 800b8ee:	d012      	beq.n	800b916 <__b2d+0x8a>
 800b8f0:	f1c0 0120 	rsb	r1, r0, #32
 800b8f4:	fa23 f401 	lsr.w	r4, r3, r1
 800b8f8:	4082      	lsls	r2, r0
 800b8fa:	4322      	orrs	r2, r4
 800b8fc:	4547      	cmp	r7, r8
 800b8fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b902:	bf8c      	ite	hi
 800b904:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b908:	2200      	movls	r2, #0
 800b90a:	4083      	lsls	r3, r0
 800b90c:	40ca      	lsrs	r2, r1
 800b90e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b912:	4313      	orrs	r3, r2
 800b914:	e7de      	b.n	800b8d4 <__b2d+0x48>
 800b916:	ea42 0501 	orr.w	r5, r2, r1
 800b91a:	e7db      	b.n	800b8d4 <__b2d+0x48>
 800b91c:	3ff00000 	.word	0x3ff00000

0800b920 <__d2b>:
 800b920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b924:	460f      	mov	r7, r1
 800b926:	2101      	movs	r1, #1
 800b928:	ec59 8b10 	vmov	r8, r9, d0
 800b92c:	4616      	mov	r6, r2
 800b92e:	f7ff fc1b 	bl	800b168 <_Balloc>
 800b932:	4604      	mov	r4, r0
 800b934:	b930      	cbnz	r0, 800b944 <__d2b+0x24>
 800b936:	4602      	mov	r2, r0
 800b938:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <__d2b+0xac>)
 800b93a:	4825      	ldr	r0, [pc, #148]	; (800b9d0 <__d2b+0xb0>)
 800b93c:	f240 310f 	movw	r1, #783	; 0x30f
 800b940:	f7fe f9c4 	bl	8009ccc <__assert_func>
 800b944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b94c:	bb2d      	cbnz	r5, 800b99a <__d2b+0x7a>
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	f1b8 0300 	subs.w	r3, r8, #0
 800b954:	d026      	beq.n	800b9a4 <__d2b+0x84>
 800b956:	4668      	mov	r0, sp
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	f7ff fd17 	bl	800b38c <__lo0bits>
 800b95e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b962:	b1e8      	cbz	r0, 800b9a0 <__d2b+0x80>
 800b964:	f1c0 0320 	rsb	r3, r0, #32
 800b968:	fa02 f303 	lsl.w	r3, r2, r3
 800b96c:	430b      	orrs	r3, r1
 800b96e:	40c2      	lsrs	r2, r0
 800b970:	6163      	str	r3, [r4, #20]
 800b972:	9201      	str	r2, [sp, #4]
 800b974:	9b01      	ldr	r3, [sp, #4]
 800b976:	61a3      	str	r3, [r4, #24]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bf14      	ite	ne
 800b97c:	2202      	movne	r2, #2
 800b97e:	2201      	moveq	r2, #1
 800b980:	6122      	str	r2, [r4, #16]
 800b982:	b1bd      	cbz	r5, 800b9b4 <__d2b+0x94>
 800b984:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b988:	4405      	add	r5, r0
 800b98a:	603d      	str	r5, [r7, #0]
 800b98c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b990:	6030      	str	r0, [r6, #0]
 800b992:	4620      	mov	r0, r4
 800b994:	b003      	add	sp, #12
 800b996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b99a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b99e:	e7d6      	b.n	800b94e <__d2b+0x2e>
 800b9a0:	6161      	str	r1, [r4, #20]
 800b9a2:	e7e7      	b.n	800b974 <__d2b+0x54>
 800b9a4:	a801      	add	r0, sp, #4
 800b9a6:	f7ff fcf1 	bl	800b38c <__lo0bits>
 800b9aa:	9b01      	ldr	r3, [sp, #4]
 800b9ac:	6163      	str	r3, [r4, #20]
 800b9ae:	3020      	adds	r0, #32
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	e7e5      	b.n	800b980 <__d2b+0x60>
 800b9b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9bc:	6038      	str	r0, [r7, #0]
 800b9be:	6918      	ldr	r0, [r3, #16]
 800b9c0:	f7ff fcc4 	bl	800b34c <__hi0bits>
 800b9c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9c8:	e7e2      	b.n	800b990 <__d2b+0x70>
 800b9ca:	bf00      	nop
 800b9cc:	0800f71c 	.word	0x0800f71c
 800b9d0:	0800f78d 	.word	0x0800f78d

0800b9d4 <__ratio>:
 800b9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	4688      	mov	r8, r1
 800b9da:	4669      	mov	r1, sp
 800b9dc:	4681      	mov	r9, r0
 800b9de:	f7ff ff55 	bl	800b88c <__b2d>
 800b9e2:	a901      	add	r1, sp, #4
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	ec55 4b10 	vmov	r4, r5, d0
 800b9ea:	f7ff ff4f 	bl	800b88c <__b2d>
 800b9ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b9f6:	eba3 0c02 	sub.w	ip, r3, r2
 800b9fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9fe:	1a9b      	subs	r3, r3, r2
 800ba00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba04:	ec51 0b10 	vmov	r0, r1, d0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bfd6      	itet	le
 800ba0c:	460a      	movle	r2, r1
 800ba0e:	462a      	movgt	r2, r5
 800ba10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba14:	468b      	mov	fp, r1
 800ba16:	462f      	mov	r7, r5
 800ba18:	bfd4      	ite	le
 800ba1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba22:	4620      	mov	r0, r4
 800ba24:	ee10 2a10 	vmov	r2, s0
 800ba28:	465b      	mov	r3, fp
 800ba2a:	4639      	mov	r1, r7
 800ba2c:	f7f4 ff0e 	bl	800084c <__aeabi_ddiv>
 800ba30:	ec41 0b10 	vmov	d0, r0, r1
 800ba34:	b003      	add	sp, #12
 800ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba3a <__copybits>:
 800ba3a:	3901      	subs	r1, #1
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	1149      	asrs	r1, r1, #5
 800ba40:	6914      	ldr	r4, [r2, #16]
 800ba42:	3101      	adds	r1, #1
 800ba44:	f102 0314 	add.w	r3, r2, #20
 800ba48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba50:	1f05      	subs	r5, r0, #4
 800ba52:	42a3      	cmp	r3, r4
 800ba54:	d30c      	bcc.n	800ba70 <__copybits+0x36>
 800ba56:	1aa3      	subs	r3, r4, r2
 800ba58:	3b11      	subs	r3, #17
 800ba5a:	f023 0303 	bic.w	r3, r3, #3
 800ba5e:	3211      	adds	r2, #17
 800ba60:	42a2      	cmp	r2, r4
 800ba62:	bf88      	it	hi
 800ba64:	2300      	movhi	r3, #0
 800ba66:	4418      	add	r0, r3
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4288      	cmp	r0, r1
 800ba6c:	d305      	bcc.n	800ba7a <__copybits+0x40>
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba74:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba78:	e7eb      	b.n	800ba52 <__copybits+0x18>
 800ba7a:	f840 3b04 	str.w	r3, [r0], #4
 800ba7e:	e7f4      	b.n	800ba6a <__copybits+0x30>

0800ba80 <__any_on>:
 800ba80:	f100 0214 	add.w	r2, r0, #20
 800ba84:	6900      	ldr	r0, [r0, #16]
 800ba86:	114b      	asrs	r3, r1, #5
 800ba88:	4298      	cmp	r0, r3
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	db11      	blt.n	800bab2 <__any_on+0x32>
 800ba8e:	dd0a      	ble.n	800baa6 <__any_on+0x26>
 800ba90:	f011 011f 	ands.w	r1, r1, #31
 800ba94:	d007      	beq.n	800baa6 <__any_on+0x26>
 800ba96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba9a:	fa24 f001 	lsr.w	r0, r4, r1
 800ba9e:	fa00 f101 	lsl.w	r1, r0, r1
 800baa2:	428c      	cmp	r4, r1
 800baa4:	d10b      	bne.n	800babe <__any_on+0x3e>
 800baa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baaa:	4293      	cmp	r3, r2
 800baac:	d803      	bhi.n	800bab6 <__any_on+0x36>
 800baae:	2000      	movs	r0, #0
 800bab0:	bd10      	pop	{r4, pc}
 800bab2:	4603      	mov	r3, r0
 800bab4:	e7f7      	b.n	800baa6 <__any_on+0x26>
 800bab6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baba:	2900      	cmp	r1, #0
 800babc:	d0f5      	beq.n	800baaa <__any_on+0x2a>
 800babe:	2001      	movs	r0, #1
 800bac0:	e7f6      	b.n	800bab0 <__any_on+0x30>

0800bac2 <__ascii_wctomb>:
 800bac2:	b149      	cbz	r1, 800bad8 <__ascii_wctomb+0x16>
 800bac4:	2aff      	cmp	r2, #255	; 0xff
 800bac6:	bf85      	ittet	hi
 800bac8:	238a      	movhi	r3, #138	; 0x8a
 800baca:	6003      	strhi	r3, [r0, #0]
 800bacc:	700a      	strbls	r2, [r1, #0]
 800bace:	f04f 30ff 	movhi.w	r0, #4294967295
 800bad2:	bf98      	it	ls
 800bad4:	2001      	movls	r0, #1
 800bad6:	4770      	bx	lr
 800bad8:	4608      	mov	r0, r1
 800bada:	4770      	bx	lr

0800badc <__ssputs_r>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	688e      	ldr	r6, [r1, #8]
 800bae2:	461f      	mov	r7, r3
 800bae4:	42be      	cmp	r6, r7
 800bae6:	680b      	ldr	r3, [r1, #0]
 800bae8:	4682      	mov	sl, r0
 800baea:	460c      	mov	r4, r1
 800baec:	4690      	mov	r8, r2
 800baee:	d82c      	bhi.n	800bb4a <__ssputs_r+0x6e>
 800baf0:	898a      	ldrh	r2, [r1, #12]
 800baf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf6:	d026      	beq.n	800bb46 <__ssputs_r+0x6a>
 800baf8:	6965      	ldr	r5, [r4, #20]
 800bafa:	6909      	ldr	r1, [r1, #16]
 800bafc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb00:	eba3 0901 	sub.w	r9, r3, r1
 800bb04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb08:	1c7b      	adds	r3, r7, #1
 800bb0a:	444b      	add	r3, r9
 800bb0c:	106d      	asrs	r5, r5, #1
 800bb0e:	429d      	cmp	r5, r3
 800bb10:	bf38      	it	cc
 800bb12:	461d      	movcc	r5, r3
 800bb14:	0553      	lsls	r3, r2, #21
 800bb16:	d527      	bpl.n	800bb68 <__ssputs_r+0x8c>
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7fc f83d 	bl	8007b98 <_malloc_r>
 800bb1e:	4606      	mov	r6, r0
 800bb20:	b360      	cbz	r0, 800bb7c <__ssputs_r+0xa0>
 800bb22:	6921      	ldr	r1, [r4, #16]
 800bb24:	464a      	mov	r2, r9
 800bb26:	f7fe f8b4 	bl	8009c92 <memcpy>
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	6126      	str	r6, [r4, #16]
 800bb38:	6165      	str	r5, [r4, #20]
 800bb3a:	444e      	add	r6, r9
 800bb3c:	eba5 0509 	sub.w	r5, r5, r9
 800bb40:	6026      	str	r6, [r4, #0]
 800bb42:	60a5      	str	r5, [r4, #8]
 800bb44:	463e      	mov	r6, r7
 800bb46:	42be      	cmp	r6, r7
 800bb48:	d900      	bls.n	800bb4c <__ssputs_r+0x70>
 800bb4a:	463e      	mov	r6, r7
 800bb4c:	6820      	ldr	r0, [r4, #0]
 800bb4e:	4632      	mov	r2, r6
 800bb50:	4641      	mov	r1, r8
 800bb52:	f000 f9db 	bl	800bf0c <memmove>
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	1b9b      	subs	r3, r3, r6
 800bb5a:	60a3      	str	r3, [r4, #8]
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	4433      	add	r3, r6
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	2000      	movs	r0, #0
 800bb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb68:	462a      	mov	r2, r5
 800bb6a:	f000 fa06 	bl	800bf7a <_realloc_r>
 800bb6e:	4606      	mov	r6, r0
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d1e0      	bne.n	800bb36 <__ssputs_r+0x5a>
 800bb74:	6921      	ldr	r1, [r4, #16]
 800bb76:	4650      	mov	r0, sl
 800bb78:	f7fe ff40 	bl	800a9fc <_free_r>
 800bb7c:	230c      	movs	r3, #12
 800bb7e:	f8ca 3000 	str.w	r3, [sl]
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8e:	e7e9      	b.n	800bb64 <__ssputs_r+0x88>

0800bb90 <_svfiprintf_r>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4698      	mov	r8, r3
 800bb96:	898b      	ldrh	r3, [r1, #12]
 800bb98:	061b      	lsls	r3, r3, #24
 800bb9a:	b09d      	sub	sp, #116	; 0x74
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	d50e      	bpl.n	800bbc2 <_svfiprintf_r+0x32>
 800bba4:	690b      	ldr	r3, [r1, #16]
 800bba6:	b963      	cbnz	r3, 800bbc2 <_svfiprintf_r+0x32>
 800bba8:	2140      	movs	r1, #64	; 0x40
 800bbaa:	f7fb fff5 	bl	8007b98 <_malloc_r>
 800bbae:	6028      	str	r0, [r5, #0]
 800bbb0:	6128      	str	r0, [r5, #16]
 800bbb2:	b920      	cbnz	r0, 800bbbe <_svfiprintf_r+0x2e>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	e0d0      	b.n	800bd60 <_svfiprintf_r+0x1d0>
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	616b      	str	r3, [r5, #20]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc6:	2320      	movs	r3, #32
 800bbc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd0:	2330      	movs	r3, #48	; 0x30
 800bbd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd78 <_svfiprintf_r+0x1e8>
 800bbd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbda:	f04f 0901 	mov.w	r9, #1
 800bbde:	4623      	mov	r3, r4
 800bbe0:	469a      	mov	sl, r3
 800bbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe6:	b10a      	cbz	r2, 800bbec <_svfiprintf_r+0x5c>
 800bbe8:	2a25      	cmp	r2, #37	; 0x25
 800bbea:	d1f9      	bne.n	800bbe0 <_svfiprintf_r+0x50>
 800bbec:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf0:	d00b      	beq.n	800bc0a <_svfiprintf_r+0x7a>
 800bbf2:	465b      	mov	r3, fp
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f7ff ff6f 	bl	800badc <__ssputs_r>
 800bbfe:	3001      	adds	r0, #1
 800bc00:	f000 80a9 	beq.w	800bd56 <_svfiprintf_r+0x1c6>
 800bc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc06:	445a      	add	r2, fp
 800bc08:	9209      	str	r2, [sp, #36]	; 0x24
 800bc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 80a1 	beq.w	800bd56 <_svfiprintf_r+0x1c6>
 800bc14:	2300      	movs	r3, #0
 800bc16:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc1e:	f10a 0a01 	add.w	sl, sl, #1
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	9307      	str	r3, [sp, #28]
 800bc26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc2a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc2c:	4654      	mov	r4, sl
 800bc2e:	2205      	movs	r2, #5
 800bc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc34:	4850      	ldr	r0, [pc, #320]	; (800bd78 <_svfiprintf_r+0x1e8>)
 800bc36:	f7f4 facb 	bl	80001d0 <memchr>
 800bc3a:	9a04      	ldr	r2, [sp, #16]
 800bc3c:	b9d8      	cbnz	r0, 800bc76 <_svfiprintf_r+0xe6>
 800bc3e:	06d0      	lsls	r0, r2, #27
 800bc40:	bf44      	itt	mi
 800bc42:	2320      	movmi	r3, #32
 800bc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc48:	0711      	lsls	r1, r2, #28
 800bc4a:	bf44      	itt	mi
 800bc4c:	232b      	movmi	r3, #43	; 0x2b
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc52:	f89a 3000 	ldrb.w	r3, [sl]
 800bc56:	2b2a      	cmp	r3, #42	; 0x2a
 800bc58:	d015      	beq.n	800bc86 <_svfiprintf_r+0xf6>
 800bc5a:	9a07      	ldr	r2, [sp, #28]
 800bc5c:	4654      	mov	r4, sl
 800bc5e:	2000      	movs	r0, #0
 800bc60:	f04f 0c0a 	mov.w	ip, #10
 800bc64:	4621      	mov	r1, r4
 800bc66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6a:	3b30      	subs	r3, #48	; 0x30
 800bc6c:	2b09      	cmp	r3, #9
 800bc6e:	d94d      	bls.n	800bd0c <_svfiprintf_r+0x17c>
 800bc70:	b1b0      	cbz	r0, 800bca0 <_svfiprintf_r+0x110>
 800bc72:	9207      	str	r2, [sp, #28]
 800bc74:	e014      	b.n	800bca0 <_svfiprintf_r+0x110>
 800bc76:	eba0 0308 	sub.w	r3, r0, r8
 800bc7a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	9304      	str	r3, [sp, #16]
 800bc82:	46a2      	mov	sl, r4
 800bc84:	e7d2      	b.n	800bc2c <_svfiprintf_r+0x9c>
 800bc86:	9b03      	ldr	r3, [sp, #12]
 800bc88:	1d19      	adds	r1, r3, #4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	9103      	str	r1, [sp, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bfbb      	ittet	lt
 800bc92:	425b      	neglt	r3, r3
 800bc94:	f042 0202 	orrlt.w	r2, r2, #2
 800bc98:	9307      	strge	r3, [sp, #28]
 800bc9a:	9307      	strlt	r3, [sp, #28]
 800bc9c:	bfb8      	it	lt
 800bc9e:	9204      	strlt	r2, [sp, #16]
 800bca0:	7823      	ldrb	r3, [r4, #0]
 800bca2:	2b2e      	cmp	r3, #46	; 0x2e
 800bca4:	d10c      	bne.n	800bcc0 <_svfiprintf_r+0x130>
 800bca6:	7863      	ldrb	r3, [r4, #1]
 800bca8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcaa:	d134      	bne.n	800bd16 <_svfiprintf_r+0x186>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	1d1a      	adds	r2, r3, #4
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	9203      	str	r2, [sp, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfb8      	it	lt
 800bcb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcbc:	3402      	adds	r4, #2
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd88 <_svfiprintf_r+0x1f8>
 800bcc4:	7821      	ldrb	r1, [r4, #0]
 800bcc6:	2203      	movs	r2, #3
 800bcc8:	4650      	mov	r0, sl
 800bcca:	f7f4 fa81 	bl	80001d0 <memchr>
 800bcce:	b138      	cbz	r0, 800bce0 <_svfiprintf_r+0x150>
 800bcd0:	9b04      	ldr	r3, [sp, #16]
 800bcd2:	eba0 000a 	sub.w	r0, r0, sl
 800bcd6:	2240      	movs	r2, #64	; 0x40
 800bcd8:	4082      	lsls	r2, r0
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	3401      	adds	r4, #1
 800bcde:	9304      	str	r3, [sp, #16]
 800bce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce4:	4825      	ldr	r0, [pc, #148]	; (800bd7c <_svfiprintf_r+0x1ec>)
 800bce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcea:	2206      	movs	r2, #6
 800bcec:	f7f4 fa70 	bl	80001d0 <memchr>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d038      	beq.n	800bd66 <_svfiprintf_r+0x1d6>
 800bcf4:	4b22      	ldr	r3, [pc, #136]	; (800bd80 <_svfiprintf_r+0x1f0>)
 800bcf6:	bb1b      	cbnz	r3, 800bd40 <_svfiprintf_r+0x1b0>
 800bcf8:	9b03      	ldr	r3, [sp, #12]
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	f023 0307 	bic.w	r3, r3, #7
 800bd00:	3308      	adds	r3, #8
 800bd02:	9303      	str	r3, [sp, #12]
 800bd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd06:	4433      	add	r3, r6
 800bd08:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0a:	e768      	b.n	800bbde <_svfiprintf_r+0x4e>
 800bd0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd10:	460c      	mov	r4, r1
 800bd12:	2001      	movs	r0, #1
 800bd14:	e7a6      	b.n	800bc64 <_svfiprintf_r+0xd4>
 800bd16:	2300      	movs	r3, #0
 800bd18:	3401      	adds	r4, #1
 800bd1a:	9305      	str	r3, [sp, #20]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	f04f 0c0a 	mov.w	ip, #10
 800bd22:	4620      	mov	r0, r4
 800bd24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd28:	3a30      	subs	r2, #48	; 0x30
 800bd2a:	2a09      	cmp	r2, #9
 800bd2c:	d903      	bls.n	800bd36 <_svfiprintf_r+0x1a6>
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0c6      	beq.n	800bcc0 <_svfiprintf_r+0x130>
 800bd32:	9105      	str	r1, [sp, #20]
 800bd34:	e7c4      	b.n	800bcc0 <_svfiprintf_r+0x130>
 800bd36:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e7f0      	b.n	800bd22 <_svfiprintf_r+0x192>
 800bd40:	ab03      	add	r3, sp, #12
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	462a      	mov	r2, r5
 800bd46:	4b0f      	ldr	r3, [pc, #60]	; (800bd84 <_svfiprintf_r+0x1f4>)
 800bd48:	a904      	add	r1, sp, #16
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	f7fc ff56 	bl	8008bfc <_printf_float>
 800bd50:	1c42      	adds	r2, r0, #1
 800bd52:	4606      	mov	r6, r0
 800bd54:	d1d6      	bne.n	800bd04 <_svfiprintf_r+0x174>
 800bd56:	89ab      	ldrh	r3, [r5, #12]
 800bd58:	065b      	lsls	r3, r3, #25
 800bd5a:	f53f af2d 	bmi.w	800bbb8 <_svfiprintf_r+0x28>
 800bd5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd60:	b01d      	add	sp, #116	; 0x74
 800bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd66:	ab03      	add	r3, sp, #12
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <_svfiprintf_r+0x1f4>)
 800bd6e:	a904      	add	r1, sp, #16
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7fd f9e7 	bl	8009144 <_printf_i>
 800bd76:	e7eb      	b.n	800bd50 <_svfiprintf_r+0x1c0>
 800bd78:	0800f8e4 	.word	0x0800f8e4
 800bd7c:	0800f8ee 	.word	0x0800f8ee
 800bd80:	08008bfd 	.word	0x08008bfd
 800bd84:	0800badd 	.word	0x0800badd
 800bd88:	0800f8ea 	.word	0x0800f8ea

0800bd8c <__sflush_r>:
 800bd8c:	898a      	ldrh	r2, [r1, #12]
 800bd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd92:	4605      	mov	r5, r0
 800bd94:	0710      	lsls	r0, r2, #28
 800bd96:	460c      	mov	r4, r1
 800bd98:	d458      	bmi.n	800be4c <__sflush_r+0xc0>
 800bd9a:	684b      	ldr	r3, [r1, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dc05      	bgt.n	800bdac <__sflush_r+0x20>
 800bda0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dc02      	bgt.n	800bdac <__sflush_r+0x20>
 800bda6:	2000      	movs	r0, #0
 800bda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdae:	2e00      	cmp	r6, #0
 800bdb0:	d0f9      	beq.n	800bda6 <__sflush_r+0x1a>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdb8:	682f      	ldr	r7, [r5, #0]
 800bdba:	6a21      	ldr	r1, [r4, #32]
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	d032      	beq.n	800be26 <__sflush_r+0x9a>
 800bdc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	075a      	lsls	r2, r3, #29
 800bdc6:	d505      	bpl.n	800bdd4 <__sflush_r+0x48>
 800bdc8:	6863      	ldr	r3, [r4, #4]
 800bdca:	1ac0      	subs	r0, r0, r3
 800bdcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdce:	b10b      	cbz	r3, 800bdd4 <__sflush_r+0x48>
 800bdd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdd2:	1ac0      	subs	r0, r0, r3
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdda:	6a21      	ldr	r1, [r4, #32]
 800bddc:	4628      	mov	r0, r5
 800bdde:	47b0      	blx	r6
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	d106      	bne.n	800bdf4 <__sflush_r+0x68>
 800bde6:	6829      	ldr	r1, [r5, #0]
 800bde8:	291d      	cmp	r1, #29
 800bdea:	d82b      	bhi.n	800be44 <__sflush_r+0xb8>
 800bdec:	4a29      	ldr	r2, [pc, #164]	; (800be94 <__sflush_r+0x108>)
 800bdee:	410a      	asrs	r2, r1
 800bdf0:	07d6      	lsls	r6, r2, #31
 800bdf2:	d427      	bmi.n	800be44 <__sflush_r+0xb8>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	6062      	str	r2, [r4, #4]
 800bdf8:	04d9      	lsls	r1, r3, #19
 800bdfa:	6922      	ldr	r2, [r4, #16]
 800bdfc:	6022      	str	r2, [r4, #0]
 800bdfe:	d504      	bpl.n	800be0a <__sflush_r+0x7e>
 800be00:	1c42      	adds	r2, r0, #1
 800be02:	d101      	bne.n	800be08 <__sflush_r+0x7c>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	b903      	cbnz	r3, 800be0a <__sflush_r+0x7e>
 800be08:	6560      	str	r0, [r4, #84]	; 0x54
 800be0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be0c:	602f      	str	r7, [r5, #0]
 800be0e:	2900      	cmp	r1, #0
 800be10:	d0c9      	beq.n	800bda6 <__sflush_r+0x1a>
 800be12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be16:	4299      	cmp	r1, r3
 800be18:	d002      	beq.n	800be20 <__sflush_r+0x94>
 800be1a:	4628      	mov	r0, r5
 800be1c:	f7fe fdee 	bl	800a9fc <_free_r>
 800be20:	2000      	movs	r0, #0
 800be22:	6360      	str	r0, [r4, #52]	; 0x34
 800be24:	e7c0      	b.n	800bda8 <__sflush_r+0x1c>
 800be26:	2301      	movs	r3, #1
 800be28:	4628      	mov	r0, r5
 800be2a:	47b0      	blx	r6
 800be2c:	1c41      	adds	r1, r0, #1
 800be2e:	d1c8      	bne.n	800bdc2 <__sflush_r+0x36>
 800be30:	682b      	ldr	r3, [r5, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d0c5      	beq.n	800bdc2 <__sflush_r+0x36>
 800be36:	2b1d      	cmp	r3, #29
 800be38:	d001      	beq.n	800be3e <__sflush_r+0xb2>
 800be3a:	2b16      	cmp	r3, #22
 800be3c:	d101      	bne.n	800be42 <__sflush_r+0xb6>
 800be3e:	602f      	str	r7, [r5, #0]
 800be40:	e7b1      	b.n	800bda6 <__sflush_r+0x1a>
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be48:	81a3      	strh	r3, [r4, #12]
 800be4a:	e7ad      	b.n	800bda8 <__sflush_r+0x1c>
 800be4c:	690f      	ldr	r7, [r1, #16]
 800be4e:	2f00      	cmp	r7, #0
 800be50:	d0a9      	beq.n	800bda6 <__sflush_r+0x1a>
 800be52:	0793      	lsls	r3, r2, #30
 800be54:	680e      	ldr	r6, [r1, #0]
 800be56:	bf08      	it	eq
 800be58:	694b      	ldreq	r3, [r1, #20]
 800be5a:	600f      	str	r7, [r1, #0]
 800be5c:	bf18      	it	ne
 800be5e:	2300      	movne	r3, #0
 800be60:	eba6 0807 	sub.w	r8, r6, r7
 800be64:	608b      	str	r3, [r1, #8]
 800be66:	f1b8 0f00 	cmp.w	r8, #0
 800be6a:	dd9c      	ble.n	800bda6 <__sflush_r+0x1a>
 800be6c:	6a21      	ldr	r1, [r4, #32]
 800be6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be70:	4643      	mov	r3, r8
 800be72:	463a      	mov	r2, r7
 800be74:	4628      	mov	r0, r5
 800be76:	47b0      	blx	r6
 800be78:	2800      	cmp	r0, #0
 800be7a:	dc06      	bgt.n	800be8a <__sflush_r+0xfe>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	e78e      	b.n	800bda8 <__sflush_r+0x1c>
 800be8a:	4407      	add	r7, r0
 800be8c:	eba8 0800 	sub.w	r8, r8, r0
 800be90:	e7e9      	b.n	800be66 <__sflush_r+0xda>
 800be92:	bf00      	nop
 800be94:	dfbffffe 	.word	0xdfbffffe

0800be98 <_fflush_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	690b      	ldr	r3, [r1, #16]
 800be9c:	4605      	mov	r5, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	b913      	cbnz	r3, 800bea8 <_fflush_r+0x10>
 800bea2:	2500      	movs	r5, #0
 800bea4:	4628      	mov	r0, r5
 800bea6:	bd38      	pop	{r3, r4, r5, pc}
 800bea8:	b118      	cbz	r0, 800beb2 <_fflush_r+0x1a>
 800beaa:	6a03      	ldr	r3, [r0, #32]
 800beac:	b90b      	cbnz	r3, 800beb2 <_fflush_r+0x1a>
 800beae:	f7fd fd07 	bl	80098c0 <__sinit>
 800beb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0f3      	beq.n	800bea2 <_fflush_r+0xa>
 800beba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bebc:	07d0      	lsls	r0, r2, #31
 800bebe:	d404      	bmi.n	800beca <_fflush_r+0x32>
 800bec0:	0599      	lsls	r1, r3, #22
 800bec2:	d402      	bmi.n	800beca <_fflush_r+0x32>
 800bec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bec6:	f7fd feda 	bl	8009c7e <__retarget_lock_acquire_recursive>
 800beca:	4628      	mov	r0, r5
 800becc:	4621      	mov	r1, r4
 800bece:	f7ff ff5d 	bl	800bd8c <__sflush_r>
 800bed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bed4:	07da      	lsls	r2, r3, #31
 800bed6:	4605      	mov	r5, r0
 800bed8:	d4e4      	bmi.n	800bea4 <_fflush_r+0xc>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	059b      	lsls	r3, r3, #22
 800bede:	d4e1      	bmi.n	800bea4 <_fflush_r+0xc>
 800bee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bee2:	f7fd fecd 	bl	8009c80 <__retarget_lock_release_recursive>
 800bee6:	e7dd      	b.n	800bea4 <_fflush_r+0xc>

0800bee8 <fiprintf>:
 800bee8:	b40e      	push	{r1, r2, r3}
 800beea:	b503      	push	{r0, r1, lr}
 800beec:	4601      	mov	r1, r0
 800beee:	ab03      	add	r3, sp, #12
 800bef0:	4805      	ldr	r0, [pc, #20]	; (800bf08 <fiprintf+0x20>)
 800bef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef6:	6800      	ldr	r0, [r0, #0]
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	f000 f897 	bl	800c02c <_vfiprintf_r>
 800befe:	b002      	add	sp, #8
 800bf00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf04:	b003      	add	sp, #12
 800bf06:	4770      	bx	lr
 800bf08:	20000210 	.word	0x20000210

0800bf0c <memmove>:
 800bf0c:	4288      	cmp	r0, r1
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	eb01 0402 	add.w	r4, r1, r2
 800bf14:	d902      	bls.n	800bf1c <memmove+0x10>
 800bf16:	4284      	cmp	r4, r0
 800bf18:	4623      	mov	r3, r4
 800bf1a:	d807      	bhi.n	800bf2c <memmove+0x20>
 800bf1c:	1e43      	subs	r3, r0, #1
 800bf1e:	42a1      	cmp	r1, r4
 800bf20:	d008      	beq.n	800bf34 <memmove+0x28>
 800bf22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf2a:	e7f8      	b.n	800bf1e <memmove+0x12>
 800bf2c:	4402      	add	r2, r0
 800bf2e:	4601      	mov	r1, r0
 800bf30:	428a      	cmp	r2, r1
 800bf32:	d100      	bne.n	800bf36 <memmove+0x2a>
 800bf34:	bd10      	pop	{r4, pc}
 800bf36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf3e:	e7f7      	b.n	800bf30 <memmove+0x24>

0800bf40 <abort>:
 800bf40:	b508      	push	{r3, lr}
 800bf42:	2006      	movs	r0, #6
 800bf44:	f000 fa4a 	bl	800c3dc <raise>
 800bf48:	2001      	movs	r0, #1
 800bf4a:	f7f7 fba1 	bl	8003690 <_exit>

0800bf4e <_calloc_r>:
 800bf4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf50:	fba1 2402 	umull	r2, r4, r1, r2
 800bf54:	b94c      	cbnz	r4, 800bf6a <_calloc_r+0x1c>
 800bf56:	4611      	mov	r1, r2
 800bf58:	9201      	str	r2, [sp, #4]
 800bf5a:	f7fb fe1d 	bl	8007b98 <_malloc_r>
 800bf5e:	9a01      	ldr	r2, [sp, #4]
 800bf60:	4605      	mov	r5, r0
 800bf62:	b930      	cbnz	r0, 800bf72 <_calloc_r+0x24>
 800bf64:	4628      	mov	r0, r5
 800bf66:	b003      	add	sp, #12
 800bf68:	bd30      	pop	{r4, r5, pc}
 800bf6a:	220c      	movs	r2, #12
 800bf6c:	6002      	str	r2, [r0, #0]
 800bf6e:	2500      	movs	r5, #0
 800bf70:	e7f8      	b.n	800bf64 <_calloc_r+0x16>
 800bf72:	4621      	mov	r1, r4
 800bf74:	f7fd fd71 	bl	8009a5a <memset>
 800bf78:	e7f4      	b.n	800bf64 <_calloc_r+0x16>

0800bf7a <_realloc_r>:
 800bf7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7e:	4680      	mov	r8, r0
 800bf80:	4614      	mov	r4, r2
 800bf82:	460e      	mov	r6, r1
 800bf84:	b921      	cbnz	r1, 800bf90 <_realloc_r+0x16>
 800bf86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	f7fb be04 	b.w	8007b98 <_malloc_r>
 800bf90:	b92a      	cbnz	r2, 800bf9e <_realloc_r+0x24>
 800bf92:	f7fe fd33 	bl	800a9fc <_free_r>
 800bf96:	4625      	mov	r5, r4
 800bf98:	4628      	mov	r0, r5
 800bf9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9e:	f000 fa39 	bl	800c414 <_malloc_usable_size_r>
 800bfa2:	4284      	cmp	r4, r0
 800bfa4:	4607      	mov	r7, r0
 800bfa6:	d802      	bhi.n	800bfae <_realloc_r+0x34>
 800bfa8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfac:	d812      	bhi.n	800bfd4 <_realloc_r+0x5a>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	f7fb fdf1 	bl	8007b98 <_malloc_r>
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d0ed      	beq.n	800bf98 <_realloc_r+0x1e>
 800bfbc:	42bc      	cmp	r4, r7
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	bf28      	it	cs
 800bfc4:	463a      	movcs	r2, r7
 800bfc6:	f7fd fe64 	bl	8009c92 <memcpy>
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4640      	mov	r0, r8
 800bfce:	f7fe fd15 	bl	800a9fc <_free_r>
 800bfd2:	e7e1      	b.n	800bf98 <_realloc_r+0x1e>
 800bfd4:	4635      	mov	r5, r6
 800bfd6:	e7df      	b.n	800bf98 <_realloc_r+0x1e>

0800bfd8 <__sfputc_r>:
 800bfd8:	6893      	ldr	r3, [r2, #8]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	b410      	push	{r4}
 800bfe0:	6093      	str	r3, [r2, #8]
 800bfe2:	da08      	bge.n	800bff6 <__sfputc_r+0x1e>
 800bfe4:	6994      	ldr	r4, [r2, #24]
 800bfe6:	42a3      	cmp	r3, r4
 800bfe8:	db01      	blt.n	800bfee <__sfputc_r+0x16>
 800bfea:	290a      	cmp	r1, #10
 800bfec:	d103      	bne.n	800bff6 <__sfputc_r+0x1e>
 800bfee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff2:	f000 b935 	b.w	800c260 <__swbuf_r>
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	1c58      	adds	r0, r3, #1
 800bffa:	6010      	str	r0, [r2, #0]
 800bffc:	7019      	strb	r1, [r3, #0]
 800bffe:	4608      	mov	r0, r1
 800c000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <__sfputs_r>:
 800c006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c008:	4606      	mov	r6, r0
 800c00a:	460f      	mov	r7, r1
 800c00c:	4614      	mov	r4, r2
 800c00e:	18d5      	adds	r5, r2, r3
 800c010:	42ac      	cmp	r4, r5
 800c012:	d101      	bne.n	800c018 <__sfputs_r+0x12>
 800c014:	2000      	movs	r0, #0
 800c016:	e007      	b.n	800c028 <__sfputs_r+0x22>
 800c018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c01c:	463a      	mov	r2, r7
 800c01e:	4630      	mov	r0, r6
 800c020:	f7ff ffda 	bl	800bfd8 <__sfputc_r>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d1f3      	bne.n	800c010 <__sfputs_r+0xa>
 800c028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c02c <_vfiprintf_r>:
 800c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	460d      	mov	r5, r1
 800c032:	b09d      	sub	sp, #116	; 0x74
 800c034:	4614      	mov	r4, r2
 800c036:	4698      	mov	r8, r3
 800c038:	4606      	mov	r6, r0
 800c03a:	b118      	cbz	r0, 800c044 <_vfiprintf_r+0x18>
 800c03c:	6a03      	ldr	r3, [r0, #32]
 800c03e:	b90b      	cbnz	r3, 800c044 <_vfiprintf_r+0x18>
 800c040:	f7fd fc3e 	bl	80098c0 <__sinit>
 800c044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c046:	07d9      	lsls	r1, r3, #31
 800c048:	d405      	bmi.n	800c056 <_vfiprintf_r+0x2a>
 800c04a:	89ab      	ldrh	r3, [r5, #12]
 800c04c:	059a      	lsls	r2, r3, #22
 800c04e:	d402      	bmi.n	800c056 <_vfiprintf_r+0x2a>
 800c050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c052:	f7fd fe14 	bl	8009c7e <__retarget_lock_acquire_recursive>
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	071b      	lsls	r3, r3, #28
 800c05a:	d501      	bpl.n	800c060 <_vfiprintf_r+0x34>
 800c05c:	692b      	ldr	r3, [r5, #16]
 800c05e:	b99b      	cbnz	r3, 800c088 <_vfiprintf_r+0x5c>
 800c060:	4629      	mov	r1, r5
 800c062:	4630      	mov	r0, r6
 800c064:	f000 f93a 	bl	800c2dc <__swsetup_r>
 800c068:	b170      	cbz	r0, 800c088 <_vfiprintf_r+0x5c>
 800c06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c06c:	07dc      	lsls	r4, r3, #31
 800c06e:	d504      	bpl.n	800c07a <_vfiprintf_r+0x4e>
 800c070:	f04f 30ff 	mov.w	r0, #4294967295
 800c074:	b01d      	add	sp, #116	; 0x74
 800c076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07a:	89ab      	ldrh	r3, [r5, #12]
 800c07c:	0598      	lsls	r0, r3, #22
 800c07e:	d4f7      	bmi.n	800c070 <_vfiprintf_r+0x44>
 800c080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c082:	f7fd fdfd 	bl	8009c80 <__retarget_lock_release_recursive>
 800c086:	e7f3      	b.n	800c070 <_vfiprintf_r+0x44>
 800c088:	2300      	movs	r3, #0
 800c08a:	9309      	str	r3, [sp, #36]	; 0x24
 800c08c:	2320      	movs	r3, #32
 800c08e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c092:	f8cd 800c 	str.w	r8, [sp, #12]
 800c096:	2330      	movs	r3, #48	; 0x30
 800c098:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c24c <_vfiprintf_r+0x220>
 800c09c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0a0:	f04f 0901 	mov.w	r9, #1
 800c0a4:	4623      	mov	r3, r4
 800c0a6:	469a      	mov	sl, r3
 800c0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ac:	b10a      	cbz	r2, 800c0b2 <_vfiprintf_r+0x86>
 800c0ae:	2a25      	cmp	r2, #37	; 0x25
 800c0b0:	d1f9      	bne.n	800c0a6 <_vfiprintf_r+0x7a>
 800c0b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0b6:	d00b      	beq.n	800c0d0 <_vfiprintf_r+0xa4>
 800c0b8:	465b      	mov	r3, fp
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ffa1 	bl	800c006 <__sfputs_r>
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	f000 80a9 	beq.w	800c21c <_vfiprintf_r+0x1f0>
 800c0ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0cc:	445a      	add	r2, fp
 800c0ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 80a1 	beq.w	800c21c <_vfiprintf_r+0x1f0>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0e4:	f10a 0a01 	add.w	sl, sl, #1
 800c0e8:	9304      	str	r3, [sp, #16]
 800c0ea:	9307      	str	r3, [sp, #28]
 800c0ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c0f2:	4654      	mov	r4, sl
 800c0f4:	2205      	movs	r2, #5
 800c0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0fa:	4854      	ldr	r0, [pc, #336]	; (800c24c <_vfiprintf_r+0x220>)
 800c0fc:	f7f4 f868 	bl	80001d0 <memchr>
 800c100:	9a04      	ldr	r2, [sp, #16]
 800c102:	b9d8      	cbnz	r0, 800c13c <_vfiprintf_r+0x110>
 800c104:	06d1      	lsls	r1, r2, #27
 800c106:	bf44      	itt	mi
 800c108:	2320      	movmi	r3, #32
 800c10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c10e:	0713      	lsls	r3, r2, #28
 800c110:	bf44      	itt	mi
 800c112:	232b      	movmi	r3, #43	; 0x2b
 800c114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c118:	f89a 3000 	ldrb.w	r3, [sl]
 800c11c:	2b2a      	cmp	r3, #42	; 0x2a
 800c11e:	d015      	beq.n	800c14c <_vfiprintf_r+0x120>
 800c120:	9a07      	ldr	r2, [sp, #28]
 800c122:	4654      	mov	r4, sl
 800c124:	2000      	movs	r0, #0
 800c126:	f04f 0c0a 	mov.w	ip, #10
 800c12a:	4621      	mov	r1, r4
 800c12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c130:	3b30      	subs	r3, #48	; 0x30
 800c132:	2b09      	cmp	r3, #9
 800c134:	d94d      	bls.n	800c1d2 <_vfiprintf_r+0x1a6>
 800c136:	b1b0      	cbz	r0, 800c166 <_vfiprintf_r+0x13a>
 800c138:	9207      	str	r2, [sp, #28]
 800c13a:	e014      	b.n	800c166 <_vfiprintf_r+0x13a>
 800c13c:	eba0 0308 	sub.w	r3, r0, r8
 800c140:	fa09 f303 	lsl.w	r3, r9, r3
 800c144:	4313      	orrs	r3, r2
 800c146:	9304      	str	r3, [sp, #16]
 800c148:	46a2      	mov	sl, r4
 800c14a:	e7d2      	b.n	800c0f2 <_vfiprintf_r+0xc6>
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	1d19      	adds	r1, r3, #4
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	9103      	str	r1, [sp, #12]
 800c154:	2b00      	cmp	r3, #0
 800c156:	bfbb      	ittet	lt
 800c158:	425b      	neglt	r3, r3
 800c15a:	f042 0202 	orrlt.w	r2, r2, #2
 800c15e:	9307      	strge	r3, [sp, #28]
 800c160:	9307      	strlt	r3, [sp, #28]
 800c162:	bfb8      	it	lt
 800c164:	9204      	strlt	r2, [sp, #16]
 800c166:	7823      	ldrb	r3, [r4, #0]
 800c168:	2b2e      	cmp	r3, #46	; 0x2e
 800c16a:	d10c      	bne.n	800c186 <_vfiprintf_r+0x15a>
 800c16c:	7863      	ldrb	r3, [r4, #1]
 800c16e:	2b2a      	cmp	r3, #42	; 0x2a
 800c170:	d134      	bne.n	800c1dc <_vfiprintf_r+0x1b0>
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	1d1a      	adds	r2, r3, #4
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	9203      	str	r2, [sp, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bfb8      	it	lt
 800c17e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c182:	3402      	adds	r4, #2
 800c184:	9305      	str	r3, [sp, #20]
 800c186:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c25c <_vfiprintf_r+0x230>
 800c18a:	7821      	ldrb	r1, [r4, #0]
 800c18c:	2203      	movs	r2, #3
 800c18e:	4650      	mov	r0, sl
 800c190:	f7f4 f81e 	bl	80001d0 <memchr>
 800c194:	b138      	cbz	r0, 800c1a6 <_vfiprintf_r+0x17a>
 800c196:	9b04      	ldr	r3, [sp, #16]
 800c198:	eba0 000a 	sub.w	r0, r0, sl
 800c19c:	2240      	movs	r2, #64	; 0x40
 800c19e:	4082      	lsls	r2, r0
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	3401      	adds	r4, #1
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1aa:	4829      	ldr	r0, [pc, #164]	; (800c250 <_vfiprintf_r+0x224>)
 800c1ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1b0:	2206      	movs	r2, #6
 800c1b2:	f7f4 f80d 	bl	80001d0 <memchr>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d03f      	beq.n	800c23a <_vfiprintf_r+0x20e>
 800c1ba:	4b26      	ldr	r3, [pc, #152]	; (800c254 <_vfiprintf_r+0x228>)
 800c1bc:	bb1b      	cbnz	r3, 800c206 <_vfiprintf_r+0x1da>
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	3307      	adds	r3, #7
 800c1c2:	f023 0307 	bic.w	r3, r3, #7
 800c1c6:	3308      	adds	r3, #8
 800c1c8:	9303      	str	r3, [sp, #12]
 800c1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1cc:	443b      	add	r3, r7
 800c1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d0:	e768      	b.n	800c0a4 <_vfiprintf_r+0x78>
 800c1d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1d6:	460c      	mov	r4, r1
 800c1d8:	2001      	movs	r0, #1
 800c1da:	e7a6      	b.n	800c12a <_vfiprintf_r+0xfe>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	3401      	adds	r4, #1
 800c1e0:	9305      	str	r3, [sp, #20]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	f04f 0c0a 	mov.w	ip, #10
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ee:	3a30      	subs	r2, #48	; 0x30
 800c1f0:	2a09      	cmp	r2, #9
 800c1f2:	d903      	bls.n	800c1fc <_vfiprintf_r+0x1d0>
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0c6      	beq.n	800c186 <_vfiprintf_r+0x15a>
 800c1f8:	9105      	str	r1, [sp, #20]
 800c1fa:	e7c4      	b.n	800c186 <_vfiprintf_r+0x15a>
 800c1fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c200:	4604      	mov	r4, r0
 800c202:	2301      	movs	r3, #1
 800c204:	e7f0      	b.n	800c1e8 <_vfiprintf_r+0x1bc>
 800c206:	ab03      	add	r3, sp, #12
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	462a      	mov	r2, r5
 800c20c:	4b12      	ldr	r3, [pc, #72]	; (800c258 <_vfiprintf_r+0x22c>)
 800c20e:	a904      	add	r1, sp, #16
 800c210:	4630      	mov	r0, r6
 800c212:	f7fc fcf3 	bl	8008bfc <_printf_float>
 800c216:	4607      	mov	r7, r0
 800c218:	1c78      	adds	r0, r7, #1
 800c21a:	d1d6      	bne.n	800c1ca <_vfiprintf_r+0x19e>
 800c21c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c21e:	07d9      	lsls	r1, r3, #31
 800c220:	d405      	bmi.n	800c22e <_vfiprintf_r+0x202>
 800c222:	89ab      	ldrh	r3, [r5, #12]
 800c224:	059a      	lsls	r2, r3, #22
 800c226:	d402      	bmi.n	800c22e <_vfiprintf_r+0x202>
 800c228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c22a:	f7fd fd29 	bl	8009c80 <__retarget_lock_release_recursive>
 800c22e:	89ab      	ldrh	r3, [r5, #12]
 800c230:	065b      	lsls	r3, r3, #25
 800c232:	f53f af1d 	bmi.w	800c070 <_vfiprintf_r+0x44>
 800c236:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c238:	e71c      	b.n	800c074 <_vfiprintf_r+0x48>
 800c23a:	ab03      	add	r3, sp, #12
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	462a      	mov	r2, r5
 800c240:	4b05      	ldr	r3, [pc, #20]	; (800c258 <_vfiprintf_r+0x22c>)
 800c242:	a904      	add	r1, sp, #16
 800c244:	4630      	mov	r0, r6
 800c246:	f7fc ff7d 	bl	8009144 <_printf_i>
 800c24a:	e7e4      	b.n	800c216 <_vfiprintf_r+0x1ea>
 800c24c:	0800f8e4 	.word	0x0800f8e4
 800c250:	0800f8ee 	.word	0x0800f8ee
 800c254:	08008bfd 	.word	0x08008bfd
 800c258:	0800c007 	.word	0x0800c007
 800c25c:	0800f8ea 	.word	0x0800f8ea

0800c260 <__swbuf_r>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	460e      	mov	r6, r1
 800c264:	4614      	mov	r4, r2
 800c266:	4605      	mov	r5, r0
 800c268:	b118      	cbz	r0, 800c272 <__swbuf_r+0x12>
 800c26a:	6a03      	ldr	r3, [r0, #32]
 800c26c:	b90b      	cbnz	r3, 800c272 <__swbuf_r+0x12>
 800c26e:	f7fd fb27 	bl	80098c0 <__sinit>
 800c272:	69a3      	ldr	r3, [r4, #24]
 800c274:	60a3      	str	r3, [r4, #8]
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	071a      	lsls	r2, r3, #28
 800c27a:	d525      	bpl.n	800c2c8 <__swbuf_r+0x68>
 800c27c:	6923      	ldr	r3, [r4, #16]
 800c27e:	b31b      	cbz	r3, 800c2c8 <__swbuf_r+0x68>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	6922      	ldr	r2, [r4, #16]
 800c284:	1a98      	subs	r0, r3, r2
 800c286:	6963      	ldr	r3, [r4, #20]
 800c288:	b2f6      	uxtb	r6, r6
 800c28a:	4283      	cmp	r3, r0
 800c28c:	4637      	mov	r7, r6
 800c28e:	dc04      	bgt.n	800c29a <__swbuf_r+0x3a>
 800c290:	4621      	mov	r1, r4
 800c292:	4628      	mov	r0, r5
 800c294:	f7ff fe00 	bl	800be98 <_fflush_r>
 800c298:	b9e0      	cbnz	r0, 800c2d4 <__swbuf_r+0x74>
 800c29a:	68a3      	ldr	r3, [r4, #8]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	60a3      	str	r3, [r4, #8]
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	6022      	str	r2, [r4, #0]
 800c2a6:	701e      	strb	r6, [r3, #0]
 800c2a8:	6962      	ldr	r2, [r4, #20]
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d004      	beq.n	800c2ba <__swbuf_r+0x5a>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	07db      	lsls	r3, r3, #31
 800c2b4:	d506      	bpl.n	800c2c4 <__swbuf_r+0x64>
 800c2b6:	2e0a      	cmp	r6, #10
 800c2b8:	d104      	bne.n	800c2c4 <__swbuf_r+0x64>
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f7ff fdeb 	bl	800be98 <_fflush_r>
 800c2c2:	b938      	cbnz	r0, 800c2d4 <__swbuf_r+0x74>
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f000 f806 	bl	800c2dc <__swsetup_r>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d0d5      	beq.n	800c280 <__swbuf_r+0x20>
 800c2d4:	f04f 37ff 	mov.w	r7, #4294967295
 800c2d8:	e7f4      	b.n	800c2c4 <__swbuf_r+0x64>
	...

0800c2dc <__swsetup_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4b2a      	ldr	r3, [pc, #168]	; (800c388 <__swsetup_r+0xac>)
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	6818      	ldr	r0, [r3, #0]
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	b118      	cbz	r0, 800c2f0 <__swsetup_r+0x14>
 800c2e8:	6a03      	ldr	r3, [r0, #32]
 800c2ea:	b90b      	cbnz	r3, 800c2f0 <__swsetup_r+0x14>
 800c2ec:	f7fd fae8 	bl	80098c0 <__sinit>
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2f6:	0718      	lsls	r0, r3, #28
 800c2f8:	d422      	bmi.n	800c340 <__swsetup_r+0x64>
 800c2fa:	06d9      	lsls	r1, r3, #27
 800c2fc:	d407      	bmi.n	800c30e <__swsetup_r+0x32>
 800c2fe:	2309      	movs	r3, #9
 800c300:	602b      	str	r3, [r5, #0]
 800c302:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	e034      	b.n	800c378 <__swsetup_r+0x9c>
 800c30e:	0758      	lsls	r0, r3, #29
 800c310:	d512      	bpl.n	800c338 <__swsetup_r+0x5c>
 800c312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c314:	b141      	cbz	r1, 800c328 <__swsetup_r+0x4c>
 800c316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c31a:	4299      	cmp	r1, r3
 800c31c:	d002      	beq.n	800c324 <__swsetup_r+0x48>
 800c31e:	4628      	mov	r0, r5
 800c320:	f7fe fb6c 	bl	800a9fc <_free_r>
 800c324:	2300      	movs	r3, #0
 800c326:	6363      	str	r3, [r4, #52]	; 0x34
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c32e:	81a3      	strh	r3, [r4, #12]
 800c330:	2300      	movs	r3, #0
 800c332:	6063      	str	r3, [r4, #4]
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f043 0308 	orr.w	r3, r3, #8
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	6923      	ldr	r3, [r4, #16]
 800c342:	b94b      	cbnz	r3, 800c358 <__swsetup_r+0x7c>
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c34a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c34e:	d003      	beq.n	800c358 <__swsetup_r+0x7c>
 800c350:	4621      	mov	r1, r4
 800c352:	4628      	mov	r0, r5
 800c354:	f000 f88c 	bl	800c470 <__smakebuf_r>
 800c358:	89a0      	ldrh	r0, [r4, #12]
 800c35a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c35e:	f010 0301 	ands.w	r3, r0, #1
 800c362:	d00a      	beq.n	800c37a <__swsetup_r+0x9e>
 800c364:	2300      	movs	r3, #0
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	6963      	ldr	r3, [r4, #20]
 800c36a:	425b      	negs	r3, r3
 800c36c:	61a3      	str	r3, [r4, #24]
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	b943      	cbnz	r3, 800c384 <__swsetup_r+0xa8>
 800c372:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c376:	d1c4      	bne.n	800c302 <__swsetup_r+0x26>
 800c378:	bd38      	pop	{r3, r4, r5, pc}
 800c37a:	0781      	lsls	r1, r0, #30
 800c37c:	bf58      	it	pl
 800c37e:	6963      	ldrpl	r3, [r4, #20]
 800c380:	60a3      	str	r3, [r4, #8]
 800c382:	e7f4      	b.n	800c36e <__swsetup_r+0x92>
 800c384:	2000      	movs	r0, #0
 800c386:	e7f7      	b.n	800c378 <__swsetup_r+0x9c>
 800c388:	20000210 	.word	0x20000210

0800c38c <_raise_r>:
 800c38c:	291f      	cmp	r1, #31
 800c38e:	b538      	push	{r3, r4, r5, lr}
 800c390:	4604      	mov	r4, r0
 800c392:	460d      	mov	r5, r1
 800c394:	d904      	bls.n	800c3a0 <_raise_r+0x14>
 800c396:	2316      	movs	r3, #22
 800c398:	6003      	str	r3, [r0, #0]
 800c39a:	f04f 30ff 	mov.w	r0, #4294967295
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c3a2:	b112      	cbz	r2, 800c3aa <_raise_r+0x1e>
 800c3a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3a8:	b94b      	cbnz	r3, 800c3be <_raise_r+0x32>
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 f830 	bl	800c410 <_getpid_r>
 800c3b0:	462a      	mov	r2, r5
 800c3b2:	4601      	mov	r1, r0
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ba:	f000 b817 	b.w	800c3ec <_kill_r>
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d00a      	beq.n	800c3d8 <_raise_r+0x4c>
 800c3c2:	1c59      	adds	r1, r3, #1
 800c3c4:	d103      	bne.n	800c3ce <_raise_r+0x42>
 800c3c6:	2316      	movs	r3, #22
 800c3c8:	6003      	str	r3, [r0, #0]
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	e7e7      	b.n	800c39e <_raise_r+0x12>
 800c3ce:	2400      	movs	r4, #0
 800c3d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	4798      	blx	r3
 800c3d8:	2000      	movs	r0, #0
 800c3da:	e7e0      	b.n	800c39e <_raise_r+0x12>

0800c3dc <raise>:
 800c3dc:	4b02      	ldr	r3, [pc, #8]	; (800c3e8 <raise+0xc>)
 800c3de:	4601      	mov	r1, r0
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	f7ff bfd3 	b.w	800c38c <_raise_r>
 800c3e6:	bf00      	nop
 800c3e8:	20000210 	.word	0x20000210

0800c3ec <_kill_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4d07      	ldr	r5, [pc, #28]	; (800c40c <_kill_r+0x20>)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	602b      	str	r3, [r5, #0]
 800c3fa:	f7f7 f939 	bl	8003670 <_kill>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	d102      	bne.n	800c408 <_kill_r+0x1c>
 800c402:	682b      	ldr	r3, [r5, #0]
 800c404:	b103      	cbz	r3, 800c408 <_kill_r+0x1c>
 800c406:	6023      	str	r3, [r4, #0]
 800c408:	bd38      	pop	{r3, r4, r5, pc}
 800c40a:	bf00      	nop
 800c40c:	20000c70 	.word	0x20000c70

0800c410 <_getpid_r>:
 800c410:	f7f7 b926 	b.w	8003660 <_getpid>

0800c414 <_malloc_usable_size_r>:
 800c414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c418:	1f18      	subs	r0, r3, #4
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bfbc      	itt	lt
 800c41e:	580b      	ldrlt	r3, [r1, r0]
 800c420:	18c0      	addlt	r0, r0, r3
 800c422:	4770      	bx	lr

0800c424 <__swhatbuf_r>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	460c      	mov	r4, r1
 800c428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42c:	2900      	cmp	r1, #0
 800c42e:	b096      	sub	sp, #88	; 0x58
 800c430:	4615      	mov	r5, r2
 800c432:	461e      	mov	r6, r3
 800c434:	da0d      	bge.n	800c452 <__swhatbuf_r+0x2e>
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c43c:	f04f 0100 	mov.w	r1, #0
 800c440:	bf0c      	ite	eq
 800c442:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c446:	2340      	movne	r3, #64	; 0x40
 800c448:	2000      	movs	r0, #0
 800c44a:	6031      	str	r1, [r6, #0]
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	b016      	add	sp, #88	; 0x58
 800c450:	bd70      	pop	{r4, r5, r6, pc}
 800c452:	466a      	mov	r2, sp
 800c454:	f000 f848 	bl	800c4e8 <_fstat_r>
 800c458:	2800      	cmp	r0, #0
 800c45a:	dbec      	blt.n	800c436 <__swhatbuf_r+0x12>
 800c45c:	9901      	ldr	r1, [sp, #4]
 800c45e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c462:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c466:	4259      	negs	r1, r3
 800c468:	4159      	adcs	r1, r3
 800c46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46e:	e7eb      	b.n	800c448 <__swhatbuf_r+0x24>

0800c470 <__smakebuf_r>:
 800c470:	898b      	ldrh	r3, [r1, #12]
 800c472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c474:	079d      	lsls	r5, r3, #30
 800c476:	4606      	mov	r6, r0
 800c478:	460c      	mov	r4, r1
 800c47a:	d507      	bpl.n	800c48c <__smakebuf_r+0x1c>
 800c47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	6123      	str	r3, [r4, #16]
 800c484:	2301      	movs	r3, #1
 800c486:	6163      	str	r3, [r4, #20]
 800c488:	b002      	add	sp, #8
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	ab01      	add	r3, sp, #4
 800c48e:	466a      	mov	r2, sp
 800c490:	f7ff ffc8 	bl	800c424 <__swhatbuf_r>
 800c494:	9900      	ldr	r1, [sp, #0]
 800c496:	4605      	mov	r5, r0
 800c498:	4630      	mov	r0, r6
 800c49a:	f7fb fb7d 	bl	8007b98 <_malloc_r>
 800c49e:	b948      	cbnz	r0, 800c4b4 <__smakebuf_r+0x44>
 800c4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a4:	059a      	lsls	r2, r3, #22
 800c4a6:	d4ef      	bmi.n	800c488 <__smakebuf_r+0x18>
 800c4a8:	f023 0303 	bic.w	r3, r3, #3
 800c4ac:	f043 0302 	orr.w	r3, r3, #2
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	e7e3      	b.n	800c47c <__smakebuf_r+0xc>
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	6020      	str	r0, [r4, #0]
 800c4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	6163      	str	r3, [r4, #20]
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	6120      	str	r0, [r4, #16]
 800c4c6:	b15b      	cbz	r3, 800c4e0 <__smakebuf_r+0x70>
 800c4c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f000 f81d 	bl	800c50c <_isatty_r>
 800c4d2:	b128      	cbz	r0, 800c4e0 <__smakebuf_r+0x70>
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f023 0303 	bic.w	r3, r3, #3
 800c4da:	f043 0301 	orr.w	r3, r3, #1
 800c4de:	81a3      	strh	r3, [r4, #12]
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	431d      	orrs	r5, r3
 800c4e4:	81a5      	strh	r5, [r4, #12]
 800c4e6:	e7cf      	b.n	800c488 <__smakebuf_r+0x18>

0800c4e8 <_fstat_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	4d07      	ldr	r5, [pc, #28]	; (800c508 <_fstat_r+0x20>)
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	f7f7 f91a 	bl	800372e <_fstat>
 800c4fa:	1c43      	adds	r3, r0, #1
 800c4fc:	d102      	bne.n	800c504 <_fstat_r+0x1c>
 800c4fe:	682b      	ldr	r3, [r5, #0]
 800c500:	b103      	cbz	r3, 800c504 <_fstat_r+0x1c>
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	bf00      	nop
 800c508:	20000c70 	.word	0x20000c70

0800c50c <_isatty_r>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	4d06      	ldr	r5, [pc, #24]	; (800c528 <_isatty_r+0x1c>)
 800c510:	2300      	movs	r3, #0
 800c512:	4604      	mov	r4, r0
 800c514:	4608      	mov	r0, r1
 800c516:	602b      	str	r3, [r5, #0]
 800c518:	f7f7 f919 	bl	800374e <_isatty>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	d102      	bne.n	800c526 <_isatty_r+0x1a>
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	b103      	cbz	r3, 800c526 <_isatty_r+0x1a>
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20000c70 	.word	0x20000c70
 800c52c:	00000000 	.word	0x00000000

0800c530 <cos>:
 800c530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c532:	ec53 2b10 	vmov	r2, r3, d0
 800c536:	4826      	ldr	r0, [pc, #152]	; (800c5d0 <cos+0xa0>)
 800c538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c53c:	4281      	cmp	r1, r0
 800c53e:	dc06      	bgt.n	800c54e <cos+0x1e>
 800c540:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c5c8 <cos+0x98>
 800c544:	b005      	add	sp, #20
 800c546:	f85d eb04 	ldr.w	lr, [sp], #4
 800c54a:	f000 b925 	b.w	800c798 <__kernel_cos>
 800c54e:	4821      	ldr	r0, [pc, #132]	; (800c5d4 <cos+0xa4>)
 800c550:	4281      	cmp	r1, r0
 800c552:	dd09      	ble.n	800c568 <cos+0x38>
 800c554:	ee10 0a10 	vmov	r0, s0
 800c558:	4619      	mov	r1, r3
 800c55a:	f7f3 fe95 	bl	8000288 <__aeabi_dsub>
 800c55e:	ec41 0b10 	vmov	d0, r0, r1
 800c562:	b005      	add	sp, #20
 800c564:	f85d fb04 	ldr.w	pc, [sp], #4
 800c568:	4668      	mov	r0, sp
 800c56a:	f000 fa9d 	bl	800caa8 <__ieee754_rem_pio2>
 800c56e:	f000 0003 	and.w	r0, r0, #3
 800c572:	2801      	cmp	r0, #1
 800c574:	d00b      	beq.n	800c58e <cos+0x5e>
 800c576:	2802      	cmp	r0, #2
 800c578:	d016      	beq.n	800c5a8 <cos+0x78>
 800c57a:	b9e0      	cbnz	r0, 800c5b6 <cos+0x86>
 800c57c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c580:	ed9d 0b00 	vldr	d0, [sp]
 800c584:	f000 f908 	bl	800c798 <__kernel_cos>
 800c588:	ec51 0b10 	vmov	r0, r1, d0
 800c58c:	e7e7      	b.n	800c55e <cos+0x2e>
 800c58e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c592:	ed9d 0b00 	vldr	d0, [sp]
 800c596:	f000 f9c7 	bl	800c928 <__kernel_sin>
 800c59a:	ec53 2b10 	vmov	r2, r3, d0
 800c59e:	ee10 0a10 	vmov	r0, s0
 800c5a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c5a6:	e7da      	b.n	800c55e <cos+0x2e>
 800c5a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5ac:	ed9d 0b00 	vldr	d0, [sp]
 800c5b0:	f000 f8f2 	bl	800c798 <__kernel_cos>
 800c5b4:	e7f1      	b.n	800c59a <cos+0x6a>
 800c5b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5ba:	ed9d 0b00 	vldr	d0, [sp]
 800c5be:	2001      	movs	r0, #1
 800c5c0:	f000 f9b2 	bl	800c928 <__kernel_sin>
 800c5c4:	e7e0      	b.n	800c588 <cos+0x58>
 800c5c6:	bf00      	nop
	...
 800c5d0:	3fe921fb 	.word	0x3fe921fb
 800c5d4:	7fefffff 	.word	0x7fefffff

0800c5d8 <sin>:
 800c5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5da:	ec53 2b10 	vmov	r2, r3, d0
 800c5de:	4828      	ldr	r0, [pc, #160]	; (800c680 <sin+0xa8>)
 800c5e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5e4:	4281      	cmp	r1, r0
 800c5e6:	dc07      	bgt.n	800c5f8 <sin+0x20>
 800c5e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c678 <sin+0xa0>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	b005      	add	sp, #20
 800c5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f4:	f000 b998 	b.w	800c928 <__kernel_sin>
 800c5f8:	4822      	ldr	r0, [pc, #136]	; (800c684 <sin+0xac>)
 800c5fa:	4281      	cmp	r1, r0
 800c5fc:	dd09      	ble.n	800c612 <sin+0x3a>
 800c5fe:	ee10 0a10 	vmov	r0, s0
 800c602:	4619      	mov	r1, r3
 800c604:	f7f3 fe40 	bl	8000288 <__aeabi_dsub>
 800c608:	ec41 0b10 	vmov	d0, r0, r1
 800c60c:	b005      	add	sp, #20
 800c60e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c612:	4668      	mov	r0, sp
 800c614:	f000 fa48 	bl	800caa8 <__ieee754_rem_pio2>
 800c618:	f000 0003 	and.w	r0, r0, #3
 800c61c:	2801      	cmp	r0, #1
 800c61e:	d00c      	beq.n	800c63a <sin+0x62>
 800c620:	2802      	cmp	r0, #2
 800c622:	d011      	beq.n	800c648 <sin+0x70>
 800c624:	b9f0      	cbnz	r0, 800c664 <sin+0x8c>
 800c626:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c62a:	ed9d 0b00 	vldr	d0, [sp]
 800c62e:	2001      	movs	r0, #1
 800c630:	f000 f97a 	bl	800c928 <__kernel_sin>
 800c634:	ec51 0b10 	vmov	r0, r1, d0
 800c638:	e7e6      	b.n	800c608 <sin+0x30>
 800c63a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c63e:	ed9d 0b00 	vldr	d0, [sp]
 800c642:	f000 f8a9 	bl	800c798 <__kernel_cos>
 800c646:	e7f5      	b.n	800c634 <sin+0x5c>
 800c648:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c64c:	ed9d 0b00 	vldr	d0, [sp]
 800c650:	2001      	movs	r0, #1
 800c652:	f000 f969 	bl	800c928 <__kernel_sin>
 800c656:	ec53 2b10 	vmov	r2, r3, d0
 800c65a:	ee10 0a10 	vmov	r0, s0
 800c65e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c662:	e7d1      	b.n	800c608 <sin+0x30>
 800c664:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c668:	ed9d 0b00 	vldr	d0, [sp]
 800c66c:	f000 f894 	bl	800c798 <__kernel_cos>
 800c670:	e7f1      	b.n	800c656 <sin+0x7e>
 800c672:	bf00      	nop
 800c674:	f3af 8000 	nop.w
	...
 800c680:	3fe921fb 	.word	0x3fe921fb
 800c684:	7fefffff 	.word	0x7fefffff

0800c688 <cosl>:
 800c688:	f7ff bf52 	b.w	800c530 <cos>

0800c68c <sinl>:
 800c68c:	f7ff bfa4 	b.w	800c5d8 <sin>

0800c690 <acosl>:
 800c690:	f000 bc10 	b.w	800ceb4 <acos>
 800c694:	0000      	movs	r0, r0
	...

0800c698 <floor>:
 800c698:	ec51 0b10 	vmov	r0, r1, d0
 800c69c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c6a8:	2e13      	cmp	r6, #19
 800c6aa:	ee10 5a10 	vmov	r5, s0
 800c6ae:	ee10 8a10 	vmov	r8, s0
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	dc31      	bgt.n	800c71a <floor+0x82>
 800c6b6:	2e00      	cmp	r6, #0
 800c6b8:	da14      	bge.n	800c6e4 <floor+0x4c>
 800c6ba:	a333      	add	r3, pc, #204	; (adr r3, 800c788 <floor+0xf0>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f7f3 fde4 	bl	800028c <__adddf3>
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f7f4 fa26 	bl	8000b18 <__aeabi_dcmpgt>
 800c6cc:	b138      	cbz	r0, 800c6de <floor+0x46>
 800c6ce:	2c00      	cmp	r4, #0
 800c6d0:	da53      	bge.n	800c77a <floor+0xe2>
 800c6d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c6d6:	4325      	orrs	r5, r4
 800c6d8:	d052      	beq.n	800c780 <floor+0xe8>
 800c6da:	4c2d      	ldr	r4, [pc, #180]	; (800c790 <floor+0xf8>)
 800c6dc:	2500      	movs	r5, #0
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	e024      	b.n	800c72e <floor+0x96>
 800c6e4:	4f2b      	ldr	r7, [pc, #172]	; (800c794 <floor+0xfc>)
 800c6e6:	4137      	asrs	r7, r6
 800c6e8:	ea01 0307 	and.w	r3, r1, r7
 800c6ec:	4303      	orrs	r3, r0
 800c6ee:	d01e      	beq.n	800c72e <floor+0x96>
 800c6f0:	a325      	add	r3, pc, #148	; (adr r3, 800c788 <floor+0xf0>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f7f3 fdc9 	bl	800028c <__adddf3>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f7f4 fa0b 	bl	8000b18 <__aeabi_dcmpgt>
 800c702:	2800      	cmp	r0, #0
 800c704:	d0eb      	beq.n	800c6de <floor+0x46>
 800c706:	2c00      	cmp	r4, #0
 800c708:	bfbe      	ittt	lt
 800c70a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c70e:	4133      	asrlt	r3, r6
 800c710:	18e4      	addlt	r4, r4, r3
 800c712:	ea24 0407 	bic.w	r4, r4, r7
 800c716:	2500      	movs	r5, #0
 800c718:	e7e1      	b.n	800c6de <floor+0x46>
 800c71a:	2e33      	cmp	r6, #51	; 0x33
 800c71c:	dd0b      	ble.n	800c736 <floor+0x9e>
 800c71e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c722:	d104      	bne.n	800c72e <floor+0x96>
 800c724:	ee10 2a10 	vmov	r2, s0
 800c728:	460b      	mov	r3, r1
 800c72a:	f7f3 fdaf 	bl	800028c <__adddf3>
 800c72e:	ec41 0b10 	vmov	d0, r0, r1
 800c732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c736:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c73a:	f04f 37ff 	mov.w	r7, #4294967295
 800c73e:	40df      	lsrs	r7, r3
 800c740:	4238      	tst	r0, r7
 800c742:	d0f4      	beq.n	800c72e <floor+0x96>
 800c744:	a310      	add	r3, pc, #64	; (adr r3, 800c788 <floor+0xf0>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f7f3 fd9f 	bl	800028c <__adddf3>
 800c74e:	2200      	movs	r2, #0
 800c750:	2300      	movs	r3, #0
 800c752:	f7f4 f9e1 	bl	8000b18 <__aeabi_dcmpgt>
 800c756:	2800      	cmp	r0, #0
 800c758:	d0c1      	beq.n	800c6de <floor+0x46>
 800c75a:	2c00      	cmp	r4, #0
 800c75c:	da0a      	bge.n	800c774 <floor+0xdc>
 800c75e:	2e14      	cmp	r6, #20
 800c760:	d101      	bne.n	800c766 <floor+0xce>
 800c762:	3401      	adds	r4, #1
 800c764:	e006      	b.n	800c774 <floor+0xdc>
 800c766:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c76a:	2301      	movs	r3, #1
 800c76c:	40b3      	lsls	r3, r6
 800c76e:	441d      	add	r5, r3
 800c770:	45a8      	cmp	r8, r5
 800c772:	d8f6      	bhi.n	800c762 <floor+0xca>
 800c774:	ea25 0507 	bic.w	r5, r5, r7
 800c778:	e7b1      	b.n	800c6de <floor+0x46>
 800c77a:	2500      	movs	r5, #0
 800c77c:	462c      	mov	r4, r5
 800c77e:	e7ae      	b.n	800c6de <floor+0x46>
 800c780:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c784:	e7ab      	b.n	800c6de <floor+0x46>
 800c786:	bf00      	nop
 800c788:	8800759c 	.word	0x8800759c
 800c78c:	7e37e43c 	.word	0x7e37e43c
 800c790:	bff00000 	.word	0xbff00000
 800c794:	000fffff 	.word	0x000fffff

0800c798 <__kernel_cos>:
 800c798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	ec57 6b10 	vmov	r6, r7, d0
 800c7a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c7a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c7a8:	ed8d 1b00 	vstr	d1, [sp]
 800c7ac:	da07      	bge.n	800c7be <__kernel_cos+0x26>
 800c7ae:	ee10 0a10 	vmov	r0, s0
 800c7b2:	4639      	mov	r1, r7
 800c7b4:	f7f4 f9d0 	bl	8000b58 <__aeabi_d2iz>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	f000 8088 	beq.w	800c8ce <__kernel_cos+0x136>
 800c7be:	4632      	mov	r2, r6
 800c7c0:	463b      	mov	r3, r7
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f3 ff17 	bl	80005f8 <__aeabi_dmul>
 800c7ca:	4b51      	ldr	r3, [pc, #324]	; (800c910 <__kernel_cos+0x178>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	f7f3 ff11 	bl	80005f8 <__aeabi_dmul>
 800c7d6:	a340      	add	r3, pc, #256	; (adr r3, 800c8d8 <__kernel_cos+0x140>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	4682      	mov	sl, r0
 800c7de:	468b      	mov	fp, r1
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f3 ff08 	bl	80005f8 <__aeabi_dmul>
 800c7e8:	a33d      	add	r3, pc, #244	; (adr r3, 800c8e0 <__kernel_cos+0x148>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 fd4d 	bl	800028c <__adddf3>
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	462b      	mov	r3, r5
 800c7f6:	f7f3 feff 	bl	80005f8 <__aeabi_dmul>
 800c7fa:	a33b      	add	r3, pc, #236	; (adr r3, 800c8e8 <__kernel_cos+0x150>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f7f3 fd42 	bl	8000288 <__aeabi_dsub>
 800c804:	4622      	mov	r2, r4
 800c806:	462b      	mov	r3, r5
 800c808:	f7f3 fef6 	bl	80005f8 <__aeabi_dmul>
 800c80c:	a338      	add	r3, pc, #224	; (adr r3, 800c8f0 <__kernel_cos+0x158>)
 800c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c812:	f7f3 fd3b 	bl	800028c <__adddf3>
 800c816:	4622      	mov	r2, r4
 800c818:	462b      	mov	r3, r5
 800c81a:	f7f3 feed 	bl	80005f8 <__aeabi_dmul>
 800c81e:	a336      	add	r3, pc, #216	; (adr r3, 800c8f8 <__kernel_cos+0x160>)
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	f7f3 fd30 	bl	8000288 <__aeabi_dsub>
 800c828:	4622      	mov	r2, r4
 800c82a:	462b      	mov	r3, r5
 800c82c:	f7f3 fee4 	bl	80005f8 <__aeabi_dmul>
 800c830:	a333      	add	r3, pc, #204	; (adr r3, 800c900 <__kernel_cos+0x168>)
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	f7f3 fd29 	bl	800028c <__adddf3>
 800c83a:	4622      	mov	r2, r4
 800c83c:	462b      	mov	r3, r5
 800c83e:	f7f3 fedb 	bl	80005f8 <__aeabi_dmul>
 800c842:	4622      	mov	r2, r4
 800c844:	462b      	mov	r3, r5
 800c846:	f7f3 fed7 	bl	80005f8 <__aeabi_dmul>
 800c84a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c84e:	4604      	mov	r4, r0
 800c850:	460d      	mov	r5, r1
 800c852:	4630      	mov	r0, r6
 800c854:	4639      	mov	r1, r7
 800c856:	f7f3 fecf 	bl	80005f8 <__aeabi_dmul>
 800c85a:	460b      	mov	r3, r1
 800c85c:	4602      	mov	r2, r0
 800c85e:	4629      	mov	r1, r5
 800c860:	4620      	mov	r0, r4
 800c862:	f7f3 fd11 	bl	8000288 <__aeabi_dsub>
 800c866:	4b2b      	ldr	r3, [pc, #172]	; (800c914 <__kernel_cos+0x17c>)
 800c868:	4598      	cmp	r8, r3
 800c86a:	4606      	mov	r6, r0
 800c86c:	460f      	mov	r7, r1
 800c86e:	dc10      	bgt.n	800c892 <__kernel_cos+0xfa>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	4650      	mov	r0, sl
 800c876:	4659      	mov	r1, fp
 800c878:	f7f3 fd06 	bl	8000288 <__aeabi_dsub>
 800c87c:	460b      	mov	r3, r1
 800c87e:	4926      	ldr	r1, [pc, #152]	; (800c918 <__kernel_cos+0x180>)
 800c880:	4602      	mov	r2, r0
 800c882:	2000      	movs	r0, #0
 800c884:	f7f3 fd00 	bl	8000288 <__aeabi_dsub>
 800c888:	ec41 0b10 	vmov	d0, r0, r1
 800c88c:	b003      	add	sp, #12
 800c88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c892:	4b22      	ldr	r3, [pc, #136]	; (800c91c <__kernel_cos+0x184>)
 800c894:	4920      	ldr	r1, [pc, #128]	; (800c918 <__kernel_cos+0x180>)
 800c896:	4598      	cmp	r8, r3
 800c898:	bfcc      	ite	gt
 800c89a:	4d21      	ldrgt	r5, [pc, #132]	; (800c920 <__kernel_cos+0x188>)
 800c89c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c8a0:	2400      	movs	r4, #0
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	f7f3 fcee 	bl	8000288 <__aeabi_dsub>
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	4680      	mov	r8, r0
 800c8b0:	4689      	mov	r9, r1
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	4650      	mov	r0, sl
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	f7f3 fce6 	bl	8000288 <__aeabi_dsub>
 800c8bc:	4632      	mov	r2, r6
 800c8be:	463b      	mov	r3, r7
 800c8c0:	f7f3 fce2 	bl	8000288 <__aeabi_dsub>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4640      	mov	r0, r8
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	e7da      	b.n	800c884 <__kernel_cos+0xec>
 800c8ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c908 <__kernel_cos+0x170>
 800c8d2:	e7db      	b.n	800c88c <__kernel_cos+0xf4>
 800c8d4:	f3af 8000 	nop.w
 800c8d8:	be8838d4 	.word	0xbe8838d4
 800c8dc:	bda8fae9 	.word	0xbda8fae9
 800c8e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c8e4:	3e21ee9e 	.word	0x3e21ee9e
 800c8e8:	809c52ad 	.word	0x809c52ad
 800c8ec:	3e927e4f 	.word	0x3e927e4f
 800c8f0:	19cb1590 	.word	0x19cb1590
 800c8f4:	3efa01a0 	.word	0x3efa01a0
 800c8f8:	16c15177 	.word	0x16c15177
 800c8fc:	3f56c16c 	.word	0x3f56c16c
 800c900:	5555554c 	.word	0x5555554c
 800c904:	3fa55555 	.word	0x3fa55555
 800c908:	00000000 	.word	0x00000000
 800c90c:	3ff00000 	.word	0x3ff00000
 800c910:	3fe00000 	.word	0x3fe00000
 800c914:	3fd33332 	.word	0x3fd33332
 800c918:	3ff00000 	.word	0x3ff00000
 800c91c:	3fe90000 	.word	0x3fe90000
 800c920:	3fd20000 	.word	0x3fd20000
 800c924:	00000000 	.word	0x00000000

0800c928 <__kernel_sin>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	ed2d 8b04 	vpush	{d8-d9}
 800c930:	eeb0 8a41 	vmov.f32	s16, s2
 800c934:	eef0 8a61 	vmov.f32	s17, s3
 800c938:	ec55 4b10 	vmov	r4, r5, d0
 800c93c:	b083      	sub	sp, #12
 800c93e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c942:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c946:	9001      	str	r0, [sp, #4]
 800c948:	da06      	bge.n	800c958 <__kernel_sin+0x30>
 800c94a:	ee10 0a10 	vmov	r0, s0
 800c94e:	4629      	mov	r1, r5
 800c950:	f7f4 f902 	bl	8000b58 <__aeabi_d2iz>
 800c954:	2800      	cmp	r0, #0
 800c956:	d051      	beq.n	800c9fc <__kernel_sin+0xd4>
 800c958:	4622      	mov	r2, r4
 800c95a:	462b      	mov	r3, r5
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 fe4a 	bl	80005f8 <__aeabi_dmul>
 800c964:	4682      	mov	sl, r0
 800c966:	468b      	mov	fp, r1
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	4620      	mov	r0, r4
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f3 fe42 	bl	80005f8 <__aeabi_dmul>
 800c974:	a341      	add	r3, pc, #260	; (adr r3, 800ca7c <__kernel_sin+0x154>)
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	4680      	mov	r8, r0
 800c97c:	4689      	mov	r9, r1
 800c97e:	4650      	mov	r0, sl
 800c980:	4659      	mov	r1, fp
 800c982:	f7f3 fe39 	bl	80005f8 <__aeabi_dmul>
 800c986:	a33f      	add	r3, pc, #252	; (adr r3, 800ca84 <__kernel_sin+0x15c>)
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	f7f3 fc7c 	bl	8000288 <__aeabi_dsub>
 800c990:	4652      	mov	r2, sl
 800c992:	465b      	mov	r3, fp
 800c994:	f7f3 fe30 	bl	80005f8 <__aeabi_dmul>
 800c998:	a33c      	add	r3, pc, #240	; (adr r3, 800ca8c <__kernel_sin+0x164>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 fc75 	bl	800028c <__adddf3>
 800c9a2:	4652      	mov	r2, sl
 800c9a4:	465b      	mov	r3, fp
 800c9a6:	f7f3 fe27 	bl	80005f8 <__aeabi_dmul>
 800c9aa:	a33a      	add	r3, pc, #232	; (adr r3, 800ca94 <__kernel_sin+0x16c>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7f3 fc6a 	bl	8000288 <__aeabi_dsub>
 800c9b4:	4652      	mov	r2, sl
 800c9b6:	465b      	mov	r3, fp
 800c9b8:	f7f3 fe1e 	bl	80005f8 <__aeabi_dmul>
 800c9bc:	a337      	add	r3, pc, #220	; (adr r3, 800ca9c <__kernel_sin+0x174>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7f3 fc63 	bl	800028c <__adddf3>
 800c9c6:	9b01      	ldr	r3, [sp, #4]
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	460f      	mov	r7, r1
 800c9cc:	b9eb      	cbnz	r3, 800ca0a <__kernel_sin+0xe2>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	4659      	mov	r1, fp
 800c9d6:	f7f3 fe0f 	bl	80005f8 <__aeabi_dmul>
 800c9da:	a325      	add	r3, pc, #148	; (adr r3, 800ca70 <__kernel_sin+0x148>)
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	f7f3 fc52 	bl	8000288 <__aeabi_dsub>
 800c9e4:	4642      	mov	r2, r8
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	f7f3 fe06 	bl	80005f8 <__aeabi_dmul>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	f7f3 fc4a 	bl	800028c <__adddf3>
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	460d      	mov	r5, r1
 800c9fc:	ec45 4b10 	vmov	d0, r4, r5
 800ca00:	b003      	add	sp, #12
 800ca02:	ecbd 8b04 	vpop	{d8-d9}
 800ca06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0a:	4b1b      	ldr	r3, [pc, #108]	; (800ca78 <__kernel_sin+0x150>)
 800ca0c:	ec51 0b18 	vmov	r0, r1, d8
 800ca10:	2200      	movs	r2, #0
 800ca12:	f7f3 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ca16:	4632      	mov	r2, r6
 800ca18:	ec41 0b19 	vmov	d9, r0, r1
 800ca1c:	463b      	mov	r3, r7
 800ca1e:	4640      	mov	r0, r8
 800ca20:	4649      	mov	r1, r9
 800ca22:	f7f3 fde9 	bl	80005f8 <__aeabi_dmul>
 800ca26:	4602      	mov	r2, r0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	ec51 0b19 	vmov	r0, r1, d9
 800ca2e:	f7f3 fc2b 	bl	8000288 <__aeabi_dsub>
 800ca32:	4652      	mov	r2, sl
 800ca34:	465b      	mov	r3, fp
 800ca36:	f7f3 fddf 	bl	80005f8 <__aeabi_dmul>
 800ca3a:	ec53 2b18 	vmov	r2, r3, d8
 800ca3e:	f7f3 fc23 	bl	8000288 <__aeabi_dsub>
 800ca42:	a30b      	add	r3, pc, #44	; (adr r3, 800ca70 <__kernel_sin+0x148>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	4606      	mov	r6, r0
 800ca4a:	460f      	mov	r7, r1
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	4649      	mov	r1, r9
 800ca50:	f7f3 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4630      	mov	r0, r6
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	f7f3 fc16 	bl	800028c <__adddf3>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	4620      	mov	r0, r4
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7f3 fc0e 	bl	8000288 <__aeabi_dsub>
 800ca6c:	e7c4      	b.n	800c9f8 <__kernel_sin+0xd0>
 800ca6e:	bf00      	nop
 800ca70:	55555549 	.word	0x55555549
 800ca74:	3fc55555 	.word	0x3fc55555
 800ca78:	3fe00000 	.word	0x3fe00000
 800ca7c:	5acfd57c 	.word	0x5acfd57c
 800ca80:	3de5d93a 	.word	0x3de5d93a
 800ca84:	8a2b9ceb 	.word	0x8a2b9ceb
 800ca88:	3e5ae5e6 	.word	0x3e5ae5e6
 800ca8c:	57b1fe7d 	.word	0x57b1fe7d
 800ca90:	3ec71de3 	.word	0x3ec71de3
 800ca94:	19c161d5 	.word	0x19c161d5
 800ca98:	3f2a01a0 	.word	0x3f2a01a0
 800ca9c:	1110f8a6 	.word	0x1110f8a6
 800caa0:	3f811111 	.word	0x3f811111
 800caa4:	00000000 	.word	0x00000000

0800caa8 <__ieee754_rem_pio2>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	ed2d 8b02 	vpush	{d8}
 800cab0:	ec55 4b10 	vmov	r4, r5, d0
 800cab4:	4bca      	ldr	r3, [pc, #808]	; (800cde0 <__ieee754_rem_pio2+0x338>)
 800cab6:	b08b      	sub	sp, #44	; 0x2c
 800cab8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cabc:	4598      	cmp	r8, r3
 800cabe:	4682      	mov	sl, r0
 800cac0:	9502      	str	r5, [sp, #8]
 800cac2:	dc08      	bgt.n	800cad6 <__ieee754_rem_pio2+0x2e>
 800cac4:	2200      	movs	r2, #0
 800cac6:	2300      	movs	r3, #0
 800cac8:	ed80 0b00 	vstr	d0, [r0]
 800cacc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cad0:	f04f 0b00 	mov.w	fp, #0
 800cad4:	e028      	b.n	800cb28 <__ieee754_rem_pio2+0x80>
 800cad6:	4bc3      	ldr	r3, [pc, #780]	; (800cde4 <__ieee754_rem_pio2+0x33c>)
 800cad8:	4598      	cmp	r8, r3
 800cada:	dc78      	bgt.n	800cbce <__ieee754_rem_pio2+0x126>
 800cadc:	9b02      	ldr	r3, [sp, #8]
 800cade:	4ec2      	ldr	r6, [pc, #776]	; (800cde8 <__ieee754_rem_pio2+0x340>)
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	ee10 0a10 	vmov	r0, s0
 800cae6:	a3b0      	add	r3, pc, #704	; (adr r3, 800cda8 <__ieee754_rem_pio2+0x300>)
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	4629      	mov	r1, r5
 800caee:	dd39      	ble.n	800cb64 <__ieee754_rem_pio2+0xbc>
 800caf0:	f7f3 fbca 	bl	8000288 <__aeabi_dsub>
 800caf4:	45b0      	cmp	r8, r6
 800caf6:	4604      	mov	r4, r0
 800caf8:	460d      	mov	r5, r1
 800cafa:	d01b      	beq.n	800cb34 <__ieee754_rem_pio2+0x8c>
 800cafc:	a3ac      	add	r3, pc, #688	; (adr r3, 800cdb0 <__ieee754_rem_pio2+0x308>)
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	f7f3 fbc1 	bl	8000288 <__aeabi_dsub>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	e9ca 2300 	strd	r2, r3, [sl]
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	f7f3 fbb9 	bl	8000288 <__aeabi_dsub>
 800cb16:	a3a6      	add	r3, pc, #664	; (adr r3, 800cdb0 <__ieee754_rem_pio2+0x308>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	f7f3 fbb4 	bl	8000288 <__aeabi_dsub>
 800cb20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb24:	f04f 0b01 	mov.w	fp, #1
 800cb28:	4658      	mov	r0, fp
 800cb2a:	b00b      	add	sp, #44	; 0x2c
 800cb2c:	ecbd 8b02 	vpop	{d8}
 800cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb34:	a3a0      	add	r3, pc, #640	; (adr r3, 800cdb8 <__ieee754_rem_pio2+0x310>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	f7f3 fba5 	bl	8000288 <__aeabi_dsub>
 800cb3e:	a3a0      	add	r3, pc, #640	; (adr r3, 800cdc0 <__ieee754_rem_pio2+0x318>)
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	4604      	mov	r4, r0
 800cb46:	460d      	mov	r5, r1
 800cb48:	f7f3 fb9e 	bl	8000288 <__aeabi_dsub>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	e9ca 2300 	strd	r2, r3, [sl]
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fb96 	bl	8000288 <__aeabi_dsub>
 800cb5c:	a398      	add	r3, pc, #608	; (adr r3, 800cdc0 <__ieee754_rem_pio2+0x318>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	e7db      	b.n	800cb1c <__ieee754_rem_pio2+0x74>
 800cb64:	f7f3 fb92 	bl	800028c <__adddf3>
 800cb68:	45b0      	cmp	r8, r6
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	d016      	beq.n	800cb9e <__ieee754_rem_pio2+0xf6>
 800cb70:	a38f      	add	r3, pc, #572	; (adr r3, 800cdb0 <__ieee754_rem_pio2+0x308>)
 800cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb76:	f7f3 fb89 	bl	800028c <__adddf3>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	e9ca 2300 	strd	r2, r3, [sl]
 800cb82:	4620      	mov	r0, r4
 800cb84:	4629      	mov	r1, r5
 800cb86:	f7f3 fb7f 	bl	8000288 <__aeabi_dsub>
 800cb8a:	a389      	add	r3, pc, #548	; (adr r3, 800cdb0 <__ieee754_rem_pio2+0x308>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f7f3 fb7c 	bl	800028c <__adddf3>
 800cb94:	f04f 3bff 	mov.w	fp, #4294967295
 800cb98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb9c:	e7c4      	b.n	800cb28 <__ieee754_rem_pio2+0x80>
 800cb9e:	a386      	add	r3, pc, #536	; (adr r3, 800cdb8 <__ieee754_rem_pio2+0x310>)
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	f7f3 fb72 	bl	800028c <__adddf3>
 800cba8:	a385      	add	r3, pc, #532	; (adr r3, 800cdc0 <__ieee754_rem_pio2+0x318>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	4604      	mov	r4, r0
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	f7f3 fb6b 	bl	800028c <__adddf3>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	e9ca 2300 	strd	r2, r3, [sl]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	f7f3 fb61 	bl	8000288 <__aeabi_dsub>
 800cbc6:	a37e      	add	r3, pc, #504	; (adr r3, 800cdc0 <__ieee754_rem_pio2+0x318>)
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	e7e0      	b.n	800cb90 <__ieee754_rem_pio2+0xe8>
 800cbce:	4b87      	ldr	r3, [pc, #540]	; (800cdec <__ieee754_rem_pio2+0x344>)
 800cbd0:	4598      	cmp	r8, r3
 800cbd2:	f300 80d8 	bgt.w	800cd86 <__ieee754_rem_pio2+0x2de>
 800cbd6:	f000 f9a1 	bl	800cf1c <fabs>
 800cbda:	ec55 4b10 	vmov	r4, r5, d0
 800cbde:	ee10 0a10 	vmov	r0, s0
 800cbe2:	a379      	add	r3, pc, #484	; (adr r3, 800cdc8 <__ieee754_rem_pio2+0x320>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 fd05 	bl	80005f8 <__aeabi_dmul>
 800cbee:	4b80      	ldr	r3, [pc, #512]	; (800cdf0 <__ieee754_rem_pio2+0x348>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f7f3 fb4b 	bl	800028c <__adddf3>
 800cbf6:	f7f3 ffaf 	bl	8000b58 <__aeabi_d2iz>
 800cbfa:	4683      	mov	fp, r0
 800cbfc:	f7f3 fc92 	bl	8000524 <__aeabi_i2d>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	ec43 2b18 	vmov	d8, r2, r3
 800cc08:	a367      	add	r3, pc, #412	; (adr r3, 800cda8 <__ieee754_rem_pio2+0x300>)
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	f7f3 fcf3 	bl	80005f8 <__aeabi_dmul>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4620      	mov	r0, r4
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7f3 fb35 	bl	8000288 <__aeabi_dsub>
 800cc1e:	a364      	add	r3, pc, #400	; (adr r3, 800cdb0 <__ieee754_rem_pio2+0x308>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	4606      	mov	r6, r0
 800cc26:	460f      	mov	r7, r1
 800cc28:	ec51 0b18 	vmov	r0, r1, d8
 800cc2c:	f7f3 fce4 	bl	80005f8 <__aeabi_dmul>
 800cc30:	f1bb 0f1f 	cmp.w	fp, #31
 800cc34:	4604      	mov	r4, r0
 800cc36:	460d      	mov	r5, r1
 800cc38:	dc0d      	bgt.n	800cc56 <__ieee754_rem_pio2+0x1ae>
 800cc3a:	4b6e      	ldr	r3, [pc, #440]	; (800cdf4 <__ieee754_rem_pio2+0x34c>)
 800cc3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc44:	4543      	cmp	r3, r8
 800cc46:	d006      	beq.n	800cc56 <__ieee754_rem_pio2+0x1ae>
 800cc48:	4622      	mov	r2, r4
 800cc4a:	462b      	mov	r3, r5
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4639      	mov	r1, r7
 800cc50:	f7f3 fb1a 	bl	8000288 <__aeabi_dsub>
 800cc54:	e00e      	b.n	800cc74 <__ieee754_rem_pio2+0x1cc>
 800cc56:	462b      	mov	r3, r5
 800cc58:	4622      	mov	r2, r4
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	f7f3 fb13 	bl	8000288 <__aeabi_dsub>
 800cc62:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cc66:	9303      	str	r3, [sp, #12]
 800cc68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc6c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800cc70:	2b10      	cmp	r3, #16
 800cc72:	dc02      	bgt.n	800cc7a <__ieee754_rem_pio2+0x1d2>
 800cc74:	e9ca 0100 	strd	r0, r1, [sl]
 800cc78:	e039      	b.n	800ccee <__ieee754_rem_pio2+0x246>
 800cc7a:	a34f      	add	r3, pc, #316	; (adr r3, 800cdb8 <__ieee754_rem_pio2+0x310>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	ec51 0b18 	vmov	r0, r1, d8
 800cc84:	f7f3 fcb8 	bl	80005f8 <__aeabi_dmul>
 800cc88:	4604      	mov	r4, r0
 800cc8a:	460d      	mov	r5, r1
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f3 faf8 	bl	8000288 <__aeabi_dsub>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	4689      	mov	r9, r1
 800cca0:	4630      	mov	r0, r6
 800cca2:	4639      	mov	r1, r7
 800cca4:	f7f3 faf0 	bl	8000288 <__aeabi_dsub>
 800cca8:	4622      	mov	r2, r4
 800ccaa:	462b      	mov	r3, r5
 800ccac:	f7f3 faec 	bl	8000288 <__aeabi_dsub>
 800ccb0:	a343      	add	r3, pc, #268	; (adr r3, 800cdc0 <__ieee754_rem_pio2+0x318>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	460d      	mov	r5, r1
 800ccba:	ec51 0b18 	vmov	r0, r1, d8
 800ccbe:	f7f3 fc9b 	bl	80005f8 <__aeabi_dmul>
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	462b      	mov	r3, r5
 800ccc6:	f7f3 fadf 	bl	8000288 <__aeabi_dsub>
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4604      	mov	r4, r0
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	f7f3 fad7 	bl	8000288 <__aeabi_dsub>
 800ccda:	9a03      	ldr	r2, [sp, #12]
 800ccdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	2b31      	cmp	r3, #49	; 0x31
 800cce4:	dc24      	bgt.n	800cd30 <__ieee754_rem_pio2+0x288>
 800cce6:	e9ca 0100 	strd	r0, r1, [sl]
 800ccea:	4646      	mov	r6, r8
 800ccec:	464f      	mov	r7, r9
 800ccee:	e9da 8900 	ldrd	r8, r9, [sl]
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	4642      	mov	r2, r8
 800ccf6:	464b      	mov	r3, r9
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	f7f3 fac5 	bl	8000288 <__aeabi_dsub>
 800ccfe:	462b      	mov	r3, r5
 800cd00:	4622      	mov	r2, r4
 800cd02:	f7f3 fac1 	bl	8000288 <__aeabi_dsub>
 800cd06:	9b02      	ldr	r3, [sp, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd0e:	f6bf af0b 	bge.w	800cb28 <__ieee754_rem_pio2+0x80>
 800cd12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd16:	f8ca 3004 	str.w	r3, [sl, #4]
 800cd1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd1e:	f8ca 8000 	str.w	r8, [sl]
 800cd22:	f8ca 0008 	str.w	r0, [sl, #8]
 800cd26:	f8ca 300c 	str.w	r3, [sl, #12]
 800cd2a:	f1cb 0b00 	rsb	fp, fp, #0
 800cd2e:	e6fb      	b.n	800cb28 <__ieee754_rem_pio2+0x80>
 800cd30:	a327      	add	r3, pc, #156	; (adr r3, 800cdd0 <__ieee754_rem_pio2+0x328>)
 800cd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd36:	ec51 0b18 	vmov	r0, r1, d8
 800cd3a:	f7f3 fc5d 	bl	80005f8 <__aeabi_dmul>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	460d      	mov	r5, r1
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	4640      	mov	r0, r8
 800cd48:	4649      	mov	r1, r9
 800cd4a:	f7f3 fa9d 	bl	8000288 <__aeabi_dsub>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	4640      	mov	r0, r8
 800cd58:	4649      	mov	r1, r9
 800cd5a:	f7f3 fa95 	bl	8000288 <__aeabi_dsub>
 800cd5e:	4622      	mov	r2, r4
 800cd60:	462b      	mov	r3, r5
 800cd62:	f7f3 fa91 	bl	8000288 <__aeabi_dsub>
 800cd66:	a31c      	add	r3, pc, #112	; (adr r3, 800cdd8 <__ieee754_rem_pio2+0x330>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	460d      	mov	r5, r1
 800cd70:	ec51 0b18 	vmov	r0, r1, d8
 800cd74:	f7f3 fc40 	bl	80005f8 <__aeabi_dmul>
 800cd78:	4622      	mov	r2, r4
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	f7f3 fa84 	bl	8000288 <__aeabi_dsub>
 800cd80:	4604      	mov	r4, r0
 800cd82:	460d      	mov	r5, r1
 800cd84:	e760      	b.n	800cc48 <__ieee754_rem_pio2+0x1a0>
 800cd86:	4b1c      	ldr	r3, [pc, #112]	; (800cdf8 <__ieee754_rem_pio2+0x350>)
 800cd88:	4598      	cmp	r8, r3
 800cd8a:	dd37      	ble.n	800cdfc <__ieee754_rem_pio2+0x354>
 800cd8c:	ee10 2a10 	vmov	r2, s0
 800cd90:	462b      	mov	r3, r5
 800cd92:	4620      	mov	r0, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	f7f3 fa77 	bl	8000288 <__aeabi_dsub>
 800cd9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd9e:	e9ca 0100 	strd	r0, r1, [sl]
 800cda2:	e695      	b.n	800cad0 <__ieee754_rem_pio2+0x28>
 800cda4:	f3af 8000 	nop.w
 800cda8:	54400000 	.word	0x54400000
 800cdac:	3ff921fb 	.word	0x3ff921fb
 800cdb0:	1a626331 	.word	0x1a626331
 800cdb4:	3dd0b461 	.word	0x3dd0b461
 800cdb8:	1a600000 	.word	0x1a600000
 800cdbc:	3dd0b461 	.word	0x3dd0b461
 800cdc0:	2e037073 	.word	0x2e037073
 800cdc4:	3ba3198a 	.word	0x3ba3198a
 800cdc8:	6dc9c883 	.word	0x6dc9c883
 800cdcc:	3fe45f30 	.word	0x3fe45f30
 800cdd0:	2e000000 	.word	0x2e000000
 800cdd4:	3ba3198a 	.word	0x3ba3198a
 800cdd8:	252049c1 	.word	0x252049c1
 800cddc:	397b839a 	.word	0x397b839a
 800cde0:	3fe921fb 	.word	0x3fe921fb
 800cde4:	4002d97b 	.word	0x4002d97b
 800cde8:	3ff921fb 	.word	0x3ff921fb
 800cdec:	413921fb 	.word	0x413921fb
 800cdf0:	3fe00000 	.word	0x3fe00000
 800cdf4:	0800f8f8 	.word	0x0800f8f8
 800cdf8:	7fefffff 	.word	0x7fefffff
 800cdfc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800ce00:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800ce04:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800ce08:	4620      	mov	r0, r4
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	f7f3 fea4 	bl	8000b58 <__aeabi_d2iz>
 800ce10:	f7f3 fb88 	bl	8000524 <__aeabi_i2d>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	4620      	mov	r0, r4
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce20:	f7f3 fa32 	bl	8000288 <__aeabi_dsub>
 800ce24:	4b21      	ldr	r3, [pc, #132]	; (800ceac <__ieee754_rem_pio2+0x404>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	f7f3 fbe6 	bl	80005f8 <__aeabi_dmul>
 800ce2c:	460d      	mov	r5, r1
 800ce2e:	4604      	mov	r4, r0
 800ce30:	f7f3 fe92 	bl	8000b58 <__aeabi_d2iz>
 800ce34:	f7f3 fb76 	bl	8000524 <__aeabi_i2d>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	4629      	mov	r1, r5
 800ce40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce44:	f7f3 fa20 	bl	8000288 <__aeabi_dsub>
 800ce48:	4b18      	ldr	r3, [pc, #96]	; (800ceac <__ieee754_rem_pio2+0x404>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f7f3 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ce50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce54:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ce58:	2703      	movs	r7, #3
 800ce5a:	2400      	movs	r4, #0
 800ce5c:	2500      	movs	r5, #0
 800ce5e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800ce62:	4622      	mov	r2, r4
 800ce64:	462b      	mov	r3, r5
 800ce66:	46b9      	mov	r9, r7
 800ce68:	3f01      	subs	r7, #1
 800ce6a:	f7f3 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d1f5      	bne.n	800ce5e <__ieee754_rem_pio2+0x3b6>
 800ce72:	4b0f      	ldr	r3, [pc, #60]	; (800ceb0 <__ieee754_rem_pio2+0x408>)
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	2302      	movs	r3, #2
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	4632      	mov	r2, r6
 800ce7c:	464b      	mov	r3, r9
 800ce7e:	4651      	mov	r1, sl
 800ce80:	a804      	add	r0, sp, #16
 800ce82:	f000 f855 	bl	800cf30 <__kernel_rem_pio2>
 800ce86:	9b02      	ldr	r3, [sp, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	4683      	mov	fp, r0
 800ce8c:	f6bf ae4c 	bge.w	800cb28 <__ieee754_rem_pio2+0x80>
 800ce90:	e9da 2100 	ldrd	r2, r1, [sl]
 800ce94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce98:	e9ca 2300 	strd	r2, r3, [sl]
 800ce9c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cea4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cea8:	e73f      	b.n	800cd2a <__ieee754_rem_pio2+0x282>
 800ceaa:	bf00      	nop
 800ceac:	41700000 	.word	0x41700000
 800ceb0:	0800f978 	.word	0x0800f978

0800ceb4 <acos>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	ed2d 8b02 	vpush	{d8}
 800ceba:	ec55 4b10 	vmov	r4, r5, d0
 800cebe:	f000 fb87 	bl	800d5d0 <__ieee754_acos>
 800cec2:	4622      	mov	r2, r4
 800cec4:	462b      	mov	r3, r5
 800cec6:	4620      	mov	r0, r4
 800cec8:	4629      	mov	r1, r5
 800ceca:	eeb0 8a40 	vmov.f32	s16, s0
 800cece:	eef0 8a60 	vmov.f32	s17, s1
 800ced2:	f7f3 fe2b 	bl	8000b2c <__aeabi_dcmpun>
 800ced6:	b9a8      	cbnz	r0, 800cf04 <acos+0x50>
 800ced8:	ec45 4b10 	vmov	d0, r4, r5
 800cedc:	f000 f81e 	bl	800cf1c <fabs>
 800cee0:	4b0c      	ldr	r3, [pc, #48]	; (800cf14 <acos+0x60>)
 800cee2:	ec51 0b10 	vmov	r0, r1, d0
 800cee6:	2200      	movs	r2, #0
 800cee8:	f7f3 fe16 	bl	8000b18 <__aeabi_dcmpgt>
 800ceec:	b150      	cbz	r0, 800cf04 <acos+0x50>
 800ceee:	f7fc fe9b 	bl	8009c28 <__errno>
 800cef2:	ecbd 8b02 	vpop	{d8}
 800cef6:	2321      	movs	r3, #33	; 0x21
 800cef8:	6003      	str	r3, [r0, #0]
 800cefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cefe:	4806      	ldr	r0, [pc, #24]	; (800cf18 <acos+0x64>)
 800cf00:	f7fc bed6 	b.w	8009cb0 <nan>
 800cf04:	eeb0 0a48 	vmov.f32	s0, s16
 800cf08:	eef0 0a68 	vmov.f32	s1, s17
 800cf0c:	ecbd 8b02 	vpop	{d8}
 800cf10:	bd38      	pop	{r3, r4, r5, pc}
 800cf12:	bf00      	nop
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	0800f6b6 	.word	0x0800f6b6

0800cf1c <fabs>:
 800cf1c:	ec51 0b10 	vmov	r0, r1, d0
 800cf20:	ee10 2a10 	vmov	r2, s0
 800cf24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf28:	ec43 2b10 	vmov	d0, r2, r3
 800cf2c:	4770      	bx	lr
	...

0800cf30 <__kernel_rem_pio2>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	ed2d 8b02 	vpush	{d8}
 800cf38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cf3c:	f112 0f14 	cmn.w	r2, #20
 800cf40:	9306      	str	r3, [sp, #24]
 800cf42:	9104      	str	r1, [sp, #16]
 800cf44:	4bc2      	ldr	r3, [pc, #776]	; (800d250 <__kernel_rem_pio2+0x320>)
 800cf46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cf48:	9009      	str	r0, [sp, #36]	; 0x24
 800cf4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	9b06      	ldr	r3, [sp, #24]
 800cf52:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf56:	bfa8      	it	ge
 800cf58:	1ed4      	subge	r4, r2, #3
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	bfb2      	itee	lt
 800cf5e:	2400      	movlt	r4, #0
 800cf60:	2318      	movge	r3, #24
 800cf62:	fb94 f4f3 	sdivge	r4, r4, r3
 800cf66:	f06f 0317 	mvn.w	r3, #23
 800cf6a:	fb04 3303 	mla	r3, r4, r3, r3
 800cf6e:	eb03 0a02 	add.w	sl, r3, r2
 800cf72:	9b00      	ldr	r3, [sp, #0]
 800cf74:	9a05      	ldr	r2, [sp, #20]
 800cf76:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d240 <__kernel_rem_pio2+0x310>
 800cf7a:	eb03 0802 	add.w	r8, r3, r2
 800cf7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cf80:	1aa7      	subs	r7, r4, r2
 800cf82:	ae20      	add	r6, sp, #128	; 0x80
 800cf84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cf88:	2500      	movs	r5, #0
 800cf8a:	4545      	cmp	r5, r8
 800cf8c:	dd13      	ble.n	800cfb6 <__kernel_rem_pio2+0x86>
 800cf8e:	9b06      	ldr	r3, [sp, #24]
 800cf90:	aa20      	add	r2, sp, #128	; 0x80
 800cf92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cf96:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cf9a:	f04f 0800 	mov.w	r8, #0
 800cf9e:	9b00      	ldr	r3, [sp, #0]
 800cfa0:	4598      	cmp	r8, r3
 800cfa2:	dc31      	bgt.n	800d008 <__kernel_rem_pio2+0xd8>
 800cfa4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d240 <__kernel_rem_pio2+0x310>
 800cfa8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cfac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cfb0:	462f      	mov	r7, r5
 800cfb2:	2600      	movs	r6, #0
 800cfb4:	e01b      	b.n	800cfee <__kernel_rem_pio2+0xbe>
 800cfb6:	42ef      	cmn	r7, r5
 800cfb8:	d407      	bmi.n	800cfca <__kernel_rem_pio2+0x9a>
 800cfba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cfbe:	f7f3 fab1 	bl	8000524 <__aeabi_i2d>
 800cfc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cfc6:	3501      	adds	r5, #1
 800cfc8:	e7df      	b.n	800cf8a <__kernel_rem_pio2+0x5a>
 800cfca:	ec51 0b18 	vmov	r0, r1, d8
 800cfce:	e7f8      	b.n	800cfc2 <__kernel_rem_pio2+0x92>
 800cfd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cfd8:	f7f3 fb0e 	bl	80005f8 <__aeabi_dmul>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfe4:	f7f3 f952 	bl	800028c <__adddf3>
 800cfe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfec:	3601      	adds	r6, #1
 800cfee:	9b05      	ldr	r3, [sp, #20]
 800cff0:	429e      	cmp	r6, r3
 800cff2:	f1a7 0708 	sub.w	r7, r7, #8
 800cff6:	ddeb      	ble.n	800cfd0 <__kernel_rem_pio2+0xa0>
 800cff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cffc:	f108 0801 	add.w	r8, r8, #1
 800d000:	ecab 7b02 	vstmia	fp!, {d7}
 800d004:	3508      	adds	r5, #8
 800d006:	e7ca      	b.n	800cf9e <__kernel_rem_pio2+0x6e>
 800d008:	9b00      	ldr	r3, [sp, #0]
 800d00a:	aa0c      	add	r2, sp, #48	; 0x30
 800d00c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d010:	930b      	str	r3, [sp, #44]	; 0x2c
 800d012:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d014:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d018:	9c00      	ldr	r4, [sp, #0]
 800d01a:	930a      	str	r3, [sp, #40]	; 0x28
 800d01c:	00e3      	lsls	r3, r4, #3
 800d01e:	9308      	str	r3, [sp, #32]
 800d020:	ab98      	add	r3, sp, #608	; 0x260
 800d022:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d026:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d02a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d02e:	ab70      	add	r3, sp, #448	; 0x1c0
 800d030:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d034:	46c3      	mov	fp, r8
 800d036:	46a1      	mov	r9, r4
 800d038:	f1b9 0f00 	cmp.w	r9, #0
 800d03c:	f1a5 0508 	sub.w	r5, r5, #8
 800d040:	dc77      	bgt.n	800d132 <__kernel_rem_pio2+0x202>
 800d042:	ec47 6b10 	vmov	d0, r6, r7
 800d046:	4650      	mov	r0, sl
 800d048:	f000 fd22 	bl	800da90 <scalbn>
 800d04c:	ec57 6b10 	vmov	r6, r7, d0
 800d050:	2200      	movs	r2, #0
 800d052:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d056:	ee10 0a10 	vmov	r0, s0
 800d05a:	4639      	mov	r1, r7
 800d05c:	f7f3 facc 	bl	80005f8 <__aeabi_dmul>
 800d060:	ec41 0b10 	vmov	d0, r0, r1
 800d064:	f7ff fb18 	bl	800c698 <floor>
 800d068:	4b7a      	ldr	r3, [pc, #488]	; (800d254 <__kernel_rem_pio2+0x324>)
 800d06a:	ec51 0b10 	vmov	r0, r1, d0
 800d06e:	2200      	movs	r2, #0
 800d070:	f7f3 fac2 	bl	80005f8 <__aeabi_dmul>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	4630      	mov	r0, r6
 800d07a:	4639      	mov	r1, r7
 800d07c:	f7f3 f904 	bl	8000288 <__aeabi_dsub>
 800d080:	460f      	mov	r7, r1
 800d082:	4606      	mov	r6, r0
 800d084:	f7f3 fd68 	bl	8000b58 <__aeabi_d2iz>
 800d088:	9002      	str	r0, [sp, #8]
 800d08a:	f7f3 fa4b 	bl	8000524 <__aeabi_i2d>
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	4630      	mov	r0, r6
 800d094:	4639      	mov	r1, r7
 800d096:	f7f3 f8f7 	bl	8000288 <__aeabi_dsub>
 800d09a:	f1ba 0f00 	cmp.w	sl, #0
 800d09e:	4606      	mov	r6, r0
 800d0a0:	460f      	mov	r7, r1
 800d0a2:	dd6d      	ble.n	800d180 <__kernel_rem_pio2+0x250>
 800d0a4:	1e61      	subs	r1, r4, #1
 800d0a6:	ab0c      	add	r3, sp, #48	; 0x30
 800d0a8:	9d02      	ldr	r5, [sp, #8]
 800d0aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0ae:	f1ca 0018 	rsb	r0, sl, #24
 800d0b2:	fa43 f200 	asr.w	r2, r3, r0
 800d0b6:	4415      	add	r5, r2
 800d0b8:	4082      	lsls	r2, r0
 800d0ba:	1a9b      	subs	r3, r3, r2
 800d0bc:	aa0c      	add	r2, sp, #48	; 0x30
 800d0be:	9502      	str	r5, [sp, #8]
 800d0c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d0c4:	f1ca 0217 	rsb	r2, sl, #23
 800d0c8:	fa43 fb02 	asr.w	fp, r3, r2
 800d0cc:	f1bb 0f00 	cmp.w	fp, #0
 800d0d0:	dd65      	ble.n	800d19e <__kernel_rem_pio2+0x26e>
 800d0d2:	9b02      	ldr	r3, [sp, #8]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	9302      	str	r3, [sp, #8]
 800d0da:	4615      	mov	r5, r2
 800d0dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d0e0:	4294      	cmp	r4, r2
 800d0e2:	f300 809f 	bgt.w	800d224 <__kernel_rem_pio2+0x2f4>
 800d0e6:	f1ba 0f00 	cmp.w	sl, #0
 800d0ea:	dd07      	ble.n	800d0fc <__kernel_rem_pio2+0x1cc>
 800d0ec:	f1ba 0f01 	cmp.w	sl, #1
 800d0f0:	f000 80c1 	beq.w	800d276 <__kernel_rem_pio2+0x346>
 800d0f4:	f1ba 0f02 	cmp.w	sl, #2
 800d0f8:	f000 80c7 	beq.w	800d28a <__kernel_rem_pio2+0x35a>
 800d0fc:	f1bb 0f02 	cmp.w	fp, #2
 800d100:	d14d      	bne.n	800d19e <__kernel_rem_pio2+0x26e>
 800d102:	4632      	mov	r2, r6
 800d104:	463b      	mov	r3, r7
 800d106:	4954      	ldr	r1, [pc, #336]	; (800d258 <__kernel_rem_pio2+0x328>)
 800d108:	2000      	movs	r0, #0
 800d10a:	f7f3 f8bd 	bl	8000288 <__aeabi_dsub>
 800d10e:	4606      	mov	r6, r0
 800d110:	460f      	mov	r7, r1
 800d112:	2d00      	cmp	r5, #0
 800d114:	d043      	beq.n	800d19e <__kernel_rem_pio2+0x26e>
 800d116:	4650      	mov	r0, sl
 800d118:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d248 <__kernel_rem_pio2+0x318>
 800d11c:	f000 fcb8 	bl	800da90 <scalbn>
 800d120:	4630      	mov	r0, r6
 800d122:	4639      	mov	r1, r7
 800d124:	ec53 2b10 	vmov	r2, r3, d0
 800d128:	f7f3 f8ae 	bl	8000288 <__aeabi_dsub>
 800d12c:	4606      	mov	r6, r0
 800d12e:	460f      	mov	r7, r1
 800d130:	e035      	b.n	800d19e <__kernel_rem_pio2+0x26e>
 800d132:	4b4a      	ldr	r3, [pc, #296]	; (800d25c <__kernel_rem_pio2+0x32c>)
 800d134:	2200      	movs	r2, #0
 800d136:	4630      	mov	r0, r6
 800d138:	4639      	mov	r1, r7
 800d13a:	f7f3 fa5d 	bl	80005f8 <__aeabi_dmul>
 800d13e:	f7f3 fd0b 	bl	8000b58 <__aeabi_d2iz>
 800d142:	f7f3 f9ef 	bl	8000524 <__aeabi_i2d>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	ec43 2b18 	vmov	d8, r2, r3
 800d14e:	4b44      	ldr	r3, [pc, #272]	; (800d260 <__kernel_rem_pio2+0x330>)
 800d150:	2200      	movs	r2, #0
 800d152:	f7f3 fa51 	bl	80005f8 <__aeabi_dmul>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4630      	mov	r0, r6
 800d15c:	4639      	mov	r1, r7
 800d15e:	f7f3 f893 	bl	8000288 <__aeabi_dsub>
 800d162:	f7f3 fcf9 	bl	8000b58 <__aeabi_d2iz>
 800d166:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d16a:	f84b 0b04 	str.w	r0, [fp], #4
 800d16e:	ec51 0b18 	vmov	r0, r1, d8
 800d172:	f7f3 f88b 	bl	800028c <__adddf3>
 800d176:	f109 39ff 	add.w	r9, r9, #4294967295
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	e75b      	b.n	800d038 <__kernel_rem_pio2+0x108>
 800d180:	d106      	bne.n	800d190 <__kernel_rem_pio2+0x260>
 800d182:	1e63      	subs	r3, r4, #1
 800d184:	aa0c      	add	r2, sp, #48	; 0x30
 800d186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d18a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d18e:	e79d      	b.n	800d0cc <__kernel_rem_pio2+0x19c>
 800d190:	4b34      	ldr	r3, [pc, #208]	; (800d264 <__kernel_rem_pio2+0x334>)
 800d192:	2200      	movs	r2, #0
 800d194:	f7f3 fcb6 	bl	8000b04 <__aeabi_dcmpge>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d140      	bne.n	800d21e <__kernel_rem_pio2+0x2ee>
 800d19c:	4683      	mov	fp, r0
 800d19e:	2200      	movs	r2, #0
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	4639      	mov	r1, r7
 800d1a6:	f7f3 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	f000 80c1 	beq.w	800d332 <__kernel_rem_pio2+0x402>
 800d1b0:	1e65      	subs	r5, r4, #1
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	9900      	ldr	r1, [sp, #0]
 800d1b8:	428b      	cmp	r3, r1
 800d1ba:	da6d      	bge.n	800d298 <__kernel_rem_pio2+0x368>
 800d1bc:	2a00      	cmp	r2, #0
 800d1be:	f000 808a 	beq.w	800d2d6 <__kernel_rem_pio2+0x3a6>
 800d1c2:	ab0c      	add	r3, sp, #48	; 0x30
 800d1c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d1c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 80ae 	beq.w	800d32e <__kernel_rem_pio2+0x3fe>
 800d1d2:	4650      	mov	r0, sl
 800d1d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d248 <__kernel_rem_pio2+0x318>
 800d1d8:	f000 fc5a 	bl	800da90 <scalbn>
 800d1dc:	1c6b      	adds	r3, r5, #1
 800d1de:	00da      	lsls	r2, r3, #3
 800d1e0:	9205      	str	r2, [sp, #20]
 800d1e2:	ec57 6b10 	vmov	r6, r7, d0
 800d1e6:	aa70      	add	r2, sp, #448	; 0x1c0
 800d1e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d25c <__kernel_rem_pio2+0x32c>
 800d1ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d1f0:	462c      	mov	r4, r5
 800d1f2:	f04f 0800 	mov.w	r8, #0
 800d1f6:	2c00      	cmp	r4, #0
 800d1f8:	f280 80d4 	bge.w	800d3a4 <__kernel_rem_pio2+0x474>
 800d1fc:	462c      	mov	r4, r5
 800d1fe:	2c00      	cmp	r4, #0
 800d200:	f2c0 8102 	blt.w	800d408 <__kernel_rem_pio2+0x4d8>
 800d204:	4b18      	ldr	r3, [pc, #96]	; (800d268 <__kernel_rem_pio2+0x338>)
 800d206:	461e      	mov	r6, r3
 800d208:	ab70      	add	r3, sp, #448	; 0x1c0
 800d20a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d20e:	1b2b      	subs	r3, r5, r4
 800d210:	f04f 0900 	mov.w	r9, #0
 800d214:	f04f 0a00 	mov.w	sl, #0
 800d218:	2700      	movs	r7, #0
 800d21a:	9306      	str	r3, [sp, #24]
 800d21c:	e0e6      	b.n	800d3ec <__kernel_rem_pio2+0x4bc>
 800d21e:	f04f 0b02 	mov.w	fp, #2
 800d222:	e756      	b.n	800d0d2 <__kernel_rem_pio2+0x1a2>
 800d224:	f8d8 3000 	ldr.w	r3, [r8]
 800d228:	bb05      	cbnz	r5, 800d26c <__kernel_rem_pio2+0x33c>
 800d22a:	b123      	cbz	r3, 800d236 <__kernel_rem_pio2+0x306>
 800d22c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d230:	f8c8 3000 	str.w	r3, [r8]
 800d234:	2301      	movs	r3, #1
 800d236:	3201      	adds	r2, #1
 800d238:	f108 0804 	add.w	r8, r8, #4
 800d23c:	461d      	mov	r5, r3
 800d23e:	e74f      	b.n	800d0e0 <__kernel_rem_pio2+0x1b0>
	...
 800d24c:	3ff00000 	.word	0x3ff00000
 800d250:	0800fac0 	.word	0x0800fac0
 800d254:	40200000 	.word	0x40200000
 800d258:	3ff00000 	.word	0x3ff00000
 800d25c:	3e700000 	.word	0x3e700000
 800d260:	41700000 	.word	0x41700000
 800d264:	3fe00000 	.word	0x3fe00000
 800d268:	0800fa80 	.word	0x0800fa80
 800d26c:	1acb      	subs	r3, r1, r3
 800d26e:	f8c8 3000 	str.w	r3, [r8]
 800d272:	462b      	mov	r3, r5
 800d274:	e7df      	b.n	800d236 <__kernel_rem_pio2+0x306>
 800d276:	1e62      	subs	r2, r4, #1
 800d278:	ab0c      	add	r3, sp, #48	; 0x30
 800d27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d27e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d282:	a90c      	add	r1, sp, #48	; 0x30
 800d284:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d288:	e738      	b.n	800d0fc <__kernel_rem_pio2+0x1cc>
 800d28a:	1e62      	subs	r2, r4, #1
 800d28c:	ab0c      	add	r3, sp, #48	; 0x30
 800d28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d292:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d296:	e7f4      	b.n	800d282 <__kernel_rem_pio2+0x352>
 800d298:	a90c      	add	r1, sp, #48	; 0x30
 800d29a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	430a      	orrs	r2, r1
 800d2a2:	e788      	b.n	800d1b6 <__kernel_rem_pio2+0x286>
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d2aa:	2900      	cmp	r1, #0
 800d2ac:	d0fa      	beq.n	800d2a4 <__kernel_rem_pio2+0x374>
 800d2ae:	9a08      	ldr	r2, [sp, #32]
 800d2b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d2b4:	446a      	add	r2, sp
 800d2b6:	3a98      	subs	r2, #152	; 0x98
 800d2b8:	9208      	str	r2, [sp, #32]
 800d2ba:	9a06      	ldr	r2, [sp, #24]
 800d2bc:	a920      	add	r1, sp, #128	; 0x80
 800d2be:	18a2      	adds	r2, r4, r2
 800d2c0:	18e3      	adds	r3, r4, r3
 800d2c2:	f104 0801 	add.w	r8, r4, #1
 800d2c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d2ca:	9302      	str	r3, [sp, #8]
 800d2cc:	9b02      	ldr	r3, [sp, #8]
 800d2ce:	4543      	cmp	r3, r8
 800d2d0:	da04      	bge.n	800d2dc <__kernel_rem_pio2+0x3ac>
 800d2d2:	461c      	mov	r4, r3
 800d2d4:	e6a2      	b.n	800d01c <__kernel_rem_pio2+0xec>
 800d2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e7e4      	b.n	800d2a6 <__kernel_rem_pio2+0x376>
 800d2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d2e2:	f7f3 f91f 	bl	8000524 <__aeabi_i2d>
 800d2e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ec:	46ab      	mov	fp, r5
 800d2ee:	461c      	mov	r4, r3
 800d2f0:	f04f 0900 	mov.w	r9, #0
 800d2f4:	2600      	movs	r6, #0
 800d2f6:	2700      	movs	r7, #0
 800d2f8:	9b05      	ldr	r3, [sp, #20]
 800d2fa:	4599      	cmp	r9, r3
 800d2fc:	dd06      	ble.n	800d30c <__kernel_rem_pio2+0x3dc>
 800d2fe:	9b08      	ldr	r3, [sp, #32]
 800d300:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d304:	f108 0801 	add.w	r8, r8, #1
 800d308:	9308      	str	r3, [sp, #32]
 800d30a:	e7df      	b.n	800d2cc <__kernel_rem_pio2+0x39c>
 800d30c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d310:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d314:	f7f3 f970 	bl	80005f8 <__aeabi_dmul>
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	f7f2 ffb4 	bl	800028c <__adddf3>
 800d324:	f109 0901 	add.w	r9, r9, #1
 800d328:	4606      	mov	r6, r0
 800d32a:	460f      	mov	r7, r1
 800d32c:	e7e4      	b.n	800d2f8 <__kernel_rem_pio2+0x3c8>
 800d32e:	3d01      	subs	r5, #1
 800d330:	e747      	b.n	800d1c2 <__kernel_rem_pio2+0x292>
 800d332:	ec47 6b10 	vmov	d0, r6, r7
 800d336:	f1ca 0000 	rsb	r0, sl, #0
 800d33a:	f000 fba9 	bl	800da90 <scalbn>
 800d33e:	ec57 6b10 	vmov	r6, r7, d0
 800d342:	4ba0      	ldr	r3, [pc, #640]	; (800d5c4 <__kernel_rem_pio2+0x694>)
 800d344:	ee10 0a10 	vmov	r0, s0
 800d348:	2200      	movs	r2, #0
 800d34a:	4639      	mov	r1, r7
 800d34c:	f7f3 fbda 	bl	8000b04 <__aeabi_dcmpge>
 800d350:	b1f8      	cbz	r0, 800d392 <__kernel_rem_pio2+0x462>
 800d352:	4b9d      	ldr	r3, [pc, #628]	; (800d5c8 <__kernel_rem_pio2+0x698>)
 800d354:	2200      	movs	r2, #0
 800d356:	4630      	mov	r0, r6
 800d358:	4639      	mov	r1, r7
 800d35a:	f7f3 f94d 	bl	80005f8 <__aeabi_dmul>
 800d35e:	f7f3 fbfb 	bl	8000b58 <__aeabi_d2iz>
 800d362:	4680      	mov	r8, r0
 800d364:	f7f3 f8de 	bl	8000524 <__aeabi_i2d>
 800d368:	4b96      	ldr	r3, [pc, #600]	; (800d5c4 <__kernel_rem_pio2+0x694>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	f7f3 f944 	bl	80005f8 <__aeabi_dmul>
 800d370:	460b      	mov	r3, r1
 800d372:	4602      	mov	r2, r0
 800d374:	4639      	mov	r1, r7
 800d376:	4630      	mov	r0, r6
 800d378:	f7f2 ff86 	bl	8000288 <__aeabi_dsub>
 800d37c:	f7f3 fbec 	bl	8000b58 <__aeabi_d2iz>
 800d380:	1c65      	adds	r5, r4, #1
 800d382:	ab0c      	add	r3, sp, #48	; 0x30
 800d384:	f10a 0a18 	add.w	sl, sl, #24
 800d388:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d38c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d390:	e71f      	b.n	800d1d2 <__kernel_rem_pio2+0x2a2>
 800d392:	4630      	mov	r0, r6
 800d394:	4639      	mov	r1, r7
 800d396:	f7f3 fbdf 	bl	8000b58 <__aeabi_d2iz>
 800d39a:	ab0c      	add	r3, sp, #48	; 0x30
 800d39c:	4625      	mov	r5, r4
 800d39e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d3a2:	e716      	b.n	800d1d2 <__kernel_rem_pio2+0x2a2>
 800d3a4:	ab0c      	add	r3, sp, #48	; 0x30
 800d3a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d3aa:	f7f3 f8bb 	bl	8000524 <__aeabi_i2d>
 800d3ae:	4632      	mov	r2, r6
 800d3b0:	463b      	mov	r3, r7
 800d3b2:	f7f3 f921 	bl	80005f8 <__aeabi_dmul>
 800d3b6:	4642      	mov	r2, r8
 800d3b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d3bc:	464b      	mov	r3, r9
 800d3be:	4630      	mov	r0, r6
 800d3c0:	4639      	mov	r1, r7
 800d3c2:	f7f3 f919 	bl	80005f8 <__aeabi_dmul>
 800d3c6:	3c01      	subs	r4, #1
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	460f      	mov	r7, r1
 800d3cc:	e713      	b.n	800d1f6 <__kernel_rem_pio2+0x2c6>
 800d3ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d3d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d3d6:	f7f3 f90f 	bl	80005f8 <__aeabi_dmul>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4648      	mov	r0, r9
 800d3e0:	4651      	mov	r1, sl
 800d3e2:	f7f2 ff53 	bl	800028c <__adddf3>
 800d3e6:	3701      	adds	r7, #1
 800d3e8:	4681      	mov	r9, r0
 800d3ea:	468a      	mov	sl, r1
 800d3ec:	9b00      	ldr	r3, [sp, #0]
 800d3ee:	429f      	cmp	r7, r3
 800d3f0:	dc02      	bgt.n	800d3f8 <__kernel_rem_pio2+0x4c8>
 800d3f2:	9b06      	ldr	r3, [sp, #24]
 800d3f4:	429f      	cmp	r7, r3
 800d3f6:	ddea      	ble.n	800d3ce <__kernel_rem_pio2+0x49e>
 800d3f8:	9a06      	ldr	r2, [sp, #24]
 800d3fa:	ab48      	add	r3, sp, #288	; 0x120
 800d3fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d400:	e9c6 9a00 	strd	r9, sl, [r6]
 800d404:	3c01      	subs	r4, #1
 800d406:	e6fa      	b.n	800d1fe <__kernel_rem_pio2+0x2ce>
 800d408:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	dc0b      	bgt.n	800d426 <__kernel_rem_pio2+0x4f6>
 800d40e:	2b00      	cmp	r3, #0
 800d410:	dc39      	bgt.n	800d486 <__kernel_rem_pio2+0x556>
 800d412:	d05d      	beq.n	800d4d0 <__kernel_rem_pio2+0x5a0>
 800d414:	9b02      	ldr	r3, [sp, #8]
 800d416:	f003 0007 	and.w	r0, r3, #7
 800d41a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d41e:	ecbd 8b02 	vpop	{d8}
 800d422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d426:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d428:	2b03      	cmp	r3, #3
 800d42a:	d1f3      	bne.n	800d414 <__kernel_rem_pio2+0x4e4>
 800d42c:	9b05      	ldr	r3, [sp, #20]
 800d42e:	9500      	str	r5, [sp, #0]
 800d430:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d434:	eb0d 0403 	add.w	r4, sp, r3
 800d438:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d43c:	46a2      	mov	sl, r4
 800d43e:	9b00      	ldr	r3, [sp, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	f1aa 0a08 	sub.w	sl, sl, #8
 800d446:	dc69      	bgt.n	800d51c <__kernel_rem_pio2+0x5ec>
 800d448:	46aa      	mov	sl, r5
 800d44a:	f1ba 0f01 	cmp.w	sl, #1
 800d44e:	f1a4 0408 	sub.w	r4, r4, #8
 800d452:	f300 8083 	bgt.w	800d55c <__kernel_rem_pio2+0x62c>
 800d456:	9c05      	ldr	r4, [sp, #20]
 800d458:	ab48      	add	r3, sp, #288	; 0x120
 800d45a:	441c      	add	r4, r3
 800d45c:	2000      	movs	r0, #0
 800d45e:	2100      	movs	r1, #0
 800d460:	2d01      	cmp	r5, #1
 800d462:	f300 809a 	bgt.w	800d59a <__kernel_rem_pio2+0x66a>
 800d466:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d46a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d46e:	f1bb 0f00 	cmp.w	fp, #0
 800d472:	f040 8098 	bne.w	800d5a6 <__kernel_rem_pio2+0x676>
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	e9c3 7800 	strd	r7, r8, [r3]
 800d47c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d480:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d484:	e7c6      	b.n	800d414 <__kernel_rem_pio2+0x4e4>
 800d486:	9e05      	ldr	r6, [sp, #20]
 800d488:	ab48      	add	r3, sp, #288	; 0x120
 800d48a:	441e      	add	r6, r3
 800d48c:	462c      	mov	r4, r5
 800d48e:	2000      	movs	r0, #0
 800d490:	2100      	movs	r1, #0
 800d492:	2c00      	cmp	r4, #0
 800d494:	da33      	bge.n	800d4fe <__kernel_rem_pio2+0x5ce>
 800d496:	f1bb 0f00 	cmp.w	fp, #0
 800d49a:	d036      	beq.n	800d50a <__kernel_rem_pio2+0x5da>
 800d49c:	4602      	mov	r2, r0
 800d49e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4a2:	9c04      	ldr	r4, [sp, #16]
 800d4a4:	e9c4 2300 	strd	r2, r3, [r4]
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d4b0:	f7f2 feea 	bl	8000288 <__aeabi_dsub>
 800d4b4:	ae4a      	add	r6, sp, #296	; 0x128
 800d4b6:	2401      	movs	r4, #1
 800d4b8:	42a5      	cmp	r5, r4
 800d4ba:	da29      	bge.n	800d510 <__kernel_rem_pio2+0x5e0>
 800d4bc:	f1bb 0f00 	cmp.w	fp, #0
 800d4c0:	d002      	beq.n	800d4c8 <__kernel_rem_pio2+0x598>
 800d4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	9b04      	ldr	r3, [sp, #16]
 800d4ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d4ce:	e7a1      	b.n	800d414 <__kernel_rem_pio2+0x4e4>
 800d4d0:	9c05      	ldr	r4, [sp, #20]
 800d4d2:	ab48      	add	r3, sp, #288	; 0x120
 800d4d4:	441c      	add	r4, r3
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	2100      	movs	r1, #0
 800d4da:	2d00      	cmp	r5, #0
 800d4dc:	da09      	bge.n	800d4f2 <__kernel_rem_pio2+0x5c2>
 800d4de:	f1bb 0f00 	cmp.w	fp, #0
 800d4e2:	d002      	beq.n	800d4ea <__kernel_rem_pio2+0x5ba>
 800d4e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	9b04      	ldr	r3, [sp, #16]
 800d4ec:	e9c3 0100 	strd	r0, r1, [r3]
 800d4f0:	e790      	b.n	800d414 <__kernel_rem_pio2+0x4e4>
 800d4f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d4f6:	f7f2 fec9 	bl	800028c <__adddf3>
 800d4fa:	3d01      	subs	r5, #1
 800d4fc:	e7ed      	b.n	800d4da <__kernel_rem_pio2+0x5aa>
 800d4fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d502:	f7f2 fec3 	bl	800028c <__adddf3>
 800d506:	3c01      	subs	r4, #1
 800d508:	e7c3      	b.n	800d492 <__kernel_rem_pio2+0x562>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	e7c8      	b.n	800d4a2 <__kernel_rem_pio2+0x572>
 800d510:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d514:	f7f2 feba 	bl	800028c <__adddf3>
 800d518:	3401      	adds	r4, #1
 800d51a:	e7cd      	b.n	800d4b8 <__kernel_rem_pio2+0x588>
 800d51c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d520:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d524:	9b00      	ldr	r3, [sp, #0]
 800d526:	3b01      	subs	r3, #1
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	4632      	mov	r2, r6
 800d52c:	463b      	mov	r3, r7
 800d52e:	4640      	mov	r0, r8
 800d530:	4649      	mov	r1, r9
 800d532:	f7f2 feab 	bl	800028c <__adddf3>
 800d536:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	4640      	mov	r0, r8
 800d540:	4649      	mov	r1, r9
 800d542:	f7f2 fea1 	bl	8000288 <__aeabi_dsub>
 800d546:	4632      	mov	r2, r6
 800d548:	463b      	mov	r3, r7
 800d54a:	f7f2 fe9f 	bl	800028c <__adddf3>
 800d54e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d552:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d556:	ed8a 7b00 	vstr	d7, [sl]
 800d55a:	e770      	b.n	800d43e <__kernel_rem_pio2+0x50e>
 800d55c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d560:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d564:	4640      	mov	r0, r8
 800d566:	4632      	mov	r2, r6
 800d568:	463b      	mov	r3, r7
 800d56a:	4649      	mov	r1, r9
 800d56c:	f7f2 fe8e 	bl	800028c <__adddf3>
 800d570:	e9cd 0100 	strd	r0, r1, [sp]
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4640      	mov	r0, r8
 800d57a:	4649      	mov	r1, r9
 800d57c:	f7f2 fe84 	bl	8000288 <__aeabi_dsub>
 800d580:	4632      	mov	r2, r6
 800d582:	463b      	mov	r3, r7
 800d584:	f7f2 fe82 	bl	800028c <__adddf3>
 800d588:	ed9d 7b00 	vldr	d7, [sp]
 800d58c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d590:	ed84 7b00 	vstr	d7, [r4]
 800d594:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d598:	e757      	b.n	800d44a <__kernel_rem_pio2+0x51a>
 800d59a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d59e:	f7f2 fe75 	bl	800028c <__adddf3>
 800d5a2:	3d01      	subs	r5, #1
 800d5a4:	e75c      	b.n	800d460 <__kernel_rem_pio2+0x530>
 800d5a6:	9b04      	ldr	r3, [sp, #16]
 800d5a8:	9a04      	ldr	r2, [sp, #16]
 800d5aa:	601f      	str	r7, [r3, #0]
 800d5ac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d5b0:	605c      	str	r4, [r3, #4]
 800d5b2:	609d      	str	r5, [r3, #8]
 800d5b4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d5b8:	60d3      	str	r3, [r2, #12]
 800d5ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5be:	6110      	str	r0, [r2, #16]
 800d5c0:	6153      	str	r3, [r2, #20]
 800d5c2:	e727      	b.n	800d414 <__kernel_rem_pio2+0x4e4>
 800d5c4:	41700000 	.word	0x41700000
 800d5c8:	3e700000 	.word	0x3e700000
 800d5cc:	00000000 	.word	0x00000000

0800d5d0 <__ieee754_acos>:
 800d5d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	ec55 4b10 	vmov	r4, r5, d0
 800d5d8:	49b7      	ldr	r1, [pc, #732]	; (800d8b8 <__ieee754_acos+0x2e8>)
 800d5da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d5de:	428b      	cmp	r3, r1
 800d5e0:	dd1b      	ble.n	800d61a <__ieee754_acos+0x4a>
 800d5e2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d5e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d5ea:	4323      	orrs	r3, r4
 800d5ec:	d106      	bne.n	800d5fc <__ieee754_acos+0x2c>
 800d5ee:	2d00      	cmp	r5, #0
 800d5f0:	f300 8211 	bgt.w	800da16 <__ieee754_acos+0x446>
 800d5f4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800d850 <__ieee754_acos+0x280>
 800d5f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	ee10 2a10 	vmov	r2, s0
 800d600:	462b      	mov	r3, r5
 800d602:	ee10 0a10 	vmov	r0, s0
 800d606:	4629      	mov	r1, r5
 800d608:	f7f2 fe3e 	bl	8000288 <__aeabi_dsub>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	f7f3 f91c 	bl	800084c <__aeabi_ddiv>
 800d614:	ec41 0b10 	vmov	d0, r0, r1
 800d618:	e7ee      	b.n	800d5f8 <__ieee754_acos+0x28>
 800d61a:	49a8      	ldr	r1, [pc, #672]	; (800d8bc <__ieee754_acos+0x2ec>)
 800d61c:	428b      	cmp	r3, r1
 800d61e:	f300 8087 	bgt.w	800d730 <__ieee754_acos+0x160>
 800d622:	4aa7      	ldr	r2, [pc, #668]	; (800d8c0 <__ieee754_acos+0x2f0>)
 800d624:	4293      	cmp	r3, r2
 800d626:	f340 81f9 	ble.w	800da1c <__ieee754_acos+0x44c>
 800d62a:	ee10 2a10 	vmov	r2, s0
 800d62e:	ee10 0a10 	vmov	r0, s0
 800d632:	462b      	mov	r3, r5
 800d634:	4629      	mov	r1, r5
 800d636:	f7f2 ffdf 	bl	80005f8 <__aeabi_dmul>
 800d63a:	a387      	add	r3, pc, #540	; (adr r3, 800d858 <__ieee754_acos+0x288>)
 800d63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d640:	4606      	mov	r6, r0
 800d642:	460f      	mov	r7, r1
 800d644:	f7f2 ffd8 	bl	80005f8 <__aeabi_dmul>
 800d648:	a385      	add	r3, pc, #532	; (adr r3, 800d860 <__ieee754_acos+0x290>)
 800d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64e:	f7f2 fe1d 	bl	800028c <__adddf3>
 800d652:	4632      	mov	r2, r6
 800d654:	463b      	mov	r3, r7
 800d656:	f7f2 ffcf 	bl	80005f8 <__aeabi_dmul>
 800d65a:	a383      	add	r3, pc, #524	; (adr r3, 800d868 <__ieee754_acos+0x298>)
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	f7f2 fe12 	bl	8000288 <__aeabi_dsub>
 800d664:	4632      	mov	r2, r6
 800d666:	463b      	mov	r3, r7
 800d668:	f7f2 ffc6 	bl	80005f8 <__aeabi_dmul>
 800d66c:	a380      	add	r3, pc, #512	; (adr r3, 800d870 <__ieee754_acos+0x2a0>)
 800d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d672:	f7f2 fe0b 	bl	800028c <__adddf3>
 800d676:	4632      	mov	r2, r6
 800d678:	463b      	mov	r3, r7
 800d67a:	f7f2 ffbd 	bl	80005f8 <__aeabi_dmul>
 800d67e:	a37e      	add	r3, pc, #504	; (adr r3, 800d878 <__ieee754_acos+0x2a8>)
 800d680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d684:	f7f2 fe00 	bl	8000288 <__aeabi_dsub>
 800d688:	4632      	mov	r2, r6
 800d68a:	463b      	mov	r3, r7
 800d68c:	f7f2 ffb4 	bl	80005f8 <__aeabi_dmul>
 800d690:	a37b      	add	r3, pc, #492	; (adr r3, 800d880 <__ieee754_acos+0x2b0>)
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	f7f2 fdf9 	bl	800028c <__adddf3>
 800d69a:	4632      	mov	r2, r6
 800d69c:	463b      	mov	r3, r7
 800d69e:	f7f2 ffab 	bl	80005f8 <__aeabi_dmul>
 800d6a2:	a379      	add	r3, pc, #484	; (adr r3, 800d888 <__ieee754_acos+0x2b8>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	4689      	mov	r9, r1
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	4639      	mov	r1, r7
 800d6b0:	f7f2 ffa2 	bl	80005f8 <__aeabi_dmul>
 800d6b4:	a376      	add	r3, pc, #472	; (adr r3, 800d890 <__ieee754_acos+0x2c0>)
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	f7f2 fde5 	bl	8000288 <__aeabi_dsub>
 800d6be:	4632      	mov	r2, r6
 800d6c0:	463b      	mov	r3, r7
 800d6c2:	f7f2 ff99 	bl	80005f8 <__aeabi_dmul>
 800d6c6:	a374      	add	r3, pc, #464	; (adr r3, 800d898 <__ieee754_acos+0x2c8>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	f7f2 fdde 	bl	800028c <__adddf3>
 800d6d0:	4632      	mov	r2, r6
 800d6d2:	463b      	mov	r3, r7
 800d6d4:	f7f2 ff90 	bl	80005f8 <__aeabi_dmul>
 800d6d8:	a371      	add	r3, pc, #452	; (adr r3, 800d8a0 <__ieee754_acos+0x2d0>)
 800d6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6de:	f7f2 fdd3 	bl	8000288 <__aeabi_dsub>
 800d6e2:	4632      	mov	r2, r6
 800d6e4:	463b      	mov	r3, r7
 800d6e6:	f7f2 ff87 	bl	80005f8 <__aeabi_dmul>
 800d6ea:	4b76      	ldr	r3, [pc, #472]	; (800d8c4 <__ieee754_acos+0x2f4>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f7f2 fdcd 	bl	800028c <__adddf3>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	f7f3 f8a7 	bl	800084c <__aeabi_ddiv>
 800d6fe:	4622      	mov	r2, r4
 800d700:	462b      	mov	r3, r5
 800d702:	f7f2 ff79 	bl	80005f8 <__aeabi_dmul>
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	a167      	add	r1, pc, #412	; (adr r1, 800d8a8 <__ieee754_acos+0x2d8>)
 800d70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d710:	f7f2 fdba 	bl	8000288 <__aeabi_dsub>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	4620      	mov	r0, r4
 800d71a:	4629      	mov	r1, r5
 800d71c:	f7f2 fdb4 	bl	8000288 <__aeabi_dsub>
 800d720:	4602      	mov	r2, r0
 800d722:	460b      	mov	r3, r1
 800d724:	a162      	add	r1, pc, #392	; (adr r1, 800d8b0 <__ieee754_acos+0x2e0>)
 800d726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d72a:	f7f2 fdad 	bl	8000288 <__aeabi_dsub>
 800d72e:	e771      	b.n	800d614 <__ieee754_acos+0x44>
 800d730:	2d00      	cmp	r5, #0
 800d732:	f280 80cb 	bge.w	800d8cc <__ieee754_acos+0x2fc>
 800d736:	ee10 0a10 	vmov	r0, s0
 800d73a:	4b62      	ldr	r3, [pc, #392]	; (800d8c4 <__ieee754_acos+0x2f4>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	4629      	mov	r1, r5
 800d740:	f7f2 fda4 	bl	800028c <__adddf3>
 800d744:	4b60      	ldr	r3, [pc, #384]	; (800d8c8 <__ieee754_acos+0x2f8>)
 800d746:	2200      	movs	r2, #0
 800d748:	f7f2 ff56 	bl	80005f8 <__aeabi_dmul>
 800d74c:	a342      	add	r3, pc, #264	; (adr r3, 800d858 <__ieee754_acos+0x288>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	4604      	mov	r4, r0
 800d754:	460d      	mov	r5, r1
 800d756:	f7f2 ff4f 	bl	80005f8 <__aeabi_dmul>
 800d75a:	a341      	add	r3, pc, #260	; (adr r3, 800d860 <__ieee754_acos+0x290>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f7f2 fd94 	bl	800028c <__adddf3>
 800d764:	4622      	mov	r2, r4
 800d766:	462b      	mov	r3, r5
 800d768:	f7f2 ff46 	bl	80005f8 <__aeabi_dmul>
 800d76c:	a33e      	add	r3, pc, #248	; (adr r3, 800d868 <__ieee754_acos+0x298>)
 800d76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d772:	f7f2 fd89 	bl	8000288 <__aeabi_dsub>
 800d776:	4622      	mov	r2, r4
 800d778:	462b      	mov	r3, r5
 800d77a:	f7f2 ff3d 	bl	80005f8 <__aeabi_dmul>
 800d77e:	a33c      	add	r3, pc, #240	; (adr r3, 800d870 <__ieee754_acos+0x2a0>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f7f2 fd82 	bl	800028c <__adddf3>
 800d788:	4622      	mov	r2, r4
 800d78a:	462b      	mov	r3, r5
 800d78c:	f7f2 ff34 	bl	80005f8 <__aeabi_dmul>
 800d790:	a339      	add	r3, pc, #228	; (adr r3, 800d878 <__ieee754_acos+0x2a8>)
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	f7f2 fd77 	bl	8000288 <__aeabi_dsub>
 800d79a:	4622      	mov	r2, r4
 800d79c:	462b      	mov	r3, r5
 800d79e:	f7f2 ff2b 	bl	80005f8 <__aeabi_dmul>
 800d7a2:	a337      	add	r3, pc, #220	; (adr r3, 800d880 <__ieee754_acos+0x2b0>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f7f2 fd70 	bl	800028c <__adddf3>
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	462b      	mov	r3, r5
 800d7b0:	f7f2 ff22 	bl	80005f8 <__aeabi_dmul>
 800d7b4:	ec45 4b10 	vmov	d0, r4, r5
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	4689      	mov	r9, r1
 800d7bc:	f000 f9e6 	bl	800db8c <__ieee754_sqrt>
 800d7c0:	a331      	add	r3, pc, #196	; (adr r3, 800d888 <__ieee754_acos+0x2b8>)
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	ec57 6b10 	vmov	r6, r7, d0
 800d7ce:	f7f2 ff13 	bl	80005f8 <__aeabi_dmul>
 800d7d2:	a32f      	add	r3, pc, #188	; (adr r3, 800d890 <__ieee754_acos+0x2c0>)
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	f7f2 fd56 	bl	8000288 <__aeabi_dsub>
 800d7dc:	4622      	mov	r2, r4
 800d7de:	462b      	mov	r3, r5
 800d7e0:	f7f2 ff0a 	bl	80005f8 <__aeabi_dmul>
 800d7e4:	a32c      	add	r3, pc, #176	; (adr r3, 800d898 <__ieee754_acos+0x2c8>)
 800d7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ea:	f7f2 fd4f 	bl	800028c <__adddf3>
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	462b      	mov	r3, r5
 800d7f2:	f7f2 ff01 	bl	80005f8 <__aeabi_dmul>
 800d7f6:	a32a      	add	r3, pc, #168	; (adr r3, 800d8a0 <__ieee754_acos+0x2d0>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f7f2 fd44 	bl	8000288 <__aeabi_dsub>
 800d800:	4622      	mov	r2, r4
 800d802:	462b      	mov	r3, r5
 800d804:	f7f2 fef8 	bl	80005f8 <__aeabi_dmul>
 800d808:	4b2e      	ldr	r3, [pc, #184]	; (800d8c4 <__ieee754_acos+0x2f4>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	f7f2 fd3e 	bl	800028c <__adddf3>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	4640      	mov	r0, r8
 800d816:	4649      	mov	r1, r9
 800d818:	f7f3 f818 	bl	800084c <__aeabi_ddiv>
 800d81c:	4632      	mov	r2, r6
 800d81e:	463b      	mov	r3, r7
 800d820:	f7f2 feea 	bl	80005f8 <__aeabi_dmul>
 800d824:	a320      	add	r3, pc, #128	; (adr r3, 800d8a8 <__ieee754_acos+0x2d8>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 fd2d 	bl	8000288 <__aeabi_dsub>
 800d82e:	4632      	mov	r2, r6
 800d830:	463b      	mov	r3, r7
 800d832:	f7f2 fd2b 	bl	800028c <__adddf3>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	f7f2 fd27 	bl	800028c <__adddf3>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	a103      	add	r1, pc, #12	; (adr r1, 800d850 <__ieee754_acos+0x280>)
 800d844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d848:	e76f      	b.n	800d72a <__ieee754_acos+0x15a>
 800d84a:	bf00      	nop
 800d84c:	f3af 8000 	nop.w
 800d850:	54442d18 	.word	0x54442d18
 800d854:	400921fb 	.word	0x400921fb
 800d858:	0dfdf709 	.word	0x0dfdf709
 800d85c:	3f023de1 	.word	0x3f023de1
 800d860:	7501b288 	.word	0x7501b288
 800d864:	3f49efe0 	.word	0x3f49efe0
 800d868:	b5688f3b 	.word	0xb5688f3b
 800d86c:	3fa48228 	.word	0x3fa48228
 800d870:	0e884455 	.word	0x0e884455
 800d874:	3fc9c155 	.word	0x3fc9c155
 800d878:	03eb6f7d 	.word	0x03eb6f7d
 800d87c:	3fd4d612 	.word	0x3fd4d612
 800d880:	55555555 	.word	0x55555555
 800d884:	3fc55555 	.word	0x3fc55555
 800d888:	b12e9282 	.word	0xb12e9282
 800d88c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d890:	1b8d0159 	.word	0x1b8d0159
 800d894:	3fe6066c 	.word	0x3fe6066c
 800d898:	9c598ac8 	.word	0x9c598ac8
 800d89c:	40002ae5 	.word	0x40002ae5
 800d8a0:	1c8a2d4b 	.word	0x1c8a2d4b
 800d8a4:	40033a27 	.word	0x40033a27
 800d8a8:	33145c07 	.word	0x33145c07
 800d8ac:	3c91a626 	.word	0x3c91a626
 800d8b0:	54442d18 	.word	0x54442d18
 800d8b4:	3ff921fb 	.word	0x3ff921fb
 800d8b8:	3fefffff 	.word	0x3fefffff
 800d8bc:	3fdfffff 	.word	0x3fdfffff
 800d8c0:	3c600000 	.word	0x3c600000
 800d8c4:	3ff00000 	.word	0x3ff00000
 800d8c8:	3fe00000 	.word	0x3fe00000
 800d8cc:	ee10 2a10 	vmov	r2, s0
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	496d      	ldr	r1, [pc, #436]	; (800da88 <__ieee754_acos+0x4b8>)
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	f7f2 fcd7 	bl	8000288 <__aeabi_dsub>
 800d8da:	4b6c      	ldr	r3, [pc, #432]	; (800da8c <__ieee754_acos+0x4bc>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f7f2 fe8b 	bl	80005f8 <__aeabi_dmul>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	460d      	mov	r5, r1
 800d8e6:	ec45 4b10 	vmov	d0, r4, r5
 800d8ea:	f000 f94f 	bl	800db8c <__ieee754_sqrt>
 800d8ee:	a34e      	add	r3, pc, #312	; (adr r3, 800da28 <__ieee754_acos+0x458>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	ec59 8b10 	vmov	r8, r9, d0
 800d8fc:	f7f2 fe7c 	bl	80005f8 <__aeabi_dmul>
 800d900:	a34b      	add	r3, pc, #300	; (adr r3, 800da30 <__ieee754_acos+0x460>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	f7f2 fcc1 	bl	800028c <__adddf3>
 800d90a:	4622      	mov	r2, r4
 800d90c:	462b      	mov	r3, r5
 800d90e:	f7f2 fe73 	bl	80005f8 <__aeabi_dmul>
 800d912:	a349      	add	r3, pc, #292	; (adr r3, 800da38 <__ieee754_acos+0x468>)
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	f7f2 fcb6 	bl	8000288 <__aeabi_dsub>
 800d91c:	4622      	mov	r2, r4
 800d91e:	462b      	mov	r3, r5
 800d920:	f7f2 fe6a 	bl	80005f8 <__aeabi_dmul>
 800d924:	a346      	add	r3, pc, #280	; (adr r3, 800da40 <__ieee754_acos+0x470>)
 800d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92a:	f7f2 fcaf 	bl	800028c <__adddf3>
 800d92e:	4622      	mov	r2, r4
 800d930:	462b      	mov	r3, r5
 800d932:	f7f2 fe61 	bl	80005f8 <__aeabi_dmul>
 800d936:	a344      	add	r3, pc, #272	; (adr r3, 800da48 <__ieee754_acos+0x478>)
 800d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93c:	f7f2 fca4 	bl	8000288 <__aeabi_dsub>
 800d940:	4622      	mov	r2, r4
 800d942:	462b      	mov	r3, r5
 800d944:	f7f2 fe58 	bl	80005f8 <__aeabi_dmul>
 800d948:	a341      	add	r3, pc, #260	; (adr r3, 800da50 <__ieee754_acos+0x480>)
 800d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94e:	f7f2 fc9d 	bl	800028c <__adddf3>
 800d952:	4622      	mov	r2, r4
 800d954:	462b      	mov	r3, r5
 800d956:	f7f2 fe4f 	bl	80005f8 <__aeabi_dmul>
 800d95a:	a33f      	add	r3, pc, #252	; (adr r3, 800da58 <__ieee754_acos+0x488>)
 800d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d960:	4682      	mov	sl, r0
 800d962:	468b      	mov	fp, r1
 800d964:	4620      	mov	r0, r4
 800d966:	4629      	mov	r1, r5
 800d968:	f7f2 fe46 	bl	80005f8 <__aeabi_dmul>
 800d96c:	a33c      	add	r3, pc, #240	; (adr r3, 800da60 <__ieee754_acos+0x490>)
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	f7f2 fc89 	bl	8000288 <__aeabi_dsub>
 800d976:	4622      	mov	r2, r4
 800d978:	462b      	mov	r3, r5
 800d97a:	f7f2 fe3d 	bl	80005f8 <__aeabi_dmul>
 800d97e:	a33a      	add	r3, pc, #232	; (adr r3, 800da68 <__ieee754_acos+0x498>)
 800d980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d984:	f7f2 fc82 	bl	800028c <__adddf3>
 800d988:	4622      	mov	r2, r4
 800d98a:	462b      	mov	r3, r5
 800d98c:	f7f2 fe34 	bl	80005f8 <__aeabi_dmul>
 800d990:	a337      	add	r3, pc, #220	; (adr r3, 800da70 <__ieee754_acos+0x4a0>)
 800d992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d996:	f7f2 fc77 	bl	8000288 <__aeabi_dsub>
 800d99a:	4622      	mov	r2, r4
 800d99c:	462b      	mov	r3, r5
 800d99e:	f7f2 fe2b 	bl	80005f8 <__aeabi_dmul>
 800d9a2:	4b39      	ldr	r3, [pc, #228]	; (800da88 <__ieee754_acos+0x4b8>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f7f2 fc71 	bl	800028c <__adddf3>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	4659      	mov	r1, fp
 800d9b2:	f7f2 ff4b 	bl	800084c <__aeabi_ddiv>
 800d9b6:	4642      	mov	r2, r8
 800d9b8:	464b      	mov	r3, r9
 800d9ba:	f7f2 fe1d 	bl	80005f8 <__aeabi_dmul>
 800d9be:	2600      	movs	r6, #0
 800d9c0:	4682      	mov	sl, r0
 800d9c2:	468b      	mov	fp, r1
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	464b      	mov	r3, r9
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	f7f2 fe14 	bl	80005f8 <__aeabi_dmul>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	f7f2 fc56 	bl	8000288 <__aeabi_dsub>
 800d9dc:	4632      	mov	r2, r6
 800d9de:	4604      	mov	r4, r0
 800d9e0:	460d      	mov	r5, r1
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	4649      	mov	r1, r9
 800d9e8:	f7f2 fc50 	bl	800028c <__adddf3>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	f7f2 ff2a 	bl	800084c <__aeabi_ddiv>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4650      	mov	r0, sl
 800d9fe:	4659      	mov	r1, fp
 800da00:	f7f2 fc44 	bl	800028c <__adddf3>
 800da04:	4632      	mov	r2, r6
 800da06:	464b      	mov	r3, r9
 800da08:	f7f2 fc40 	bl	800028c <__adddf3>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	f7f2 fc3c 	bl	800028c <__adddf3>
 800da14:	e5fe      	b.n	800d614 <__ieee754_acos+0x44>
 800da16:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800da78 <__ieee754_acos+0x4a8>
 800da1a:	e5ed      	b.n	800d5f8 <__ieee754_acos+0x28>
 800da1c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800da80 <__ieee754_acos+0x4b0>
 800da20:	e5ea      	b.n	800d5f8 <__ieee754_acos+0x28>
 800da22:	bf00      	nop
 800da24:	f3af 8000 	nop.w
 800da28:	0dfdf709 	.word	0x0dfdf709
 800da2c:	3f023de1 	.word	0x3f023de1
 800da30:	7501b288 	.word	0x7501b288
 800da34:	3f49efe0 	.word	0x3f49efe0
 800da38:	b5688f3b 	.word	0xb5688f3b
 800da3c:	3fa48228 	.word	0x3fa48228
 800da40:	0e884455 	.word	0x0e884455
 800da44:	3fc9c155 	.word	0x3fc9c155
 800da48:	03eb6f7d 	.word	0x03eb6f7d
 800da4c:	3fd4d612 	.word	0x3fd4d612
 800da50:	55555555 	.word	0x55555555
 800da54:	3fc55555 	.word	0x3fc55555
 800da58:	b12e9282 	.word	0xb12e9282
 800da5c:	3fb3b8c5 	.word	0x3fb3b8c5
 800da60:	1b8d0159 	.word	0x1b8d0159
 800da64:	3fe6066c 	.word	0x3fe6066c
 800da68:	9c598ac8 	.word	0x9c598ac8
 800da6c:	40002ae5 	.word	0x40002ae5
 800da70:	1c8a2d4b 	.word	0x1c8a2d4b
 800da74:	40033a27 	.word	0x40033a27
	...
 800da80:	54442d18 	.word	0x54442d18
 800da84:	3ff921fb 	.word	0x3ff921fb
 800da88:	3ff00000 	.word	0x3ff00000
 800da8c:	3fe00000 	.word	0x3fe00000

0800da90 <scalbn>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	ec55 4b10 	vmov	r4, r5, d0
 800da96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800da9a:	4606      	mov	r6, r0
 800da9c:	462b      	mov	r3, r5
 800da9e:	b999      	cbnz	r1, 800dac8 <scalbn+0x38>
 800daa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800daa4:	4323      	orrs	r3, r4
 800daa6:	d03f      	beq.n	800db28 <scalbn+0x98>
 800daa8:	4b35      	ldr	r3, [pc, #212]	; (800db80 <scalbn+0xf0>)
 800daaa:	4629      	mov	r1, r5
 800daac:	ee10 0a10 	vmov	r0, s0
 800dab0:	2200      	movs	r2, #0
 800dab2:	f7f2 fda1 	bl	80005f8 <__aeabi_dmul>
 800dab6:	4b33      	ldr	r3, [pc, #204]	; (800db84 <scalbn+0xf4>)
 800dab8:	429e      	cmp	r6, r3
 800daba:	4604      	mov	r4, r0
 800dabc:	460d      	mov	r5, r1
 800dabe:	da10      	bge.n	800dae2 <scalbn+0x52>
 800dac0:	a327      	add	r3, pc, #156	; (adr r3, 800db60 <scalbn+0xd0>)
 800dac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac6:	e01f      	b.n	800db08 <scalbn+0x78>
 800dac8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dacc:	4291      	cmp	r1, r2
 800dace:	d10c      	bne.n	800daea <scalbn+0x5a>
 800dad0:	ee10 2a10 	vmov	r2, s0
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fbd8 	bl	800028c <__adddf3>
 800dadc:	4604      	mov	r4, r0
 800dade:	460d      	mov	r5, r1
 800dae0:	e022      	b.n	800db28 <scalbn+0x98>
 800dae2:	460b      	mov	r3, r1
 800dae4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dae8:	3936      	subs	r1, #54	; 0x36
 800daea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800daee:	4296      	cmp	r6, r2
 800daf0:	dd0d      	ble.n	800db0e <scalbn+0x7e>
 800daf2:	2d00      	cmp	r5, #0
 800daf4:	a11c      	add	r1, pc, #112	; (adr r1, 800db68 <scalbn+0xd8>)
 800daf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dafa:	da02      	bge.n	800db02 <scalbn+0x72>
 800dafc:	a11c      	add	r1, pc, #112	; (adr r1, 800db70 <scalbn+0xe0>)
 800dafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db02:	a319      	add	r3, pc, #100	; (adr r3, 800db68 <scalbn+0xd8>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	f7f2 fd76 	bl	80005f8 <__aeabi_dmul>
 800db0c:	e7e6      	b.n	800dadc <scalbn+0x4c>
 800db0e:	1872      	adds	r2, r6, r1
 800db10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db14:	428a      	cmp	r2, r1
 800db16:	dcec      	bgt.n	800daf2 <scalbn+0x62>
 800db18:	2a00      	cmp	r2, #0
 800db1a:	dd08      	ble.n	800db2e <scalbn+0x9e>
 800db1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db28:	ec45 4b10 	vmov	d0, r4, r5
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db32:	da08      	bge.n	800db46 <scalbn+0xb6>
 800db34:	2d00      	cmp	r5, #0
 800db36:	a10a      	add	r1, pc, #40	; (adr r1, 800db60 <scalbn+0xd0>)
 800db38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3c:	dac0      	bge.n	800dac0 <scalbn+0x30>
 800db3e:	a10e      	add	r1, pc, #56	; (adr r1, 800db78 <scalbn+0xe8>)
 800db40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db44:	e7bc      	b.n	800dac0 <scalbn+0x30>
 800db46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db4a:	3236      	adds	r2, #54	; 0x36
 800db4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800db54:	4620      	mov	r0, r4
 800db56:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <scalbn+0xf8>)
 800db58:	2200      	movs	r2, #0
 800db5a:	e7d5      	b.n	800db08 <scalbn+0x78>
 800db5c:	f3af 8000 	nop.w
 800db60:	c2f8f359 	.word	0xc2f8f359
 800db64:	01a56e1f 	.word	0x01a56e1f
 800db68:	8800759c 	.word	0x8800759c
 800db6c:	7e37e43c 	.word	0x7e37e43c
 800db70:	8800759c 	.word	0x8800759c
 800db74:	fe37e43c 	.word	0xfe37e43c
 800db78:	c2f8f359 	.word	0xc2f8f359
 800db7c:	81a56e1f 	.word	0x81a56e1f
 800db80:	43500000 	.word	0x43500000
 800db84:	ffff3cb0 	.word	0xffff3cb0
 800db88:	3c900000 	.word	0x3c900000

0800db8c <__ieee754_sqrt>:
 800db8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	ec55 4b10 	vmov	r4, r5, d0
 800db94:	4e67      	ldr	r6, [pc, #412]	; (800dd34 <__ieee754_sqrt+0x1a8>)
 800db96:	43ae      	bics	r6, r5
 800db98:	ee10 0a10 	vmov	r0, s0
 800db9c:	ee10 2a10 	vmov	r2, s0
 800dba0:	4629      	mov	r1, r5
 800dba2:	462b      	mov	r3, r5
 800dba4:	d10d      	bne.n	800dbc2 <__ieee754_sqrt+0x36>
 800dba6:	f7f2 fd27 	bl	80005f8 <__aeabi_dmul>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4620      	mov	r0, r4
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	f7f2 fb6b 	bl	800028c <__adddf3>
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	460d      	mov	r5, r1
 800dbba:	ec45 4b10 	vmov	d0, r4, r5
 800dbbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc2:	2d00      	cmp	r5, #0
 800dbc4:	dc0b      	bgt.n	800dbde <__ieee754_sqrt+0x52>
 800dbc6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dbca:	4326      	orrs	r6, r4
 800dbcc:	d0f5      	beq.n	800dbba <__ieee754_sqrt+0x2e>
 800dbce:	b135      	cbz	r5, 800dbde <__ieee754_sqrt+0x52>
 800dbd0:	f7f2 fb5a 	bl	8000288 <__aeabi_dsub>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	f7f2 fe38 	bl	800084c <__aeabi_ddiv>
 800dbdc:	e7eb      	b.n	800dbb6 <__ieee754_sqrt+0x2a>
 800dbde:	1509      	asrs	r1, r1, #20
 800dbe0:	f000 808d 	beq.w	800dcfe <__ieee754_sqrt+0x172>
 800dbe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbe8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dbec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbf0:	07c9      	lsls	r1, r1, #31
 800dbf2:	bf5c      	itt	pl
 800dbf4:	005b      	lslpl	r3, r3, #1
 800dbf6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dbfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dbfe:	bf58      	it	pl
 800dc00:	0052      	lslpl	r2, r2, #1
 800dc02:	2500      	movs	r5, #0
 800dc04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc08:	1076      	asrs	r6, r6, #1
 800dc0a:	0052      	lsls	r2, r2, #1
 800dc0c:	f04f 0e16 	mov.w	lr, #22
 800dc10:	46ac      	mov	ip, r5
 800dc12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc16:	eb0c 0001 	add.w	r0, ip, r1
 800dc1a:	4298      	cmp	r0, r3
 800dc1c:	bfde      	ittt	le
 800dc1e:	1a1b      	suble	r3, r3, r0
 800dc20:	eb00 0c01 	addle.w	ip, r0, r1
 800dc24:	186d      	addle	r5, r5, r1
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	f1be 0e01 	subs.w	lr, lr, #1
 800dc2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc30:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dc34:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dc38:	d1ed      	bne.n	800dc16 <__ieee754_sqrt+0x8a>
 800dc3a:	4674      	mov	r4, lr
 800dc3c:	2720      	movs	r7, #32
 800dc3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dc42:	4563      	cmp	r3, ip
 800dc44:	eb01 000e 	add.w	r0, r1, lr
 800dc48:	dc02      	bgt.n	800dc50 <__ieee754_sqrt+0xc4>
 800dc4a:	d113      	bne.n	800dc74 <__ieee754_sqrt+0xe8>
 800dc4c:	4290      	cmp	r0, r2
 800dc4e:	d811      	bhi.n	800dc74 <__ieee754_sqrt+0xe8>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	eb00 0e01 	add.w	lr, r0, r1
 800dc56:	da57      	bge.n	800dd08 <__ieee754_sqrt+0x17c>
 800dc58:	f1be 0f00 	cmp.w	lr, #0
 800dc5c:	db54      	blt.n	800dd08 <__ieee754_sqrt+0x17c>
 800dc5e:	f10c 0801 	add.w	r8, ip, #1
 800dc62:	eba3 030c 	sub.w	r3, r3, ip
 800dc66:	4290      	cmp	r0, r2
 800dc68:	bf88      	it	hi
 800dc6a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dc6e:	1a12      	subs	r2, r2, r0
 800dc70:	440c      	add	r4, r1
 800dc72:	46c4      	mov	ip, r8
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	3f01      	subs	r7, #1
 800dc78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dc80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dc84:	d1dd      	bne.n	800dc42 <__ieee754_sqrt+0xb6>
 800dc86:	4313      	orrs	r3, r2
 800dc88:	d01b      	beq.n	800dcc2 <__ieee754_sqrt+0x136>
 800dc8a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800dd38 <__ieee754_sqrt+0x1ac>
 800dc8e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800dd3c <__ieee754_sqrt+0x1b0>
 800dc92:	e9da 0100 	ldrd	r0, r1, [sl]
 800dc96:	e9db 2300 	ldrd	r2, r3, [fp]
 800dc9a:	f7f2 faf5 	bl	8000288 <__aeabi_dsub>
 800dc9e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	4640      	mov	r0, r8
 800dca8:	4649      	mov	r1, r9
 800dcaa:	f7f2 ff21 	bl	8000af0 <__aeabi_dcmple>
 800dcae:	b140      	cbz	r0, 800dcc2 <__ieee754_sqrt+0x136>
 800dcb0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dcb4:	e9da 0100 	ldrd	r0, r1, [sl]
 800dcb8:	e9db 2300 	ldrd	r2, r3, [fp]
 800dcbc:	d126      	bne.n	800dd0c <__ieee754_sqrt+0x180>
 800dcbe:	3501      	adds	r5, #1
 800dcc0:	463c      	mov	r4, r7
 800dcc2:	106a      	asrs	r2, r5, #1
 800dcc4:	0863      	lsrs	r3, r4, #1
 800dcc6:	07e9      	lsls	r1, r5, #31
 800dcc8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dccc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dcd0:	bf48      	it	mi
 800dcd2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dcd6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dcda:	461c      	mov	r4, r3
 800dcdc:	e76d      	b.n	800dbba <__ieee754_sqrt+0x2e>
 800dcde:	0ad3      	lsrs	r3, r2, #11
 800dce0:	3815      	subs	r0, #21
 800dce2:	0552      	lsls	r2, r2, #21
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d0fa      	beq.n	800dcde <__ieee754_sqrt+0x152>
 800dce8:	02dc      	lsls	r4, r3, #11
 800dcea:	d50a      	bpl.n	800dd02 <__ieee754_sqrt+0x176>
 800dcec:	f1c1 0420 	rsb	r4, r1, #32
 800dcf0:	fa22 f404 	lsr.w	r4, r2, r4
 800dcf4:	1e4d      	subs	r5, r1, #1
 800dcf6:	408a      	lsls	r2, r1
 800dcf8:	4323      	orrs	r3, r4
 800dcfa:	1b41      	subs	r1, r0, r5
 800dcfc:	e772      	b.n	800dbe4 <__ieee754_sqrt+0x58>
 800dcfe:	4608      	mov	r0, r1
 800dd00:	e7f0      	b.n	800dce4 <__ieee754_sqrt+0x158>
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	3101      	adds	r1, #1
 800dd06:	e7ef      	b.n	800dce8 <__ieee754_sqrt+0x15c>
 800dd08:	46e0      	mov	r8, ip
 800dd0a:	e7aa      	b.n	800dc62 <__ieee754_sqrt+0xd6>
 800dd0c:	f7f2 fabe 	bl	800028c <__adddf3>
 800dd10:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd14:	4602      	mov	r2, r0
 800dd16:	460b      	mov	r3, r1
 800dd18:	4640      	mov	r0, r8
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	f7f2 fede 	bl	8000adc <__aeabi_dcmplt>
 800dd20:	b120      	cbz	r0, 800dd2c <__ieee754_sqrt+0x1a0>
 800dd22:	1ca0      	adds	r0, r4, #2
 800dd24:	bf08      	it	eq
 800dd26:	3501      	addeq	r5, #1
 800dd28:	3402      	adds	r4, #2
 800dd2a:	e7ca      	b.n	800dcc2 <__ieee754_sqrt+0x136>
 800dd2c:	3401      	adds	r4, #1
 800dd2e:	f024 0401 	bic.w	r4, r4, #1
 800dd32:	e7c6      	b.n	800dcc2 <__ieee754_sqrt+0x136>
 800dd34:	7ff00000 	.word	0x7ff00000
 800dd38:	20000218 	.word	0x20000218
 800dd3c:	20000220 	.word	0x20000220

0800dd40 <_init>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	bf00      	nop
 800dd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd46:	bc08      	pop	{r3}
 800dd48:	469e      	mov	lr, r3
 800dd4a:	4770      	bx	lr

0800dd4c <_fini>:
 800dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4e:	bf00      	nop
 800dd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd52:	bc08      	pop	{r3}
 800dd54:	469e      	mov	lr, r3
 800dd56:	4770      	bx	lr
