
code_sat_freertos_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015104  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  080152e8  080152e8  000162e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080159c4  080159c4  000171f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080159c4  080159c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159cc  080159cc  000171f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159cc  080159cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080159d0  080159d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080159d4  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041e8  200001f8  08015bcc  000171f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043e0  08015bcc  000173e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ddbb  00000000  00000000  00017228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067eb  00000000  00000000  00044fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025a0  00000000  00000000  0004b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d1b  00000000  00000000  0004dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289df  00000000  00000000  0004fa8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003341f  00000000  00000000  0007846a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee1c7  00000000  00000000  000ab889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00199a50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b4c4  00000000  00000000  00199a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001a4f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080152cc 	.word	0x080152cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	080152cc 	.word	0x080152cc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f010 f91e 	bl	80112ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001090:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001096:	4b3e      	ldr	r3, [pc, #248]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001098:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b0:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b8:	2208      	movs	r2, #8
 80010ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010bc:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010be:	2200      	movs	r2, #0
 80010c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ea:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	4825      	ldr	r0, [pc, #148]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010fa:	f002 fcdd 	bl	8003ab8 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001104:	f001 f8f4 	bl	80022f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	481f      	ldr	r0, [pc, #124]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001114:	f003 fea2 	bl	8004e5c <HAL_ADCEx_MultiModeConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800111e:	f001 f8e7 	bl	80022f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_ADC1_Init+0x124>)
 8001124:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800112a:	2307      	movs	r3, #7
 800112c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001140:	f003 f92a 	bl	8004398 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800114a:	f001 f8d1 	bl	80022f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_ADC1_Init+0x128>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001152:	230c      	movs	r3, #12
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC1_Init+0x120>)
 800115c:	f003 f91c 	bl	8004398 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001166:	f001 f8c3 	bl	80022f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_ADC1_Init+0x12c>)
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800116e:	2312      	movs	r3, #18
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001178:	f003 f90e 	bl	8004398 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001182:	f001 f8b5 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	@ 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000214 	.word	0x20000214
 8001194:	cb840000 	.word	0xcb840000
 8001198:	c3210000 	.word	0xc3210000
 800119c:	0c900008 	.word	0x0c900008

080011a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09a      	sub	sp, #104	@ 0x68
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2244      	movs	r2, #68	@ 0x44
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f010 f882 	bl	80112ca <memset>
  if(adcHandle->Instance==ADC1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ce:	d167      	bne.n	80012a0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 ff2f 	bl	8007044 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011ec:	f001 f880 	bl	80022f0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001220:	2304      	movs	r3, #4
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001236:	f004 fad3 	bl	80057e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_ADC_MspInit+0x110>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001242:	2205      	movs	r2, #5
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800125a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800126a:	2220      	movs	r2, #32
 800126c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001276:	f003 ff75 	bl	8005164 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001280:	f001 f836 	bl	80022f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2012      	movs	r0, #18
 8001296:	f003 ff3d 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800129a:	2012      	movs	r0, #18
 800129c:	f003 ff54 	bl	8005148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3768      	adds	r7, #104	@ 0x68
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	20000280 	.word	0x20000280
 80012b0:	4002001c 	.word	0x4002001c
 80012b4:	00000000 	.word	0x00000000

080012b8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80012b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ca:	f040 8097 	bne.w	80013fc <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80012ce:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f94e 	bl	8000574 <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	a14a      	add	r1, pc, #296	@ (adr r1, 8001408 <HAL_ADC_ConvCpltCallback+0x150>)
 80012de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e2:	f7ff fadb 	bl	800089c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fca3 	bl	8000c38 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a49      	ldr	r2, [pc, #292]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80012f6:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80012f8:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	4b49      	ldr	r3, [pc, #292]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	4943      	ldr	r1, [pc, #268]	@ (8001428 <HAL_ADC_ConvCpltCallback+0x170>)
 800131a:	f7ff fabf 	bl	800089c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4690      	mov	r8, r2
 8001324:	4699      	mov	r9, r3
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f922 	bl	8000574 <__aeabi_i2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	4b39      	ldr	r3, [pc, #228]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f92d 	bl	8000598 <__aeabi_f2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 8001344:	f7ff faaa 	bl	800089c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f97a 	bl	8000648 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f919 	bl	8000598 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7fe ffb3 	bl	80002d8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7ff f965 	bl	8000648 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc57 	bl	8000c38 <__aeabi_d2f>
 800138a:	ee07 0a10 	vmov	s14, r0
 800138e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_ADC_ConvCpltCallback+0x178>)
 8001398:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8e7 	bl	8000574 <__aeabi_i2d>
 80013a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001410 <HAL_ADC_ConvCpltCallback+0x158>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa76 	bl	800089c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 80013be:	f7ff f943 	bl	8000648 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f934 	bl	8000648 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fc26 	bl	8000c38 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <HAL_ADC_ConvCpltCallback+0x17c>)
 80013f0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 80013f2:	2203      	movs	r2, #3
 80013f4:	4908      	ldr	r1, [pc, #32]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80013f6:	4810      	ldr	r0, [pc, #64]	@ (8001438 <HAL_ADC_ConvCpltCallback+0x180>)
 80013f8:	f002 fce2 	bl	8003dc0 <HAL_ADC_Start_DMA>

	}

}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001406:	bf00      	nop
 8001408:	d70a3d70 	.word	0xd70a3d70
 800140c:	40b36323 	.word	0x40b36323
 8001410:	00000000 	.word	0x00000000
 8001414:	40affe00 	.word	0x40affe00
 8001418:	20000a54 	.word	0x20000a54
 800141c:	20000a60 	.word	0x20000a60
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004
 8001428:	40590000 	.word	0x40590000
 800142c:	40080000 	.word	0x40080000
 8001430:	20000a5c 	.word	0x20000a5c
 8001434:	20000a64 	.word	0x20000a64
 8001438:	20000214 	.word	0x20000214

0800143c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b094      	sub	sp, #80	@ 0x50
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001442:	2300      	movs	r3, #0
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001446:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800144a:	4618      	mov	r0, r3
 800144c:	f00c faed 	bl	800da2a <osMutexCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a35      	ldr	r2, [pc, #212]	@ (8001528 <MX_FREERTOS_Init+0xec>)
 8001454:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2Cmutex */
  osMutexDef(I2Cmutex);
 8001456:	2300      	movs	r3, #0
 8001458:	64bb      	str	r3, [r7, #72]	@ 0x48
  I2CmutexHandle = osMutexCreate(osMutex(I2Cmutex));
 800145a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800145e:	4618      	mov	r0, r3
 8001460:	f00c fae3 	bl	800da2a <osMutexCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a31      	ldr	r2, [pc, #196]	@ (800152c <MX_FREERTOS_Init+0xf0>)
 8001468:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartmutex */
  osMutexDef(uartmutex);
 800146a:	2300      	movs	r3, #0
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
  uartmutexHandle = osMutexCreate(osMutex(uartmutex));
 800146e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001472:	4618      	mov	r0, r3
 8001474:	f00c fad9 	bl	800da2a <osMutexCreate>
 8001478:	4603      	mov	r3, r0
 800147a:	4a2d      	ldr	r2, [pc, #180]	@ (8001530 <MX_FREERTOS_Init+0xf4>)
 800147c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of uartTxDone */
  osSemaphoreDef(uartTxDone);
 800147e:	2300      	movs	r3, #0
 8001480:	643b      	str	r3, [r7, #64]	@ 0x40
  uartTxDoneHandle = osSemaphoreCreate(osSemaphore(uartTxDone), 1);
 8001482:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f00c fb5f 	bl	800db4c <osSemaphoreCreate>
 800148e:	4603      	mov	r3, r0
 8001490:	4a28      	ldr	r2, [pc, #160]	@ (8001534 <MX_FREERTOS_Init+0xf8>)
 8001492:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreWait(uartTxDoneHandle, 0);
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <MX_FREERTOS_Init+0xf8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f00c fb74 	bl	800db88 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityAboveNormal, 0, 300);
 80014a0:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <MX_FREERTOS_Init+0xfc>)
 80014a2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80014a6:	461d      	mov	r5, r3
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 80014b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00c fa7c 	bl	800d9b4 <osThreadCreate>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <MX_FREERTOS_Init+0x100>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <MX_FREERTOS_Init+0x104>)
 80014c4:	f107 0418 	add.w	r4, r7, #24
 80014c8:	461d      	mov	r5, r3
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f00c fa6b 	bl	800d9b4 <osThreadCreate>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <MX_FREERTOS_Init+0x108>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityRealtime, 0, 256);
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_FREERTOS_Init+0x10c>)
 80014e6:	1d3c      	adds	r4, r7, #4
 80014e8:	461d      	mov	r5, r3
 80014ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ee:	682b      	ldr	r3, [r5, #0]
 80014f0:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00c fa5c 	bl	800d9b4 <osThreadCreate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a13      	ldr	r2, [pc, #76]	@ (800154c <MX_FREERTOS_Init+0x110>)
 8001500:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */


  CoreDebug->DEMCR |=CoreDebug_DEMCR_TRCENA_Msk;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_FREERTOS_Init+0x114>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_FREERTOS_Init+0x114>)
 8001508:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800150c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT =0;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001520:	bf00      	nop
 8001522:	3750      	adds	r7, #80	@ 0x50
 8001524:	46bd      	mov	sp, r7
 8001526:	bdb0      	pop	{r4, r5, r7, pc}
 8001528:	20000348 	.word	0x20000348
 800152c:	2000034c 	.word	0x2000034c
 8001530:	20000350 	.word	0x20000350
 8001534:	20000354 	.word	0x20000354
 8001538:	080152f8 	.word	0x080152f8
 800153c:	2000033c 	.word	0x2000033c
 8001540:	08015318 	.word	0x08015318
 8001544:	20000340 	.word	0x20000340
 8001548:	0801533c 	.word	0x0801533c
 800154c:	20000344 	.word	0x20000344
 8001550:	e000edf0 	.word	0xe000edf0
 8001554:	e0001000 	.word	0xe0001000

08001558 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001560:	f00d fd8e 	bl	800f080 <xTaskGetTickCount>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  lcd_clear();
 8001568:	f000 fc84 	bl	8001e74 <lcd_clear>
	  if(led_flag==0){
 800156c:	4b39      	ldr	r3, [pc, #228]	@ (8001654 <Startstatemachine+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10c      	bne.n	800158e <Startstatemachine+0x36>
		  LED_Setcolour(255, 0, 0,0, 0, 255);
 8001574:	23ff      	movs	r3, #255	@ 0xff
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	20ff      	movs	r0, #255	@ 0xff
 8001584:	f000 fcda 	bl	8001f3c <LED_Setcolour>
		  LED_Update();
 8001588:	f000 fd68 	bl	800205c <LED_Update>
 800158c:	e00b      	b.n	80015a6 <Startstatemachine+0x4e>

	  }
	  else{
		  LED_Setcolour(0, 0, 255,255, 0, 0);
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	23ff      	movs	r3, #255	@ 0xff
 8001598:	22ff      	movs	r2, #255	@ 0xff
 800159a:	2100      	movs	r1, #0
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fccd 	bl	8001f3c <LED_Setcolour>
		  LED_Update();
 80015a2:	f000 fd5b 	bl	800205c <LED_Update>
	  }
	  led_flag=1-led_flag;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <Startstatemachine+0xfc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1c3 0301 	rsb	r3, r3, #1
 80015ae:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <Startstatemachine+0xfc>)
 80015b0:	6013      	str	r3, [r2, #0]
	  if(flag_fin==0){
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <Startstatemachine+0x100>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d12d      	bne.n	8001616 <Startstatemachine+0xbe>
	  setCursor(0,0);
 80015ba:	2100      	movs	r1, #0
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 fc7a 	bl	8001eb6 <setCursor>
	  snprintf((char *)lcdbuffer,30,"hauteur=%0.2f",OTHERData.altitude_baro);
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <Startstatemachine+0x104>)
 80015c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffe6 	bl	8000598 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9cd 2300 	strd	r2, r3, [sp]
 80015d4:	4a22      	ldr	r2, [pc, #136]	@ (8001660 <Startstatemachine+0x108>)
 80015d6:	211e      	movs	r1, #30
 80015d8:	4822      	ldr	r0, [pc, #136]	@ (8001664 <Startstatemachine+0x10c>)
 80015da:	f00f fddb 	bl	8011194 <sniprintf>
	  lcd_send_string((char *)lcdbuffer);
 80015de:	4821      	ldr	r0, [pc, #132]	@ (8001664 <Startstatemachine+0x10c>)
 80015e0:	f000 fc52 	bl	8001e88 <lcd_send_string>
	  osDelay(2);
 80015e4:	2002      	movs	r0, #2
 80015e6:	f00c fa0c 	bl	800da02 <osDelay>
	  setCursor(1,0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 fc62 	bl	8001eb6 <setCursor>
	  snprintf((char *)lcdbuffer,30,"dist=%0.1fm",distance_RSSI);
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <Startstatemachine+0x110>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffce 	bl	8000598 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9cd 2300 	strd	r2, r3, [sp]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <Startstatemachine+0x114>)
 8001606:	211e      	movs	r1, #30
 8001608:	4816      	ldr	r0, [pc, #88]	@ (8001664 <Startstatemachine+0x10c>)
 800160a:	f00f fdc3 	bl	8011194 <sniprintf>
	  lcd_send_string((char *)lcdbuffer);
 800160e:	4815      	ldr	r0, [pc, #84]	@ (8001664 <Startstatemachine+0x10c>)
 8001610:	f000 fc3a 	bl	8001e88 <lcd_send_string>
 8001614:	e017      	b.n	8001646 <Startstatemachine+0xee>
	  }
	  else{
		  setCursor(0,0);
 8001616:	2100      	movs	r1, #0
 8001618:	2000      	movs	r0, #0
 800161a:	f000 fc4c 	bl	8001eb6 <setCursor>
		  	  snprintf((char *)lcdbuffer,30,"FIN");
 800161e:	4a14      	ldr	r2, [pc, #80]	@ (8001670 <Startstatemachine+0x118>)
 8001620:	211e      	movs	r1, #30
 8001622:	4810      	ldr	r0, [pc, #64]	@ (8001664 <Startstatemachine+0x10c>)
 8001624:	f00f fdb6 	bl	8011194 <sniprintf>
		  	  lcd_send_string((char *)lcdbuffer);
 8001628:	480e      	ldr	r0, [pc, #56]	@ (8001664 <Startstatemachine+0x10c>)
 800162a:	f000 fc2d 	bl	8001e88 <lcd_send_string>
		  	  setCursor(1,0);
 800162e:	2100      	movs	r1, #0
 8001630:	2001      	movs	r0, #1
 8001632:	f000 fc40 	bl	8001eb6 <setCursor>
		  	  snprintf((char *)lcdbuffer,30,"FIN");
 8001636:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <Startstatemachine+0x118>)
 8001638:	211e      	movs	r1, #30
 800163a:	480a      	ldr	r0, [pc, #40]	@ (8001664 <Startstatemachine+0x10c>)
 800163c:	f00f fdaa 	bl	8011194 <sniprintf>
		  	  lcd_send_string((char *)lcdbuffer);
 8001640:	4808      	ldr	r0, [pc, #32]	@ (8001664 <Startstatemachine+0x10c>)
 8001642:	f000 fc21 	bl	8001e88 <lcd_send_string>

	  }


	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	21c8      	movs	r1, #200	@ 0xc8
 800164c:	4618      	mov	r0, r3
 800164e:	f00d facf 	bl	800ebf0 <vTaskDelayUntil>
  {
 8001652:	e789      	b.n	8001568 <Startstatemachine+0x10>
 8001654:	200002f8 	.word	0x200002f8
 8001658:	20000c2c 	.word	0x20000c2c
 800165c:	20000a68 	.word	0x20000a68
 8001660:	08015350 	.word	0x08015350
 8001664:	200002fc 	.word	0x200002fc
 8001668:	200002e8 	.word	0x200002e8
 800166c:	08015360 	.word	0x08015360
 8001670:	0801536c 	.word	0x0801536c

08001674 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af02      	add	r7, sp, #8
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */

	FRESULT fres=FR_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
	fres = f_mount(&FatFs, "", 1);
 8001680:	2201      	movs	r2, #1
 8001682:	4941      	ldr	r1, [pc, #260]	@ (8001788 <StartSdcard+0x114>)
 8001684:	4841      	ldr	r0, [pc, #260]	@ (800178c <StartSdcard+0x118>)
 8001686:	f00b f8dd 	bl	800c844 <f_mount>
 800168a:	4603      	mov	r3, r0
 800168c:	77fb      	strb	r3, [r7, #31]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800168e:	f00d fcf7 	bl	800f080 <xTaskGetTickCount>
 8001692:	4603      	mov	r3, r0
 8001694:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <StartSdcard+0x11c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <StartSdcard+0x120>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00c f9cd 	bl	800da44 <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <StartSdcard+0x124>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f1c3 0301 	rsb	r3, r3, #1
 80016b2:	4a39      	ldr	r2, [pc, #228]	@ (8001798 <StartSdcard+0x124>)
 80016b4:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <StartSdcard+0x124>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10a      	bne.n	80016d4 <StartSdcard+0x60>
			  LED_Setcolour(0,0,0,255,255,255);
 80016be:	23ff      	movs	r3, #255	@ 0xff
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	23ff      	movs	r3, #255	@ 0xff
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	23ff      	movs	r3, #255	@ 0xff
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 fc35 	bl	8001f3c <LED_Setcolour>
 80016d2:	e009      	b.n	80016e8 <StartSdcard+0x74>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 80016d4:	2300      	movs	r3, #0
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 fc2a 	bl	8001f3c <LED_Setcolour>
		  }

		  if(flag_drop==0){
 80016e8:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <StartSdcard+0x128>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d112      	bne.n	8001716 <StartSdcard+0xa2>

			  if(sd_counter==5){
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <StartSdcard+0x12c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d108      	bne.n	800170a <StartSdcard+0x96>
				  fres=store_in_sd(fres);
 80016f8:	7ffb      	ldrb	r3, [r7, #31]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fdfe 	bl	80022fc <store_in_sd>
 8001700:	4603      	mov	r3, r0
 8001702:	77fb      	strb	r3, [r7, #31]

			  sd_counter=0;
 8001704:	4b26      	ldr	r3, [pc, #152]	@ (80017a0 <StartSdcard+0x12c>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 800170a:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <StartSdcard+0x12c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <StartSdcard+0x12c>)
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e005      	b.n	8001722 <StartSdcard+0xae>

		  }
		  else{
			  fres=store_in_sd(fres);
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fdef 	bl	80022fc <store_in_sd>
 800171e:	4603      	mov	r3, r0
 8001720:	77fb      	strb	r3, [r7, #31]

		  }



		  osMutexRelease(SDCard_mutexeHandle);
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <StartSdcard+0x120>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f00c f9da 	bl	800dae0 <osMutexRelease>

			if(flag_fin==1){
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <StartSdcard+0x130>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <StartSdcard+0xd0>

				f_mount(NULL, "", 0);
 8001734:	2200      	movs	r2, #0
 8001736:	4914      	ldr	r1, [pc, #80]	@ (8001788 <StartSdcard+0x114>)
 8001738:	2000      	movs	r0, #0
 800173a:	f00b f883 	bl	800c844 <f_mount>
				osThreadSuspend(NULL);
 800173e:	2000      	movs	r0, #0
 8001740:	f00c fab9 	bl	800dcb6 <osThreadSuspend>
			}

			  uint32_t end1= DWT->CYCCNT;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <StartSdcard+0x11c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	617b      	str	r3, [r7, #20]
			  uint32_t cycles= end1-start1;
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	613b      	str	r3, [r7, #16]
			  timesdcard=(float) cycles/(SystemCoreClock/1000000.0f);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <StartSdcard+0x134>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001768:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80017ac <StartSdcard+0x138>
 800176c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <StartSdcard+0x13c>)
 8001776:	edc3 7a00 	vstr	s15, [r3]


			  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	21c8      	movs	r1, #200	@ 0xc8
 8001780:	4618      	mov	r0, r3
 8001782:	f00d fa35 	bl	800ebf0 <vTaskDelayUntil>
  {
 8001786:	e786      	b.n	8001696 <StartSdcard+0x22>
 8001788:	08015370 	.word	0x08015370
 800178c:	200005ec 	.word	0x200005ec
 8001790:	e0001000 	.word	0xe0001000
 8001794:	20000348 	.word	0x20000348
 8001798:	200002ec 	.word	0x200002ec
 800179c:	20000c20 	.word	0x20000c20
 80017a0:	200002e0 	.word	0x200002e0
 80017a4:	20000c2c 	.word	0x20000c2c
 80017a8:	20000008 	.word	0x20000008
 80017ac:	49742400 	.word	0x49742400
 80017b0:	200002f0 	.word	0x200002f0

080017b4 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b09d      	sub	sp, #116	@ 0x74
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTarvosDecode */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80017bc:	f00d fc60 	bl	800f080 <xTaskGetTickCount>
 80017c0:	6638      	str	r0, [r7, #96]	@ 0x60
	 uint8_t temp_trame[TRAME_SIZE];
		      uint8_t temp5[5];
		      uint8_t data_index = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 80017c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a40 <startTarvosDecode+0x28c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	65fb      	str	r3, [r7, #92]	@ 0x5c



	          while (read_index != write_index) {
 80017ce:	e107      	b.n	80019e0 <startTarvosDecode+0x22c>
	              // Recherche de l'entête principale
	              if (circular_buffer[read_index] == 0x02 &&
 80017d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a44 <startTarvosDecode+0x290>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001a48 <startTarvosDecode+0x294>)
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	f040 80f1 	bne.w	80019c4 <startTarvosDecode+0x210>
	                  circular_buffer[(read_index + 1) % CIRC_BUF_SIZE] == 0x81)
 80017e2:	4b98      	ldr	r3, [pc, #608]	@ (8001a44 <startTarvosDecode+0x290>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	425a      	negs	r2, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	bf58      	it	pl
 80017f2:	4253      	negpl	r3, r2
 80017f4:	4a94      	ldr	r2, [pc, #592]	@ (8001a48 <startTarvosDecode+0x294>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
	              if (circular_buffer[read_index] == 0x02 &&
 80017f8:	2b81      	cmp	r3, #129	@ 0x81
 80017fa:	f040 80e3 	bne.w	80019c4 <startTarvosDecode+0x210>
	              {
	                  data_index = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	                  while (data_index < TRAME_SIZE) {
 8001804:	e07c      	b.n	8001900 <startTarvosDecode+0x14c>
	                      // Vérifie s’il reste au moins 5 octets
	                      uint16_t available = (write_index >= read_index)
 8001806:	4b91      	ldr	r3, [pc, #580]	@ (8001a4c <startTarvosDecode+0x298>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b8d      	ldr	r3, [pc, #564]	@ (8001a44 <startTarvosDecode+0x290>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	429a      	cmp	r2, r3
 8001814:	d308      	bcc.n	8001828 <startTarvosDecode+0x74>
	                          ? (write_index - read_index)
 8001816:	4b8d      	ldr	r3, [pc, #564]	@ (8001a4c <startTarvosDecode+0x298>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b89      	ldr	r3, [pc, #548]	@ (8001a44 <startTarvosDecode+0x290>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b29b      	uxth	r3, r3
 8001826:	e00a      	b.n	800183e <startTarvosDecode+0x8a>
	                          : (CIRC_BUF_SIZE - read_index + write_index);
 8001828:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <startTarvosDecode+0x298>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b85      	ldr	r3, [pc, #532]	@ (8001a44 <startTarvosDecode+0x290>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 8001838:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800183c:	b29b      	uxth	r3, r3
 800183e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	                      if (available < 5) {
 8001842:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001846:	2b04      	cmp	r3, #4
 8001848:	d960      	bls.n	800190c <startTarvosDecode+0x158>
	                          break; // attendre plus de données
	                      }

	                      // Copie 5 octets
	                      for (int i = 0; i < 5; i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800184e:	e015      	b.n	800187c <startTarvosDecode+0xc8>
	                          temp5[i] = circular_buffer[(read_index + i) % CIRC_BUF_SIZE];
 8001850:	4b7c      	ldr	r3, [pc, #496]	@ (8001a44 <startTarvosDecode+0x290>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800185a:	4413      	add	r3, r2
 800185c:	425a      	negs	r2, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	bf58      	it	pl
 8001864:	4253      	negpl	r3, r2
 8001866:	4a78      	ldr	r2, [pc, #480]	@ (8001a48 <startTarvosDecode+0x294>)
 8001868:	5cd1      	ldrb	r1, [r2, r3]
 800186a:	f107 0208 	add.w	r2, r7, #8
 800186e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001870:	4413      	add	r3, r2
 8001872:	460a      	mov	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
	                      for (int i = 0; i < 5; i++) {
 8001876:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001878:	3301      	adds	r3, #1
 800187a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800187c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800187e:	2b04      	cmp	r3, #4
 8001880:	dde6      	ble.n	8001850 <startTarvosDecode+0x9c>
	                      }

	                      // Confirmation TX ? (trame parasite)
	                      if (temp5[0] == 0x02 && temp5[1] == 0x40 && temp5[2] == 0x01) {
 8001882:	7a3b      	ldrb	r3, [r7, #8]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d112      	bne.n	80018ae <startTarvosDecode+0xfa>
 8001888:	7a7b      	ldrb	r3, [r7, #9]
 800188a:	2b40      	cmp	r3, #64	@ 0x40
 800188c:	d10f      	bne.n	80018ae <startTarvosDecode+0xfa>
 800188e:	7abb      	ldrb	r3, [r7, #10]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10c      	bne.n	80018ae <startTarvosDecode+0xfa>
	                          // Skip trame de confirmation
	                          read_index = (read_index + 5) % CIRC_BUF_SIZE;
 8001894:	4b6b      	ldr	r3, [pc, #428]	@ (8001a44 <startTarvosDecode+0x290>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	3305      	adds	r3, #5
 800189c:	425a      	negs	r2, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	bf58      	it	pl
 80018a4:	4253      	negpl	r3, r2
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <startTarvosDecode+0x290>)
 80018aa:	801a      	strh	r2, [r3, #0]
	                          continue;
 80018ac:	e028      	b.n	8001900 <startTarvosDecode+0x14c>
	                      }

	                      // Sinon : partie utile, on ajoute à la trame
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80018b2:	e012      	b.n	80018da <startTarvosDecode+0x126>
	                          temp_trame[data_index++] = temp5[i];
 80018b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 80018be:	4619      	mov	r1, r3
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018c6:	4413      	add	r3, r2
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 80018ce:	443b      	add	r3, r7
 80018d0:	f803 2c60 	strb.w	r2, [r3, #-96]
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 80018d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018d6:	3301      	adds	r3, #1
 80018d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80018da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018dc:	2b04      	cmp	r3, #4
 80018de:	dc03      	bgt.n	80018e8 <startTarvosDecode+0x134>
 80018e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80018e6:	d9e5      	bls.n	80018b4 <startTarvosDecode+0x100>
	                      }

	                      read_index = (read_index + 5) % CIRC_BUF_SIZE;
 80018e8:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <startTarvosDecode+0x290>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	3305      	adds	r3, #5
 80018f0:	425a      	negs	r2, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	bf58      	it	pl
 80018f8:	4253      	negpl	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b51      	ldr	r3, [pc, #324]	@ (8001a44 <startTarvosDecode+0x290>)
 80018fe:	801a      	strh	r2, [r3, #0]
	                  while (data_index < TRAME_SIZE) {
 8001900:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001904:	2b3b      	cmp	r3, #59	@ 0x3b
 8001906:	f67f af7e 	bls.w	8001806 <startTarvosDecode+0x52>
 800190a:	e000      	b.n	800190e <startTarvosDecode+0x15a>
	                          break; // attendre plus de données
 800190c:	bf00      	nop
	                  }

	                  if (data_index == TRAME_SIZE) {
 800190e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001912:	2b3c      	cmp	r3, #60	@ 0x3c
 8001914:	d163      	bne.n	80019de <startTarvosDecode+0x22a>

	                	  if (tarvos_checksum(temp_trame, TRAME_SIZE) == temp_trame[TRAME_SIZE - 1]) {
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	213c      	movs	r1, #60	@ 0x3c
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fa27 	bl	8002d70 <tarvos_checksum>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800192a:	429a      	cmp	r2, r3
 800192c:	d157      	bne.n	80019de <startTarvosDecode+0x22a>

	                      memcpy(tarvos_DATA, temp_trame, TRAME_SIZE);
 800192e:	4b48      	ldr	r3, [pc, #288]	@ (8001a50 <startTarvosDecode+0x29c>)
 8001930:	f107 0410 	add.w	r4, r7, #16
 8001934:	469c      	mov	ip, r3
 8001936:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800193a:	4665      	mov	r5, ip
 800193c:	4626      	mov	r6, r4
 800193e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001940:	6028      	str	r0, [r5, #0]
 8001942:	6069      	str	r1, [r5, #4]
 8001944:	60aa      	str	r2, [r5, #8]
 8001946:	60eb      	str	r3, [r5, #12]
 8001948:	3410      	adds	r4, #16
 800194a:	f10c 0c10 	add.w	ip, ip, #16
 800194e:	4574      	cmp	r4, lr
 8001950:	d1f3      	bne.n	800193a <startTarvosDecode+0x186>
 8001952:	4665      	mov	r5, ip
 8001954:	4623      	mov	r3, r4
 8001956:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001958:	6028      	str	r0, [r5, #0]
 800195a:	6069      	str	r1, [r5, #4]
 800195c:	60aa      	str	r2, [r5, #8]
	                      decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 800195e:	493c      	ldr	r1, [pc, #240]	@ (8001a50 <startTarvosDecode+0x29c>)
 8001960:	483c      	ldr	r0, [pc, #240]	@ (8001a54 <startTarvosDecode+0x2a0>)
 8001962:	f001 f917 	bl	8002b94 <decode_payload>

	    if ((vraiRSSI >= 0) || (vraiRSSI < -120) || (NVALUE <= 0.0f)) {
 8001966:	4b3c      	ldr	r3, [pc, #240]	@ (8001a58 <startTarvosDecode+0x2a4>)
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da05      	bge.n	800197c <startTarvosDecode+0x1c8>
 8001970:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <startTarvosDecode+0x2a4>)
 8001972:	f993 3000 	ldrsb.w	r3, [r3]
 8001976:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 800197a:	da03      	bge.n	8001984 <startTarvosDecode+0x1d0>
	        distance_RSSI= -1.0f; // Valeur invalide
 800197c:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <startTarvosDecode+0x2a8>)
 800197e:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <startTarvosDecode+0x2ac>)
 8001980:	601a      	str	r2, [r3, #0]
	                  if (data_index == TRAME_SIZE) {
 8001982:	e02c      	b.n	80019de <startTarvosDecode+0x22a>
	    }
	    else{
	    	float exponent= 0.0f;
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    exponent = ((float)RSSI0 - (float)vraiRSSI) / (10.0f * NVALUE);
 800198a:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <startTarvosDecode+0x2a4>)
 800198c:	f993 3000 	ldrsb.w	r3, [r3]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001998:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a64 <startTarvosDecode+0x2b0>
 800199c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a0:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80019a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		    distance_RSSI= powf(10.0f, exponent);
 80019ac:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 80019b0:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80019b4:	f013 f8c2 	bl	8014b3c <powf>
 80019b8:	eef0 7a40 	vmov.f32	s15, s0
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <startTarvosDecode+0x2a8>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
	                  if (data_index == TRAME_SIZE) {
 80019c2:	e00c      	b.n	80019de <startTarvosDecode+0x22a>
	                	  }

	                  }
	              } else {
	                  // Entête invalide : skip 1 octet
	                  read_index = (read_index + 1) % CIRC_BUF_SIZE;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <startTarvosDecode+0x290>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	425a      	negs	r2, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	bf58      	it	pl
 80019d4:	4253      	negpl	r3, r2
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <startTarvosDecode+0x290>)
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	e000      	b.n	80019e0 <startTarvosDecode+0x22c>
	                  if (data_index == TRAME_SIZE) {
 80019de:	bf00      	nop
	          while (read_index != write_index) {
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <startTarvosDecode+0x290>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <startTarvosDecode+0x298>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f47f aeef 	bne.w	80017d0 <startTarvosDecode+0x1c>
	          }




		if(flag_fin==1){
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <startTarvosDecode+0x2b4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <startTarvosDecode+0x24c>

			osThreadSuspend(NULL);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f00c f95b 	bl	800dcb6 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <startTarvosDecode+0x28c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	65bb      	str	r3, [r7, #88]	@ 0x58
		  uint32_t cycles= end1-start1;
 8001a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	657b      	str	r3, [r7, #84]	@ 0x54

		  timedecode=(float) cycles/(SystemCoreClock/1000000.0f);
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a18:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <startTarvosDecode+0x2b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a24:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8001a70 <startTarvosDecode+0x2bc>
 8001a28:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <startTarvosDecode+0x2c0>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]

vTaskDelay(pdMS_TO_TICKS(50));
 8001a36:	2032      	movs	r0, #50	@ 0x32
 8001a38:	f00d f95a 	bl	800ecf0 <vTaskDelay>
  {
 8001a3c:	e6c4      	b.n	80017c8 <startTarvosDecode+0x14>
 8001a3e:	bf00      	nop
 8001a40:	e0001000 	.word	0xe0001000
 8001a44:	2000108a 	.word	0x2000108a
 8001a48:	20000f88 	.word	0x20000f88
 8001a4c:	20001088 	.word	0x20001088
 8001a50:	200003ac 	.word	0x200003ac
 8001a54:	20000a68 	.word	0x20000a68
 8001a58:	200002e4 	.word	0x200002e4
 8001a5c:	200002e8 	.word	0x200002e8
 8001a60:	bf800000 	.word	0xbf800000
 8001a64:	c2600000 	.word	0xc2600000
 8001a68:	20000c2c 	.word	0x20000c2c
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	49742400 	.word	0x49742400
 8001a74:	200002f4 	.word	0x200002f4

08001a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a82:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9a:	4a17      	ldr	r2, [pc, #92]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	200b      	movs	r0, #11
 8001ab4:	f003 fb2e 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ab8:	200b      	movs	r0, #11
 8001aba:	f003 fb45 	bl	8005148 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	200c      	movs	r0, #12
 8001ac4:	f003 fb26 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ac8:	200c      	movs	r0, #12
 8001aca:	f003 fb3d 	bl	8005148 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	200d      	movs	r0, #13
 8001ad4:	f003 fb1e 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ad8:	200d      	movs	r0, #13
 8001ada:	f003 fb35 	bl	8005148 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	200e      	movs	r0, #14
 8001ae4:	f003 fb16 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ae8:	200e      	movs	r0, #14
 8001aea:	f003 fb2d 	bl	8005148 <HAL_NVIC_EnableIRQ>

}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b12:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4a48      	ldr	r2, [pc, #288]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a42      	ldr	r2, [pc, #264]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b40      	ldr	r3, [pc, #256]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4a3c      	ldr	r2, [pc, #240]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a36      	ldr	r2, [pc, #216]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <MX_GPIO_Init+0x13c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2110      	movs	r1, #16
 8001b76:	4831      	ldr	r0, [pc, #196]	@ (8001c3c <MX_GPIO_Init+0x140>)
 8001b78:	f003 ffb4 	bl	8005ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001b82:	482f      	ldr	r0, [pc, #188]	@ (8001c40 <MX_GPIO_Init+0x144>)
 8001b84:	f003 ffae 	bl	8005ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b88:	2310      	movs	r3, #16
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b8c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba0:	f003 fe1e 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4820      	ldr	r0, [pc, #128]	@ (8001c3c <MX_GPIO_Init+0x140>)
 8001bbc:	f003 fe10 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bc4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	481a      	ldr	r0, [pc, #104]	@ (8001c40 <MX_GPIO_Init+0x144>)
 8001bd6:	f003 fe03 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4814      	ldr	r0, [pc, #80]	@ (8001c40 <MX_GPIO_Init+0x144>)
 8001bee:	f003 fdf7 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8001bf2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <MX_GPIO_Init+0x144>)
 8001c0c:	f003 fde8 	bl	80057e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2105      	movs	r1, #5
 8001c14:	2007      	movs	r0, #7
 8001c16:	f003 fa7d 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c1a:	2007      	movs	r0, #7
 8001c1c:	f003 fa94 	bl	8005148 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2105      	movs	r1, #5
 8001c24:	200a      	movs	r0, #10
 8001c26:	f003 fa75 	bl	8005114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f003 fa8c 	bl	8005148 <HAL_NVIC_EnableIRQ>

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	@ 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	48000400 	.word	0x48000400

08001c44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <MX_I2C1_Init+0x78>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c50:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc0 <MX_I2C1_Init+0x7c>)
 8001c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7e:	480e      	ldr	r0, [pc, #56]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c80:	f003 ff6b 	bl	8005b5a <HAL_I2C_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c8a:	f000 fb31 	bl	80022f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4809      	ldr	r0, [pc, #36]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001c92:	f004 fb2f 	bl	80062f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c9c:	f000 fb28 	bl	80022f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <MX_I2C1_Init+0x74>)
 8001ca4:	f004 fb71 	bl	800638a <HAL_I2CEx_ConfigDigitalFilter>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cae:	f000 fb1f 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000358 	.word	0x20000358
 8001cbc:	40005400 	.word	0x40005400
 8001cc0:	40b285c2 	.word	0x40b285c2

08001cc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b09c      	sub	sp, #112	@ 0x70
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	2244      	movs	r2, #68	@ 0x44
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00f faf0 	bl	80112ca <memset>
  if(i2cHandle->Instance==I2C1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2e      	ldr	r2, [pc, #184]	@ (8001da8 <HAL_I2C_MspInit+0xe4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d154      	bne.n	8001d9e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cf4:	2340      	movs	r3, #64	@ 0x40
 8001cf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 f99f 	bl	8007044 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d0c:	f000 faf0 	bl	80022f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	4a25      	ldr	r2, [pc, #148]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d46:	2312      	movs	r3, #18
 8001d48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d52:	2304      	movs	r3, #4
 8001d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d60:	f003 fd3e 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6a:	2312      	movs	r3, #18
 8001d6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d76:	2304      	movs	r3, #4
 8001d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480b      	ldr	r0, [pc, #44]	@ (8001db0 <HAL_I2C_MspInit+0xec>)
 8001d82:	f003 fd2d 	bl	80057e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_I2C_MspInit+0xe8>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3770      	adds	r7, #112	@ 0x70
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40005400 	.word	0x40005400
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400

08001db4 <lcd_send_data>:

char str[40];

extern I2C_HandleTypeDef hi2c1;

void lcd_send_data( char data){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f023 030f 	bic.w	r3, r3, #15
 8001dc4:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0D;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	f043 030d 	orr.w	r3, r3, #13
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x09;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f043 0309 	orr.w	r3, r3, #9
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0D;
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	f043 030d 	orr.w	r3, r3, #13
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x09;
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	f043 0309 	orr.w	r3, r3, #9
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 8001df4:	f107 0208 	add.w	r2, r7, #8
 8001df8:	2364      	movs	r3, #100	@ 0x64
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	214e      	movs	r1, #78	@ 0x4e
 8001e00:	4803      	ldr	r0, [pc, #12]	@ (8001e10 <lcd_send_data+0x5c>)
 8001e02:	f003 ff45 	bl	8005c90 <HAL_I2C_Master_Transmit>





}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000358 	.word	0x20000358

08001e14 <lcd_send_cmd>:


void lcd_send_cmd( char data){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f023 030f 	bic.w	r3, r3, #15
 8001e24:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0C;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	f043 030c 	orr.w	r3, r3, #12
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x08;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0C;
 8001e40:	7bbb      	ldrb	r3, [r7, #14]
 8001e42:	f043 030c 	orr.w	r3, r3, #12
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x08;
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 8001e54:	f107 0208 	add.w	r2, r7, #8
 8001e58:	2364      	movs	r3, #100	@ 0x64
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	214e      	movs	r1, #78	@ 0x4e
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <lcd_send_cmd+0x5c>)
 8001e62:	f003 ff15 	bl	8005c90 <HAL_I2C_Master_Transmit>





}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000358 	.word	0x20000358

08001e74 <lcd_clear>:


void lcd_clear(void){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0

	lcd_send_cmd(0x01);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff ffcb 	bl	8001e14 <lcd_send_cmd>
	osDelay(2);
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f00b fdbf 	bl	800da02 <osDelay>

}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <lcd_send_string>:
	lcd_send_cmd(0x0C);


}

void lcd_send_string (char *str){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]


	while (*str)lcd_send_data(*str++);
 8001e90:	e006      	b.n	8001ea0 <lcd_send_string+0x18>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff8a 	bl	8001db4 <lcd_send_data>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f4      	bne.n	8001e92 <lcd_send_string+0xa>
	osDelay(2);
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	f00b fdaa 	bl	800da02 <osDelay>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <setCursor>:

void setCursor(int row, int col){
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]


	switch(row){
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <setCursor+0x18>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d005      	beq.n	8001ed8 <setCursor+0x22>
		break;
	case 1:
		col|=0xC0;
		break;
	default:
		return;
 8001ecc:	e00e      	b.n	8001eec <setCursor+0x36>
		col|=0x80;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed4:	603b      	str	r3, [r7, #0]
		break;
 8001ed6:	e004      	b.n	8001ee2 <setCursor+0x2c>
		col|=0xC0;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ede:	603b      	str	r3, [r7, #0]
		break;
 8001ee0:	bf00      	nop

	}
	lcd_send_cmd(col);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff94 	bl	8001e14 <lcd_send_cmd>

}
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8001efa:	480d      	ldr	r0, [pc, #52]	@ (8001f30 <LED_Init+0x3c>)
 8001efc:	f005 fbfe 	bl	80076fc <HAL_TIM_PWM_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001f04:	2300      	movs	r3, #0
 8001f06:	80fb      	strh	r3, [r7, #6]
 8001f08:	e006      	b.n	8001f18 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	4a09      	ldr	r2, [pc, #36]	@ (8001f34 <LED_Init+0x40>)
 8001f0e:	2100      	movs	r1, #0
 8001f10:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	3301      	adds	r3, #1
 8001f16:	80fb      	strh	r3, [r7, #6]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001f1e:	d9f4      	bls.n	8001f0a <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <LED_Init+0x44>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8001f26:	797b      	ldrb	r3, [r7, #5]




}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000dc4 	.word	0x20000dc4
 8001f34:	20000ae4 	.word	0x20000ae4
 8001f38:	20000c1d 	.word	0x20000c1d

08001f3c <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b08b      	sub	sp, #44	@ 0x2c
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4623      	mov	r3, r4
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71bb      	strb	r3, [r7, #6]
 8001f52:	460b      	mov	r3, r1
 8001f54:	717b      	strb	r3, [r7, #5]
 8001f56:	4613      	mov	r3, r2
 8001f58:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8001f66:	797b      	ldrb	r3, [r7, #5]
 8001f68:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8001f6a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001f6e:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8001f70:	793b      	ldrb	r3, [r7, #4]
 8001f72:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8001f74:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001f78:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	e007      	b.n	8001f90 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8001f80:	4a35      	ldr	r2, [pc, #212]	@ (8002058 <LED_Setcolour+0x11c>)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	4413      	add	r3, r2
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001f96:	ddf3      	ble.n	8001f80 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
 8001f9c:	e032      	b.n	8002004 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	77bb      	strb	r3, [r7, #30]
 8001fa2:	e029      	b.n	8001ff8 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e020      	b.n	8001fec <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8001faa:	7ffa      	ldrb	r2, [r7, #31]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	441a      	add	r2, r3
 8001fb2:	7fbb      	ldrb	r3, [r7, #30]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3328      	adds	r3, #40	@ 0x28
 8001fb8:	443b      	add	r3, r7
 8001fba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa42 f303 	asr.w	r3, r2, r3
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8001fce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fd0:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <LED_Setcolour+0x11c>)
 8001fd2:	2199      	movs	r1, #153	@ 0x99
 8001fd4:	54d1      	strb	r1, [r2, r3]
 8001fd6:	e003      	b.n	8001fe0 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8001fd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fda:	4a1f      	ldr	r2, [pc, #124]	@ (8002058 <LED_Setcolour+0x11c>)
 8001fdc:	2133      	movs	r1, #51	@ 0x33
 8001fde:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8001fe0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	dddb      	ble.n	8001faa <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8001ff2:	7fbb      	ldrb	r3, [r7, #30]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	77bb      	strb	r3, [r7, #30]
 8001ff8:	7fbb      	ldrb	r3, [r7, #30]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d9d2      	bls.n	8001fa4 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	3301      	adds	r3, #1
 8002002:	77fb      	strb	r3, [r7, #31]
 8002004:	7ffb      	ldrb	r3, [r7, #31]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d9c9      	bls.n	8001f9e <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e009      	b.n	8002024 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8002010:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <LED_Setcolour+0x11c>)
 8002014:	2100      	movs	r1, #0
 8002016:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002018:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800201a:	3301      	adds	r3, #1
 800201c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800202a:	dbf1      	blt.n	8002010 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	e009      	b.n	8002046 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8002032:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002034:	4a08      	ldr	r2, [pc, #32]	@ (8002058 <LED_Setcolour+0x11c>)
 8002036:	2100      	movs	r1, #0
 8002038:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 800203a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800203c:	3301      	adds	r3, #1
 800203e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	3301      	adds	r3, #1
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b04      	cmp	r3, #4
 800204a:	ddf2      	ble.n	8002032 <LED_Setcolour+0xf6>
		}

	LED_Update();
 800204c:	f000 f806 	bl	800205c <LED_Update>

}
 8002050:	bf00      	nop
 8002052:	372c      	adds	r7, #44	@ 0x2c
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	20000ae4 	.word	0x20000ae4

0800205c <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002062:	f240 1339 	movw	r3, #313	@ 0x139
 8002066:	4a09      	ldr	r2, [pc, #36]	@ (800208c <LED_Update+0x30>)
 8002068:	2104      	movs	r1, #4
 800206a:	4809      	ldr	r0, [pc, #36]	@ (8002090 <LED_Update+0x34>)
 800206c:	f005 fba8 	bl	80077c0 <HAL_TIM_PWM_Start_DMA>
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]

	if(halStatus==HAL_OK){
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <LED_Update+0x24>
		DMA_COMPLETE_FLAG=0;
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <LED_Update+0x38>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
	}


	return halStatus;
 8002080:	79fb      	ldrb	r3, [r7, #7]

}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000ae4 	.word	0x20000ae4
 8002090:	20000dc4 	.word	0x20000dc4
 8002094:	20000c1d 	.word	0x20000c1d

08002098 <LED_Callback>:



void LED_Callback(){
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 800209c:	2104      	movs	r1, #4
 800209e:	4804      	ldr	r0, [pc, #16]	@ (80020b0 <LED_Callback+0x18>)
 80020a0:	f005 fda6 	bl	8007bf0 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <LED_Callback+0x1c>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]


}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000dc4 	.word	0x20000dc4
 80020b4:	20000c1d 	.word	0x20000c1d

080020b8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

	LED_Callback();
 80020c0:	f7ff ffea 	bl	8002098 <LED_Callback>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d2:	f001 fa58 	bl	8003586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d6:	f000 f8af 	bl	8002238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020da:	f7ff fd0f 	bl	8001afc <MX_GPIO_Init>
  MX_DMA_Init();
 80020de:	f7ff fccb 	bl	8001a78 <MX_DMA_Init>
  MX_ADC1_Init();
 80020e2:	f7fe ffc5 	bl	8001070 <MX_ADC1_Init>
  MX_I2C1_Init();
 80020e6:	f7ff fdad 	bl	8001c44 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80020ea:	f001 f87d 	bl	80031e8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80020ee:	f000 fed7 	bl	8002ea0 <MX_TIM3_Init>
  MX_TIM2_Init();
 80020f2:	f000 fe5f 	bl	8002db4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80020f6:	f000 f97d 	bl	80023f4 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80020fa:	f008 fda5 	bl	800ac48 <MX_FATFS_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <main+0x3c>
    Error_Handler();
 8002104:	f000 f8f4 	bl	80022f0 <Error_Handler>
  }
  MX_TIM4_Init();
 8002108:	f000 ff42 	bl	8002f90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002112:	483b      	ldr	r0, [pc, #236]	@ (8002200 <main+0x134>)
 8002114:	f003 fce6 	bl	8005ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800211e:	4838      	ldr	r0, [pc, #224]	@ (8002200 <main+0x134>)
 8002120:	f003 fce0 	bl	8005ae4 <HAL_GPIO_WritePin>




  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002124:	2203      	movs	r2, #3
 8002126:	4937      	ldr	r1, [pc, #220]	@ (8002204 <main+0x138>)
 8002128:	4837      	ldr	r0, [pc, #220]	@ (8002208 <main+0x13c>)
 800212a:	f001 fe49 	bl	8003dc0 <HAL_ADC_Start_DMA>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <main+0x6e>
 	 pbmseeker=1;
 8002134:	4b35      	ldr	r3, [pc, #212]	@ (800220c <main+0x140>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
   }



  if(  LED_Init()!=HAL_OK){
 800213a:	f7ff fedb 	bl	8001ef4 <LED_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <main+0x7e>
 	 pbmseeker=1;
 8002144:	4b31      	ldr	r3, [pc, #196]	@ (800220c <main+0x140>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]


   }

  if( INIT_PERM_TARVOS(SAT_ADDR, GROUND_ADDR)!=HAL_OK){
 800214a:	2101      	movs	r1, #1
 800214c:	2010      	movs	r0, #16
 800214e:	f000 fc07 	bl	8002960 <INIT_PERM_TARVOS>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <main+0x92>
 	 pbmseeker=1;
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <main+0x140>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]


   }


  HAL_Delay(100);
 800215e:	2064      	movs	r0, #100	@ 0x64
 8002160:	f001 fa48 	bl	80035f4 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8002164:	482a      	ldr	r0, [pc, #168]	@ (8002210 <main+0x144>)
 8002166:	f007 f8e3 	bl	8009330 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, dma_rx_buffer, DMA_CHUNK_SIZE)!=HAL_OK){
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	4929      	ldr	r1, [pc, #164]	@ (8002214 <main+0x148>)
 800216e:	4828      	ldr	r0, [pc, #160]	@ (8002210 <main+0x144>)
 8002170:	f007 f892 	bl	8009298 <HAL_UART_Receive_DMA>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <main+0xb4>
 	pbmseeker=1;
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <main+0x140>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 8002180:	4825      	ldr	r0, [pc, #148]	@ (8002218 <main+0x14c>)
 8002182:	f005 fa51 	bl	8007628 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8002186:	200a      	movs	r0, #10
 8002188:	f001 fa34 	bl	80035f4 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 800218c:	2201      	movs	r2, #1
 800218e:	4923      	ldr	r1, [pc, #140]	@ (800221c <main+0x150>)
 8002190:	4823      	ldr	r0, [pc, #140]	@ (8002220 <main+0x154>)
 8002192:	f00a fb57 	bl	800c844 <f_mount>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <main+0x158>)
 800219c:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <main+0x158>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d125      	bne.n	80021f2 <main+0x126>
  			  fres = f_mkdir("DEMO");
 80021a6:	4820      	ldr	r0, [pc, #128]	@ (8002228 <main+0x15c>)
 80021a8:	f00b fa20 	bl	800d5ec <f_mkdir>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <main+0x158>)
 80021b2:	701a      	strb	r2, [r3, #0]
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 80021b4:	2212      	movs	r2, #18
 80021b6:	491d      	ldr	r1, [pc, #116]	@ (800222c <main+0x160>)
 80021b8:	481d      	ldr	r0, [pc, #116]	@ (8002230 <main+0x164>)
 80021ba:	f00a fba7 	bl	800c90c <f_open>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <main+0x158>)
 80021c4:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <main+0x158>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <main+0x11c>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	220b      	movs	r2, #11
 80021d2:	4918      	ldr	r1, [pc, #96]	@ (8002234 <main+0x168>)
 80021d4:	4816      	ldr	r0, [pc, #88]	@ (8002230 <main+0x164>)
 80021d6:	f00a fd5a 	bl	800cc8e <f_write>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <main+0x158>)
 80021e0:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 80021e2:	4813      	ldr	r0, [pc, #76]	@ (8002230 <main+0x164>)
 80021e4:	f00a ff80 	bl	800d0e8 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	490c      	ldr	r1, [pc, #48]	@ (800221c <main+0x150>)
 80021ec:	2000      	movs	r0, #0
 80021ee:	f00a fb29 	bl	800c844 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80021f2:	f7ff f923 	bl	800143c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021f6:	f00b fbd6 	bl	800d9a6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021fa:	bf00      	nop
 80021fc:	e7fd      	b.n	80021fa <main+0x12e>
 80021fe:	bf00      	nop
 8002200:	48000400 	.word	0x48000400
 8002204:	20000a54 	.word	0x20000a54
 8002208:	20000214 	.word	0x20000214
 800220c:	20000c30 	.word	0x20000c30
 8002210:	2000108c 	.word	0x2000108c
 8002214:	20000f08 	.word	0x20000f08
 8002218:	20000e5c 	.word	0x20000e5c
 800221c:	08015374 	.word	0x08015374
 8002220:	200005ec 	.word	0x200005ec
 8002224:	20000820 	.word	0x20000820
 8002228:	08015378 	.word	0x08015378
 800222c:	08015380 	.word	0x08015380
 8002230:	20000824 	.word	0x20000824
 8002234:	08015390 	.word	0x08015390

08002238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b094      	sub	sp, #80	@ 0x50
 800223c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223e:	f107 0318 	add.w	r3, r7, #24
 8002242:	2238      	movs	r2, #56	@ 0x38
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f00f f83f 	bl	80112ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800225a:	2000      	movs	r0, #0
 800225c:	f004 f8e2 	bl	8006424 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002260:	2301      	movs	r3, #1
 8002262:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002264:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002268:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226a:	2302      	movs	r3, #2
 800226c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226e:	2303      	movs	r3, #3
 8002270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002272:	2304      	movs	r3, #4
 8002274:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002276:	2355      	movs	r3, #85	@ 0x55
 8002278:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800227a:	2302      	movs	r3, #2
 800227c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800227e:	2302      	movs	r3, #2
 8002280:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002282:	2302      	movs	r3, #2
 8002284:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	4618      	mov	r0, r3
 800228c:	f004 f97e 	bl	800658c <HAL_RCC_OscConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002296:	f000 f82b 	bl	80022f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229a:	230f      	movs	r3, #15
 800229c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229e:	2303      	movs	r3, #3
 80022a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fc7c 	bl	8006bb0 <HAL_RCC_ClockConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80022be:	f000 f817 	bl	80022f0 <Error_Handler>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3750      	adds	r7, #80	@ 0x50
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80022de:	f001 f96b 	bl	80035b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40012c00 	.word	0x40012c00

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
}
 80022f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <Error_Handler+0x8>

080022fc <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(FRESULT fres){
 80022fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002300:	b08f      	sub	sp, #60	@ 0x3c
 8002302:	af0a      	add	r7, sp, #40	@ 0x28
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]

	uint16_t sizeligne=0;
 8002308:	2300      	movs	r3, #0
 800230a:	81fb      	strh	r3, [r7, #14]

	sizeligne=snprintf((char *)sdcardbuffer,256,"%0.1f,%0.1f,%d,%0.2f,%lu\n\r",temp,vbat,vraiRSSI,distance_RSSI,timeindex);
 800230c:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <store_in_sd+0xcc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f941 	bl	8000598 <__aeabi_f2d>
 8002316:	4604      	mov	r4, r0
 8002318:	460d      	mov	r5, r1
 800231a:	4b2c      	ldr	r3, [pc, #176]	@ (80023cc <store_in_sd+0xd0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f93a 	bl	8000598 <__aeabi_f2d>
 8002324:	4680      	mov	r8, r0
 8002326:	4689      	mov	r9, r1
 8002328:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <store_in_sd+0xd4>)
 800232a:	f993 3000 	ldrsb.w	r3, [r3]
 800232e:	461e      	mov	r6, r3
 8002330:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <store_in_sd+0xd8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f92f 	bl	8000598 <__aeabi_f2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4926      	ldr	r1, [pc, #152]	@ (80023d8 <store_in_sd+0xdc>)
 8002340:	6809      	ldr	r1, [r1, #0]
 8002342:	9108      	str	r1, [sp, #32]
 8002344:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002348:	9604      	str	r6, [sp, #16]
 800234a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800234e:	e9cd 4500 	strd	r4, r5, [sp]
 8002352:	4a22      	ldr	r2, [pc, #136]	@ (80023dc <store_in_sd+0xe0>)
 8002354:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002358:	4821      	ldr	r0, [pc, #132]	@ (80023e0 <store_in_sd+0xe4>)
 800235a:	f00e ff1b 	bl	8011194 <sniprintf>
 800235e:	4603      	mov	r3, r0
 8002360:	81fb      	strh	r3, [r7, #14]




			  if (fres == FR_OK) {
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d129      	bne.n	80023bc <store_in_sd+0xc0>
				  if(flag_drop==0){
 8002368:	4b1e      	ldr	r3, [pc, #120]	@ (80023e4 <store_in_sd+0xe8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <store_in_sd+0x84>
			  fres = f_open(&fil, (uint8_t *) "SAT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002370:	2212      	movs	r2, #18
 8002372:	491d      	ldr	r1, [pc, #116]	@ (80023e8 <store_in_sd+0xec>)
 8002374:	481d      	ldr	r0, [pc, #116]	@ (80023ec <store_in_sd+0xf0>)
 8002376:	f00a fac9 	bl	800c90c <f_open>
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
 800237e:	e006      	b.n	800238e <store_in_sd+0x92>

				  }
				  else{
					  fres = f_open(&fil, (uint8_t *) "SAT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002380:	2212      	movs	r2, #18
 8002382:	491b      	ldr	r1, [pc, #108]	@ (80023f0 <store_in_sd+0xf4>)
 8002384:	4819      	ldr	r0, [pc, #100]	@ (80023ec <store_in_sd+0xf0>)
 8002386:	f00a fac1 	bl	800c90c <f_open>
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]

				  }
				  if (fres == FR_OK) {
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <store_in_sd+0xc0>
					  fres=f_lseek(&fil, f_size(&fil));
 8002394:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <store_in_sd+0xf0>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4619      	mov	r1, r3
 800239a:	4814      	ldr	r0, [pc, #80]	@ (80023ec <store_in_sd+0xf0>)
 800239c:	f00a fed3 	bl	800d146 <f_lseek>
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 80023a4:	89fa      	ldrh	r2, [r7, #14]
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	490d      	ldr	r1, [pc, #52]	@ (80023e0 <store_in_sd+0xe4>)
 80023ac:	480f      	ldr	r0, [pc, #60]	@ (80023ec <store_in_sd+0xf0>)
 80023ae:	f00a fc6e 	bl	800cc8e <f_write>
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
					  f_close(&fil);
 80023b6:	480d      	ldr	r0, [pc, #52]	@ (80023ec <store_in_sd+0xf0>)
 80023b8:	f00a fe96 	bl	800d0e8 <f_close>
				  }

			  }


	return fres;
 80023bc:	79fb      	ldrb	r3, [r7, #7]

}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023c8:	20000a5c 	.word	0x20000a5c
 80023cc:	20000a64 	.word	0x20000a64
 80023d0:	200002e4 	.word	0x200002e4
 80023d4:	200002e8 	.word	0x200002e8
 80023d8:	20000c34 	.word	0x20000c34
 80023dc:	0801539c 	.word	0x0801539c
 80023e0:	200003ec 	.word	0x200003ec
 80023e4:	20000c20 	.word	0x20000c20
 80023e8:	080153b8 	.word	0x080153b8
 80023ec:	20000824 	.word	0x20000824
 80023f0:	080153c4 	.word	0x080153c4

080023f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <MX_SPI1_Init+0x74>)
 80023fa:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <MX_SPI1_Init+0x78>)
 80023fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002400:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002406:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <MX_SPI1_Init+0x74>)
 800240e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002412:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <MX_SPI1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002426:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <MX_SPI1_Init+0x74>)
 800242a:	2220      	movs	r2, #32
 800242c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <MX_SPI1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002442:	2207      	movs	r2, #7
 8002444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <MX_SPI1_Init+0x74>)
 800244e:	2208      	movs	r2, #8
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	@ (8002468 <MX_SPI1_Init+0x74>)
 8002454:	f004 ffe6 	bl	8007424 <HAL_SPI_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800245e:	f7ff ff47 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000c38 	.word	0x20000c38
 800246c:	40013000 	.word	0x40013000

08002470 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a17      	ldr	r2, [pc, #92]	@ (80024ec <HAL_SPI_MspInit+0x7c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d128      	bne.n	80024e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_SPI_MspInit+0x80>)
 8002494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002496:	4a16      	ldr	r2, [pc, #88]	@ (80024f0 <HAL_SPI_MspInit+0x80>)
 8002498:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800249c:	6613      	str	r3, [r2, #96]	@ 0x60
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <HAL_SPI_MspInit+0x80>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_SPI_MspInit+0x80>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <HAL_SPI_MspInit+0x80>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b6:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <HAL_SPI_MspInit+0x80>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024c2:	23e0      	movs	r3, #224	@ 0xe0
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d2:	2305      	movs	r3, #5
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e0:	f003 f97e 	bl	80057e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	@ 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40013000 	.word	0x40013000
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_MspInit+0x50>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <HAL_MspInit+0x50>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6613      	str	r3, [r2, #96]	@ 0x60
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <HAL_MspInit+0x50>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_MspInit+0x50>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a0b      	ldr	r2, [pc, #44]	@ (8002544 <HAL_MspInit+0x50>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	@ 0x58
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_MspInit+0x50>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	210f      	movs	r1, #15
 800252e:	f06f 0001 	mvn.w	r0, #1
 8002532:	f002 fdef 	bl	8005114 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002536:	f004 f819 	bl	800656c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000

08002548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	@ 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002558:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <HAL_InitTick+0xc4>)
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	4a2b      	ldr	r2, [pc, #172]	@ (800260c <HAL_InitTick+0xc4>)
 800255e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002562:	6613      	str	r3, [r2, #96]	@ 0x60
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <HAL_InitTick+0xc4>)
 8002566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f004 fcec 	bl	8006f58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002580:	f004 fcd4 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 8002584:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002588:	4a21      	ldr	r2, [pc, #132]	@ (8002610 <HAL_InitTick+0xc8>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0c9b      	lsrs	r3, r3, #18
 8002590:	3b01      	subs	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002594:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <HAL_InitTick+0xcc>)
 8002596:	4a20      	ldr	r2, [pc, #128]	@ (8002618 <HAL_InitTick+0xd0>)
 8002598:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800259a:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <HAL_InitTick+0xcc>)
 800259c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <HAL_InitTick+0xcc>)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <HAL_InitTick+0xcc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_InitTick+0xcc>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80025b4:	4817      	ldr	r0, [pc, #92]	@ (8002614 <HAL_InitTick+0xcc>)
 80025b6:	f004 ffe0 	bl	800757a <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80025c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11b      	bne.n	8002600 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025c8:	4812      	ldr	r0, [pc, #72]	@ (8002614 <HAL_InitTick+0xcc>)
 80025ca:	f005 f82d 	bl	8007628 <HAL_TIM_Base_Start_IT>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80025d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025dc:	2019      	movs	r0, #25
 80025de:	f002 fdb3 	bl	8005148 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d808      	bhi.n	80025fa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	2019      	movs	r0, #25
 80025ee:	f002 fd91 	bl	8005114 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f2:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <HAL_InitTick+0xd4>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e002      	b.n	8002600 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002600:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002604:	4618      	mov	r0, r3
 8002606:	3730      	adds	r7, #48	@ 0x30
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	431bde83 	.word	0x431bde83
 8002614:	20000c9c 	.word	0x20000c9c
 8002618:	40012c00 	.word	0x40012c00
 800261c:	2000000c 	.word	0x2000000c

08002620 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b092      	sub	sp, #72	@ 0x48
 8002624:	af08      	add	r7, sp, #32
 8002626:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	9306      	str	r3, [sp, #24]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	9305      	str	r3, [sp, #20]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	9304      	str	r3, [sp, #16]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9303      	str	r3, [sp, #12]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	4a03      	ldr	r2, [pc, #12]	@ (8002684 <hard_fault_handler_c+0x64>)
 8002678:	21c8      	movs	r1, #200	@ 0xc8
 800267a:	4803      	ldr	r0, [pc, #12]	@ (8002688 <hard_fault_handler_c+0x68>)
 800267c:	f00e fd8a 	bl	8011194 <sniprintf>
    // Pause ici pour analyse
    while(1);
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <hard_fault_handler_c+0x60>
 8002684:	080153d0 	.word	0x080153d0
 8002688:	20000ce8 	.word	0x20000ce8

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <NMI_Handler+0x4>

08002694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 8002698:	f01e 0f04 	tst.w	lr, #4
 800269c:	bf0c      	ite	eq
 800269e:	f3ef 8008 	mrseq	r0, MSP
 80026a2:	f3ef 8009 	mrsne	r0, PSP
 80026a6:	f7ff bfbb 	b.w	8002620 <hard_fault_handler_c>
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026aa:	bf00      	nop
 80026ac:	e7fd      	b.n	80026aa <HardFault_Handler+0x16>

080026ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b2:	bf00      	nop
 80026b4:	e7fd      	b.n	80026b2 <MemManage_Handler+0x4>

080026b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <BusFault_Handler+0x4>

080026be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c2:	bf00      	nop
 80026c4:	e7fd      	b.n	80026c2 <UsageFault_Handler+0x4>

080026c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80026d8:	2002      	movs	r0, #2
 80026da:	f003 fa1b 	bl	8005b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80026e6:	2010      	movs	r0, #16
 80026e8:	f003 fa14 	bl	8005b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80026f4:	4802      	ldr	r0, [pc, #8]	@ (8002700 <DMA1_Channel1_IRQHandler+0x10>)
 80026f6:	f002 ff18 	bl	800552a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000ea8 	.word	0x20000ea8

08002704 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <DMA1_Channel2_IRQHandler+0x10>)
 800270a:	f002 ff0e 	bl	800552a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000280 	.word	0x20000280

08002718 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <DMA1_Channel3_IRQHandler+0x10>)
 800271e:	f002 ff04 	bl	800552a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20001120 	.word	0x20001120

0800272c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <DMA1_Channel4_IRQHandler+0x10>)
 8002732:	f002 fefa 	bl	800552a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20001180 	.word	0x20001180

08002740 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <ADC1_2_IRQHandler+0x10>)
 8002746:	f001 fbef 	bl	8003f28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000214 	.word	0x20000214

08002754 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800275a:	f005 fb41 	bl	8007de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000c9c 	.word	0x20000c9c

08002768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <TIM2_IRQHandler+0x10>)
 800276e:	f005 fb37 	bl	8007de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000dc4 	.word	0x20000dc4

0800277c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <TIM4_IRQHandler+0x18>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	4a03      	ldr	r2, [pc, #12]	@ (8002794 <TIM4_IRQHandler+0x18>)
 8002788:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800278a:	4803      	ldr	r0, [pc, #12]	@ (8002798 <TIM4_IRQHandler+0x1c>)
 800278c:	f005 fb28 	bl	8007de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000c34 	.word	0x20000c34
 8002798:	20000e5c 	.word	0x20000e5c

0800279c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <LPUART1_IRQHandler+0x10>)
 80027a2:	f006 fed3 	bl	800954c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000108c 	.word	0x2000108c

080027b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return 1;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <_kill>:

int _kill(int pid, int sig)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ca:	f00e fe2f 	bl	801142c <__errno>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2216      	movs	r2, #22
 80027d2:	601a      	str	r2, [r3, #0]
  return -1;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_exit>:

void _exit (int status)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ffe7 	bl	80027c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027f2:	bf00      	nop
 80027f4:	e7fd      	b.n	80027f2 <_exit+0x12>

080027f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e00a      	b.n	800281e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002808:	f3af 8000 	nop.w
 800280c:	4601      	mov	r1, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	60ba      	str	r2, [r7, #8]
 8002814:	b2ca      	uxtb	r2, r1
 8002816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	dbf0      	blt.n	8002808 <_read+0x12>
  }

  return len;
 8002826:	687b      	ldr	r3, [r7, #4]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e009      	b.n	8002856 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	dbf1      	blt.n	8002842 <_write+0x12>
  }
  return len;
 800285e:	687b      	ldr	r3, [r7, #4]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_close>:

int _close(int file)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002890:	605a      	str	r2, [r3, #4]
  return 0;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_isatty>:

int _isatty(int file)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d8:	4a14      	ldr	r2, [pc, #80]	@ (800292c <_sbrk+0x5c>)
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <_sbrk+0x60>)
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e4:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <_sbrk+0x64>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <_sbrk+0x68>)
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f2:	4b10      	ldr	r3, [pc, #64]	@ (8002934 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d207      	bcs.n	8002910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002900:	f00e fd94 	bl	801142c <__errno>
 8002904:	4603      	mov	r3, r0
 8002906:	220c      	movs	r2, #12
 8002908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e009      	b.n	8002924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <_sbrk+0x64>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002916:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	4a05      	ldr	r2, [pc, #20]	@ (8002934 <_sbrk+0x64>)
 8002920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20008000 	.word	0x20008000
 8002930:	00000400 	.word	0x00000400
 8002934:	20000db0 	.word	0x20000db0
 8002938:	200043e0 	.word	0x200043e0

0800293c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <SystemInit+0x20>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <SystemInit+0x20>)
 8002948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	@ 0x38
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	460a      	mov	r2, r1
 800296a:	71fb      	strb	r3, [r7, #7]
 800296c:	4613      	mov	r3, r2
 800296e:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8002970:	2306      	movs	r3, #6
 8002972:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 8002976:	2304      	movs	r3, #4
 8002978:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 8002982:	4a6f      	ldr	r2, [pc, #444]	@ (8002b40 <INIT_PERM_TARVOS+0x1e0>)
 8002984:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800298c:	6018      	str	r0, [r3, #0]
 800298e:	3304      	adds	r3, #4
 8002990:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 8002992:	4a6c      	ldr	r2, [pc, #432]	@ (8002b44 <INIT_PERM_TARVOS+0x1e4>)
 8002994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800299c:	6018      	str	r0, [r3, #0]
 800299e:	3304      	adds	r3, #4
 80029a0:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 80029a2:	4a69      	ldr	r2, [pc, #420]	@ (8002b48 <INIT_PERM_TARVOS+0x1e8>)
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029ac:	6018      	str	r0, [r3, #0]
 80029ae:	3304      	adds	r3, #4
 80029b0:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 80029b2:	2302      	movs	r3, #2
 80029b4:	753b      	strb	r3, [r7, #20]
 80029b6:	2309      	movs	r3, #9
 80029b8:	757b      	strb	r3, [r7, #21]
 80029ba:	2302      	movs	r3, #2
 80029bc:	75bb      	strb	r3, [r7, #22]
 80029be:	230b      	movs	r3, #11
 80029c0:	75fb      	strb	r3, [r7, #23]
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	763b      	strb	r3, [r7, #24]
 80029c6:	2300      	movs	r3, #0
 80029c8:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 80029ca:	2302      	movs	r3, #2
 80029cc:	733b      	strb	r3, [r7, #12]
 80029ce:	2309      	movs	r3, #9
 80029d0:	737b      	strb	r3, [r7, #13]
 80029d2:	2302      	movs	r3, #2
 80029d4:	73bb      	strb	r3, [r7, #14]
 80029d6:	2308      	movs	r3, #8
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	743b      	strb	r3, [r7, #16]
 80029de:	2300      	movs	r3, #0
 80029e0:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 80029e2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b4c <INIT_PERM_TARVOS+0x1ec>)
 80029e4:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 80029e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f8ac 	bl	8002b54 <Get_CRC8>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8002a02:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002a0c:	2364      	movs	r3, #100	@ 0x64
 8002a0e:	4850      	ldr	r0, [pc, #320]	@ (8002b50 <INIT_PERM_TARVOS+0x1f0>)
 8002a10:	f006 fbb4 	bl	800917c <HAL_UART_Transmit>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8002a20:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f88f 	bl	8002b54 <Get_CRC8>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8002a3c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002a46:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a4a:	4841      	ldr	r0, [pc, #260]	@ (8002b50 <INIT_PERM_TARVOS+0x1f0>)
 8002a4c:	f006 fb96 	bl	800917c <HAL_UART_Transmit>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8002a5c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f871 	bl	8002b54 <Get_CRC8>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8002a78:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	f107 011c 	add.w	r1, r7, #28
 8002a82:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a86:	4832      	ldr	r0, [pc, #200]	@ (8002b50 <INIT_PERM_TARVOS+0x1f0>)
 8002a88:	f006 fb78 	bl	800917c <HAL_UART_Transmit>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8002a98:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f853 	bl	8002b54 <Get_CRC8>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 8002ab2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	f107 0114 	add.w	r1, r7, #20
 8002abc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ac0:	4823      	ldr	r0, [pc, #140]	@ (8002b50 <INIT_PERM_TARVOS+0x1f0>)
 8002ac2:	f006 fb5b 	bl	800917c <HAL_UART_Transmit>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 8002ad2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f836 	bl	8002b54 <Get_CRC8>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8002aec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f107 010c 	add.w	r1, r7, #12
 8002af6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002afa:	4815      	ldr	r0, [pc, #84]	@ (8002b50 <INIT_PERM_TARVOS+0x1f0>)
 8002afc:	f006 fb3e 	bl	800917c <HAL_UART_Transmit>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8002b0c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	f107 0108 	add.w	r1, r7, #8
 8002b16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b1a:	480d      	ldr	r0, [pc, #52]	@ (8002b50 <INIT_PERM_TARVOS+0x1f0>)
 8002b1c:	f006 fb2e 	bl	800917c <HAL_UART_Transmit>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8002b2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b30:	f000 fd60 	bl	80035f4 <HAL_Delay>
    return status;
 8002b34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3738      	adds	r7, #56	@ 0x38
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	0801545c 	.word	0x0801545c
 8002b44:	08015464 	.word	0x08015464
 8002b48:	0801546c 	.word	0x0801546c
 8002b4c:	07000502 	.word	0x07000502
 8002b50:	2000108c 	.word	0x2000108c

08002b54 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002b64:	2300      	movs	r3, #0
 8002b66:	81bb      	strh	r3, [r7, #12]
 8002b68:	e009      	b.n	8002b7e <Get_CRC8+0x2a>
		crc ^= bufP[i];
 8002b6a:	89bb      	ldrh	r3, [r7, #12]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	4053      	eors	r3, r2
 8002b76:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002b78:	89bb      	ldrh	r3, [r7, #12]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	81bb      	strh	r3, [r7, #12]
 8002b7e:	89ba      	ldrh	r2, [r7, #12]
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d3f1      	bcc.n	8002b6a <Get_CRC8+0x16>
	}
	return crc;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <decode_payload>:

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);

}

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	f040 80cb 	bne.w	8002d3e <decode_payload+0x1aa>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b81      	cmp	r3, #129	@ 0x81
 8002bb0:	f040 80c5 	bne.w	8002d3e <decode_payload+0x1aa>
		return;
	}
	if(receivingbuffer[2]!=56){
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b38      	cmp	r3, #56	@ 0x38
 8002bbc:	f040 80c1 	bne.w	8002d42 <decode_payload+0x1ae>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	78da      	ldrb	r2, [r3, #3]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	b21a      	sxth	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	3305      	adds	r3, #5
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b21b      	sxth	r3, r3
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	799a      	ldrb	r2, [r3, #6]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	79da      	ldrb	r2, [r3, #7]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7a1a      	ldrb	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	7a5a      	ldrb	r2, [r3, #9]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45



    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3348      	adds	r3, #72	@ 0x48
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	320a      	adds	r2, #10
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	334c      	adds	r3, #76	@ 0x4c
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	320e      	adds	r2, #14
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3350      	adds	r3, #80	@ 0x50
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	3212      	adds	r2, #18
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3354      	adds	r3, #84	@ 0x54
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	3216      	adds	r2, #22
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3358      	adds	r3, #88	@ 0x58
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	321a      	adds	r2, #26
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	335c      	adds	r3, #92	@ 0x5c
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	321e      	adds	r2, #30
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3360      	adds	r3, #96	@ 0x60
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	3222      	adds	r2, #34	@ 0x22
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3370      	adds	r3, #112	@ 0x70
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	3226      	adds	r2, #38	@ 0x26
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3364      	adds	r3, #100	@ 0x64
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	322a      	adds	r2, #42	@ 0x2a
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3368      	adds	r3, #104	@ 0x68
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	322e      	adds	r2, #46	@ 0x2e
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	336c      	adds	r3, #108	@ 0x6c
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	3232      	adds	r2, #50	@ 0x32
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3374      	adds	r3, #116	@ 0x74
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	3236      	adds	r2, #54	@ 0x36
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3378      	adds	r3, #120	@ 0x78
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	323a      	adds	r2, #58	@ 0x3a
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	701a      	strb	r2, [r3, #0]


    vraiRSSI=(int8_t)out->RSSI;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002cb4:	b25a      	sxtb	r2, r3
 8002cb6:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <decode_payload+0x1b8>)
 8002cb8:	701a      	strb	r2, [r3, #0]

    if(noreturn_flag3==0){
 8002cba:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <decode_payload+0x1bc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <decode_payload+0x144>
    if(receivingbuffer[6]==1){
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	3306      	adds	r3, #6
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <decode_payload+0x144>
    	flag_calib=1;
 8002ccc:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <decode_payload+0x1c0>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
    	noreturn_flag3=1;
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <decode_payload+0x1bc>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
    }
    }

    if(noreturn_flag1==0){
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <decode_payload+0x1c4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <decode_payload+0x162>
    if(receivingbuffer[7]==1){
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3307      	adds	r3, #7
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <decode_payload+0x162>
    	flag_drop=1;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <decode_payload+0x1c8>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
    	noreturn_flag1=1;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <decode_payload+0x1c4>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    }

    }
    if(noreturn_flag2==0){
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <decode_payload+0x1cc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <decode_payload+0x180>
    if(receivingbuffer[8]==1){
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	3308      	adds	r3, #8
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <decode_payload+0x180>
    	flag_separation=1;
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <decode_payload+0x1d0>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    	noreturn_flag2=1;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <decode_payload+0x1cc>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    }

    }

    if(noreturn_flag4==0){
 8002d14:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <decode_payload+0x1d4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <decode_payload+0x19e>
    if(receivingbuffer[9]==1){
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	3309      	adds	r3, #9
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <decode_payload+0x19e>
    	flag_fin=1;
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <decode_payload+0x1d8>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    	noreturn_flag4=1;
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <decode_payload+0x1d4>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    }




    memset((uint8_t *)receivingbuffer,0,64);
 8002d32:	2240      	movs	r2, #64	@ 0x40
 8002d34:	2100      	movs	r1, #0
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	f00e fac7 	bl	80112ca <memset>
 8002d3c:	e002      	b.n	8002d44 <decode_payload+0x1b0>
		return;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <decode_payload+0x1b0>
		return;
 8002d42:	bf00      	nop
}
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200002e4 	.word	0x200002e4
 8002d50:	20000dbc 	.word	0x20000dbc
 8002d54:	20000c28 	.word	0x20000c28
 8002d58:	20000db4 	.word	0x20000db4
 8002d5c:	20000c20 	.word	0x20000c20
 8002d60:	20000db8 	.word	0x20000db8
 8002d64:	20000c24 	.word	0x20000c24
 8002d68:	20000dc0 	.word	0x20000dc0
 8002d6c:	20000c2c 	.word	0x20000c2c

08002d70 <tarvos_checksum>:

uint8_t tarvos_checksum(uint8_t *data, uint16_t len)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
    uint8_t checksum = 0x00;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8002d80:	2300      	movs	r3, #0
 8002d82:	81bb      	strh	r3, [r7, #12]
 8002d84:	e009      	b.n	8002d9a <tarvos_checksum+0x2a>
        checksum ^= data[i];
 8002d86:	89bb      	ldrh	r3, [r7, #12]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	4053      	eors	r3, r2
 8002d92:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8002d94:	89bb      	ldrh	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	81bb      	strh	r3, [r7, #12]
 8002d9a:	89ba      	ldrh	r2, [r7, #12]
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf0      	blt.n	8002d86 <tarvos_checksum+0x16>
    }
    return checksum;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	@ 0x38
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	611a      	str	r2, [r3, #16]
 8002de2:	615a      	str	r2, [r3, #20]
 8002de4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002de8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002dec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dee:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df4:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 203;
 8002dfa:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002dfc:	22cb      	movs	r2, #203	@ 0xcb
 8002dfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e00:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e06:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e0c:	4823      	ldr	r0, [pc, #140]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e0e:	f004 fbb4 	bl	800757a <HAL_TIM_Base_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002e18:	f7ff fa6a 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e26:	4619      	mov	r1, r3
 8002e28:	481c      	ldr	r0, [pc, #112]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e2a:	f005 fa3d 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e34:	f7ff fa5c 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e38:	4818      	ldr	r0, [pc, #96]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e3a:	f004 fc5f 	bl	80076fc <HAL_TIM_PWM_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e44:	f7ff fa54 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	4619      	mov	r1, r3
 8002e56:	4811      	ldr	r0, [pc, #68]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e58:	f006 f878 	bl	8008f4c <HAL_TIMEx_MasterConfigSynchronization>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e62:	f7ff fa45 	bl	80022f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e66:	2360      	movs	r3, #96	@ 0x60
 8002e68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e72:	2304      	movs	r3, #4
 8002e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e76:	463b      	mov	r3, r7
 8002e78:	2204      	movs	r2, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e7e:	f005 f8ff 	bl	8008080 <HAL_TIM_PWM_ConfigChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e88:	f7ff fa32 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e8c:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <MX_TIM2_Init+0xe8>)
 8002e8e:	f000 f951 	bl	8003134 <HAL_TIM_MspPostInit>

}
 8002e92:	bf00      	nop
 8002e94:	3738      	adds	r7, #56	@ 0x38
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000dc4 	.word	0x20000dc4

08002ea0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	@ 0x38
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	611a      	str	r2, [r3, #16]
 8002ece:	615a      	str	r2, [r3, #20]
 8002ed0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f8c <MX_TIM3_Init+0xec>)
 8002ed6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002eda:	22a9      	movs	r2, #169	@ 0xa9
 8002edc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ede:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002ee4:	4b28      	ldr	r3, [pc, #160]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002ee6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002eea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eec:	4b26      	ldr	r3, [pc, #152]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef2:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002ef4:	2280      	movs	r2, #128	@ 0x80
 8002ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ef8:	4823      	ldr	r0, [pc, #140]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002efa:	f004 fb3e 	bl	800757a <HAL_TIM_Base_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f04:	f7ff f9f4 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f12:	4619      	mov	r1, r3
 8002f14:	481c      	ldr	r0, [pc, #112]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002f16:	f005 f9c7 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f20:	f7ff f9e6 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f24:	4818      	ldr	r0, [pc, #96]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002f26:	f004 fbe9 	bl	80076fc <HAL_TIM_PWM_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f30:	f7ff f9de 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	4619      	mov	r1, r3
 8002f42:	4811      	ldr	r0, [pc, #68]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002f44:	f006 f802 	bl	8008f4c <HAL_TIMEx_MasterConfigSynchronization>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f4e:	f7ff f9cf 	bl	80022f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f52:	2360      	movs	r3, #96	@ 0x60
 8002f54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f62:	463b      	mov	r3, r7
 8002f64:	2200      	movs	r2, #0
 8002f66:	4619      	mov	r1, r3
 8002f68:	4807      	ldr	r0, [pc, #28]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002f6a:	f005 f889 	bl	8008080 <HAL_TIM_PWM_ConfigChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f74:	f7ff f9bc 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f78:	4803      	ldr	r0, [pc, #12]	@ (8002f88 <MX_TIM3_Init+0xe8>)
 8002f7a:	f000 f8db 	bl	8003134 <HAL_TIM_MspPostInit>

}
 8002f7e:	bf00      	nop
 8002f80:	3738      	adds	r7, #56	@ 0x38
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000e10 	.word	0x20000e10
 8002f8c:	40000400 	.word	0x40000400

08002f90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f96:	f107 0310 	add.w	r3, r7, #16
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800302c <MX_TIM4_Init+0x9c>)
 8002fb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002fb6:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002fba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8002fc2:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002fc4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002fc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fca:	4b17      	ldr	r3, [pc, #92]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd0:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fd6:	4814      	ldr	r0, [pc, #80]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002fd8:	f004 facf 	bl	800757a <HAL_TIM_Base_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002fe2:	f7ff f985 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	480d      	ldr	r0, [pc, #52]	@ (8003028 <MX_TIM4_Init+0x98>)
 8002ff4:	f005 f958 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002ffe:	f7ff f977 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4806      	ldr	r0, [pc, #24]	@ (8003028 <MX_TIM4_Init+0x98>)
 8003010:	f005 ff9c 	bl	8008f4c <HAL_TIMEx_MasterConfigSynchronization>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800301a:	f7ff f969 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800301e:	bf00      	nop
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000e5c 	.word	0x20000e5c
 800302c:	40000800 	.word	0x40000800

08003030 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003040:	d13e      	bne.n	80030c0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003042:	4b37      	ldr	r3, [pc, #220]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	4a36      	ldr	r2, [pc, #216]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6593      	str	r3, [r2, #88]	@ 0x58
 800304e:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 800305a:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 800305c:	4a32      	ldr	r2, [pc, #200]	@ (8003128 <HAL_TIM_Base_MspInit+0xf8>)
 800305e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8003060:	4b30      	ldr	r3, [pc, #192]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 8003062:	2239      	movs	r2, #57	@ 0x39
 8003064:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003066:	4b2f      	ldr	r3, [pc, #188]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 8003068:	2210      	movs	r2, #16
 800306a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800306c:	4b2d      	ldr	r3, [pc, #180]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003072:	4b2c      	ldr	r3, [pc, #176]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 8003074:	2280      	movs	r2, #128	@ 0x80
 8003076:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003078:	4b2a      	ldr	r3, [pc, #168]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 800307a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800307e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8003086:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 8003088:	2200      	movs	r2, #0
 800308a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800308c:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 800308e:	2200      	movs	r2, #0
 8003090:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8003092:	4824      	ldr	r0, [pc, #144]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 8003094:	f002 f866 	bl	8005164 <HAL_DMA_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 800309e:	f7ff f927 	bl	80022f0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80030a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003124 <HAL_TIM_Base_MspInit+0xf4>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2105      	movs	r1, #5
 80030b2:	201c      	movs	r0, #28
 80030b4:	f002 f82e 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030b8:	201c      	movs	r0, #28
 80030ba:	f002 f845 	bl	8005148 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80030be:	e02a      	b.n	8003116 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a19      	ldr	r2, [pc, #100]	@ (800312c <HAL_TIM_Base_MspInit+0xfc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10c      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ce:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d6:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
}
 80030e2:	e018      	b.n	8003116 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a11      	ldr	r2, [pc, #68]	@ (8003130 <HAL_TIM_Base_MspInit+0x100>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d113      	bne.n	8003116 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_TIM_Base_MspInit+0xf0>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2106      	movs	r1, #6
 800310a:	201e      	movs	r0, #30
 800310c:	f002 f802 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003110:	201e      	movs	r0, #30
 8003112:	f002 f819 	bl	8005148 <HAL_NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	20000ea8 	.word	0x20000ea8
 8003128:	40020008 	.word	0x40020008
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800

08003134 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003154:	d11d      	bne.n	8003192 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <HAL_TIM_MspPostInit+0xa8>)
 8003158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315a:	4a20      	ldr	r2, [pc, #128]	@ (80031dc <HAL_TIM_MspPostInit+0xa8>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <HAL_TIM_MspPostInit+0xa8>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800316e:	2302      	movs	r3, #2
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800317a:	2301      	movs	r3, #1
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800317e:	2301      	movs	r3, #1
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800318c:	f002 fb28 	bl	80057e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003190:	e020      	b.n	80031d4 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <HAL_TIM_MspPostInit+0xac>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319c:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <HAL_TIM_MspPostInit+0xa8>)
 800319e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a0:	4a0e      	ldr	r2, [pc, #56]	@ (80031dc <HAL_TIM_MspPostInit+0xa8>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <HAL_TIM_MspPostInit+0xa8>)
 80031aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031b4:	2340      	movs	r3, #64	@ 0x40
 80031b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2302      	movs	r3, #2
 80031ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2300      	movs	r3, #0
 80031c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c4:	2302      	movs	r3, #2
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4619      	mov	r1, r3
 80031ce:	4805      	ldr	r0, [pc, #20]	@ (80031e4 <HAL_TIM_MspPostInit+0xb0>)
 80031d0:	f002 fb06 	bl	80057e0 <HAL_GPIO_Init>
}
 80031d4:	bf00      	nop
 80031d6:	3728      	adds	r7, #40	@ 0x28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	48000800 	.word	0x48000800

080031e8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80031ec:	4b21      	ldr	r3, [pc, #132]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 80031ee:	4a22      	ldr	r2, [pc, #136]	@ (8003278 <MX_LPUART1_UART_Init+0x90>)
 80031f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80031f2:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 80031f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b1c      	ldr	r3, [pc, #112]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003206:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b18      	ldr	r3, [pc, #96]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003218:	4b16      	ldr	r3, [pc, #88]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 800321a:	2200      	movs	r2, #0
 800321c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 8003220:	2200      	movs	r2, #0
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 8003226:	2200      	movs	r2, #0
 8003228:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800322a:	4812      	ldr	r0, [pc, #72]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 800322c:	f005 ff56 	bl	80090dc <HAL_UART_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003236:	f7ff f85b 	bl	80022f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800323a:	2100      	movs	r1, #0
 800323c:	480d      	ldr	r0, [pc, #52]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 800323e:	f007 fc39 	bl	800aab4 <HAL_UARTEx_SetTxFifoThreshold>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003248:	f7ff f852 	bl	80022f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800324c:	2100      	movs	r1, #0
 800324e:	4809      	ldr	r0, [pc, #36]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 8003250:	f007 fc6e 	bl	800ab30 <HAL_UARTEx_SetRxFifoThreshold>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800325a:	f7ff f849 	bl	80022f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800325e:	4805      	ldr	r0, [pc, #20]	@ (8003274 <MX_LPUART1_UART_Init+0x8c>)
 8003260:	f007 fbef 	bl	800aa42 <HAL_UARTEx_DisableFifoMode>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800326a:	f7ff f841 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	2000108c 	.word	0x2000108c
 8003278:	40008000 	.word	0x40008000

0800327c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b09c      	sub	sp, #112	@ 0x70
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003294:	f107 0318 	add.w	r3, r7, #24
 8003298:	2244      	movs	r2, #68	@ 0x44
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f00e f814 	bl	80112ca <memset>
  if(uartHandle->Instance==LPUART1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003414 <HAL_UART_MspInit+0x198>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	f040 80af 	bne.w	800340c <HAL_UART_MspInit+0x190>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80032ae:	2320      	movs	r3, #32
 80032b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032b6:	f107 0318 	add.w	r3, r7, #24
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fec2 	bl	8007044 <HAL_RCCEx_PeriphCLKConfig>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80032c6:	f7ff f813 	bl	80022f0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80032ca:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 80032cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ce:	4a52      	ldr	r2, [pc, #328]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80032d6:	4b50      	ldr	r3, [pc, #320]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	4b47      	ldr	r3, [pc, #284]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	4a46      	ldr	r2, [pc, #280]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003306:	4b44      	ldr	r3, [pc, #272]	@ (8003418 <HAL_UART_MspInit+0x19c>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003312:	2308      	movs	r3, #8
 8003314:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003322:	230c      	movs	r3, #12
 8003324:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800332a:	4619      	mov	r1, r3
 800332c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003330:	f002 fa56 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003334:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003338:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003346:	2308      	movs	r3, #8
 8003348:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800334e:	4619      	mov	r1, r3
 8003350:	4832      	ldr	r0, [pc, #200]	@ (800341c <HAL_UART_MspInit+0x1a0>)
 8003352:	f002 fa45 	bl	80057e0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8003356:	4b32      	ldr	r3, [pc, #200]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 8003358:	4a32      	ldr	r2, [pc, #200]	@ (8003424 <HAL_UART_MspInit+0x1a8>)
 800335a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800335c:	4b30      	ldr	r3, [pc, #192]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 800335e:	2222      	movs	r2, #34	@ 0x22
 8003360:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003362:	4b2f      	ldr	r3, [pc, #188]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003368:	4b2d      	ldr	r3, [pc, #180]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800336e:	4b2c      	ldr	r3, [pc, #176]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 8003370:	2280      	movs	r2, #128	@ 0x80
 8003372:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003374:	4b2a      	ldr	r3, [pc, #168]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 8003376:	2200      	movs	r2, #0
 8003378:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800337a:	4b29      	ldr	r3, [pc, #164]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003380:	4b27      	ldr	r3, [pc, #156]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 8003382:	2220      	movs	r2, #32
 8003384:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003386:	4b26      	ldr	r3, [pc, #152]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 8003388:	2200      	movs	r2, #0
 800338a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800338c:	4824      	ldr	r0, [pc, #144]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 800338e:	f001 fee9 	bl	8005164 <HAL_DMA_Init>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8003398:	f7fe ffaa 	bl	80022f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a20      	ldr	r2, [pc, #128]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80033a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_UART_MspInit+0x1a4>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80033aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033ac:	4a1f      	ldr	r2, [pc, #124]	@ (800342c <HAL_UART_MspInit+0x1b0>)
 80033ae:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033b2:	2223      	movs	r2, #35	@ 0x23
 80033b4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033b8:	2210      	movs	r2, #16
 80033ba:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033c2:	4b19      	ldr	r3, [pc, #100]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033c4:	2280      	movs	r2, #128	@ 0x80
 80033c6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033c8:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ce:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80033d4:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033da:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033dc:	2200      	movs	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80033e0:	4811      	ldr	r0, [pc, #68]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033e2:	f001 febf 	bl	8005164 <HAL_DMA_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 80033ec:	f7fe ff80 	bl	80022f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80033f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <HAL_UART_MspInit+0x1ac>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2105      	movs	r1, #5
 8003400:	205b      	movs	r0, #91	@ 0x5b
 8003402:	f001 fe87 	bl	8005114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003406:	205b      	movs	r0, #91	@ 0x5b
 8003408:	f001 fe9e 	bl	8005148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800340c:	bf00      	nop
 800340e:	3770      	adds	r7, #112	@ 0x70
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40008000 	.word	0x40008000
 8003418:	40021000 	.word	0x40021000
 800341c:	48000400 	.word	0x48000400
 8003420:	20001120 	.word	0x20001120
 8003424:	40020030 	.word	0x40020030
 8003428:	20001180 	.word	0x20001180
 800342c:	40020044 	.word	0x40020044

08003430 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a13      	ldr	r2, [pc, #76]	@ (800348c <HAL_UART_RxCpltCallback+0x5c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d11e      	bne.n	8003480 <HAL_UART_RxCpltCallback+0x50>
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 8003442:	2340      	movs	r3, #64	@ 0x40
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e018      	b.n	800347a <HAL_UART_RxCpltCallback+0x4a>
            circular_buffer[write_index] = dma_rx_buffer[i];
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_UART_RxCpltCallback+0x60>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	4619      	mov	r1, r3
 8003450:	4a10      	ldr	r2, [pc, #64]	@ (8003494 <HAL_UART_RxCpltCallback+0x64>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <HAL_UART_RxCpltCallback+0x68>)
 800345a:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <HAL_UART_RxCpltCallback+0x60>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	3301      	adds	r3, #1
 8003464:	425a      	negs	r2, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	bf58      	it	pl
 800346c:	4253      	negpl	r3, r2
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <HAL_UART_RxCpltCallback+0x60>)
 8003472:	801a      	strh	r2, [r3, #0]
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3301      	adds	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b7f      	cmp	r3, #127	@ 0x7f
 800347e:	dde3      	ble.n	8003448 <HAL_UART_RxCpltCallback+0x18>
        }
	}


}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40008000 	.word	0x40008000
 8003490:	20001088 	.word	0x20001088
 8003494:	20000f08 	.word	0x20000f08
 8003498:	20000f88 	.word	0x20000f88

0800349c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a13      	ldr	r2, [pc, #76]	@ (80034f8 <HAL_UART_RxHalfCpltCallback+0x5c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d11e      	bne.n	80034ec <HAL_UART_RxHalfCpltCallback+0x50>
    {
        // Copier les 1ers 64 octets
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e018      	b.n	80034e6 <HAL_UART_RxHalfCpltCallback+0x4a>
            circular_buffer[write_index] = dma_rx_buffer[i];
 80034b4:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <HAL_UART_RxHalfCpltCallback+0x60>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	4a10      	ldr	r2, [pc, #64]	@ (8003500 <HAL_UART_RxHalfCpltCallback+0x64>)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4413      	add	r3, r2
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003504 <HAL_UART_RxHalfCpltCallback+0x68>)
 80034c6:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 80034c8:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <HAL_UART_RxHalfCpltCallback+0x60>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	425a      	negs	r2, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	bf58      	it	pl
 80034d8:	4253      	negpl	r3, r2
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_UART_RxHalfCpltCallback+0x60>)
 80034de:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80034ea:	dde3      	ble.n	80034b4 <HAL_UART_RxHalfCpltCallback+0x18>
        }
    }
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40008000 	.word	0x40008000
 80034fc:	20001088 	.word	0x20001088
 8003500:	20000f08 	.word	0x20000f08
 8003504:	20000f88 	.word	0x20000f88

08003508 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a05      	ldr	r2, [pc, #20]	@ (800352c <HAL_UART_TxCpltCallback+0x24>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d104      	bne.n	8003524 <HAL_UART_TxCpltCallback+0x1c>
    {
        osSemaphoreRelease(uartTxDoneHandle);
 800351a:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <HAL_UART_TxCpltCallback+0x28>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f00a fb80 	bl	800dc24 <osSemaphoreRelease>
    }
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40008000 	.word	0x40008000
 8003530:	20000354 	.word	0x20000354

08003534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003534:	480d      	ldr	r0, [pc, #52]	@ (800356c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003536:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003538:	f7ff fa00 	bl	800293c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800353c:	480c      	ldr	r0, [pc, #48]	@ (8003570 <LoopForever+0x6>)
  ldr r1, =_edata
 800353e:	490d      	ldr	r1, [pc, #52]	@ (8003574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003540:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <LoopForever+0xe>)
  movs r3, #0
 8003542:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003544:	e002      	b.n	800354c <LoopCopyDataInit>

08003546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354a:	3304      	adds	r3, #4

0800354c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800354c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800354e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003550:	d3f9      	bcc.n	8003546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003552:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003554:	4c0a      	ldr	r4, [pc, #40]	@ (8003580 <LoopForever+0x16>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003558:	e001      	b.n	800355e <LoopFillZerobss>

0800355a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800355c:	3204      	adds	r2, #4

0800355e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800355e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003560:	d3fb      	bcc.n	800355a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003562:	f00d ff69 	bl	8011438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003566:	f7fe fdb1 	bl	80020cc <main>

0800356a <LoopForever>:

LoopForever:
    b LoopForever
 800356a:	e7fe      	b.n	800356a <LoopForever>
  ldr   r0, =_estack
 800356c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003574:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003578:	080159d4 	.word	0x080159d4
  ldr r2, =_sbss
 800357c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003580:	200043e0 	.word	0x200043e0

08003584 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003584:	e7fe      	b.n	8003584 <COMP1_2_3_IRQHandler>

08003586 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003590:	2003      	movs	r0, #3
 8003592:	f001 fdb4 	bl	80050fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003596:	200f      	movs	r0, #15
 8003598:	f7fe ffd6 	bl	8002548 <HAL_InitTick>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	71fb      	strb	r3, [r7, #7]
 80035a6:	e001      	b.n	80035ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035a8:	f7fe ffa4 	bl	80024f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035ac:	79fb      	ldrb	r3, [r7, #7]

}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_IncTick+0x1c>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_IncTick+0x20>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	4a03      	ldr	r2, [pc, #12]	@ (80035d4 <HAL_IncTick+0x1c>)
 80035c8:	6013      	str	r3, [r2, #0]
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	200011e0 	.word	0x200011e0
 80035d8:	20000010 	.word	0x20000010

080035dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return uwTick;
 80035e0:	4b03      	ldr	r3, [pc, #12]	@ (80035f0 <HAL_GetTick+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	200011e0 	.word	0x200011e0

080035f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff ffee 	bl	80035dc <HAL_GetTick>
 8003600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d004      	beq.n	8003618 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800360e:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_Delay+0x40>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003618:	bf00      	nop
 800361a:	f7ff ffdf 	bl	80035dc <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	429a      	cmp	r2, r3
 8003628:	d8f7      	bhi.n	800361a <HAL_Delay+0x26>
  {
  }
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000010 	.word	0x20000010

08003638 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3360      	adds	r3, #96	@ 0x60
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <LL_ADC_SetOffset+0x44>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	03fff000 	.word	0x03fff000

080036e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3360      	adds	r3, #96	@ 0x60
 80036f6:	461a      	mov	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3360      	adds	r3, #96	@ 0x60
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800374a:	b480      	push	{r7}
 800374c:	b087      	sub	sp, #28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3360      	adds	r3, #96	@ 0x60
 800375a:	461a      	mov	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	431a      	orrs	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3360      	adds	r3, #96	@ 0x60
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	615a      	str	r2, [r3, #20]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003802:	b480      	push	{r7}
 8003804:	b087      	sub	sp, #28
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3330      	adds	r3, #48	@ 0x30
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	4413      	add	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	211f      	movs	r1, #31
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	401a      	ands	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 011f 	and.w	r1, r3, #31
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	431a      	orrs	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3314      	adds	r3, #20
 8003890:	461a      	mov	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	0e5b      	lsrs	r3, r3, #25
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	4413      	add	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	0d1b      	lsrs	r3, r3, #20
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2107      	movs	r1, #7
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	401a      	ands	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	0d1b      	lsrs	r3, r3, #20
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	431a      	orrs	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	43db      	mvns	r3, r3
 80038f2:	401a      	ands	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0318 	and.w	r3, r3, #24
 80038fa:	4908      	ldr	r1, [pc, #32]	@ (800391c <LL_ADC_SetChannelSingleDiff+0x44>)
 80038fc:	40d9      	lsrs	r1, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	400b      	ands	r3, r1
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	0007ffff 	.word	0x0007ffff

08003920 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 031f 	and.w	r3, r3, #31
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6093      	str	r3, [r2, #8]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800398c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003990:	d101      	bne.n	8003996 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80039b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e0:	d101      	bne.n	80039e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <LL_ADC_IsEnabled+0x18>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <LL_ADC_IsEnabled+0x1a>
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a52:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a56:	f043 0204 	orr.w	r2, r3, #4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d101      	bne.n	8003a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d101      	bne.n	8003aa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b089      	sub	sp, #36	@ 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e167      	b.n	8003da2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fd fb5d 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff3f 	bl	800397c <LL_ADC_IsDeepPowerDownEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff25 	bl	8003958 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff5a 	bl	80039cc <LL_ADC_IsInternalRegulatorEnabled>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d115      	bne.n	8003b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff3e 	bl	80039a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b28:	4ba0      	ldr	r3, [pc, #640]	@ (8003dac <HAL_ADC_Init+0x2f4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	4aa0      	ldr	r2, [pc, #640]	@ (8003db0 <HAL_ADC_Init+0x2f8>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b3c:	e002      	b.n	8003b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f9      	bne.n	8003b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff3c 	bl	80039cc <LL_ADC_IsInternalRegulatorEnabled>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff75 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8003b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 8100 	bne.w	8003d90 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 80fc 	bne.w	8003d90 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ba0:	f043 0202 	orr.w	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff35 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d111      	bne.n	8003bdc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bbc:	f7ff ff2e 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	487c      	ldr	r0, [pc, #496]	@ (8003db4 <HAL_ADC_Init+0x2fc>)
 8003bc4:	f7ff ff2a 	bl	8003a1c <LL_ADC_IsEnabled>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4323      	orrs	r3, r4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4878      	ldr	r0, [pc, #480]	@ (8003db8 <HAL_ADC_Init+0x300>)
 8003bd8:	f7ff fd2e 	bl	8003638 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7f5b      	ldrb	r3, [r3, #29]
 8003be0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003be6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003bec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003bf2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bfa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d106      	bne.n	8003c18 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	045b      	lsls	r3, r3, #17
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d009      	beq.n	8003c34 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	4b60      	ldr	r3, [pc, #384]	@ (8003dbc <HAL_ADC_Init+0x304>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	69b9      	ldr	r1, [r7, #24]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff14 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 8003c68:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d16d      	bne.n	8003d4c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d16a      	bne.n	8003d4c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c7a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c82:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c92:	f023 0302 	bic.w	r3, r3, #2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003cb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cc0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6911      	ldr	r1, [r2, #16]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003cd6:	e013      	b.n	8003d00 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ce6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cfc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d118      	bne.n	8003d3c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d14:	f023 0304 	bic.w	r3, r3, #4
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d20:	4311      	orrs	r1, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d26:	4311      	orrs	r1, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	611a      	str	r2, [r3, #16]
 8003d3a:	e007      	b.n	8003d4c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10c      	bne.n	8003d6e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	f023 010f 	bic.w	r1, r3, #15
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	1e5a      	subs	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d6c:	e007      	b.n	8003d7e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 020f 	bic.w	r2, r2, #15
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d8e:	e007      	b.n	8003da0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d94:	f043 0210 	orr.w	r2, r3, #16
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	@ 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd90      	pop	{r4, r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000008 	.word	0x20000008
 8003db0:	053e2d63 	.word	0x053e2d63
 8003db4:	50000100 	.word	0x50000100
 8003db8:	50000300 	.word	0x50000300
 8003dbc:	fff04007 	.word	0xfff04007

08003dc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dcc:	4851      	ldr	r0, [pc, #324]	@ (8003f14 <HAL_ADC_Start_DMA+0x154>)
 8003dce:	f7ff fda7 	bl	8003920 <LL_ADC_GetMultimode>
 8003dd2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe46 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f040 808f 	bne.w	8003f04 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_Start_DMA+0x34>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e08a      	b.n	8003f0a <HAL_ADC_Start_DMA+0x14a>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d002      	beq.n	8003e0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b09      	cmp	r3, #9
 8003e0c:	d173      	bne.n	8003ef6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 feb2 	bl	8004b78 <ADC_Enable>
 8003e14:	4603      	mov	r3, r0
 8003e16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d166      	bne.n	8003eec <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a38      	ldr	r2, [pc, #224]	@ (8003f18 <HAL_ADC_Start_DMA+0x158>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d002      	beq.n	8003e42 <HAL_ADC_Start_DMA+0x82>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	e001      	b.n	8003e46 <HAL_ADC_Start_DMA+0x86>
 8003e42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d002      	beq.n	8003e54 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e70:	f023 0206 	bic.w	r2, r3, #6
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e78:	e002      	b.n	8003e80 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	4a25      	ldr	r2, [pc, #148]	@ (8003f1c <HAL_ADC_Start_DMA+0x15c>)
 8003e86:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <HAL_ADC_Start_DMA+0x160>)
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e94:	4a23      	ldr	r2, [pc, #140]	@ (8003f24 <HAL_ADC_Start_DMA+0x164>)
 8003e96:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	221c      	movs	r2, #28
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0210 	orr.w	r2, r2, #16
 8003eb6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3340      	adds	r3, #64	@ 0x40
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f001 f9ec 	bl	80052b4 <HAL_DMA_Start_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fdac 	bl	8003a42 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003eea:	e00d      	b.n	8003f08 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003ef4:	e008      	b.n	8003f08 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003f02:	e001      	b.n	8003f08 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
 8003f06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	50000300 	.word	0x50000300
 8003f18:	50000100 	.word	0x50000100
 8003f1c:	08004c85 	.word	0x08004c85
 8003f20:	08004d5d 	.word	0x08004d5d
 8003f24:	08004d79 	.word	0x08004d79

08003f28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	@ 0x28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003f30:	2300      	movs	r3, #0
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f44:	4883      	ldr	r0, [pc, #524]	@ (8004154 <HAL_ADC_IRQHandler+0x22c>)
 8003f46:	f7ff fceb 	bl	8003920 <LL_ADC_GetMultimode>
 8003f4a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d017      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x5e>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f70:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 ff65 	bl	8004e48 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2202      	movs	r2, #2
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_ADC_IRQHandler+0x72>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8085 	beq.w	80040b0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d07f      	beq.n	80040b0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fc05 	bl	80037dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d064      	beq.n	80040a2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8004158 <HAL_ADC_IRQHandler+0x230>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d002      	beq.n	8003fe8 <HAL_ADC_IRQHandler+0xc0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	e001      	b.n	8003fec <HAL_ADC_IRQHandler+0xc4>
 8003fe8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d008      	beq.n	8004006 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d002      	beq.n	8004006 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b09      	cmp	r3, #9
 8004004:	d104      	bne.n	8004010 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	e00d      	b.n	800402c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a50      	ldr	r2, [pc, #320]	@ (8004158 <HAL_ADC_IRQHandler+0x230>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d002      	beq.n	8004020 <HAL_ADC_IRQHandler+0xf8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	e001      	b.n	8004024 <HAL_ADC_IRQHandler+0xfc>
 8004020:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004024:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d135      	bne.n	80040a2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d12e      	bne.n	80040a2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fd0e 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11a      	bne.n	800408a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 020c 	bic.w	r2, r2, #12
 8004062:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d112      	bne.n	80040a2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004088:	e00b      	b.n	80040a2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	f043 0210 	orr.w	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd f908 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	220c      	movs	r2, #12
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <HAL_ADC_IRQHandler+0x19c>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 809e 	beq.w	800420c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8098 	beq.w	800420c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fbae 	bl	800385a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80040fe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fb69 	bl	80037dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800410a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a11      	ldr	r2, [pc, #68]	@ (8004158 <HAL_ADC_IRQHandler+0x230>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d002      	beq.n	800411c <HAL_ADC_IRQHandler+0x1f4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	e001      	b.n	8004120 <HAL_ADC_IRQHandler+0x1f8>
 800411c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	4293      	cmp	r3, r2
 8004126:	d008      	beq.n	800413a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b06      	cmp	r3, #6
 8004132:	d002      	beq.n	800413a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b07      	cmp	r3, #7
 8004138:	d104      	bne.n	8004144 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	e011      	b.n	8004168 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a03      	ldr	r2, [pc, #12]	@ (8004158 <HAL_ADC_IRQHandler+0x230>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d006      	beq.n	800415c <HAL_ADC_IRQHandler+0x234>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	e005      	b.n	8004160 <HAL_ADC_IRQHandler+0x238>
 8004154:	50000300 	.word	0x50000300
 8004158:	50000100 	.word	0x50000100
 800415c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004160:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d047      	beq.n	80041fe <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <HAL_ADC_IRQHandler+0x260>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d03f      	beq.n	80041fe <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004184:	2b00      	cmp	r3, #0
 8004186:	d13a      	bne.n	80041fe <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d133      	bne.n	80041fe <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d12e      	bne.n	80041fe <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fc73 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11a      	bne.n	80041e6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041be:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d112      	bne.n	80041fe <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041e4:	e00b      	b.n	80041fe <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fdfa 	bl	8004df8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2260      	movs	r2, #96	@ 0x60
 800420a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d011      	beq.n	800423a <HAL_ADC_IRQHandler+0x312>
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f89f 	bl	8004370 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2280      	movs	r2, #128	@ 0x80
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d012      	beq.n	800426a <HAL_ADC_IRQHandler+0x342>
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fde0 	bl	8004e20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <HAL_ADC_IRQHandler+0x372>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fdd2 	bl	8004e34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004298:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d036      	beq.n	8004312 <HAL_ADC_IRQHandler+0x3ea>
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d031      	beq.n	8004312 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80042b6:	2301      	movs	r3, #1
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ba:	e014      	b.n	80042e6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80042c2:	4825      	ldr	r0, [pc, #148]	@ (8004358 <HAL_ADC_IRQHandler+0x430>)
 80042c4:	f7ff fb3a 	bl	800393c <LL_ADC_GetMultiDMATransfer>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80042ce:	2301      	movs	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d2:	e008      	b.n	80042e6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80042e2:	2301      	movs	r3, #1
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10e      	bne.n	800430a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fc:	f043 0202 	orr.w	r2, r3, #2
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f83d 	bl	8004384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d018      	beq.n	800434e <HAL_ADC_IRQHandler+0x426>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004322:	2b00      	cmp	r3, #0
 8004324:	d013      	beq.n	800434e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004336:	f043 0208 	orr.w	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004346:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fd5f 	bl	8004e0c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800434e:	bf00      	nop
 8004350:	3728      	adds	r7, #40	@ 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	50000300 	.word	0x50000300

0800435c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b0b6      	sub	sp, #216	@ 0xd8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x22>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e3c8      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x7b4>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fb4f 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 83ad 	bne.w	8004b2e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	f7ff fa0e 	bl	8003802 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fb3d 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 80043f0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fb49 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 80043fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004402:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 81d9 	bne.w	80047be <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800440c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004410:	2b00      	cmp	r3, #0
 8004412:	f040 81d4 	bne.w	80047be <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800441e:	d10f      	bne.n	8004440 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	4619      	mov	r1, r3
 800442c:	f7ff fa28 	bl	8003880 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff f9bc 	bl	80037b6 <LL_ADC_SetSamplingTimeCommonConfig>
 800443e:	e00e      	b.n	800445e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	461a      	mov	r2, r3
 800444e:	f7ff fa17 	bl	8003880 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f9ac 	bl	80037b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	08db      	lsrs	r3, r3, #3
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d022      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6919      	ldr	r1, [r3, #16]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004490:	f7ff f906 	bl	80036a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6919      	ldr	r1, [r3, #16]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	461a      	mov	r2, r3
 80044a2:	f7ff f952 	bl	800374a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x124>
 80044b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ba:	e000      	b.n	80044be <HAL_ADC_ConfigChannel+0x126>
 80044bc:	2300      	movs	r3, #0
 80044be:	461a      	mov	r2, r3
 80044c0:	f7ff f95e 	bl	8003780 <LL_ADC_SetOffsetSaturation>
 80044c4:	e17b      	b.n	80047be <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff f90b 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x15a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff f900 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	0e9b      	lsrs	r3, r3, #26
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	e01e      	b.n	8004530 <HAL_ADC_ConfigChannel+0x198>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f8f5 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80044fe:	4603      	mov	r3, r0
 8004500:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004520:	2320      	movs	r3, #32
 8004522:	e004      	b.n	800452e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x1b0>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	e018      	b.n	800457a <HAL_ADC_ConfigChannel+0x1e2>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800455c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004564:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800456c:	2320      	movs	r3, #32
 800456e:	e004      	b.n	800457a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004574:	fab3 f383 	clz	r3, r3
 8004578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800457a:	429a      	cmp	r2, r3
 800457c:	d106      	bne.n	800458c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff f8c4 	bl	8003714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff f8a8 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x220>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f89d 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	f003 021f 	and.w	r2, r3, #31
 80045b6:	e01e      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x25e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2101      	movs	r1, #1
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff f892 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80045d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80045de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80045e6:	2320      	movs	r3, #32
 80045e8:	e004      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80045ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d105      	bne.n	800460e <HAL_ADC_ConfigChannel+0x276>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	0e9b      	lsrs	r3, r3, #26
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	e018      	b.n	8004640 <HAL_ADC_ConfigChannel+0x2a8>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004622:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004626:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800462a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004632:	2320      	movs	r3, #32
 8004634:	e004      	b.n	8004640 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004636:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004640:	429a      	cmp	r2, r3
 8004642:	d106      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2200      	movs	r2, #0
 800464a:	2101      	movs	r1, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff f861 	bl	8003714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2102      	movs	r1, #2
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff f845 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_ADC_ConfigChannel+0x2e6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff f83a 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	0e9b      	lsrs	r3, r3, #26
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	e01e      	b.n	80046bc <HAL_ADC_ConfigChannel+0x324>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2102      	movs	r1, #2
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff f82f 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800469c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80046a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e004      	b.n	80046ba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80046b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x33c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0e9b      	lsrs	r3, r3, #26
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	e016      	b.n	8004702 <HAL_ADC_ConfigChannel+0x36a>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046e0:	fa93 f3a3 	rbit	r3, r3
 80046e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80046e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80046ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e004      	b.n	8004702 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80046f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046fc:	fab3 f383 	clz	r3, r3
 8004700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004702:	429a      	cmp	r2, r3
 8004704:	d106      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff f800 	bl	8003714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2103      	movs	r1, #3
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe ffe4 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004720:	4603      	mov	r3, r0
 8004722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x3a8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2103      	movs	r1, #3
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe ffd9 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 8004736:	4603      	mov	r3, r0
 8004738:	0e9b      	lsrs	r3, r3, #26
 800473a:	f003 021f 	and.w	r2, r3, #31
 800473e:	e017      	b.n	8004770 <HAL_ADC_ConfigChannel+0x3d8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2103      	movs	r1, #3
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe ffce 	bl	80036e8 <LL_ADC_GetOffsetChannel>
 800474c:	4603      	mov	r3, r0
 800474e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800475a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800475c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004762:	2320      	movs	r3, #32
 8004764:	e003      	b.n	800476e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004766:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x3f0>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0e9b      	lsrs	r3, r3, #26
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	e011      	b.n	80047ac <HAL_ADC_ConfigChannel+0x414>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004798:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800479a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e003      	b.n	80047ac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80047a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a6:	fab3 f383 	clz	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d106      	bne.n	80047be <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2103      	movs	r1, #3
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe ffab 	bl	8003714 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f92a 	bl	8003a1c <LL_ADC_IsEnabled>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f040 8140 	bne.w	8004a50 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6819      	ldr	r1, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	461a      	mov	r2, r3
 80047de:	f7ff f87b 	bl	80038d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4a8f      	ldr	r2, [pc, #572]	@ (8004a24 <HAL_ADC_ConfigChannel+0x68c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	f040 8131 	bne.w	8004a50 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x47e>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	0e9b      	lsrs	r3, r3, #26
 8004804:	3301      	adds	r3, #1
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2b09      	cmp	r3, #9
 800480c:	bf94      	ite	ls
 800480e:	2301      	movls	r3, #1
 8004810:	2300      	movhi	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e019      	b.n	800484a <HAL_ADC_ConfigChannel+0x4b2>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004824:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004826:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004828:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800482e:	2320      	movs	r3, #32
 8004830:	e003      	b.n	800483a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004834:	fab3 f383 	clz	r3, r3
 8004838:	b2db      	uxtb	r3, r3
 800483a:	3301      	adds	r3, #1
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2b09      	cmp	r3, #9
 8004842:	bf94      	ite	ls
 8004844:	2301      	movls	r3, #1
 8004846:	2300      	movhi	r3, #0
 8004848:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800484a:	2b00      	cmp	r3, #0
 800484c:	d079      	beq.n	8004942 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_ADC_ConfigChannel+0x4d2>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	0e9b      	lsrs	r3, r3, #26
 8004860:	3301      	adds	r3, #1
 8004862:	069b      	lsls	r3, r3, #26
 8004864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004868:	e015      	b.n	8004896 <HAL_ADC_ConfigChannel+0x4fe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800487c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004882:	2320      	movs	r3, #32
 8004884:	e003      	b.n	800488e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	3301      	adds	r3, #1
 8004890:	069b      	lsls	r3, r3, #26
 8004892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x51e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	0e9b      	lsrs	r3, r3, #26
 80048a8:	3301      	adds	r3, #1
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	2101      	movs	r1, #1
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	e017      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x54e>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80048c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80048c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e003      	b.n	80048da <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80048d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	3301      	adds	r3, #1
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2101      	movs	r1, #1
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	ea42 0103 	orr.w	r1, r2, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <HAL_ADC_ConfigChannel+0x574>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	0e9b      	lsrs	r3, r3, #26
 80048fc:	3301      	adds	r3, #1
 80048fe:	f003 021f 	and.w	r2, r3, #31
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	051b      	lsls	r3, r3, #20
 800490a:	e018      	b.n	800493e <HAL_ADC_ConfigChannel+0x5a6>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004914:	fa93 f3a3 	rbit	r3, r3
 8004918:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004924:	2320      	movs	r3, #32
 8004926:	e003      	b.n	8004930 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492a:	fab3 f383 	clz	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	3301      	adds	r3, #1
 8004932:	f003 021f 	and.w	r2, r3, #31
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800493e:	430b      	orrs	r3, r1
 8004940:	e081      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <HAL_ADC_ConfigChannel+0x5c6>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	0e9b      	lsrs	r3, r3, #26
 8004954:	3301      	adds	r3, #1
 8004956:	069b      	lsls	r3, r3, #26
 8004958:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800495c:	e015      	b.n	800498a <HAL_ADC_ConfigChannel+0x5f2>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004976:	2320      	movs	r3, #32
 8004978:	e003      	b.n	8004982 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	3301      	adds	r3, #1
 8004984:	069b      	lsls	r3, r3, #26
 8004986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x612>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	0e9b      	lsrs	r3, r3, #26
 800499c:	3301      	adds	r3, #1
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2101      	movs	r1, #1
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	e017      	b.n	80049da <HAL_ADC_ConfigChannel+0x642>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	61fb      	str	r3, [r7, #28]
  return result;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80049c2:	2320      	movs	r3, #32
 80049c4:	e003      	b.n	80049ce <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	fab3 f383 	clz	r3, r3
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	3301      	adds	r3, #1
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	2101      	movs	r1, #1
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	ea42 0103 	orr.w	r1, r2, r3
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x66e>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	0e9b      	lsrs	r3, r3, #26
 80049f0:	3301      	adds	r3, #1
 80049f2:	f003 021f 	and.w	r2, r3, #31
 80049f6:	4613      	mov	r3, r2
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	4413      	add	r3, r2
 80049fc:	3b1e      	subs	r3, #30
 80049fe:	051b      	lsls	r3, r3, #20
 8004a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a04:	e01e      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x6ac>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	613b      	str	r3, [r7, #16]
  return result;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004a1e:	2320      	movs	r3, #32
 8004a20:	e006      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x698>
 8004a22:	bf00      	nop
 8004a24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	f003 021f 	and.w	r2, r3, #31
 8004a36:	4613      	mov	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3b1e      	subs	r3, #30
 8004a3e:	051b      	lsls	r3, r3, #20
 8004a40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	f7fe ff18 	bl	8003880 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b3f      	ldr	r3, [pc, #252]	@ (8004b54 <HAL_ADC_ConfigChannel+0x7bc>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d071      	beq.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a5c:	483e      	ldr	r0, [pc, #248]	@ (8004b58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a5e:	f7fe fe11 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 8004a62:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b5c <HAL_ADC_ConfigChannel+0x7c4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_ADC_ConfigChannel+0x6e2>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a3a      	ldr	r2, [pc, #232]	@ (8004b60 <HAL_ADC_ConfigChannel+0x7c8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d127      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a8e:	d157      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a98:	4619      	mov	r1, r3
 8004a9a:	482f      	ldr	r0, [pc, #188]	@ (8004b58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a9c:	f7fe fddf 	bl	800365e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aa0:	4b30      	ldr	r3, [pc, #192]	@ (8004b64 <HAL_ADC_ConfigChannel+0x7cc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	4a30      	ldr	r2, [pc, #192]	@ (8004b68 <HAL_ADC_ConfigChannel+0x7d0>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	099b      	lsrs	r3, r3, #6
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004aba:	e002      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f9      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ac8:	e03a      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a27      	ldr	r2, [pc, #156]	@ (8004b6c <HAL_ADC_ConfigChannel+0x7d4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d113      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10d      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	@ (8004b70 <HAL_ADC_ConfigChannel+0x7d8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d02a      	beq.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af2:	4619      	mov	r1, r3
 8004af4:	4818      	ldr	r0, [pc, #96]	@ (8004b58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004af6:	f7fe fdb2 	bl	800365e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004afa:	e021      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	@ (8004b74 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d11c      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d116      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a16      	ldr	r2, [pc, #88]	@ (8004b70 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d011      	beq.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b24:	4619      	mov	r1, r3
 8004b26:	480c      	ldr	r0, [pc, #48]	@ (8004b58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b28:	f7fe fd99 	bl	800365e <LL_ADC_SetCommonPathInternalCh>
 8004b2c:	e008      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b48:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	37d8      	adds	r7, #216	@ 0xd8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	80080000 	.word	0x80080000
 8004b58:	50000300 	.word	0x50000300
 8004b5c:	c3210000 	.word	0xc3210000
 8004b60:	90c00010 	.word	0x90c00010
 8004b64:	20000008 	.word	0x20000008
 8004b68:	053e2d63 	.word	0x053e2d63
 8004b6c:	c7520000 	.word	0xc7520000
 8004b70:	50000100 	.word	0x50000100
 8004b74:	cb840000 	.word	0xcb840000

08004b78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe ff47 	bl	8003a1c <LL_ADC_IsEnabled>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d169      	bne.n	8004c68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	4b36      	ldr	r3, [pc, #216]	@ (8004c74 <ADC_Enable+0xfc>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba6:	f043 0210 	orr.w	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb2:	f043 0201 	orr.w	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e055      	b.n	8004c6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe ff16 	bl	80039f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bc8:	482b      	ldr	r0, [pc, #172]	@ (8004c78 <ADC_Enable+0x100>)
 8004bca:	f7fe fd5b 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 8004bce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004bd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d013      	beq.n	8004c00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bd8:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <ADC_Enable+0x104>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <ADC_Enable+0x108>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	4613      	mov	r3, r2
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bf2:	e002      	b.n	8004bfa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f9      	bne.n	8004bf4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c00:	f7fe fcec 	bl	80035dc <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c06:	e028      	b.n	8004c5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe ff05 	bl	8003a1c <LL_ADC_IsEnabled>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fee9 	bl	80039f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c22:	f7fe fcdb 	bl	80035dc <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d914      	bls.n	8004c5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d00d      	beq.n	8004c5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c42:	f043 0210 	orr.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e007      	b.n	8004c6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d1cf      	bne.n	8004c08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	8000003f 	.word	0x8000003f
 8004c78:	50000300 	.word	0x50000300
 8004c7c:	20000008 	.word	0x20000008
 8004c80:	053e2d63 	.word	0x053e2d63

08004c84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c96:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d14b      	bne.n	8004d36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d021      	beq.n	8004cfc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fd8d 	bl	80037dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d032      	beq.n	8004d2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d12b      	bne.n	8004d2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d11f      	bne.n	8004d2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004cfa:	e018      	b.n	8004d2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d111      	bne.n	8004d2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d105      	bne.n	8004d2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f7fc fac2 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d34:	e00e      	b.n	8004d54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff fb1e 	bl	8004384 <HAL_ADC_ErrorCallback>
}
 8004d48:	e004      	b.n	8004d54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff faf6 	bl	800435c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff faf0 	bl	8004384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <LL_ADC_IsEnabled>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <LL_ADC_IsEnabled+0x18>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <LL_ADC_IsEnabled+0x1a>
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d101      	bne.n	8004dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b0a1      	sub	sp, #132	@ 0x84
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e08b      	b.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e82:	2300      	movs	r3, #0
 8004e84:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e86:	2300      	movs	r3, #0
 8004e88:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e92:	d102      	bne.n	8004e9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e94:	4b41      	ldr	r3, [pc, #260]	@ (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	e001      	b.n	8004e9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e06a      	b.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff ff87 	bl	8004dd2 <LL_ADC_REG_IsConversionOngoing>
 8004ec4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff81 	bl	8004dd2 <LL_ADC_REG_IsConversionOngoing>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d14c      	bne.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004ed6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d149      	bne.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004edc:	4b30      	ldr	r3, [pc, #192]	@ (8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004ede:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d028      	beq.n	8004f3a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004efa:	035b      	lsls	r3, r3, #13
 8004efc:	430b      	orrs	r3, r1
 8004efe:	431a      	orrs	r2, r3
 8004f00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f08:	f7ff ff50 	bl	8004dac <LL_ADC_IsEnabled>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	4823      	ldr	r0, [pc, #140]	@ (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f10:	f7ff ff4c 	bl	8004dac <LL_ADC_IsEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	4323      	orrs	r3, r4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d133      	bne.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f24:	f023 030f 	bic.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	6811      	ldr	r1, [r2, #0]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	6892      	ldr	r2, [r2, #8]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	431a      	orrs	r2, r3
 8004f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f36:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f38:	e024      	b.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f46:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f4a:	f7ff ff2f 	bl	8004dac <LL_ADC_IsEnabled>
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4812      	ldr	r0, [pc, #72]	@ (8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f52:	f7ff ff2b 	bl	8004dac <LL_ADC_IsEnabled>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4323      	orrs	r3, r4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d112      	bne.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f66:	f023 030f 	bic.w	r3, r3, #15
 8004f6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f6e:	e009      	b.n	8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f82:	e000      	b.n	8004f86 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3784      	adds	r7, #132	@ 0x84
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd90      	pop	{r4, r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	50000100 	.word	0x50000100
 8004fa0:	50000300 	.word	0x50000300

08004fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fd6:	4a04      	ldr	r2, [pc, #16]	@ (8004fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	60d3      	str	r3, [r2, #12]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ff0:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <__NVIC_GetPriorityGrouping+0x18>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	f003 0307 	and.w	r3, r3, #7
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	db0b      	blt.n	8005032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	f003 021f 	and.w	r2, r3, #31
 8005020:	4907      	ldr	r1, [pc, #28]	@ (8005040 <__NVIC_EnableIRQ+0x38>)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2001      	movs	r0, #1
 800502a:	fa00 f202 	lsl.w	r2, r0, r2
 800502e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	e000e100 	.word	0xe000e100

08005044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db0a      	blt.n	800506e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	490c      	ldr	r1, [pc, #48]	@ (8005090 <__NVIC_SetPriority+0x4c>)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	440b      	add	r3, r1
 8005068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800506c:	e00a      	b.n	8005084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4908      	ldr	r1, [pc, #32]	@ (8005094 <__NVIC_SetPriority+0x50>)
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	3b04      	subs	r3, #4
 800507c:	0112      	lsls	r2, r2, #4
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	440b      	add	r3, r1
 8005082:	761a      	strb	r2, [r3, #24]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000e100 	.word	0xe000e100
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	@ 0x24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f1c3 0307 	rsb	r3, r3, #7
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	bf28      	it	cs
 80050b6:	2304      	movcs	r3, #4
 80050b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3304      	adds	r3, #4
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d902      	bls.n	80050c8 <NVIC_EncodePriority+0x30>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3b03      	subs	r3, #3
 80050c6:	e000      	b.n	80050ca <NVIC_EncodePriority+0x32>
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	401a      	ands	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e0:	f04f 31ff 	mov.w	r1, #4294967295
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ea:	43d9      	mvns	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f0:	4313      	orrs	r3, r2
         );
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3724      	adds	r7, #36	@ 0x24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ff4c 	bl	8004fa4 <__NVIC_SetPriorityGrouping>
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005122:	f7ff ff63 	bl	8004fec <__NVIC_GetPriorityGrouping>
 8005126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	6978      	ldr	r0, [r7, #20]
 800512e:	f7ff ffb3 	bl	8005098 <NVIC_EncodePriority>
 8005132:	4602      	mov	r2, r0
 8005134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ff82 	bl	8005044 <__NVIC_SetPriority>
}
 8005140:	bf00      	nop
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff ff56 	bl	8005008 <__NVIC_EnableIRQ>
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e08d      	b.n	8005292 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	4b47      	ldr	r3, [pc, #284]	@ (800529c <HAL_DMA_Init+0x138>)
 800517e:	429a      	cmp	r2, r3
 8005180:	d80f      	bhi.n	80051a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	4b45      	ldr	r3, [pc, #276]	@ (80052a0 <HAL_DMA_Init+0x13c>)
 800518a:	4413      	add	r3, r2
 800518c:	4a45      	ldr	r2, [pc, #276]	@ (80052a4 <HAL_DMA_Init+0x140>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	009a      	lsls	r2, r3, #2
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a42      	ldr	r2, [pc, #264]	@ (80052a8 <HAL_DMA_Init+0x144>)
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40
 80051a0:	e00e      	b.n	80051c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	4b40      	ldr	r3, [pc, #256]	@ (80052ac <HAL_DMA_Init+0x148>)
 80051aa:	4413      	add	r3, r2
 80051ac:	4a3d      	ldr	r2, [pc, #244]	@ (80052a4 <HAL_DMA_Init+0x140>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	009a      	lsls	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a3c      	ldr	r2, [pc, #240]	@ (80052b0 <HAL_DMA_Init+0x14c>)
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa82 	bl	800571c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005220:	d102      	bne.n	8005228 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800523c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d010      	beq.n	8005268 <HAL_DMA_Init+0x104>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d80c      	bhi.n	8005268 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 faa2 	bl	8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	e008      	b.n	800527a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40020407 	.word	0x40020407
 80052a0:	bffdfff8 	.word	0xbffdfff8
 80052a4:	cccccccd 	.word	0xcccccccd
 80052a8:	40020000 	.word	0x40020000
 80052ac:	bffdfbf8 	.word	0xbffdfbf8
 80052b0:	40020400 	.word	0x40020400

080052b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_DMA_Start_IT+0x20>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e066      	b.n	80053a2 <HAL_DMA_Start_IT+0xee>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d155      	bne.n	8005394 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f9c7 	bl	80056a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 020e 	orr.w	r2, r2, #14
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e00f      	b.n	800534c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 020a 	orr.w	r2, r2, #10
 800534a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005364:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005368:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005380:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e005      	b.n	80053a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800539c:	2302      	movs	r3, #2
 800539e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d005      	beq.n	80053ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	e037      	b.n	800543e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 020e 	bic.w	r2, r2, #14
 80053dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	f003 021f 	and.w	r2, r3, #31
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	2101      	movs	r1, #1
 800540c:	fa01 f202 	lsl.w	r2, r1, r2
 8005410:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800541a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005432:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800543c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d00d      	beq.n	8005490 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2204      	movs	r2, #4
 8005478:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	73fb      	strb	r3, [r7, #15]
 800548e:	e047      	b.n	8005520 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 020e 	bic.w	r2, r2, #14
 800549e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0201 	bic.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c4:	f003 021f 	and.w	r2, r3, #31
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f202 	lsl.w	r2, r1, r2
 80054d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	4798      	blx	r3
    }
  }
  return status;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2204      	movs	r2, #4
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d026      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x7a>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d021      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d107      	bne.n	800557e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0204 	bic.w	r2, r2, #4
 800557c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	f003 021f 	and.w	r2, r3, #31
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	2104      	movs	r1, #4
 800558c:	fa01 f202 	lsl.w	r2, r1, r2
 8005590:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	2b00      	cmp	r3, #0
 8005598:	d071      	beq.n	800567e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055a2:	e06c      	b.n	800567e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2202      	movs	r2, #2
 80055ae:	409a      	lsls	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02e      	beq.n	8005616 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d029      	beq.n	8005616 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 020a 	bic.w	r2, r2, #10
 80055de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ec:	f003 021f 	and.w	r2, r3, #31
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	2102      	movs	r1, #2
 80055f6:	fa01 f202 	lsl.w	r2, r1, r2
 80055fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d038      	beq.n	800567e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005614:	e033      	b.n	800567e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2208      	movs	r2, #8
 8005620:	409a      	lsls	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02a      	beq.n	8005680 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d025      	beq.n	8005680 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 020e 	bic.w	r2, r2, #14
 8005642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005648:	f003 021f 	and.w	r2, r3, #31
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f202 	lsl.w	r2, r1, r2
 8005656:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800567e:	bf00      	nop
 8005680:	bf00      	nop
}
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f003 021f 	and.w	r2, r3, #31
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f202 	lsl.w	r2, r1, r2
 80056dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d108      	bne.n	8005700 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056fe:	e007      	b.n	8005710 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	60da      	str	r2, [r3, #12]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	4b16      	ldr	r3, [pc, #88]	@ (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800572c:	429a      	cmp	r2, r3
 800572e:	d802      	bhi.n	8005736 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005730:	4b15      	ldr	r3, [pc, #84]	@ (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e001      	b.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005736:	4b15      	ldr	r3, [pc, #84]	@ (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005738:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	3b08      	subs	r3, #8
 8005746:	4a12      	ldr	r2, [pc, #72]	@ (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	089b      	lsrs	r3, r3, #2
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4413      	add	r3, r2
 800575c:	461a      	mov	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a0b      	ldr	r2, [pc, #44]	@ (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005766:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	2201      	movs	r2, #1
 8005770:	409a      	lsls	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40020407 	.word	0x40020407
 8005788:	40020800 	.word	0x40020800
 800578c:	40020820 	.word	0x40020820
 8005790:	cccccccd 	.word	0xcccccccd
 8005794:	40020880 	.word	0x40020880

08005798 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	461a      	mov	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a08      	ldr	r2, [pc, #32]	@ (80057dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057ba:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3b01      	subs	r3, #1
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	2201      	movs	r2, #1
 80057c6:	409a      	lsls	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	1000823f 	.word	0x1000823f
 80057dc:	40020940 	.word	0x40020940

080057e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80057ee:	e15a      	b.n	8005aa6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	4013      	ands	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 814c 	beq.w	8005aa0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d005      	beq.n	8005820 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800581c:	2b02      	cmp	r3, #2
 800581e:	d130      	bne.n	8005882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2203      	movs	r2, #3
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4013      	ands	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005856:	2201      	movs	r2, #1
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4013      	ands	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	f003 0201 	and.w	r2, r3, #1
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b03      	cmp	r3, #3
 800588c:	d017      	beq.n	80058be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2203      	movs	r2, #3
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4013      	ands	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d123      	bne.n	8005912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	08da      	lsrs	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3208      	adds	r2, #8
 80058d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	220f      	movs	r2, #15
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4013      	ands	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	08da      	lsrs	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3208      	adds	r2, #8
 800590c:	6939      	ldr	r1, [r7, #16]
 800590e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	2203      	movs	r2, #3
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0203 	and.w	r2, r3, #3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80a6 	beq.w	8005aa0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005954:	4b5b      	ldr	r3, [pc, #364]	@ (8005ac4 <HAL_GPIO_Init+0x2e4>)
 8005956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005958:	4a5a      	ldr	r2, [pc, #360]	@ (8005ac4 <HAL_GPIO_Init+0x2e4>)
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005960:	4b58      	ldr	r3, [pc, #352]	@ (8005ac4 <HAL_GPIO_Init+0x2e4>)
 8005962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800596c:	4a56      	ldr	r2, [pc, #344]	@ (8005ac8 <HAL_GPIO_Init+0x2e8>)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	089b      	lsrs	r3, r3, #2
 8005972:	3302      	adds	r3, #2
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	220f      	movs	r2, #15
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005996:	d01f      	beq.n	80059d8 <HAL_GPIO_Init+0x1f8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a4c      	ldr	r2, [pc, #304]	@ (8005acc <HAL_GPIO_Init+0x2ec>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d019      	beq.n	80059d4 <HAL_GPIO_Init+0x1f4>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a4b      	ldr	r2, [pc, #300]	@ (8005ad0 <HAL_GPIO_Init+0x2f0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d013      	beq.n	80059d0 <HAL_GPIO_Init+0x1f0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a4a      	ldr	r2, [pc, #296]	@ (8005ad4 <HAL_GPIO_Init+0x2f4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00d      	beq.n	80059cc <HAL_GPIO_Init+0x1ec>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a49      	ldr	r2, [pc, #292]	@ (8005ad8 <HAL_GPIO_Init+0x2f8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d007      	beq.n	80059c8 <HAL_GPIO_Init+0x1e8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a48      	ldr	r2, [pc, #288]	@ (8005adc <HAL_GPIO_Init+0x2fc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d101      	bne.n	80059c4 <HAL_GPIO_Init+0x1e4>
 80059c0:	2305      	movs	r3, #5
 80059c2:	e00a      	b.n	80059da <HAL_GPIO_Init+0x1fa>
 80059c4:	2306      	movs	r3, #6
 80059c6:	e008      	b.n	80059da <HAL_GPIO_Init+0x1fa>
 80059c8:	2304      	movs	r3, #4
 80059ca:	e006      	b.n	80059da <HAL_GPIO_Init+0x1fa>
 80059cc:	2303      	movs	r3, #3
 80059ce:	e004      	b.n	80059da <HAL_GPIO_Init+0x1fa>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e002      	b.n	80059da <HAL_GPIO_Init+0x1fa>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_GPIO_Init+0x1fa>
 80059d8:	2300      	movs	r3, #0
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	f002 0203 	and.w	r2, r2, #3
 80059e0:	0092      	lsls	r2, r2, #2
 80059e2:	4093      	lsls	r3, r2
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ea:	4937      	ldr	r1, [pc, #220]	@ (8005ac8 <HAL_GPIO_Init+0x2e8>)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	3302      	adds	r3, #2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059f8:	4b39      	ldr	r3, [pc, #228]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4013      	ands	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a22:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a46:	4a26      	ldr	r2, [pc, #152]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005a4c:	4b24      	ldr	r3, [pc, #144]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a70:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005a76:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4013      	ands	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ae0 <HAL_GPIO_Init+0x300>)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f47f ae9d 	bne.w	80057f0 <HAL_GPIO_Init+0x10>
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	48000400 	.word	0x48000400
 8005ad0:	48000800 	.word	0x48000800
 8005ad4:	48000c00 	.word	0x48000c00
 8005ad8:	48001000 	.word	0x48001000
 8005adc:	48001400 	.word	0x48001400
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	807b      	strh	r3, [r7, #2]
 8005af0:	4613      	mov	r3, r2
 8005af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005af4:	787b      	ldrb	r3, [r7, #1]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b00:	e002      	b.n	8005b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b02:	887a      	ldrh	r2, [r7, #2]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b1e:	4b08      	ldr	r3, [pc, #32]	@ (8005b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b20:	695a      	ldr	r2, [r3, #20]
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d006      	beq.n	8005b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b2a:	4a05      	ldr	r2, [pc, #20]	@ (8005b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f806 	bl	8005b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40010400 	.word	0x40010400

08005b44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e08d      	b.n	8005c88 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fc f89f 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2224      	movs	r2, #36	@ 0x24
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005baa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d107      	bne.n	8005bd4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd0:	609a      	str	r2, [r3, #8]
 8005bd2:	e006      	b.n	8005be2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005be0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d108      	bne.n	8005bfc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	e007      	b.n	8005c0c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c1e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69d9      	ldr	r1, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1a      	ldr	r2, [r3, #32]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	817b      	strh	r3, [r7, #10]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	f040 80fd 	bne.w	8005eac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_I2C_Master_Transmit+0x30>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0f6      	b.n	8005eae <HAL_I2C_Master_Transmit+0x21e>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cc8:	f7fd fc88 	bl	80035dc <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	2319      	movs	r3, #25
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f914 	bl	8005f08 <I2C_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e0e1      	b.n	8005eae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2221      	movs	r2, #33	@ 0x21
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	893a      	ldrh	r2, [r7, #8]
 8005d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2bff      	cmp	r3, #255	@ 0xff
 8005d1a:	d906      	bls.n	8005d2a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	22ff      	movs	r2, #255	@ 0xff
 8005d20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e007      	b.n	8005d3a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005d34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d38:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d024      	beq.n	8005d8c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	781a      	ldrb	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	3301      	adds	r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	8979      	ldrh	r1, [r7, #10]
 8005d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8005eb8 <HAL_I2C_Master_Transmit+0x228>)
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fa83 	bl	8006290 <I2C_TransferConfig>
 8005d8a:	e066      	b.n	8005e5a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	8979      	ldrh	r1, [r7, #10]
 8005d94:	4b48      	ldr	r3, [pc, #288]	@ (8005eb8 <HAL_I2C_Master_Transmit+0x228>)
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fa78 	bl	8006290 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005da0:	e05b      	b.n	8005e5a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	6a39      	ldr	r1, [r7, #32]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f907 	bl	8005fba <I2C_WaitOnTXISFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e07b      	b.n	8005eae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d034      	beq.n	8005e5a <HAL_I2C_Master_Transmit+0x1ca>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d130      	bne.n	8005e5a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2180      	movs	r1, #128	@ 0x80
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f880 	bl	8005f08 <I2C_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e04d      	b.n	8005eae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2bff      	cmp	r3, #255	@ 0xff
 8005e1a:	d90e      	bls.n	8005e3a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	22ff      	movs	r2, #255	@ 0xff
 8005e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	8979      	ldrh	r1, [r7, #10]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fa2c 	bl	8006290 <I2C_TransferConfig>
 8005e38:	e00f      	b.n	8005e5a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	8979      	ldrh	r1, [r7, #10]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fa1b 	bl	8006290 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d19e      	bne.n	8005da2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	6a39      	ldr	r1, [r7, #32]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f8ed 	bl	8006048 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e01a      	b.n	8005eae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6859      	ldr	r1, [r3, #4]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <HAL_I2C_Master_Transmit+0x22c>)
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
  }
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	80002000 	.word	0x80002000
 8005ebc:	fe00e800 	.word	0xfe00e800

08005ec0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d103      	bne.n	8005ede <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2200      	movs	r2, #0
 8005edc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d007      	beq.n	8005efc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	619a      	str	r2, [r3, #24]
  }
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f18:	e03b      	b.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f8d6 	bl	80060d0 <I2C_IsErrorOccurred>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e041      	b.n	8005fb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d02d      	beq.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fd fb51 	bl	80035dc <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d122      	bne.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4013      	ands	r3, r2
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d113      	bne.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6e:	f043 0220 	orr.w	r2, r3, #32
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e00f      	b.n	8005fb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d0b4      	beq.n	8005f1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fc6:	e033      	b.n	8006030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f87f 	bl	80060d0 <I2C_IsErrorOccurred>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e031      	b.n	8006040 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d025      	beq.n	8006030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe4:	f7fd fafa 	bl	80035dc <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d302      	bcc.n	8005ffa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d11a      	bne.n	8006030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d013      	beq.n	8006030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600c:	f043 0220 	orr.w	r2, r3, #32
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e007      	b.n	8006040 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b02      	cmp	r3, #2
 800603c:	d1c4      	bne.n	8005fc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006054:	e02f      	b.n	80060b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f838 	bl	80060d0 <I2C_IsErrorOccurred>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e02d      	b.n	80060c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606a:	f7fd fab7 	bl	80035dc <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d11a      	bne.n	80060b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b20      	cmp	r3, #32
 800608c:	d013      	beq.n	80060b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e007      	b.n	80060c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d1c8      	bne.n	8006056 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	@ 0x28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d068      	beq.n	80061ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2210      	movs	r2, #16
 8006102:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006104:	e049      	b.n	800619a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d045      	beq.n	800619a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fd fa65 	bl	80035dc <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_IsErrorOccurred+0x54>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d13a      	bne.n	800619a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800612e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006136:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006146:	d121      	bne.n	800618c <I2C_IsErrorOccurred+0xbc>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800614e:	d01d      	beq.n	800618c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	2b20      	cmp	r3, #32
 8006154:	d01a      	beq.n	800618c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006164:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006166:	f7fd fa39 	bl	80035dc <HAL_GetTick>
 800616a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800616c:	e00e      	b.n	800618c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800616e:	f7fd fa35 	bl	80035dc <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b19      	cmp	r3, #25
 800617a:	d907      	bls.n	800618c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	f043 0320 	orr.w	r3, r3, #32
 8006182:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800618a:	e006      	b.n	800619a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b20      	cmp	r3, #32
 8006198:	d1e9      	bne.n	800616e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d003      	beq.n	80061b0 <I2C_IsErrorOccurred+0xe0>
 80061a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0aa      	beq.n	8006106 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80061b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2220      	movs	r2, #32
 80061be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	f043 0308 	orr.w	r3, r3, #8
 8006208:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	f043 0302 	orr.w	r3, r3, #2
 800622a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800623c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01c      	beq.n	800627e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fe3b 	bl	8005ec0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6859      	ldr	r1, [r3, #4]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b0d      	ldr	r3, [pc, #52]	@ (800628c <I2C_IsErrorOccurred+0x1bc>)
 8006256:	400b      	ands	r3, r1
 8006258:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800627e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006282:	4618      	mov	r0, r3
 8006284:	3728      	adds	r7, #40	@ 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	fe00e800 	.word	0xfe00e800

08006290 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	607b      	str	r3, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	817b      	strh	r3, [r7, #10]
 800629e:	4613      	mov	r3, r2
 80062a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062a2:	897b      	ldrh	r3, [r7, #10]
 80062a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062a8:	7a7b      	ldrb	r3, [r7, #9]
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	0d5b      	lsrs	r3, r3, #21
 80062ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80062ce:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <I2C_TransferConfig+0x60>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	43db      	mvns	r3, r3
 80062d4:	ea02 0103 	and.w	r1, r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	03ff63ff 	.word	0x03ff63ff

080062f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b20      	cmp	r3, #32
 8006308:	d138      	bne.n	800637c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006314:	2302      	movs	r3, #2
 8006316:	e032      	b.n	800637e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	@ 0x24
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006346:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6819      	ldr	r1, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e000      	b.n	800637e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800637c:	2302      	movs	r3, #2
  }
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b20      	cmp	r3, #32
 800639e:	d139      	bne.n	8006414 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e033      	b.n	8006416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2224      	movs	r2, #36	@ 0x24
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80063dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d141      	bne.n	80064b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006432:	4b4b      	ldr	r3, [pc, #300]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800643a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643e:	d131      	bne.n	80064a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006440:	4b47      	ldr	r3, [pc, #284]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006446:	4a46      	ldr	r2, [pc, #280]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800644c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006450:	4b43      	ldr	r3, [pc, #268]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006458:	4a41      	ldr	r2, [pc, #260]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800645a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800645e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006460:	4b40      	ldr	r3, [pc, #256]	@ (8006564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2232      	movs	r2, #50	@ 0x32
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	4a3f      	ldr	r2, [pc, #252]	@ (8006568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	0c9b      	lsrs	r3, r3, #18
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006476:	e002      	b.n	800647e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3b01      	subs	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800647e:	4b38      	ldr	r3, [pc, #224]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800648a:	d102      	bne.n	8006492 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f2      	bne.n	8006478 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006492:	4b33      	ldr	r3, [pc, #204]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800649a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800649e:	d158      	bne.n	8006552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e057      	b.n	8006554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80064b4:	e04d      	b.n	8006552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064bc:	d141      	bne.n	8006542 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064be:	4b28      	ldr	r3, [pc, #160]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ca:	d131      	bne.n	8006530 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064cc:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064d2:	4a23      	ldr	r2, [pc, #140]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064dc:	4b20      	ldr	r3, [pc, #128]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2232      	movs	r2, #50	@ 0x32
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
 80064fc:	0c9b      	lsrs	r3, r3, #18
 80064fe:	3301      	adds	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006502:	e002      	b.n	800650a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3b01      	subs	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800650a:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006516:	d102      	bne.n	800651e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f2      	bne.n	8006504 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800651e:	4b10      	ldr	r3, [pc, #64]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800652a:	d112      	bne.n	8006552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e011      	b.n	8006554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006530:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006536:	4a0a      	ldr	r2, [pc, #40]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800653c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006540:	e007      	b.n	8006552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006542:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800654a:	4a05      	ldr	r2, [pc, #20]	@ (8006560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800654c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006550:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40007000 	.word	0x40007000
 8006564:	20000008 	.word	0x20000008
 8006568:	431bde83 	.word	0x431bde83

0800656c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006570:	4b05      	ldr	r3, [pc, #20]	@ (8006588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	4a04      	ldr	r2, [pc, #16]	@ (8006588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800657a:	6093      	str	r3, [r2, #8]
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40007000 	.word	0x40007000

0800658c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e2fe      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d075      	beq.n	8006696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065aa:	4b97      	ldr	r3, [pc, #604]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065b4:	4b94      	ldr	r3, [pc, #592]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d102      	bne.n	80065ca <HAL_RCC_OscConfig+0x3e>
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d002      	beq.n	80065d0 <HAL_RCC_OscConfig+0x44>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d10b      	bne.n	80065e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05b      	beq.n	8006694 <HAL_RCC_OscConfig+0x108>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d157      	bne.n	8006694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e2d9      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f0:	d106      	bne.n	8006600 <HAL_RCC_OscConfig+0x74>
 80065f2:	4b85      	ldr	r3, [pc, #532]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a84      	ldr	r2, [pc, #528]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e01d      	b.n	800663c <HAL_RCC_OscConfig+0xb0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x98>
 800660a:	4b7f      	ldr	r3, [pc, #508]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a7e      	ldr	r2, [pc, #504]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b7c      	ldr	r3, [pc, #496]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a7b      	ldr	r2, [pc, #492]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e00b      	b.n	800663c <HAL_RCC_OscConfig+0xb0>
 8006624:	4b78      	ldr	r3, [pc, #480]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a77      	ldr	r2, [pc, #476]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 800662a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	4b75      	ldr	r3, [pc, #468]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a74      	ldr	r2, [pc, #464]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800663a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006644:	f7fc ffca 	bl	80035dc <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800664c:	f7fc ffc6 	bl	80035dc <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b64      	cmp	r3, #100	@ 0x64
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e29e      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800665e:	4b6a      	ldr	r3, [pc, #424]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0xc0>
 800666a:	e014      	b.n	8006696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fc ffb6 	bl	80035dc <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006674:	f7fc ffb2 	bl	80035dc <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	@ 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e28a      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006686:	4b60      	ldr	r3, [pc, #384]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0xe8>
 8006692:	e000      	b.n	8006696 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d075      	beq.n	800678e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066a2:	4b59      	ldr	r3, [pc, #356]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
 80066aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ac:	4b56      	ldr	r3, [pc, #344]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b0c      	cmp	r3, #12
 80066ba:	d102      	bne.n	80066c2 <HAL_RCC_OscConfig+0x136>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d002      	beq.n	80066c8 <HAL_RCC_OscConfig+0x13c>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d11f      	bne.n	8006708 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_RCC_OscConfig+0x154>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e25d      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e0:	4b49      	ldr	r3, [pc, #292]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	4946      	ldr	r1, [pc, #280]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80066f4:	4b45      	ldr	r3, [pc, #276]	@ (800680c <HAL_RCC_OscConfig+0x280>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fb ff25 	bl	8002548 <HAL_InitTick>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d043      	beq.n	800678c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e249      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d023      	beq.n	8006758 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006710:	4b3d      	ldr	r3, [pc, #244]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a3c      	ldr	r2, [pc, #240]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc ff5e 	bl	80035dc <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006724:	f7fc ff5a 	bl	80035dc <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e232      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006736:	4b34      	ldr	r3, [pc, #208]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006742:	4b31      	ldr	r3, [pc, #196]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	061b      	lsls	r3, r3, #24
 8006750:	492d      	ldr	r1, [pc, #180]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006752:	4313      	orrs	r3, r2
 8006754:	604b      	str	r3, [r1, #4]
 8006756:	e01a      	b.n	800678e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006758:	4b2b      	ldr	r3, [pc, #172]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a2a      	ldr	r2, [pc, #168]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 800675e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fc ff3a 	bl	80035dc <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676c:	f7fc ff36 	bl	80035dc <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e20e      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800677e:	4b22      	ldr	r3, [pc, #136]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x1e0>
 800678a:	e000      	b.n	800678e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800678c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d041      	beq.n	800681e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01c      	beq.n	80067dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a2:	4b19      	ldr	r3, [pc, #100]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80067a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a8:	4a17      	ldr	r2, [pc, #92]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b2:	f7fc ff13 	bl	80035dc <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ba:	f7fc ff0f 	bl	80035dc <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e1e7      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80067ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0ef      	beq.n	80067ba <HAL_RCC_OscConfig+0x22e>
 80067da:	e020      	b.n	800681e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80067de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067e2:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <HAL_RCC_OscConfig+0x27c>)
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fc fef6 	bl	80035dc <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067f2:	e00d      	b.n	8006810 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f4:	f7fc fef2 	bl	80035dc <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d906      	bls.n	8006810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e1ca      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
 800680c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006810:	4b8c      	ldr	r3, [pc, #560]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1ea      	bne.n	80067f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80a6 	beq.w	8006978 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800682c:	2300      	movs	r3, #0
 800682e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006830:	4b84      	ldr	r3, [pc, #528]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_RCC_OscConfig+0x2b4>
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_RCC_OscConfig+0x2b6>
 8006840:	2300      	movs	r3, #0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00d      	beq.n	8006862 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006846:	4b7f      	ldr	r3, [pc, #508]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 800684c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006850:	6593      	str	r3, [r2, #88]	@ 0x58
 8006852:	4b7c      	ldr	r3, [pc, #496]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800685e:	2301      	movs	r3, #1
 8006860:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006862:	4b79      	ldr	r3, [pc, #484]	@ (8006a48 <HAL_RCC_OscConfig+0x4bc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d118      	bne.n	80068a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800686e:	4b76      	ldr	r3, [pc, #472]	@ (8006a48 <HAL_RCC_OscConfig+0x4bc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a75      	ldr	r2, [pc, #468]	@ (8006a48 <HAL_RCC_OscConfig+0x4bc>)
 8006874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800687a:	f7fc feaf 	bl	80035dc <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006882:	f7fc feab 	bl	80035dc <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e183      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006894:	4b6c      	ldr	r3, [pc, #432]	@ (8006a48 <HAL_RCC_OscConfig+0x4bc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d108      	bne.n	80068ba <HAL_RCC_OscConfig+0x32e>
 80068a8:	4b66      	ldr	r3, [pc, #408]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ae:	4a65      	ldr	r2, [pc, #404]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068b8:	e024      	b.n	8006904 <HAL_RCC_OscConfig+0x378>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b05      	cmp	r3, #5
 80068c0:	d110      	bne.n	80068e4 <HAL_RCC_OscConfig+0x358>
 80068c2:	4b60      	ldr	r3, [pc, #384]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068ca:	f043 0304 	orr.w	r3, r3, #4
 80068ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068d2:	4b5c      	ldr	r3, [pc, #368]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d8:	4a5a      	ldr	r2, [pc, #360]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068e2:	e00f      	b.n	8006904 <HAL_RCC_OscConfig+0x378>
 80068e4:	4b57      	ldr	r3, [pc, #348]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ea:	4a56      	ldr	r2, [pc, #344]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068f4:	4b53      	ldr	r3, [pc, #332]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fa:	4a52      	ldr	r2, [pc, #328]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80068fc:	f023 0304 	bic.w	r3, r3, #4
 8006900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d016      	beq.n	800693a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690c:	f7fc fe66 	bl	80035dc <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006912:	e00a      	b.n	800692a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fc fe62 	bl	80035dc <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006922:	4293      	cmp	r3, r2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e138      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800692a:	4b46      	ldr	r3, [pc, #280]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0ed      	beq.n	8006914 <HAL_RCC_OscConfig+0x388>
 8006938:	e015      	b.n	8006966 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693a:	f7fc fe4f 	bl	80035dc <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006940:	e00a      	b.n	8006958 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006942:	f7fc fe4b 	bl	80035dc <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e121      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006958:	4b3a      	ldr	r3, [pc, #232]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ed      	bne.n	8006942 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006966:	7ffb      	ldrb	r3, [r7, #31]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d105      	bne.n	8006978 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800696c:	4b35      	ldr	r3, [pc, #212]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 800696e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006970:	4a34      	ldr	r2, [pc, #208]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006976:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d03c      	beq.n	80069fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01c      	beq.n	80069c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800698c:	4b2d      	ldr	r3, [pc, #180]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 800698e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006992:	4a2c      	ldr	r2, [pc, #176]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fc fe1e 	bl	80035dc <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069a4:	f7fc fe1a 	bl	80035dc <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0f2      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069b6:	4b23      	ldr	r3, [pc, #140]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80069b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0ef      	beq.n	80069a4 <HAL_RCC_OscConfig+0x418>
 80069c4:	e01b      	b.n	80069fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80069c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d6:	f7fc fe01 	bl	80035dc <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069de:	f7fc fdfd 	bl	80035dc <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e0d5      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069f0:	4b14      	ldr	r3, [pc, #80]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 80069f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1ef      	bne.n	80069de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80c9 	beq.w	8006b9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a08:	4b0e      	ldr	r3, [pc, #56]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 030c 	and.w	r3, r3, #12
 8006a10:	2b0c      	cmp	r3, #12
 8006a12:	f000 8083 	beq.w	8006b1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d15e      	bne.n	8006adc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1e:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a08      	ldr	r2, [pc, #32]	@ (8006a44 <HAL_RCC_OscConfig+0x4b8>)
 8006a24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2a:	f7fc fdd7 	bl	80035dc <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a30:	e00c      	b.n	8006a4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a32:	f7fc fdd3 	bl	80035dc <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d905      	bls.n	8006a4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e0ab      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a4c:	4b55      	ldr	r3, [pc, #340]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1ec      	bne.n	8006a32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a58:	4b52      	ldr	r3, [pc, #328]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	4b52      	ldr	r3, [pc, #328]	@ (8006ba8 <HAL_RCC_OscConfig+0x61c>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6a11      	ldr	r1, [r2, #32]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a68:	3a01      	subs	r2, #1
 8006a6a:	0112      	lsls	r2, r2, #4
 8006a6c:	4311      	orrs	r1, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006a72:	0212      	lsls	r2, r2, #8
 8006a74:	4311      	orrs	r1, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a7a:	0852      	lsrs	r2, r2, #1
 8006a7c:	3a01      	subs	r2, #1
 8006a7e:	0552      	lsls	r2, r2, #21
 8006a80:	4311      	orrs	r1, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a86:	0852      	lsrs	r2, r2, #1
 8006a88:	3a01      	subs	r2, #1
 8006a8a:	0652      	lsls	r2, r2, #25
 8006a8c:	4311      	orrs	r1, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a92:	06d2      	lsls	r2, r2, #27
 8006a94:	430a      	orrs	r2, r1
 8006a96:	4943      	ldr	r1, [pc, #268]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a9c:	4b41      	ldr	r3, [pc, #260]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a40      	ldr	r2, [pc, #256]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4a3d      	ldr	r2, [pc, #244]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc fd92 	bl	80035dc <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006abc:	f7fc fd8e 	bl	80035dc <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e066      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ace:	4b35      	ldr	r3, [pc, #212]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0x530>
 8006ada:	e05e      	b.n	8006b9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006adc:	4b31      	ldr	r3, [pc, #196]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a30      	ldr	r2, [pc, #192]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fc fd78 	bl	80035dc <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af0:	f7fc fd74 	bl	80035dc <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e04c      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b02:	4b28      	ldr	r3, [pc, #160]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006b0e:	4b25      	ldr	r3, [pc, #148]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	4924      	ldr	r1, [pc, #144]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006b14:	4b25      	ldr	r3, [pc, #148]	@ (8006bac <HAL_RCC_OscConfig+0x620>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	60cb      	str	r3, [r1, #12]
 8006b1a:	e03e      	b.n	8006b9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e039      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006b28:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba4 <HAL_RCC_OscConfig+0x618>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f003 0203 	and.w	r2, r3, #3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d12c      	bne.n	8006b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	3b01      	subs	r3, #1
 8006b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d123      	bne.n	8006b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d11b      	bne.n	8006b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d113      	bne.n	8006b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	085b      	lsrs	r3, r3, #1
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d109      	bne.n	8006b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d001      	beq.n	8006b9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40021000 	.word	0x40021000
 8006ba8:	019f800c 	.word	0x019f800c
 8006bac:	feeefffc 	.word	0xfeeefffc

08006bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e11e      	b.n	8006e06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc8:	4b91      	ldr	r3, [pc, #580]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d910      	bls.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 020f 	bic.w	r2, r3, #15
 8006bde:	498c      	ldr	r1, [pc, #560]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be6:	4b8a      	ldr	r3, [pc, #552]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e106      	b.n	8006e06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d073      	beq.n	8006cec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d129      	bne.n	8006c60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0c:	4b81      	ldr	r3, [pc, #516]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0f4      	b.n	8006e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006c1c:	f000 f9ce 	bl	8006fbc <RCC_GetSysClockFreqFromPLLSource>
 8006c20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4a7c      	ldr	r2, [pc, #496]	@ (8006e18 <HAL_RCC_ClockConfig+0x268>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d93f      	bls.n	8006caa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d033      	beq.n	8006caa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d12f      	bne.n	8006caa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c4a:	4b72      	ldr	r3, [pc, #456]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c52:	4a70      	ldr	r2, [pc, #448]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c5a:	2380      	movs	r3, #128	@ 0x80
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e024      	b.n	8006caa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d107      	bne.n	8006c78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c68:	4b6a      	ldr	r3, [pc, #424]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0c6      	b.n	8006e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c78:	4b66      	ldr	r3, [pc, #408]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0be      	b.n	8006e06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006c88:	f000 f8ce 	bl	8006e28 <HAL_RCC_GetSysClockFreq>
 8006c8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4a61      	ldr	r2, [pc, #388]	@ (8006e18 <HAL_RCC_ClockConfig+0x268>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d909      	bls.n	8006caa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c96:	4b5f      	ldr	r3, [pc, #380]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ca6:	2380      	movs	r3, #128	@ 0x80
 8006ca8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006caa:	4b5a      	ldr	r3, [pc, #360]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 0203 	bic.w	r2, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	4957      	ldr	r1, [pc, #348]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cbc:	f7fc fc8e 	bl	80035dc <HAL_GetTick>
 8006cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc2:	e00a      	b.n	8006cda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc4:	f7fc fc8a 	bl	80035dc <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e095      	b.n	8006e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cda:	4b4e      	ldr	r3, [pc, #312]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 020c 	and.w	r2, r3, #12
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d1eb      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d023      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d04:	4b43      	ldr	r3, [pc, #268]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	4a42      	ldr	r2, [pc, #264]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d24:	4a3b      	ldr	r2, [pc, #236]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d2c:	4b39      	ldr	r3, [pc, #228]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4936      	ldr	r1, [pc, #216]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	608b      	str	r3, [r1, #8]
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b80      	cmp	r3, #128	@ 0x80
 8006d44:	d105      	bne.n	8006d52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006d46:	4b33      	ldr	r3, [pc, #204]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	4a32      	ldr	r2, [pc, #200]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006d4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d52:	4b2f      	ldr	r3, [pc, #188]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d21d      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d60:	4b2b      	ldr	r3, [pc, #172]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f023 020f 	bic.w	r2, r3, #15
 8006d68:	4929      	ldr	r1, [pc, #164]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d70:	f7fc fc34 	bl	80035dc <HAL_GetTick>
 8006d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	e00a      	b.n	8006d8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d78:	f7fc fc30 	bl	80035dc <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e03b      	b.n	8006e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8e:	4b20      	ldr	r3, [pc, #128]	@ (8006e10 <HAL_RCC_ClockConfig+0x260>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d1ed      	bne.n	8006d78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4917      	ldr	r1, [pc, #92]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dc6:	4b13      	ldr	r3, [pc, #76]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	490f      	ldr	r1, [pc, #60]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006dda:	f000 f825 	bl	8006e28 <HAL_RCC_GetSysClockFreq>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <HAL_RCC_ClockConfig+0x264>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	490c      	ldr	r1, [pc, #48]	@ (8006e1c <HAL_RCC_ClockConfig+0x26c>)
 8006dec:	5ccb      	ldrb	r3, [r1, r3]
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	fa22 f303 	lsr.w	r3, r2, r3
 8006df6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e20 <HAL_RCC_ClockConfig+0x270>)
 8006df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006e24 <HAL_RCC_ClockConfig+0x274>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fb fba2 	bl	8002548 <HAL_InitTick>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40022000 	.word	0x40022000
 8006e14:	40021000 	.word	0x40021000
 8006e18:	04c4b400 	.word	0x04c4b400
 8006e1c:	080154c0 	.word	0x080154c0
 8006e20:	20000008 	.word	0x20000008
 8006e24:	2000000c 	.word	0x2000000c

08006e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d102      	bne.n	8006e40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	e047      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e40:	4b27      	ldr	r3, [pc, #156]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 030c 	and.w	r3, r3, #12
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d102      	bne.n	8006e52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e4c:	4b25      	ldr	r3, [pc, #148]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	e03e      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006e52:	4b23      	ldr	r3, [pc, #140]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 030c 	and.w	r3, r3, #12
 8006e5a:	2b0c      	cmp	r3, #12
 8006e5c:	d136      	bne.n	8006ecc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e5e:	4b20      	ldr	r3, [pc, #128]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e68:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	3301      	adds	r3, #1
 8006e74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d10c      	bne.n	8006e96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	4a16      	ldr	r2, [pc, #88]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e86:	68d2      	ldr	r2, [r2, #12]
 8006e88:	0a12      	lsrs	r2, r2, #8
 8006e8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	617b      	str	r3, [r7, #20]
      break;
 8006e94:	e00c      	b.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e96:	4a13      	ldr	r2, [pc, #76]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9e:	4a10      	ldr	r2, [pc, #64]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ea0:	68d2      	ldr	r2, [r2, #12]
 8006ea2:	0a12      	lsrs	r2, r2, #8
 8006ea4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	617b      	str	r3, [r7, #20]
      break;
 8006eae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	0e5b      	lsrs	r3, r3, #25
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	3301      	adds	r3, #1
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	e001      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ed0:	693b      	ldr	r3, [r7, #16]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	00f42400 	.word	0x00f42400

08006ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eec:	4b03      	ldr	r3, [pc, #12]	@ (8006efc <HAL_RCC_GetHCLKFreq+0x14>)
 8006eee:	681b      	ldr	r3, [r3, #0]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000008 	.word	0x20000008

08006f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f04:	f7ff fff0 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	0a1b      	lsrs	r3, r3, #8
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	4904      	ldr	r1, [pc, #16]	@ (8006f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f16:	5ccb      	ldrb	r3, [r1, r3]
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40021000 	.word	0x40021000
 8006f28:	080154d0 	.word	0x080154d0

08006f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f30:	f7ff ffda 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b06      	ldr	r3, [pc, #24]	@ (8006f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0adb      	lsrs	r3, r3, #11
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4904      	ldr	r1, [pc, #16]	@ (8006f54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40021000 	.word	0x40021000
 8006f54:	080154d0 	.word	0x080154d0

08006f58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	220f      	movs	r2, #15
 8006f66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006f68:	4b12      	ldr	r3, [pc, #72]	@ (8006fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0203 	and.w	r2, r3, #3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006f74:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006f80:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006f8c:	4b09      	ldr	r3, [pc, #36]	@ (8006fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	08db      	lsrs	r3, r3, #3
 8006f92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006f9a:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x60>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 020f 	and.w	r2, r3, #15
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	601a      	str	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40022000 	.word	0x40022000

08006fbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800703c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800703c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d10c      	bne.n	8006ffa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fe0:	4a17      	ldr	r2, [pc, #92]	@ (8007040 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	4a14      	ldr	r2, [pc, #80]	@ (800703c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fea:	68d2      	ldr	r2, [r2, #12]
 8006fec:	0a12      	lsrs	r2, r2, #8
 8006fee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	617b      	str	r3, [r7, #20]
    break;
 8006ff8:	e00c      	b.n	8007014 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ffa:	4a11      	ldr	r2, [pc, #68]	@ (8007040 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007002:	4a0e      	ldr	r2, [pc, #56]	@ (800703c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007004:	68d2      	ldr	r2, [r2, #12]
 8007006:	0a12      	lsrs	r2, r2, #8
 8007008:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800700c:	fb02 f303 	mul.w	r3, r2, r3
 8007010:	617b      	str	r3, [r7, #20]
    break;
 8007012:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007014:	4b09      	ldr	r3, [pc, #36]	@ (800703c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	0e5b      	lsrs	r3, r3, #25
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	3301      	adds	r3, #1
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800702e:	687b      	ldr	r3, [r7, #4]
}
 8007030:	4618      	mov	r0, r3
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	40021000 	.word	0x40021000
 8007040:	00f42400 	.word	0x00f42400

08007044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800704c:	2300      	movs	r3, #0
 800704e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007050:	2300      	movs	r3, #0
 8007052:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8098 	beq.w	8007192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007062:	2300      	movs	r3, #0
 8007064:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007066:	4b43      	ldr	r3, [pc, #268]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800706a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10d      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007072:	4b40      	ldr	r3, [pc, #256]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	4a3f      	ldr	r2, [pc, #252]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800707c:	6593      	str	r3, [r2, #88]	@ 0x58
 800707e:	4b3d      	ldr	r3, [pc, #244]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800708a:	2301      	movs	r3, #1
 800708c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800708e:	4b3a      	ldr	r3, [pc, #232]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a39      	ldr	r2, [pc, #228]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007098:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800709a:	f7fc fa9f 	bl	80035dc <HAL_GetTick>
 800709e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070a0:	e009      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070a2:	f7fc fa9b 	bl	80035dc <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d902      	bls.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	74fb      	strb	r3, [r7, #19]
        break;
 80070b4:	e005      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070b6:	4b30      	ldr	r3, [pc, #192]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0ef      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80070c2:	7cfb      	ldrb	r3, [r7, #19]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d159      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01e      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d019      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070e4:	4b23      	ldr	r3, [pc, #140]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070f0:	4b20      	ldr	r3, [pc, #128]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007100:	4b1c      	ldr	r3, [pc, #112]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007106:	4a1b      	ldr	r2, [pc, #108]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800710c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007110:	4a18      	ldr	r2, [pc, #96]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007122:	f7fc fa5b 	bl	80035dc <HAL_GetTick>
 8007126:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007128:	e00b      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800712a:	f7fc fa57 	bl	80035dc <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007138:	4293      	cmp	r3, r2
 800713a:	d902      	bls.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	74fb      	strb	r3, [r7, #19]
            break;
 8007140:	e006      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007142:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0ec      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007150:	7cfb      	ldrb	r3, [r7, #19]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007156:	4b07      	ldr	r3, [pc, #28]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007164:	4903      	ldr	r1, [pc, #12]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800716c:	e008      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800716e:	7cfb      	ldrb	r3, [r7, #19]
 8007170:	74bb      	strb	r3, [r7, #18]
 8007172:	e005      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007174:	40021000 	.word	0x40021000
 8007178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717c:	7cfb      	ldrb	r3, [r7, #19]
 800717e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007180:	7c7b      	ldrb	r3, [r7, #17]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d105      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007186:	4ba6      	ldr	r3, [pc, #664]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718a:	4aa5      	ldr	r2, [pc, #660]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800718c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007190:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800719e:	4ba0      	ldr	r3, [pc, #640]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a4:	f023 0203 	bic.w	r2, r3, #3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	499c      	ldr	r1, [pc, #624]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071c0:	4b97      	ldr	r3, [pc, #604]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c6:	f023 020c 	bic.w	r2, r3, #12
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	4994      	ldr	r1, [pc, #592]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071e2:	4b8f      	ldr	r3, [pc, #572]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	498b      	ldr	r1, [pc, #556]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007204:	4b86      	ldr	r3, [pc, #536]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	4983      	ldr	r1, [pc, #524]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007226:	4b7e      	ldr	r3, [pc, #504]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800722c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	497a      	ldr	r1, [pc, #488]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007248:	4b75      	ldr	r3, [pc, #468]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800724a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	4972      	ldr	r1, [pc, #456]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007258:	4313      	orrs	r3, r2
 800725a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800726a:	4b6d      	ldr	r3, [pc, #436]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007270:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	4969      	ldr	r1, [pc, #420]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800728c:	4b64      	ldr	r3, [pc, #400]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007292:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	4961      	ldr	r1, [pc, #388]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	4958      	ldr	r1, [pc, #352]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072d0:	4b53      	ldr	r3, [pc, #332]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072de:	4950      	ldr	r1, [pc, #320]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072ee:	d105      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072f0:	4b4b      	ldr	r3, [pc, #300]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a4a      	ldr	r2, [pc, #296]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072fa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007304:	2b00      	cmp	r3, #0
 8007306:	d015      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007308:	4b45      	ldr	r3, [pc, #276]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800730a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	4942      	ldr	r1, [pc, #264]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007318:	4313      	orrs	r3, r2
 800731a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007326:	d105      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007328:	4b3d      	ldr	r3, [pc, #244]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4a3c      	ldr	r2, [pc, #240]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800732e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007332:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007340:	4b37      	ldr	r3, [pc, #220]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007346:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734e:	4934      	ldr	r1, [pc, #208]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800735e:	d105      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007360:	4b2f      	ldr	r3, [pc, #188]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	4a2e      	ldr	r2, [pc, #184]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800736a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d015      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007378:	4b29      	ldr	r3, [pc, #164]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007386:	4926      	ldr	r1, [pc, #152]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007388:	4313      	orrs	r3, r2
 800738a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007392:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007396:	d105      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007398:	4b21      	ldr	r3, [pc, #132]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	4a20      	ldr	r2, [pc, #128]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800739e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d015      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073be:	4918      	ldr	r1, [pc, #96]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073ce:	d105      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073d0:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	4a12      	ldr	r2, [pc, #72]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d015      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80073e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f6:	490a      	ldr	r1, [pc, #40]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007402:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007406:	d105      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007408:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4a04      	ldr	r2, [pc, #16]	@ (8007420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800740e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007412:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007414:	7cbb      	ldrb	r3, [r7, #18]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40021000 	.word	0x40021000

08007424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e09d      	b.n	8007572 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d108      	bne.n	8007450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007446:	d009      	beq.n	800745c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	61da      	str	r2, [r3, #28]
 800744e:	e005      	b.n	800745c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fa fffa 	bl	8002470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007492:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800749c:	d902      	bls.n	80074a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e002      	b.n	80074aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80074b2:	d007      	beq.n	80074c4 <HAL_SPI_Init+0xa0>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074bc:	d002      	beq.n	80074c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007506:	ea42 0103 	orr.w	r1, r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	0c1b      	lsrs	r3, r3, #16
 8007520:	f003 0204 	and.w	r2, r3, #4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007540:	ea42 0103 	orr.w	r1, r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e049      	b.n	8007620 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d106      	bne.n	80075a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7fb fd45 	bl	8003030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f001 f873 	bl	80086a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	d001      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e04a      	b.n	80076d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a21      	ldr	r2, [pc, #132]	@ (80076e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d018      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766a:	d013      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1d      	ldr	r2, [pc, #116]	@ (80076e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00e      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1c      	ldr	r2, [pc, #112]	@ (80076ec <HAL_TIM_Base_Start_IT+0xc4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1a      	ldr	r2, [pc, #104]	@ (80076f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a19      	ldr	r2, [pc, #100]	@ (80076f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d115      	bne.n	80076c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	4b17      	ldr	r3, [pc, #92]	@ (80076f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800769c:	4013      	ands	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d015      	beq.n	80076d2 <HAL_TIM_Base_Start_IT+0xaa>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ac:	d011      	beq.n	80076d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0201 	orr.w	r2, r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076be:	e008      	b.n	80076d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e000      	b.n	80076d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	00010007 	.word	0x00010007

080076fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e049      	b.n	80077a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f841 	bl	80077aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f000 ffb2 	bl	80086a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e03c      	b.n	8007866 <HAL_TIM_PWM_Start_DMA+0xa6>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d109      	bne.n	8007806 <HAL_TIM_PWM_Start_DMA+0x46>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	bf0c      	ite	eq
 80077fe:	2301      	moveq	r3, #1
 8007800:	2300      	movne	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	e02f      	b.n	8007866 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d109      	bne.n	8007820 <HAL_TIM_PWM_Start_DMA+0x60>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	bf0c      	ite	eq
 8007818:	2301      	moveq	r3, #1
 800781a:	2300      	movne	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	e022      	b.n	8007866 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b0c      	cmp	r3, #12
 8007824:	d109      	bne.n	800783a <HAL_TIM_PWM_Start_DMA+0x7a>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	bf0c      	ite	eq
 8007832:	2301      	moveq	r3, #1
 8007834:	2300      	movne	r3, #0
 8007836:	b2db      	uxtb	r3, r3
 8007838:	e015      	b.n	8007866 <HAL_TIM_PWM_Start_DMA+0xa6>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b10      	cmp	r3, #16
 800783e:	d109      	bne.n	8007854 <HAL_TIM_PWM_Start_DMA+0x94>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	e008      	b.n	8007866 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800786a:	2302      	movs	r3, #2
 800786c:	e1a6      	b.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	e03c      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0x142>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d109      	bne.n	80078a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b01      	cmp	r3, #1
 8007898:	bf0c      	ite	eq
 800789a:	2301      	moveq	r3, #1
 800789c:	2300      	movne	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	e02f      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0x142>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d109      	bne.n	80078bc <HAL_TIM_PWM_Start_DMA+0xfc>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	bf0c      	ite	eq
 80078b4:	2301      	moveq	r3, #1
 80078b6:	2300      	movne	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	e022      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0x142>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b0c      	cmp	r3, #12
 80078c0:	d109      	bne.n	80078d6 <HAL_TIM_PWM_Start_DMA+0x116>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	bf0c      	ite	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	2300      	movne	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	e015      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0x142>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d109      	bne.n	80078f0 <HAL_TIM_PWM_Start_DMA+0x130>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	bf0c      	ite	eq
 80078e8:	2301      	moveq	r3, #1
 80078ea:	2300      	movne	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	e008      	b.n	8007902 <HAL_TIM_PWM_Start_DMA+0x142>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	bf0c      	ite	eq
 80078fc:	2301      	moveq	r3, #1
 80078fe:	2300      	movne	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d034      	beq.n	8007970 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_TIM_PWM_Start_DMA+0x152>
 800790c:	887b      	ldrh	r3, [r7, #2]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e152      	b.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <HAL_TIM_PWM_Start_DMA+0x166>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007924:	e026      	b.n	8007974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b04      	cmp	r3, #4
 800792a:	d104      	bne.n	8007936 <HAL_TIM_PWM_Start_DMA+0x176>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007934:	e01e      	b.n	8007974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d104      	bne.n	8007946 <HAL_TIM_PWM_Start_DMA+0x186>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007944:	e016      	b.n	8007974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b0c      	cmp	r3, #12
 800794a:	d104      	bne.n	8007956 <HAL_TIM_PWM_Start_DMA+0x196>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007954:	e00e      	b.n	8007974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b10      	cmp	r3, #16
 800795a:	d104      	bne.n	8007966 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007964:	e006      	b.n	8007974 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800796e:	e001      	b.n	8007974 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e123      	b.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b0c      	cmp	r3, #12
 8007978:	f200 80ae 	bhi.w	8007ad8 <HAL_TIM_PWM_Start_DMA+0x318>
 800797c:	a201      	add	r2, pc, #4	@ (adr r2, 8007984 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	080079b9 	.word	0x080079b9
 8007988:	08007ad9 	.word	0x08007ad9
 800798c:	08007ad9 	.word	0x08007ad9
 8007990:	08007ad9 	.word	0x08007ad9
 8007994:	08007a01 	.word	0x08007a01
 8007998:	08007ad9 	.word	0x08007ad9
 800799c:	08007ad9 	.word	0x08007ad9
 80079a0:	08007ad9 	.word	0x08007ad9
 80079a4:	08007a49 	.word	0x08007a49
 80079a8:	08007ad9 	.word	0x08007ad9
 80079ac:	08007ad9 	.word	0x08007ad9
 80079b0:	08007ad9 	.word	0x08007ad9
 80079b4:	08007a91 	.word	0x08007a91
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079bc:	4a81      	ldr	r2, [pc, #516]	@ (8007bc4 <HAL_TIM_PWM_Start_DMA+0x404>)
 80079be:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c4:	4a80      	ldr	r2, [pc, #512]	@ (8007bc8 <HAL_TIM_PWM_Start_DMA+0x408>)
 80079c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079cc:	4a7f      	ldr	r2, [pc, #508]	@ (8007bcc <HAL_TIM_PWM_Start_DMA+0x40c>)
 80079ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3334      	adds	r3, #52	@ 0x34
 80079dc:	461a      	mov	r2, r3
 80079de:	887b      	ldrh	r3, [r7, #2]
 80079e0:	f7fd fc68 	bl	80052b4 <HAL_DMA_Start_IT>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e0e6      	b.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079fc:	60da      	str	r2, [r3, #12]
      break;
 80079fe:	e06e      	b.n	8007ade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a04:	4a6f      	ldr	r2, [pc, #444]	@ (8007bc4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007a06:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8007bc8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007a0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a14:	4a6d      	ldr	r2, [pc, #436]	@ (8007bcc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007a16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3338      	adds	r3, #56	@ 0x38
 8007a24:	461a      	mov	r2, r3
 8007a26:	887b      	ldrh	r3, [r7, #2]
 8007a28:	f7fd fc44 	bl	80052b4 <HAL_DMA_Start_IT>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e0c2      	b.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a44:	60da      	str	r2, [r3, #12]
      break;
 8007a46:	e04a      	b.n	8007ade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8007bc4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	4a5c      	ldr	r2, [pc, #368]	@ (8007bc8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007a56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	4a5b      	ldr	r2, [pc, #364]	@ (8007bcc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007a5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	333c      	adds	r3, #60	@ 0x3c
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	887b      	ldrh	r3, [r7, #2]
 8007a70:	f7fd fc20 	bl	80052b4 <HAL_DMA_Start_IT>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e09e      	b.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a8c:	60da      	str	r2, [r3, #12]
      break;
 8007a8e:	e026      	b.n	8007ade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a94:	4a4b      	ldr	r2, [pc, #300]	@ (8007bc4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007a96:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8007bc8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007a9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa4:	4a49      	ldr	r2, [pc, #292]	@ (8007bcc <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007aa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3340      	adds	r3, #64	@ 0x40
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	887b      	ldrh	r3, [r7, #2]
 8007ab8:	f7fd fbfc 	bl	80052b4 <HAL_DMA_Start_IT>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e07a      	b.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ad4:	60da      	str	r2, [r3, #12]
      break;
 8007ad6:	e002      	b.n	8007ade <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
      break;
 8007adc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d16a      	bne.n	8007bba <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 fa07 	bl	8008f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a36      	ldr	r2, [pc, #216]	@ (8007bd0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <HAL_TIM_PWM_Start_DMA+0x364>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a34      	ldr	r2, [pc, #208]	@ (8007bd4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00e      	beq.n	8007b24 <HAL_TIM_PWM_Start_DMA+0x364>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a33      	ldr	r2, [pc, #204]	@ (8007bd8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d009      	beq.n	8007b24 <HAL_TIM_PWM_Start_DMA+0x364>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a31      	ldr	r2, [pc, #196]	@ (8007bdc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_TIM_PWM_Start_DMA+0x364>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a30      	ldr	r2, [pc, #192]	@ (8007be0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d101      	bne.n	8007b28 <HAL_TIM_PWM_Start_DMA+0x368>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <HAL_TIM_PWM_Start_DMA+0x36a>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a23      	ldr	r2, [pc, #140]	@ (8007bd0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d018      	beq.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b50:	d013      	beq.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a23      	ldr	r2, [pc, #140]	@ (8007be4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00e      	beq.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a21      	ldr	r2, [pc, #132]	@ (8007be8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007bd4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d004      	beq.n	8007b7a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a18      	ldr	r2, [pc, #96]	@ (8007bd8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d115      	bne.n	8007ba6 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	4b1a      	ldr	r3, [pc, #104]	@ (8007bec <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	d015      	beq.n	8007bb8 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b92:	d011      	beq.n	8007bb8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba4:	e008      	b.n	8007bb8 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	e000      	b.n	8007bba <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	08008593 	.word	0x08008593
 8007bc8:	0800863b 	.word	0x0800863b
 8007bcc:	08008501 	.word	0x08008501
 8007bd0:	40012c00 	.word	0x40012c00
 8007bd4:	40013400 	.word	0x40013400
 8007bd8:	40014000 	.word	0x40014000
 8007bdc:	40014400 	.word	0x40014400
 8007be0:	40014800 	.word	0x40014800
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	00010007 	.word	0x00010007

08007bf0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	d855      	bhi.n	8007cb0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007c04:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0a:	bf00      	nop
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007cb1 	.word	0x08007cb1
 8007c14:	08007cb1 	.word	0x08007cb1
 8007c18:	08007cb1 	.word	0x08007cb1
 8007c1c:	08007c5d 	.word	0x08007c5d
 8007c20:	08007cb1 	.word	0x08007cb1
 8007c24:	08007cb1 	.word	0x08007cb1
 8007c28:	08007cb1 	.word	0x08007cb1
 8007c2c:	08007c79 	.word	0x08007c79
 8007c30:	08007cb1 	.word	0x08007cb1
 8007c34:	08007cb1 	.word	0x08007cb1
 8007c38:	08007cb1 	.word	0x08007cb1
 8007c3c:	08007c95 	.word	0x08007c95
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007c4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fd fc01 	bl	800545c <HAL_DMA_Abort_IT>
      break;
 8007c5a:	e02c      	b.n	8007cb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fbf3 	bl	800545c <HAL_DMA_Abort_IT>
      break;
 8007c76:	e01e      	b.n	8007cb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fd fbe5 	bl	800545c <HAL_DMA_Abort_IT>
      break;
 8007c92:	e010      	b.n	8007cb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ca2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fd fbd7 	bl	800545c <HAL_DMA_Abort_IT>
      break;
 8007cae:	e002      	b.n	8007cb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f040 8081 	bne.w	8007dc0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 f91a 	bl	8008f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a3e      	ldr	r2, [pc, #248]	@ (8007dcc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3d      	ldr	r2, [pc, #244]	@ (8007dd0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00e      	beq.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8007dd4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a3a      	ldr	r2, [pc, #232]	@ (8007dd8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a38      	ldr	r2, [pc, #224]	@ (8007ddc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d101      	bne.n	8007d02 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007d02:	2300      	movs	r3, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d017      	beq.n	8007d38 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6a1a      	ldr	r2, [r3, #32]
 8007d0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10f      	bne.n	8007d38 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6a1a      	ldr	r2, [r3, #32]
 8007d1e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007d22:	4013      	ands	r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d107      	bne.n	8007d38 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6a1a      	ldr	r2, [r3, #32]
 8007d3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d42:	4013      	ands	r3, r2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10f      	bne.n	8007d68 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6a1a      	ldr	r2, [r3, #32]
 8007d4e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d107      	bne.n	8007d68 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0201 	bic.w	r2, r2, #1
 8007d66:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d104      	bne.n	8007d78 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d76:	e023      	b.n	8007dc0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d104      	bne.n	8007d88 <HAL_TIM_PWM_Stop_DMA+0x198>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d86:	e01b      	b.n	8007dc0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	d104      	bne.n	8007d98 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d96:	e013      	b.n	8007dc0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b0c      	cmp	r3, #12
 8007d9c:	d104      	bne.n	8007da8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007da6:	e00b      	b.n	8007dc0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d104      	bne.n	8007db8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007db6:	e003      	b.n	8007dc0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	40013400 	.word	0x40013400
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40014400 	.word	0x40014400
 8007ddc:	40014800 	.word	0x40014800

08007de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d020      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01b      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0202 	mvn.w	r2, #2
 8007e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb40 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 8007e30:	e005      	b.n	8007e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fb32 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7fa f93d 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d020      	beq.n	8007e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01b      	beq.n	8007e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0204 	mvn.w	r2, #4
 8007e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2202      	movs	r2, #2
 8007e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fb1a 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fb0c 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7fa f917 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d020      	beq.n	8007edc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01b      	beq.n	8007edc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0208 	mvn.w	r2, #8
 8007eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 faf4 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 8007ec8:	e005      	b.n	8007ed6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fae6 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fa f8f1 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d020      	beq.n	8007f28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01b      	beq.n	8007f28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0210 	mvn.w	r2, #16
 8007ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2208      	movs	r2, #8
 8007efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 face 	bl	80084b0 <HAL_TIM_IC_CaptureCallback>
 8007f14:	e005      	b.n	8007f22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fac0 	bl	800849c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7fa f8cb 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00c      	beq.n	8007f4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d007      	beq.n	8007f4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f06f 0201 	mvn.w	r2, #1
 8007f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fa f9c0 	bl	80022cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d104      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00c      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 f875 	bl	8009064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00c      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f86d 	bl	8009078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00c      	beq.n	8007fc2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fa8b 	bl	80084d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00c      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f06f 0220 	mvn.w	r2, #32
 8007fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 f835 	bl	8009050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00c      	beq.n	800800a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 f841 	bl	800908c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00c      	beq.n	800802e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d007      	beq.n	800802e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f839 	bl	80090a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00c      	beq.n	8008052 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800804a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 f831 	bl	80090b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00c      	beq.n	8008076 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d007      	beq.n	8008076 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800806e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f829 	bl	80090c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800809a:	2302      	movs	r3, #2
 800809c:	e0ff      	b.n	800829e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b14      	cmp	r3, #20
 80080aa:	f200 80f0 	bhi.w	800828e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080ae:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	08008109 	.word	0x08008109
 80080b8:	0800828f 	.word	0x0800828f
 80080bc:	0800828f 	.word	0x0800828f
 80080c0:	0800828f 	.word	0x0800828f
 80080c4:	08008149 	.word	0x08008149
 80080c8:	0800828f 	.word	0x0800828f
 80080cc:	0800828f 	.word	0x0800828f
 80080d0:	0800828f 	.word	0x0800828f
 80080d4:	0800818b 	.word	0x0800818b
 80080d8:	0800828f 	.word	0x0800828f
 80080dc:	0800828f 	.word	0x0800828f
 80080e0:	0800828f 	.word	0x0800828f
 80080e4:	080081cb 	.word	0x080081cb
 80080e8:	0800828f 	.word	0x0800828f
 80080ec:	0800828f 	.word	0x0800828f
 80080f0:	0800828f 	.word	0x0800828f
 80080f4:	0800820d 	.word	0x0800820d
 80080f8:	0800828f 	.word	0x0800828f
 80080fc:	0800828f 	.word	0x0800828f
 8008100:	0800828f 	.word	0x0800828f
 8008104:	0800824d 	.word	0x0800824d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68b9      	ldr	r1, [r7, #8]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fb64 	bl	80087dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699a      	ldr	r2, [r3, #24]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0208 	orr.w	r2, r2, #8
 8008122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0204 	bic.w	r2, r2, #4
 8008132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6999      	ldr	r1, [r3, #24]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	619a      	str	r2, [r3, #24]
      break;
 8008146:	e0a5      	b.n	8008294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fbd4 	bl	80088fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699a      	ldr	r2, [r3, #24]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6999      	ldr	r1, [r3, #24]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	619a      	str	r2, [r3, #24]
      break;
 8008188:	e084      	b.n	8008294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fc3d 	bl	8008a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69da      	ldr	r2, [r3, #28]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f042 0208 	orr.w	r2, r2, #8
 80081a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69da      	ldr	r2, [r3, #28]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0204 	bic.w	r2, r2, #4
 80081b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69d9      	ldr	r1, [r3, #28]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	61da      	str	r2, [r3, #28]
      break;
 80081c8:	e064      	b.n	8008294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fca5 	bl	8008b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69d9      	ldr	r1, [r3, #28]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	021a      	lsls	r2, r3, #8
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	61da      	str	r2, [r3, #28]
      break;
 800820a:	e043      	b.n	8008294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fd0e 	bl	8008c34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0208 	orr.w	r2, r2, #8
 8008226:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0204 	bic.w	r2, r2, #4
 8008236:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691a      	ldr	r2, [r3, #16]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800824a:	e023      	b.n	8008294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fd52 	bl	8008cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008266:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008276:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	021a      	lsls	r2, r3, #8
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800828c:	e002      	b.n	8008294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	75fb      	strb	r3, [r7, #23]
      break;
 8008292:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop

080082a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIM_ConfigClockSource+0x1c>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e0de      	b.n	8008482 <HAL_TIM_ConfigClockSource+0x1da>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80082e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80082e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a63      	ldr	r2, [pc, #396]	@ (800848c <HAL_TIM_ConfigClockSource+0x1e4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	f000 80a9 	beq.w	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 8008304:	4a61      	ldr	r2, [pc, #388]	@ (800848c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008306:	4293      	cmp	r3, r2
 8008308:	f200 80ae 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 800830c:	4a60      	ldr	r2, [pc, #384]	@ (8008490 <HAL_TIM_ConfigClockSource+0x1e8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	f000 80a1 	beq.w	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 8008314:	4a5e      	ldr	r2, [pc, #376]	@ (8008490 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	f200 80a6 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 800831c:	4a5d      	ldr	r2, [pc, #372]	@ (8008494 <HAL_TIM_ConfigClockSource+0x1ec>)
 800831e:	4293      	cmp	r3, r2
 8008320:	f000 8099 	beq.w	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 8008324:	4a5b      	ldr	r2, [pc, #364]	@ (8008494 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008326:	4293      	cmp	r3, r2
 8008328:	f200 809e 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 800832c:	4a5a      	ldr	r2, [pc, #360]	@ (8008498 <HAL_TIM_ConfigClockSource+0x1f0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	f000 8091 	beq.w	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 8008334:	4a58      	ldr	r2, [pc, #352]	@ (8008498 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008336:	4293      	cmp	r3, r2
 8008338:	f200 8096 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 800833c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008340:	f000 8089 	beq.w	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 8008344:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008348:	f200 808e 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 800834c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008350:	d03e      	beq.n	80083d0 <HAL_TIM_ConfigClockSource+0x128>
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008356:	f200 8087 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800835e:	f000 8086 	beq.w	800846e <HAL_TIM_ConfigClockSource+0x1c6>
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008366:	d87f      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 8008368:	2b70      	cmp	r3, #112	@ 0x70
 800836a:	d01a      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0xfa>
 800836c:	2b70      	cmp	r3, #112	@ 0x70
 800836e:	d87b      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 8008370:	2b60      	cmp	r3, #96	@ 0x60
 8008372:	d050      	beq.n	8008416 <HAL_TIM_ConfigClockSource+0x16e>
 8008374:	2b60      	cmp	r3, #96	@ 0x60
 8008376:	d877      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 8008378:	2b50      	cmp	r3, #80	@ 0x50
 800837a:	d03c      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x14e>
 800837c:	2b50      	cmp	r3, #80	@ 0x50
 800837e:	d873      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 8008380:	2b40      	cmp	r3, #64	@ 0x40
 8008382:	d058      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x18e>
 8008384:	2b40      	cmp	r3, #64	@ 0x40
 8008386:	d86f      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 8008388:	2b30      	cmp	r3, #48	@ 0x30
 800838a:	d064      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 800838c:	2b30      	cmp	r3, #48	@ 0x30
 800838e:	d86b      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 8008390:	2b20      	cmp	r3, #32
 8008392:	d060      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 8008394:	2b20      	cmp	r3, #32
 8008396:	d867      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d05c      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 800839c:	2b10      	cmp	r3, #16
 800839e:	d05a      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x1ae>
 80083a0:	e062      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083b2:	f000 fd85 	bl	8008ec0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	609a      	str	r2, [r3, #8]
      break;
 80083ce:	e04f      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083e0:	f000 fd6e 	bl	8008ec0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083f2:	609a      	str	r2, [r3, #8]
      break;
 80083f4:	e03c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008402:	461a      	mov	r2, r3
 8008404:	f000 fce0 	bl	8008dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2150      	movs	r1, #80	@ 0x50
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fd39 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008414:	e02c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008422:	461a      	mov	r2, r3
 8008424:	f000 fcff 	bl	8008e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2160      	movs	r1, #96	@ 0x60
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fd29 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008434:	e01c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008442:	461a      	mov	r2, r3
 8008444:	f000 fcc0 	bl	8008dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2140      	movs	r1, #64	@ 0x40
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fd19 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008454:	e00c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f000 fd10 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008466:	e003      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e000      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800846e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	00100070 	.word	0x00100070
 8008490:	00100040 	.word	0x00100040
 8008494:	00100030 	.word	0x00100030
 8008498:	00100020 	.word	0x00100020

0800849c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	429a      	cmp	r2, r3
 8008516:	d107      	bne.n	8008528 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008526:	e02a      	b.n	800857e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	429a      	cmp	r2, r3
 8008530:	d107      	bne.n	8008542 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2202      	movs	r2, #2
 8008536:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008540:	e01d      	b.n	800857e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	429a      	cmp	r2, r3
 800854a:	d107      	bne.n	800855c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2204      	movs	r2, #4
 8008550:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800855a:	e010      	b.n	800857e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	429a      	cmp	r2, r3
 8008564:	d107      	bne.n	8008576 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2208      	movs	r2, #8
 800856a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008574:	e003      	b.n	800857e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff ffb4 	bl	80084ec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	771a      	strb	r2, [r3, #28]
}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d10b      	bne.n	80085c2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d136      	bne.n	8008626 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085c0:	e031      	b.n	8008626 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d10b      	bne.n	80085e4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2202      	movs	r2, #2
 80085d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d125      	bne.n	8008626 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085e2:	e020      	b.n	8008626 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d10b      	bne.n	8008606 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2204      	movs	r2, #4
 80085f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d114      	bne.n	8008626 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008604:	e00f      	b.n	8008626 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d10a      	bne.n	8008626 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2208      	movs	r2, #8
 8008614:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f7f9 fd46 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	771a      	strb	r2, [r3, #28]
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d103      	bne.n	800865a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	771a      	strb	r2, [r3, #28]
 8008658:	e019      	b.n	800868e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d103      	bne.n	800866c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2202      	movs	r2, #2
 8008668:	771a      	strb	r2, [r3, #28]
 800866a:	e010      	b.n	800868e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d103      	bne.n	800867e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2204      	movs	r2, #4
 800867a:	771a      	strb	r2, [r3, #28]
 800867c:	e007      	b.n	800868e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d102      	bne.n	800868e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2208      	movs	r2, #8
 800868c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff ff18 	bl	80084c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	771a      	strb	r2, [r3, #28]
}
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a42      	ldr	r2, [pc, #264]	@ (80087c0 <TIM_Base_SetConfig+0x11c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d00f      	beq.n	80086dc <TIM_Base_SetConfig+0x38>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c2:	d00b      	beq.n	80086dc <TIM_Base_SetConfig+0x38>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a3f      	ldr	r2, [pc, #252]	@ (80087c4 <TIM_Base_SetConfig+0x120>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d007      	beq.n	80086dc <TIM_Base_SetConfig+0x38>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a3e      	ldr	r2, [pc, #248]	@ (80087c8 <TIM_Base_SetConfig+0x124>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d003      	beq.n	80086dc <TIM_Base_SetConfig+0x38>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a3d      	ldr	r2, [pc, #244]	@ (80087cc <TIM_Base_SetConfig+0x128>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d108      	bne.n	80086ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a33      	ldr	r2, [pc, #204]	@ (80087c0 <TIM_Base_SetConfig+0x11c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d01b      	beq.n	800872e <TIM_Base_SetConfig+0x8a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086fc:	d017      	beq.n	800872e <TIM_Base_SetConfig+0x8a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a30      	ldr	r2, [pc, #192]	@ (80087c4 <TIM_Base_SetConfig+0x120>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <TIM_Base_SetConfig+0x8a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a2f      	ldr	r2, [pc, #188]	@ (80087c8 <TIM_Base_SetConfig+0x124>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00f      	beq.n	800872e <TIM_Base_SetConfig+0x8a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2e      	ldr	r2, [pc, #184]	@ (80087cc <TIM_Base_SetConfig+0x128>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00b      	beq.n	800872e <TIM_Base_SetConfig+0x8a>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2d      	ldr	r2, [pc, #180]	@ (80087d0 <TIM_Base_SetConfig+0x12c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d007      	beq.n	800872e <TIM_Base_SetConfig+0x8a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a2c      	ldr	r2, [pc, #176]	@ (80087d4 <TIM_Base_SetConfig+0x130>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d003      	beq.n	800872e <TIM_Base_SetConfig+0x8a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a2b      	ldr	r2, [pc, #172]	@ (80087d8 <TIM_Base_SetConfig+0x134>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d108      	bne.n	8008740 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a16      	ldr	r2, [pc, #88]	@ (80087c0 <TIM_Base_SetConfig+0x11c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00f      	beq.n	800878c <TIM_Base_SetConfig+0xe8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <TIM_Base_SetConfig+0x128>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00b      	beq.n	800878c <TIM_Base_SetConfig+0xe8>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a16      	ldr	r2, [pc, #88]	@ (80087d0 <TIM_Base_SetConfig+0x12c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d007      	beq.n	800878c <TIM_Base_SetConfig+0xe8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <TIM_Base_SetConfig+0x130>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d003      	beq.n	800878c <TIM_Base_SetConfig+0xe8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a14      	ldr	r2, [pc, #80]	@ (80087d8 <TIM_Base_SetConfig+0x134>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d103      	bne.n	8008794 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d105      	bne.n	80087b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f023 0201 	bic.w	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	611a      	str	r2, [r3, #16]
  }
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40012c00 	.word	0x40012c00
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40013400 	.word	0x40013400
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	40014800 	.word	0x40014800

080087dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f023 0201 	bic.w	r2, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800880a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0303 	bic.w	r3, r3, #3
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f023 0302 	bic.w	r3, r3, #2
 8008828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a2c      	ldr	r2, [pc, #176]	@ (80088e8 <TIM_OC1_SetConfig+0x10c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00f      	beq.n	800885c <TIM_OC1_SetConfig+0x80>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a2b      	ldr	r2, [pc, #172]	@ (80088ec <TIM_OC1_SetConfig+0x110>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00b      	beq.n	800885c <TIM_OC1_SetConfig+0x80>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a2a      	ldr	r2, [pc, #168]	@ (80088f0 <TIM_OC1_SetConfig+0x114>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d007      	beq.n	800885c <TIM_OC1_SetConfig+0x80>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a29      	ldr	r2, [pc, #164]	@ (80088f4 <TIM_OC1_SetConfig+0x118>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d003      	beq.n	800885c <TIM_OC1_SetConfig+0x80>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a28      	ldr	r2, [pc, #160]	@ (80088f8 <TIM_OC1_SetConfig+0x11c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d10c      	bne.n	8008876 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f023 0308 	bic.w	r3, r3, #8
 8008862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f023 0304 	bic.w	r3, r3, #4
 8008874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a1b      	ldr	r2, [pc, #108]	@ (80088e8 <TIM_OC1_SetConfig+0x10c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d00f      	beq.n	800889e <TIM_OC1_SetConfig+0xc2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a1a      	ldr	r2, [pc, #104]	@ (80088ec <TIM_OC1_SetConfig+0x110>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00b      	beq.n	800889e <TIM_OC1_SetConfig+0xc2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a19      	ldr	r2, [pc, #100]	@ (80088f0 <TIM_OC1_SetConfig+0x114>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d007      	beq.n	800889e <TIM_OC1_SetConfig+0xc2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a18      	ldr	r2, [pc, #96]	@ (80088f4 <TIM_OC1_SetConfig+0x118>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d003      	beq.n	800889e <TIM_OC1_SetConfig+0xc2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a17      	ldr	r2, [pc, #92]	@ (80088f8 <TIM_OC1_SetConfig+0x11c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d111      	bne.n	80088c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	621a      	str	r2, [r3, #32]
}
 80088dc:	bf00      	nop
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	40012c00 	.word	0x40012c00
 80088ec:	40013400 	.word	0x40013400
 80088f0:	40014000 	.word	0x40014000
 80088f4:	40014400 	.word	0x40014400
 80088f8:	40014800 	.word	0x40014800

080088fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	f023 0210 	bic.w	r2, r3, #16
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800892a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800892e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f023 0320 	bic.w	r3, r3, #32
 800894a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a28      	ldr	r2, [pc, #160]	@ (80089fc <TIM_OC2_SetConfig+0x100>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC2_SetConfig+0x6c>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a27      	ldr	r2, [pc, #156]	@ (8008a00 <TIM_OC2_SetConfig+0x104>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d10d      	bne.n	8008984 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800896e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1d      	ldr	r2, [pc, #116]	@ (80089fc <TIM_OC2_SetConfig+0x100>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00f      	beq.n	80089ac <TIM_OC2_SetConfig+0xb0>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1c      	ldr	r2, [pc, #112]	@ (8008a00 <TIM_OC2_SetConfig+0x104>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00b      	beq.n	80089ac <TIM_OC2_SetConfig+0xb0>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a1b      	ldr	r2, [pc, #108]	@ (8008a04 <TIM_OC2_SetConfig+0x108>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d007      	beq.n	80089ac <TIM_OC2_SetConfig+0xb0>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a1a      	ldr	r2, [pc, #104]	@ (8008a08 <TIM_OC2_SetConfig+0x10c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_OC2_SetConfig+0xb0>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a19      	ldr	r2, [pc, #100]	@ (8008a0c <TIM_OC2_SetConfig+0x110>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d113      	bne.n	80089d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	621a      	str	r2, [r3, #32]
}
 80089ee:	bf00      	nop
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	40012c00 	.word	0x40012c00
 8008a00:	40013400 	.word	0x40013400
 8008a04:	40014000 	.word	0x40014000
 8008a08:	40014400 	.word	0x40014400
 8008a0c:	40014800 	.word	0x40014800

08008a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0303 	bic.w	r3, r3, #3
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a27      	ldr	r2, [pc, #156]	@ (8008b0c <TIM_OC3_SetConfig+0xfc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_OC3_SetConfig+0x6a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a26      	ldr	r2, [pc, #152]	@ (8008b10 <TIM_OC3_SetConfig+0x100>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d10d      	bne.n	8008a96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	021b      	lsls	r3, r3, #8
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a1c      	ldr	r2, [pc, #112]	@ (8008b0c <TIM_OC3_SetConfig+0xfc>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d00f      	beq.n	8008abe <TIM_OC3_SetConfig+0xae>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b10 <TIM_OC3_SetConfig+0x100>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00b      	beq.n	8008abe <TIM_OC3_SetConfig+0xae>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b14 <TIM_OC3_SetConfig+0x104>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <TIM_OC3_SetConfig+0xae>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a19      	ldr	r2, [pc, #100]	@ (8008b18 <TIM_OC3_SetConfig+0x108>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d003      	beq.n	8008abe <TIM_OC3_SetConfig+0xae>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a18      	ldr	r2, [pc, #96]	@ (8008b1c <TIM_OC3_SetConfig+0x10c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d113      	bne.n	8008ae6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	621a      	str	r2, [r3, #32]
}
 8008b00:	bf00      	nop
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	40012c00 	.word	0x40012c00
 8008b10:	40013400 	.word	0x40013400
 8008b14:	40014000 	.word	0x40014000
 8008b18:	40014400 	.word	0x40014400
 8008b1c:	40014800 	.word	0x40014800

08008b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	021b      	lsls	r3, r3, #8
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	031b      	lsls	r3, r3, #12
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a28      	ldr	r2, [pc, #160]	@ (8008c20 <TIM_OC4_SetConfig+0x100>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <TIM_OC4_SetConfig+0x6c>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a27      	ldr	r2, [pc, #156]	@ (8008c24 <TIM_OC4_SetConfig+0x104>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d10d      	bne.n	8008ba8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	031b      	lsls	r3, r3, #12
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a1d      	ldr	r2, [pc, #116]	@ (8008c20 <TIM_OC4_SetConfig+0x100>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d00f      	beq.n	8008bd0 <TIM_OC4_SetConfig+0xb0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c24 <TIM_OC4_SetConfig+0x104>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00b      	beq.n	8008bd0 <TIM_OC4_SetConfig+0xb0>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a1b      	ldr	r2, [pc, #108]	@ (8008c28 <TIM_OC4_SetConfig+0x108>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d007      	beq.n	8008bd0 <TIM_OC4_SetConfig+0xb0>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c2c <TIM_OC4_SetConfig+0x10c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d003      	beq.n	8008bd0 <TIM_OC4_SetConfig+0xb0>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a19      	ldr	r2, [pc, #100]	@ (8008c30 <TIM_OC4_SetConfig+0x110>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d113      	bne.n	8008bf8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	019b      	lsls	r3, r3, #6
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	019b      	lsls	r3, r3, #6
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	621a      	str	r2, [r3, #32]
}
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40012c00 	.word	0x40012c00
 8008c24:	40013400 	.word	0x40013400
 8008c28:	40014000 	.word	0x40014000
 8008c2c:	40014400 	.word	0x40014400
 8008c30:	40014800 	.word	0x40014800

08008c34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a17      	ldr	r2, [pc, #92]	@ (8008ce8 <TIM_OC5_SetConfig+0xb4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00f      	beq.n	8008cae <TIM_OC5_SetConfig+0x7a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a16      	ldr	r2, [pc, #88]	@ (8008cec <TIM_OC5_SetConfig+0xb8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00b      	beq.n	8008cae <TIM_OC5_SetConfig+0x7a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a15      	ldr	r2, [pc, #84]	@ (8008cf0 <TIM_OC5_SetConfig+0xbc>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d007      	beq.n	8008cae <TIM_OC5_SetConfig+0x7a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	@ (8008cf4 <TIM_OC5_SetConfig+0xc0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d003      	beq.n	8008cae <TIM_OC5_SetConfig+0x7a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a13      	ldr	r2, [pc, #76]	@ (8008cf8 <TIM_OC5_SetConfig+0xc4>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d109      	bne.n	8008cc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	021b      	lsls	r3, r3, #8
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	621a      	str	r2, [r3, #32]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	40012c00 	.word	0x40012c00
 8008cec:	40013400 	.word	0x40013400
 8008cf0:	40014000 	.word	0x40014000
 8008cf4:	40014400 	.word	0x40014400
 8008cf8:	40014800 	.word	0x40014800

08008cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	021b      	lsls	r3, r3, #8
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	051b      	lsls	r3, r3, #20
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a18      	ldr	r2, [pc, #96]	@ (8008db4 <TIM_OC6_SetConfig+0xb8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d00f      	beq.n	8008d78 <TIM_OC6_SetConfig+0x7c>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a17      	ldr	r2, [pc, #92]	@ (8008db8 <TIM_OC6_SetConfig+0xbc>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00b      	beq.n	8008d78 <TIM_OC6_SetConfig+0x7c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a16      	ldr	r2, [pc, #88]	@ (8008dbc <TIM_OC6_SetConfig+0xc0>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d007      	beq.n	8008d78 <TIM_OC6_SetConfig+0x7c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a15      	ldr	r2, [pc, #84]	@ (8008dc0 <TIM_OC6_SetConfig+0xc4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d003      	beq.n	8008d78 <TIM_OC6_SetConfig+0x7c>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a14      	ldr	r2, [pc, #80]	@ (8008dc4 <TIM_OC6_SetConfig+0xc8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d109      	bne.n	8008d8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	029b      	lsls	r3, r3, #10
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	621a      	str	r2, [r3, #32]
}
 8008da6:	bf00      	nop
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	40012c00 	.word	0x40012c00
 8008db8:	40013400 	.word	0x40013400
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40014400 	.word	0x40014400
 8008dc4:	40014800 	.word	0x40014800

08008dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	f023 0201 	bic.w	r2, r3, #1
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f023 030a 	bic.w	r3, r3, #10
 8008e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b087      	sub	sp, #28
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	60b9      	str	r1, [r7, #8]
 8008e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	f023 0210 	bic.w	r2, r3, #16
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	031b      	lsls	r3, r3, #12
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	621a      	str	r2, [r3, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f043 0307 	orr.w	r3, r3, #7
 8008eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	609a      	str	r2, [r3, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	021a      	lsls	r2, r3, #8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	609a      	str	r2, [r3, #8]
}
 8008ef4:	bf00      	nop
 8008ef6:	371c      	adds	r7, #28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f003 031f 	and.w	r3, r3, #31
 8008f12:	2201      	movs	r2, #1
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a1a      	ldr	r2, [r3, #32]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	401a      	ands	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a1a      	ldr	r2, [r3, #32]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	fa01 f303 	lsl.w	r3, r1, r3
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	621a      	str	r2, [r3, #32]
}
 8008f3e:	bf00      	nop
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e065      	b.n	8009030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a2c      	ldr	r2, [pc, #176]	@ (800903c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d004      	beq.n	8008f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a2b      	ldr	r2, [pc, #172]	@ (8009040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d108      	bne.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800903c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d018      	beq.n	8009004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fda:	d013      	beq.n	8009004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a18      	ldr	r2, [pc, #96]	@ (8009044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00e      	beq.n	8009004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a17      	ldr	r2, [pc, #92]	@ (8009048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d009      	beq.n	8009004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a12      	ldr	r2, [pc, #72]	@ (8009040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d004      	beq.n	8009004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a13      	ldr	r2, [pc, #76]	@ (800904c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d10c      	bne.n	800901e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800900a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	4313      	orrs	r3, r2
 8009014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	40012c00 	.word	0x40012c00
 8009040:	40013400 	.word	0x40013400
 8009044:	40000400 	.word	0x40000400
 8009048:	40000800 	.word	0x40000800
 800904c:	40014000 	.word	0x40014000

08009050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e042      	b.n	8009174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d106      	bne.n	8009106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7fa f8bb 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2224      	movs	r2, #36	@ 0x24
 800910a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 f834 	bl	800a194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fd65 	bl	8009bfc <UART_SetConfig>
 8009132:	4603      	mov	r3, r0
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e01b      	b.n	8009174 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800914a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800915a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0201 	orr.w	r2, r2, #1
 800916a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f8b3 	bl	800a2d8 <UART_CheckIdleState>
 8009172:	4603      	mov	r3, r0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	@ 0x28
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	4613      	mov	r3, r2
 800918a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009192:	2b20      	cmp	r3, #32
 8009194:	d17b      	bne.n	800928e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <HAL_UART_Transmit+0x26>
 800919c:	88fb      	ldrh	r3, [r7, #6]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e074      	b.n	8009290 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2221      	movs	r2, #33	@ 0x21
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091b6:	f7fa fa11 	bl	80035dc <HAL_GetTick>
 80091ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	88fa      	ldrh	r2, [r7, #6]
 80091c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091d4:	d108      	bne.n	80091e8 <HAL_UART_Transmit+0x6c>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d104      	bne.n	80091e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	e003      	b.n	80091f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091f0:	e030      	b.n	8009254 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2200      	movs	r2, #0
 80091fa:	2180      	movs	r1, #128	@ 0x80
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f001 f915 	bl	800a42c <UART_WaitOnFlagUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e03d      	b.n	8009290 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10b      	bne.n	8009232 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009228:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	3302      	adds	r3, #2
 800922e:	61bb      	str	r3, [r7, #24]
 8009230:	e007      	b.n	8009242 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	781a      	ldrb	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	3301      	adds	r3, #1
 8009240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800925a:	b29b      	uxth	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1c8      	bne.n	80091f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2200      	movs	r2, #0
 8009268:	2140      	movs	r1, #64	@ 0x40
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f001 f8de 	bl	800a42c <UART_WaitOnFlagUntilTimeout>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e006      	b.n	8009290 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	e000      	b.n	8009290 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800928e:	2302      	movs	r3, #2
  }
}
 8009290:	4618      	mov	r0, r3
 8009292:	3720      	adds	r7, #32
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	@ 0x28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d137      	bne.n	8009320 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_UART_Receive_DMA+0x24>
 80092b6:	88fb      	ldrh	r3, [r7, #6]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e030      	b.n	8009322 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a18      	ldr	r2, [pc, #96]	@ (800932c <HAL_UART_Receive_DMA+0x94>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d01f      	beq.n	8009310 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d018      	beq.n	8009310 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	613b      	str	r3, [r7, #16]
   return(result);
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	623b      	str	r3, [r7, #32]
 80092fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	69f9      	ldr	r1, [r7, #28]
 8009302:	6a3a      	ldr	r2, [r7, #32]
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	61bb      	str	r3, [r7, #24]
   return(result);
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e6      	bne.n	80092de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	461a      	mov	r2, r3
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f001 f8f6 	bl	800a508 <UART_Start_Receive_DMA>
 800931c:	4603      	mov	r3, r0
 800931e:	e000      	b.n	8009322 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009320:	2302      	movs	r3, #2
  }
}
 8009322:	4618      	mov	r0, r3
 8009324:	3728      	adds	r7, #40	@ 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	40008000 	.word	0x40008000

08009330 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b0a0      	sub	sp, #128	@ 0x80
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009348:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800934c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009356:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009358:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800935c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e6      	bne.n	8009338 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800937a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800937c:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3308      	adds	r3, #8
 800938c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800938e:	657a      	str	r2, [r7, #84]	@ 0x54
 8009390:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009394:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800939c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e3      	bne.n	800936a <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d118      	bne.n	80093dc <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	f023 0310 	bic.w	r3, r3, #16
 80093be:	677b      	str	r3, [r7, #116]	@ 0x74
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80093ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e6      	bne.n	80093aa <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093e6:	2b80      	cmp	r3, #128	@ 0x80
 80093e8:	d137      	bne.n	800945a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009400:	673b      	str	r3, [r7, #112]	@ 0x70
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800940a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800940c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e5      	bne.n	80093ea <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009422:	2b00      	cmp	r3, #0
 8009424:	d019      	beq.n	800945a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800942a:	2200      	movs	r2, #0
 800942c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009432:	4618      	mov	r0, r3
 8009434:	f7fb ffb9 	bl	80053aa <HAL_DMA_Abort>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009442:	4618      	mov	r0, r3
 8009444:	f7fc f920 	bl	8005688 <HAL_DMA_GetError>
 8009448:	4603      	mov	r3, r0
 800944a:	2b20      	cmp	r3, #32
 800944c:	d105      	bne.n	800945a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2210      	movs	r2, #16
 8009452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e073      	b.n	8009542 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009464:	2b40      	cmp	r3, #64	@ 0x40
 8009466:	d13b      	bne.n	80094e0 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	60bb      	str	r3, [r7, #8]
   return(result);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800947e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009488:	61ba      	str	r2, [r7, #24]
 800948a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6979      	ldr	r1, [r7, #20]
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	613b      	str	r3, [r7, #16]
   return(result);
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e5      	bne.n	8009468 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d01c      	beq.n	80094e0 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ac:	2200      	movs	r2, #0
 80094ae:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fb ff77 	bl	80053aa <HAL_DMA_Abort>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00e      	beq.n	80094e0 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fc f8dd 	bl	8005688 <HAL_DMA_GetError>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	d105      	bne.n	80094e0 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2210      	movs	r2, #16
 80094d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e030      	b.n	8009542 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	220f      	movs	r2, #15
 80094f6:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009500:	d107      	bne.n	8009512 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	699a      	ldr	r2, [r3, #24]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f042 0210 	orr.w	r2, r2, #16
 8009510:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	699a      	ldr	r2, [r3, #24]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0208 	orr.w	r2, r2, #8
 8009520:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3780      	adds	r7, #128	@ 0x80
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b0ba      	sub	sp, #232	@ 0xe8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009576:	f640 030f 	movw	r3, #2063	@ 0x80f
 800957a:	4013      	ands	r3, r2
 800957c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11b      	bne.n	80095c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d015      	beq.n	80095c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d105      	bne.n	80095ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d009      	beq.n	80095c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 8300 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
      }
      return;
 80095be:	e2fa      	b.n	8009bb6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8123 	beq.w	8009810 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80095ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095ce:	4b8d      	ldr	r3, [pc, #564]	@ (8009804 <HAL_UART_IRQHandler+0x2b8>)
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80095da:	4b8b      	ldr	r3, [pc, #556]	@ (8009808 <HAL_UART_IRQHandler+0x2bc>)
 80095dc:	4013      	ands	r3, r2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 8116 	beq.w	8009810 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d011      	beq.n	8009614 <HAL_UART_IRQHandler+0xc8>
 80095f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960a:	f043 0201 	orr.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d011      	beq.n	8009644 <HAL_UART_IRQHandler+0xf8>
 8009620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2202      	movs	r2, #2
 8009632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800963a:	f043 0204 	orr.w	r2, r3, #4
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d011      	beq.n	8009674 <HAL_UART_IRQHandler+0x128>
 8009650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2204      	movs	r2, #4
 8009662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966a:	f043 0202 	orr.w	r2, r3, #2
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009678:	f003 0308 	and.w	r3, r3, #8
 800967c:	2b00      	cmp	r3, #0
 800967e:	d017      	beq.n	80096b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b00      	cmp	r3, #0
 800968a:	d105      	bne.n	8009698 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800968c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009690:	4b5c      	ldr	r3, [pc, #368]	@ (8009804 <HAL_UART_IRQHandler+0x2b8>)
 8009692:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2208      	movs	r2, #8
 800969e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a6:	f043 0208 	orr.w	r2, r3, #8
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d012      	beq.n	80096e2 <HAL_UART_IRQHandler+0x196>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00c      	beq.n	80096e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d8:	f043 0220 	orr.w	r2, r3, #32
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 8266 	beq.w	8009bba <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d013      	beq.n	8009722 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800970a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d007      	beq.n	8009722 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009736:	2b40      	cmp	r3, #64	@ 0x40
 8009738:	d005      	beq.n	8009746 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800973a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800973e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009742:	2b00      	cmp	r3, #0
 8009744:	d054      	beq.n	80097f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 ffc5 	bl	800a6d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009756:	2b40      	cmp	r3, #64	@ 0x40
 8009758:	d146      	bne.n	80097e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009778:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009786:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800978a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800979e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1d9      	bne.n	800975a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d017      	beq.n	80097e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b6:	4a15      	ldr	r2, [pc, #84]	@ (800980c <HAL_UART_IRQHandler+0x2c0>)
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fb fe4b 	bl	800545c <HAL_DMA_Abort_IT>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d019      	beq.n	8009800 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80097da:	4610      	mov	r0, r2
 80097dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097de:	e00f      	b.n	8009800 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f9f5 	bl	8009bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e6:	e00b      	b.n	8009800 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f9f1 	bl	8009bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ee:	e007      	b.n	8009800 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f9ed 	bl	8009bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80097fe:	e1dc      	b.n	8009bba <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009800:	bf00      	nop
    return;
 8009802:	e1da      	b.n	8009bba <HAL_UART_IRQHandler+0x66e>
 8009804:	10000001 	.word	0x10000001
 8009808:	04000120 	.word	0x04000120
 800980c:	0800a98d 	.word	0x0800a98d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009814:	2b01      	cmp	r3, #1
 8009816:	f040 8170 	bne.w	8009afa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 8169 	beq.w	8009afa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 8162 	beq.w	8009afa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2210      	movs	r2, #16
 800983c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009848:	2b40      	cmp	r3, #64	@ 0x40
 800984a:	f040 80d8 	bne.w	80099fe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800985c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80af 	beq.w	80099c4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800986c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009870:	429a      	cmp	r2, r3
 8009872:	f080 80a7 	bcs.w	80099c4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800987c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	f040 8087 	bne.w	80099a2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1da      	bne.n	8009894 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3308      	adds	r3, #8
 80098fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009902:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800990a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e1      	bne.n	80098de <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800992a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800992c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800993e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800994c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e3      	bne.n	800991a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800996e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009970:	f023 0310 	bic.w	r3, r3, #16
 8009974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009982:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009984:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e4      	bne.n	8009960 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800999c:	4618      	mov	r0, r3
 800999e:	f7fb fd04 	bl	80053aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f911 	bl	8009be4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80099c2:	e0fc      	b.n	8009bbe <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099ce:	429a      	cmp	r2, r3
 80099d0:	f040 80f5 	bne.w	8009bbe <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	f040 80eb 	bne.w	8009bbe <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f8f4 	bl	8009be4 <HAL_UARTEx_RxEventCallback>
      return;
 80099fc:	e0df      	b.n	8009bbe <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80d1 	beq.w	8009bc2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 80cc 	beq.w	8009bc2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e4      	bne.n	8009a2a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3308      	adds	r3, #8
 8009a66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a76:	f023 0301 	bic.w	r3, r3, #1
 8009a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3308      	adds	r3, #8
 8009a84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a88:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e1      	bne.n	8009a60 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f023 0310 	bic.w	r3, r3, #16
 8009ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ad2:	61fb      	str	r3, [r7, #28]
 8009ad4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	69b9      	ldr	r1, [r7, #24]
 8009ad8:	69fa      	ldr	r2, [r7, #28]
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e4      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f876 	bl	8009be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009af8:	e063      	b.n	8009bc2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00e      	beq.n	8009b24 <HAL_UART_IRQHandler+0x5d8>
 8009b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d008      	beq.n	8009b24 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 ff72 	bl	800aa06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b22:	e051      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d014      	beq.n	8009b5a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d105      	bne.n	8009b48 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d008      	beq.n	8009b5a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d03a      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	4798      	blx	r3
    }
    return;
 8009b58:	e035      	b.n	8009bc6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <HAL_UART_IRQHandler+0x62e>
 8009b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 ff1c 	bl	800a9b0 <UART_EndTransmit_IT>
    return;
 8009b78:	e026      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d009      	beq.n	8009b9a <HAL_UART_IRQHandler+0x64e>
 8009b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 ff4b 	bl	800aa2e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b98:	e016      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d010      	beq.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
 8009ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	da0c      	bge.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 ff33 	bl	800aa1a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bb4:	e008      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8009bb6:	bf00      	nop
 8009bb8:	e006      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
    return;
 8009bba:	bf00      	nop
 8009bbc:	e004      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8009bbe:	bf00      	nop
 8009bc0:	e002      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8009bc2:	bf00      	nop
 8009bc4:	e000      	b.n	8009bc8 <HAL_UART_IRQHandler+0x67c>
    return;
 8009bc6:	bf00      	nop
  }
}
 8009bc8:	37e8      	adds	r7, #232	@ 0xe8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop

08009bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c00:	b08c      	sub	sp, #48	@ 0x30
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	431a      	orrs	r2, r3
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	4bab      	ldr	r3, [pc, #684]	@ (8009ed8 <UART_SetConfig+0x2dc>)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	6812      	ldr	r2, [r2, #0]
 8009c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4aa0      	ldr	r2, [pc, #640]	@ (8009edc <UART_SetConfig+0x2e0>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d004      	beq.n	8009c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c64:	4313      	orrs	r3, r2
 8009c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009c72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	6812      	ldr	r2, [r2, #0]
 8009c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	f023 010f 	bic.w	r1, r3, #15
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a91      	ldr	r2, [pc, #580]	@ (8009ee0 <UART_SetConfig+0x2e4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d125      	bne.n	8009cec <UART_SetConfig+0xf0>
 8009ca0:	4b90      	ldr	r3, [pc, #576]	@ (8009ee4 <UART_SetConfig+0x2e8>)
 8009ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d81a      	bhi.n	8009ce4 <UART_SetConfig+0xe8>
 8009cae:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <UART_SetConfig+0xb8>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009cc5 	.word	0x08009cc5
 8009cb8:	08009cd5 	.word	0x08009cd5
 8009cbc:	08009ccd 	.word	0x08009ccd
 8009cc0:	08009cdd 	.word	0x08009cdd
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cca:	e0d6      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cd2:	e0d2      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cda:	e0ce      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009cdc:	2308      	movs	r3, #8
 8009cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce2:	e0ca      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cea:	e0c6      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a7d      	ldr	r2, [pc, #500]	@ (8009ee8 <UART_SetConfig+0x2ec>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d138      	bne.n	8009d68 <UART_SetConfig+0x16c>
 8009cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ee4 <UART_SetConfig+0x2e8>)
 8009cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cfc:	f003 030c 	and.w	r3, r3, #12
 8009d00:	2b0c      	cmp	r3, #12
 8009d02:	d82d      	bhi.n	8009d60 <UART_SetConfig+0x164>
 8009d04:	a201      	add	r2, pc, #4	@ (adr r2, 8009d0c <UART_SetConfig+0x110>)
 8009d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0a:	bf00      	nop
 8009d0c:	08009d41 	.word	0x08009d41
 8009d10:	08009d61 	.word	0x08009d61
 8009d14:	08009d61 	.word	0x08009d61
 8009d18:	08009d61 	.word	0x08009d61
 8009d1c:	08009d51 	.word	0x08009d51
 8009d20:	08009d61 	.word	0x08009d61
 8009d24:	08009d61 	.word	0x08009d61
 8009d28:	08009d61 	.word	0x08009d61
 8009d2c:	08009d49 	.word	0x08009d49
 8009d30:	08009d61 	.word	0x08009d61
 8009d34:	08009d61 	.word	0x08009d61
 8009d38:	08009d61 	.word	0x08009d61
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	2300      	movs	r3, #0
 8009d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d46:	e098      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d4e:	e094      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009d50:	2304      	movs	r3, #4
 8009d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d56:	e090      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009d58:	2308      	movs	r3, #8
 8009d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d5e:	e08c      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009d60:	2310      	movs	r3, #16
 8009d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d66:	e088      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a5f      	ldr	r2, [pc, #380]	@ (8009eec <UART_SetConfig+0x2f0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d125      	bne.n	8009dbe <UART_SetConfig+0x1c2>
 8009d72:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee4 <UART_SetConfig+0x2e8>)
 8009d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d7c:	2b30      	cmp	r3, #48	@ 0x30
 8009d7e:	d016      	beq.n	8009dae <UART_SetConfig+0x1b2>
 8009d80:	2b30      	cmp	r3, #48	@ 0x30
 8009d82:	d818      	bhi.n	8009db6 <UART_SetConfig+0x1ba>
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d00a      	beq.n	8009d9e <UART_SetConfig+0x1a2>
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d814      	bhi.n	8009db6 <UART_SetConfig+0x1ba>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <UART_SetConfig+0x19a>
 8009d90:	2b10      	cmp	r3, #16
 8009d92:	d008      	beq.n	8009da6 <UART_SetConfig+0x1aa>
 8009d94:	e00f      	b.n	8009db6 <UART_SetConfig+0x1ba>
 8009d96:	2300      	movs	r3, #0
 8009d98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d9c:	e06d      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da4:	e069      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009da6:	2304      	movs	r3, #4
 8009da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dac:	e065      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009dae:	2308      	movs	r3, #8
 8009db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db4:	e061      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009db6:	2310      	movs	r3, #16
 8009db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dbc:	e05d      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a4b      	ldr	r2, [pc, #300]	@ (8009ef0 <UART_SetConfig+0x2f4>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d125      	bne.n	8009e14 <UART_SetConfig+0x218>
 8009dc8:	4b46      	ldr	r3, [pc, #280]	@ (8009ee4 <UART_SetConfig+0x2e8>)
 8009dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dd4:	d016      	beq.n	8009e04 <UART_SetConfig+0x208>
 8009dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dd8:	d818      	bhi.n	8009e0c <UART_SetConfig+0x210>
 8009dda:	2b80      	cmp	r3, #128	@ 0x80
 8009ddc:	d00a      	beq.n	8009df4 <UART_SetConfig+0x1f8>
 8009dde:	2b80      	cmp	r3, #128	@ 0x80
 8009de0:	d814      	bhi.n	8009e0c <UART_SetConfig+0x210>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <UART_SetConfig+0x1f0>
 8009de6:	2b40      	cmp	r3, #64	@ 0x40
 8009de8:	d008      	beq.n	8009dfc <UART_SetConfig+0x200>
 8009dea:	e00f      	b.n	8009e0c <UART_SetConfig+0x210>
 8009dec:	2300      	movs	r3, #0
 8009dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009df2:	e042      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009df4:	2302      	movs	r3, #2
 8009df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dfa:	e03e      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009dfc:	2304      	movs	r3, #4
 8009dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e02:	e03a      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e04:	2308      	movs	r3, #8
 8009e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e0a:	e036      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e0c:	2310      	movs	r3, #16
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e12:	e032      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a30      	ldr	r2, [pc, #192]	@ (8009edc <UART_SetConfig+0x2e0>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d12a      	bne.n	8009e74 <UART_SetConfig+0x278>
 8009e1e:	4b31      	ldr	r3, [pc, #196]	@ (8009ee4 <UART_SetConfig+0x2e8>)
 8009e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e2c:	d01a      	beq.n	8009e64 <UART_SetConfig+0x268>
 8009e2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e32:	d81b      	bhi.n	8009e6c <UART_SetConfig+0x270>
 8009e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e38:	d00c      	beq.n	8009e54 <UART_SetConfig+0x258>
 8009e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e3e:	d815      	bhi.n	8009e6c <UART_SetConfig+0x270>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <UART_SetConfig+0x250>
 8009e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e48:	d008      	beq.n	8009e5c <UART_SetConfig+0x260>
 8009e4a:	e00f      	b.n	8009e6c <UART_SetConfig+0x270>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e52:	e012      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e54:	2302      	movs	r3, #2
 8009e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5a:	e00e      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e62:	e00a      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e64:	2308      	movs	r3, #8
 8009e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6a:	e006      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e72:	e002      	b.n	8009e7a <UART_SetConfig+0x27e>
 8009e74:	2310      	movs	r3, #16
 8009e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a17      	ldr	r2, [pc, #92]	@ (8009edc <UART_SetConfig+0x2e0>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	f040 80a8 	bne.w	8009fd6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	d834      	bhi.n	8009ef8 <UART_SetConfig+0x2fc>
 8009e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <UART_SetConfig+0x298>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ef9 	.word	0x08009ef9
 8009e9c:	08009ec1 	.word	0x08009ec1
 8009ea0:	08009ef9 	.word	0x08009ef9
 8009ea4:	08009ec7 	.word	0x08009ec7
 8009ea8:	08009ef9 	.word	0x08009ef9
 8009eac:	08009ef9 	.word	0x08009ef9
 8009eb0:	08009ef9 	.word	0x08009ef9
 8009eb4:	08009ecf 	.word	0x08009ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb8:	f7fd f822 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 8009ebc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ebe:	e021      	b.n	8009f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ef4 <UART_SetConfig+0x2f8>)
 8009ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ec4:	e01e      	b.n	8009f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ec6:	f7fc ffaf 	bl	8006e28 <HAL_RCC_GetSysClockFreq>
 8009eca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ecc:	e01a      	b.n	8009f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ed4:	e016      	b.n	8009f04 <UART_SetConfig+0x308>
 8009ed6:	bf00      	nop
 8009ed8:	cfff69f3 	.word	0xcfff69f3
 8009edc:	40008000 	.word	0x40008000
 8009ee0:	40013800 	.word	0x40013800
 8009ee4:	40021000 	.word	0x40021000
 8009ee8:	40004400 	.word	0x40004400
 8009eec:	40004800 	.word	0x40004800
 8009ef0:	40004c00 	.word	0x40004c00
 8009ef4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 812a 	beq.w	800a160 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	4a9e      	ldr	r2, [pc, #632]	@ (800a18c <UART_SetConfig+0x590>)
 8009f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f16:	461a      	mov	r2, r3
 8009f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f1e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	4613      	mov	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	4413      	add	r3, r2
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d305      	bcc.n	8009f3c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d903      	bls.n	8009f44 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f42:	e10d      	b.n	800a160 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f46:	2200      	movs	r2, #0
 8009f48:	60bb      	str	r3, [r7, #8]
 8009f4a:	60fa      	str	r2, [r7, #12]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f50:	4a8e      	ldr	r2, [pc, #568]	@ (800a18c <UART_SetConfig+0x590>)
 8009f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	2200      	movs	r2, #0
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	607a      	str	r2, [r7, #4]
 8009f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f66:	f7f6 feb7 	bl	8000cd8 <__aeabi_uldivmod>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4619      	mov	r1, r3
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	020b      	lsls	r3, r1, #8
 8009f7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f80:	0202      	lsls	r2, r0, #8
 8009f82:	6979      	ldr	r1, [r7, #20]
 8009f84:	6849      	ldr	r1, [r1, #4]
 8009f86:	0849      	lsrs	r1, r1, #1
 8009f88:	2000      	movs	r0, #0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	eb12 0804 	adds.w	r8, r2, r4
 8009f92:	eb43 0905 	adc.w	r9, r3, r5
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	469a      	mov	sl, r3
 8009f9e:	4693      	mov	fp, r2
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 fe96 	bl	8000cd8 <__aeabi_uldivmod>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fba:	d308      	bcc.n	8009fce <UART_SetConfig+0x3d2>
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc2:	d204      	bcs.n	8009fce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6a3a      	ldr	r2, [r7, #32]
 8009fca:	60da      	str	r2, [r3, #12]
 8009fcc:	e0c8      	b.n	800a160 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fd4:	e0c4      	b.n	800a160 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fde:	d167      	bne.n	800a0b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d828      	bhi.n	800a03a <UART_SetConfig+0x43e>
 8009fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff0 <UART_SetConfig+0x3f4>)
 8009fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fee:	bf00      	nop
 8009ff0:	0800a015 	.word	0x0800a015
 8009ff4:	0800a01d 	.word	0x0800a01d
 8009ff8:	0800a025 	.word	0x0800a025
 8009ffc:	0800a03b 	.word	0x0800a03b
 800a000:	0800a02b 	.word	0x0800a02b
 800a004:	0800a03b 	.word	0x0800a03b
 800a008:	0800a03b 	.word	0x0800a03b
 800a00c:	0800a03b 	.word	0x0800a03b
 800a010:	0800a033 	.word	0x0800a033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a014:	f7fc ff74 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800a018:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a01a:	e014      	b.n	800a046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a01c:	f7fc ff86 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 800a020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a022:	e010      	b.n	800a046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a024:	4b5a      	ldr	r3, [pc, #360]	@ (800a190 <UART_SetConfig+0x594>)
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a028:	e00d      	b.n	800a046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a02a:	f7fc fefd 	bl	8006e28 <HAL_RCC_GetSysClockFreq>
 800a02e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a030:	e009      	b.n	800a046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a038:	e005      	b.n	800a046 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 8089 	beq.w	800a160 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	4a4e      	ldr	r2, [pc, #312]	@ (800a18c <UART_SetConfig+0x590>)
 800a054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a058:	461a      	mov	r2, r3
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a060:	005a      	lsls	r2, r3, #1
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	085b      	lsrs	r3, r3, #1
 800a068:	441a      	add	r2, r3
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a072:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	2b0f      	cmp	r3, #15
 800a078:	d916      	bls.n	800a0a8 <UART_SetConfig+0x4ac>
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a080:	d212      	bcs.n	800a0a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	b29b      	uxth	r3, r3
 800a086:	f023 030f 	bic.w	r3, r3, #15
 800a08a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	085b      	lsrs	r3, r3, #1
 800a090:	b29b      	uxth	r3, r3
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	b29a      	uxth	r2, r3
 800a098:	8bfb      	ldrh	r3, [r7, #30]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	8bfa      	ldrh	r2, [r7, #30]
 800a0a4:	60da      	str	r2, [r3, #12]
 800a0a6:	e05b      	b.n	800a160 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a0ae:	e057      	b.n	800a160 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0b4:	2b08      	cmp	r3, #8
 800a0b6:	d828      	bhi.n	800a10a <UART_SetConfig+0x50e>
 800a0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <UART_SetConfig+0x4c4>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a0ed 	.word	0x0800a0ed
 800a0c8:	0800a0f5 	.word	0x0800a0f5
 800a0cc:	0800a10b 	.word	0x0800a10b
 800a0d0:	0800a0fb 	.word	0x0800a0fb
 800a0d4:	0800a10b 	.word	0x0800a10b
 800a0d8:	0800a10b 	.word	0x0800a10b
 800a0dc:	0800a10b 	.word	0x0800a10b
 800a0e0:	0800a103 	.word	0x0800a103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0e4:	f7fc ff0c 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800a0e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0ea:	e014      	b.n	800a116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0ec:	f7fc ff1e 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 800a0f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0f2:	e010      	b.n	800a116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0f4:	4b26      	ldr	r3, [pc, #152]	@ (800a190 <UART_SetConfig+0x594>)
 800a0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0f8:	e00d      	b.n	800a116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0fa:	f7fc fe95 	bl	8006e28 <HAL_RCC_GetSysClockFreq>
 800a0fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a100:	e009      	b.n	800a116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a108:	e005      	b.n	800a116 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a114:	bf00      	nop
    }

    if (pclk != 0U)
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d021      	beq.n	800a160 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a120:	4a1a      	ldr	r2, [pc, #104]	@ (800a18c <UART_SetConfig+0x590>)
 800a122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a126:	461a      	mov	r2, r3
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	085b      	lsrs	r3, r3, #1
 800a134:	441a      	add	r2, r3
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	2b0f      	cmp	r3, #15
 800a144:	d909      	bls.n	800a15a <UART_SetConfig+0x55e>
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a14c:	d205      	bcs.n	800a15a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	b29a      	uxth	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60da      	str	r2, [r3, #12]
 800a158:	e002      	b.n	800a160 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2201      	movs	r2, #1
 800a164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2200      	movs	r2, #0
 800a174:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2200      	movs	r2, #0
 800a17a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a17c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a180:	4618      	mov	r0, r3
 800a182:	3730      	adds	r7, #48	@ 0x30
 800a184:	46bd      	mov	sp, r7
 800a186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a18a:	bf00      	nop
 800a18c:	080154d8 	.word	0x080154d8
 800a190:	00f42400 	.word	0x00f42400

0800a194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a0:	f003 0308 	and.w	r3, r3, #8
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00a      	beq.n	800a1be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00a      	beq.n	800a202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	430a      	orrs	r2, r1
 800a222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a228:	f003 0310 	and.w	r3, r3, #16
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00a      	beq.n	800a246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	430a      	orrs	r2, r1
 800a244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00a      	beq.n	800a268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a270:	2b00      	cmp	r3, #0
 800a272:	d01a      	beq.n	800a2aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a28e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a292:	d10a      	bne.n	800a2aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00a      	beq.n	800a2cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	605a      	str	r2, [r3, #4]
  }
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b098      	sub	sp, #96	@ 0x60
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2e8:	f7f9 f978 	bl	80035dc <HAL_GetTick>
 800a2ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d12f      	bne.n	800a35c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a304:	2200      	movs	r2, #0
 800a306:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f88e 	bl	800a42c <UART_WaitOnFlagUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d022      	beq.n	800a35c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a32a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	461a      	mov	r2, r3
 800a332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a334:	647b      	str	r3, [r7, #68]	@ 0x44
 800a336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a33a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e6      	bne.n	800a316 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e063      	b.n	800a424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	2b04      	cmp	r3, #4
 800a368:	d149      	bne.n	800a3fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a36a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a372:	2200      	movs	r2, #0
 800a374:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f857 	bl	800a42c <UART_WaitOnFlagUntilTimeout>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d03c      	beq.n	800a3fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	623b      	str	r3, [r7, #32]
   return(result);
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e6      	bne.n	800a384 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f023 0301 	bic.w	r3, r3, #1
 800a3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3d6:	61fa      	str	r2, [r7, #28]
 800a3d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	69b9      	ldr	r1, [r7, #24]
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e5      	bne.n	800a3b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e012      	b.n	800a424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2220      	movs	r2, #32
 800a40a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3758      	adds	r7, #88	@ 0x58
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	4613      	mov	r3, r2
 800a43a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a43c:	e04f      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a444:	d04b      	beq.n	800a4de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a446:	f7f9 f8c9 	bl	80035dc <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	429a      	cmp	r2, r3
 800a454:	d302      	bcc.n	800a45c <UART_WaitOnFlagUntilTimeout+0x30>
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e04e      	b.n	800a4fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 0304 	and.w	r3, r3, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d037      	beq.n	800a4de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b80      	cmp	r3, #128	@ 0x80
 800a472:	d034      	beq.n	800a4de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b40      	cmp	r3, #64	@ 0x40
 800a478:	d031      	beq.n	800a4de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69db      	ldr	r3, [r3, #28]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b08      	cmp	r3, #8
 800a486:	d110      	bne.n	800a4aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2208      	movs	r2, #8
 800a48e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 f920 	bl	800a6d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2208      	movs	r2, #8
 800a49a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e029      	b.n	800a4fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69db      	ldr	r3, [r3, #28]
 800a4b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4b8:	d111      	bne.n	800a4de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f906 	bl	800a6d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e00f      	b.n	800a4fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69da      	ldr	r2, [r3, #28]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	bf0c      	ite	eq
 800a4ee:	2301      	moveq	r3, #1
 800a4f0:	2300      	movne	r3, #0
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d0a0      	beq.n	800a43e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b096      	sub	sp, #88	@ 0x58
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	88fa      	ldrh	r2, [r7, #6]
 800a520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2222      	movs	r2, #34	@ 0x22
 800a530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d02d      	beq.n	800a59a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a544:	4a40      	ldr	r2, [pc, #256]	@ (800a648 <UART_Start_Receive_DMA+0x140>)
 800a546:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a54e:	4a3f      	ldr	r2, [pc, #252]	@ (800a64c <UART_Start_Receive_DMA+0x144>)
 800a550:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a558:	4a3d      	ldr	r2, [pc, #244]	@ (800a650 <UART_Start_Receive_DMA+0x148>)
 800a55a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a562:	2200      	movs	r2, #0
 800a564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3324      	adds	r3, #36	@ 0x24
 800a572:	4619      	mov	r1, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a578:	461a      	mov	r2, r3
 800a57a:	88fb      	ldrh	r3, [r7, #6]
 800a57c:	f7fa fe9a 	bl	80052b4 <HAL_DMA_Start_IT>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d009      	beq.n	800a59a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2210      	movs	r2, #16
 800a58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2220      	movs	r2, #32
 800a592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e051      	b.n	800a63e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d018      	beq.n	800a5d4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5c2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e6      	bne.n	800a5a2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3308      	adds	r3, #8
 800a5da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5de:	e853 3f00 	ldrex	r3, [r3]
 800a5e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e6:	f043 0301 	orr.w	r3, r3, #1
 800a5ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5f4:	637a      	str	r2, [r7, #52]	@ 0x34
 800a5f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5fc:	e841 2300 	strex	r3, r2, [r1]
 800a600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1e5      	bne.n	800a5d4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3308      	adds	r3, #8
 800a60e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	e853 3f00 	ldrex	r3, [r3]
 800a616:	613b      	str	r3, [r7, #16]
   return(result);
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a61e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3308      	adds	r3, #8
 800a626:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a628:	623a      	str	r2, [r7, #32]
 800a62a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62c:	69f9      	ldr	r1, [r7, #28]
 800a62e:	6a3a      	ldr	r2, [r7, #32]
 800a630:	e841 2300 	strex	r3, r2, [r1]
 800a634:	61bb      	str	r3, [r7, #24]
   return(result);
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e5      	bne.n	800a608 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3758      	adds	r7, #88	@ 0x58
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	0800a7a3 	.word	0x0800a7a3
 800a64c:	0800a8cf 	.word	0x0800a8cf
 800a650:	0800a90d 	.word	0x0800a90d

0800a654 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a654:	b480      	push	{r7}
 800a656:	b08f      	sub	sp, #60	@ 0x3c
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	61fb      	str	r3, [r7, #28]
   return(result);
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a670:	637b      	str	r3, [r7, #52]	@ 0x34
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a67c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e6      	bne.n	800a65c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3308      	adds	r3, #8
 800a694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a6a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ae:	61ba      	str	r2, [r7, #24]
 800a6b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	6979      	ldr	r1, [r7, #20]
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e5      	bne.n	800a68e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a6ca:	bf00      	nop
 800a6cc:	373c      	adds	r7, #60	@ 0x3c
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b095      	sub	sp, #84	@ 0x54
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e6      	bne.n	800a6de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3308      	adds	r3, #8
 800a716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a726:	f023 0301 	bic.w	r3, r3, #1
 800a72a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3308      	adds	r3, #8
 800a732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a73a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e3      	bne.n	800a710 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d118      	bne.n	800a782 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f023 0310 	bic.w	r3, r3, #16
 800a764:	647b      	str	r3, [r7, #68]	@ 0x44
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a76e:	61bb      	str	r3, [r7, #24]
 800a770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	6979      	ldr	r1, [r7, #20]
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	613b      	str	r3, [r7, #16]
   return(result);
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e6      	bne.n	800a750 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a796:	bf00      	nop
 800a798:	3754      	adds	r7, #84	@ 0x54
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b09c      	sub	sp, #112	@ 0x70
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0320 	and.w	r3, r3, #32
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d171      	bne.n	800a8a2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a7be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ce:	e853 3f00 	ldrex	r3, [r3]
 800a7d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7ec:	e841 2300 	strex	r3, r2, [r1]
 800a7f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1e6      	bne.n	800a7c6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a802:	e853 3f00 	ldrex	r3, [r3]
 800a806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80a:	f023 0301 	bic.w	r3, r3, #1
 800a80e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3308      	adds	r3, #8
 800a816:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a818:	647a      	str	r2, [r7, #68]	@ 0x44
 800a81a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a81e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a820:	e841 2300 	strex	r3, r2, [r1]
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e5      	bne.n	800a7f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a82c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	623b      	str	r3, [r7, #32]
   return(result);
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a842:	663b      	str	r3, [r7, #96]	@ 0x60
 800a844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3308      	adds	r3, #8
 800a84a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a84c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e5      	bne.n	800a82c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a862:	2220      	movs	r2, #32
 800a864:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a86a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d118      	bne.n	800a8a2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	e853 3f00 	ldrex	r3, [r3]
 800a87c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f023 0310 	bic.w	r3, r3, #16
 800a884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a88e:	61fb      	str	r3, [r7, #28]
 800a890:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	69b9      	ldr	r1, [r7, #24]
 800a894:	69fa      	ldr	r2, [r7, #28]
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	617b      	str	r3, [r7, #20]
   return(result);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e6      	bne.n	800a870 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d107      	bne.n	800a8c0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8ba:	f7ff f993 	bl	8009be4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8be:	e002      	b.n	800a8c6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a8c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8c2:	f7f8 fdb5 	bl	8003430 <HAL_UART_RxCpltCallback>
}
 800a8c6:	bf00      	nop
 800a8c8:	3770      	adds	r7, #112	@ 0x70
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d109      	bne.n	800a8fe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8f0:	085b      	lsrs	r3, r3, #1
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff f974 	bl	8009be4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8fc:	e002      	b.n	800a904 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7f8 fdcc 	bl	800349c <HAL_UART_RxHalfCpltCallback>
}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a918:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a920:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a928:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a934:	2b80      	cmp	r3, #128	@ 0x80
 800a936:	d109      	bne.n	800a94c <UART_DMAError+0x40>
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2b21      	cmp	r3, #33	@ 0x21
 800a93c:	d106      	bne.n	800a94c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2200      	movs	r2, #0
 800a942:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a946:	6978      	ldr	r0, [r7, #20]
 800a948:	f7ff fe84 	bl	800a654 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a956:	2b40      	cmp	r3, #64	@ 0x40
 800a958:	d109      	bne.n	800a96e <UART_DMAError+0x62>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b22      	cmp	r3, #34	@ 0x22
 800a95e:	d106      	bne.n	800a96e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2200      	movs	r2, #0
 800a964:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a968:	6978      	ldr	r0, [r7, #20]
 800a96a:	f7ff feb4 	bl	800a6d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a974:	f043 0210 	orr.w	r2, r3, #16
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff f926 	bl	8009bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff f914 	bl	8009bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9a8:	bf00      	nop
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b088      	sub	sp, #32
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9cc:	61fb      	str	r3, [r7, #28]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	61bb      	str	r3, [r7, #24]
 800a9d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6979      	ldr	r1, [r7, #20]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e6      	bne.n	800a9b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7f8 fd85 	bl	8003508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9fe:	bf00      	nop
 800aa00:	3720      	adds	r7, #32
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa0e:	bf00      	nop
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa22:	bf00      	nop
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d101      	bne.n	800aa58 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e027      	b.n	800aaa8 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2224      	movs	r2, #36	@ 0x24
 800aa64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0201 	bic.w	r2, r2, #1
 800aa7e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d101      	bne.n	800aacc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aac8:	2302      	movs	r3, #2
 800aaca:	e02d      	b.n	800ab28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2224      	movs	r2, #36	@ 0x24
 800aad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f022 0201 	bic.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	430a      	orrs	r2, r1
 800ab06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f84f 	bl	800abac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d101      	bne.n	800ab48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab44:	2302      	movs	r3, #2
 800ab46:	e02d      	b.n	800aba4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2224      	movs	r2, #36	@ 0x24
 800ab54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f022 0201 	bic.w	r2, r2, #1
 800ab6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	430a      	orrs	r2, r1
 800ab82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f811 	bl	800abac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2220      	movs	r2, #32
 800ab96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d108      	bne.n	800abce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abcc:	e031      	b.n	800ac32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abce:	2308      	movs	r3, #8
 800abd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abd2:	2308      	movs	r3, #8
 800abd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	0e5b      	lsrs	r3, r3, #25
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 0307 	and.w	r3, r3, #7
 800abe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	0f5b      	lsrs	r3, r3, #29
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f003 0307 	and.w	r3, r3, #7
 800abf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	7b3a      	ldrb	r2, [r7, #12]
 800abfa:	4911      	ldr	r1, [pc, #68]	@ (800ac40 <UARTEx_SetNbDataToProcess+0x94>)
 800abfc:	5c8a      	ldrb	r2, [r1, r2]
 800abfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac02:	7b3a      	ldrb	r2, [r7, #12]
 800ac04:	490f      	ldr	r1, [pc, #60]	@ (800ac44 <UARTEx_SetNbDataToProcess+0x98>)
 800ac06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	7b7a      	ldrb	r2, [r7, #13]
 800ac18:	4909      	ldr	r1, [pc, #36]	@ (800ac40 <UARTEx_SetNbDataToProcess+0x94>)
 800ac1a:	5c8a      	ldrb	r2, [r1, r2]
 800ac1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac20:	7b7a      	ldrb	r2, [r7, #13]
 800ac22:	4908      	ldr	r1, [pc, #32]	@ (800ac44 <UARTEx_SetNbDataToProcess+0x98>)
 800ac24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac26:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac32:	bf00      	nop
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	080154f0 	.word	0x080154f0
 800ac44:	080154f8 	.word	0x080154f8

0800ac48 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800ac4c:	4907      	ldr	r1, [pc, #28]	@ (800ac6c <MX_FATFS_Init+0x24>)
 800ac4e:	4808      	ldr	r0, [pc, #32]	@ (800ac70 <MX_FATFS_Init+0x28>)
 800ac50:	f002 fe26 	bl	800d8a0 <FATFS_LinkDriver>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	e003      	b.n	800ac68 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800ac60:	4b04      	ldr	r3, [pc, #16]	@ (800ac74 <MX_FATFS_Init+0x2c>)
 800ac62:	2201      	movs	r2, #1
 800ac64:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800ac66:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	200011e4 	.word	0x200011e4
 800ac70:	20000018 	.word	0x20000018
 800ac74:	200011e8 	.word	0x200011e8

0800ac78 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ac7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ac92:	4b06      	ldr	r3, [pc, #24]	@ (800acac <USER_initialize+0x24>)
 800ac94:	2201      	movs	r2, #1
 800ac96:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ac98:	4b04      	ldr	r3, [pc, #16]	@ (800acac <USER_initialize+0x24>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20000014 	.word	0x20000014

0800acb0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800acba:	4b06      	ldr	r3, [pc, #24]	@ (800acd4 <USER_status+0x24>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]
    return Stat;
 800acc0:	4b04      	ldr	r3, [pc, #16]	@ (800acd4 <USER_status+0x24>)
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20000014 	.word	0x20000014

0800acd8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ace8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	4603      	mov	r3, r0
 800ad04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ad06:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	603a      	str	r2, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
 800ad20:	460b      	mov	r3, r1
 800ad22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]
    return res;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
	...

0800ad38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	4a08      	ldr	r2, [pc, #32]	@ (800ad68 <disk_status+0x30>)
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	79fa      	ldrb	r2, [r7, #7]
 800ad50:	4905      	ldr	r1, [pc, #20]	@ (800ad68 <disk_status+0x30>)
 800ad52:	440a      	add	r2, r1
 800ad54:	7a12      	ldrb	r2, [r2, #8]
 800ad56:	4610      	mov	r0, r2
 800ad58:	4798      	blx	r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20001214 	.word	0x20001214

0800ad6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	4a0d      	ldr	r2, [pc, #52]	@ (800adb4 <disk_initialize+0x48>)
 800ad7e:	5cd3      	ldrb	r3, [r2, r3]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d111      	bne.n	800ada8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ad84:	79fb      	ldrb	r3, [r7, #7]
 800ad86:	4a0b      	ldr	r2, [pc, #44]	@ (800adb4 <disk_initialize+0x48>)
 800ad88:	2101      	movs	r1, #1
 800ad8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	4a09      	ldr	r2, [pc, #36]	@ (800adb4 <disk_initialize+0x48>)
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	79fa      	ldrb	r2, [r7, #7]
 800ad9a:	4906      	ldr	r1, [pc, #24]	@ (800adb4 <disk_initialize+0x48>)
 800ad9c:	440a      	add	r2, r1
 800ad9e:	7a12      	ldrb	r2, [r2, #8]
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20001214 	.word	0x20001214

0800adb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800adb8:	b590      	push	{r4, r7, lr}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]
 800adc2:	603b      	str	r3, [r7, #0]
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	4a0a      	ldr	r2, [pc, #40]	@ (800adf4 <disk_read+0x3c>)
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	689c      	ldr	r4, [r3, #8]
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4a07      	ldr	r2, [pc, #28]	@ (800adf4 <disk_read+0x3c>)
 800add8:	4413      	add	r3, r2
 800adda:	7a18      	ldrb	r0, [r3, #8]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	68b9      	ldr	r1, [r7, #8]
 800ade2:	47a0      	blx	r4
 800ade4:	4603      	mov	r3, r0
 800ade6:	75fb      	strb	r3, [r7, #23]
  return res;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adea:	4618      	mov	r0, r3
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd90      	pop	{r4, r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20001214 	.word	0x20001214

0800adf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800adf8:	b590      	push	{r4, r7, lr}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	607a      	str	r2, [r7, #4]
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
 800ae0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae34 <disk_write+0x3c>)
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	68dc      	ldr	r4, [r3, #12]
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	4a07      	ldr	r2, [pc, #28]	@ (800ae34 <disk_write+0x3c>)
 800ae18:	4413      	add	r3, r2
 800ae1a:	7a18      	ldrb	r0, [r3, #8]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	68b9      	ldr	r1, [r7, #8]
 800ae22:	47a0      	blx	r4
 800ae24:	4603      	mov	r3, r0
 800ae26:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd90      	pop	{r4, r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20001214 	.word	0x20001214

0800ae38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	603a      	str	r2, [r7, #0]
 800ae42:	71fb      	strb	r3, [r7, #7]
 800ae44:	460b      	mov	r3, r1
 800ae46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	4a09      	ldr	r2, [pc, #36]	@ (800ae70 <disk_ioctl+0x38>)
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	79fa      	ldrb	r2, [r7, #7]
 800ae56:	4906      	ldr	r1, [pc, #24]	@ (800ae70 <disk_ioctl+0x38>)
 800ae58:	440a      	add	r2, r1
 800ae5a:	7a10      	ldrb	r0, [r2, #8]
 800ae5c:	79b9      	ldrb	r1, [r7, #6]
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	4798      	blx	r3
 800ae62:	4603      	mov	r3, r0
 800ae64:	73fb      	strb	r3, [r7, #15]
  return res;
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	20001214 	.word	0x20001214

0800ae74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ae84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae88:	021b      	lsls	r3, r3, #8
 800ae8a:	b21a      	sxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	b21b      	sxth	r3, r3
 800ae92:	4313      	orrs	r3, r2
 800ae94:	b21b      	sxth	r3, r3
 800ae96:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ae98:	89fb      	ldrh	r3, [r7, #14]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aea6:	b480      	push	{r7}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3303      	adds	r3, #3
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	021b      	lsls	r3, r3, #8
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	3202      	adds	r2, #2
 800aebe:	7812      	ldrb	r2, [r2, #0]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	021b      	lsls	r3, r3, #8
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	3201      	adds	r2, #1
 800aecc:	7812      	ldrb	r2, [r2, #0]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	7812      	ldrb	r2, [r2, #0]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]
	return rv;
 800aede:	68fb      	ldr	r3, [r7, #12]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	887a      	ldrh	r2, [r7, #2]
 800af00:	b2d2      	uxtb	r2, r2
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	887b      	ldrh	r3, [r7, #2]
 800af06:	0a1b      	lsrs	r3, r3, #8
 800af08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	887a      	ldrh	r2, [r7, #2]
 800af12:	b2d2      	uxtb	r2, r2
 800af14:	701a      	strb	r2, [r3, #0]
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	607a      	str	r2, [r7, #4]
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	b2d2      	uxtb	r2, r2
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	0a1b      	lsrs	r3, r3, #8
 800af3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	0a1b      	lsrs	r3, r3, #8
 800af4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	607a      	str	r2, [r7, #4]
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	b2d2      	uxtb	r2, r2
 800af5a:	701a      	strb	r2, [r3, #0]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	0a1b      	lsrs	r3, r3, #8
 800af60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	b2d2      	uxtb	r2, r2
 800af6c:	701a      	strb	r2, [r3, #0]
}
 800af6e:	bf00      	nop
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800af7a:	b480      	push	{r7}
 800af7c:	b087      	sub	sp, #28
 800af7e:	af00      	add	r7, sp, #0
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00d      	beq.n	800afb0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	1c53      	adds	r3, r2, #1
 800af98:	613b      	str	r3, [r7, #16]
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	1c59      	adds	r1, r3, #1
 800af9e:	6179      	str	r1, [r7, #20]
 800afa0:	7812      	ldrb	r2, [r2, #0]
 800afa2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	607b      	str	r3, [r7, #4]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1f1      	bne.n	800af94 <mem_cpy+0x1a>
	}
}
 800afb0:	bf00      	nop
 800afb2:	371c      	adds	r7, #28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800afbc:	b480      	push	{r7}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	1c5a      	adds	r2, r3, #1
 800afd0:	617a      	str	r2, [r7, #20]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	b2d2      	uxtb	r2, r2
 800afd6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3b01      	subs	r3, #1
 800afdc:	607b      	str	r3, [r7, #4]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1f3      	bne.n	800afcc <mem_set+0x10>
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aff2:	b480      	push	{r7}
 800aff4:	b089      	sub	sp, #36	@ 0x24
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	61fb      	str	r3, [r7, #28]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	61fa      	str	r2, [r7, #28]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	4619      	mov	r1, r3
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	61ba      	str	r2, [r7, #24]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	1acb      	subs	r3, r1, r3
 800b01e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3b01      	subs	r3, #1
 800b024:	607b      	str	r3, [r7, #4]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <mem_cmp+0x40>
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0eb      	beq.n	800b00a <mem_cmp+0x18>

	return r;
 800b032:	697b      	ldr	r3, [r7, #20]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3724      	adds	r7, #36	@ 0x24
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b04a:	e002      	b.n	800b052 <chk_chr+0x12>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3301      	adds	r3, #1
 800b050:	607b      	str	r3, [r7, #4]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d005      	beq.n	800b066 <chk_chr+0x26>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	4293      	cmp	r3, r2
 800b064:	d1f2      	bne.n	800b04c <chk_chr+0xc>
	return *str;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b082      	sub	sp, #8
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d009      	beq.n	800b098 <lock_fs+0x22>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	4618      	mov	r0, r3
 800b08a:	f002 fc42 	bl	800d912 <ff_req_grant>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <lock_fs+0x22>
 800b094:	2301      	movs	r3, #1
 800b096:	e000      	b.n	800b09a <lock_fs+0x24>
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00d      	beq.n	800b0d0 <unlock_fs+0x2e>
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	2b0c      	cmp	r3, #12
 800b0b8:	d00a      	beq.n	800b0d0 <unlock_fs+0x2e>
 800b0ba:	78fb      	ldrb	r3, [r7, #3]
 800b0bc:	2b0b      	cmp	r3, #11
 800b0be:	d007      	beq.n	800b0d0 <unlock_fs+0x2e>
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	2b0f      	cmp	r3, #15
 800b0c4:	d004      	beq.n	800b0d0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f002 fc36 	bl	800d93c <ff_rel_grant>
	}
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60bb      	str	r3, [r7, #8]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	e029      	b.n	800b140 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b0ec:	4a27      	ldr	r2, [pc, #156]	@ (800b18c <chk_lock+0xb4>)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	011b      	lsls	r3, r3, #4
 800b0f2:	4413      	add	r3, r2
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d01d      	beq.n	800b136 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b0fa:	4a24      	ldr	r2, [pc, #144]	@ (800b18c <chk_lock+0xb4>)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	4413      	add	r3, r2
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d116      	bne.n	800b13a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b10c:	4a1f      	ldr	r2, [pc, #124]	@ (800b18c <chk_lock+0xb4>)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	011b      	lsls	r3, r3, #4
 800b112:	4413      	add	r3, r2
 800b114:	3304      	adds	r3, #4
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d10c      	bne.n	800b13a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b120:	4a1a      	ldr	r2, [pc, #104]	@ (800b18c <chk_lock+0xb4>)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	4413      	add	r3, r2
 800b128:	3308      	adds	r3, #8
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b130:	429a      	cmp	r2, r3
 800b132:	d102      	bne.n	800b13a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b134:	e007      	b.n	800b146 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b136:	2301      	movs	r3, #1
 800b138:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3301      	adds	r3, #1
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d9d2      	bls.n	800b0ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d109      	bne.n	800b160 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <chk_lock+0x80>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b02      	cmp	r3, #2
 800b156:	d101      	bne.n	800b15c <chk_lock+0x84>
 800b158:	2300      	movs	r3, #0
 800b15a:	e010      	b.n	800b17e <chk_lock+0xa6>
 800b15c:	2312      	movs	r3, #18
 800b15e:	e00e      	b.n	800b17e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d108      	bne.n	800b178 <chk_lock+0xa0>
 800b166:	4a09      	ldr	r2, [pc, #36]	@ (800b18c <chk_lock+0xb4>)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	011b      	lsls	r3, r3, #4
 800b16c:	4413      	add	r3, r2
 800b16e:	330c      	adds	r3, #12
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b176:	d101      	bne.n	800b17c <chk_lock+0xa4>
 800b178:	2310      	movs	r3, #16
 800b17a:	e000      	b.n	800b17e <chk_lock+0xa6>
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	200011f4 	.word	0x200011f4

0800b190 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b196:	2300      	movs	r3, #0
 800b198:	607b      	str	r3, [r7, #4]
 800b19a:	e002      	b.n	800b1a2 <enq_lock+0x12>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	607b      	str	r3, [r7, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d806      	bhi.n	800b1b6 <enq_lock+0x26>
 800b1a8:	4a09      	ldr	r2, [pc, #36]	@ (800b1d0 <enq_lock+0x40>)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	011b      	lsls	r3, r3, #4
 800b1ae:	4413      	add	r3, r2
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1f2      	bne.n	800b19c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	bf14      	ite	ne
 800b1bc:	2301      	movne	r3, #1
 800b1be:	2300      	moveq	r3, #0
 800b1c0:	b2db      	uxtb	r3, r3
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	200011f4 	.word	0x200011f4

0800b1d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	e01f      	b.n	800b224 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b1e4:	4a41      	ldr	r2, [pc, #260]	@ (800b2ec <inc_lock+0x118>)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	011b      	lsls	r3, r3, #4
 800b1ea:	4413      	add	r3, r2
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d113      	bne.n	800b21e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b1f6:	4a3d      	ldr	r2, [pc, #244]	@ (800b2ec <inc_lock+0x118>)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	4413      	add	r3, r2
 800b1fe:	3304      	adds	r3, #4
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b206:	429a      	cmp	r2, r3
 800b208:	d109      	bne.n	800b21e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b20a:	4a38      	ldr	r2, [pc, #224]	@ (800b2ec <inc_lock+0x118>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	011b      	lsls	r3, r3, #4
 800b210:	4413      	add	r3, r2
 800b212:	3308      	adds	r3, #8
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d006      	beq.n	800b22c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d9dc      	bls.n	800b1e4 <inc_lock+0x10>
 800b22a:	e000      	b.n	800b22e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b22c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b02      	cmp	r3, #2
 800b232:	d132      	bne.n	800b29a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b234:	2300      	movs	r3, #0
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	e002      	b.n	800b240 <inc_lock+0x6c>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d806      	bhi.n	800b254 <inc_lock+0x80>
 800b246:	4a29      	ldr	r2, [pc, #164]	@ (800b2ec <inc_lock+0x118>)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	4413      	add	r3, r2
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1f2      	bne.n	800b23a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d101      	bne.n	800b25e <inc_lock+0x8a>
 800b25a:	2300      	movs	r3, #0
 800b25c:	e040      	b.n	800b2e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	4922      	ldr	r1, [pc, #136]	@ (800b2ec <inc_lock+0x118>)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	440b      	add	r3, r1
 800b26a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689a      	ldr	r2, [r3, #8]
 800b270:	491e      	ldr	r1, [pc, #120]	@ (800b2ec <inc_lock+0x118>)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	440b      	add	r3, r1
 800b278:	3304      	adds	r3, #4
 800b27a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	695a      	ldr	r2, [r3, #20]
 800b280:	491a      	ldr	r1, [pc, #104]	@ (800b2ec <inc_lock+0x118>)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	011b      	lsls	r3, r3, #4
 800b286:	440b      	add	r3, r1
 800b288:	3308      	adds	r3, #8
 800b28a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b28c:	4a17      	ldr	r2, [pc, #92]	@ (800b2ec <inc_lock+0x118>)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	4413      	add	r3, r2
 800b294:	330c      	adds	r3, #12
 800b296:	2200      	movs	r2, #0
 800b298:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d009      	beq.n	800b2b4 <inc_lock+0xe0>
 800b2a0:	4a12      	ldr	r2, [pc, #72]	@ (800b2ec <inc_lock+0x118>)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	011b      	lsls	r3, r3, #4
 800b2a6:	4413      	add	r3, r2
 800b2a8:	330c      	adds	r3, #12
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <inc_lock+0xe0>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e015      	b.n	800b2e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d108      	bne.n	800b2cc <inc_lock+0xf8>
 800b2ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b2ec <inc_lock+0x118>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	011b      	lsls	r3, r3, #4
 800b2c0:	4413      	add	r3, r2
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	e001      	b.n	800b2d0 <inc_lock+0xfc>
 800b2cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2d0:	4906      	ldr	r1, [pc, #24]	@ (800b2ec <inc_lock+0x118>)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	011b      	lsls	r3, r3, #4
 800b2d6:	440b      	add	r3, r1
 800b2d8:	330c      	adds	r3, #12
 800b2da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3301      	adds	r3, #1
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	200011f4 	.word	0x200011f4

0800b2f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	607b      	str	r3, [r7, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d825      	bhi.n	800b350 <dec_lock+0x60>
		n = Files[i].ctr;
 800b304:	4a17      	ldr	r2, [pc, #92]	@ (800b364 <dec_lock+0x74>)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	4413      	add	r3, r2
 800b30c:	330c      	adds	r3, #12
 800b30e:	881b      	ldrh	r3, [r3, #0]
 800b310:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b312:	89fb      	ldrh	r3, [r7, #14]
 800b314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b318:	d101      	bne.n	800b31e <dec_lock+0x2e>
 800b31a:	2300      	movs	r3, #0
 800b31c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b31e:	89fb      	ldrh	r3, [r7, #14]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <dec_lock+0x3a>
 800b324:	89fb      	ldrh	r3, [r7, #14]
 800b326:	3b01      	subs	r3, #1
 800b328:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b32a:	4a0e      	ldr	r2, [pc, #56]	@ (800b364 <dec_lock+0x74>)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	011b      	lsls	r3, r3, #4
 800b330:	4413      	add	r3, r2
 800b332:	330c      	adds	r3, #12
 800b334:	89fa      	ldrh	r2, [r7, #14]
 800b336:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b338:	89fb      	ldrh	r3, [r7, #14]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d105      	bne.n	800b34a <dec_lock+0x5a>
 800b33e:	4a09      	ldr	r2, [pc, #36]	@ (800b364 <dec_lock+0x74>)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	011b      	lsls	r3, r3, #4
 800b344:	4413      	add	r3, r2
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	737b      	strb	r3, [r7, #13]
 800b34e:	e001      	b.n	800b354 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b350:	2302      	movs	r3, #2
 800b352:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b354:	7b7b      	ldrb	r3, [r7, #13]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	200011f4 	.word	0x200011f4

0800b368 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	e010      	b.n	800b398 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b376:	4a0d      	ldr	r2, [pc, #52]	@ (800b3ac <clear_lock+0x44>)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	4413      	add	r3, r2
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	429a      	cmp	r2, r3
 800b384:	d105      	bne.n	800b392 <clear_lock+0x2a>
 800b386:	4a09      	ldr	r2, [pc, #36]	@ (800b3ac <clear_lock+0x44>)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	011b      	lsls	r3, r3, #4
 800b38c:	4413      	add	r3, r2
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3301      	adds	r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d9eb      	bls.n	800b376 <clear_lock+0xe>
	}
}
 800b39e:	bf00      	nop
 800b3a0:	bf00      	nop
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	200011f4 	.word	0x200011f4

0800b3b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	78db      	ldrb	r3, [r3, #3]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d034      	beq.n	800b42e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	7858      	ldrb	r0, [r3, #1]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	f7ff fd0e 	bl	800adf8 <disk_write>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	73fb      	strb	r3, [r7, #15]
 800b3e6:	e022      	b.n	800b42e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	1ad2      	subs	r2, r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d217      	bcs.n	800b42e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	789b      	ldrb	r3, [r3, #2]
 800b402:	613b      	str	r3, [r7, #16]
 800b404:	e010      	b.n	800b428 <sync_window+0x78>
					wsect += fs->fsize;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	4413      	add	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7858      	ldrb	r0, [r3, #1]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b41a:	2301      	movs	r3, #1
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	f7ff fceb 	bl	800adf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3b01      	subs	r3, #1
 800b426:	613b      	str	r3, [r7, #16]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d8eb      	bhi.n	800b406 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d01b      	beq.n	800b488 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff ffad 	bl	800b3b0 <sync_window>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d113      	bne.n	800b488 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	7858      	ldrb	r0, [r3, #1]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b46a:	2301      	movs	r3, #1
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	f7ff fca3 	bl	800adb8 <disk_read>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d004      	beq.n	800b482 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b47e:	2301      	movs	r3, #1
 800b480:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff ff87 	bl	800b3b0 <sync_window>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d158      	bne.n	800b55e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d148      	bne.n	800b546 <sync_fs+0xb2>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	791b      	ldrb	r3, [r3, #4]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d144      	bne.n	800b546 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3334      	adds	r3, #52	@ 0x34
 800b4c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7ff fd78 	bl	800afbc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3334      	adds	r3, #52	@ 0x34
 800b4d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b4d4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff fd07 	bl	800aeec <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3334      	adds	r3, #52	@ 0x34
 800b4e2:	4921      	ldr	r1, [pc, #132]	@ (800b568 <sync_fs+0xd4>)
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff fd1c 	bl	800af22 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3334      	adds	r3, #52	@ 0x34
 800b4ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b4f2:	491e      	ldr	r1, [pc, #120]	@ (800b56c <sync_fs+0xd8>)
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fd14 	bl	800af22 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	3334      	adds	r3, #52	@ 0x34
 800b4fe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	695b      	ldr	r3, [r3, #20]
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7ff fd0a 	bl	800af22 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3334      	adds	r3, #52	@ 0x34
 800b512:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f7ff fd00 	bl	800af22 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	1c5a      	adds	r2, r3, #1
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	7858      	ldrb	r0, [r3, #1]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b53a:	2301      	movs	r3, #1
 800b53c:	f7ff fc5c 	bl	800adf8 <disk_write>
			fs->fsi_flag = 0;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	785b      	ldrb	r3, [r3, #1]
 800b54a:	2200      	movs	r2, #0
 800b54c:	2100      	movs	r1, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff fc72 	bl	800ae38 <disk_ioctl>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <sync_fs+0xca>
 800b55a:	2301      	movs	r3, #1
 800b55c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	41615252 	.word	0x41615252
 800b56c:	61417272 	.word	0x61417272

0800b570 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	3b02      	subs	r3, #2
 800b57e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	3b02      	subs	r3, #2
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d301      	bcc.n	800b590 <clust2sect+0x20>
 800b58c:	2300      	movs	r3, #0
 800b58e:	e008      	b.n	800b5a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	895b      	ldrh	r3, [r3, #10]
 800b594:	461a      	mov	r2, r3
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	fb03 f202 	mul.w	r2, r3, r2
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a0:	4413      	add	r3, r2
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b086      	sub	sp, #24
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d904      	bls.n	800b5ce <get_fat+0x20>
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d302      	bcc.n	800b5d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e08e      	b.n	800b6f2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	d061      	beq.n	800b6a6 <get_fat+0xf8>
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	dc7b      	bgt.n	800b6de <get_fat+0x130>
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d002      	beq.n	800b5f0 <get_fat+0x42>
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d041      	beq.n	800b672 <get_fat+0xc4>
 800b5ee:	e076      	b.n	800b6de <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	085b      	lsrs	r3, r3, #1
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	0a5b      	lsrs	r3, r3, #9
 800b606:	4413      	add	r3, r2
 800b608:	4619      	mov	r1, r3
 800b60a:	6938      	ldr	r0, [r7, #16]
 800b60c:	f7ff ff14 	bl	800b438 <move_window>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d166      	bne.n	800b6e4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	60fa      	str	r2, [r7, #12]
 800b61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	4413      	add	r3, r2
 800b624:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b628:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	0a5b      	lsrs	r3, r3, #9
 800b632:	4413      	add	r3, r2
 800b634:	4619      	mov	r1, r3
 800b636:	6938      	ldr	r0, [r7, #16]
 800b638:	f7ff fefe 	bl	800b438 <move_window>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d152      	bne.n	800b6e8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4413      	add	r3, r2
 800b64c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	4313      	orrs	r3, r2
 800b656:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <get_fat+0xba>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	091b      	lsrs	r3, r3, #4
 800b666:	e002      	b.n	800b66e <get_fat+0xc0>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b66e:	617b      	str	r3, [r7, #20]
			break;
 800b670:	e03f      	b.n	800b6f2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	0a1b      	lsrs	r3, r3, #8
 800b67a:	4413      	add	r3, r2
 800b67c:	4619      	mov	r1, r3
 800b67e:	6938      	ldr	r0, [r7, #16]
 800b680:	f7ff feda 	bl	800b438 <move_window>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d130      	bne.n	800b6ec <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b698:	4413      	add	r3, r2
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fbea 	bl	800ae74 <ld_word>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	617b      	str	r3, [r7, #20]
			break;
 800b6a4:	e025      	b.n	800b6f2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	09db      	lsrs	r3, r3, #7
 800b6ae:	4413      	add	r3, r2
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6938      	ldr	r0, [r7, #16]
 800b6b4:	f7ff fec0 	bl	800b438 <move_window>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d118      	bne.n	800b6f0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b6cc:	4413      	add	r3, r2
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff fbe9 	bl	800aea6 <ld_dword>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b6da:	617b      	str	r3, [r7, #20]
			break;
 800b6dc:	e009      	b.n	800b6f2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b6de:	2301      	movs	r3, #1
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	e006      	b.n	800b6f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6e4:	bf00      	nop
 800b6e6:	e004      	b.n	800b6f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6e8:	bf00      	nop
 800b6ea:	e002      	b.n	800b6f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6ec:	bf00      	nop
 800b6ee:	e000      	b.n	800b6f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6f0:	bf00      	nop
		}
	}

	return val;
 800b6f2:	697b      	ldr	r3, [r7, #20]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b6fc:	b590      	push	{r4, r7, lr}
 800b6fe:	b089      	sub	sp, #36	@ 0x24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b708:	2302      	movs	r3, #2
 800b70a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	f240 80d9 	bls.w	800b8c6 <put_fat+0x1ca>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	f080 80d3 	bcs.w	800b8c6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b03      	cmp	r3, #3
 800b726:	f000 8096 	beq.w	800b856 <put_fat+0x15a>
 800b72a:	2b03      	cmp	r3, #3
 800b72c:	f300 80cb 	bgt.w	800b8c6 <put_fat+0x1ca>
 800b730:	2b01      	cmp	r3, #1
 800b732:	d002      	beq.n	800b73a <put_fat+0x3e>
 800b734:	2b02      	cmp	r3, #2
 800b736:	d06e      	beq.n	800b816 <put_fat+0x11a>
 800b738:	e0c5      	b.n	800b8c6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	085b      	lsrs	r3, r3, #1
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	4413      	add	r3, r2
 800b746:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	0a5b      	lsrs	r3, r3, #9
 800b750:	4413      	add	r3, r2
 800b752:	4619      	mov	r1, r3
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7ff fe6f 	bl	800b438 <move_window>
 800b75a:	4603      	mov	r3, r0
 800b75c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b75e:	7ffb      	ldrb	r3, [r7, #31]
 800b760:	2b00      	cmp	r3, #0
 800b762:	f040 80a9 	bne.w	800b8b8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	1c59      	adds	r1, r3, #1
 800b770:	61b9      	str	r1, [r7, #24]
 800b772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b776:	4413      	add	r3, r2
 800b778:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00d      	beq.n	800b7a0 <put_fat+0xa4>
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	b25b      	sxtb	r3, r3
 800b78a:	f003 030f 	and.w	r3, r3, #15
 800b78e:	b25a      	sxtb	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	b25b      	sxtb	r3, r3
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	b25b      	sxtb	r3, r3
 800b798:	4313      	orrs	r3, r2
 800b79a:	b25b      	sxtb	r3, r3
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	e001      	b.n	800b7a4 <put_fat+0xa8>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	0a5b      	lsrs	r3, r3, #9
 800b7b6:	4413      	add	r3, r2
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7ff fe3c 	bl	800b438 <move_window>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7c4:	7ffb      	ldrb	r3, [r7, #31]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d178      	bne.n	800b8bc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d6:	4413      	add	r3, r2
 800b7d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d003      	beq.n	800b7ec <put_fat+0xf0>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	091b      	lsrs	r3, r3, #4
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	e00e      	b.n	800b80a <put_fat+0x10e>
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	b25b      	sxtb	r3, r3
 800b7f2:	f023 030f 	bic.w	r3, r3, #15
 800b7f6:	b25a      	sxtb	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	b25b      	sxtb	r3, r3
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	b25b      	sxtb	r3, r3
 800b804:	4313      	orrs	r3, r2
 800b806:	b25b      	sxtb	r3, r3
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2201      	movs	r2, #1
 800b812:	70da      	strb	r2, [r3, #3]
			break;
 800b814:	e057      	b.n	800b8c6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	0a1b      	lsrs	r3, r3, #8
 800b81e:	4413      	add	r3, r2
 800b820:	4619      	mov	r1, r3
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7ff fe08 	bl	800b438 <move_window>
 800b828:	4603      	mov	r3, r0
 800b82a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b82c:	7ffb      	ldrb	r3, [r7, #31]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d146      	bne.n	800b8c0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b840:	4413      	add	r3, r2
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	b292      	uxth	r2, r2
 800b846:	4611      	mov	r1, r2
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff fb4f 	bl	800aeec <st_word>
			fs->wflag = 1;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2201      	movs	r2, #1
 800b852:	70da      	strb	r2, [r3, #3]
			break;
 800b854:	e037      	b.n	800b8c6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	09db      	lsrs	r3, r3, #7
 800b85e:	4413      	add	r3, r2
 800b860:	4619      	mov	r1, r3
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7ff fde8 	bl	800b438 <move_window>
 800b868:	4603      	mov	r3, r0
 800b86a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b86c:	7ffb      	ldrb	r3, [r7, #31]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d128      	bne.n	800b8c4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b886:	4413      	add	r3, r2
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff fb0c 	bl	800aea6 <ld_dword>
 800b88e:	4603      	mov	r3, r0
 800b890:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b894:	4323      	orrs	r3, r4
 800b896:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b8a6:	4413      	add	r3, r2
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fb39 	bl	800af22 <st_dword>
			fs->wflag = 1;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	70da      	strb	r2, [r3, #3]
			break;
 800b8b6:	e006      	b.n	800b8c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b8b8:	bf00      	nop
 800b8ba:	e004      	b.n	800b8c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b8bc:	bf00      	nop
 800b8be:	e002      	b.n	800b8c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b8c0:	bf00      	nop
 800b8c2:	e000      	b.n	800b8c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b8c4:	bf00      	nop
		}
	}
	return res;
 800b8c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3724      	adds	r7, #36	@ 0x24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd90      	pop	{r4, r7, pc}

0800b8d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d904      	bls.n	800b8f6 <remove_chain+0x26>
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d301      	bcc.n	800b8fa <remove_chain+0x2a>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e04b      	b.n	800b992 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00c      	beq.n	800b91a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b900:	f04f 32ff 	mov.w	r2, #4294967295
 800b904:	6879      	ldr	r1, [r7, #4]
 800b906:	69b8      	ldr	r0, [r7, #24]
 800b908:	f7ff fef8 	bl	800b6fc <put_fat>
 800b90c:	4603      	mov	r3, r0
 800b90e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b910:	7ffb      	ldrb	r3, [r7, #31]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <remove_chain+0x4a>
 800b916:	7ffb      	ldrb	r3, [r7, #31]
 800b918:	e03b      	b.n	800b992 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b91a:	68b9      	ldr	r1, [r7, #8]
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f7ff fe46 	bl	800b5ae <get_fat>
 800b922:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d031      	beq.n	800b98e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d101      	bne.n	800b934 <remove_chain+0x64>
 800b930:	2302      	movs	r3, #2
 800b932:	e02e      	b.n	800b992 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93a:	d101      	bne.n	800b940 <remove_chain+0x70>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e028      	b.n	800b992 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b940:	2200      	movs	r2, #0
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	69b8      	ldr	r0, [r7, #24]
 800b946:	f7ff fed9 	bl	800b6fc <put_fat>
 800b94a:	4603      	mov	r3, r0
 800b94c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b94e:	7ffb      	ldrb	r3, [r7, #31]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <remove_chain+0x88>
 800b954:	7ffb      	ldrb	r3, [r7, #31]
 800b956:	e01c      	b.n	800b992 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	695a      	ldr	r2, [r3, #20]
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	3b02      	subs	r3, #2
 800b962:	429a      	cmp	r2, r3
 800b964:	d20b      	bcs.n	800b97e <remove_chain+0xae>
			fs->free_clst++;
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	791b      	ldrb	r3, [r3, #4]
 800b974:	f043 0301 	orr.w	r3, r3, #1
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d3c6      	bcc.n	800b91a <remove_chain+0x4a>
 800b98c:	e000      	b.n	800b990 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b98e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b088      	sub	sp, #32
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10d      	bne.n	800b9cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <create_chain+0x2c>
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	69ba      	ldr	r2, [r7, #24]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d31b      	bcc.n	800b9fe <create_chain+0x64>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	61bb      	str	r3, [r7, #24]
 800b9ca:	e018      	b.n	800b9fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff fded 	bl	800b5ae <get_fat>
 800b9d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d801      	bhi.n	800b9e0 <create_chain+0x46>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e070      	b.n	800bac2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e6:	d101      	bne.n	800b9ec <create_chain+0x52>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	e06a      	b.n	800bac2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d201      	bcs.n	800b9fa <create_chain+0x60>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	e063      	b.n	800bac2 <create_chain+0x128>
		scl = clst;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	3301      	adds	r3, #1
 800ba06:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	69fa      	ldr	r2, [r7, #28]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d307      	bcc.n	800ba22 <create_chain+0x88>
				ncl = 2;
 800ba12:	2302      	movs	r3, #2
 800ba14:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ba16:	69fa      	ldr	r2, [r7, #28]
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d901      	bls.n	800ba22 <create_chain+0x88>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e04f      	b.n	800bac2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ba22:	69f9      	ldr	r1, [r7, #28]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff fdc2 	bl	800b5ae <get_fat>
 800ba2a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00e      	beq.n	800ba50 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d003      	beq.n	800ba40 <create_chain+0xa6>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3e:	d101      	bne.n	800ba44 <create_chain+0xaa>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	e03e      	b.n	800bac2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ba44:	69fa      	ldr	r2, [r7, #28]
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d1da      	bne.n	800ba02 <create_chain+0x68>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	e038      	b.n	800bac2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ba50:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	69f9      	ldr	r1, [r7, #28]
 800ba58:	6938      	ldr	r0, [r7, #16]
 800ba5a:	f7ff fe4f 	bl	800b6fc <put_fat>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d109      	bne.n	800ba7c <create_chain+0xe2>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d006      	beq.n	800ba7c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ba6e:	69fa      	ldr	r2, [r7, #28]
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6938      	ldr	r0, [r7, #16]
 800ba74:	f7ff fe42 	bl	800b6fc <put_fat>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ba7c:	7dfb      	ldrb	r3, [r7, #23]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d116      	bne.n	800bab0 <create_chain+0x116>
		fs->last_clst = ncl;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	69fa      	ldr	r2, [r7, #28]
 800ba86:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	695a      	ldr	r2, [r3, #20]
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	3b02      	subs	r3, #2
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d804      	bhi.n	800baa0 <create_chain+0x106>
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	1e5a      	subs	r2, r3, #1
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	791b      	ldrb	r3, [r3, #4]
 800baa4:	f043 0301 	orr.w	r3, r3, #1
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	711a      	strb	r2, [r3, #4]
 800baae:	e007      	b.n	800bac0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d102      	bne.n	800babc <create_chain+0x122>
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295
 800baba:	e000      	b.n	800babe <create_chain+0x124>
 800babc:	2301      	movs	r3, #1
 800babe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bac0:	69fb      	ldr	r3, [r7, #28]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3720      	adds	r7, #32
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800baca:	b480      	push	{r7}
 800bacc:	b087      	sub	sp, #28
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bade:	3304      	adds	r3, #4
 800bae0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	0a5b      	lsrs	r3, r3, #9
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	8952      	ldrh	r2, [r2, #10]
 800baea:	fbb3 f3f2 	udiv	r3, r3, r2
 800baee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	1d1a      	adds	r2, r3, #4
 800baf4:	613a      	str	r2, [r7, #16]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d101      	bne.n	800bb04 <clmt_clust+0x3a>
 800bb00:	2300      	movs	r3, #0
 800bb02:	e010      	b.n	800bb26 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d307      	bcc.n	800bb1c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	3304      	adds	r3, #4
 800bb18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bb1a:	e7e9      	b.n	800baf0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bb1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	4413      	add	r3, r2
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b086      	sub	sp, #24
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb48:	d204      	bcs.n	800bb54 <dir_sdi+0x22>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	f003 031f 	and.w	r3, r3, #31
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bb54:	2302      	movs	r3, #2
 800bb56:	e063      	b.n	800bc20 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <dir_sdi+0x46>
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d902      	bls.n	800bb78 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10c      	bne.n	800bb98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	095b      	lsrs	r3, r3, #5
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	8912      	ldrh	r2, [r2, #8]
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d301      	bcc.n	800bb8e <dir_sdi+0x5c>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e048      	b.n	800bc20 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	61da      	str	r2, [r3, #28]
 800bb96:	e029      	b.n	800bbec <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	895b      	ldrh	r3, [r3, #10]
 800bb9c:	025b      	lsls	r3, r3, #9
 800bb9e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bba0:	e019      	b.n	800bbd6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6979      	ldr	r1, [r7, #20]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fd01 	bl	800b5ae <get_fat>
 800bbac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb4:	d101      	bne.n	800bbba <dir_sdi+0x88>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e032      	b.n	800bc20 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d904      	bls.n	800bbca <dir_sdi+0x98>
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d301      	bcc.n	800bbce <dir_sdi+0x9c>
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e028      	b.n	800bc20 <dir_sdi+0xee>
			ofs -= csz;
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d2e1      	bcs.n	800bba2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bbde:	6979      	ldr	r1, [r7, #20]
 800bbe0:	6938      	ldr	r0, [r7, #16]
 800bbe2:	f7ff fcc5 	bl	800b570 <clust2sect>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	69db      	ldr	r3, [r3, #28]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <dir_sdi+0xcc>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e010      	b.n	800bc20 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	69da      	ldr	r2, [r3, #28]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	0a5b      	lsrs	r3, r3, #9
 800bc06:	441a      	add	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc18:	441a      	add	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	3320      	adds	r3, #32
 800bc3e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d003      	beq.n	800bc50 <dir_next+0x28>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc4e:	d301      	bcc.n	800bc54 <dir_next+0x2c>
 800bc50:	2304      	movs	r3, #4
 800bc52:	e0aa      	b.n	800bdaa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f040 8098 	bne.w	800bd90 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10b      	bne.n	800bc8a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	095b      	lsrs	r3, r3, #5
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	8912      	ldrh	r2, [r2, #8]
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	f0c0 8088 	bcc.w	800bd90 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	61da      	str	r2, [r3, #28]
 800bc86:	2304      	movs	r3, #4
 800bc88:	e08f      	b.n	800bdaa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	0a5b      	lsrs	r3, r3, #9
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	8952      	ldrh	r2, [r2, #10]
 800bc92:	3a01      	subs	r2, #1
 800bc94:	4013      	ands	r3, r2
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d17a      	bne.n	800bd90 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7ff fc83 	bl	800b5ae <get_fat>
 800bca8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d801      	bhi.n	800bcb4 <dir_next+0x8c>
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	e07a      	b.n	800bdaa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d101      	bne.n	800bcc0 <dir_next+0x98>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e074      	b.n	800bdaa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d358      	bcc.n	800bd7c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d104      	bne.n	800bcda <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	61da      	str	r2, [r3, #28]
 800bcd6:	2304      	movs	r3, #4
 800bcd8:	e067      	b.n	800bdaa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f7ff fe59 	bl	800b99a <create_chain>
 800bce8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <dir_next+0xcc>
 800bcf0:	2307      	movs	r3, #7
 800bcf2:	e05a      	b.n	800bdaa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d101      	bne.n	800bcfe <dir_next+0xd6>
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	e055      	b.n	800bdaa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d101      	bne.n	800bd0a <dir_next+0xe2>
 800bd06:	2301      	movs	r3, #1
 800bd08:	e04f      	b.n	800bdaa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7ff fb50 	bl	800b3b0 <sync_window>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <dir_next+0xf2>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e047      	b.n	800bdaa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3334      	adds	r3, #52	@ 0x34
 800bd1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff f949 	bl	800afbc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	613b      	str	r3, [r7, #16]
 800bd2e:	6979      	ldr	r1, [r7, #20]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f7ff fc1d 	bl	800b570 <clust2sect>
 800bd36:	4602      	mov	r2, r0
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd3c:	e012      	b.n	800bd64 <dir_next+0x13c>
						fs->wflag = 1;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f7ff fb33 	bl	800b3b0 <sync_window>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <dir_next+0x12c>
 800bd50:	2301      	movs	r3, #1
 800bd52:	e02a      	b.n	800bdaa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3301      	adds	r3, #1
 800bd58:	613b      	str	r3, [r7, #16]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd5e:	1c5a      	adds	r2, r3, #1
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	895b      	ldrh	r3, [r3, #10]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d3e6      	bcc.n	800bd3e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	1ad2      	subs	r2, r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bd82:	6979      	ldr	r1, [r7, #20]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f7ff fbf3 	bl	800b570 <clust2sect>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda2:	441a      	add	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff feb4 	bl	800bb32 <dir_sdi>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d12b      	bne.n	800be2c <dir_alloc+0x7a>
		n = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	69db      	ldr	r3, [r3, #28]
 800bddc:	4619      	mov	r1, r3
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f7ff fb2a 	bl	800b438 <move_window>
 800bde4:	4603      	mov	r3, r0
 800bde6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d11d      	bne.n	800be2a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2be5      	cmp	r3, #229	@ 0xe5
 800bdf6:	d004      	beq.n	800be02 <dir_alloc+0x50>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d107      	bne.n	800be12 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	3301      	adds	r3, #1
 800be06:	613b      	str	r3, [r7, #16]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d102      	bne.n	800be16 <dir_alloc+0x64>
 800be10:	e00c      	b.n	800be2c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800be12:	2300      	movs	r3, #0
 800be14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800be16:	2101      	movs	r1, #1
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ff05 	bl	800bc28 <dir_next>
 800be1e:	4603      	mov	r3, r0
 800be20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0d7      	beq.n	800bdd8 <dir_alloc+0x26>
 800be28:	e000      	b.n	800be2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800be2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d101      	bne.n	800be36 <dir_alloc+0x84>
 800be32:	2307      	movs	r3, #7
 800be34:	75fb      	strb	r3, [r7, #23]
	return res;
 800be36:	7dfb      	ldrb	r3, [r7, #23]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	331a      	adds	r3, #26
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff f810 	bl	800ae74 <ld_word>
 800be54:	4603      	mov	r3, r0
 800be56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d109      	bne.n	800be74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	3314      	adds	r3, #20
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff f805 	bl	800ae74 <ld_word>
 800be6a:	4603      	mov	r3, r0
 800be6c:	041b      	lsls	r3, r3, #16
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800be74:	68fb      	ldr	r3, [r7, #12]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	331a      	adds	r3, #26
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	b292      	uxth	r2, r2
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff f829 	bl	800aeec <st_word>
	if (fs->fs_type == FS_FAT32) {
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d109      	bne.n	800beb6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	f103 0214 	add.w	r2, r3, #20
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	0c1b      	lsrs	r3, r3, #16
 800beac:	b29b      	uxth	r3, r3
 800beae:	4619      	mov	r1, r3
 800beb0:	4610      	mov	r0, r2
 800beb2:	f7ff f81b 	bl	800aeec <st_word>
	}
}
 800beb6:	bf00      	nop
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b086      	sub	sp, #24
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800becc:	2100      	movs	r1, #0
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff fe2f 	bl	800bb32 <dir_sdi>
 800bed4:	4603      	mov	r3, r0
 800bed6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <dir_find+0x24>
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	e03e      	b.n	800bf60 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	4619      	mov	r1, r3
 800bee8:	6938      	ldr	r0, [r7, #16]
 800beea:	f7ff faa5 	bl	800b438 <move_window>
 800beee:	4603      	mov	r3, r0
 800bef0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bef2:	7dfb      	ldrb	r3, [r7, #23]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d12f      	bne.n	800bf58 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <dir_find+0x4e>
 800bf06:	2304      	movs	r3, #4
 800bf08:	75fb      	strb	r3, [r7, #23]
 800bf0a:	e028      	b.n	800bf5e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	330b      	adds	r3, #11
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	330b      	adds	r3, #11
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	f003 0308 	and.w	r3, r3, #8
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <dir_find+0x86>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a18      	ldr	r0, [r3, #32]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3324      	adds	r3, #36	@ 0x24
 800bf36:	220b      	movs	r2, #11
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f7ff f85a 	bl	800aff2 <mem_cmp>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00b      	beq.n	800bf5c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bf44:	2100      	movs	r1, #0
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fe6e 	bl	800bc28 <dir_next>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d0c5      	beq.n	800bee2 <dir_find+0x24>
 800bf56:	e002      	b.n	800bf5e <dir_find+0xa0>
		if (res != FR_OK) break;
 800bf58:	bf00      	nop
 800bf5a:	e000      	b.n	800bf5e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bf5c:	bf00      	nop

	return res;
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3718      	adds	r7, #24
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bf76:	2101      	movs	r1, #1
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff ff1a 	bl	800bdb2 <dir_alloc>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d11c      	bne.n	800bfc2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	68b8      	ldr	r0, [r7, #8]
 800bf90:	f7ff fa52 	bl	800b438 <move_window>
 800bf94:	4603      	mov	r3, r0
 800bf96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d111      	bne.n	800bfc2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a1b      	ldr	r3, [r3, #32]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7ff f808 	bl	800afbc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a18      	ldr	r0, [r3, #32]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3324      	adds	r3, #36	@ 0x24
 800bfb4:	220b      	movs	r2, #11
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	f7fe ffdf 	bl	800af7a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3324      	adds	r3, #36	@ 0x24
 800bfe0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bfe2:	220b      	movs	r2, #11
 800bfe4:	2120      	movs	r1, #32
 800bfe6:	68b8      	ldr	r0, [r7, #8]
 800bfe8:	f7fe ffe8 	bl	800afbc <mem_set>
	si = i = 0; ni = 8;
 800bfec:	2300      	movs	r3, #0
 800bfee:	613b      	str	r3, [r7, #16]
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	61fb      	str	r3, [r7, #28]
 800bff4:	2308      	movs	r3, #8
 800bff6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	61fa      	str	r2, [r7, #28]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4413      	add	r3, r2
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c006:	7efb      	ldrb	r3, [r7, #27]
 800c008:	2b20      	cmp	r3, #32
 800c00a:	d94e      	bls.n	800c0aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c00c:	7efb      	ldrb	r3, [r7, #27]
 800c00e:	2b2f      	cmp	r3, #47	@ 0x2f
 800c010:	d006      	beq.n	800c020 <create_name+0x54>
 800c012:	7efb      	ldrb	r3, [r7, #27]
 800c014:	2b5c      	cmp	r3, #92	@ 0x5c
 800c016:	d110      	bne.n	800c03a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c018:	e002      	b.n	800c020 <create_name+0x54>
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	3301      	adds	r3, #1
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	4413      	add	r3, r2
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b2f      	cmp	r3, #47	@ 0x2f
 800c02a:	d0f6      	beq.n	800c01a <create_name+0x4e>
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	4413      	add	r3, r2
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	2b5c      	cmp	r3, #92	@ 0x5c
 800c036:	d0f0      	beq.n	800c01a <create_name+0x4e>
			break;
 800c038:	e038      	b.n	800c0ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c03a:	7efb      	ldrb	r3, [r7, #27]
 800c03c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c03e:	d003      	beq.n	800c048 <create_name+0x7c>
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	429a      	cmp	r2, r3
 800c046:	d30c      	bcc.n	800c062 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	2b0b      	cmp	r3, #11
 800c04c:	d002      	beq.n	800c054 <create_name+0x88>
 800c04e:	7efb      	ldrb	r3, [r7, #27]
 800c050:	2b2e      	cmp	r3, #46	@ 0x2e
 800c052:	d001      	beq.n	800c058 <create_name+0x8c>
 800c054:	2306      	movs	r3, #6
 800c056:	e044      	b.n	800c0e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c058:	2308      	movs	r3, #8
 800c05a:	613b      	str	r3, [r7, #16]
 800c05c:	230b      	movs	r3, #11
 800c05e:	617b      	str	r3, [r7, #20]
			continue;
 800c060:	e022      	b.n	800c0a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c062:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c066:	2b00      	cmp	r3, #0
 800c068:	da04      	bge.n	800c074 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c06a:	7efb      	ldrb	r3, [r7, #27]
 800c06c:	3b80      	subs	r3, #128	@ 0x80
 800c06e:	4a1f      	ldr	r2, [pc, #124]	@ (800c0ec <create_name+0x120>)
 800c070:	5cd3      	ldrb	r3, [r2, r3]
 800c072:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c074:	7efb      	ldrb	r3, [r7, #27]
 800c076:	4619      	mov	r1, r3
 800c078:	481d      	ldr	r0, [pc, #116]	@ (800c0f0 <create_name+0x124>)
 800c07a:	f7fe ffe1 	bl	800b040 <chk_chr>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d001      	beq.n	800c088 <create_name+0xbc>
 800c084:	2306      	movs	r3, #6
 800c086:	e02c      	b.n	800c0e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c088:	7efb      	ldrb	r3, [r7, #27]
 800c08a:	2b60      	cmp	r3, #96	@ 0x60
 800c08c:	d905      	bls.n	800c09a <create_name+0xce>
 800c08e:	7efb      	ldrb	r3, [r7, #27]
 800c090:	2b7a      	cmp	r3, #122	@ 0x7a
 800c092:	d802      	bhi.n	800c09a <create_name+0xce>
 800c094:	7efb      	ldrb	r3, [r7, #27]
 800c096:	3b20      	subs	r3, #32
 800c098:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	613a      	str	r2, [r7, #16]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	7efa      	ldrb	r2, [r7, #27]
 800c0a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c0a8:	e7a6      	b.n	800bff8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c0aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <create_name+0xf4>
 800c0bc:	2306      	movs	r3, #6
 800c0be:	e010      	b.n	800c0e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2be5      	cmp	r3, #229	@ 0xe5
 800c0c6:	d102      	bne.n	800c0ce <create_name+0x102>
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2205      	movs	r2, #5
 800c0cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c0ce:	7efb      	ldrb	r3, [r7, #27]
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d801      	bhi.n	800c0d8 <create_name+0x10c>
 800c0d4:	2204      	movs	r2, #4
 800c0d6:	e000      	b.n	800c0da <create_name+0x10e>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	330b      	adds	r3, #11
 800c0de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c0e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	08015500 	.word	0x08015500
 800c0f0:	08015474 	.word	0x08015474

0800c0f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c108:	e002      	b.n	800c110 <follow_path+0x1c>
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	3301      	adds	r3, #1
 800c10e:	603b      	str	r3, [r7, #0]
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b2f      	cmp	r3, #47	@ 0x2f
 800c116:	d0f8      	beq.n	800c10a <follow_path+0x16>
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c11e:	d0f4      	beq.n	800c10a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2200      	movs	r2, #0
 800c124:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b1f      	cmp	r3, #31
 800c12c:	d80a      	bhi.n	800c144 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2280      	movs	r2, #128	@ 0x80
 800c132:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c136:	2100      	movs	r1, #0
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff fcfa 	bl	800bb32 <dir_sdi>
 800c13e:	4603      	mov	r3, r0
 800c140:	75fb      	strb	r3, [r7, #23]
 800c142:	e043      	b.n	800c1cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c144:	463b      	mov	r3, r7
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff ff3f 	bl	800bfcc <create_name>
 800c14e:	4603      	mov	r3, r0
 800c150:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c152:	7dfb      	ldrb	r3, [r7, #23]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d134      	bne.n	800c1c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff feb0 	bl	800bebe <dir_find>
 800c15e:	4603      	mov	r3, r0
 800c160:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c168:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00a      	beq.n	800c186 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c170:	7dfb      	ldrb	r3, [r7, #23]
 800c172:	2b04      	cmp	r3, #4
 800c174:	d127      	bne.n	800c1c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c176:	7afb      	ldrb	r3, [r7, #11]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d122      	bne.n	800c1c6 <follow_path+0xd2>
 800c180:	2305      	movs	r3, #5
 800c182:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c184:	e01f      	b.n	800c1c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c186:	7afb      	ldrb	r3, [r7, #11]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11c      	bne.n	800c1ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	799b      	ldrb	r3, [r3, #6]
 800c194:	f003 0310 	and.w	r3, r3, #16
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d102      	bne.n	800c1a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c19c:	2305      	movs	r3, #5
 800c19e:	75fb      	strb	r3, [r7, #23]
 800c1a0:	e014      	b.n	800c1cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b0:	4413      	add	r3, r2
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f7ff fe43 	bl	800be40 <ld_clust>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1c0:	e7c0      	b.n	800c144 <follow_path+0x50>
			if (res != FR_OK) break;
 800c1c2:	bf00      	nop
 800c1c4:	e002      	b.n	800c1cc <follow_path+0xd8>
				break;
 800c1c6:	bf00      	nop
 800c1c8:	e000      	b.n	800c1cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1ca:	bf00      	nop
			}
		}
	}

	return res;
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b087      	sub	sp, #28
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c1de:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d031      	beq.n	800c250 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	617b      	str	r3, [r7, #20]
 800c1f2:	e002      	b.n	800c1fa <get_ldnumber+0x24>
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	617b      	str	r3, [r7, #20]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b20      	cmp	r3, #32
 800c200:	d903      	bls.n	800c20a <get_ldnumber+0x34>
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b3a      	cmp	r3, #58	@ 0x3a
 800c208:	d1f4      	bne.n	800c1f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c210:	d11c      	bne.n	800c24c <get_ldnumber+0x76>
			tp = *path;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	60fa      	str	r2, [r7, #12]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	3b30      	subs	r3, #48	@ 0x30
 800c222:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2b09      	cmp	r3, #9
 800c228:	d80e      	bhi.n	800c248 <get_ldnumber+0x72>
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d10a      	bne.n	800c248 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d107      	bne.n	800c248 <get_ldnumber+0x72>
					vol = (int)i;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	3301      	adds	r3, #1
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	697a      	ldr	r2, [r7, #20]
 800c246:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	e002      	b.n	800c252 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c24c:	2300      	movs	r3, #0
 800c24e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c250:	693b      	ldr	r3, [r7, #16]
}
 800c252:	4618      	mov	r0, r3
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
	...

0800c260 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	70da      	strb	r2, [r3, #3]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f04f 32ff 	mov.w	r2, #4294967295
 800c276:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff f8dc 	bl	800b438 <move_window>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d001      	beq.n	800c28a <check_fs+0x2a>
 800c286:	2304      	movs	r3, #4
 800c288:	e038      	b.n	800c2fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3334      	adds	r3, #52	@ 0x34
 800c28e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c292:	4618      	mov	r0, r3
 800c294:	f7fe fdee 	bl	800ae74 <ld_word>
 800c298:	4603      	mov	r3, r0
 800c29a:	461a      	mov	r2, r3
 800c29c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d001      	beq.n	800c2a8 <check_fs+0x48>
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e029      	b.n	800c2fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2ae:	2be9      	cmp	r3, #233	@ 0xe9
 800c2b0:	d009      	beq.n	800c2c6 <check_fs+0x66>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2b8:	2beb      	cmp	r3, #235	@ 0xeb
 800c2ba:	d11e      	bne.n	800c2fa <check_fs+0x9a>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c2c2:	2b90      	cmp	r3, #144	@ 0x90
 800c2c4:	d119      	bne.n	800c2fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	3334      	adds	r3, #52	@ 0x34
 800c2ca:	3336      	adds	r3, #54	@ 0x36
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe fdea 	bl	800aea6 <ld_dword>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c2d8:	4a0a      	ldr	r2, [pc, #40]	@ (800c304 <check_fs+0xa4>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d101      	bne.n	800c2e2 <check_fs+0x82>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e00c      	b.n	800c2fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3334      	adds	r3, #52	@ 0x34
 800c2e6:	3352      	adds	r3, #82	@ 0x52
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fe fddc 	bl	800aea6 <ld_dword>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	4a05      	ldr	r2, [pc, #20]	@ (800c308 <check_fs+0xa8>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d101      	bne.n	800c2fa <check_fs+0x9a>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e000      	b.n	800c2fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c2fa:	2302      	movs	r3, #2
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	00544146 	.word	0x00544146
 800c308:	33544146 	.word	0x33544146

0800c30c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b096      	sub	sp, #88	@ 0x58
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2200      	movs	r2, #0
 800c31e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f7ff ff58 	bl	800c1d6 <get_ldnumber>
 800c326:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	da01      	bge.n	800c332 <find_volume+0x26>
 800c32e:	230b      	movs	r3, #11
 800c330:	e235      	b.n	800c79e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c332:	4aa5      	ldr	r2, [pc, #660]	@ (800c5c8 <find_volume+0x2bc>)
 800c334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c33a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <find_volume+0x3a>
 800c342:	230c      	movs	r3, #12
 800c344:	e22b      	b.n	800c79e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800c346:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c348:	f7fe fe95 	bl	800b076 <lock_fs>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <find_volume+0x4a>
 800c352:	230f      	movs	r3, #15
 800c354:	e223      	b.n	800c79e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c35a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	f023 0301 	bic.w	r3, r3, #1
 800c362:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01a      	beq.n	800c3a2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36e:	785b      	ldrb	r3, [r3, #1]
 800c370:	4618      	mov	r0, r3
 800c372:	f7fe fce1 	bl	800ad38 <disk_status>
 800c376:	4603      	mov	r3, r0
 800c378:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c37c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c380:	f003 0301 	and.w	r3, r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10c      	bne.n	800c3a2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c388:	79fb      	ldrb	r3, [r7, #7]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d007      	beq.n	800c39e <find_volume+0x92>
 800c38e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c392:	f003 0304 	and.w	r3, r3, #4
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c39a:	230a      	movs	r3, #10
 800c39c:	e1ff      	b.n	800c79e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e1fd      	b.n	800c79e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c3a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b2:	785b      	ldrb	r3, [r3, #1]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fcd9 	bl	800ad6c <disk_initialize>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c3c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c3cc:	2303      	movs	r3, #3
 800c3ce:	e1e6      	b.n	800c79e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d007      	beq.n	800c3e6 <find_volume+0xda>
 800c3d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3da:	f003 0304 	and.w	r3, r3, #4
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c3e2:	230a      	movs	r3, #10
 800c3e4:	e1db      	b.n	800c79e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c3ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c3ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c3ee:	f7ff ff37 	bl	800c260 <check_fs>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d149      	bne.n	800c494 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c400:	2300      	movs	r3, #0
 800c402:	643b      	str	r3, [r7, #64]	@ 0x40
 800c404:	e01e      	b.n	800c444 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c40c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c40e:	011b      	lsls	r3, r3, #4
 800c410:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c414:	4413      	add	r3, r2
 800c416:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c41a:	3304      	adds	r3, #4
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d006      	beq.n	800c430 <find_volume+0x124>
 800c422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c424:	3308      	adds	r3, #8
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe fd3d 	bl	800aea6 <ld_dword>
 800c42c:	4602      	mov	r2, r0
 800c42e:	e000      	b.n	800c432 <find_volume+0x126>
 800c430:	2200      	movs	r2, #0
 800c432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	3358      	adds	r3, #88	@ 0x58
 800c438:	443b      	add	r3, r7
 800c43a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c440:	3301      	adds	r3, #1
 800c442:	643b      	str	r3, [r7, #64]	@ 0x40
 800c444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c446:	2b03      	cmp	r3, #3
 800c448:	d9dd      	bls.n	800c406 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c44a:	2300      	movs	r3, #0
 800c44c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c450:	2b00      	cmp	r3, #0
 800c452:	d002      	beq.n	800c45a <find_volume+0x14e>
 800c454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c456:	3b01      	subs	r3, #1
 800c458:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c45a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	3358      	adds	r3, #88	@ 0x58
 800c460:	443b      	add	r3, r7
 800c462:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c466:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d005      	beq.n	800c47a <find_volume+0x16e>
 800c46e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c470:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c472:	f7ff fef5 	bl	800c260 <check_fs>
 800c476:	4603      	mov	r3, r0
 800c478:	e000      	b.n	800c47c <find_volume+0x170>
 800c47a:	2303      	movs	r3, #3
 800c47c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c480:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c484:	2b01      	cmp	r3, #1
 800c486:	d905      	bls.n	800c494 <find_volume+0x188>
 800c488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c48a:	3301      	adds	r3, #1
 800c48c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c48e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c490:	2b03      	cmp	r3, #3
 800c492:	d9e2      	bls.n	800c45a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c494:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d101      	bne.n	800c4a0 <find_volume+0x194>
 800c49c:	2301      	movs	r3, #1
 800c49e:	e17e      	b.n	800c79e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d901      	bls.n	800c4ac <find_volume+0x1a0>
 800c4a8:	230d      	movs	r3, #13
 800c4aa:	e178      	b.n	800c79e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ae:	3334      	adds	r3, #52	@ 0x34
 800c4b0:	330b      	adds	r3, #11
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fe fcde 	bl	800ae74 <ld_word>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4be:	d001      	beq.n	800c4c4 <find_volume+0x1b8>
 800c4c0:	230d      	movs	r3, #13
 800c4c2:	e16c      	b.n	800c79e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c6:	3334      	adds	r3, #52	@ 0x34
 800c4c8:	3316      	adds	r3, #22
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fe fcd2 	bl	800ae74 <ld_word>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <find_volume+0x1dc>
 800c4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4dc:	3334      	adds	r3, #52	@ 0x34
 800c4de:	3324      	adds	r3, #36	@ 0x24
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fe fce0 	bl	800aea6 <ld_dword>
 800c4e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4ec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fa:	789b      	ldrb	r3, [r3, #2]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d005      	beq.n	800c50c <find_volume+0x200>
 800c500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c502:	789b      	ldrb	r3, [r3, #2]
 800c504:	2b02      	cmp	r3, #2
 800c506:	d001      	beq.n	800c50c <find_volume+0x200>
 800c508:	230d      	movs	r3, #13
 800c50a:	e148      	b.n	800c79e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50e:	789b      	ldrb	r3, [r3, #2]
 800c510:	461a      	mov	r2, r3
 800c512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c514:	fb02 f303 	mul.w	r3, r2, r3
 800c518:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c520:	461a      	mov	r2, r3
 800c522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c524:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c528:	895b      	ldrh	r3, [r3, #10]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <find_volume+0x234>
 800c52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c530:	895b      	ldrh	r3, [r3, #10]
 800c532:	461a      	mov	r2, r3
 800c534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c536:	895b      	ldrh	r3, [r3, #10]
 800c538:	3b01      	subs	r3, #1
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <find_volume+0x238>
 800c540:	230d      	movs	r3, #13
 800c542:	e12c      	b.n	800c79e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c546:	3334      	adds	r3, #52	@ 0x34
 800c548:	3311      	adds	r3, #17
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe fc92 	bl	800ae74 <ld_word>
 800c550:	4603      	mov	r3, r0
 800c552:	461a      	mov	r2, r3
 800c554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c556:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55a:	891b      	ldrh	r3, [r3, #8]
 800c55c:	f003 030f 	and.w	r3, r3, #15
 800c560:	b29b      	uxth	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <find_volume+0x25e>
 800c566:	230d      	movs	r3, #13
 800c568:	e119      	b.n	800c79e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56c:	3334      	adds	r3, #52	@ 0x34
 800c56e:	3313      	adds	r3, #19
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fc7f 	bl	800ae74 <ld_word>
 800c576:	4603      	mov	r3, r0
 800c578:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c57a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <find_volume+0x282>
 800c580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c582:	3334      	adds	r3, #52	@ 0x34
 800c584:	3320      	adds	r3, #32
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe fc8d 	bl	800aea6 <ld_dword>
 800c58c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c590:	3334      	adds	r3, #52	@ 0x34
 800c592:	330e      	adds	r3, #14
 800c594:	4618      	mov	r0, r3
 800c596:	f7fe fc6d 	bl	800ae74 <ld_word>
 800c59a:	4603      	mov	r3, r0
 800c59c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c59e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <find_volume+0x29c>
 800c5a4:	230d      	movs	r3, #13
 800c5a6:	e0fa      	b.n	800c79e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c5a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5ac:	4413      	add	r3, r2
 800c5ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5b0:	8912      	ldrh	r2, [r2, #8]
 800c5b2:	0912      	lsrs	r2, r2, #4
 800c5b4:	b292      	uxth	r2, r2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c5ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d204      	bcs.n	800c5cc <find_volume+0x2c0>
 800c5c2:	230d      	movs	r3, #13
 800c5c4:	e0eb      	b.n	800c79e <find_volume+0x492>
 800c5c6:	bf00      	nop
 800c5c8:	200011ec 	.word	0x200011ec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c5cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5d4:	8952      	ldrh	r2, [r2, #10]
 800c5d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <find_volume+0x2da>
 800c5e2:	230d      	movs	r3, #13
 800c5e4:	e0db      	b.n	800c79e <find_volume+0x492>
		fmt = FS_FAT32;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d802      	bhi.n	800c5fc <find_volume+0x2f0>
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c602:	4293      	cmp	r3, r2
 800c604:	d802      	bhi.n	800c60c <find_volume+0x300>
 800c606:	2301      	movs	r3, #1
 800c608:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	1c9a      	adds	r2, r3, #2
 800c610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c612:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c616:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c618:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c61a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c61c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c61e:	441a      	add	r2, r3
 800c620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c622:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c624:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c628:	441a      	add	r2, r3
 800c62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c62e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c632:	2b03      	cmp	r3, #3
 800c634:	d11e      	bne.n	800c674 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c638:	3334      	adds	r3, #52	@ 0x34
 800c63a:	332a      	adds	r3, #42	@ 0x2a
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fc19 	bl	800ae74 <ld_word>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <find_volume+0x340>
 800c648:	230d      	movs	r3, #13
 800c64a:	e0a8      	b.n	800c79e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64e:	891b      	ldrh	r3, [r3, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <find_volume+0x34c>
 800c654:	230d      	movs	r3, #13
 800c656:	e0a2      	b.n	800c79e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65a:	3334      	adds	r3, #52	@ 0x34
 800c65c:	332c      	adds	r3, #44	@ 0x2c
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fe fc21 	bl	800aea6 <ld_dword>
 800c664:	4602      	mov	r2, r0
 800c666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c668:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	647b      	str	r3, [r7, #68]	@ 0x44
 800c672:	e01f      	b.n	800c6b4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c676:	891b      	ldrh	r3, [r3, #8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <find_volume+0x374>
 800c67c:	230d      	movs	r3, #13
 800c67e:	e08e      	b.n	800c79e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c686:	441a      	add	r2, r3
 800c688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c68c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c690:	2b02      	cmp	r3, #2
 800c692:	d103      	bne.n	800c69c <find_volume+0x390>
 800c694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	e00a      	b.n	800c6b2 <find_volume+0x3a6>
 800c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69e:	699a      	ldr	r2, [r3, #24]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	4413      	add	r3, r2
 800c6a6:	085a      	lsrs	r2, r3, #1
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c6b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b6:	69da      	ldr	r2, [r3, #28]
 800c6b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c6be:	0a5b      	lsrs	r3, r3, #9
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d201      	bcs.n	800c6c8 <find_volume+0x3bc>
 800c6c4:	230d      	movs	r3, #13
 800c6c6:	e06a      	b.n	800c79e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ce:	615a      	str	r2, [r3, #20]
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d2:	695a      	ldr	r2, [r3, #20]
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6da:	2280      	movs	r2, #128	@ 0x80
 800c6dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c6de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d149      	bne.n	800c77a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e8:	3334      	adds	r3, #52	@ 0x34
 800c6ea:	3330      	adds	r3, #48	@ 0x30
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fe fbc1 	bl	800ae74 <ld_word>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d140      	bne.n	800c77a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c6f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c700:	f7fe fe9a 	bl	800b438 <move_window>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d137      	bne.n	800c77a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70c:	2200      	movs	r2, #0
 800c70e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	3334      	adds	r3, #52	@ 0x34
 800c714:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fe fbab 	bl	800ae74 <ld_word>
 800c71e:	4603      	mov	r3, r0
 800c720:	461a      	mov	r2, r3
 800c722:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c726:	429a      	cmp	r2, r3
 800c728:	d127      	bne.n	800c77a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72c:	3334      	adds	r3, #52	@ 0x34
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fe fbb9 	bl	800aea6 <ld_dword>
 800c734:	4603      	mov	r3, r0
 800c736:	4a1c      	ldr	r2, [pc, #112]	@ (800c7a8 <find_volume+0x49c>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d11e      	bne.n	800c77a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73e:	3334      	adds	r3, #52	@ 0x34
 800c740:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe fbae 	bl	800aea6 <ld_dword>
 800c74a:	4603      	mov	r3, r0
 800c74c:	4a17      	ldr	r2, [pc, #92]	@ (800c7ac <find_volume+0x4a0>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d113      	bne.n	800c77a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c754:	3334      	adds	r3, #52	@ 0x34
 800c756:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fba3 	bl	800aea6 <ld_dword>
 800c760:	4602      	mov	r2, r0
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c768:	3334      	adds	r3, #52	@ 0x34
 800c76a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fe fb99 	bl	800aea6 <ld_dword>
 800c774:	4602      	mov	r2, r0
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c780:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c782:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b0 <find_volume+0x4a4>)
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	3301      	adds	r3, #1
 800c788:	b29a      	uxth	r2, r3
 800c78a:	4b09      	ldr	r3, [pc, #36]	@ (800c7b0 <find_volume+0x4a4>)
 800c78c:	801a      	strh	r2, [r3, #0]
 800c78e:	4b08      	ldr	r3, [pc, #32]	@ (800c7b0 <find_volume+0x4a4>)
 800c790:	881a      	ldrh	r2, [r3, #0]
 800c792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c794:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c796:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c798:	f7fe fde6 	bl	800b368 <clear_lock>
#endif
	return FR_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3758      	adds	r7, #88	@ 0x58
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	41615252 	.word	0x41615252
 800c7ac:	61417272 	.word	0x61417272
 800c7b0:	200011f0 	.word	0x200011f0

0800c7b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c7be:	2309      	movs	r3, #9
 800c7c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d02e      	beq.n	800c826 <validate+0x72>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d02a      	beq.n	800c826 <validate+0x72>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d025      	beq.n	800c826 <validate+0x72>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	889a      	ldrh	r2, [r3, #4]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	88db      	ldrh	r3, [r3, #6]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d11e      	bne.n	800c826 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe fc42 	bl	800b076 <lock_fs>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d014      	beq.n	800c822 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	785b      	ldrb	r3, [r3, #1]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe fa9a 	bl	800ad38 <disk_status>
 800c804:	4603      	mov	r3, r0
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d102      	bne.n	800c814 <validate+0x60>
				res = FR_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	73fb      	strb	r3, [r7, #15]
 800c812:	e008      	b.n	800c826 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2100      	movs	r1, #0
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe fc41 	bl	800b0a2 <unlock_fs>
 800c820:	e001      	b.n	800c826 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c822:	230f      	movs	r3, #15
 800c824:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <validate+0x7e>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	e000      	b.n	800c834 <validate+0x80>
 800c832:	2300      	movs	r3, #0
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	6013      	str	r3, [r2, #0]
	return res;
 800c838:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
	...

0800c844 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	4613      	mov	r3, r2
 800c850:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c856:	f107 0310 	add.w	r3, r7, #16
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff fcbb 	bl	800c1d6 <get_ldnumber>
 800c860:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	2b00      	cmp	r3, #0
 800c866:	da01      	bge.n	800c86c <f_mount+0x28>
 800c868:	230b      	movs	r3, #11
 800c86a:	e048      	b.n	800c8fe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c86c:	4a26      	ldr	r2, [pc, #152]	@ (800c908 <f_mount+0xc4>)
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c874:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00f      	beq.n	800c89c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c87c:	69b8      	ldr	r0, [r7, #24]
 800c87e:	f7fe fd73 	bl	800b368 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	4618      	mov	r0, r3
 800c888:	f001 f837 	bl	800d8fa <ff_del_syncobj>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <f_mount+0x52>
 800c892:	2302      	movs	r3, #2
 800c894:	e033      	b.n	800c8fe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	2200      	movs	r2, #0
 800c89a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00f      	beq.n	800c8c2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	330c      	adds	r3, #12
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	f001 f803 	bl	800d8be <ff_cre_syncobj>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <f_mount+0x7e>
 800c8be:	2302      	movs	r3, #2
 800c8c0:	e01d      	b.n	800c8fe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	4910      	ldr	r1, [pc, #64]	@ (800c908 <f_mount+0xc4>)
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d002      	beq.n	800c8d8 <f_mount+0x94>
 800c8d2:	79fb      	ldrb	r3, [r7, #7]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d001      	beq.n	800c8dc <f_mount+0x98>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	e010      	b.n	800c8fe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c8dc:	f107 010c 	add.w	r1, r7, #12
 800c8e0:	f107 0308 	add.w	r3, r7, #8
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fd10 	bl	800c30c <find_volume>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	7dfa      	ldrb	r2, [r7, #23]
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fe fbd3 	bl	800b0a2 <unlock_fs>
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3720      	adds	r7, #32
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	200011ec 	.word	0x200011ec

0800c90c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b098      	sub	sp, #96	@ 0x60
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4613      	mov	r3, r2
 800c918:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <f_open+0x18>
 800c920:	2309      	movs	r3, #9
 800c922:	e1b0      	b.n	800cc86 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c92a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c92c:	79fa      	ldrb	r2, [r7, #7]
 800c92e:	f107 0110 	add.w	r1, r7, #16
 800c932:	f107 0308 	add.w	r3, r7, #8
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff fce8 	bl	800c30c <find_volume>
 800c93c:	4603      	mov	r3, r0
 800c93e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c942:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c946:	2b00      	cmp	r3, #0
 800c948:	f040 818d 	bne.w	800cc66 <f_open+0x35a>
		dj.obj.fs = fs;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	f107 0314 	add.w	r3, r7, #20
 800c956:	4611      	mov	r1, r2
 800c958:	4618      	mov	r0, r3
 800c95a:	f7ff fbcb 	bl	800c0f4 <follow_path>
 800c95e:	4603      	mov	r3, r0
 800c960:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c964:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d118      	bne.n	800c99e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c96c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c970:	b25b      	sxtb	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	da03      	bge.n	800c97e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c976:	2306      	movs	r3, #6
 800c978:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c97c:	e00f      	b.n	800c99e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c97e:	79fb      	ldrb	r3, [r7, #7]
 800c980:	2b01      	cmp	r3, #1
 800c982:	bf8c      	ite	hi
 800c984:	2301      	movhi	r3, #1
 800c986:	2300      	movls	r3, #0
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	461a      	mov	r2, r3
 800c98c:	f107 0314 	add.w	r3, r7, #20
 800c990:	4611      	mov	r1, r2
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe fba0 	bl	800b0d8 <chk_lock>
 800c998:	4603      	mov	r3, r0
 800c99a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	f003 031c 	and.w	r3, r3, #28
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d07f      	beq.n	800caa8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c9a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d017      	beq.n	800c9e0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c9b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	d10e      	bne.n	800c9d6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c9b8:	f7fe fbea 	bl	800b190 <enq_lock>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d006      	beq.n	800c9d0 <f_open+0xc4>
 800c9c2:	f107 0314 	add.w	r3, r7, #20
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff face 	bl	800bf68 <dir_register>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	e000      	b.n	800c9d2 <f_open+0xc6>
 800c9d0:	2312      	movs	r3, #18
 800c9d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c9d6:	79fb      	ldrb	r3, [r7, #7]
 800c9d8:	f043 0308 	orr.w	r3, r3, #8
 800c9dc:	71fb      	strb	r3, [r7, #7]
 800c9de:	e010      	b.n	800ca02 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c9e0:	7ebb      	ldrb	r3, [r7, #26]
 800c9e2:	f003 0311 	and.w	r3, r3, #17
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <f_open+0xe6>
					res = FR_DENIED;
 800c9ea:	2307      	movs	r3, #7
 800c9ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c9f0:	e007      	b.n	800ca02 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	f003 0304 	and.w	r3, r3, #4
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <f_open+0xf6>
 800c9fc:	2308      	movs	r3, #8
 800c9fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d168      	bne.n	800cadc <f_open+0x1d0>
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
 800ca0c:	f003 0308 	and.w	r3, r3, #8
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d063      	beq.n	800cadc <f_open+0x1d0>
				dw = GET_FATTIME();
 800ca14:	f7fe f930 	bl	800ac78 <get_fattime>
 800ca18:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ca1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca1c:	330e      	adds	r3, #14
 800ca1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fa7e 	bl	800af22 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ca26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca28:	3316      	adds	r3, #22
 800ca2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fe fa78 	bl	800af22 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ca32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca34:	330b      	adds	r3, #11
 800ca36:	2220      	movs	r2, #32
 800ca38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca3e:	4611      	mov	r1, r2
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7ff f9fd 	bl	800be40 <ld_clust>
 800ca46:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7ff fa15 	bl	800be7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ca54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca56:	331c      	adds	r3, #28
 800ca58:	2100      	movs	r1, #0
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fa61 	bl	800af22 <st_dword>
					fs->wflag = 1;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	2201      	movs	r2, #1
 800ca64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ca66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d037      	beq.n	800cadc <f_open+0x1d0>
						dw = fs->winsect;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca70:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ca72:	f107 0314 	add.w	r3, r7, #20
 800ca76:	2200      	movs	r2, #0
 800ca78:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe ff28 	bl	800b8d0 <remove_chain>
 800ca80:	4603      	mov	r3, r0
 800ca82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ca86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d126      	bne.n	800cadc <f_open+0x1d0>
							res = move_window(fs, dw);
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe fcd0 	bl	800b438 <move_window>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caa2:	3a01      	subs	r2, #1
 800caa4:	611a      	str	r2, [r3, #16]
 800caa6:	e019      	b.n	800cadc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800caa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caac:	2b00      	cmp	r3, #0
 800caae:	d115      	bne.n	800cadc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cab0:	7ebb      	ldrb	r3, [r7, #26]
 800cab2:	f003 0310 	and.w	r3, r3, #16
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d003      	beq.n	800cac2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800caba:	2304      	movs	r3, #4
 800cabc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cac0:	e00c      	b.n	800cadc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d007      	beq.n	800cadc <f_open+0x1d0>
 800cacc:	7ebb      	ldrb	r3, [r7, #26]
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <f_open+0x1d0>
						res = FR_DENIED;
 800cad6:	2307      	movs	r3, #7
 800cad8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cadc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d126      	bne.n	800cb32 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	f003 0308 	and.w	r3, r3, #8
 800caea:	2b00      	cmp	r3, #0
 800caec:	d003      	beq.n	800caf6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800caee:	79fb      	ldrb	r3, [r7, #7]
 800caf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cafe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb04:	79fb      	ldrb	r3, [r7, #7]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	bf8c      	ite	hi
 800cb0a:	2301      	movhi	r3, #1
 800cb0c:	2300      	movls	r3, #0
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	461a      	mov	r2, r3
 800cb12:	f107 0314 	add.w	r3, r7, #20
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe fb5b 	bl	800b1d4 <inc_lock>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d102      	bne.n	800cb32 <f_open+0x226>
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cb32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f040 8095 	bne.w	800cc66 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb40:	4611      	mov	r1, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff f97c 	bl	800be40 <ld_clust>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cb4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb50:	331c      	adds	r3, #28
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe f9a7 	bl	800aea6 <ld_dword>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	88da      	ldrh	r2, [r3, #6]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	79fa      	ldrb	r2, [r7, #7]
 800cb76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2200      	movs	r2, #0
 800cb82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3330      	adds	r3, #48	@ 0x30
 800cb8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fe fa11 	bl	800afbc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cb9a:	79fb      	ldrb	r3, [r7, #7]
 800cb9c:	f003 0320 	and.w	r3, r3, #32
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d060      	beq.n	800cc66 <f_open+0x35a>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d05c      	beq.n	800cc66 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	68da      	ldr	r2, [r3, #12]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	895b      	ldrh	r3, [r3, #10]
 800cbb8:	025b      	lsls	r3, r3, #9
 800cbba:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbc8:	e016      	b.n	800cbf8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fe fced 	bl	800b5ae <get_fat>
 800cbd4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cbd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d802      	bhi.n	800cbe2 <f_open+0x2d6>
 800cbdc:	2302      	movs	r3, #2
 800cbde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cbe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe8:	d102      	bne.n	800cbf0 <f_open+0x2e4>
 800cbea:	2301      	movs	r3, #1
 800cbec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cbf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cbf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d103      	bne.n	800cc08 <f_open+0x2fc>
 800cc00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d8e0      	bhi.n	800cbca <f_open+0x2be>
				}
				fp->clust = clst;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cc0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d127      	bne.n	800cc66 <f_open+0x35a>
 800cc16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d022      	beq.n	800cc66 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fe fca3 	bl	800b570 <clust2sect>
 800cc2a:	6478      	str	r0, [r7, #68]	@ 0x44
 800cc2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d103      	bne.n	800cc3a <f_open+0x32e>
						res = FR_INT_ERR;
 800cc32:	2302      	movs	r3, #2
 800cc34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cc38:	e015      	b.n	800cc66 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cc3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc3c:	0a5a      	lsrs	r2, r3, #9
 800cc3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc40:	441a      	add	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	7858      	ldrb	r0, [r3, #1]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6a1a      	ldr	r2, [r3, #32]
 800cc54:	2301      	movs	r3, #1
 800cc56:	f7fe f8af 	bl	800adb8 <disk_read>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <f_open+0x35a>
 800cc60:	2301      	movs	r3, #1
 800cc62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cc66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d002      	beq.n	800cc74 <f_open+0x368>
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe fa10 	bl	800b0a2 <unlock_fs>
 800cc82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3760      	adds	r7, #96	@ 0x60
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b08c      	sub	sp, #48	@ 0x30
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	60f8      	str	r0, [r7, #12]
 800cc96:	60b9      	str	r1, [r7, #8]
 800cc98:	607a      	str	r2, [r7, #4]
 800cc9a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f107 0210 	add.w	r2, r7, #16
 800ccac:	4611      	mov	r1, r2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7ff fd80 	bl	800c7b4 <validate>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ccba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d107      	bne.n	800ccd2 <f_write+0x44>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	7d5b      	ldrb	r3, [r3, #21]
 800ccc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ccca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d009      	beq.n	800cce6 <f_write+0x58>
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe f9e1 	bl	800b0a2 <unlock_fs>
 800cce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cce4:	e173      	b.n	800cfce <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	7d1b      	ldrb	r3, [r3, #20]
 800ccea:	f003 0302 	and.w	r3, r3, #2
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d106      	bne.n	800cd00 <f_write+0x72>
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	2107      	movs	r1, #7
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe f9d3 	bl	800b0a2 <unlock_fs>
 800ccfc:	2307      	movs	r3, #7
 800ccfe:	e166      	b.n	800cfce <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	699a      	ldr	r2, [r3, #24]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	441a      	add	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	f080 814b 	bcs.w	800cfa8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	43db      	mvns	r3, r3
 800cd18:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cd1a:	e145      	b.n	800cfa8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f040 8101 	bne.w	800cf2c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	0a5b      	lsrs	r3, r3, #9
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	8952      	ldrh	r2, [r2, #10]
 800cd34:	3a01      	subs	r2, #1
 800cd36:	4013      	ands	r3, r2
 800cd38:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d14d      	bne.n	800cddc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10c      	bne.n	800cd62 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d11a      	bne.n	800cd8a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2100      	movs	r1, #0
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7fe fe1e 	bl	800b99a <create_chain>
 800cd5e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cd60:	e013      	b.n	800cd8a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d007      	beq.n	800cd7a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7fe feaa 	bl	800baca <clmt_clust>
 800cd76:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cd78:	e007      	b.n	800cd8a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	69db      	ldr	r3, [r3, #28]
 800cd80:	4619      	mov	r1, r3
 800cd82:	4610      	mov	r0, r2
 800cd84:	f7fe fe09 	bl	800b99a <create_chain>
 800cd88:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 8110 	beq.w	800cfb2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d109      	bne.n	800cdac <f_write+0x11e>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	755a      	strb	r2, [r3, #21]
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2102      	movs	r1, #2
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fe f97d 	bl	800b0a2 <unlock_fs>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e110      	b.n	800cfce <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb2:	d109      	bne.n	800cdc8 <f_write+0x13a>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	755a      	strb	r2, [r3, #21]
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe f96f 	bl	800b0a2 <unlock_fs>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e102      	b.n	800cfce <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdcc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d102      	bne.n	800cddc <f_write+0x14e>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdda:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	7d1b      	ldrb	r3, [r3, #20]
 800cde0:	b25b      	sxtb	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	da1d      	bge.n	800ce22 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	7858      	ldrb	r0, [r3, #1]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6a1a      	ldr	r2, [r3, #32]
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f7fd ffff 	bl	800adf8 <disk_write>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d009      	beq.n	800ce14 <f_write+0x186>
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2201      	movs	r2, #1
 800ce04:	755a      	strb	r2, [r3, #21]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	2101      	movs	r1, #1
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe f949 	bl	800b0a2 <unlock_fs>
 800ce10:	2301      	movs	r3, #1
 800ce12:	e0dc      	b.n	800cfce <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce22:	693a      	ldr	r2, [r7, #16]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	69db      	ldr	r3, [r3, #28]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	f7fe fba0 	bl	800b570 <clust2sect>
 800ce30:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d109      	bne.n	800ce4c <f_write+0x1be>
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	755a      	strb	r2, [r3, #21]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	2102      	movs	r1, #2
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe f92d 	bl	800b0a2 <unlock_fs>
 800ce48:	2302      	movs	r3, #2
 800ce4a:	e0c0      	b.n	800cfce <f_write+0x340>
			sect += csect;
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	4413      	add	r3, r2
 800ce52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	0a5b      	lsrs	r3, r3, #9
 800ce58:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d041      	beq.n	800cee4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ce60:	69ba      	ldr	r2, [r7, #24]
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	4413      	add	r3, r2
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	8952      	ldrh	r2, [r2, #10]
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d905      	bls.n	800ce7a <f_write+0x1ec>
					cc = fs->csize - csect;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	895b      	ldrh	r3, [r3, #10]
 800ce72:	461a      	mov	r2, r3
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	7858      	ldrb	r0, [r3, #1]
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	69f9      	ldr	r1, [r7, #28]
 800ce84:	f7fd ffb8 	bl	800adf8 <disk_write>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <f_write+0x214>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2201      	movs	r2, #1
 800ce92:	755a      	strb	r2, [r3, #21]
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	2101      	movs	r1, #1
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe f902 	bl	800b0a2 <unlock_fs>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e095      	b.n	800cfce <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6a1a      	ldr	r2, [r3, #32]
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	6a3a      	ldr	r2, [r7, #32]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d915      	bls.n	800cedc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6a1a      	ldr	r2, [r3, #32]
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	025b      	lsls	r3, r3, #9
 800cec0:	69fa      	ldr	r2, [r7, #28]
 800cec2:	4413      	add	r3, r2
 800cec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cec8:	4619      	mov	r1, r3
 800ceca:	f7fe f856 	bl	800af7a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	7d1b      	ldrb	r3, [r3, #20]
 800ced2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	025b      	lsls	r3, r3, #9
 800cee0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cee2:	e044      	b.n	800cf6e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6a1b      	ldr	r3, [r3, #32]
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d01b      	beq.n	800cf26 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	699a      	ldr	r2, [r3, #24]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d215      	bcs.n	800cf26 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	7858      	ldrb	r0, [r3, #1]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf04:	2301      	movs	r3, #1
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	f7fd ff56 	bl	800adb8 <disk_read>
 800cf0c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d009      	beq.n	800cf26 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2201      	movs	r2, #1
 800cf16:	755a      	strb	r2, [r3, #21]
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fe f8c0 	bl	800b0a2 <unlock_fs>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e053      	b.n	800cfce <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf34:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cf38:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cf3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d901      	bls.n	800cf46 <f_write+0x2b8>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf54:	4413      	add	r3, r2
 800cf56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf58:	69f9      	ldr	r1, [r7, #28]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe f80d 	bl	800af7a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	7d1b      	ldrb	r3, [r3, #20]
 800cf64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cf6e:	69fa      	ldr	r2, [r7, #28]
 800cf70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf72:	4413      	add	r3, r2
 800cf74:	61fb      	str	r3, [r7, #28]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	699a      	ldr	r2, [r3, #24]
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7c:	441a      	add	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	619a      	str	r2, [r3, #24]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	68da      	ldr	r2, [r3, #12]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	bf38      	it	cc
 800cf8e:	461a      	movcc	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	60da      	str	r2, [r3, #12]
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9a:	441a      	add	r2, r3
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f47f aeb6 	bne.w	800cd1c <f_write+0x8e>
 800cfb0:	e000      	b.n	800cfb4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cfb2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	7d1b      	ldrb	r3, [r3, #20]
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe f86b 	bl	800b0a2 <unlock_fs>
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3730      	adds	r7, #48	@ 0x30
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b086      	sub	sp, #24
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f107 0208 	add.w	r2, r7, #8
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff fbe4 	bl	800c7b4 <validate>
 800cfec:	4603      	mov	r3, r0
 800cfee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d16d      	bne.n	800d0d2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7d1b      	ldrb	r3, [r3, #20]
 800cffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d067      	beq.n	800d0d2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7d1b      	ldrb	r3, [r3, #20]
 800d006:	b25b      	sxtb	r3, r3
 800d008:	2b00      	cmp	r3, #0
 800d00a:	da1a      	bge.n	800d042 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	7858      	ldrb	r0, [r3, #1]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a1a      	ldr	r2, [r3, #32]
 800d01a:	2301      	movs	r3, #1
 800d01c:	f7fd feec 	bl	800adf8 <disk_write>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d006      	beq.n	800d034 <f_sync+0x5e>
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2101      	movs	r1, #1
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe f839 	bl	800b0a2 <unlock_fs>
 800d030:	2301      	movs	r3, #1
 800d032:	e055      	b.n	800d0e0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7d1b      	ldrb	r3, [r3, #20]
 800d038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d042:	f7fd fe19 	bl	800ac78 <get_fattime>
 800d046:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d04e:	4619      	mov	r1, r3
 800d050:	4610      	mov	r0, r2
 800d052:	f7fe f9f1 	bl	800b438 <move_window>
 800d056:	4603      	mov	r3, r0
 800d058:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d05a:	7dfb      	ldrb	r3, [r7, #23]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d138      	bne.n	800d0d2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d064:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	330b      	adds	r3, #11
 800d06a:	781a      	ldrb	r2, [r3, #0]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	330b      	adds	r3, #11
 800d070:	f042 0220 	orr.w	r2, r2, #32
 800d074:	b2d2      	uxtb	r2, r2
 800d076:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6818      	ldr	r0, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	461a      	mov	r2, r3
 800d082:	68f9      	ldr	r1, [r7, #12]
 800d084:	f7fe fefb 	bl	800be7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f103 021c 	add.w	r2, r3, #28
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	4619      	mov	r1, r3
 800d094:	4610      	mov	r0, r2
 800d096:	f7fd ff44 	bl	800af22 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3316      	adds	r3, #22
 800d09e:	6939      	ldr	r1, [r7, #16]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fd ff3e 	bl	800af22 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3312      	adds	r3, #18
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fd ff1d 	bl	800aeec <st_word>
					fs->wflag = 1;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe f9ea 	bl	800b494 <sync_fs>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	7d1b      	ldrb	r3, [r3, #20]
 800d0c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	7dfa      	ldrb	r2, [r7, #23]
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fd ffe2 	bl	800b0a2 <unlock_fs>
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff ff70 	bl	800cfd6 <f_sync>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d11d      	bne.n	800d13c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f107 0208 	add.w	r2, r7, #8
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff fb53 	bl	800c7b4 <validate>
 800d10e:	4603      	mov	r3, r0
 800d110:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d112:	7bfb      	ldrb	r3, [r7, #15]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d111      	bne.n	800d13c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe f8e7 	bl	800b2f0 <dec_lock>
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2100      	movs	r1, #0
 800d136:	4618      	mov	r0, r3
 800d138:	f7fd ffb3 	bl	800b0a2 <unlock_fs>
#endif
		}
	}
	return res;
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b090      	sub	sp, #64	@ 0x40
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f107 0208 	add.w	r2, r7, #8
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff fb2b 	bl	800c7b4 <validate>
 800d15e:	4603      	mov	r3, r0
 800d160:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d164:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d103      	bne.n	800d174 <f_lseek+0x2e>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	7d5b      	ldrb	r3, [r3, #21]
 800d170:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d174:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d009      	beq.n	800d190 <f_lseek+0x4a>
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d182:	4611      	mov	r1, r2
 800d184:	4618      	mov	r0, r3
 800d186:	f7fd ff8c 	bl	800b0a2 <unlock_fs>
 800d18a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d18e:	e229      	b.n	800d5e4 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80ea 	beq.w	800d36e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a0:	d164      	bne.n	800d26c <f_lseek+0x126>
			tbl = fp->cltbl;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1aa:	1d1a      	adds	r2, r3, #4
 800d1ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	617b      	str	r3, [r7, #20]
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d044      	beq.n	800d24c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c4:	613b      	str	r3, [r7, #16]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1cc:	3302      	adds	r3, #2
 800d1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fe f9e5 	bl	800b5ae <get_fat>
 800d1e4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d809      	bhi.n	800d200 <f_lseek+0xba>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2202      	movs	r2, #2
 800d1f0:	755a      	strb	r2, [r3, #21]
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2102      	movs	r1, #2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fd ff53 	bl	800b0a2 <unlock_fs>
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	e1f1      	b.n	800d5e4 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d206:	d109      	bne.n	800d21c <f_lseek+0xd6>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	755a      	strb	r2, [r3, #21]
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2101      	movs	r1, #1
 800d212:	4618      	mov	r0, r3
 800d214:	f7fd ff45 	bl	800b0a2 <unlock_fs>
 800d218:	2301      	movs	r3, #1
 800d21a:	e1e3      	b.n	800d5e4 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3301      	adds	r3, #1
 800d220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d222:	429a      	cmp	r2, r3
 800d224:	d0d4      	beq.n	800d1d0 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d809      	bhi.n	800d242 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800d22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d230:	1d1a      	adds	r2, r3, #4
 800d232:	627a      	str	r2, [r7, #36]	@ 0x24
 800d234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23a:	1d1a      	adds	r2, r3, #4
 800d23c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d23e:	693a      	ldr	r2, [r7, #16]
 800d240:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d248:	429a      	cmp	r2, r3
 800d24a:	d3ba      	bcc.n	800d1c2 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d252:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d803      	bhi.n	800d264 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800d25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25e:	2200      	movs	r2, #0
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	e1b6      	b.n	800d5d2 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d264:	2311      	movs	r3, #17
 800d266:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d26a:	e1b2      	b.n	800d5d2 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	429a      	cmp	r2, r3
 800d274:	d902      	bls.n	800d27c <f_lseek+0x136>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 81a4 	beq.w	800d5d2 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	3b01      	subs	r3, #1
 800d28e:	4619      	mov	r1, r3
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7fe fc1a 	bl	800baca <clmt_clust>
 800d296:	4602      	mov	r2, r0
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	69db      	ldr	r3, [r3, #28]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	f7fe f963 	bl	800b570 <clust2sect>
 800d2aa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d109      	bne.n	800d2c6 <f_lseek+0x180>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	755a      	strb	r2, [r3, #21]
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	2102      	movs	r1, #2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fd fef0 	bl	800b0a2 <unlock_fs>
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	e18e      	b.n	800d5e4 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	0a5b      	lsrs	r3, r3, #9
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	8952      	ldrh	r2, [r2, #10]
 800d2d0:	3a01      	subs	r2, #1
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	69ba      	ldr	r2, [r7, #24]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 8175 	beq.w	800d5d2 <f_lseek+0x48c>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a1b      	ldr	r3, [r3, #32]
 800d2ec:	69ba      	ldr	r2, [r7, #24]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	f000 816f 	beq.w	800d5d2 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7d1b      	ldrb	r3, [r3, #20]
 800d2f8:	b25b      	sxtb	r3, r3
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	da1d      	bge.n	800d33a <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	7858      	ldrb	r0, [r3, #1]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6a1a      	ldr	r2, [r3, #32]
 800d30c:	2301      	movs	r3, #1
 800d30e:	f7fd fd73 	bl	800adf8 <disk_write>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d009      	beq.n	800d32c <f_lseek+0x1e6>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2201      	movs	r2, #1
 800d31c:	755a      	strb	r2, [r3, #21]
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2101      	movs	r1, #1
 800d322:	4618      	mov	r0, r3
 800d324:	f7fd febd 	bl	800b0a2 <unlock_fs>
 800d328:	2301      	movs	r3, #1
 800d32a:	e15b      	b.n	800d5e4 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	7d1b      	ldrb	r3, [r3, #20]
 800d330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d334:	b2da      	uxtb	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	7858      	ldrb	r0, [r3, #1]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d344:	2301      	movs	r3, #1
 800d346:	69ba      	ldr	r2, [r7, #24]
 800d348:	f7fd fd36 	bl	800adb8 <disk_read>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d009      	beq.n	800d366 <f_lseek+0x220>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2201      	movs	r2, #1
 800d356:	755a      	strb	r2, [r3, #21]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2101      	movs	r1, #1
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fd fea0 	bl	800b0a2 <unlock_fs>
 800d362:	2301      	movs	r3, #1
 800d364:	e13e      	b.n	800d5e4 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	69ba      	ldr	r2, [r7, #24]
 800d36a:	621a      	str	r2, [r3, #32]
 800d36c:	e131      	b.n	800d5d2 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d908      	bls.n	800d38a <f_lseek+0x244>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	7d1b      	ldrb	r3, [r3, #20]
 800d37c:	f003 0302 	and.w	r3, r3, #2
 800d380:	2b00      	cmp	r3, #0
 800d382:	d102      	bne.n	800d38a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	637b      	str	r3, [r7, #52]	@ 0x34
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d398:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 80c0 	beq.w	800d522 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	895b      	ldrh	r3, [r3, #10]
 800d3a6:	025b      	lsls	r3, r3, #9
 800d3a8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d01b      	beq.n	800d3e8 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	1e5a      	subs	r2, r3, #1
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	1e59      	subs	r1, r3, #1
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d30f      	bcc.n	800d3e8 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d3c8:	6a3b      	ldr	r3, [r7, #32]
 800d3ca:	1e5a      	subs	r2, r3, #1
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	425b      	negs	r3, r3
 800d3d0:	401a      	ands	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	69db      	ldr	r3, [r3, #28]
 800d3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3e6:	e02c      	b.n	800d442 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d123      	bne.n	800d43c <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe face 	bl	800b99a <create_chain>
 800d3fe:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d402:	2b01      	cmp	r3, #1
 800d404:	d109      	bne.n	800d41a <f_lseek+0x2d4>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2202      	movs	r2, #2
 800d40a:	755a      	strb	r2, [r3, #21]
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2102      	movs	r1, #2
 800d410:	4618      	mov	r0, r3
 800d412:	f7fd fe46 	bl	800b0a2 <unlock_fs>
 800d416:	2302      	movs	r3, #2
 800d418:	e0e4      	b.n	800d5e4 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d420:	d109      	bne.n	800d436 <f_lseek+0x2f0>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	755a      	strb	r2, [r3, #21]
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2101      	movs	r1, #1
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fd fe38 	bl	800b0a2 <unlock_fs>
 800d432:	2301      	movs	r3, #1
 800d434:	e0d6      	b.n	800d5e4 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d43a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d440:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d444:	2b00      	cmp	r3, #0
 800d446:	d06c      	beq.n	800d522 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800d448:	e044      	b.n	800d4d4 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	603b      	str	r3, [r7, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	699a      	ldr	r2, [r3, #24]
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	441a      	add	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7d1b      	ldrb	r3, [r3, #20]
 800d462:	f003 0302 	and.w	r3, r3, #2
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00b      	beq.n	800d482 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fe fa93 	bl	800b99a <create_chain>
 800d474:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d108      	bne.n	800d48e <f_lseek+0x348>
							ofs = 0; break;
 800d47c:	2300      	movs	r3, #0
 800d47e:	603b      	str	r3, [r7, #0]
 800d480:	e02c      	b.n	800d4dc <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe f891 	bl	800b5ae <get_fat>
 800d48c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d494:	d109      	bne.n	800d4aa <f_lseek+0x364>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	755a      	strb	r2, [r3, #21]
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	2101      	movs	r1, #1
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fd fdfe 	bl	800b0a2 <unlock_fs>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e09c      	b.n	800d5e4 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d904      	bls.n	800d4ba <f_lseek+0x374>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	699b      	ldr	r3, [r3, #24]
 800d4b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d309      	bcc.n	800d4ce <f_lseek+0x388>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2202      	movs	r2, #2
 800d4be:	755a      	strb	r2, [r3, #21]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2102      	movs	r1, #2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fd fdec 	bl	800b0a2 <unlock_fs>
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	e08a      	b.n	800d5e4 <f_lseek+0x49e>
					fp->clust = clst;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4d2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d8b6      	bhi.n	800d44a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	699a      	ldr	r2, [r3, #24]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	441a      	add	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d017      	beq.n	800d522 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe f83a 	bl	800b570 <clust2sect>
 800d4fc:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d500:	2b00      	cmp	r3, #0
 800d502:	d109      	bne.n	800d518 <f_lseek+0x3d2>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2202      	movs	r2, #2
 800d508:	755a      	strb	r2, [r3, #21]
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	2102      	movs	r1, #2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fd fdc7 	bl	800b0a2 <unlock_fs>
 800d514:	2302      	movs	r3, #2
 800d516:	e065      	b.n	800d5e4 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	0a5b      	lsrs	r3, r3, #9
 800d51c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d51e:	4413      	add	r3, r2
 800d520:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	699a      	ldr	r2, [r3, #24]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d90a      	bls.n	800d544 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	699a      	ldr	r2, [r3, #24]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	7d1b      	ldrb	r3, [r3, #20]
 800d53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d040      	beq.n	800d5d2 <f_lseek+0x48c>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d556:	429a      	cmp	r2, r3
 800d558:	d03b      	beq.n	800d5d2 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7d1b      	ldrb	r3, [r3, #20]
 800d55e:	b25b      	sxtb	r3, r3
 800d560:	2b00      	cmp	r3, #0
 800d562:	da1d      	bge.n	800d5a0 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	7858      	ldrb	r0, [r3, #1]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1a      	ldr	r2, [r3, #32]
 800d572:	2301      	movs	r3, #1
 800d574:	f7fd fc40 	bl	800adf8 <disk_write>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d009      	beq.n	800d592 <f_lseek+0x44c>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	755a      	strb	r2, [r3, #21]
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2101      	movs	r1, #1
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fd fd8a 	bl	800b0a2 <unlock_fs>
 800d58e:	2301      	movs	r3, #1
 800d590:	e028      	b.n	800d5e4 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	7d1b      	ldrb	r3, [r3, #20]
 800d596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	7858      	ldrb	r0, [r3, #1]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5ae:	f7fd fc03 	bl	800adb8 <disk_read>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d009      	beq.n	800d5cc <f_lseek+0x486>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	755a      	strb	r2, [r3, #21]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fd fd6d 	bl	800b0a2 <unlock_fs>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e00b      	b.n	800d5e4 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5d0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fd fd61 	bl	800b0a2 <unlock_fs>
 800d5e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3740      	adds	r7, #64	@ 0x40
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b096      	sub	sp, #88	@ 0x58
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d5f4:	f107 0108 	add.w	r1, r7, #8
 800d5f8:	1d3b      	adds	r3, r7, #4
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe fe85 	bl	800c30c <find_volume>
 800d602:	4603      	mov	r3, r0
 800d604:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800d60c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d610:	2b00      	cmp	r3, #0
 800d612:	f040 80ec 	bne.w	800d7ee <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	f107 030c 	add.w	r3, r7, #12
 800d61c:	4611      	mov	r1, r2
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe fd68 	bl	800c0f4 <follow_path>
 800d624:	4603      	mov	r3, r0
 800d626:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d62a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <f_mkdir+0x4c>
 800d632:	2308      	movs	r3, #8
 800d634:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d638:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d63c:	2b04      	cmp	r3, #4
 800d63e:	f040 80d6 	bne.w	800d7ee <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d642:	f107 030c 	add.w	r3, r7, #12
 800d646:	2100      	movs	r1, #0
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe f9a6 	bl	800b99a <create_chain>
 800d64e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	895b      	ldrh	r3, [r3, #10]
 800d654:	025b      	lsls	r3, r3, #9
 800d656:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d65e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <f_mkdir+0x7e>
 800d664:	2307      	movs	r3, #7
 800d666:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800d66a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d102      	bne.n	800d676 <f_mkdir+0x8a>
 800d670:	2302      	movs	r3, #2
 800d672:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67c:	d102      	bne.n	800d684 <f_mkdir+0x98>
 800d67e:	2301      	movs	r3, #1
 800d680:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800d684:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d106      	bne.n	800d69a <f_mkdir+0xae>
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fd fe8e 	bl	800b3b0 <sync_window>
 800d694:	4603      	mov	r3, r0
 800d696:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800d69a:	f7fd faed 	bl	800ac78 <get_fattime>
 800d69e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800d6a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d16a      	bne.n	800d77e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fd ff5f 	bl	800b570 <clust2sect>
 800d6b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	3334      	adds	r3, #52	@ 0x34
 800d6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800d6ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6be:	2100      	movs	r1, #0
 800d6c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d6c2:	f7fd fc7b 	bl	800afbc <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800d6c6:	220b      	movs	r2, #11
 800d6c8:	2120      	movs	r1, #32
 800d6ca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d6cc:	f7fd fc76 	bl	800afbc <mem_set>
					dir[DIR_Name] = '.';
 800d6d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6d2:	222e      	movs	r2, #46	@ 0x2e
 800d6d4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800d6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6d8:	330b      	adds	r3, #11
 800d6da:	2210      	movs	r2, #16
 800d6dc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800d6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e0:	3316      	adds	r3, #22
 800d6e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fd fc1c 	bl	800af22 <st_dword>
					st_clust(fs, dir, dcl);
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fe fbc4 	bl	800be7e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800d6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f8:	3320      	adds	r3, #32
 800d6fa:	2220      	movs	r2, #32
 800d6fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fd fc3b 	bl	800af7a <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800d704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d706:	3321      	adds	r3, #33	@ 0x21
 800d708:	222e      	movs	r2, #46	@ 0x2e
 800d70a:	701a      	strb	r2, [r3, #0]
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b03      	cmp	r3, #3
 800d716:	d106      	bne.n	800d726 <f_mkdir+0x13a>
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d71c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d71e:	429a      	cmp	r2, r3
 800d720:	d101      	bne.n	800d726 <f_mkdir+0x13a>
 800d722:	2300      	movs	r3, #0
 800d724:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800d726:	68b8      	ldr	r0, [r7, #8]
 800d728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72a:	3320      	adds	r3, #32
 800d72c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d72e:	4619      	mov	r1, r3
 800d730:	f7fe fba5 	bl	800be7e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	895b      	ldrh	r3, [r3, #10]
 800d738:	653b      	str	r3, [r7, #80]	@ 0x50
 800d73a:	e01b      	b.n	800d774 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800d73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d73e:	1c5a      	adds	r2, r3, #1
 800d740:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	2201      	movs	r2, #1
 800d74a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fd fe2e 	bl	800b3b0 <sync_window>
 800d754:	4603      	mov	r3, r0
 800d756:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800d75a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10c      	bne.n	800d77c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800d762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d766:	2100      	movs	r1, #0
 800d768:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d76a:	f7fd fc27 	bl	800afbc <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d76e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d770:	3b01      	subs	r3, #1
 800d772:	653b      	str	r3, [r7, #80]	@ 0x50
 800d774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1e0      	bne.n	800d73c <f_mkdir+0x150>
 800d77a:	e000      	b.n	800d77e <f_mkdir+0x192>
					if (res != FR_OK) break;
 800d77c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800d77e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d782:	2b00      	cmp	r3, #0
 800d784:	d107      	bne.n	800d796 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800d786:	f107 030c 	add.w	r3, r7, #12
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe fbec 	bl	800bf68 <dir_register>
 800d790:	4603      	mov	r3, r0
 800d792:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800d796:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d120      	bne.n	800d7e0 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800d79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800d7a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a4:	3316      	adds	r3, #22
 800d7a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fd fbba 	bl	800af22 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fe fb62 	bl	800be7e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800d7ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7bc:	330b      	adds	r3, #11
 800d7be:	2210      	movs	r2, #16
 800d7c0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800d7c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10e      	bne.n	800d7ee <f_mkdir+0x202>
					res = sync_fs(fs);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fd fe5e 	bl	800b494 <sync_fs>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d7de:	e006      	b.n	800d7ee <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe f871 	bl	800b8d0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fd fc53 	bl	800b0a2 <unlock_fs>
 800d7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800d800:	4618      	mov	r0, r3
 800d802:	3758      	adds	r7, #88	@ 0x58
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d808:	b480      	push	{r7}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	4613      	mov	r3, r2
 800d814:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d816:	2301      	movs	r3, #1
 800d818:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d81a:	2300      	movs	r3, #0
 800d81c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d81e:	4b1f      	ldr	r3, [pc, #124]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d820:	7a5b      	ldrb	r3, [r3, #9]
 800d822:	b2db      	uxtb	r3, r3
 800d824:	2b00      	cmp	r3, #0
 800d826:	d131      	bne.n	800d88c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d828:	4b1c      	ldr	r3, [pc, #112]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d82a:	7a5b      	ldrb	r3, [r3, #9]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	461a      	mov	r2, r3
 800d830:	4b1a      	ldr	r3, [pc, #104]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d832:	2100      	movs	r1, #0
 800d834:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d836:	4b19      	ldr	r3, [pc, #100]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d838:	7a5b      	ldrb	r3, [r3, #9]
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	4a17      	ldr	r2, [pc, #92]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4413      	add	r3, r2
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d846:	4b15      	ldr	r3, [pc, #84]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d848:	7a5b      	ldrb	r3, [r3, #9]
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	461a      	mov	r2, r3
 800d84e:	4b13      	ldr	r3, [pc, #76]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d850:	4413      	add	r3, r2
 800d852:	79fa      	ldrb	r2, [r7, #7]
 800d854:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d856:	4b11      	ldr	r3, [pc, #68]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d858:	7a5b      	ldrb	r3, [r3, #9]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	b2d1      	uxtb	r1, r2
 800d860:	4a0e      	ldr	r2, [pc, #56]	@ (800d89c <FATFS_LinkDriverEx+0x94>)
 800d862:	7251      	strb	r1, [r2, #9]
 800d864:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d866:	7dbb      	ldrb	r3, [r7, #22]
 800d868:	3330      	adds	r3, #48	@ 0x30
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	3301      	adds	r3, #1
 800d874:	223a      	movs	r2, #58	@ 0x3a
 800d876:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	3302      	adds	r3, #2
 800d87c:	222f      	movs	r2, #47	@ 0x2f
 800d87e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	3303      	adds	r3, #3
 800d884:	2200      	movs	r2, #0
 800d886:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d888:	2300      	movs	r3, #0
 800d88a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	371c      	adds	r7, #28
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	20001214 	.word	0x20001214

0800d8a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff ffaa 	bl	800d808 <FATFS_LinkDriverEx>
 800d8b4:	4603      	mov	r3, r0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b084      	sub	sp, #16
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	6039      	str	r1, [r7, #0]
 800d8c8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d8ce:	f107 0308 	add.w	r3, r7, #8
 800d8d2:	2101      	movs	r1, #1
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 f939 	bl	800db4c <osSemaphoreCreate>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bf14      	ite	ne
 800d8e8:	2301      	movne	r3, #1
 800d8ea:	2300      	moveq	r3, #0
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	60fb      	str	r3, [r7, #12]

    return ret;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f9c4 	bl	800dc90 <osSemaphoreDelete>
#endif
    return 1;
 800d908:	2301      	movs	r3, #1
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800d91e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f930 	bl	800db88 <osSemaphoreWait>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d92e:	2301      	movs	r3, #1
 800d930:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d932:	68fb      	ldr	r3, [r7, #12]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f96d 	bl	800dc24 <osSemaphoreRelease>
#endif
}
 800d94a:	bf00      	nop
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d952:	b480      	push	{r7}
 800d954:	b085      	sub	sp, #20
 800d956:	af00      	add	r7, sp, #0
 800d958:	4603      	mov	r3, r0
 800d95a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d95c:	2300      	movs	r3, #0
 800d95e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d964:	2b84      	cmp	r3, #132	@ 0x84
 800d966:	d005      	beq.n	800d974 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d968:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	3303      	adds	r3, #3
 800d972:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d974:	68fb      	ldr	r3, [r7, #12]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3714      	adds	r7, #20
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d982:	b480      	push	{r7}
 800d984:	b083      	sub	sp, #12
 800d986:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d988:	f3ef 8305 	mrs	r3, IPSR
 800d98c:	607b      	str	r3, [r7, #4]
  return(result);
 800d98e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d990:	2b00      	cmp	r3, #0
 800d992:	bf14      	ite	ne
 800d994:	2301      	movne	r3, #1
 800d996:	2300      	moveq	r3, #0
 800d998:	b2db      	uxtb	r3, r3
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d9aa:	f001 fa6b 	bl	800ee84 <vTaskStartScheduler>
  
  return osOK;
 800d9ae:	2300      	movs	r3, #0
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9b6:	b087      	sub	sp, #28
 800d9b8:	af02      	add	r7, sp, #8
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685c      	ldr	r4, [r3, #4]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9ca:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff ffbd 	bl	800d952 <makeFreeRtosPriority>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	f107 030c 	add.w	r3, r7, #12
 800d9de:	9301      	str	r3, [sp, #4]
 800d9e0:	9200      	str	r2, [sp, #0]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f000 ffad 	bl	800e948 <xTaskCreate>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d001      	beq.n	800d9f8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	e000      	b.n	800d9fa <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3714      	adds	r7, #20
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <osDelay+0x16>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	e000      	b.n	800da1a <osDelay+0x18>
 800da18:	2301      	movs	r3, #1
 800da1a:	4618      	mov	r0, r3
 800da1c:	f001 f968 	bl	800ecf0 <vTaskDelay>
  
  return osOK;
 800da20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800da32:	2001      	movs	r0, #1
 800da34:	f000 fada 	bl	800dfec <xQueueCreateMutex>
 800da38:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
	...

0800da44 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800da4e:	2300      	movs	r3, #0
 800da50:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d101      	bne.n	800da5c <osMutexWait+0x18>
    return osErrorParameter;
 800da58:	2380      	movs	r3, #128	@ 0x80
 800da5a:	e03a      	b.n	800dad2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da66:	d103      	bne.n	800da70 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800da68:	f04f 33ff 	mov.w	r3, #4294967295
 800da6c:	60fb      	str	r3, [r7, #12]
 800da6e:	e009      	b.n	800da84 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d006      	beq.n	800da84 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <osMutexWait+0x40>
      ticks = 1;
 800da80:	2301      	movs	r3, #1
 800da82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800da84:	f7ff ff7d 	bl	800d982 <inHandlerMode>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d017      	beq.n	800dabe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800da8e:	f107 0308 	add.w	r3, r7, #8
 800da92:	461a      	mov	r2, r3
 800da94:	2100      	movs	r1, #0
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fd62 	bl	800e560 <xQueueReceiveFromISR>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d001      	beq.n	800daa6 <osMutexWait+0x62>
      return osErrorOS;
 800daa2:	23ff      	movs	r3, #255	@ 0xff
 800daa4:	e015      	b.n	800dad2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d011      	beq.n	800dad0 <osMutexWait+0x8c>
 800daac:	4b0b      	ldr	r3, [pc, #44]	@ (800dadc <osMutexWait+0x98>)
 800daae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	e008      	b.n	800dad0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fc3d 	bl	800e340 <xQueueSemaphoreTake>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d001      	beq.n	800dad0 <osMutexWait+0x8c>
    return osErrorOS;
 800dacc:	23ff      	movs	r3, #255	@ 0xff
 800dace:	e000      	b.n	800dad2 <osMutexWait+0x8e>
  }
  
  return osOK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	e000ed04 	.word	0xe000ed04

0800dae0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dae8:	2300      	movs	r3, #0
 800daea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800daec:	2300      	movs	r3, #0
 800daee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800daf0:	f7ff ff47 	bl	800d982 <inHandlerMode>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d016      	beq.n	800db28 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800dafa:	f107 0308 	add.w	r3, r7, #8
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fb8d 	bl	800e220 <xQueueGiveFromISR>
 800db06:	4603      	mov	r3, r0
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d001      	beq.n	800db10 <osMutexRelease+0x30>
      return osErrorOS;
 800db0c:	23ff      	movs	r3, #255	@ 0xff
 800db0e:	e017      	b.n	800db40 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d013      	beq.n	800db3e <osMutexRelease+0x5e>
 800db16:	4b0c      	ldr	r3, [pc, #48]	@ (800db48 <osMutexRelease+0x68>)
 800db18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db1c:	601a      	str	r2, [r3, #0]
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	e00a      	b.n	800db3e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800db28:	2300      	movs	r3, #0
 800db2a:	2200      	movs	r2, #0
 800db2c:	2100      	movs	r1, #0
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fa74 	bl	800e01c <xQueueGenericSend>
 800db34:	4603      	mov	r3, r0
 800db36:	2b01      	cmp	r3, #1
 800db38:	d001      	beq.n	800db3e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800db3a:	23ff      	movs	r3, #255	@ 0xff
 800db3c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800db3e:	68fb      	ldr	r3, [r7, #12]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	e000ed04 	.word	0xe000ed04

0800db4c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d110      	bne.n	800db7e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800db5c:	2203      	movs	r2, #3
 800db5e:	2100      	movs	r1, #0
 800db60:	2001      	movs	r0, #1
 800db62:	f000 f9d3 	bl	800df0c <xQueueGenericCreate>
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d005      	beq.n	800db7a <osSemaphoreCreate+0x2e>
 800db6e:	2300      	movs	r3, #0
 800db70:	2200      	movs	r2, #0
 800db72:	2100      	movs	r1, #0
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 fa51 	bl	800e01c <xQueueGenericSend>
    return sema;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	e000      	b.n	800db80 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800db7e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800db92:	2300      	movs	r3, #0
 800db94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d101      	bne.n	800dba0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800db9c:	2380      	movs	r3, #128	@ 0x80
 800db9e:	e03a      	b.n	800dc16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800dba0:	2300      	movs	r3, #0
 800dba2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbaa:	d103      	bne.n	800dbb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800dbac:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb0:	60fb      	str	r3, [r7, #12]
 800dbb2:	e009      	b.n	800dbc8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d006      	beq.n	800dbc8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d101      	bne.n	800dbc8 <osSemaphoreWait+0x40>
      ticks = 1;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dbc8:	f7ff fedb 	bl	800d982 <inHandlerMode>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d017      	beq.n	800dc02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dbd2:	f107 0308 	add.w	r3, r7, #8
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	2100      	movs	r1, #0
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fcc0 	bl	800e560 <xQueueReceiveFromISR>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d001      	beq.n	800dbea <osSemaphoreWait+0x62>
      return osErrorOS;
 800dbe6:	23ff      	movs	r3, #255	@ 0xff
 800dbe8:	e015      	b.n	800dc16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d011      	beq.n	800dc14 <osSemaphoreWait+0x8c>
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800dc20 <osSemaphoreWait+0x98>)
 800dbf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbf6:	601a      	str	r2, [r3, #0]
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	f3bf 8f6f 	isb	sy
 800dc00:	e008      	b.n	800dc14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dc02:	68f9      	ldr	r1, [r7, #12]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fb9b 	bl	800e340 <xQueueSemaphoreTake>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d001      	beq.n	800dc14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dc10:	23ff      	movs	r3, #255	@ 0xff
 800dc12:	e000      	b.n	800dc16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	e000ed04 	.word	0xe000ed04

0800dc24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dc34:	f7ff fea5 	bl	800d982 <inHandlerMode>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d016      	beq.n	800dc6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dc3e:	f107 0308 	add.w	r3, r7, #8
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 faeb 	bl	800e220 <xQueueGiveFromISR>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d001      	beq.n	800dc54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800dc50:	23ff      	movs	r3, #255	@ 0xff
 800dc52:	e017      	b.n	800dc84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d013      	beq.n	800dc82 <osSemaphoreRelease+0x5e>
 800dc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc8c <osSemaphoreRelease+0x68>)
 800dc5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc60:	601a      	str	r2, [r3, #0]
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	e00a      	b.n	800dc82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2100      	movs	r1, #0
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f9d2 	bl	800e01c <xQueueGenericSend>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d001      	beq.n	800dc82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800dc7e:	23ff      	movs	r3, #255	@ 0xff
 800dc80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800dc82:	68fb      	ldr	r3, [r7, #12]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	e000ed04 	.word	0xe000ed04

0800dc90 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800dc98:	f7ff fe73 	bl	800d982 <inHandlerMode>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800dca2:	2382      	movs	r3, #130	@ 0x82
 800dca4:	e003      	b.n	800dcae <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fcdc 	bl	800e664 <vQueueDelete>

  return osOK; 
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b082      	sub	sp, #8
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f001 f84c 	bl	800ed5c <vTaskSuspend>
  
  return osOK;
 800dcc4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dcce:	b480      	push	{r7}
 800dcd0:	b083      	sub	sp, #12
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f103 0208 	add.w	r2, r3, #8
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f04f 32ff 	mov.w	r2, #4294967295
 800dce6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f103 0208 	add.w	r2, r3, #8
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f103 0208 	add.w	r2, r3, #8
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd02:	bf00      	nop
 800dd04:	370c      	adds	r7, #12
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b083      	sub	sp, #12
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	689a      	ldr	r2, [r3, #8]
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	683a      	ldr	r2, [r7, #0]
 800dd52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	601a      	str	r2, [r3, #0]
}
 800dd64:	bf00      	nop
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd70:	b480      	push	{r7}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd86:	d103      	bne.n	800dd90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	691b      	ldr	r3, [r3, #16]
 800dd8c:	60fb      	str	r3, [r7, #12]
 800dd8e:	e00c      	b.n	800ddaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	3308      	adds	r3, #8
 800dd94:	60fb      	str	r3, [r7, #12]
 800dd96:	e002      	b.n	800dd9e <vListInsert+0x2e>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	60fb      	str	r3, [r7, #12]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	68ba      	ldr	r2, [r7, #8]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d2f6      	bcs.n	800dd98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	685a      	ldr	r2, [r3, #4]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	1c5a      	adds	r2, r3, #1
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	601a      	str	r2, [r3, #0]
}
 800ddd6:	bf00      	nop
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr

0800dde2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dde2:	b480      	push	{r7}
 800dde4:	b085      	sub	sp, #20
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	6892      	ldr	r2, [r2, #8]
 800ddf8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	6852      	ldr	r2, [r2, #4]
 800de02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d103      	bne.n	800de16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	689a      	ldr	r2, [r3, #8]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	1e5a      	subs	r2, r3, #1
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
	...

0800de38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10b      	bne.n	800de64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de5e:	bf00      	nop
 800de60:	bf00      	nop
 800de62:	e7fd      	b.n	800de60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800de64:	f001 ff60 	bl	800fd28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de70:	68f9      	ldr	r1, [r7, #12]
 800de72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800de74:	fb01 f303 	mul.w	r3, r1, r3
 800de78:	441a      	add	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de94:	3b01      	subs	r3, #1
 800de96:	68f9      	ldr	r1, [r7, #12]
 800de98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800de9a:	fb01 f303 	mul.w	r3, r1, r3
 800de9e:	441a      	add	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	22ff      	movs	r2, #255	@ 0xff
 800dea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	22ff      	movs	r2, #255	@ 0xff
 800deb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d114      	bne.n	800dee4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d01a      	beq.n	800def8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	3310      	adds	r3, #16
 800dec6:	4618      	mov	r0, r3
 800dec8:	f001 fa2e 	bl	800f328 <xTaskRemoveFromEventList>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d012      	beq.n	800def8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ded2:	4b0d      	ldr	r3, [pc, #52]	@ (800df08 <xQueueGenericReset+0xd0>)
 800ded4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ded8:	601a      	str	r2, [r3, #0]
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	e009      	b.n	800def8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	3310      	adds	r3, #16
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff fef0 	bl	800dcce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	3324      	adds	r3, #36	@ 0x24
 800def2:	4618      	mov	r0, r3
 800def4:	f7ff feeb 	bl	800dcce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800def8:	f001 ff48 	bl	800fd8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800defc:	2301      	movs	r3, #1
}
 800defe:	4618      	mov	r0, r3
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	e000ed04 	.word	0xe000ed04

0800df0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08a      	sub	sp, #40	@ 0x28
 800df10:	af02      	add	r7, sp, #8
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	4613      	mov	r3, r2
 800df18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10b      	bne.n	800df38 <xQueueGenericCreate+0x2c>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	613b      	str	r3, [r7, #16]
}
 800df32:	bf00      	nop
 800df34:	bf00      	nop
 800df36:	e7fd      	b.n	800df34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	fb02 f303 	mul.w	r3, r2, r3
 800df40:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	3348      	adds	r3, #72	@ 0x48
 800df46:	4618      	mov	r0, r3
 800df48:	f002 f810 	bl	800ff6c <pvPortMalloc>
 800df4c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00d      	beq.n	800df70 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	3348      	adds	r3, #72	@ 0x48
 800df5c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df5e:	79fa      	ldrb	r2, [r7, #7]
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	4613      	mov	r3, r2
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	68b9      	ldr	r1, [r7, #8]
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f000 f805 	bl	800df7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df70:	69bb      	ldr	r3, [r7, #24]
	}
 800df72:	4618      	mov	r0, r3
 800df74:	3720      	adds	r7, #32
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b084      	sub	sp, #16
 800df7e:	af00      	add	r7, sp, #0
 800df80:	60f8      	str	r0, [r7, #12]
 800df82:	60b9      	str	r1, [r7, #8]
 800df84:	607a      	str	r2, [r7, #4]
 800df86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d103      	bne.n	800df96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	69ba      	ldr	r2, [r7, #24]
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	e002      	b.n	800df9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	69b8      	ldr	r0, [r7, #24]
 800dfac:	f7ff ff44 	bl	800de38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dfb0:	bf00      	nop
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00e      	beq.n	800dfe4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dfd8:	2300      	movs	r3, #0
 800dfda:	2200      	movs	r2, #0
 800dfdc:	2100      	movs	r1, #0
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 f81c 	bl	800e01c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dff6:	2301      	movs	r3, #1
 800dff8:	617b      	str	r3, [r7, #20]
 800dffa:	2300      	movs	r3, #0
 800dffc:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dffe:	79fb      	ldrb	r3, [r7, #7]
 800e000:	461a      	mov	r2, r3
 800e002:	6939      	ldr	r1, [r7, #16]
 800e004:	6978      	ldr	r0, [r7, #20]
 800e006:	f7ff ff81 	bl	800df0c <xQueueGenericCreate>
 800e00a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7ff ffd3 	bl	800dfb8 <prvInitialiseMutex>

		return xNewQueue;
 800e012:	68fb      	ldr	r3, [r7, #12]
	}
 800e014:	4618      	mov	r0, r3
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b08e      	sub	sp, #56	@ 0x38
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
 800e028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e02a:	2300      	movs	r3, #0
 800e02c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10b      	bne.n	800e050 <xQueueGenericSend+0x34>
	__asm volatile
 800e038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e04a:	bf00      	nop
 800e04c:	bf00      	nop
 800e04e:	e7fd      	b.n	800e04c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d103      	bne.n	800e05e <xQueueGenericSend+0x42>
 800e056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d101      	bne.n	800e062 <xQueueGenericSend+0x46>
 800e05e:	2301      	movs	r3, #1
 800e060:	e000      	b.n	800e064 <xQueueGenericSend+0x48>
 800e062:	2300      	movs	r3, #0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d10b      	bne.n	800e080 <xQueueGenericSend+0x64>
	__asm volatile
 800e068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e06c:	f383 8811 	msr	BASEPRI, r3
 800e070:	f3bf 8f6f 	isb	sy
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e07a:	bf00      	nop
 800e07c:	bf00      	nop
 800e07e:	e7fd      	b.n	800e07c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	2b02      	cmp	r3, #2
 800e084:	d103      	bne.n	800e08e <xQueueGenericSend+0x72>
 800e086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d101      	bne.n	800e092 <xQueueGenericSend+0x76>
 800e08e:	2301      	movs	r3, #1
 800e090:	e000      	b.n	800e094 <xQueueGenericSend+0x78>
 800e092:	2300      	movs	r3, #0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10b      	bne.n	800e0b0 <xQueueGenericSend+0x94>
	__asm volatile
 800e098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09c:	f383 8811 	msr	BASEPRI, r3
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	623b      	str	r3, [r7, #32]
}
 800e0aa:	bf00      	nop
 800e0ac:	bf00      	nop
 800e0ae:	e7fd      	b.n	800e0ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0b0:	f001 fae0 	bl	800f674 <xTaskGetSchedulerState>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d102      	bne.n	800e0c0 <xQueueGenericSend+0xa4>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <xQueueGenericSend+0xa8>
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e000      	b.n	800e0c6 <xQueueGenericSend+0xaa>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10b      	bne.n	800e0e2 <xQueueGenericSend+0xc6>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	61fb      	str	r3, [r7, #28]
}
 800e0dc:	bf00      	nop
 800e0de:	bf00      	nop
 800e0e0:	e7fd      	b.n	800e0de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0e2:	f001 fe21 	bl	800fd28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d302      	bcc.n	800e0f8 <xQueueGenericSend+0xdc>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d129      	bne.n	800e14c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	68b9      	ldr	r1, [r7, #8]
 800e0fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0fe:	f000 fae8 	bl	800e6d2 <prvCopyDataToQueue>
 800e102:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d010      	beq.n	800e12e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10e:	3324      	adds	r3, #36	@ 0x24
 800e110:	4618      	mov	r0, r3
 800e112:	f001 f909 	bl	800f328 <xTaskRemoveFromEventList>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d013      	beq.n	800e144 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e11c:	4b3f      	ldr	r3, [pc, #252]	@ (800e21c <xQueueGenericSend+0x200>)
 800e11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	e00a      	b.n	800e144 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d007      	beq.n	800e144 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e134:	4b39      	ldr	r3, [pc, #228]	@ (800e21c <xQueueGenericSend+0x200>)
 800e136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e144:	f001 fe22 	bl	800fd8c <vPortExitCritical>
				return pdPASS;
 800e148:	2301      	movs	r3, #1
 800e14a:	e063      	b.n	800e214 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d103      	bne.n	800e15a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e152:	f001 fe1b 	bl	800fd8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e156:	2300      	movs	r3, #0
 800e158:	e05c      	b.n	800e214 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d106      	bne.n	800e16e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e160:	f107 0314 	add.w	r3, r7, #20
 800e164:	4618      	mov	r0, r3
 800e166:	f001 f943 	bl	800f3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e16a:	2301      	movs	r3, #1
 800e16c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e16e:	f001 fe0d 	bl	800fd8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e172:	f000 fed9 	bl	800ef28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e176:	f001 fdd7 	bl	800fd28 <vPortEnterCritical>
 800e17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e180:	b25b      	sxtb	r3, r3
 800e182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e186:	d103      	bne.n	800e190 <xQueueGenericSend+0x174>
 800e188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e196:	b25b      	sxtb	r3, r3
 800e198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19c:	d103      	bne.n	800e1a6 <xQueueGenericSend+0x18a>
 800e19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1a6:	f001 fdf1 	bl	800fd8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1aa:	1d3a      	adds	r2, r7, #4
 800e1ac:	f107 0314 	add.w	r3, r7, #20
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f001 f932 	bl	800f41c <xTaskCheckForTimeOut>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d124      	bne.n	800e208 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1c0:	f000 fb7f 	bl	800e8c2 <prvIsQueueFull>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d018      	beq.n	800e1fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1cc:	3310      	adds	r3, #16
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f001 f882 	bl	800f2dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1da:	f000 fb0a 	bl	800e7f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1de:	f000 feb1 	bl	800ef44 <xTaskResumeAll>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f47f af7c 	bne.w	800e0e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e21c <xQueueGenericSend+0x200>)
 800e1ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	e772      	b.n	800e0e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1fe:	f000 faf8 	bl	800e7f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e202:	f000 fe9f 	bl	800ef44 <xTaskResumeAll>
 800e206:	e76c      	b.n	800e0e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e20a:	f000 faf2 	bl	800e7f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e20e:	f000 fe99 	bl	800ef44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e214:	4618      	mov	r0, r3
 800e216:	3738      	adds	r7, #56	@ 0x38
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	e000ed04 	.word	0xe000ed04

0800e220 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08e      	sub	sp, #56	@ 0x38
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10b      	bne.n	800e24c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	623b      	str	r3, [r7, #32]
}
 800e246:	bf00      	nop
 800e248:	bf00      	nop
 800e24a:	e7fd      	b.n	800e248 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00b      	beq.n	800e26c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800e254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	61fb      	str	r3, [r7, #28]
}
 800e266:	bf00      	nop
 800e268:	bf00      	nop
 800e26a:	e7fd      	b.n	800e268 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d103      	bne.n	800e27c <xQueueGiveFromISR+0x5c>
 800e274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d101      	bne.n	800e280 <xQueueGiveFromISR+0x60>
 800e27c:	2301      	movs	r3, #1
 800e27e:	e000      	b.n	800e282 <xQueueGiveFromISR+0x62>
 800e280:	2300      	movs	r3, #0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10b      	bne.n	800e29e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800e286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e28a:	f383 8811 	msr	BASEPRI, r3
 800e28e:	f3bf 8f6f 	isb	sy
 800e292:	f3bf 8f4f 	dsb	sy
 800e296:	61bb      	str	r3, [r7, #24]
}
 800e298:	bf00      	nop
 800e29a:	bf00      	nop
 800e29c:	e7fd      	b.n	800e29a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e29e:	f001 fe23 	bl	800fee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e2a2:	f3ef 8211 	mrs	r2, BASEPRI
 800e2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	617a      	str	r2, [r7, #20]
 800e2b8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d22b      	bcs.n	800e326 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2e8:	d112      	bne.n	800e310 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d016      	beq.n	800e320 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f4:	3324      	adds	r3, #36	@ 0x24
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f001 f816 	bl	800f328 <xTaskRemoveFromEventList>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00e      	beq.n	800e320 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00b      	beq.n	800e320 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	2201      	movs	r2, #1
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	e007      	b.n	800e320 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e314:	3301      	adds	r3, #1
 800e316:	b2db      	uxtb	r3, r3
 800e318:	b25a      	sxtb	r2, r3
 800e31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e320:	2301      	movs	r3, #1
 800e322:	637b      	str	r3, [r7, #52]	@ 0x34
 800e324:	e001      	b.n	800e32a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e326:	2300      	movs	r3, #0
 800e328:	637b      	str	r3, [r7, #52]	@ 0x34
 800e32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e334:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3738      	adds	r7, #56	@ 0x38
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08e      	sub	sp, #56	@ 0x38
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e34a:	2300      	movs	r3, #0
 800e34c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e352:	2300      	movs	r3, #0
 800e354:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10b      	bne.n	800e374 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e360:	f383 8811 	msr	BASEPRI, r3
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	623b      	str	r3, [r7, #32]
}
 800e36e:	bf00      	nop
 800e370:	bf00      	nop
 800e372:	e7fd      	b.n	800e370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00b      	beq.n	800e394 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	61fb      	str	r3, [r7, #28]
}
 800e38e:	bf00      	nop
 800e390:	bf00      	nop
 800e392:	e7fd      	b.n	800e390 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e394:	f001 f96e 	bl	800f674 <xTaskGetSchedulerState>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d102      	bne.n	800e3a4 <xQueueSemaphoreTake+0x64>
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <xQueueSemaphoreTake+0x68>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e000      	b.n	800e3aa <xQueueSemaphoreTake+0x6a>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d10b      	bne.n	800e3c6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	61bb      	str	r3, [r7, #24]
}
 800e3c0:	bf00      	nop
 800e3c2:	bf00      	nop
 800e3c4:	e7fd      	b.n	800e3c2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3c6:	f001 fcaf 	bl	800fd28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d024      	beq.n	800e420 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d8:	1e5a      	subs	r2, r3, #1
 800e3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d104      	bne.n	800e3f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e3e6:	f001 faf1 	bl	800f9cc <pvTaskIncrementMutexHeldCount>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00f      	beq.n	800e418 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fa:	3310      	adds	r3, #16
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f000 ff93 	bl	800f328 <xTaskRemoveFromEventList>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d007      	beq.n	800e418 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e408:	4b54      	ldr	r3, [pc, #336]	@ (800e55c <xQueueSemaphoreTake+0x21c>)
 800e40a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e40e:	601a      	str	r2, [r3, #0]
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e418:	f001 fcb8 	bl	800fd8c <vPortExitCritical>
				return pdPASS;
 800e41c:	2301      	movs	r3, #1
 800e41e:	e098      	b.n	800e552 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d112      	bne.n	800e44c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00b      	beq.n	800e444 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	617b      	str	r3, [r7, #20]
}
 800e43e:	bf00      	nop
 800e440:	bf00      	nop
 800e442:	e7fd      	b.n	800e440 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e444:	f001 fca2 	bl	800fd8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e448:	2300      	movs	r3, #0
 800e44a:	e082      	b.n	800e552 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d106      	bne.n	800e460 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e452:	f107 030c 	add.w	r3, r7, #12
 800e456:	4618      	mov	r0, r3
 800e458:	f000 ffca 	bl	800f3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e45c:	2301      	movs	r3, #1
 800e45e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e460:	f001 fc94 	bl	800fd8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e464:	f000 fd60 	bl	800ef28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e468:	f001 fc5e 	bl	800fd28 <vPortEnterCritical>
 800e46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e472:	b25b      	sxtb	r3, r3
 800e474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e478:	d103      	bne.n	800e482 <xQueueSemaphoreTake+0x142>
 800e47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47c:	2200      	movs	r2, #0
 800e47e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e488:	b25b      	sxtb	r3, r3
 800e48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e48e:	d103      	bne.n	800e498 <xQueueSemaphoreTake+0x158>
 800e490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e492:	2200      	movs	r2, #0
 800e494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e498:	f001 fc78 	bl	800fd8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e49c:	463a      	mov	r2, r7
 800e49e:	f107 030c 	add.w	r3, r7, #12
 800e4a2:	4611      	mov	r1, r2
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 ffb9 	bl	800f41c <xTaskCheckForTimeOut>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d132      	bne.n	800e516 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4b2:	f000 f9f0 	bl	800e896 <prvIsQueueEmpty>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d026      	beq.n	800e50a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d109      	bne.n	800e4d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e4c4:	f001 fc30 	bl	800fd28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f001 f8ef 	bl	800f6b0 <xTaskPriorityInherit>
 800e4d2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e4d4:	f001 fc5a 	bl	800fd8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4da:	3324      	adds	r3, #36	@ 0x24
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	4611      	mov	r1, r2
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 fefb 	bl	800f2dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4e8:	f000 f983 	bl	800e7f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4ec:	f000 fd2a 	bl	800ef44 <xTaskResumeAll>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f47f af67 	bne.w	800e3c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e4f8:	4b18      	ldr	r3, [pc, #96]	@ (800e55c <xQueueSemaphoreTake+0x21c>)
 800e4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4fe:	601a      	str	r2, [r3, #0]
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	e75d      	b.n	800e3c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e50a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e50c:	f000 f971 	bl	800e7f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e510:	f000 fd18 	bl	800ef44 <xTaskResumeAll>
 800e514:	e757      	b.n	800e3c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e518:	f000 f96b 	bl	800e7f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e51c:	f000 fd12 	bl	800ef44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e522:	f000 f9b8 	bl	800e896 <prvIsQueueEmpty>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f43f af4c 	beq.w	800e3c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00d      	beq.n	800e550 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e534:	f001 fbf8 	bl	800fd28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e538:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e53a:	f000 f8b2 	bl	800e6a2 <prvGetDisinheritPriorityAfterTimeout>
 800e53e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e546:	4618      	mov	r0, r3
 800e548:	f001 f9b0 	bl	800f8ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e54c:	f001 fc1e 	bl	800fd8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e552:	4618      	mov	r0, r3
 800e554:	3738      	adds	r7, #56	@ 0x38
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	e000ed04 	.word	0xe000ed04

0800e560 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b08e      	sub	sp, #56	@ 0x38
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10b      	bne.n	800e58e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	623b      	str	r3, [r7, #32]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d103      	bne.n	800e59c <xQueueReceiveFromISR+0x3c>
 800e594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <xQueueReceiveFromISR+0x40>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e000      	b.n	800e5a2 <xQueueReceiveFromISR+0x42>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d10b      	bne.n	800e5be <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5aa:	f383 8811 	msr	BASEPRI, r3
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f3bf 8f4f 	dsb	sy
 800e5b6:	61fb      	str	r3, [r7, #28]
}
 800e5b8:	bf00      	nop
 800e5ba:	bf00      	nop
 800e5bc:	e7fd      	b.n	800e5ba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5be:	f001 fc93 	bl	800fee8 <vPortValidateInterruptPriority>
	__asm volatile
 800e5c2:	f3ef 8211 	mrs	r2, BASEPRI
 800e5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ca:	f383 8811 	msr	BASEPRI, r3
 800e5ce:	f3bf 8f6f 	isb	sy
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	61ba      	str	r2, [r7, #24]
 800e5d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e5da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d02f      	beq.n	800e64a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e5f4:	68b9      	ldr	r1, [r7, #8]
 800e5f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5f8:	f000 f8d5 	bl	800e7a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fe:	1e5a      	subs	r2, r3, #1
 800e600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e602:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e604:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e60c:	d112      	bne.n	800e634 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e610:	691b      	ldr	r3, [r3, #16]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d016      	beq.n	800e644 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e618:	3310      	adds	r3, #16
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 fe84 	bl	800f328 <xTaskRemoveFromEventList>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00e      	beq.n	800e644 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00b      	beq.n	800e644 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	e007      	b.n	800e644 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e638:	3301      	adds	r3, #1
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	b25a      	sxtb	r2, r3
 800e63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e644:	2301      	movs	r3, #1
 800e646:	637b      	str	r3, [r7, #52]	@ 0x34
 800e648:	e001      	b.n	800e64e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e64a:	2300      	movs	r3, #0
 800e64c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e650:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	f383 8811 	msr	BASEPRI, r3
}
 800e658:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3738      	adds	r7, #56	@ 0x38
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10b      	bne.n	800e68e <vQueueDelete+0x2a>
	__asm volatile
 800e676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67a:	f383 8811 	msr	BASEPRI, r3
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	60bb      	str	r3, [r7, #8]
}
 800e688:	bf00      	nop
 800e68a:	bf00      	nop
 800e68c:	e7fd      	b.n	800e68a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f000 f930 	bl	800e8f4 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f001 fd37 	bl	8010108 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e69a:	bf00      	nop
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e6a2:	b480      	push	{r7}
 800e6a4:	b085      	sub	sp, #20
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d006      	beq.n	800e6c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f1c3 0307 	rsb	r3, r3, #7
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	e001      	b.n	800e6c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
	}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3714      	adds	r7, #20
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b086      	sub	sp, #24
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	60f8      	str	r0, [r7, #12]
 800e6da:	60b9      	str	r1, [r7, #8]
 800e6dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d10d      	bne.n	800e70c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d14d      	bne.n	800e794 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f001 f84d 	bl	800f79c <xTaskPriorityDisinherit>
 800e702:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	609a      	str	r2, [r3, #8]
 800e70a:	e043      	b.n	800e794 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d119      	bne.n	800e746 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6858      	ldr	r0, [r3, #4]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e71a:	461a      	mov	r2, r3
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	f002 feb2 	bl	8011486 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	685a      	ldr	r2, [r3, #4]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e72a:	441a      	add	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d32b      	bcc.n	800e794 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	605a      	str	r2, [r3, #4]
 800e744:	e026      	b.n	800e794 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	68d8      	ldr	r0, [r3, #12]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e74e:	461a      	mov	r2, r3
 800e750:	68b9      	ldr	r1, [r7, #8]
 800e752:	f002 fe98 	bl	8011486 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	68da      	ldr	r2, [r3, #12]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e75e:	425b      	negs	r3, r3
 800e760:	441a      	add	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	68da      	ldr	r2, [r3, #12]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d207      	bcs.n	800e782 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	689a      	ldr	r2, [r3, #8]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e77a:	425b      	negs	r3, r3
 800e77c:	441a      	add	r2, r3
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2b02      	cmp	r3, #2
 800e786:	d105      	bne.n	800e794 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	3b01      	subs	r3, #1
 800e792:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e79c:	697b      	ldr	r3, [r7, #20]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3718      	adds	r7, #24
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d018      	beq.n	800e7ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	68da      	ldr	r2, [r3, #12]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7c0:	441a      	add	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	68da      	ldr	r2, [r3, #12]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d303      	bcc.n	800e7da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	68d9      	ldr	r1, [r3, #12]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	6838      	ldr	r0, [r7, #0]
 800e7e6:	f002 fe4e 	bl	8011486 <memcpy>
	}
}
 800e7ea:	bf00      	nop
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e7fa:	f001 fa95 	bl	800fd28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e804:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e806:	e011      	b.n	800e82c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d012      	beq.n	800e836 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	3324      	adds	r3, #36	@ 0x24
 800e814:	4618      	mov	r0, r3
 800e816:	f000 fd87 	bl	800f328 <xTaskRemoveFromEventList>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d001      	beq.n	800e824 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e820:	f000 fe60 	bl	800f4e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e824:	7bfb      	ldrb	r3, [r7, #15]
 800e826:	3b01      	subs	r3, #1
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e830:	2b00      	cmp	r3, #0
 800e832:	dce9      	bgt.n	800e808 <prvUnlockQueue+0x16>
 800e834:	e000      	b.n	800e838 <prvUnlockQueue+0x46>
					break;
 800e836:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	22ff      	movs	r2, #255	@ 0xff
 800e83c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e840:	f001 faa4 	bl	800fd8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e844:	f001 fa70 	bl	800fd28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e84e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e850:	e011      	b.n	800e876 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d012      	beq.n	800e880 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	3310      	adds	r3, #16
 800e85e:	4618      	mov	r0, r3
 800e860:	f000 fd62 	bl	800f328 <xTaskRemoveFromEventList>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e86a:	f000 fe3b 	bl	800f4e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e86e:	7bbb      	ldrb	r3, [r7, #14]
 800e870:	3b01      	subs	r3, #1
 800e872:	b2db      	uxtb	r3, r3
 800e874:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	dce9      	bgt.n	800e852 <prvUnlockQueue+0x60>
 800e87e:	e000      	b.n	800e882 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e880:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	22ff      	movs	r2, #255	@ 0xff
 800e886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e88a:	f001 fa7f 	bl	800fd8c <vPortExitCritical>
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b084      	sub	sp, #16
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e89e:	f001 fa43 	bl	800fd28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d102      	bne.n	800e8b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	e001      	b.n	800e8b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e8b4:	f001 fa6a 	bl	800fd8c <vPortExitCritical>

	return xReturn;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}

0800e8c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b084      	sub	sp, #16
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8ca:	f001 fa2d 	bl	800fd28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d102      	bne.n	800e8e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	60fb      	str	r3, [r7, #12]
 800e8de:	e001      	b.n	800e8e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e8e4:	f001 fa52 	bl	800fd8c <vPortExitCritical>

	return xReturn;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
	...

0800e8f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	60fb      	str	r3, [r7, #12]
 800e900:	e016      	b.n	800e930 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e902:	4a10      	ldr	r2, [pc, #64]	@ (800e944 <vQueueUnregisterQueue+0x50>)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	00db      	lsls	r3, r3, #3
 800e908:	4413      	add	r3, r2
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d10b      	bne.n	800e92a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e912:	4a0c      	ldr	r2, [pc, #48]	@ (800e944 <vQueueUnregisterQueue+0x50>)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2100      	movs	r1, #0
 800e918:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e91c:	4a09      	ldr	r2, [pc, #36]	@ (800e944 <vQueueUnregisterQueue+0x50>)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	00db      	lsls	r3, r3, #3
 800e922:	4413      	add	r3, r2
 800e924:	2200      	movs	r2, #0
 800e926:	605a      	str	r2, [r3, #4]
				break;
 800e928:	e006      	b.n	800e938 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3301      	adds	r3, #1
 800e92e:	60fb      	str	r3, [r7, #12]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2b07      	cmp	r3, #7
 800e934:	d9e5      	bls.n	800e902 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e936:	bf00      	nop
 800e938:	bf00      	nop
 800e93a:	3714      	adds	r7, #20
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	20001220 	.word	0x20001220

0800e948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08c      	sub	sp, #48	@ 0x30
 800e94c:	af04      	add	r7, sp, #16
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	603b      	str	r3, [r7, #0]
 800e954:	4613      	mov	r3, r2
 800e956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e958:	88fb      	ldrh	r3, [r7, #6]
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4618      	mov	r0, r3
 800e95e:	f001 fb05 	bl	800ff6c <pvPortMalloc>
 800e962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00e      	beq.n	800e988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e96a:	20a0      	movs	r0, #160	@ 0xa0
 800e96c:	f001 fafe 	bl	800ff6c <pvPortMalloc>
 800e970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d003      	beq.n	800e980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e97e:	e005      	b.n	800e98c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e980:	6978      	ldr	r0, [r7, #20]
 800e982:	f001 fbc1 	bl	8010108 <vPortFree>
 800e986:	e001      	b.n	800e98c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e988:	2300      	movs	r3, #0
 800e98a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d013      	beq.n	800e9ba <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e992:	88fa      	ldrh	r2, [r7, #6]
 800e994:	2300      	movs	r3, #0
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	9302      	str	r3, [sp, #8]
 800e99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e99e:	9301      	str	r3, [sp, #4]
 800e9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a2:	9300      	str	r3, [sp, #0]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	68b9      	ldr	r1, [r7, #8]
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 f80f 	bl	800e9cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e9ae:	69f8      	ldr	r0, [r7, #28]
 800e9b0:	f000 f8b4 	bl	800eb1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	61bb      	str	r3, [r7, #24]
 800e9b8:	e002      	b.n	800e9c0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e9be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e9c0:	69bb      	ldr	r3, [r7, #24]
	}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3720      	adds	r7, #32
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
	...

0800e9cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b088      	sub	sp, #32
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	21a5      	movs	r1, #165	@ 0xa5
 800e9e6:	f002 fc70 	bl	80112ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	f023 0307 	bic.w	r3, r3, #7
 800ea02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	f003 0307 	and.w	r3, r3, #7
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00b      	beq.n	800ea26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	617b      	str	r3, [r7, #20]
}
 800ea20:	bf00      	nop
 800ea22:	bf00      	nop
 800ea24:	e7fd      	b.n	800ea22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d01f      	beq.n	800ea6c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	61fb      	str	r3, [r7, #28]
 800ea30:	e012      	b.n	800ea58 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	4413      	add	r3, r2
 800ea38:	7819      	ldrb	r1, [r3, #0]
 800ea3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	4413      	add	r3, r2
 800ea40:	3334      	adds	r3, #52	@ 0x34
 800ea42:	460a      	mov	r2, r1
 800ea44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d006      	beq.n	800ea60 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	3301      	adds	r3, #1
 800ea56:	61fb      	str	r3, [r7, #28]
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	2b0f      	cmp	r3, #15
 800ea5c:	d9e9      	bls.n	800ea32 <prvInitialiseNewTask+0x66>
 800ea5e:	e000      	b.n	800ea62 <prvInitialiseNewTask+0x96>
			{
				break;
 800ea60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea64:	2200      	movs	r2, #0
 800ea66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ea6a:	e003      	b.n	800ea74 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea76:	2b06      	cmp	r3, #6
 800ea78:	d901      	bls.n	800ea7e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea7a:	2306      	movs	r3, #6
 800ea7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea88:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea92:	3304      	adds	r3, #4
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7ff f93a 	bl	800dd0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9c:	3318      	adds	r3, #24
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff f935 	bl	800dd0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaac:	f1c3 0207 	rsb	r2, r3, #7
 800eab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eab8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabc:	2200      	movs	r2, #0
 800eabe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac4:	2200      	movs	r2, #0
 800eac6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eacc:	334c      	adds	r3, #76	@ 0x4c
 800eace:	224c      	movs	r2, #76	@ 0x4c
 800ead0:	2100      	movs	r1, #0
 800ead2:	4618      	mov	r0, r3
 800ead4:	f002 fbf9 	bl	80112ca <memset>
 800ead8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eada:	4a0d      	ldr	r2, [pc, #52]	@ (800eb10 <prvInitialiseNewTask+0x144>)
 800eadc:	651a      	str	r2, [r3, #80]	@ 0x50
 800eade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae0:	4a0c      	ldr	r2, [pc, #48]	@ (800eb14 <prvInitialiseNewTask+0x148>)
 800eae2:	655a      	str	r2, [r3, #84]	@ 0x54
 800eae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae6:	4a0c      	ldr	r2, [pc, #48]	@ (800eb18 <prvInitialiseNewTask+0x14c>)
 800eae8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eaea:	683a      	ldr	r2, [r7, #0]
 800eaec:	68f9      	ldr	r1, [r7, #12]
 800eaee:	69b8      	ldr	r0, [r7, #24]
 800eaf0:	f000 ffe6 	bl	800fac0 <pxPortInitialiseStack>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb06:	bf00      	nop
 800eb08:	3720      	adds	r7, #32
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	20004294 	.word	0x20004294
 800eb14:	200042fc 	.word	0x200042fc
 800eb18:	20004364 	.word	0x20004364

0800eb1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb24:	f001 f900 	bl	800fd28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb28:	4b2a      	ldr	r3, [pc, #168]	@ (800ebd4 <prvAddNewTaskToReadyList+0xb8>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	4a29      	ldr	r2, [pc, #164]	@ (800ebd4 <prvAddNewTaskToReadyList+0xb8>)
 800eb30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb32:	4b29      	ldr	r3, [pc, #164]	@ (800ebd8 <prvAddNewTaskToReadyList+0xbc>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d109      	bne.n	800eb4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb3a:	4a27      	ldr	r2, [pc, #156]	@ (800ebd8 <prvAddNewTaskToReadyList+0xbc>)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb40:	4b24      	ldr	r3, [pc, #144]	@ (800ebd4 <prvAddNewTaskToReadyList+0xb8>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d110      	bne.n	800eb6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eb48:	f000 fcf0 	bl	800f52c <prvInitialiseTaskLists>
 800eb4c:	e00d      	b.n	800eb6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eb4e:	4b23      	ldr	r3, [pc, #140]	@ (800ebdc <prvAddNewTaskToReadyList+0xc0>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d109      	bne.n	800eb6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eb56:	4b20      	ldr	r3, [pc, #128]	@ (800ebd8 <prvAddNewTaskToReadyList+0xbc>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d802      	bhi.n	800eb6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eb64:	4a1c      	ldr	r2, [pc, #112]	@ (800ebd8 <prvAddNewTaskToReadyList+0xbc>)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eb6a:	4b1d      	ldr	r3, [pc, #116]	@ (800ebe0 <prvAddNewTaskToReadyList+0xc4>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe0 <prvAddNewTaskToReadyList+0xc4>)
 800eb72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb78:	2201      	movs	r2, #1
 800eb7a:	409a      	lsls	r2, r3
 800eb7c:	4b19      	ldr	r3, [pc, #100]	@ (800ebe4 <prvAddNewTaskToReadyList+0xc8>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	4a18      	ldr	r2, [pc, #96]	@ (800ebe4 <prvAddNewTaskToReadyList+0xc8>)
 800eb84:	6013      	str	r3, [r2, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	4413      	add	r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	4a15      	ldr	r2, [pc, #84]	@ (800ebe8 <prvAddNewTaskToReadyList+0xcc>)
 800eb94:	441a      	add	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3304      	adds	r3, #4
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	f7ff f8c3 	bl	800dd28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eba2:	f001 f8f3 	bl	800fd8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eba6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebdc <prvAddNewTaskToReadyList+0xc0>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00e      	beq.n	800ebcc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ebae:	4b0a      	ldr	r3, [pc, #40]	@ (800ebd8 <prvAddNewTaskToReadyList+0xbc>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d207      	bcs.n	800ebcc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ebbc:	4b0b      	ldr	r3, [pc, #44]	@ (800ebec <prvAddNewTaskToReadyList+0xd0>)
 800ebbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebc2:	601a      	str	r2, [r3, #0]
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	20001360 	.word	0x20001360
 800ebd8:	20001260 	.word	0x20001260
 800ebdc:	2000136c 	.word	0x2000136c
 800ebe0:	2000137c 	.word	0x2000137c
 800ebe4:	20001368 	.word	0x20001368
 800ebe8:	20001264 	.word	0x20001264
 800ebec:	e000ed04 	.word	0xe000ed04

0800ebf0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b08a      	sub	sp, #40	@ 0x28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10b      	bne.n	800ec1c <vTaskDelayUntil+0x2c>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	617b      	str	r3, [r7, #20]
}
 800ec16:	bf00      	nop
 800ec18:	bf00      	nop
 800ec1a:	e7fd      	b.n	800ec18 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10b      	bne.n	800ec3a <vTaskDelayUntil+0x4a>
	__asm volatile
 800ec22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	613b      	str	r3, [r7, #16]
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop
 800ec38:	e7fd      	b.n	800ec36 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ec3a:	4b2a      	ldr	r3, [pc, #168]	@ (800ece4 <vTaskDelayUntil+0xf4>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00b      	beq.n	800ec5a <vTaskDelayUntil+0x6a>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	60fb      	str	r3, [r7, #12]
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop
 800ec58:	e7fd      	b.n	800ec56 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800ec5a:	f000 f965 	bl	800ef28 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ec5e:	4b22      	ldr	r3, [pc, #136]	@ (800ece8 <vTaskDelayUntil+0xf8>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	683a      	ldr	r2, [r7, #0]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6a3a      	ldr	r2, [r7, #32]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d20b      	bcs.n	800ec90 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	69fa      	ldr	r2, [r7, #28]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d211      	bcs.n	800eca6 <vTaskDelayUntil+0xb6>
 800ec82:	69fa      	ldr	r2, [r7, #28]
 800ec84:	6a3b      	ldr	r3, [r7, #32]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d90d      	bls.n	800eca6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec8e:	e00a      	b.n	800eca6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	69fa      	ldr	r2, [r7, #28]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d303      	bcc.n	800eca2 <vTaskDelayUntil+0xb2>
 800ec9a:	69fa      	ldr	r2, [r7, #28]
 800ec9c:	6a3b      	ldr	r3, [r7, #32]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d901      	bls.n	800eca6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800eca2:	2301      	movs	r3, #1
 800eca4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ecac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d006      	beq.n	800ecc0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ecb2:	69fa      	ldr	r2, [r7, #28]
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	2100      	movs	r1, #0
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 fe9a 	bl	800f9f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ecc0:	f000 f940 	bl	800ef44 <xTaskResumeAll>
 800ecc4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d107      	bne.n	800ecdc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800eccc:	4b07      	ldr	r3, [pc, #28]	@ (800ecec <vTaskDelayUntil+0xfc>)
 800ecce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecdc:	bf00      	nop
 800ecde:	3728      	adds	r7, #40	@ 0x28
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20001388 	.word	0x20001388
 800ece8:	20001364 	.word	0x20001364
 800ecec:	e000ed04 	.word	0xe000ed04

0800ecf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d018      	beq.n	800ed34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed02:	4b14      	ldr	r3, [pc, #80]	@ (800ed54 <vTaskDelay+0x64>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00b      	beq.n	800ed22 <vTaskDelay+0x32>
	__asm volatile
 800ed0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	60bb      	str	r3, [r7, #8]
}
 800ed1c:	bf00      	nop
 800ed1e:	bf00      	nop
 800ed20:	e7fd      	b.n	800ed1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed22:	f000 f901 	bl	800ef28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed26:	2100      	movs	r1, #0
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f000 fe63 	bl	800f9f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed2e:	f000 f909 	bl	800ef44 <xTaskResumeAll>
 800ed32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d107      	bne.n	800ed4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ed3a:	4b07      	ldr	r3, [pc, #28]	@ (800ed58 <vTaskDelay+0x68>)
 800ed3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed40:	601a      	str	r2, [r3, #0]
 800ed42:	f3bf 8f4f 	dsb	sy
 800ed46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed4a:	bf00      	nop
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20001388 	.word	0x20001388
 800ed58:	e000ed04 	.word	0xe000ed04

0800ed5c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ed64:	f000 ffe0 	bl	800fd28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d102      	bne.n	800ed74 <vTaskSuspend+0x18>
 800ed6e:	4b3d      	ldr	r3, [pc, #244]	@ (800ee64 <vTaskSuspend+0x108>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	e000      	b.n	800ed76 <vTaskSuspend+0x1a>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7ff f830 	bl	800dde2 <uxListRemove>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d115      	bne.n	800edb4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8c:	4936      	ldr	r1, [pc, #216]	@ (800ee68 <vTaskSuspend+0x10c>)
 800ed8e:	4613      	mov	r3, r2
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	4413      	add	r3, r2
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	440b      	add	r3, r1
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d10a      	bne.n	800edb4 <vTaskSuspend+0x58>
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda2:	2201      	movs	r2, #1
 800eda4:	fa02 f303 	lsl.w	r3, r2, r3
 800eda8:	43da      	mvns	r2, r3
 800edaa:	4b30      	ldr	r3, [pc, #192]	@ (800ee6c <vTaskSuspend+0x110>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4013      	ands	r3, r2
 800edb0:	4a2e      	ldr	r2, [pc, #184]	@ (800ee6c <vTaskSuspend+0x110>)
 800edb2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d004      	beq.n	800edc6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3318      	adds	r3, #24
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff f80e 	bl	800dde2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	3304      	adds	r3, #4
 800edca:	4619      	mov	r1, r3
 800edcc:	4828      	ldr	r0, [pc, #160]	@ (800ee70 <vTaskSuspend+0x114>)
 800edce:	f7fe ffab 	bl	800dd28 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d103      	bne.n	800ede6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ede6:	f000 ffd1 	bl	800fd8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800edea:	4b22      	ldr	r3, [pc, #136]	@ (800ee74 <vTaskSuspend+0x118>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d005      	beq.n	800edfe <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800edf2:	f000 ff99 	bl	800fd28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800edf6:	f000 fc1d 	bl	800f634 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800edfa:	f000 ffc7 	bl	800fd8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800edfe:	4b19      	ldr	r3, [pc, #100]	@ (800ee64 <vTaskSuspend+0x108>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d128      	bne.n	800ee5a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800ee08:	4b1a      	ldr	r3, [pc, #104]	@ (800ee74 <vTaskSuspend+0x118>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d018      	beq.n	800ee42 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ee10:	4b19      	ldr	r3, [pc, #100]	@ (800ee78 <vTaskSuspend+0x11c>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00b      	beq.n	800ee30 <vTaskSuspend+0xd4>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	60bb      	str	r3, [r7, #8]
}
 800ee2a:	bf00      	nop
 800ee2c:	bf00      	nop
 800ee2e:	e7fd      	b.n	800ee2c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800ee30:	4b12      	ldr	r3, [pc, #72]	@ (800ee7c <vTaskSuspend+0x120>)
 800ee32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee40:	e00b      	b.n	800ee5a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ee42:	4b0b      	ldr	r3, [pc, #44]	@ (800ee70 <vTaskSuspend+0x114>)
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	4b0e      	ldr	r3, [pc, #56]	@ (800ee80 <vTaskSuspend+0x124>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d103      	bne.n	800ee56 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800ee4e:	4b05      	ldr	r3, [pc, #20]	@ (800ee64 <vTaskSuspend+0x108>)
 800ee50:	2200      	movs	r2, #0
 800ee52:	601a      	str	r2, [r3, #0]
	}
 800ee54:	e001      	b.n	800ee5a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800ee56:	f000 f9dd 	bl	800f214 <vTaskSwitchContext>
	}
 800ee5a:	bf00      	nop
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20001260 	.word	0x20001260
 800ee68:	20001264 	.word	0x20001264
 800ee6c:	20001368 	.word	0x20001368
 800ee70:	2000134c 	.word	0x2000134c
 800ee74:	2000136c 	.word	0x2000136c
 800ee78:	20001388 	.word	0x20001388
 800ee7c:	e000ed04 	.word	0xe000ed04
 800ee80:	20001360 	.word	0x20001360

0800ee84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ee8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ef08 <vTaskStartScheduler+0x84>)
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	2300      	movs	r3, #0
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	2300      	movs	r3, #0
 800ee94:	2280      	movs	r2, #128	@ 0x80
 800ee96:	491d      	ldr	r1, [pc, #116]	@ (800ef0c <vTaskStartScheduler+0x88>)
 800ee98:	481d      	ldr	r0, [pc, #116]	@ (800ef10 <vTaskStartScheduler+0x8c>)
 800ee9a:	f7ff fd55 	bl	800e948 <xTaskCreate>
 800ee9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d11b      	bne.n	800eede <vTaskStartScheduler+0x5a>
	__asm volatile
 800eea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeaa:	f383 8811 	msr	BASEPRI, r3
 800eeae:	f3bf 8f6f 	isb	sy
 800eeb2:	f3bf 8f4f 	dsb	sy
 800eeb6:	60bb      	str	r3, [r7, #8]
}
 800eeb8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eeba:	4b16      	ldr	r3, [pc, #88]	@ (800ef14 <vTaskStartScheduler+0x90>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	334c      	adds	r3, #76	@ 0x4c
 800eec0:	4a15      	ldr	r2, [pc, #84]	@ (800ef18 <vTaskStartScheduler+0x94>)
 800eec2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eec4:	4b15      	ldr	r3, [pc, #84]	@ (800ef1c <vTaskStartScheduler+0x98>)
 800eec6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eecc:	4b14      	ldr	r3, [pc, #80]	@ (800ef20 <vTaskStartScheduler+0x9c>)
 800eece:	2201      	movs	r2, #1
 800eed0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eed2:	4b14      	ldr	r3, [pc, #80]	@ (800ef24 <vTaskStartScheduler+0xa0>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eed8:	f000 fe82 	bl	800fbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eedc:	e00f      	b.n	800eefe <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee4:	d10b      	bne.n	800eefe <vTaskStartScheduler+0x7a>
	__asm volatile
 800eee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	607b      	str	r3, [r7, #4]
}
 800eef8:	bf00      	nop
 800eefa:	bf00      	nop
 800eefc:	e7fd      	b.n	800eefa <vTaskStartScheduler+0x76>
}
 800eefe:	bf00      	nop
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	20001384 	.word	0x20001384
 800ef0c:	080154b8 	.word	0x080154b8
 800ef10:	0800f4fd 	.word	0x0800f4fd
 800ef14:	20001260 	.word	0x20001260
 800ef18:	2000003c 	.word	0x2000003c
 800ef1c:	20001380 	.word	0x20001380
 800ef20:	2000136c 	.word	0x2000136c
 800ef24:	20001364 	.word	0x20001364

0800ef28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ef28:	b480      	push	{r7}
 800ef2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ef2c:	4b04      	ldr	r3, [pc, #16]	@ (800ef40 <vTaskSuspendAll+0x18>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	3301      	adds	r3, #1
 800ef32:	4a03      	ldr	r2, [pc, #12]	@ (800ef40 <vTaskSuspendAll+0x18>)
 800ef34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ef36:	bf00      	nop
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr
 800ef40:	20001388 	.word	0x20001388

0800ef44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef52:	4b42      	ldr	r3, [pc, #264]	@ (800f05c <xTaskResumeAll+0x118>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10b      	bne.n	800ef72 <xTaskResumeAll+0x2e>
	__asm volatile
 800ef5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	603b      	str	r3, [r7, #0]
}
 800ef6c:	bf00      	nop
 800ef6e:	bf00      	nop
 800ef70:	e7fd      	b.n	800ef6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef72:	f000 fed9 	bl	800fd28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef76:	4b39      	ldr	r3, [pc, #228]	@ (800f05c <xTaskResumeAll+0x118>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	4a37      	ldr	r2, [pc, #220]	@ (800f05c <xTaskResumeAll+0x118>)
 800ef7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef80:	4b36      	ldr	r3, [pc, #216]	@ (800f05c <xTaskResumeAll+0x118>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d161      	bne.n	800f04c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef88:	4b35      	ldr	r3, [pc, #212]	@ (800f060 <xTaskResumeAll+0x11c>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d05d      	beq.n	800f04c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef90:	e02e      	b.n	800eff0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef92:	4b34      	ldr	r3, [pc, #208]	@ (800f064 <xTaskResumeAll+0x120>)
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	3318      	adds	r3, #24
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fe ff1f 	bl	800dde2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3304      	adds	r3, #4
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe ff1a 	bl	800dde2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb2:	2201      	movs	r2, #1
 800efb4:	409a      	lsls	r2, r3
 800efb6:	4b2c      	ldr	r3, [pc, #176]	@ (800f068 <xTaskResumeAll+0x124>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4313      	orrs	r3, r2
 800efbc:	4a2a      	ldr	r2, [pc, #168]	@ (800f068 <xTaskResumeAll+0x124>)
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc4:	4613      	mov	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4413      	add	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4a27      	ldr	r2, [pc, #156]	@ (800f06c <xTaskResumeAll+0x128>)
 800efce:	441a      	add	r2, r3
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	3304      	adds	r3, #4
 800efd4:	4619      	mov	r1, r3
 800efd6:	4610      	mov	r0, r2
 800efd8:	f7fe fea6 	bl	800dd28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efe0:	4b23      	ldr	r3, [pc, #140]	@ (800f070 <xTaskResumeAll+0x12c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d302      	bcc.n	800eff0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800efea:	4b22      	ldr	r3, [pc, #136]	@ (800f074 <xTaskResumeAll+0x130>)
 800efec:	2201      	movs	r2, #1
 800efee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eff0:	4b1c      	ldr	r3, [pc, #112]	@ (800f064 <xTaskResumeAll+0x120>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1cc      	bne.n	800ef92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800effe:	f000 fb19 	bl	800f634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f002:	4b1d      	ldr	r3, [pc, #116]	@ (800f078 <xTaskResumeAll+0x134>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d010      	beq.n	800f030 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f00e:	f000 f847 	bl	800f0a0 <xTaskIncrementTick>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d002      	beq.n	800f01e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f018:	4b16      	ldr	r3, [pc, #88]	@ (800f074 <xTaskResumeAll+0x130>)
 800f01a:	2201      	movs	r2, #1
 800f01c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	3b01      	subs	r3, #1
 800f022:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1f1      	bne.n	800f00e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f02a:	4b13      	ldr	r3, [pc, #76]	@ (800f078 <xTaskResumeAll+0x134>)
 800f02c:	2200      	movs	r2, #0
 800f02e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f030:	4b10      	ldr	r3, [pc, #64]	@ (800f074 <xTaskResumeAll+0x130>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d009      	beq.n	800f04c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f038:	2301      	movs	r3, #1
 800f03a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f03c:	4b0f      	ldr	r3, [pc, #60]	@ (800f07c <xTaskResumeAll+0x138>)
 800f03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f04c:	f000 fe9e 	bl	800fd8c <vPortExitCritical>

	return xAlreadyYielded;
 800f050:	68bb      	ldr	r3, [r7, #8]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3710      	adds	r7, #16
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	20001388 	.word	0x20001388
 800f060:	20001360 	.word	0x20001360
 800f064:	20001320 	.word	0x20001320
 800f068:	20001368 	.word	0x20001368
 800f06c:	20001264 	.word	0x20001264
 800f070:	20001260 	.word	0x20001260
 800f074:	20001374 	.word	0x20001374
 800f078:	20001370 	.word	0x20001370
 800f07c:	e000ed04 	.word	0xe000ed04

0800f080 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f086:	4b05      	ldr	r3, [pc, #20]	@ (800f09c <xTaskGetTickCount+0x1c>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f08c:	687b      	ldr	r3, [r7, #4]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	20001364 	.word	0x20001364

0800f0a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b086      	sub	sp, #24
 800f0a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0aa:	4b4f      	ldr	r3, [pc, #316]	@ (800f1e8 <xTaskIncrementTick+0x148>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f040 808f 	bne.w	800f1d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f0b4:	4b4d      	ldr	r3, [pc, #308]	@ (800f1ec <xTaskIncrementTick+0x14c>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f0bc:	4a4b      	ldr	r2, [pc, #300]	@ (800f1ec <xTaskIncrementTick+0x14c>)
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d121      	bne.n	800f10c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f0c8:	4b49      	ldr	r3, [pc, #292]	@ (800f1f0 <xTaskIncrementTick+0x150>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00b      	beq.n	800f0ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800f0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	603b      	str	r3, [r7, #0]
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop
 800f0e8:	e7fd      	b.n	800f0e6 <xTaskIncrementTick+0x46>
 800f0ea:	4b41      	ldr	r3, [pc, #260]	@ (800f1f0 <xTaskIncrementTick+0x150>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	4b40      	ldr	r3, [pc, #256]	@ (800f1f4 <xTaskIncrementTick+0x154>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a3e      	ldr	r2, [pc, #248]	@ (800f1f0 <xTaskIncrementTick+0x150>)
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	4a3e      	ldr	r2, [pc, #248]	@ (800f1f4 <xTaskIncrementTick+0x154>)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6013      	str	r3, [r2, #0]
 800f0fe:	4b3e      	ldr	r3, [pc, #248]	@ (800f1f8 <xTaskIncrementTick+0x158>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3301      	adds	r3, #1
 800f104:	4a3c      	ldr	r2, [pc, #240]	@ (800f1f8 <xTaskIncrementTick+0x158>)
 800f106:	6013      	str	r3, [r2, #0]
 800f108:	f000 fa94 	bl	800f634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f10c:	4b3b      	ldr	r3, [pc, #236]	@ (800f1fc <xTaskIncrementTick+0x15c>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	693a      	ldr	r2, [r7, #16]
 800f112:	429a      	cmp	r2, r3
 800f114:	d348      	bcc.n	800f1a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f116:	4b36      	ldr	r3, [pc, #216]	@ (800f1f0 <xTaskIncrementTick+0x150>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d104      	bne.n	800f12a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f120:	4b36      	ldr	r3, [pc, #216]	@ (800f1fc <xTaskIncrementTick+0x15c>)
 800f122:	f04f 32ff 	mov.w	r2, #4294967295
 800f126:	601a      	str	r2, [r3, #0]
					break;
 800f128:	e03e      	b.n	800f1a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f12a:	4b31      	ldr	r3, [pc, #196]	@ (800f1f0 <xTaskIncrementTick+0x150>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d203      	bcs.n	800f14a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f142:	4a2e      	ldr	r2, [pc, #184]	@ (800f1fc <xTaskIncrementTick+0x15c>)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f148:	e02e      	b.n	800f1a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3304      	adds	r3, #4
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fe fe47 	bl	800dde2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d004      	beq.n	800f166 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	3318      	adds	r3, #24
 800f160:	4618      	mov	r0, r3
 800f162:	f7fe fe3e 	bl	800dde2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f16a:	2201      	movs	r2, #1
 800f16c:	409a      	lsls	r2, r3
 800f16e:	4b24      	ldr	r3, [pc, #144]	@ (800f200 <xTaskIncrementTick+0x160>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	4313      	orrs	r3, r2
 800f174:	4a22      	ldr	r2, [pc, #136]	@ (800f200 <xTaskIncrementTick+0x160>)
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f17c:	4613      	mov	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	4413      	add	r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	4a1f      	ldr	r2, [pc, #124]	@ (800f204 <xTaskIncrementTick+0x164>)
 800f186:	441a      	add	r2, r3
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	3304      	adds	r3, #4
 800f18c:	4619      	mov	r1, r3
 800f18e:	4610      	mov	r0, r2
 800f190:	f7fe fdca 	bl	800dd28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f198:	4b1b      	ldr	r3, [pc, #108]	@ (800f208 <xTaskIncrementTick+0x168>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d3b9      	bcc.n	800f116 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1a6:	e7b6      	b.n	800f116 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f1a8:	4b17      	ldr	r3, [pc, #92]	@ (800f208 <xTaskIncrementTick+0x168>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ae:	4915      	ldr	r1, [pc, #84]	@ (800f204 <xTaskIncrementTick+0x164>)
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	4413      	add	r3, r2
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	440b      	add	r3, r1
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d901      	bls.n	800f1c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f1c4:	4b11      	ldr	r3, [pc, #68]	@ (800f20c <xTaskIncrementTick+0x16c>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d007      	beq.n	800f1dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	617b      	str	r3, [r7, #20]
 800f1d0:	e004      	b.n	800f1dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f1d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f210 <xTaskIncrementTick+0x170>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	4a0d      	ldr	r2, [pc, #52]	@ (800f210 <xTaskIncrementTick+0x170>)
 800f1da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f1dc:	697b      	ldr	r3, [r7, #20]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3718      	adds	r7, #24
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20001388 	.word	0x20001388
 800f1ec:	20001364 	.word	0x20001364
 800f1f0:	20001318 	.word	0x20001318
 800f1f4:	2000131c 	.word	0x2000131c
 800f1f8:	20001378 	.word	0x20001378
 800f1fc:	20001380 	.word	0x20001380
 800f200:	20001368 	.word	0x20001368
 800f204:	20001264 	.word	0x20001264
 800f208:	20001260 	.word	0x20001260
 800f20c:	20001374 	.word	0x20001374
 800f210:	20001370 	.word	0x20001370

0800f214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f21a:	4b2a      	ldr	r3, [pc, #168]	@ (800f2c4 <vTaskSwitchContext+0xb0>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d003      	beq.n	800f22a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f222:	4b29      	ldr	r3, [pc, #164]	@ (800f2c8 <vTaskSwitchContext+0xb4>)
 800f224:	2201      	movs	r2, #1
 800f226:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f228:	e045      	b.n	800f2b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800f22a:	4b27      	ldr	r3, [pc, #156]	@ (800f2c8 <vTaskSwitchContext+0xb4>)
 800f22c:	2200      	movs	r2, #0
 800f22e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f230:	4b26      	ldr	r3, [pc, #152]	@ (800f2cc <vTaskSwitchContext+0xb8>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	fab3 f383 	clz	r3, r3
 800f23c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f23e:	7afb      	ldrb	r3, [r7, #11]
 800f240:	f1c3 031f 	rsb	r3, r3, #31
 800f244:	617b      	str	r3, [r7, #20]
 800f246:	4922      	ldr	r1, [pc, #136]	@ (800f2d0 <vTaskSwitchContext+0xbc>)
 800f248:	697a      	ldr	r2, [r7, #20]
 800f24a:	4613      	mov	r3, r2
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	4413      	add	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	440b      	add	r3, r1
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d10b      	bne.n	800f272 <vTaskSwitchContext+0x5e>
	__asm volatile
 800f25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	607b      	str	r3, [r7, #4]
}
 800f26c:	bf00      	nop
 800f26e:	bf00      	nop
 800f270:	e7fd      	b.n	800f26e <vTaskSwitchContext+0x5a>
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	4613      	mov	r3, r2
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	4413      	add	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	4a14      	ldr	r2, [pc, #80]	@ (800f2d0 <vTaskSwitchContext+0xbc>)
 800f27e:	4413      	add	r3, r2
 800f280:	613b      	str	r3, [r7, #16]
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	605a      	str	r2, [r3, #4]
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	685a      	ldr	r2, [r3, #4]
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	3308      	adds	r3, #8
 800f294:	429a      	cmp	r2, r3
 800f296:	d104      	bne.n	800f2a2 <vTaskSwitchContext+0x8e>
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	605a      	str	r2, [r3, #4]
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	4a0a      	ldr	r2, [pc, #40]	@ (800f2d4 <vTaskSwitchContext+0xc0>)
 800f2aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f2ac:	4b09      	ldr	r3, [pc, #36]	@ (800f2d4 <vTaskSwitchContext+0xc0>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	334c      	adds	r3, #76	@ 0x4c
 800f2b2:	4a09      	ldr	r2, [pc, #36]	@ (800f2d8 <vTaskSwitchContext+0xc4>)
 800f2b4:	6013      	str	r3, [r2, #0]
}
 800f2b6:	bf00      	nop
 800f2b8:	371c      	adds	r7, #28
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	20001388 	.word	0x20001388
 800f2c8:	20001374 	.word	0x20001374
 800f2cc:	20001368 	.word	0x20001368
 800f2d0:	20001264 	.word	0x20001264
 800f2d4:	20001260 	.word	0x20001260
 800f2d8:	2000003c 	.word	0x2000003c

0800f2dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10b      	bne.n	800f304 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	60fb      	str	r3, [r7, #12]
}
 800f2fe:	bf00      	nop
 800f300:	bf00      	nop
 800f302:	e7fd      	b.n	800f300 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f304:	4b07      	ldr	r3, [pc, #28]	@ (800f324 <vTaskPlaceOnEventList+0x48>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	3318      	adds	r3, #24
 800f30a:	4619      	mov	r1, r3
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7fe fd2f 	bl	800dd70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f312:	2101      	movs	r1, #1
 800f314:	6838      	ldr	r0, [r7, #0]
 800f316:	f000 fb6d 	bl	800f9f4 <prvAddCurrentTaskToDelayedList>
}
 800f31a:	bf00      	nop
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	20001260 	.word	0x20001260

0800f328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d10b      	bne.n	800f356 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	60fb      	str	r3, [r7, #12]
}
 800f350:	bf00      	nop
 800f352:	bf00      	nop
 800f354:	e7fd      	b.n	800f352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	3318      	adds	r3, #24
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fe fd41 	bl	800dde2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f360:	4b1d      	ldr	r3, [pc, #116]	@ (800f3d8 <xTaskRemoveFromEventList+0xb0>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d11c      	bne.n	800f3a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	3304      	adds	r3, #4
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fe fd38 	bl	800dde2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f376:	2201      	movs	r2, #1
 800f378:	409a      	lsls	r2, r3
 800f37a:	4b18      	ldr	r3, [pc, #96]	@ (800f3dc <xTaskRemoveFromEventList+0xb4>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4313      	orrs	r3, r2
 800f380:	4a16      	ldr	r2, [pc, #88]	@ (800f3dc <xTaskRemoveFromEventList+0xb4>)
 800f382:	6013      	str	r3, [r2, #0]
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f388:	4613      	mov	r3, r2
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	4413      	add	r3, r2
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	4a13      	ldr	r2, [pc, #76]	@ (800f3e0 <xTaskRemoveFromEventList+0xb8>)
 800f392:	441a      	add	r2, r3
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	3304      	adds	r3, #4
 800f398:	4619      	mov	r1, r3
 800f39a:	4610      	mov	r0, r2
 800f39c:	f7fe fcc4 	bl	800dd28 <vListInsertEnd>
 800f3a0:	e005      	b.n	800f3ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	3318      	adds	r3, #24
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	480e      	ldr	r0, [pc, #56]	@ (800f3e4 <xTaskRemoveFromEventList+0xbc>)
 800f3aa:	f7fe fcbd 	bl	800dd28 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f3e8 <xTaskRemoveFromEventList+0xc0>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d905      	bls.n	800f3c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f3ec <xTaskRemoveFromEventList+0xc4>)
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	e001      	b.n	800f3cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3cc:	697b      	ldr	r3, [r7, #20]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20001388 	.word	0x20001388
 800f3dc:	20001368 	.word	0x20001368
 800f3e0:	20001264 	.word	0x20001264
 800f3e4:	20001320 	.word	0x20001320
 800f3e8:	20001260 	.word	0x20001260
 800f3ec:	20001374 	.word	0x20001374

0800f3f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3f8:	4b06      	ldr	r3, [pc, #24]	@ (800f414 <vTaskInternalSetTimeOutState+0x24>)
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f400:	4b05      	ldr	r3, [pc, #20]	@ (800f418 <vTaskInternalSetTimeOutState+0x28>)
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	605a      	str	r2, [r3, #4]
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	20001378 	.word	0x20001378
 800f418:	20001364 	.word	0x20001364

0800f41c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b088      	sub	sp, #32
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10b      	bne.n	800f444 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	613b      	str	r3, [r7, #16]
}
 800f43e:	bf00      	nop
 800f440:	bf00      	nop
 800f442:	e7fd      	b.n	800f440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d10b      	bne.n	800f462 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f44e:	f383 8811 	msr	BASEPRI, r3
 800f452:	f3bf 8f6f 	isb	sy
 800f456:	f3bf 8f4f 	dsb	sy
 800f45a:	60fb      	str	r3, [r7, #12]
}
 800f45c:	bf00      	nop
 800f45e:	bf00      	nop
 800f460:	e7fd      	b.n	800f45e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f462:	f000 fc61 	bl	800fd28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f466:	4b1d      	ldr	r3, [pc, #116]	@ (800f4dc <xTaskCheckForTimeOut+0xc0>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	69ba      	ldr	r2, [r7, #24]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47e:	d102      	bne.n	800f486 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f480:	2300      	movs	r3, #0
 800f482:	61fb      	str	r3, [r7, #28]
 800f484:	e023      	b.n	800f4ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	4b15      	ldr	r3, [pc, #84]	@ (800f4e0 <xTaskCheckForTimeOut+0xc4>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d007      	beq.n	800f4a2 <xTaskCheckForTimeOut+0x86>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	69ba      	ldr	r2, [r7, #24]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d302      	bcc.n	800f4a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f49c:	2301      	movs	r3, #1
 800f49e:	61fb      	str	r3, [r7, #28]
 800f4a0:	e015      	b.n	800f4ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d20b      	bcs.n	800f4c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	1ad2      	subs	r2, r2, r3
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff ff99 	bl	800f3f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	61fb      	str	r3, [r7, #28]
 800f4c2:	e004      	b.n	800f4ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f4ce:	f000 fc5d 	bl	800fd8c <vPortExitCritical>

	return xReturn;
 800f4d2:	69fb      	ldr	r3, [r7, #28]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3720      	adds	r7, #32
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20001364 	.word	0x20001364
 800f4e0:	20001378 	.word	0x20001378

0800f4e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4e8:	4b03      	ldr	r3, [pc, #12]	@ (800f4f8 <vTaskMissedYield+0x14>)
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	601a      	str	r2, [r3, #0]
}
 800f4ee:	bf00      	nop
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	20001374 	.word	0x20001374

0800f4fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f504:	f000 f852 	bl	800f5ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f508:	4b06      	ldr	r3, [pc, #24]	@ (800f524 <prvIdleTask+0x28>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d9f9      	bls.n	800f504 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f510:	4b05      	ldr	r3, [pc, #20]	@ (800f528 <prvIdleTask+0x2c>)
 800f512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f520:	e7f0      	b.n	800f504 <prvIdleTask+0x8>
 800f522:	bf00      	nop
 800f524:	20001264 	.word	0x20001264
 800f528:	e000ed04 	.word	0xe000ed04

0800f52c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f532:	2300      	movs	r3, #0
 800f534:	607b      	str	r3, [r7, #4]
 800f536:	e00c      	b.n	800f552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4613      	mov	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4a12      	ldr	r2, [pc, #72]	@ (800f58c <prvInitialiseTaskLists+0x60>)
 800f544:	4413      	add	r3, r2
 800f546:	4618      	mov	r0, r3
 800f548:	f7fe fbc1 	bl	800dcce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3301      	adds	r3, #1
 800f550:	607b      	str	r3, [r7, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b06      	cmp	r3, #6
 800f556:	d9ef      	bls.n	800f538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f558:	480d      	ldr	r0, [pc, #52]	@ (800f590 <prvInitialiseTaskLists+0x64>)
 800f55a:	f7fe fbb8 	bl	800dcce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f55e:	480d      	ldr	r0, [pc, #52]	@ (800f594 <prvInitialiseTaskLists+0x68>)
 800f560:	f7fe fbb5 	bl	800dcce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f564:	480c      	ldr	r0, [pc, #48]	@ (800f598 <prvInitialiseTaskLists+0x6c>)
 800f566:	f7fe fbb2 	bl	800dcce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f56a:	480c      	ldr	r0, [pc, #48]	@ (800f59c <prvInitialiseTaskLists+0x70>)
 800f56c:	f7fe fbaf 	bl	800dcce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f570:	480b      	ldr	r0, [pc, #44]	@ (800f5a0 <prvInitialiseTaskLists+0x74>)
 800f572:	f7fe fbac 	bl	800dcce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f576:	4b0b      	ldr	r3, [pc, #44]	@ (800f5a4 <prvInitialiseTaskLists+0x78>)
 800f578:	4a05      	ldr	r2, [pc, #20]	@ (800f590 <prvInitialiseTaskLists+0x64>)
 800f57a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f57c:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a8 <prvInitialiseTaskLists+0x7c>)
 800f57e:	4a05      	ldr	r2, [pc, #20]	@ (800f594 <prvInitialiseTaskLists+0x68>)
 800f580:	601a      	str	r2, [r3, #0]
}
 800f582:	bf00      	nop
 800f584:	3708      	adds	r7, #8
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	20001264 	.word	0x20001264
 800f590:	200012f0 	.word	0x200012f0
 800f594:	20001304 	.word	0x20001304
 800f598:	20001320 	.word	0x20001320
 800f59c:	20001334 	.word	0x20001334
 800f5a0:	2000134c 	.word	0x2000134c
 800f5a4:	20001318 	.word	0x20001318
 800f5a8:	2000131c 	.word	0x2000131c

0800f5ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5b2:	e019      	b.n	800f5e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f5b4:	f000 fbb8 	bl	800fd28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5b8:	4b10      	ldr	r3, [pc, #64]	@ (800f5fc <prvCheckTasksWaitingTermination+0x50>)
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3304      	adds	r3, #4
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fe fc0c 	bl	800dde2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f600 <prvCheckTasksWaitingTermination+0x54>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	4a0b      	ldr	r2, [pc, #44]	@ (800f600 <prvCheckTasksWaitingTermination+0x54>)
 800f5d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800f604 <prvCheckTasksWaitingTermination+0x58>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	4a0a      	ldr	r2, [pc, #40]	@ (800f604 <prvCheckTasksWaitingTermination+0x58>)
 800f5dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f5de:	f000 fbd5 	bl	800fd8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 f810 	bl	800f608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5e8:	4b06      	ldr	r3, [pc, #24]	@ (800f604 <prvCheckTasksWaitingTermination+0x58>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d1e1      	bne.n	800f5b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5f0:	bf00      	nop
 800f5f2:	bf00      	nop
 800f5f4:	3708      	adds	r7, #8
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20001334 	.word	0x20001334
 800f600:	20001360 	.word	0x20001360
 800f604:	20001348 	.word	0x20001348

0800f608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	334c      	adds	r3, #76	@ 0x4c
 800f614:	4618      	mov	r0, r3
 800f616:	f001 fe75 	bl	8011304 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f61e:	4618      	mov	r0, r3
 800f620:	f000 fd72 	bl	8010108 <vPortFree>
			vPortFree( pxTCB );
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 fd6f 	bl	8010108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f62a:	bf00      	nop
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
	...

0800f634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f63a:	4b0c      	ldr	r3, [pc, #48]	@ (800f66c <prvResetNextTaskUnblockTime+0x38>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d104      	bne.n	800f64e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f644:	4b0a      	ldr	r3, [pc, #40]	@ (800f670 <prvResetNextTaskUnblockTime+0x3c>)
 800f646:	f04f 32ff 	mov.w	r2, #4294967295
 800f64a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f64c:	e008      	b.n	800f660 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f64e:	4b07      	ldr	r3, [pc, #28]	@ (800f66c <prvResetNextTaskUnblockTime+0x38>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	4a04      	ldr	r2, [pc, #16]	@ (800f670 <prvResetNextTaskUnblockTime+0x3c>)
 800f65e:	6013      	str	r3, [r2, #0]
}
 800f660:	bf00      	nop
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr
 800f66c:	20001318 	.word	0x20001318
 800f670:	20001380 	.word	0x20001380

0800f674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f67a:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a8 <xTaskGetSchedulerState+0x34>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d102      	bne.n	800f688 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f682:	2301      	movs	r3, #1
 800f684:	607b      	str	r3, [r7, #4]
 800f686:	e008      	b.n	800f69a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f688:	4b08      	ldr	r3, [pc, #32]	@ (800f6ac <xTaskGetSchedulerState+0x38>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d102      	bne.n	800f696 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f690:	2302      	movs	r3, #2
 800f692:	607b      	str	r3, [r7, #4]
 800f694:	e001      	b.n	800f69a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f696:	2300      	movs	r3, #0
 800f698:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f69a:	687b      	ldr	r3, [r7, #4]
	}
 800f69c:	4618      	mov	r0, r3
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr
 800f6a8:	2000136c 	.word	0x2000136c
 800f6ac:	20001388 	.word	0x20001388

0800f6b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d05e      	beq.n	800f784 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6ca:	4b31      	ldr	r3, [pc, #196]	@ (800f790 <xTaskPriorityInherit+0xe0>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d24e      	bcs.n	800f772 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	699b      	ldr	r3, [r3, #24]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	db06      	blt.n	800f6ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6dc:	4b2c      	ldr	r3, [pc, #176]	@ (800f790 <xTaskPriorityInherit+0xe0>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6e2:	f1c3 0207 	rsb	r2, r3, #7
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	6959      	ldr	r1, [r3, #20]
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	4413      	add	r3, r2
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4a26      	ldr	r2, [pc, #152]	@ (800f794 <xTaskPriorityInherit+0xe4>)
 800f6fc:	4413      	add	r3, r2
 800f6fe:	4299      	cmp	r1, r3
 800f700:	d12f      	bne.n	800f762 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	3304      	adds	r3, #4
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fb6b 	bl	800dde2 <uxListRemove>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d10a      	bne.n	800f728 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f716:	2201      	movs	r2, #1
 800f718:	fa02 f303 	lsl.w	r3, r2, r3
 800f71c:	43da      	mvns	r2, r3
 800f71e:	4b1e      	ldr	r3, [pc, #120]	@ (800f798 <xTaskPriorityInherit+0xe8>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4013      	ands	r3, r2
 800f724:	4a1c      	ldr	r2, [pc, #112]	@ (800f798 <xTaskPriorityInherit+0xe8>)
 800f726:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f728:	4b19      	ldr	r3, [pc, #100]	@ (800f790 <xTaskPriorityInherit+0xe0>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f736:	2201      	movs	r2, #1
 800f738:	409a      	lsls	r2, r3
 800f73a:	4b17      	ldr	r3, [pc, #92]	@ (800f798 <xTaskPriorityInherit+0xe8>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4313      	orrs	r3, r2
 800f740:	4a15      	ldr	r2, [pc, #84]	@ (800f798 <xTaskPriorityInherit+0xe8>)
 800f742:	6013      	str	r3, [r2, #0]
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f748:	4613      	mov	r3, r2
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	4413      	add	r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4a10      	ldr	r2, [pc, #64]	@ (800f794 <xTaskPriorityInherit+0xe4>)
 800f752:	441a      	add	r2, r3
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	3304      	adds	r3, #4
 800f758:	4619      	mov	r1, r3
 800f75a:	4610      	mov	r0, r2
 800f75c:	f7fe fae4 	bl	800dd28 <vListInsertEnd>
 800f760:	e004      	b.n	800f76c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f762:	4b0b      	ldr	r3, [pc, #44]	@ (800f790 <xTaskPriorityInherit+0xe0>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f76c:	2301      	movs	r3, #1
 800f76e:	60fb      	str	r3, [r7, #12]
 800f770:	e008      	b.n	800f784 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f776:	4b06      	ldr	r3, [pc, #24]	@ (800f790 <xTaskPriorityInherit+0xe0>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d201      	bcs.n	800f784 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f780:	2301      	movs	r3, #1
 800f782:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f784:	68fb      	ldr	r3, [r7, #12]
	}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	20001260 	.word	0x20001260
 800f794:	20001264 	.word	0x20001264
 800f798:	20001368 	.word	0x20001368

0800f79c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d070      	beq.n	800f894 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f7b2:	4b3b      	ldr	r3, [pc, #236]	@ (800f8a0 <xTaskPriorityDisinherit+0x104>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d00b      	beq.n	800f7d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	60fb      	str	r3, [r7, #12]
}
 800f7ce:	bf00      	nop
 800f7d0:	bf00      	nop
 800f7d2:	e7fd      	b.n	800f7d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d10b      	bne.n	800f7f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7e0:	f383 8811 	msr	BASEPRI, r3
 800f7e4:	f3bf 8f6f 	isb	sy
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	60bb      	str	r3, [r7, #8]
}
 800f7ee:	bf00      	nop
 800f7f0:	bf00      	nop
 800f7f2:	e7fd      	b.n	800f7f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7f8:	1e5a      	subs	r2, r3, #1
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f806:	429a      	cmp	r2, r3
 800f808:	d044      	beq.n	800f894 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d140      	bne.n	800f894 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	3304      	adds	r3, #4
 800f816:	4618      	mov	r0, r3
 800f818:	f7fe fae3 	bl	800dde2 <uxListRemove>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d115      	bne.n	800f84e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f826:	491f      	ldr	r1, [pc, #124]	@ (800f8a4 <xTaskPriorityDisinherit+0x108>)
 800f828:	4613      	mov	r3, r2
 800f82a:	009b      	lsls	r3, r3, #2
 800f82c:	4413      	add	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	440b      	add	r3, r1
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d10a      	bne.n	800f84e <xTaskPriorityDisinherit+0xb2>
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f83c:	2201      	movs	r2, #1
 800f83e:	fa02 f303 	lsl.w	r3, r2, r3
 800f842:	43da      	mvns	r2, r3
 800f844:	4b18      	ldr	r3, [pc, #96]	@ (800f8a8 <xTaskPriorityDisinherit+0x10c>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4013      	ands	r3, r2
 800f84a:	4a17      	ldr	r2, [pc, #92]	@ (800f8a8 <xTaskPriorityDisinherit+0x10c>)
 800f84c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f85a:	f1c3 0207 	rsb	r2, r3, #7
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f866:	2201      	movs	r2, #1
 800f868:	409a      	lsls	r2, r3
 800f86a:	4b0f      	ldr	r3, [pc, #60]	@ (800f8a8 <xTaskPriorityDisinherit+0x10c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4313      	orrs	r3, r2
 800f870:	4a0d      	ldr	r2, [pc, #52]	@ (800f8a8 <xTaskPriorityDisinherit+0x10c>)
 800f872:	6013      	str	r3, [r2, #0]
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f878:	4613      	mov	r3, r2
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4413      	add	r3, r2
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	4a08      	ldr	r2, [pc, #32]	@ (800f8a4 <xTaskPriorityDisinherit+0x108>)
 800f882:	441a      	add	r2, r3
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	3304      	adds	r3, #4
 800f888:	4619      	mov	r1, r3
 800f88a:	4610      	mov	r0, r2
 800f88c:	f7fe fa4c 	bl	800dd28 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f890:	2301      	movs	r3, #1
 800f892:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f894:	697b      	ldr	r3, [r7, #20]
	}
 800f896:	4618      	mov	r0, r3
 800f898:	3718      	adds	r7, #24
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	20001260 	.word	0x20001260
 800f8a4:	20001264 	.word	0x20001264
 800f8a8:	20001368 	.word	0x20001368

0800f8ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d079      	beq.n	800f9b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10b      	bne.n	800f8e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d0:	f383 8811 	msr	BASEPRI, r3
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	60fb      	str	r3, [r7, #12]
}
 800f8de:	bf00      	nop
 800f8e0:	bf00      	nop
 800f8e2:	e7fd      	b.n	800f8e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8e8:	683a      	ldr	r2, [r7, #0]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d902      	bls.n	800f8f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	61fb      	str	r3, [r7, #28]
 800f8f2:	e002      	b.n	800f8fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f8f4:	69bb      	ldr	r3, [r7, #24]
 800f8f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8fe:	69fa      	ldr	r2, [r7, #28]
 800f900:	429a      	cmp	r2, r3
 800f902:	d059      	beq.n	800f9b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f904:	69bb      	ldr	r3, [r7, #24]
 800f906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f908:	697a      	ldr	r2, [r7, #20]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d154      	bne.n	800f9b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f90e:	4b2c      	ldr	r3, [pc, #176]	@ (800f9c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	69ba      	ldr	r2, [r7, #24]
 800f914:	429a      	cmp	r2, r3
 800f916:	d10b      	bne.n	800f930 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	60bb      	str	r3, [r7, #8]
}
 800f92a:	bf00      	nop
 800f92c:	bf00      	nop
 800f92e:	e7fd      	b.n	800f92c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f934:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	69fa      	ldr	r2, [r7, #28]
 800f93a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	2b00      	cmp	r3, #0
 800f942:	db04      	blt.n	800f94e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	f1c3 0207 	rsb	r2, r3, #7
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	6959      	ldr	r1, [r3, #20]
 800f952:	693a      	ldr	r2, [r7, #16]
 800f954:	4613      	mov	r3, r2
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4413      	add	r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4a19      	ldr	r2, [pc, #100]	@ (800f9c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f95e:	4413      	add	r3, r2
 800f960:	4299      	cmp	r1, r3
 800f962:	d129      	bne.n	800f9b8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f964:	69bb      	ldr	r3, [r7, #24]
 800f966:	3304      	adds	r3, #4
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fe fa3a 	bl	800dde2 <uxListRemove>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d10a      	bne.n	800f98a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f978:	2201      	movs	r2, #1
 800f97a:	fa02 f303 	lsl.w	r3, r2, r3
 800f97e:	43da      	mvns	r2, r3
 800f980:	4b11      	ldr	r3, [pc, #68]	@ (800f9c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4013      	ands	r3, r2
 800f986:	4a10      	ldr	r2, [pc, #64]	@ (800f9c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f988:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f98e:	2201      	movs	r2, #1
 800f990:	409a      	lsls	r2, r3
 800f992:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4313      	orrs	r3, r2
 800f998:	4a0b      	ldr	r2, [pc, #44]	@ (800f9c8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f99a:	6013      	str	r3, [r2, #0]
 800f99c:	69bb      	ldr	r3, [r7, #24]
 800f99e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4a06      	ldr	r2, [pc, #24]	@ (800f9c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f9aa:	441a      	add	r2, r3
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	f7fe f9b8 	bl	800dd28 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9b8:	bf00      	nop
 800f9ba:	3720      	adds	r7, #32
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	20001260 	.word	0x20001260
 800f9c4:	20001264 	.word	0x20001264
 800f9c8:	20001368 	.word	0x20001368

0800f9cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f9cc:	b480      	push	{r7}
 800f9ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f9d0:	4b07      	ldr	r3, [pc, #28]	@ (800f9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d004      	beq.n	800f9e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f9d8:	4b05      	ldr	r3, [pc, #20]	@ (800f9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f9de:	3201      	adds	r2, #1
 800f9e0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f9e2:	4b03      	ldr	r3, [pc, #12]	@ (800f9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
	}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr
 800f9f0:	20001260 	.word	0x20001260

0800f9f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f9fe:	4b29      	ldr	r3, [pc, #164]	@ (800faa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa04:	4b28      	ldr	r3, [pc, #160]	@ (800faa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe f9e9 	bl	800dde2 <uxListRemove>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d10b      	bne.n	800fa2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fa16:	4b24      	ldr	r3, [pc, #144]	@ (800faa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fa22:	43da      	mvns	r2, r3
 800fa24:	4b21      	ldr	r3, [pc, #132]	@ (800faac <prvAddCurrentTaskToDelayedList+0xb8>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4013      	ands	r3, r2
 800fa2a:	4a20      	ldr	r2, [pc, #128]	@ (800faac <prvAddCurrentTaskToDelayedList+0xb8>)
 800fa2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa34:	d10a      	bne.n	800fa4c <prvAddCurrentTaskToDelayedList+0x58>
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d007      	beq.n	800fa4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa3c:	4b1a      	ldr	r3, [pc, #104]	@ (800faa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	3304      	adds	r3, #4
 800fa42:	4619      	mov	r1, r3
 800fa44:	481a      	ldr	r0, [pc, #104]	@ (800fab0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fa46:	f7fe f96f 	bl	800dd28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fa4a:	e026      	b.n	800fa9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4413      	add	r3, r2
 800fa52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fa54:	4b14      	ldr	r3, [pc, #80]	@ (800faa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	68ba      	ldr	r2, [r7, #8]
 800fa5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d209      	bcs.n	800fa78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa64:	4b13      	ldr	r3, [pc, #76]	@ (800fab4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	4b0f      	ldr	r3, [pc, #60]	@ (800faa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4610      	mov	r0, r2
 800fa72:	f7fe f97d 	bl	800dd70 <vListInsert>
}
 800fa76:	e010      	b.n	800fa9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa78:	4b0f      	ldr	r3, [pc, #60]	@ (800fab8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	4b0a      	ldr	r3, [pc, #40]	@ (800faa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	3304      	adds	r3, #4
 800fa82:	4619      	mov	r1, r3
 800fa84:	4610      	mov	r0, r2
 800fa86:	f7fe f973 	bl	800dd70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa8a:	4b0c      	ldr	r3, [pc, #48]	@ (800fabc <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d202      	bcs.n	800fa9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fa94:	4a09      	ldr	r2, [pc, #36]	@ (800fabc <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	6013      	str	r3, [r2, #0]
}
 800fa9a:	bf00      	nop
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	20001364 	.word	0x20001364
 800faa8:	20001260 	.word	0x20001260
 800faac:	20001368 	.word	0x20001368
 800fab0:	2000134c 	.word	0x2000134c
 800fab4:	2000131c 	.word	0x2000131c
 800fab8:	20001318 	.word	0x20001318
 800fabc:	20001380 	.word	0x20001380

0800fac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	3b04      	subs	r3, #4
 800fad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	3b04      	subs	r3, #4
 800fade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	f023 0201 	bic.w	r2, r3, #1
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	3b04      	subs	r3, #4
 800faee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800faf0:	4a0c      	ldr	r2, [pc, #48]	@ (800fb24 <pxPortInitialiseStack+0x64>)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3b14      	subs	r3, #20
 800fafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	3b04      	subs	r3, #4
 800fb06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f06f 0202 	mvn.w	r2, #2
 800fb0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	3b20      	subs	r3, #32
 800fb14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb16:	68fb      	ldr	r3, [r7, #12]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	0800fb29 	.word	0x0800fb29

0800fb28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb32:	4b13      	ldr	r3, [pc, #76]	@ (800fb80 <prvTaskExitError+0x58>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb3a:	d00b      	beq.n	800fb54 <prvTaskExitError+0x2c>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	60fb      	str	r3, [r7, #12]
}
 800fb4e:	bf00      	nop
 800fb50:	bf00      	nop
 800fb52:	e7fd      	b.n	800fb50 <prvTaskExitError+0x28>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	60bb      	str	r3, [r7, #8]
}
 800fb66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb68:	bf00      	nop
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d0fc      	beq.n	800fb6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb70:	bf00      	nop
 800fb72:	bf00      	nop
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	2000002c 	.word	0x2000002c
	...

0800fb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb90:	4b07      	ldr	r3, [pc, #28]	@ (800fbb0 <pxCurrentTCBConst2>)
 800fb92:	6819      	ldr	r1, [r3, #0]
 800fb94:	6808      	ldr	r0, [r1, #0]
 800fb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9a:	f380 8809 	msr	PSP, r0
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	f04f 0000 	mov.w	r0, #0
 800fba6:	f380 8811 	msr	BASEPRI, r0
 800fbaa:	4770      	bx	lr
 800fbac:	f3af 8000 	nop.w

0800fbb0 <pxCurrentTCBConst2>:
 800fbb0:	20001260 	.word	0x20001260
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fbb4:	bf00      	nop
 800fbb6:	bf00      	nop

0800fbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbb8:	4808      	ldr	r0, [pc, #32]	@ (800fbdc <prvPortStartFirstTask+0x24>)
 800fbba:	6800      	ldr	r0, [r0, #0]
 800fbbc:	6800      	ldr	r0, [r0, #0]
 800fbbe:	f380 8808 	msr	MSP, r0
 800fbc2:	f04f 0000 	mov.w	r0, #0
 800fbc6:	f380 8814 	msr	CONTROL, r0
 800fbca:	b662      	cpsie	i
 800fbcc:	b661      	cpsie	f
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	df00      	svc	0
 800fbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbda:	bf00      	nop
 800fbdc:	e000ed08 	.word	0xe000ed08

0800fbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbe6:	4b47      	ldr	r3, [pc, #284]	@ (800fd04 <xPortStartScheduler+0x124>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a47      	ldr	r2, [pc, #284]	@ (800fd08 <xPortStartScheduler+0x128>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d10b      	bne.n	800fc08 <xPortStartScheduler+0x28>
	__asm volatile
 800fbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf4:	f383 8811 	msr	BASEPRI, r3
 800fbf8:	f3bf 8f6f 	isb	sy
 800fbfc:	f3bf 8f4f 	dsb	sy
 800fc00:	60fb      	str	r3, [r7, #12]
}
 800fc02:	bf00      	nop
 800fc04:	bf00      	nop
 800fc06:	e7fd      	b.n	800fc04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc08:	4b3e      	ldr	r3, [pc, #248]	@ (800fd04 <xPortStartScheduler+0x124>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd0c <xPortStartScheduler+0x12c>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d10b      	bne.n	800fc2a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	613b      	str	r3, [r7, #16]
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	e7fd      	b.n	800fc26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc2a:	4b39      	ldr	r3, [pc, #228]	@ (800fd10 <xPortStartScheduler+0x130>)
 800fc2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	22ff      	movs	r2, #255	@ 0xff
 800fc3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc44:	78fb      	ldrb	r3, [r7, #3]
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc4c:	b2da      	uxtb	r2, r3
 800fc4e:	4b31      	ldr	r3, [pc, #196]	@ (800fd14 <xPortStartScheduler+0x134>)
 800fc50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc52:	4b31      	ldr	r3, [pc, #196]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc54:	2207      	movs	r2, #7
 800fc56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc58:	e009      	b.n	800fc6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc5a:	4b2f      	ldr	r3, [pc, #188]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	4a2d      	ldr	r2, [pc, #180]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc64:	78fb      	ldrb	r3, [r7, #3]
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc6e:	78fb      	ldrb	r3, [r7, #3]
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc76:	2b80      	cmp	r3, #128	@ 0x80
 800fc78:	d0ef      	beq.n	800fc5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc7a:	4b27      	ldr	r3, [pc, #156]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f1c3 0307 	rsb	r3, r3, #7
 800fc82:	2b04      	cmp	r3, #4
 800fc84:	d00b      	beq.n	800fc9e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc8a:	f383 8811 	msr	BASEPRI, r3
 800fc8e:	f3bf 8f6f 	isb	sy
 800fc92:	f3bf 8f4f 	dsb	sy
 800fc96:	60bb      	str	r3, [r7, #8]
}
 800fc98:	bf00      	nop
 800fc9a:	bf00      	nop
 800fc9c:	e7fd      	b.n	800fc9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	021b      	lsls	r3, r3, #8
 800fca4:	4a1c      	ldr	r2, [pc, #112]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fca8:	4b1b      	ldr	r3, [pc, #108]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fcb0:	4a19      	ldr	r2, [pc, #100]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fcb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fcbc:	4b17      	ldr	r3, [pc, #92]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a16      	ldr	r2, [pc, #88]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fcc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcc8:	4b14      	ldr	r3, [pc, #80]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a13      	ldr	r2, [pc, #76]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fcd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcd4:	f000 f8da 	bl	800fe8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcd8:	4b11      	ldr	r3, [pc, #68]	@ (800fd20 <xPortStartScheduler+0x140>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcde:	f000 f8f9 	bl	800fed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fce2:	4b10      	ldr	r3, [pc, #64]	@ (800fd24 <xPortStartScheduler+0x144>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a0f      	ldr	r2, [pc, #60]	@ (800fd24 <xPortStartScheduler+0x144>)
 800fce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fcec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcee:	f7ff ff63 	bl	800fbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcf2:	f7ff fa8f 	bl	800f214 <vTaskSwitchContext>
	prvTaskExitError();
 800fcf6:	f7ff ff17 	bl	800fb28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	e000ed00 	.word	0xe000ed00
 800fd08:	410fc271 	.word	0x410fc271
 800fd0c:	410fc270 	.word	0x410fc270
 800fd10:	e000e400 	.word	0xe000e400
 800fd14:	2000138c 	.word	0x2000138c
 800fd18:	20001390 	.word	0x20001390
 800fd1c:	e000ed20 	.word	0xe000ed20
 800fd20:	2000002c 	.word	0x2000002c
 800fd24:	e000ef34 	.word	0xe000ef34

0800fd28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	607b      	str	r3, [r7, #4]
}
 800fd40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd42:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3301      	adds	r3, #1
 800fd48:	4a0e      	ldr	r2, [pc, #56]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d110      	bne.n	800fd76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd54:	4b0c      	ldr	r3, [pc, #48]	@ (800fd88 <vPortEnterCritical+0x60>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00b      	beq.n	800fd76 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	603b      	str	r3, [r7, #0]
}
 800fd70:	bf00      	nop
 800fd72:	bf00      	nop
 800fd74:	e7fd      	b.n	800fd72 <vPortEnterCritical+0x4a>
	}
}
 800fd76:	bf00      	nop
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	2000002c 	.word	0x2000002c
 800fd88:	e000ed04 	.word	0xe000ed04

0800fd8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd92:	4b12      	ldr	r3, [pc, #72]	@ (800fddc <vPortExitCritical+0x50>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d10b      	bne.n	800fdb2 <vPortExitCritical+0x26>
	__asm volatile
 800fd9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd9e:	f383 8811 	msr	BASEPRI, r3
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	f3bf 8f4f 	dsb	sy
 800fdaa:	607b      	str	r3, [r7, #4]
}
 800fdac:	bf00      	nop
 800fdae:	bf00      	nop
 800fdb0:	e7fd      	b.n	800fdae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fdb2:	4b0a      	ldr	r3, [pc, #40]	@ (800fddc <vPortExitCritical+0x50>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	4a08      	ldr	r2, [pc, #32]	@ (800fddc <vPortExitCritical+0x50>)
 800fdba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fdbc:	4b07      	ldr	r3, [pc, #28]	@ (800fddc <vPortExitCritical+0x50>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d105      	bne.n	800fdd0 <vPortExitCritical+0x44>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	f383 8811 	msr	BASEPRI, r3
}
 800fdce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdd0:	bf00      	nop
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr
 800fddc:	2000002c 	.word	0x2000002c

0800fde0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fde0:	f3ef 8009 	mrs	r0, PSP
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	4b15      	ldr	r3, [pc, #84]	@ (800fe40 <pxCurrentTCBConst>)
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	f01e 0f10 	tst.w	lr, #16
 800fdf0:	bf08      	it	eq
 800fdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfa:	6010      	str	r0, [r2, #0]
 800fdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe04:	f380 8811 	msr	BASEPRI, r0
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f7ff fa00 	bl	800f214 <vTaskSwitchContext>
 800fe14:	f04f 0000 	mov.w	r0, #0
 800fe18:	f380 8811 	msr	BASEPRI, r0
 800fe1c:	bc09      	pop	{r0, r3}
 800fe1e:	6819      	ldr	r1, [r3, #0]
 800fe20:	6808      	ldr	r0, [r1, #0]
 800fe22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe26:	f01e 0f10 	tst.w	lr, #16
 800fe2a:	bf08      	it	eq
 800fe2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe30:	f380 8809 	msr	PSP, r0
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	f3af 8000 	nop.w

0800fe40 <pxCurrentTCBConst>:
 800fe40:	20001260 	.word	0x20001260
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop

0800fe48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	607b      	str	r3, [r7, #4]
}
 800fe60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe62:	f7ff f91d 	bl	800f0a0 <xTaskIncrementTick>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d003      	beq.n	800fe74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe6c:	4b06      	ldr	r3, [pc, #24]	@ (800fe88 <SysTick_Handler+0x40>)
 800fe6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe72:	601a      	str	r2, [r3, #0]
 800fe74:	2300      	movs	r3, #0
 800fe76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	f383 8811 	msr	BASEPRI, r3
}
 800fe7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	e000ed04 	.word	0xe000ed04

0800fe8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe90:	4b0b      	ldr	r3, [pc, #44]	@ (800fec0 <vPortSetupTimerInterrupt+0x34>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe96:	4b0b      	ldr	r3, [pc, #44]	@ (800fec4 <vPortSetupTimerInterrupt+0x38>)
 800fe98:	2200      	movs	r2, #0
 800fe9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe9c:	4b0a      	ldr	r3, [pc, #40]	@ (800fec8 <vPortSetupTimerInterrupt+0x3c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a0a      	ldr	r2, [pc, #40]	@ (800fecc <vPortSetupTimerInterrupt+0x40>)
 800fea2:	fba2 2303 	umull	r2, r3, r2, r3
 800fea6:	099b      	lsrs	r3, r3, #6
 800fea8:	4a09      	ldr	r2, [pc, #36]	@ (800fed0 <vPortSetupTimerInterrupt+0x44>)
 800feaa:	3b01      	subs	r3, #1
 800feac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800feae:	4b04      	ldr	r3, [pc, #16]	@ (800fec0 <vPortSetupTimerInterrupt+0x34>)
 800feb0:	2207      	movs	r2, #7
 800feb2:	601a      	str	r2, [r3, #0]
}
 800feb4:	bf00      	nop
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	e000e010 	.word	0xe000e010
 800fec4:	e000e018 	.word	0xe000e018
 800fec8:	20000008 	.word	0x20000008
 800fecc:	10624dd3 	.word	0x10624dd3
 800fed0:	e000e014 	.word	0xe000e014

0800fed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fee4 <vPortEnableVFP+0x10>
 800fed8:	6801      	ldr	r1, [r0, #0]
 800feda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fede:	6001      	str	r1, [r0, #0]
 800fee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fee2:	bf00      	nop
 800fee4:	e000ed88 	.word	0xe000ed88

0800fee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800feee:	f3ef 8305 	mrs	r3, IPSR
 800fef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2b0f      	cmp	r3, #15
 800fef8:	d915      	bls.n	800ff26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fefa:	4a18      	ldr	r2, [pc, #96]	@ (800ff5c <vPortValidateInterruptPriority+0x74>)
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	4413      	add	r3, r2
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff04:	4b16      	ldr	r3, [pc, #88]	@ (800ff60 <vPortValidateInterruptPriority+0x78>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	7afa      	ldrb	r2, [r7, #11]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d20b      	bcs.n	800ff26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	607b      	str	r3, [r7, #4]
}
 800ff20:	bf00      	nop
 800ff22:	bf00      	nop
 800ff24:	e7fd      	b.n	800ff22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff26:	4b0f      	ldr	r3, [pc, #60]	@ (800ff64 <vPortValidateInterruptPriority+0x7c>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff68 <vPortValidateInterruptPriority+0x80>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d90b      	bls.n	800ff4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	603b      	str	r3, [r7, #0]
}
 800ff48:	bf00      	nop
 800ff4a:	bf00      	nop
 800ff4c:	e7fd      	b.n	800ff4a <vPortValidateInterruptPriority+0x62>
	}
 800ff4e:	bf00      	nop
 800ff50:	3714      	adds	r7, #20
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	e000e3f0 	.word	0xe000e3f0
 800ff60:	2000138c 	.word	0x2000138c
 800ff64:	e000ed0c 	.word	0xe000ed0c
 800ff68:	20001390 	.word	0x20001390

0800ff6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08a      	sub	sp, #40	@ 0x28
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff74:	2300      	movs	r3, #0
 800ff76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff78:	f7fe ffd6 	bl	800ef28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff7c:	4b5c      	ldr	r3, [pc, #368]	@ (80100f0 <pvPortMalloc+0x184>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff84:	f000 f924 	bl	80101d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff88:	4b5a      	ldr	r3, [pc, #360]	@ (80100f4 <pvPortMalloc+0x188>)
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4013      	ands	r3, r2
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	f040 8095 	bne.w	80100c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01e      	beq.n	800ffda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff9c:	2208      	movs	r2, #8
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f003 0307 	and.w	r3, r3, #7
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d015      	beq.n	800ffda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f023 0307 	bic.w	r3, r3, #7
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f003 0307 	and.w	r3, r3, #7
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00b      	beq.n	800ffda <pvPortMalloc+0x6e>
	__asm volatile
 800ffc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffc6:	f383 8811 	msr	BASEPRI, r3
 800ffca:	f3bf 8f6f 	isb	sy
 800ffce:	f3bf 8f4f 	dsb	sy
 800ffd2:	617b      	str	r3, [r7, #20]
}
 800ffd4:	bf00      	nop
 800ffd6:	bf00      	nop
 800ffd8:	e7fd      	b.n	800ffd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d06f      	beq.n	80100c0 <pvPortMalloc+0x154>
 800ffe0:	4b45      	ldr	r3, [pc, #276]	@ (80100f8 <pvPortMalloc+0x18c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d86a      	bhi.n	80100c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffea:	4b44      	ldr	r3, [pc, #272]	@ (80100fc <pvPortMalloc+0x190>)
 800ffec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffee:	4b43      	ldr	r3, [pc, #268]	@ (80100fc <pvPortMalloc+0x190>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fff4:	e004      	b.n	8010000 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	429a      	cmp	r2, r3
 8010008:	d903      	bls.n	8010012 <pvPortMalloc+0xa6>
 801000a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1f1      	bne.n	800fff6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010012:	4b37      	ldr	r3, [pc, #220]	@ (80100f0 <pvPortMalloc+0x184>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010018:	429a      	cmp	r2, r3
 801001a:	d051      	beq.n	80100c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2208      	movs	r2, #8
 8010022:	4413      	add	r3, r2
 8010024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	6a3b      	ldr	r3, [r7, #32]
 801002c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801002e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	1ad2      	subs	r2, r2, r3
 8010036:	2308      	movs	r3, #8
 8010038:	005b      	lsls	r3, r3, #1
 801003a:	429a      	cmp	r2, r3
 801003c:	d920      	bls.n	8010080 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801003e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4413      	add	r3, r2
 8010044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	f003 0307 	and.w	r3, r3, #7
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00b      	beq.n	8010068 <pvPortMalloc+0xfc>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	613b      	str	r3, [r7, #16]
}
 8010062:	bf00      	nop
 8010064:	bf00      	nop
 8010066:	e7fd      	b.n	8010064 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	1ad2      	subs	r2, r2, r3
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801007a:	69b8      	ldr	r0, [r7, #24]
 801007c:	f000 f90a 	bl	8010294 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010080:	4b1d      	ldr	r3, [pc, #116]	@ (80100f8 <pvPortMalloc+0x18c>)
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	4a1b      	ldr	r2, [pc, #108]	@ (80100f8 <pvPortMalloc+0x18c>)
 801008c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801008e:	4b1a      	ldr	r3, [pc, #104]	@ (80100f8 <pvPortMalloc+0x18c>)
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	4b1b      	ldr	r3, [pc, #108]	@ (8010100 <pvPortMalloc+0x194>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	429a      	cmp	r2, r3
 8010098:	d203      	bcs.n	80100a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801009a:	4b17      	ldr	r3, [pc, #92]	@ (80100f8 <pvPortMalloc+0x18c>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a18      	ldr	r2, [pc, #96]	@ (8010100 <pvPortMalloc+0x194>)
 80100a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80100a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a4:	685a      	ldr	r2, [r3, #4]
 80100a6:	4b13      	ldr	r3, [pc, #76]	@ (80100f4 <pvPortMalloc+0x188>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	431a      	orrs	r2, r3
 80100ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b2:	2200      	movs	r2, #0
 80100b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80100b6:	4b13      	ldr	r3, [pc, #76]	@ (8010104 <pvPortMalloc+0x198>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	3301      	adds	r3, #1
 80100bc:	4a11      	ldr	r2, [pc, #68]	@ (8010104 <pvPortMalloc+0x198>)
 80100be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100c0:	f7fe ff40 	bl	800ef44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	f003 0307 	and.w	r3, r3, #7
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00b      	beq.n	80100e6 <pvPortMalloc+0x17a>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	60fb      	str	r3, [r7, #12]
}
 80100e0:	bf00      	nop
 80100e2:	bf00      	nop
 80100e4:	e7fd      	b.n	80100e2 <pvPortMalloc+0x176>
	return pvReturn;
 80100e6:	69fb      	ldr	r3, [r7, #28]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3728      	adds	r7, #40	@ 0x28
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	2000427c 	.word	0x2000427c
 80100f4:	20004290 	.word	0x20004290
 80100f8:	20004280 	.word	0x20004280
 80100fc:	20004274 	.word	0x20004274
 8010100:	20004284 	.word	0x20004284
 8010104:	20004288 	.word	0x20004288

08010108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b086      	sub	sp, #24
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d04f      	beq.n	80101ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801011a:	2308      	movs	r3, #8
 801011c:	425b      	negs	r3, r3
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	4413      	add	r3, r2
 8010122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	685a      	ldr	r2, [r3, #4]
 801012c:	4b25      	ldr	r3, [pc, #148]	@ (80101c4 <vPortFree+0xbc>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4013      	ands	r3, r2
 8010132:	2b00      	cmp	r3, #0
 8010134:	d10b      	bne.n	801014e <vPortFree+0x46>
	__asm volatile
 8010136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801013a:	f383 8811 	msr	BASEPRI, r3
 801013e:	f3bf 8f6f 	isb	sy
 8010142:	f3bf 8f4f 	dsb	sy
 8010146:	60fb      	str	r3, [r7, #12]
}
 8010148:	bf00      	nop
 801014a:	bf00      	nop
 801014c:	e7fd      	b.n	801014a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00b      	beq.n	801016e <vPortFree+0x66>
	__asm volatile
 8010156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801015a:	f383 8811 	msr	BASEPRI, r3
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	f3bf 8f4f 	dsb	sy
 8010166:	60bb      	str	r3, [r7, #8]
}
 8010168:	bf00      	nop
 801016a:	bf00      	nop
 801016c:	e7fd      	b.n	801016a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	685a      	ldr	r2, [r3, #4]
 8010172:	4b14      	ldr	r3, [pc, #80]	@ (80101c4 <vPortFree+0xbc>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4013      	ands	r3, r2
 8010178:	2b00      	cmp	r3, #0
 801017a:	d01e      	beq.n	80101ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d11a      	bne.n	80101ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	4b0e      	ldr	r3, [pc, #56]	@ (80101c4 <vPortFree+0xbc>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	43db      	mvns	r3, r3
 801018e:	401a      	ands	r2, r3
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010194:	f7fe fec8 	bl	800ef28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	685a      	ldr	r2, [r3, #4]
 801019c:	4b0a      	ldr	r3, [pc, #40]	@ (80101c8 <vPortFree+0xc0>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4413      	add	r3, r2
 80101a2:	4a09      	ldr	r2, [pc, #36]	@ (80101c8 <vPortFree+0xc0>)
 80101a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80101a6:	6938      	ldr	r0, [r7, #16]
 80101a8:	f000 f874 	bl	8010294 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80101ac:	4b07      	ldr	r3, [pc, #28]	@ (80101cc <vPortFree+0xc4>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3301      	adds	r3, #1
 80101b2:	4a06      	ldr	r2, [pc, #24]	@ (80101cc <vPortFree+0xc4>)
 80101b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80101b6:	f7fe fec5 	bl	800ef44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101ba:	bf00      	nop
 80101bc:	3718      	adds	r7, #24
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	20004290 	.word	0x20004290
 80101c8:	20004280 	.word	0x20004280
 80101cc:	2000428c 	.word	0x2000428c

080101d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101d6:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80101da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101dc:	4b27      	ldr	r3, [pc, #156]	@ (801027c <prvHeapInit+0xac>)
 80101de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f003 0307 	and.w	r3, r3, #7
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d00c      	beq.n	8010204 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	3307      	adds	r3, #7
 80101ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f023 0307 	bic.w	r3, r3, #7
 80101f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101f8:	68ba      	ldr	r2, [r7, #8]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	1ad3      	subs	r3, r2, r3
 80101fe:	4a1f      	ldr	r2, [pc, #124]	@ (801027c <prvHeapInit+0xac>)
 8010200:	4413      	add	r3, r2
 8010202:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010208:	4a1d      	ldr	r2, [pc, #116]	@ (8010280 <prvHeapInit+0xb0>)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801020e:	4b1c      	ldr	r3, [pc, #112]	@ (8010280 <prvHeapInit+0xb0>)
 8010210:	2200      	movs	r2, #0
 8010212:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	68ba      	ldr	r2, [r7, #8]
 8010218:	4413      	add	r3, r2
 801021a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801021c:	2208      	movs	r2, #8
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	1a9b      	subs	r3, r3, r2
 8010222:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f023 0307 	bic.w	r3, r3, #7
 801022a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	4a15      	ldr	r2, [pc, #84]	@ (8010284 <prvHeapInit+0xb4>)
 8010230:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010232:	4b14      	ldr	r3, [pc, #80]	@ (8010284 <prvHeapInit+0xb4>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2200      	movs	r2, #0
 8010238:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801023a:	4b12      	ldr	r3, [pc, #72]	@ (8010284 <prvHeapInit+0xb4>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	1ad2      	subs	r2, r2, r3
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010250:	4b0c      	ldr	r3, [pc, #48]	@ (8010284 <prvHeapInit+0xb4>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4a0a      	ldr	r2, [pc, #40]	@ (8010288 <prvHeapInit+0xb8>)
 801025e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	4a09      	ldr	r2, [pc, #36]	@ (801028c <prvHeapInit+0xbc>)
 8010266:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010268:	4b09      	ldr	r3, [pc, #36]	@ (8010290 <prvHeapInit+0xc0>)
 801026a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801026e:	601a      	str	r2, [r3, #0]
}
 8010270:	bf00      	nop
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	20001394 	.word	0x20001394
 8010280:	20004274 	.word	0x20004274
 8010284:	2000427c 	.word	0x2000427c
 8010288:	20004284 	.word	0x20004284
 801028c:	20004280 	.word	0x20004280
 8010290:	20004290 	.word	0x20004290

08010294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801029c:	4b28      	ldr	r3, [pc, #160]	@ (8010340 <prvInsertBlockIntoFreeList+0xac>)
 801029e:	60fb      	str	r3, [r7, #12]
 80102a0:	e002      	b.n	80102a8 <prvInsertBlockIntoFreeList+0x14>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	60fb      	str	r3, [r7, #12]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d8f7      	bhi.n	80102a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	68ba      	ldr	r2, [r7, #8]
 80102bc:	4413      	add	r3, r2
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d108      	bne.n	80102d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	441a      	add	r2, r3
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	68ba      	ldr	r2, [r7, #8]
 80102e0:	441a      	add	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d118      	bne.n	801031c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	4b15      	ldr	r3, [pc, #84]	@ (8010344 <prvInsertBlockIntoFreeList+0xb0>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d00d      	beq.n	8010312 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	441a      	add	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	601a      	str	r2, [r3, #0]
 8010310:	e008      	b.n	8010324 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010312:	4b0c      	ldr	r3, [pc, #48]	@ (8010344 <prvInsertBlockIntoFreeList+0xb0>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	e003      	b.n	8010324 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	429a      	cmp	r2, r3
 801032a:	d002      	beq.n	8010332 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010332:	bf00      	nop
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop
 8010340:	20004274 	.word	0x20004274
 8010344:	2000427c 	.word	0x2000427c

08010348 <__cvt>:
 8010348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801034c:	ec57 6b10 	vmov	r6, r7, d0
 8010350:	2f00      	cmp	r7, #0
 8010352:	460c      	mov	r4, r1
 8010354:	4619      	mov	r1, r3
 8010356:	463b      	mov	r3, r7
 8010358:	bfbb      	ittet	lt
 801035a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801035e:	461f      	movlt	r7, r3
 8010360:	2300      	movge	r3, #0
 8010362:	232d      	movlt	r3, #45	@ 0x2d
 8010364:	700b      	strb	r3, [r1, #0]
 8010366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010368:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801036c:	4691      	mov	r9, r2
 801036e:	f023 0820 	bic.w	r8, r3, #32
 8010372:	bfbc      	itt	lt
 8010374:	4632      	movlt	r2, r6
 8010376:	4616      	movlt	r6, r2
 8010378:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801037c:	d005      	beq.n	801038a <__cvt+0x42>
 801037e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010382:	d100      	bne.n	8010386 <__cvt+0x3e>
 8010384:	3401      	adds	r4, #1
 8010386:	2102      	movs	r1, #2
 8010388:	e000      	b.n	801038c <__cvt+0x44>
 801038a:	2103      	movs	r1, #3
 801038c:	ab03      	add	r3, sp, #12
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	ab02      	add	r3, sp, #8
 8010392:	9300      	str	r3, [sp, #0]
 8010394:	ec47 6b10 	vmov	d0, r6, r7
 8010398:	4653      	mov	r3, sl
 801039a:	4622      	mov	r2, r4
 801039c:	f001 f910 	bl	80115c0 <_dtoa_r>
 80103a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80103a4:	4605      	mov	r5, r0
 80103a6:	d119      	bne.n	80103dc <__cvt+0x94>
 80103a8:	f019 0f01 	tst.w	r9, #1
 80103ac:	d00e      	beq.n	80103cc <__cvt+0x84>
 80103ae:	eb00 0904 	add.w	r9, r0, r4
 80103b2:	2200      	movs	r2, #0
 80103b4:	2300      	movs	r3, #0
 80103b6:	4630      	mov	r0, r6
 80103b8:	4639      	mov	r1, r7
 80103ba:	f7f0 fbad 	bl	8000b18 <__aeabi_dcmpeq>
 80103be:	b108      	cbz	r0, 80103c4 <__cvt+0x7c>
 80103c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80103c4:	2230      	movs	r2, #48	@ 0x30
 80103c6:	9b03      	ldr	r3, [sp, #12]
 80103c8:	454b      	cmp	r3, r9
 80103ca:	d31e      	bcc.n	801040a <__cvt+0xc2>
 80103cc:	9b03      	ldr	r3, [sp, #12]
 80103ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103d0:	1b5b      	subs	r3, r3, r5
 80103d2:	4628      	mov	r0, r5
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	b004      	add	sp, #16
 80103d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80103e0:	eb00 0904 	add.w	r9, r0, r4
 80103e4:	d1e5      	bne.n	80103b2 <__cvt+0x6a>
 80103e6:	7803      	ldrb	r3, [r0, #0]
 80103e8:	2b30      	cmp	r3, #48	@ 0x30
 80103ea:	d10a      	bne.n	8010402 <__cvt+0xba>
 80103ec:	2200      	movs	r2, #0
 80103ee:	2300      	movs	r3, #0
 80103f0:	4630      	mov	r0, r6
 80103f2:	4639      	mov	r1, r7
 80103f4:	f7f0 fb90 	bl	8000b18 <__aeabi_dcmpeq>
 80103f8:	b918      	cbnz	r0, 8010402 <__cvt+0xba>
 80103fa:	f1c4 0401 	rsb	r4, r4, #1
 80103fe:	f8ca 4000 	str.w	r4, [sl]
 8010402:	f8da 3000 	ldr.w	r3, [sl]
 8010406:	4499      	add	r9, r3
 8010408:	e7d3      	b.n	80103b2 <__cvt+0x6a>
 801040a:	1c59      	adds	r1, r3, #1
 801040c:	9103      	str	r1, [sp, #12]
 801040e:	701a      	strb	r2, [r3, #0]
 8010410:	e7d9      	b.n	80103c6 <__cvt+0x7e>

08010412 <__exponent>:
 8010412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010414:	2900      	cmp	r1, #0
 8010416:	bfba      	itte	lt
 8010418:	4249      	neglt	r1, r1
 801041a:	232d      	movlt	r3, #45	@ 0x2d
 801041c:	232b      	movge	r3, #43	@ 0x2b
 801041e:	2909      	cmp	r1, #9
 8010420:	7002      	strb	r2, [r0, #0]
 8010422:	7043      	strb	r3, [r0, #1]
 8010424:	dd29      	ble.n	801047a <__exponent+0x68>
 8010426:	f10d 0307 	add.w	r3, sp, #7
 801042a:	461d      	mov	r5, r3
 801042c:	270a      	movs	r7, #10
 801042e:	461a      	mov	r2, r3
 8010430:	fbb1 f6f7 	udiv	r6, r1, r7
 8010434:	fb07 1416 	mls	r4, r7, r6, r1
 8010438:	3430      	adds	r4, #48	@ 0x30
 801043a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801043e:	460c      	mov	r4, r1
 8010440:	2c63      	cmp	r4, #99	@ 0x63
 8010442:	f103 33ff 	add.w	r3, r3, #4294967295
 8010446:	4631      	mov	r1, r6
 8010448:	dcf1      	bgt.n	801042e <__exponent+0x1c>
 801044a:	3130      	adds	r1, #48	@ 0x30
 801044c:	1e94      	subs	r4, r2, #2
 801044e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010452:	1c41      	adds	r1, r0, #1
 8010454:	4623      	mov	r3, r4
 8010456:	42ab      	cmp	r3, r5
 8010458:	d30a      	bcc.n	8010470 <__exponent+0x5e>
 801045a:	f10d 0309 	add.w	r3, sp, #9
 801045e:	1a9b      	subs	r3, r3, r2
 8010460:	42ac      	cmp	r4, r5
 8010462:	bf88      	it	hi
 8010464:	2300      	movhi	r3, #0
 8010466:	3302      	adds	r3, #2
 8010468:	4403      	add	r3, r0
 801046a:	1a18      	subs	r0, r3, r0
 801046c:	b003      	add	sp, #12
 801046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010470:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010474:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010478:	e7ed      	b.n	8010456 <__exponent+0x44>
 801047a:	2330      	movs	r3, #48	@ 0x30
 801047c:	3130      	adds	r1, #48	@ 0x30
 801047e:	7083      	strb	r3, [r0, #2]
 8010480:	70c1      	strb	r1, [r0, #3]
 8010482:	1d03      	adds	r3, r0, #4
 8010484:	e7f1      	b.n	801046a <__exponent+0x58>
	...

08010488 <_printf_float>:
 8010488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801048c:	b08d      	sub	sp, #52	@ 0x34
 801048e:	460c      	mov	r4, r1
 8010490:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010494:	4616      	mov	r6, r2
 8010496:	461f      	mov	r7, r3
 8010498:	4605      	mov	r5, r0
 801049a:	f000 ff1f 	bl	80112dc <_localeconv_r>
 801049e:	6803      	ldr	r3, [r0, #0]
 80104a0:	9304      	str	r3, [sp, #16]
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7ef ff0c 	bl	80002c0 <strlen>
 80104a8:	2300      	movs	r3, #0
 80104aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80104ac:	f8d8 3000 	ldr.w	r3, [r8]
 80104b0:	9005      	str	r0, [sp, #20]
 80104b2:	3307      	adds	r3, #7
 80104b4:	f023 0307 	bic.w	r3, r3, #7
 80104b8:	f103 0208 	add.w	r2, r3, #8
 80104bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80104c0:	f8d4 b000 	ldr.w	fp, [r4]
 80104c4:	f8c8 2000 	str.w	r2, [r8]
 80104c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80104cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80104d0:	9307      	str	r3, [sp, #28]
 80104d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80104d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80104da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104de:	4b9c      	ldr	r3, [pc, #624]	@ (8010750 <_printf_float+0x2c8>)
 80104e0:	f04f 32ff 	mov.w	r2, #4294967295
 80104e4:	f7f0 fb4a 	bl	8000b7c <__aeabi_dcmpun>
 80104e8:	bb70      	cbnz	r0, 8010548 <_printf_float+0xc0>
 80104ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104ee:	4b98      	ldr	r3, [pc, #608]	@ (8010750 <_printf_float+0x2c8>)
 80104f0:	f04f 32ff 	mov.w	r2, #4294967295
 80104f4:	f7f0 fb24 	bl	8000b40 <__aeabi_dcmple>
 80104f8:	bb30      	cbnz	r0, 8010548 <_printf_float+0xc0>
 80104fa:	2200      	movs	r2, #0
 80104fc:	2300      	movs	r3, #0
 80104fe:	4640      	mov	r0, r8
 8010500:	4649      	mov	r1, r9
 8010502:	f7f0 fb13 	bl	8000b2c <__aeabi_dcmplt>
 8010506:	b110      	cbz	r0, 801050e <_printf_float+0x86>
 8010508:	232d      	movs	r3, #45	@ 0x2d
 801050a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801050e:	4a91      	ldr	r2, [pc, #580]	@ (8010754 <_printf_float+0x2cc>)
 8010510:	4b91      	ldr	r3, [pc, #580]	@ (8010758 <_printf_float+0x2d0>)
 8010512:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010516:	bf8c      	ite	hi
 8010518:	4690      	movhi	r8, r2
 801051a:	4698      	movls	r8, r3
 801051c:	2303      	movs	r3, #3
 801051e:	6123      	str	r3, [r4, #16]
 8010520:	f02b 0304 	bic.w	r3, fp, #4
 8010524:	6023      	str	r3, [r4, #0]
 8010526:	f04f 0900 	mov.w	r9, #0
 801052a:	9700      	str	r7, [sp, #0]
 801052c:	4633      	mov	r3, r6
 801052e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010530:	4621      	mov	r1, r4
 8010532:	4628      	mov	r0, r5
 8010534:	f000 f9d2 	bl	80108dc <_printf_common>
 8010538:	3001      	adds	r0, #1
 801053a:	f040 808d 	bne.w	8010658 <_printf_float+0x1d0>
 801053e:	f04f 30ff 	mov.w	r0, #4294967295
 8010542:	b00d      	add	sp, #52	@ 0x34
 8010544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010548:	4642      	mov	r2, r8
 801054a:	464b      	mov	r3, r9
 801054c:	4640      	mov	r0, r8
 801054e:	4649      	mov	r1, r9
 8010550:	f7f0 fb14 	bl	8000b7c <__aeabi_dcmpun>
 8010554:	b140      	cbz	r0, 8010568 <_printf_float+0xe0>
 8010556:	464b      	mov	r3, r9
 8010558:	2b00      	cmp	r3, #0
 801055a:	bfbc      	itt	lt
 801055c:	232d      	movlt	r3, #45	@ 0x2d
 801055e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010562:	4a7e      	ldr	r2, [pc, #504]	@ (801075c <_printf_float+0x2d4>)
 8010564:	4b7e      	ldr	r3, [pc, #504]	@ (8010760 <_printf_float+0x2d8>)
 8010566:	e7d4      	b.n	8010512 <_printf_float+0x8a>
 8010568:	6863      	ldr	r3, [r4, #4]
 801056a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801056e:	9206      	str	r2, [sp, #24]
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	d13b      	bne.n	80105ec <_printf_float+0x164>
 8010574:	2306      	movs	r3, #6
 8010576:	6063      	str	r3, [r4, #4]
 8010578:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801057c:	2300      	movs	r3, #0
 801057e:	6022      	str	r2, [r4, #0]
 8010580:	9303      	str	r3, [sp, #12]
 8010582:	ab0a      	add	r3, sp, #40	@ 0x28
 8010584:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010588:	ab09      	add	r3, sp, #36	@ 0x24
 801058a:	9300      	str	r3, [sp, #0]
 801058c:	6861      	ldr	r1, [r4, #4]
 801058e:	ec49 8b10 	vmov	d0, r8, r9
 8010592:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010596:	4628      	mov	r0, r5
 8010598:	f7ff fed6 	bl	8010348 <__cvt>
 801059c:	9b06      	ldr	r3, [sp, #24]
 801059e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80105a0:	2b47      	cmp	r3, #71	@ 0x47
 80105a2:	4680      	mov	r8, r0
 80105a4:	d129      	bne.n	80105fa <_printf_float+0x172>
 80105a6:	1cc8      	adds	r0, r1, #3
 80105a8:	db02      	blt.n	80105b0 <_printf_float+0x128>
 80105aa:	6863      	ldr	r3, [r4, #4]
 80105ac:	4299      	cmp	r1, r3
 80105ae:	dd41      	ble.n	8010634 <_printf_float+0x1ac>
 80105b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80105b4:	fa5f fa8a 	uxtb.w	sl, sl
 80105b8:	3901      	subs	r1, #1
 80105ba:	4652      	mov	r2, sl
 80105bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80105c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80105c2:	f7ff ff26 	bl	8010412 <__exponent>
 80105c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105c8:	1813      	adds	r3, r2, r0
 80105ca:	2a01      	cmp	r2, #1
 80105cc:	4681      	mov	r9, r0
 80105ce:	6123      	str	r3, [r4, #16]
 80105d0:	dc02      	bgt.n	80105d8 <_printf_float+0x150>
 80105d2:	6822      	ldr	r2, [r4, #0]
 80105d4:	07d2      	lsls	r2, r2, #31
 80105d6:	d501      	bpl.n	80105dc <_printf_float+0x154>
 80105d8:	3301      	adds	r3, #1
 80105da:	6123      	str	r3, [r4, #16]
 80105dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d0a2      	beq.n	801052a <_printf_float+0xa2>
 80105e4:	232d      	movs	r3, #45	@ 0x2d
 80105e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105ea:	e79e      	b.n	801052a <_printf_float+0xa2>
 80105ec:	9a06      	ldr	r2, [sp, #24]
 80105ee:	2a47      	cmp	r2, #71	@ 0x47
 80105f0:	d1c2      	bne.n	8010578 <_printf_float+0xf0>
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1c0      	bne.n	8010578 <_printf_float+0xf0>
 80105f6:	2301      	movs	r3, #1
 80105f8:	e7bd      	b.n	8010576 <_printf_float+0xee>
 80105fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80105fe:	d9db      	bls.n	80105b8 <_printf_float+0x130>
 8010600:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010604:	d118      	bne.n	8010638 <_printf_float+0x1b0>
 8010606:	2900      	cmp	r1, #0
 8010608:	6863      	ldr	r3, [r4, #4]
 801060a:	dd0b      	ble.n	8010624 <_printf_float+0x19c>
 801060c:	6121      	str	r1, [r4, #16]
 801060e:	b913      	cbnz	r3, 8010616 <_printf_float+0x18e>
 8010610:	6822      	ldr	r2, [r4, #0]
 8010612:	07d0      	lsls	r0, r2, #31
 8010614:	d502      	bpl.n	801061c <_printf_float+0x194>
 8010616:	3301      	adds	r3, #1
 8010618:	440b      	add	r3, r1
 801061a:	6123      	str	r3, [r4, #16]
 801061c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801061e:	f04f 0900 	mov.w	r9, #0
 8010622:	e7db      	b.n	80105dc <_printf_float+0x154>
 8010624:	b913      	cbnz	r3, 801062c <_printf_float+0x1a4>
 8010626:	6822      	ldr	r2, [r4, #0]
 8010628:	07d2      	lsls	r2, r2, #31
 801062a:	d501      	bpl.n	8010630 <_printf_float+0x1a8>
 801062c:	3302      	adds	r3, #2
 801062e:	e7f4      	b.n	801061a <_printf_float+0x192>
 8010630:	2301      	movs	r3, #1
 8010632:	e7f2      	b.n	801061a <_printf_float+0x192>
 8010634:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801063a:	4299      	cmp	r1, r3
 801063c:	db05      	blt.n	801064a <_printf_float+0x1c2>
 801063e:	6823      	ldr	r3, [r4, #0]
 8010640:	6121      	str	r1, [r4, #16]
 8010642:	07d8      	lsls	r0, r3, #31
 8010644:	d5ea      	bpl.n	801061c <_printf_float+0x194>
 8010646:	1c4b      	adds	r3, r1, #1
 8010648:	e7e7      	b.n	801061a <_printf_float+0x192>
 801064a:	2900      	cmp	r1, #0
 801064c:	bfd4      	ite	le
 801064e:	f1c1 0202 	rsble	r2, r1, #2
 8010652:	2201      	movgt	r2, #1
 8010654:	4413      	add	r3, r2
 8010656:	e7e0      	b.n	801061a <_printf_float+0x192>
 8010658:	6823      	ldr	r3, [r4, #0]
 801065a:	055a      	lsls	r2, r3, #21
 801065c:	d407      	bmi.n	801066e <_printf_float+0x1e6>
 801065e:	6923      	ldr	r3, [r4, #16]
 8010660:	4642      	mov	r2, r8
 8010662:	4631      	mov	r1, r6
 8010664:	4628      	mov	r0, r5
 8010666:	47b8      	blx	r7
 8010668:	3001      	adds	r0, #1
 801066a:	d12b      	bne.n	80106c4 <_printf_float+0x23c>
 801066c:	e767      	b.n	801053e <_printf_float+0xb6>
 801066e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010672:	f240 80dd 	bls.w	8010830 <_printf_float+0x3a8>
 8010676:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801067a:	2200      	movs	r2, #0
 801067c:	2300      	movs	r3, #0
 801067e:	f7f0 fa4b 	bl	8000b18 <__aeabi_dcmpeq>
 8010682:	2800      	cmp	r0, #0
 8010684:	d033      	beq.n	80106ee <_printf_float+0x266>
 8010686:	4a37      	ldr	r2, [pc, #220]	@ (8010764 <_printf_float+0x2dc>)
 8010688:	2301      	movs	r3, #1
 801068a:	4631      	mov	r1, r6
 801068c:	4628      	mov	r0, r5
 801068e:	47b8      	blx	r7
 8010690:	3001      	adds	r0, #1
 8010692:	f43f af54 	beq.w	801053e <_printf_float+0xb6>
 8010696:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801069a:	4543      	cmp	r3, r8
 801069c:	db02      	blt.n	80106a4 <_printf_float+0x21c>
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	07d8      	lsls	r0, r3, #31
 80106a2:	d50f      	bpl.n	80106c4 <_printf_float+0x23c>
 80106a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106a8:	4631      	mov	r1, r6
 80106aa:	4628      	mov	r0, r5
 80106ac:	47b8      	blx	r7
 80106ae:	3001      	adds	r0, #1
 80106b0:	f43f af45 	beq.w	801053e <_printf_float+0xb6>
 80106b4:	f04f 0900 	mov.w	r9, #0
 80106b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80106bc:	f104 0a1a 	add.w	sl, r4, #26
 80106c0:	45c8      	cmp	r8, r9
 80106c2:	dc09      	bgt.n	80106d8 <_printf_float+0x250>
 80106c4:	6823      	ldr	r3, [r4, #0]
 80106c6:	079b      	lsls	r3, r3, #30
 80106c8:	f100 8103 	bmi.w	80108d2 <_printf_float+0x44a>
 80106cc:	68e0      	ldr	r0, [r4, #12]
 80106ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106d0:	4298      	cmp	r0, r3
 80106d2:	bfb8      	it	lt
 80106d4:	4618      	movlt	r0, r3
 80106d6:	e734      	b.n	8010542 <_printf_float+0xba>
 80106d8:	2301      	movs	r3, #1
 80106da:	4652      	mov	r2, sl
 80106dc:	4631      	mov	r1, r6
 80106de:	4628      	mov	r0, r5
 80106e0:	47b8      	blx	r7
 80106e2:	3001      	adds	r0, #1
 80106e4:	f43f af2b 	beq.w	801053e <_printf_float+0xb6>
 80106e8:	f109 0901 	add.w	r9, r9, #1
 80106ec:	e7e8      	b.n	80106c0 <_printf_float+0x238>
 80106ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	dc39      	bgt.n	8010768 <_printf_float+0x2e0>
 80106f4:	4a1b      	ldr	r2, [pc, #108]	@ (8010764 <_printf_float+0x2dc>)
 80106f6:	2301      	movs	r3, #1
 80106f8:	4631      	mov	r1, r6
 80106fa:	4628      	mov	r0, r5
 80106fc:	47b8      	blx	r7
 80106fe:	3001      	adds	r0, #1
 8010700:	f43f af1d 	beq.w	801053e <_printf_float+0xb6>
 8010704:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010708:	ea59 0303 	orrs.w	r3, r9, r3
 801070c:	d102      	bne.n	8010714 <_printf_float+0x28c>
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	07d9      	lsls	r1, r3, #31
 8010712:	d5d7      	bpl.n	80106c4 <_printf_float+0x23c>
 8010714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010718:	4631      	mov	r1, r6
 801071a:	4628      	mov	r0, r5
 801071c:	47b8      	blx	r7
 801071e:	3001      	adds	r0, #1
 8010720:	f43f af0d 	beq.w	801053e <_printf_float+0xb6>
 8010724:	f04f 0a00 	mov.w	sl, #0
 8010728:	f104 0b1a 	add.w	fp, r4, #26
 801072c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801072e:	425b      	negs	r3, r3
 8010730:	4553      	cmp	r3, sl
 8010732:	dc01      	bgt.n	8010738 <_printf_float+0x2b0>
 8010734:	464b      	mov	r3, r9
 8010736:	e793      	b.n	8010660 <_printf_float+0x1d8>
 8010738:	2301      	movs	r3, #1
 801073a:	465a      	mov	r2, fp
 801073c:	4631      	mov	r1, r6
 801073e:	4628      	mov	r0, r5
 8010740:	47b8      	blx	r7
 8010742:	3001      	adds	r0, #1
 8010744:	f43f aefb 	beq.w	801053e <_printf_float+0xb6>
 8010748:	f10a 0a01 	add.w	sl, sl, #1
 801074c:	e7ee      	b.n	801072c <_printf_float+0x2a4>
 801074e:	bf00      	nop
 8010750:	7fefffff 	.word	0x7fefffff
 8010754:	08015584 	.word	0x08015584
 8010758:	08015580 	.word	0x08015580
 801075c:	0801558c 	.word	0x0801558c
 8010760:	08015588 	.word	0x08015588
 8010764:	08015590 	.word	0x08015590
 8010768:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801076a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801076e:	4553      	cmp	r3, sl
 8010770:	bfa8      	it	ge
 8010772:	4653      	movge	r3, sl
 8010774:	2b00      	cmp	r3, #0
 8010776:	4699      	mov	r9, r3
 8010778:	dc36      	bgt.n	80107e8 <_printf_float+0x360>
 801077a:	f04f 0b00 	mov.w	fp, #0
 801077e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010782:	f104 021a 	add.w	r2, r4, #26
 8010786:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010788:	9306      	str	r3, [sp, #24]
 801078a:	eba3 0309 	sub.w	r3, r3, r9
 801078e:	455b      	cmp	r3, fp
 8010790:	dc31      	bgt.n	80107f6 <_printf_float+0x36e>
 8010792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010794:	459a      	cmp	sl, r3
 8010796:	dc3a      	bgt.n	801080e <_printf_float+0x386>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	07da      	lsls	r2, r3, #31
 801079c:	d437      	bmi.n	801080e <_printf_float+0x386>
 801079e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107a0:	ebaa 0903 	sub.w	r9, sl, r3
 80107a4:	9b06      	ldr	r3, [sp, #24]
 80107a6:	ebaa 0303 	sub.w	r3, sl, r3
 80107aa:	4599      	cmp	r9, r3
 80107ac:	bfa8      	it	ge
 80107ae:	4699      	movge	r9, r3
 80107b0:	f1b9 0f00 	cmp.w	r9, #0
 80107b4:	dc33      	bgt.n	801081e <_printf_float+0x396>
 80107b6:	f04f 0800 	mov.w	r8, #0
 80107ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107be:	f104 0b1a 	add.w	fp, r4, #26
 80107c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c4:	ebaa 0303 	sub.w	r3, sl, r3
 80107c8:	eba3 0309 	sub.w	r3, r3, r9
 80107cc:	4543      	cmp	r3, r8
 80107ce:	f77f af79 	ble.w	80106c4 <_printf_float+0x23c>
 80107d2:	2301      	movs	r3, #1
 80107d4:	465a      	mov	r2, fp
 80107d6:	4631      	mov	r1, r6
 80107d8:	4628      	mov	r0, r5
 80107da:	47b8      	blx	r7
 80107dc:	3001      	adds	r0, #1
 80107de:	f43f aeae 	beq.w	801053e <_printf_float+0xb6>
 80107e2:	f108 0801 	add.w	r8, r8, #1
 80107e6:	e7ec      	b.n	80107c2 <_printf_float+0x33a>
 80107e8:	4642      	mov	r2, r8
 80107ea:	4631      	mov	r1, r6
 80107ec:	4628      	mov	r0, r5
 80107ee:	47b8      	blx	r7
 80107f0:	3001      	adds	r0, #1
 80107f2:	d1c2      	bne.n	801077a <_printf_float+0x2f2>
 80107f4:	e6a3      	b.n	801053e <_printf_float+0xb6>
 80107f6:	2301      	movs	r3, #1
 80107f8:	4631      	mov	r1, r6
 80107fa:	4628      	mov	r0, r5
 80107fc:	9206      	str	r2, [sp, #24]
 80107fe:	47b8      	blx	r7
 8010800:	3001      	adds	r0, #1
 8010802:	f43f ae9c 	beq.w	801053e <_printf_float+0xb6>
 8010806:	9a06      	ldr	r2, [sp, #24]
 8010808:	f10b 0b01 	add.w	fp, fp, #1
 801080c:	e7bb      	b.n	8010786 <_printf_float+0x2fe>
 801080e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010812:	4631      	mov	r1, r6
 8010814:	4628      	mov	r0, r5
 8010816:	47b8      	blx	r7
 8010818:	3001      	adds	r0, #1
 801081a:	d1c0      	bne.n	801079e <_printf_float+0x316>
 801081c:	e68f      	b.n	801053e <_printf_float+0xb6>
 801081e:	9a06      	ldr	r2, [sp, #24]
 8010820:	464b      	mov	r3, r9
 8010822:	4442      	add	r2, r8
 8010824:	4631      	mov	r1, r6
 8010826:	4628      	mov	r0, r5
 8010828:	47b8      	blx	r7
 801082a:	3001      	adds	r0, #1
 801082c:	d1c3      	bne.n	80107b6 <_printf_float+0x32e>
 801082e:	e686      	b.n	801053e <_printf_float+0xb6>
 8010830:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010834:	f1ba 0f01 	cmp.w	sl, #1
 8010838:	dc01      	bgt.n	801083e <_printf_float+0x3b6>
 801083a:	07db      	lsls	r3, r3, #31
 801083c:	d536      	bpl.n	80108ac <_printf_float+0x424>
 801083e:	2301      	movs	r3, #1
 8010840:	4642      	mov	r2, r8
 8010842:	4631      	mov	r1, r6
 8010844:	4628      	mov	r0, r5
 8010846:	47b8      	blx	r7
 8010848:	3001      	adds	r0, #1
 801084a:	f43f ae78 	beq.w	801053e <_printf_float+0xb6>
 801084e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010852:	4631      	mov	r1, r6
 8010854:	4628      	mov	r0, r5
 8010856:	47b8      	blx	r7
 8010858:	3001      	adds	r0, #1
 801085a:	f43f ae70 	beq.w	801053e <_printf_float+0xb6>
 801085e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010862:	2200      	movs	r2, #0
 8010864:	2300      	movs	r3, #0
 8010866:	f10a 3aff 	add.w	sl, sl, #4294967295
 801086a:	f7f0 f955 	bl	8000b18 <__aeabi_dcmpeq>
 801086e:	b9c0      	cbnz	r0, 80108a2 <_printf_float+0x41a>
 8010870:	4653      	mov	r3, sl
 8010872:	f108 0201 	add.w	r2, r8, #1
 8010876:	4631      	mov	r1, r6
 8010878:	4628      	mov	r0, r5
 801087a:	47b8      	blx	r7
 801087c:	3001      	adds	r0, #1
 801087e:	d10c      	bne.n	801089a <_printf_float+0x412>
 8010880:	e65d      	b.n	801053e <_printf_float+0xb6>
 8010882:	2301      	movs	r3, #1
 8010884:	465a      	mov	r2, fp
 8010886:	4631      	mov	r1, r6
 8010888:	4628      	mov	r0, r5
 801088a:	47b8      	blx	r7
 801088c:	3001      	adds	r0, #1
 801088e:	f43f ae56 	beq.w	801053e <_printf_float+0xb6>
 8010892:	f108 0801 	add.w	r8, r8, #1
 8010896:	45d0      	cmp	r8, sl
 8010898:	dbf3      	blt.n	8010882 <_printf_float+0x3fa>
 801089a:	464b      	mov	r3, r9
 801089c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80108a0:	e6df      	b.n	8010662 <_printf_float+0x1da>
 80108a2:	f04f 0800 	mov.w	r8, #0
 80108a6:	f104 0b1a 	add.w	fp, r4, #26
 80108aa:	e7f4      	b.n	8010896 <_printf_float+0x40e>
 80108ac:	2301      	movs	r3, #1
 80108ae:	4642      	mov	r2, r8
 80108b0:	e7e1      	b.n	8010876 <_printf_float+0x3ee>
 80108b2:	2301      	movs	r3, #1
 80108b4:	464a      	mov	r2, r9
 80108b6:	4631      	mov	r1, r6
 80108b8:	4628      	mov	r0, r5
 80108ba:	47b8      	blx	r7
 80108bc:	3001      	adds	r0, #1
 80108be:	f43f ae3e 	beq.w	801053e <_printf_float+0xb6>
 80108c2:	f108 0801 	add.w	r8, r8, #1
 80108c6:	68e3      	ldr	r3, [r4, #12]
 80108c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80108ca:	1a5b      	subs	r3, r3, r1
 80108cc:	4543      	cmp	r3, r8
 80108ce:	dcf0      	bgt.n	80108b2 <_printf_float+0x42a>
 80108d0:	e6fc      	b.n	80106cc <_printf_float+0x244>
 80108d2:	f04f 0800 	mov.w	r8, #0
 80108d6:	f104 0919 	add.w	r9, r4, #25
 80108da:	e7f4      	b.n	80108c6 <_printf_float+0x43e>

080108dc <_printf_common>:
 80108dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e0:	4616      	mov	r6, r2
 80108e2:	4698      	mov	r8, r3
 80108e4:	688a      	ldr	r2, [r1, #8]
 80108e6:	690b      	ldr	r3, [r1, #16]
 80108e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108ec:	4293      	cmp	r3, r2
 80108ee:	bfb8      	it	lt
 80108f0:	4613      	movlt	r3, r2
 80108f2:	6033      	str	r3, [r6, #0]
 80108f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80108f8:	4607      	mov	r7, r0
 80108fa:	460c      	mov	r4, r1
 80108fc:	b10a      	cbz	r2, 8010902 <_printf_common+0x26>
 80108fe:	3301      	adds	r3, #1
 8010900:	6033      	str	r3, [r6, #0]
 8010902:	6823      	ldr	r3, [r4, #0]
 8010904:	0699      	lsls	r1, r3, #26
 8010906:	bf42      	ittt	mi
 8010908:	6833      	ldrmi	r3, [r6, #0]
 801090a:	3302      	addmi	r3, #2
 801090c:	6033      	strmi	r3, [r6, #0]
 801090e:	6825      	ldr	r5, [r4, #0]
 8010910:	f015 0506 	ands.w	r5, r5, #6
 8010914:	d106      	bne.n	8010924 <_printf_common+0x48>
 8010916:	f104 0a19 	add.w	sl, r4, #25
 801091a:	68e3      	ldr	r3, [r4, #12]
 801091c:	6832      	ldr	r2, [r6, #0]
 801091e:	1a9b      	subs	r3, r3, r2
 8010920:	42ab      	cmp	r3, r5
 8010922:	dc26      	bgt.n	8010972 <_printf_common+0x96>
 8010924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010928:	6822      	ldr	r2, [r4, #0]
 801092a:	3b00      	subs	r3, #0
 801092c:	bf18      	it	ne
 801092e:	2301      	movne	r3, #1
 8010930:	0692      	lsls	r2, r2, #26
 8010932:	d42b      	bmi.n	801098c <_printf_common+0xb0>
 8010934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010938:	4641      	mov	r1, r8
 801093a:	4638      	mov	r0, r7
 801093c:	47c8      	blx	r9
 801093e:	3001      	adds	r0, #1
 8010940:	d01e      	beq.n	8010980 <_printf_common+0xa4>
 8010942:	6823      	ldr	r3, [r4, #0]
 8010944:	6922      	ldr	r2, [r4, #16]
 8010946:	f003 0306 	and.w	r3, r3, #6
 801094a:	2b04      	cmp	r3, #4
 801094c:	bf02      	ittt	eq
 801094e:	68e5      	ldreq	r5, [r4, #12]
 8010950:	6833      	ldreq	r3, [r6, #0]
 8010952:	1aed      	subeq	r5, r5, r3
 8010954:	68a3      	ldr	r3, [r4, #8]
 8010956:	bf0c      	ite	eq
 8010958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801095c:	2500      	movne	r5, #0
 801095e:	4293      	cmp	r3, r2
 8010960:	bfc4      	itt	gt
 8010962:	1a9b      	subgt	r3, r3, r2
 8010964:	18ed      	addgt	r5, r5, r3
 8010966:	2600      	movs	r6, #0
 8010968:	341a      	adds	r4, #26
 801096a:	42b5      	cmp	r5, r6
 801096c:	d11a      	bne.n	80109a4 <_printf_common+0xc8>
 801096e:	2000      	movs	r0, #0
 8010970:	e008      	b.n	8010984 <_printf_common+0xa8>
 8010972:	2301      	movs	r3, #1
 8010974:	4652      	mov	r2, sl
 8010976:	4641      	mov	r1, r8
 8010978:	4638      	mov	r0, r7
 801097a:	47c8      	blx	r9
 801097c:	3001      	adds	r0, #1
 801097e:	d103      	bne.n	8010988 <_printf_common+0xac>
 8010980:	f04f 30ff 	mov.w	r0, #4294967295
 8010984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010988:	3501      	adds	r5, #1
 801098a:	e7c6      	b.n	801091a <_printf_common+0x3e>
 801098c:	18e1      	adds	r1, r4, r3
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	2030      	movs	r0, #48	@ 0x30
 8010992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010996:	4422      	add	r2, r4
 8010998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801099c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80109a0:	3302      	adds	r3, #2
 80109a2:	e7c7      	b.n	8010934 <_printf_common+0x58>
 80109a4:	2301      	movs	r3, #1
 80109a6:	4622      	mov	r2, r4
 80109a8:	4641      	mov	r1, r8
 80109aa:	4638      	mov	r0, r7
 80109ac:	47c8      	blx	r9
 80109ae:	3001      	adds	r0, #1
 80109b0:	d0e6      	beq.n	8010980 <_printf_common+0xa4>
 80109b2:	3601      	adds	r6, #1
 80109b4:	e7d9      	b.n	801096a <_printf_common+0x8e>
	...

080109b8 <_printf_i>:
 80109b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109bc:	7e0f      	ldrb	r7, [r1, #24]
 80109be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80109c0:	2f78      	cmp	r7, #120	@ 0x78
 80109c2:	4691      	mov	r9, r2
 80109c4:	4680      	mov	r8, r0
 80109c6:	460c      	mov	r4, r1
 80109c8:	469a      	mov	sl, r3
 80109ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80109ce:	d807      	bhi.n	80109e0 <_printf_i+0x28>
 80109d0:	2f62      	cmp	r7, #98	@ 0x62
 80109d2:	d80a      	bhi.n	80109ea <_printf_i+0x32>
 80109d4:	2f00      	cmp	r7, #0
 80109d6:	f000 80d1 	beq.w	8010b7c <_printf_i+0x1c4>
 80109da:	2f58      	cmp	r7, #88	@ 0x58
 80109dc:	f000 80b8 	beq.w	8010b50 <_printf_i+0x198>
 80109e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80109e8:	e03a      	b.n	8010a60 <_printf_i+0xa8>
 80109ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80109ee:	2b15      	cmp	r3, #21
 80109f0:	d8f6      	bhi.n	80109e0 <_printf_i+0x28>
 80109f2:	a101      	add	r1, pc, #4	@ (adr r1, 80109f8 <_printf_i+0x40>)
 80109f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109f8:	08010a51 	.word	0x08010a51
 80109fc:	08010a65 	.word	0x08010a65
 8010a00:	080109e1 	.word	0x080109e1
 8010a04:	080109e1 	.word	0x080109e1
 8010a08:	080109e1 	.word	0x080109e1
 8010a0c:	080109e1 	.word	0x080109e1
 8010a10:	08010a65 	.word	0x08010a65
 8010a14:	080109e1 	.word	0x080109e1
 8010a18:	080109e1 	.word	0x080109e1
 8010a1c:	080109e1 	.word	0x080109e1
 8010a20:	080109e1 	.word	0x080109e1
 8010a24:	08010b63 	.word	0x08010b63
 8010a28:	08010a8f 	.word	0x08010a8f
 8010a2c:	08010b1d 	.word	0x08010b1d
 8010a30:	080109e1 	.word	0x080109e1
 8010a34:	080109e1 	.word	0x080109e1
 8010a38:	08010b85 	.word	0x08010b85
 8010a3c:	080109e1 	.word	0x080109e1
 8010a40:	08010a8f 	.word	0x08010a8f
 8010a44:	080109e1 	.word	0x080109e1
 8010a48:	080109e1 	.word	0x080109e1
 8010a4c:	08010b25 	.word	0x08010b25
 8010a50:	6833      	ldr	r3, [r6, #0]
 8010a52:	1d1a      	adds	r2, r3, #4
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	6032      	str	r2, [r6, #0]
 8010a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a60:	2301      	movs	r3, #1
 8010a62:	e09c      	b.n	8010b9e <_printf_i+0x1e6>
 8010a64:	6833      	ldr	r3, [r6, #0]
 8010a66:	6820      	ldr	r0, [r4, #0]
 8010a68:	1d19      	adds	r1, r3, #4
 8010a6a:	6031      	str	r1, [r6, #0]
 8010a6c:	0606      	lsls	r6, r0, #24
 8010a6e:	d501      	bpl.n	8010a74 <_printf_i+0xbc>
 8010a70:	681d      	ldr	r5, [r3, #0]
 8010a72:	e003      	b.n	8010a7c <_printf_i+0xc4>
 8010a74:	0645      	lsls	r5, r0, #25
 8010a76:	d5fb      	bpl.n	8010a70 <_printf_i+0xb8>
 8010a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a7c:	2d00      	cmp	r5, #0
 8010a7e:	da03      	bge.n	8010a88 <_printf_i+0xd0>
 8010a80:	232d      	movs	r3, #45	@ 0x2d
 8010a82:	426d      	negs	r5, r5
 8010a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a88:	4858      	ldr	r0, [pc, #352]	@ (8010bec <_printf_i+0x234>)
 8010a8a:	230a      	movs	r3, #10
 8010a8c:	e011      	b.n	8010ab2 <_printf_i+0xfa>
 8010a8e:	6821      	ldr	r1, [r4, #0]
 8010a90:	6833      	ldr	r3, [r6, #0]
 8010a92:	0608      	lsls	r0, r1, #24
 8010a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a98:	d402      	bmi.n	8010aa0 <_printf_i+0xe8>
 8010a9a:	0649      	lsls	r1, r1, #25
 8010a9c:	bf48      	it	mi
 8010a9e:	b2ad      	uxthmi	r5, r5
 8010aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8010aa2:	4852      	ldr	r0, [pc, #328]	@ (8010bec <_printf_i+0x234>)
 8010aa4:	6033      	str	r3, [r6, #0]
 8010aa6:	bf14      	ite	ne
 8010aa8:	230a      	movne	r3, #10
 8010aaa:	2308      	moveq	r3, #8
 8010aac:	2100      	movs	r1, #0
 8010aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010ab2:	6866      	ldr	r6, [r4, #4]
 8010ab4:	60a6      	str	r6, [r4, #8]
 8010ab6:	2e00      	cmp	r6, #0
 8010ab8:	db05      	blt.n	8010ac6 <_printf_i+0x10e>
 8010aba:	6821      	ldr	r1, [r4, #0]
 8010abc:	432e      	orrs	r6, r5
 8010abe:	f021 0104 	bic.w	r1, r1, #4
 8010ac2:	6021      	str	r1, [r4, #0]
 8010ac4:	d04b      	beq.n	8010b5e <_printf_i+0x1a6>
 8010ac6:	4616      	mov	r6, r2
 8010ac8:	fbb5 f1f3 	udiv	r1, r5, r3
 8010acc:	fb03 5711 	mls	r7, r3, r1, r5
 8010ad0:	5dc7      	ldrb	r7, [r0, r7]
 8010ad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ad6:	462f      	mov	r7, r5
 8010ad8:	42bb      	cmp	r3, r7
 8010ada:	460d      	mov	r5, r1
 8010adc:	d9f4      	bls.n	8010ac8 <_printf_i+0x110>
 8010ade:	2b08      	cmp	r3, #8
 8010ae0:	d10b      	bne.n	8010afa <_printf_i+0x142>
 8010ae2:	6823      	ldr	r3, [r4, #0]
 8010ae4:	07df      	lsls	r7, r3, #31
 8010ae6:	d508      	bpl.n	8010afa <_printf_i+0x142>
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	6861      	ldr	r1, [r4, #4]
 8010aec:	4299      	cmp	r1, r3
 8010aee:	bfde      	ittt	le
 8010af0:	2330      	movle	r3, #48	@ 0x30
 8010af2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010af6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010afa:	1b92      	subs	r2, r2, r6
 8010afc:	6122      	str	r2, [r4, #16]
 8010afe:	f8cd a000 	str.w	sl, [sp]
 8010b02:	464b      	mov	r3, r9
 8010b04:	aa03      	add	r2, sp, #12
 8010b06:	4621      	mov	r1, r4
 8010b08:	4640      	mov	r0, r8
 8010b0a:	f7ff fee7 	bl	80108dc <_printf_common>
 8010b0e:	3001      	adds	r0, #1
 8010b10:	d14a      	bne.n	8010ba8 <_printf_i+0x1f0>
 8010b12:	f04f 30ff 	mov.w	r0, #4294967295
 8010b16:	b004      	add	sp, #16
 8010b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	f043 0320 	orr.w	r3, r3, #32
 8010b22:	6023      	str	r3, [r4, #0]
 8010b24:	4832      	ldr	r0, [pc, #200]	@ (8010bf0 <_printf_i+0x238>)
 8010b26:	2778      	movs	r7, #120	@ 0x78
 8010b28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b2c:	6823      	ldr	r3, [r4, #0]
 8010b2e:	6831      	ldr	r1, [r6, #0]
 8010b30:	061f      	lsls	r7, r3, #24
 8010b32:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b36:	d402      	bmi.n	8010b3e <_printf_i+0x186>
 8010b38:	065f      	lsls	r7, r3, #25
 8010b3a:	bf48      	it	mi
 8010b3c:	b2ad      	uxthmi	r5, r5
 8010b3e:	6031      	str	r1, [r6, #0]
 8010b40:	07d9      	lsls	r1, r3, #31
 8010b42:	bf44      	itt	mi
 8010b44:	f043 0320 	orrmi.w	r3, r3, #32
 8010b48:	6023      	strmi	r3, [r4, #0]
 8010b4a:	b11d      	cbz	r5, 8010b54 <_printf_i+0x19c>
 8010b4c:	2310      	movs	r3, #16
 8010b4e:	e7ad      	b.n	8010aac <_printf_i+0xf4>
 8010b50:	4826      	ldr	r0, [pc, #152]	@ (8010bec <_printf_i+0x234>)
 8010b52:	e7e9      	b.n	8010b28 <_printf_i+0x170>
 8010b54:	6823      	ldr	r3, [r4, #0]
 8010b56:	f023 0320 	bic.w	r3, r3, #32
 8010b5a:	6023      	str	r3, [r4, #0]
 8010b5c:	e7f6      	b.n	8010b4c <_printf_i+0x194>
 8010b5e:	4616      	mov	r6, r2
 8010b60:	e7bd      	b.n	8010ade <_printf_i+0x126>
 8010b62:	6833      	ldr	r3, [r6, #0]
 8010b64:	6825      	ldr	r5, [r4, #0]
 8010b66:	6961      	ldr	r1, [r4, #20]
 8010b68:	1d18      	adds	r0, r3, #4
 8010b6a:	6030      	str	r0, [r6, #0]
 8010b6c:	062e      	lsls	r6, r5, #24
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	d501      	bpl.n	8010b76 <_printf_i+0x1be>
 8010b72:	6019      	str	r1, [r3, #0]
 8010b74:	e002      	b.n	8010b7c <_printf_i+0x1c4>
 8010b76:	0668      	lsls	r0, r5, #25
 8010b78:	d5fb      	bpl.n	8010b72 <_printf_i+0x1ba>
 8010b7a:	8019      	strh	r1, [r3, #0]
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	6123      	str	r3, [r4, #16]
 8010b80:	4616      	mov	r6, r2
 8010b82:	e7bc      	b.n	8010afe <_printf_i+0x146>
 8010b84:	6833      	ldr	r3, [r6, #0]
 8010b86:	1d1a      	adds	r2, r3, #4
 8010b88:	6032      	str	r2, [r6, #0]
 8010b8a:	681e      	ldr	r6, [r3, #0]
 8010b8c:	6862      	ldr	r2, [r4, #4]
 8010b8e:	2100      	movs	r1, #0
 8010b90:	4630      	mov	r0, r6
 8010b92:	f7ef fb45 	bl	8000220 <memchr>
 8010b96:	b108      	cbz	r0, 8010b9c <_printf_i+0x1e4>
 8010b98:	1b80      	subs	r0, r0, r6
 8010b9a:	6060      	str	r0, [r4, #4]
 8010b9c:	6863      	ldr	r3, [r4, #4]
 8010b9e:	6123      	str	r3, [r4, #16]
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ba6:	e7aa      	b.n	8010afe <_printf_i+0x146>
 8010ba8:	6923      	ldr	r3, [r4, #16]
 8010baa:	4632      	mov	r2, r6
 8010bac:	4649      	mov	r1, r9
 8010bae:	4640      	mov	r0, r8
 8010bb0:	47d0      	blx	sl
 8010bb2:	3001      	adds	r0, #1
 8010bb4:	d0ad      	beq.n	8010b12 <_printf_i+0x15a>
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	079b      	lsls	r3, r3, #30
 8010bba:	d413      	bmi.n	8010be4 <_printf_i+0x22c>
 8010bbc:	68e0      	ldr	r0, [r4, #12]
 8010bbe:	9b03      	ldr	r3, [sp, #12]
 8010bc0:	4298      	cmp	r0, r3
 8010bc2:	bfb8      	it	lt
 8010bc4:	4618      	movlt	r0, r3
 8010bc6:	e7a6      	b.n	8010b16 <_printf_i+0x15e>
 8010bc8:	2301      	movs	r3, #1
 8010bca:	4632      	mov	r2, r6
 8010bcc:	4649      	mov	r1, r9
 8010bce:	4640      	mov	r0, r8
 8010bd0:	47d0      	blx	sl
 8010bd2:	3001      	adds	r0, #1
 8010bd4:	d09d      	beq.n	8010b12 <_printf_i+0x15a>
 8010bd6:	3501      	adds	r5, #1
 8010bd8:	68e3      	ldr	r3, [r4, #12]
 8010bda:	9903      	ldr	r1, [sp, #12]
 8010bdc:	1a5b      	subs	r3, r3, r1
 8010bde:	42ab      	cmp	r3, r5
 8010be0:	dcf2      	bgt.n	8010bc8 <_printf_i+0x210>
 8010be2:	e7eb      	b.n	8010bbc <_printf_i+0x204>
 8010be4:	2500      	movs	r5, #0
 8010be6:	f104 0619 	add.w	r6, r4, #25
 8010bea:	e7f5      	b.n	8010bd8 <_printf_i+0x220>
 8010bec:	08015592 	.word	0x08015592
 8010bf0:	080155a3 	.word	0x080155a3

08010bf4 <_scanf_float>:
 8010bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf8:	b087      	sub	sp, #28
 8010bfa:	4691      	mov	r9, r2
 8010bfc:	9303      	str	r3, [sp, #12]
 8010bfe:	688b      	ldr	r3, [r1, #8]
 8010c00:	1e5a      	subs	r2, r3, #1
 8010c02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010c06:	bf81      	itttt	hi
 8010c08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010c0c:	eb03 0b05 	addhi.w	fp, r3, r5
 8010c10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010c14:	608b      	strhi	r3, [r1, #8]
 8010c16:	680b      	ldr	r3, [r1, #0]
 8010c18:	460a      	mov	r2, r1
 8010c1a:	f04f 0500 	mov.w	r5, #0
 8010c1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010c22:	f842 3b1c 	str.w	r3, [r2], #28
 8010c26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010c2a:	4680      	mov	r8, r0
 8010c2c:	460c      	mov	r4, r1
 8010c2e:	bf98      	it	ls
 8010c30:	f04f 0b00 	movls.w	fp, #0
 8010c34:	9201      	str	r2, [sp, #4]
 8010c36:	4616      	mov	r6, r2
 8010c38:	46aa      	mov	sl, r5
 8010c3a:	462f      	mov	r7, r5
 8010c3c:	9502      	str	r5, [sp, #8]
 8010c3e:	68a2      	ldr	r2, [r4, #8]
 8010c40:	b15a      	cbz	r2, 8010c5a <_scanf_float+0x66>
 8010c42:	f8d9 3000 	ldr.w	r3, [r9]
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	2b4e      	cmp	r3, #78	@ 0x4e
 8010c4a:	d863      	bhi.n	8010d14 <_scanf_float+0x120>
 8010c4c:	2b40      	cmp	r3, #64	@ 0x40
 8010c4e:	d83b      	bhi.n	8010cc8 <_scanf_float+0xd4>
 8010c50:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010c54:	b2c8      	uxtb	r0, r1
 8010c56:	280e      	cmp	r0, #14
 8010c58:	d939      	bls.n	8010cce <_scanf_float+0xda>
 8010c5a:	b11f      	cbz	r7, 8010c64 <_scanf_float+0x70>
 8010c5c:	6823      	ldr	r3, [r4, #0]
 8010c5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c62:	6023      	str	r3, [r4, #0]
 8010c64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c68:	f1ba 0f01 	cmp.w	sl, #1
 8010c6c:	f200 8114 	bhi.w	8010e98 <_scanf_float+0x2a4>
 8010c70:	9b01      	ldr	r3, [sp, #4]
 8010c72:	429e      	cmp	r6, r3
 8010c74:	f200 8105 	bhi.w	8010e82 <_scanf_float+0x28e>
 8010c78:	2001      	movs	r0, #1
 8010c7a:	b007      	add	sp, #28
 8010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c80:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010c84:	2a0d      	cmp	r2, #13
 8010c86:	d8e8      	bhi.n	8010c5a <_scanf_float+0x66>
 8010c88:	a101      	add	r1, pc, #4	@ (adr r1, 8010c90 <_scanf_float+0x9c>)
 8010c8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c8e:	bf00      	nop
 8010c90:	08010dd9 	.word	0x08010dd9
 8010c94:	08010c5b 	.word	0x08010c5b
 8010c98:	08010c5b 	.word	0x08010c5b
 8010c9c:	08010c5b 	.word	0x08010c5b
 8010ca0:	08010e35 	.word	0x08010e35
 8010ca4:	08010e0f 	.word	0x08010e0f
 8010ca8:	08010c5b 	.word	0x08010c5b
 8010cac:	08010c5b 	.word	0x08010c5b
 8010cb0:	08010de7 	.word	0x08010de7
 8010cb4:	08010c5b 	.word	0x08010c5b
 8010cb8:	08010c5b 	.word	0x08010c5b
 8010cbc:	08010c5b 	.word	0x08010c5b
 8010cc0:	08010c5b 	.word	0x08010c5b
 8010cc4:	08010da3 	.word	0x08010da3
 8010cc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010ccc:	e7da      	b.n	8010c84 <_scanf_float+0x90>
 8010cce:	290e      	cmp	r1, #14
 8010cd0:	d8c3      	bhi.n	8010c5a <_scanf_float+0x66>
 8010cd2:	a001      	add	r0, pc, #4	@ (adr r0, 8010cd8 <_scanf_float+0xe4>)
 8010cd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010cd8:	08010d93 	.word	0x08010d93
 8010cdc:	08010c5b 	.word	0x08010c5b
 8010ce0:	08010d93 	.word	0x08010d93
 8010ce4:	08010e23 	.word	0x08010e23
 8010ce8:	08010c5b 	.word	0x08010c5b
 8010cec:	08010d35 	.word	0x08010d35
 8010cf0:	08010d79 	.word	0x08010d79
 8010cf4:	08010d79 	.word	0x08010d79
 8010cf8:	08010d79 	.word	0x08010d79
 8010cfc:	08010d79 	.word	0x08010d79
 8010d00:	08010d79 	.word	0x08010d79
 8010d04:	08010d79 	.word	0x08010d79
 8010d08:	08010d79 	.word	0x08010d79
 8010d0c:	08010d79 	.word	0x08010d79
 8010d10:	08010d79 	.word	0x08010d79
 8010d14:	2b6e      	cmp	r3, #110	@ 0x6e
 8010d16:	d809      	bhi.n	8010d2c <_scanf_float+0x138>
 8010d18:	2b60      	cmp	r3, #96	@ 0x60
 8010d1a:	d8b1      	bhi.n	8010c80 <_scanf_float+0x8c>
 8010d1c:	2b54      	cmp	r3, #84	@ 0x54
 8010d1e:	d07b      	beq.n	8010e18 <_scanf_float+0x224>
 8010d20:	2b59      	cmp	r3, #89	@ 0x59
 8010d22:	d19a      	bne.n	8010c5a <_scanf_float+0x66>
 8010d24:	2d07      	cmp	r5, #7
 8010d26:	d198      	bne.n	8010c5a <_scanf_float+0x66>
 8010d28:	2508      	movs	r5, #8
 8010d2a:	e02f      	b.n	8010d8c <_scanf_float+0x198>
 8010d2c:	2b74      	cmp	r3, #116	@ 0x74
 8010d2e:	d073      	beq.n	8010e18 <_scanf_float+0x224>
 8010d30:	2b79      	cmp	r3, #121	@ 0x79
 8010d32:	e7f6      	b.n	8010d22 <_scanf_float+0x12e>
 8010d34:	6821      	ldr	r1, [r4, #0]
 8010d36:	05c8      	lsls	r0, r1, #23
 8010d38:	d51e      	bpl.n	8010d78 <_scanf_float+0x184>
 8010d3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010d3e:	6021      	str	r1, [r4, #0]
 8010d40:	3701      	adds	r7, #1
 8010d42:	f1bb 0f00 	cmp.w	fp, #0
 8010d46:	d003      	beq.n	8010d50 <_scanf_float+0x15c>
 8010d48:	3201      	adds	r2, #1
 8010d4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010d4e:	60a2      	str	r2, [r4, #8]
 8010d50:	68a3      	ldr	r3, [r4, #8]
 8010d52:	3b01      	subs	r3, #1
 8010d54:	60a3      	str	r3, [r4, #8]
 8010d56:	6923      	ldr	r3, [r4, #16]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	6123      	str	r3, [r4, #16]
 8010d5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010d60:	3b01      	subs	r3, #1
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f8c9 3004 	str.w	r3, [r9, #4]
 8010d68:	f340 8082 	ble.w	8010e70 <_scanf_float+0x27c>
 8010d6c:	f8d9 3000 	ldr.w	r3, [r9]
 8010d70:	3301      	adds	r3, #1
 8010d72:	f8c9 3000 	str.w	r3, [r9]
 8010d76:	e762      	b.n	8010c3e <_scanf_float+0x4a>
 8010d78:	eb1a 0105 	adds.w	r1, sl, r5
 8010d7c:	f47f af6d 	bne.w	8010c5a <_scanf_float+0x66>
 8010d80:	6822      	ldr	r2, [r4, #0]
 8010d82:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010d86:	6022      	str	r2, [r4, #0]
 8010d88:	460d      	mov	r5, r1
 8010d8a:	468a      	mov	sl, r1
 8010d8c:	f806 3b01 	strb.w	r3, [r6], #1
 8010d90:	e7de      	b.n	8010d50 <_scanf_float+0x15c>
 8010d92:	6822      	ldr	r2, [r4, #0]
 8010d94:	0610      	lsls	r0, r2, #24
 8010d96:	f57f af60 	bpl.w	8010c5a <_scanf_float+0x66>
 8010d9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010d9e:	6022      	str	r2, [r4, #0]
 8010da0:	e7f4      	b.n	8010d8c <_scanf_float+0x198>
 8010da2:	f1ba 0f00 	cmp.w	sl, #0
 8010da6:	d10c      	bne.n	8010dc2 <_scanf_float+0x1ce>
 8010da8:	b977      	cbnz	r7, 8010dc8 <_scanf_float+0x1d4>
 8010daa:	6822      	ldr	r2, [r4, #0]
 8010dac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010db0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010db4:	d108      	bne.n	8010dc8 <_scanf_float+0x1d4>
 8010db6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010dba:	6022      	str	r2, [r4, #0]
 8010dbc:	f04f 0a01 	mov.w	sl, #1
 8010dc0:	e7e4      	b.n	8010d8c <_scanf_float+0x198>
 8010dc2:	f1ba 0f02 	cmp.w	sl, #2
 8010dc6:	d050      	beq.n	8010e6a <_scanf_float+0x276>
 8010dc8:	2d01      	cmp	r5, #1
 8010dca:	d002      	beq.n	8010dd2 <_scanf_float+0x1de>
 8010dcc:	2d04      	cmp	r5, #4
 8010dce:	f47f af44 	bne.w	8010c5a <_scanf_float+0x66>
 8010dd2:	3501      	adds	r5, #1
 8010dd4:	b2ed      	uxtb	r5, r5
 8010dd6:	e7d9      	b.n	8010d8c <_scanf_float+0x198>
 8010dd8:	f1ba 0f01 	cmp.w	sl, #1
 8010ddc:	f47f af3d 	bne.w	8010c5a <_scanf_float+0x66>
 8010de0:	f04f 0a02 	mov.w	sl, #2
 8010de4:	e7d2      	b.n	8010d8c <_scanf_float+0x198>
 8010de6:	b975      	cbnz	r5, 8010e06 <_scanf_float+0x212>
 8010de8:	2f00      	cmp	r7, #0
 8010dea:	f47f af37 	bne.w	8010c5c <_scanf_float+0x68>
 8010dee:	6822      	ldr	r2, [r4, #0]
 8010df0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010df4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010df8:	f040 8103 	bne.w	8011002 <_scanf_float+0x40e>
 8010dfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010e00:	6022      	str	r2, [r4, #0]
 8010e02:	2501      	movs	r5, #1
 8010e04:	e7c2      	b.n	8010d8c <_scanf_float+0x198>
 8010e06:	2d03      	cmp	r5, #3
 8010e08:	d0e3      	beq.n	8010dd2 <_scanf_float+0x1de>
 8010e0a:	2d05      	cmp	r5, #5
 8010e0c:	e7df      	b.n	8010dce <_scanf_float+0x1da>
 8010e0e:	2d02      	cmp	r5, #2
 8010e10:	f47f af23 	bne.w	8010c5a <_scanf_float+0x66>
 8010e14:	2503      	movs	r5, #3
 8010e16:	e7b9      	b.n	8010d8c <_scanf_float+0x198>
 8010e18:	2d06      	cmp	r5, #6
 8010e1a:	f47f af1e 	bne.w	8010c5a <_scanf_float+0x66>
 8010e1e:	2507      	movs	r5, #7
 8010e20:	e7b4      	b.n	8010d8c <_scanf_float+0x198>
 8010e22:	6822      	ldr	r2, [r4, #0]
 8010e24:	0591      	lsls	r1, r2, #22
 8010e26:	f57f af18 	bpl.w	8010c5a <_scanf_float+0x66>
 8010e2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010e2e:	6022      	str	r2, [r4, #0]
 8010e30:	9702      	str	r7, [sp, #8]
 8010e32:	e7ab      	b.n	8010d8c <_scanf_float+0x198>
 8010e34:	6822      	ldr	r2, [r4, #0]
 8010e36:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010e3a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010e3e:	d005      	beq.n	8010e4c <_scanf_float+0x258>
 8010e40:	0550      	lsls	r0, r2, #21
 8010e42:	f57f af0a 	bpl.w	8010c5a <_scanf_float+0x66>
 8010e46:	2f00      	cmp	r7, #0
 8010e48:	f000 80db 	beq.w	8011002 <_scanf_float+0x40e>
 8010e4c:	0591      	lsls	r1, r2, #22
 8010e4e:	bf58      	it	pl
 8010e50:	9902      	ldrpl	r1, [sp, #8]
 8010e52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010e56:	bf58      	it	pl
 8010e58:	1a79      	subpl	r1, r7, r1
 8010e5a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010e5e:	bf58      	it	pl
 8010e60:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010e64:	6022      	str	r2, [r4, #0]
 8010e66:	2700      	movs	r7, #0
 8010e68:	e790      	b.n	8010d8c <_scanf_float+0x198>
 8010e6a:	f04f 0a03 	mov.w	sl, #3
 8010e6e:	e78d      	b.n	8010d8c <_scanf_float+0x198>
 8010e70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010e74:	4649      	mov	r1, r9
 8010e76:	4640      	mov	r0, r8
 8010e78:	4798      	blx	r3
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	f43f aedf 	beq.w	8010c3e <_scanf_float+0x4a>
 8010e80:	e6eb      	b.n	8010c5a <_scanf_float+0x66>
 8010e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e8a:	464a      	mov	r2, r9
 8010e8c:	4640      	mov	r0, r8
 8010e8e:	4798      	blx	r3
 8010e90:	6923      	ldr	r3, [r4, #16]
 8010e92:	3b01      	subs	r3, #1
 8010e94:	6123      	str	r3, [r4, #16]
 8010e96:	e6eb      	b.n	8010c70 <_scanf_float+0x7c>
 8010e98:	1e6b      	subs	r3, r5, #1
 8010e9a:	2b06      	cmp	r3, #6
 8010e9c:	d824      	bhi.n	8010ee8 <_scanf_float+0x2f4>
 8010e9e:	2d02      	cmp	r5, #2
 8010ea0:	d836      	bhi.n	8010f10 <_scanf_float+0x31c>
 8010ea2:	9b01      	ldr	r3, [sp, #4]
 8010ea4:	429e      	cmp	r6, r3
 8010ea6:	f67f aee7 	bls.w	8010c78 <_scanf_float+0x84>
 8010eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010eae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010eb2:	464a      	mov	r2, r9
 8010eb4:	4640      	mov	r0, r8
 8010eb6:	4798      	blx	r3
 8010eb8:	6923      	ldr	r3, [r4, #16]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	6123      	str	r3, [r4, #16]
 8010ebe:	e7f0      	b.n	8010ea2 <_scanf_float+0x2ae>
 8010ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ec4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010ec8:	464a      	mov	r2, r9
 8010eca:	4640      	mov	r0, r8
 8010ecc:	4798      	blx	r3
 8010ece:	6923      	ldr	r3, [r4, #16]
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	6123      	str	r3, [r4, #16]
 8010ed4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ed8:	fa5f fa8a 	uxtb.w	sl, sl
 8010edc:	f1ba 0f02 	cmp.w	sl, #2
 8010ee0:	d1ee      	bne.n	8010ec0 <_scanf_float+0x2cc>
 8010ee2:	3d03      	subs	r5, #3
 8010ee4:	b2ed      	uxtb	r5, r5
 8010ee6:	1b76      	subs	r6, r6, r5
 8010ee8:	6823      	ldr	r3, [r4, #0]
 8010eea:	05da      	lsls	r2, r3, #23
 8010eec:	d530      	bpl.n	8010f50 <_scanf_float+0x35c>
 8010eee:	055b      	lsls	r3, r3, #21
 8010ef0:	d511      	bpl.n	8010f16 <_scanf_float+0x322>
 8010ef2:	9b01      	ldr	r3, [sp, #4]
 8010ef4:	429e      	cmp	r6, r3
 8010ef6:	f67f aebf 	bls.w	8010c78 <_scanf_float+0x84>
 8010efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f02:	464a      	mov	r2, r9
 8010f04:	4640      	mov	r0, r8
 8010f06:	4798      	blx	r3
 8010f08:	6923      	ldr	r3, [r4, #16]
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	6123      	str	r3, [r4, #16]
 8010f0e:	e7f0      	b.n	8010ef2 <_scanf_float+0x2fe>
 8010f10:	46aa      	mov	sl, r5
 8010f12:	46b3      	mov	fp, r6
 8010f14:	e7de      	b.n	8010ed4 <_scanf_float+0x2e0>
 8010f16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010f1a:	6923      	ldr	r3, [r4, #16]
 8010f1c:	2965      	cmp	r1, #101	@ 0x65
 8010f1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f22:	f106 35ff 	add.w	r5, r6, #4294967295
 8010f26:	6123      	str	r3, [r4, #16]
 8010f28:	d00c      	beq.n	8010f44 <_scanf_float+0x350>
 8010f2a:	2945      	cmp	r1, #69	@ 0x45
 8010f2c:	d00a      	beq.n	8010f44 <_scanf_float+0x350>
 8010f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010f32:	464a      	mov	r2, r9
 8010f34:	4640      	mov	r0, r8
 8010f36:	4798      	blx	r3
 8010f38:	6923      	ldr	r3, [r4, #16]
 8010f3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010f3e:	3b01      	subs	r3, #1
 8010f40:	1eb5      	subs	r5, r6, #2
 8010f42:	6123      	str	r3, [r4, #16]
 8010f44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010f48:	464a      	mov	r2, r9
 8010f4a:	4640      	mov	r0, r8
 8010f4c:	4798      	blx	r3
 8010f4e:	462e      	mov	r6, r5
 8010f50:	6822      	ldr	r2, [r4, #0]
 8010f52:	f012 0210 	ands.w	r2, r2, #16
 8010f56:	d001      	beq.n	8010f5c <_scanf_float+0x368>
 8010f58:	2000      	movs	r0, #0
 8010f5a:	e68e      	b.n	8010c7a <_scanf_float+0x86>
 8010f5c:	7032      	strb	r2, [r6, #0]
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010f68:	d125      	bne.n	8010fb6 <_scanf_float+0x3c2>
 8010f6a:	9b02      	ldr	r3, [sp, #8]
 8010f6c:	429f      	cmp	r7, r3
 8010f6e:	d00a      	beq.n	8010f86 <_scanf_float+0x392>
 8010f70:	1bda      	subs	r2, r3, r7
 8010f72:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010f76:	429e      	cmp	r6, r3
 8010f78:	bf28      	it	cs
 8010f7a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010f7e:	4922      	ldr	r1, [pc, #136]	@ (8011008 <_scanf_float+0x414>)
 8010f80:	4630      	mov	r0, r6
 8010f82:	f000 f93d 	bl	8011200 <siprintf>
 8010f86:	9901      	ldr	r1, [sp, #4]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	f002 fc94 	bl	80138b8 <_strtod_r>
 8010f90:	9b03      	ldr	r3, [sp, #12]
 8010f92:	6821      	ldr	r1, [r4, #0]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f011 0f02 	tst.w	r1, #2
 8010f9a:	ec57 6b10 	vmov	r6, r7, d0
 8010f9e:	f103 0204 	add.w	r2, r3, #4
 8010fa2:	d015      	beq.n	8010fd0 <_scanf_float+0x3dc>
 8010fa4:	9903      	ldr	r1, [sp, #12]
 8010fa6:	600a      	str	r2, [r1, #0]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	e9c3 6700 	strd	r6, r7, [r3]
 8010fae:	68e3      	ldr	r3, [r4, #12]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	60e3      	str	r3, [r4, #12]
 8010fb4:	e7d0      	b.n	8010f58 <_scanf_float+0x364>
 8010fb6:	9b04      	ldr	r3, [sp, #16]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d0e4      	beq.n	8010f86 <_scanf_float+0x392>
 8010fbc:	9905      	ldr	r1, [sp, #20]
 8010fbe:	230a      	movs	r3, #10
 8010fc0:	3101      	adds	r1, #1
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	f002 fcf8 	bl	80139b8 <_strtol_r>
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	9e05      	ldr	r6, [sp, #20]
 8010fcc:	1ac2      	subs	r2, r0, r3
 8010fce:	e7d0      	b.n	8010f72 <_scanf_float+0x37e>
 8010fd0:	f011 0f04 	tst.w	r1, #4
 8010fd4:	9903      	ldr	r1, [sp, #12]
 8010fd6:	600a      	str	r2, [r1, #0]
 8010fd8:	d1e6      	bne.n	8010fa8 <_scanf_float+0x3b4>
 8010fda:	681d      	ldr	r5, [r3, #0]
 8010fdc:	4632      	mov	r2, r6
 8010fde:	463b      	mov	r3, r7
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	f7ef fdca 	bl	8000b7c <__aeabi_dcmpun>
 8010fe8:	b128      	cbz	r0, 8010ff6 <_scanf_float+0x402>
 8010fea:	4808      	ldr	r0, [pc, #32]	@ (801100c <_scanf_float+0x418>)
 8010fec:	f000 fa5a 	bl	80114a4 <nanf>
 8010ff0:	ed85 0a00 	vstr	s0, [r5]
 8010ff4:	e7db      	b.n	8010fae <_scanf_float+0x3ba>
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	f7ef fe1d 	bl	8000c38 <__aeabi_d2f>
 8010ffe:	6028      	str	r0, [r5, #0]
 8011000:	e7d5      	b.n	8010fae <_scanf_float+0x3ba>
 8011002:	2700      	movs	r7, #0
 8011004:	e62e      	b.n	8010c64 <_scanf_float+0x70>
 8011006:	bf00      	nop
 8011008:	080155b4 	.word	0x080155b4
 801100c:	080156f5 	.word	0x080156f5

08011010 <std>:
 8011010:	2300      	movs	r3, #0
 8011012:	b510      	push	{r4, lr}
 8011014:	4604      	mov	r4, r0
 8011016:	e9c0 3300 	strd	r3, r3, [r0]
 801101a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801101e:	6083      	str	r3, [r0, #8]
 8011020:	8181      	strh	r1, [r0, #12]
 8011022:	6643      	str	r3, [r0, #100]	@ 0x64
 8011024:	81c2      	strh	r2, [r0, #14]
 8011026:	6183      	str	r3, [r0, #24]
 8011028:	4619      	mov	r1, r3
 801102a:	2208      	movs	r2, #8
 801102c:	305c      	adds	r0, #92	@ 0x5c
 801102e:	f000 f94c 	bl	80112ca <memset>
 8011032:	4b0d      	ldr	r3, [pc, #52]	@ (8011068 <std+0x58>)
 8011034:	6263      	str	r3, [r4, #36]	@ 0x24
 8011036:	4b0d      	ldr	r3, [pc, #52]	@ (801106c <std+0x5c>)
 8011038:	62a3      	str	r3, [r4, #40]	@ 0x28
 801103a:	4b0d      	ldr	r3, [pc, #52]	@ (8011070 <std+0x60>)
 801103c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801103e:	4b0d      	ldr	r3, [pc, #52]	@ (8011074 <std+0x64>)
 8011040:	6323      	str	r3, [r4, #48]	@ 0x30
 8011042:	4b0d      	ldr	r3, [pc, #52]	@ (8011078 <std+0x68>)
 8011044:	6224      	str	r4, [r4, #32]
 8011046:	429c      	cmp	r4, r3
 8011048:	d006      	beq.n	8011058 <std+0x48>
 801104a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801104e:	4294      	cmp	r4, r2
 8011050:	d002      	beq.n	8011058 <std+0x48>
 8011052:	33d0      	adds	r3, #208	@ 0xd0
 8011054:	429c      	cmp	r4, r3
 8011056:	d105      	bne.n	8011064 <std+0x54>
 8011058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801105c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011060:	f000 ba0e 	b.w	8011480 <__retarget_lock_init_recursive>
 8011064:	bd10      	pop	{r4, pc}
 8011066:	bf00      	nop
 8011068:	08011245 	.word	0x08011245
 801106c:	08011267 	.word	0x08011267
 8011070:	0801129f 	.word	0x0801129f
 8011074:	080112c3 	.word	0x080112c3
 8011078:	20004294 	.word	0x20004294

0801107c <stdio_exit_handler>:
 801107c:	4a02      	ldr	r2, [pc, #8]	@ (8011088 <stdio_exit_handler+0xc>)
 801107e:	4903      	ldr	r1, [pc, #12]	@ (801108c <stdio_exit_handler+0x10>)
 8011080:	4803      	ldr	r0, [pc, #12]	@ (8011090 <stdio_exit_handler+0x14>)
 8011082:	f000 b869 	b.w	8011158 <_fwalk_sglue>
 8011086:	bf00      	nop
 8011088:	20000030 	.word	0x20000030
 801108c:	08013d75 	.word	0x08013d75
 8011090:	20000040 	.word	0x20000040

08011094 <cleanup_stdio>:
 8011094:	6841      	ldr	r1, [r0, #4]
 8011096:	4b0c      	ldr	r3, [pc, #48]	@ (80110c8 <cleanup_stdio+0x34>)
 8011098:	4299      	cmp	r1, r3
 801109a:	b510      	push	{r4, lr}
 801109c:	4604      	mov	r4, r0
 801109e:	d001      	beq.n	80110a4 <cleanup_stdio+0x10>
 80110a0:	f002 fe68 	bl	8013d74 <_fflush_r>
 80110a4:	68a1      	ldr	r1, [r4, #8]
 80110a6:	4b09      	ldr	r3, [pc, #36]	@ (80110cc <cleanup_stdio+0x38>)
 80110a8:	4299      	cmp	r1, r3
 80110aa:	d002      	beq.n	80110b2 <cleanup_stdio+0x1e>
 80110ac:	4620      	mov	r0, r4
 80110ae:	f002 fe61 	bl	8013d74 <_fflush_r>
 80110b2:	68e1      	ldr	r1, [r4, #12]
 80110b4:	4b06      	ldr	r3, [pc, #24]	@ (80110d0 <cleanup_stdio+0x3c>)
 80110b6:	4299      	cmp	r1, r3
 80110b8:	d004      	beq.n	80110c4 <cleanup_stdio+0x30>
 80110ba:	4620      	mov	r0, r4
 80110bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110c0:	f002 be58 	b.w	8013d74 <_fflush_r>
 80110c4:	bd10      	pop	{r4, pc}
 80110c6:	bf00      	nop
 80110c8:	20004294 	.word	0x20004294
 80110cc:	200042fc 	.word	0x200042fc
 80110d0:	20004364 	.word	0x20004364

080110d4 <global_stdio_init.part.0>:
 80110d4:	b510      	push	{r4, lr}
 80110d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011104 <global_stdio_init.part.0+0x30>)
 80110d8:	4c0b      	ldr	r4, [pc, #44]	@ (8011108 <global_stdio_init.part.0+0x34>)
 80110da:	4a0c      	ldr	r2, [pc, #48]	@ (801110c <global_stdio_init.part.0+0x38>)
 80110dc:	601a      	str	r2, [r3, #0]
 80110de:	4620      	mov	r0, r4
 80110e0:	2200      	movs	r2, #0
 80110e2:	2104      	movs	r1, #4
 80110e4:	f7ff ff94 	bl	8011010 <std>
 80110e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80110ec:	2201      	movs	r2, #1
 80110ee:	2109      	movs	r1, #9
 80110f0:	f7ff ff8e 	bl	8011010 <std>
 80110f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80110f8:	2202      	movs	r2, #2
 80110fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110fe:	2112      	movs	r1, #18
 8011100:	f7ff bf86 	b.w	8011010 <std>
 8011104:	200043cc 	.word	0x200043cc
 8011108:	20004294 	.word	0x20004294
 801110c:	0801107d 	.word	0x0801107d

08011110 <__sfp_lock_acquire>:
 8011110:	4801      	ldr	r0, [pc, #4]	@ (8011118 <__sfp_lock_acquire+0x8>)
 8011112:	f000 b9b6 	b.w	8011482 <__retarget_lock_acquire_recursive>
 8011116:	bf00      	nop
 8011118:	200043d5 	.word	0x200043d5

0801111c <__sfp_lock_release>:
 801111c:	4801      	ldr	r0, [pc, #4]	@ (8011124 <__sfp_lock_release+0x8>)
 801111e:	f000 b9b1 	b.w	8011484 <__retarget_lock_release_recursive>
 8011122:	bf00      	nop
 8011124:	200043d5 	.word	0x200043d5

08011128 <__sinit>:
 8011128:	b510      	push	{r4, lr}
 801112a:	4604      	mov	r4, r0
 801112c:	f7ff fff0 	bl	8011110 <__sfp_lock_acquire>
 8011130:	6a23      	ldr	r3, [r4, #32]
 8011132:	b11b      	cbz	r3, 801113c <__sinit+0x14>
 8011134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011138:	f7ff bff0 	b.w	801111c <__sfp_lock_release>
 801113c:	4b04      	ldr	r3, [pc, #16]	@ (8011150 <__sinit+0x28>)
 801113e:	6223      	str	r3, [r4, #32]
 8011140:	4b04      	ldr	r3, [pc, #16]	@ (8011154 <__sinit+0x2c>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1f5      	bne.n	8011134 <__sinit+0xc>
 8011148:	f7ff ffc4 	bl	80110d4 <global_stdio_init.part.0>
 801114c:	e7f2      	b.n	8011134 <__sinit+0xc>
 801114e:	bf00      	nop
 8011150:	08011095 	.word	0x08011095
 8011154:	200043cc 	.word	0x200043cc

08011158 <_fwalk_sglue>:
 8011158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801115c:	4607      	mov	r7, r0
 801115e:	4688      	mov	r8, r1
 8011160:	4614      	mov	r4, r2
 8011162:	2600      	movs	r6, #0
 8011164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011168:	f1b9 0901 	subs.w	r9, r9, #1
 801116c:	d505      	bpl.n	801117a <_fwalk_sglue+0x22>
 801116e:	6824      	ldr	r4, [r4, #0]
 8011170:	2c00      	cmp	r4, #0
 8011172:	d1f7      	bne.n	8011164 <_fwalk_sglue+0xc>
 8011174:	4630      	mov	r0, r6
 8011176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801117a:	89ab      	ldrh	r3, [r5, #12]
 801117c:	2b01      	cmp	r3, #1
 801117e:	d907      	bls.n	8011190 <_fwalk_sglue+0x38>
 8011180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011184:	3301      	adds	r3, #1
 8011186:	d003      	beq.n	8011190 <_fwalk_sglue+0x38>
 8011188:	4629      	mov	r1, r5
 801118a:	4638      	mov	r0, r7
 801118c:	47c0      	blx	r8
 801118e:	4306      	orrs	r6, r0
 8011190:	3568      	adds	r5, #104	@ 0x68
 8011192:	e7e9      	b.n	8011168 <_fwalk_sglue+0x10>

08011194 <sniprintf>:
 8011194:	b40c      	push	{r2, r3}
 8011196:	b530      	push	{r4, r5, lr}
 8011198:	4b18      	ldr	r3, [pc, #96]	@ (80111fc <sniprintf+0x68>)
 801119a:	1e0c      	subs	r4, r1, #0
 801119c:	681d      	ldr	r5, [r3, #0]
 801119e:	b09d      	sub	sp, #116	@ 0x74
 80111a0:	da08      	bge.n	80111b4 <sniprintf+0x20>
 80111a2:	238b      	movs	r3, #139	@ 0x8b
 80111a4:	602b      	str	r3, [r5, #0]
 80111a6:	f04f 30ff 	mov.w	r0, #4294967295
 80111aa:	b01d      	add	sp, #116	@ 0x74
 80111ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111b0:	b002      	add	sp, #8
 80111b2:	4770      	bx	lr
 80111b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80111b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80111bc:	f04f 0300 	mov.w	r3, #0
 80111c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80111c2:	bf14      	ite	ne
 80111c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80111c8:	4623      	moveq	r3, r4
 80111ca:	9304      	str	r3, [sp, #16]
 80111cc:	9307      	str	r3, [sp, #28]
 80111ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80111d2:	9002      	str	r0, [sp, #8]
 80111d4:	9006      	str	r0, [sp, #24]
 80111d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80111da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80111dc:	ab21      	add	r3, sp, #132	@ 0x84
 80111de:	a902      	add	r1, sp, #8
 80111e0:	4628      	mov	r0, r5
 80111e2:	9301      	str	r3, [sp, #4]
 80111e4:	f002 fc46 	bl	8013a74 <_svfiprintf_r>
 80111e8:	1c43      	adds	r3, r0, #1
 80111ea:	bfbc      	itt	lt
 80111ec:	238b      	movlt	r3, #139	@ 0x8b
 80111ee:	602b      	strlt	r3, [r5, #0]
 80111f0:	2c00      	cmp	r4, #0
 80111f2:	d0da      	beq.n	80111aa <sniprintf+0x16>
 80111f4:	9b02      	ldr	r3, [sp, #8]
 80111f6:	2200      	movs	r2, #0
 80111f8:	701a      	strb	r2, [r3, #0]
 80111fa:	e7d6      	b.n	80111aa <sniprintf+0x16>
 80111fc:	2000003c 	.word	0x2000003c

08011200 <siprintf>:
 8011200:	b40e      	push	{r1, r2, r3}
 8011202:	b510      	push	{r4, lr}
 8011204:	b09d      	sub	sp, #116	@ 0x74
 8011206:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011208:	9002      	str	r0, [sp, #8]
 801120a:	9006      	str	r0, [sp, #24]
 801120c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011210:	480a      	ldr	r0, [pc, #40]	@ (801123c <siprintf+0x3c>)
 8011212:	9107      	str	r1, [sp, #28]
 8011214:	9104      	str	r1, [sp, #16]
 8011216:	490a      	ldr	r1, [pc, #40]	@ (8011240 <siprintf+0x40>)
 8011218:	f853 2b04 	ldr.w	r2, [r3], #4
 801121c:	9105      	str	r1, [sp, #20]
 801121e:	2400      	movs	r4, #0
 8011220:	a902      	add	r1, sp, #8
 8011222:	6800      	ldr	r0, [r0, #0]
 8011224:	9301      	str	r3, [sp, #4]
 8011226:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011228:	f002 fc24 	bl	8013a74 <_svfiprintf_r>
 801122c:	9b02      	ldr	r3, [sp, #8]
 801122e:	701c      	strb	r4, [r3, #0]
 8011230:	b01d      	add	sp, #116	@ 0x74
 8011232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011236:	b003      	add	sp, #12
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	2000003c 	.word	0x2000003c
 8011240:	ffff0208 	.word	0xffff0208

08011244 <__sread>:
 8011244:	b510      	push	{r4, lr}
 8011246:	460c      	mov	r4, r1
 8011248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801124c:	f000 f8ca 	bl	80113e4 <_read_r>
 8011250:	2800      	cmp	r0, #0
 8011252:	bfab      	itete	ge
 8011254:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011256:	89a3      	ldrhlt	r3, [r4, #12]
 8011258:	181b      	addge	r3, r3, r0
 801125a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801125e:	bfac      	ite	ge
 8011260:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011262:	81a3      	strhlt	r3, [r4, #12]
 8011264:	bd10      	pop	{r4, pc}

08011266 <__swrite>:
 8011266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801126a:	461f      	mov	r7, r3
 801126c:	898b      	ldrh	r3, [r1, #12]
 801126e:	05db      	lsls	r3, r3, #23
 8011270:	4605      	mov	r5, r0
 8011272:	460c      	mov	r4, r1
 8011274:	4616      	mov	r6, r2
 8011276:	d505      	bpl.n	8011284 <__swrite+0x1e>
 8011278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801127c:	2302      	movs	r3, #2
 801127e:	2200      	movs	r2, #0
 8011280:	f000 f89e 	bl	80113c0 <_lseek_r>
 8011284:	89a3      	ldrh	r3, [r4, #12]
 8011286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801128a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801128e:	81a3      	strh	r3, [r4, #12]
 8011290:	4632      	mov	r2, r6
 8011292:	463b      	mov	r3, r7
 8011294:	4628      	mov	r0, r5
 8011296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801129a:	f000 b8b5 	b.w	8011408 <_write_r>

0801129e <__sseek>:
 801129e:	b510      	push	{r4, lr}
 80112a0:	460c      	mov	r4, r1
 80112a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112a6:	f000 f88b 	bl	80113c0 <_lseek_r>
 80112aa:	1c43      	adds	r3, r0, #1
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	bf15      	itete	ne
 80112b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80112b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80112b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80112ba:	81a3      	strheq	r3, [r4, #12]
 80112bc:	bf18      	it	ne
 80112be:	81a3      	strhne	r3, [r4, #12]
 80112c0:	bd10      	pop	{r4, pc}

080112c2 <__sclose>:
 80112c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112c6:	f000 b80d 	b.w	80112e4 <_close_r>

080112ca <memset>:
 80112ca:	4402      	add	r2, r0
 80112cc:	4603      	mov	r3, r0
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d100      	bne.n	80112d4 <memset+0xa>
 80112d2:	4770      	bx	lr
 80112d4:	f803 1b01 	strb.w	r1, [r3], #1
 80112d8:	e7f9      	b.n	80112ce <memset+0x4>
	...

080112dc <_localeconv_r>:
 80112dc:	4800      	ldr	r0, [pc, #0]	@ (80112e0 <_localeconv_r+0x4>)
 80112de:	4770      	bx	lr
 80112e0:	2000017c 	.word	0x2000017c

080112e4 <_close_r>:
 80112e4:	b538      	push	{r3, r4, r5, lr}
 80112e6:	4d06      	ldr	r5, [pc, #24]	@ (8011300 <_close_r+0x1c>)
 80112e8:	2300      	movs	r3, #0
 80112ea:	4604      	mov	r4, r0
 80112ec:	4608      	mov	r0, r1
 80112ee:	602b      	str	r3, [r5, #0]
 80112f0:	f7f1 faba 	bl	8002868 <_close>
 80112f4:	1c43      	adds	r3, r0, #1
 80112f6:	d102      	bne.n	80112fe <_close_r+0x1a>
 80112f8:	682b      	ldr	r3, [r5, #0]
 80112fa:	b103      	cbz	r3, 80112fe <_close_r+0x1a>
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	bd38      	pop	{r3, r4, r5, pc}
 8011300:	200043d0 	.word	0x200043d0

08011304 <_reclaim_reent>:
 8011304:	4b2d      	ldr	r3, [pc, #180]	@ (80113bc <_reclaim_reent+0xb8>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4283      	cmp	r3, r0
 801130a:	b570      	push	{r4, r5, r6, lr}
 801130c:	4604      	mov	r4, r0
 801130e:	d053      	beq.n	80113b8 <_reclaim_reent+0xb4>
 8011310:	69c3      	ldr	r3, [r0, #28]
 8011312:	b31b      	cbz	r3, 801135c <_reclaim_reent+0x58>
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	b163      	cbz	r3, 8011332 <_reclaim_reent+0x2e>
 8011318:	2500      	movs	r5, #0
 801131a:	69e3      	ldr	r3, [r4, #28]
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	5959      	ldr	r1, [r3, r5]
 8011320:	b9b1      	cbnz	r1, 8011350 <_reclaim_reent+0x4c>
 8011322:	3504      	adds	r5, #4
 8011324:	2d80      	cmp	r5, #128	@ 0x80
 8011326:	d1f8      	bne.n	801131a <_reclaim_reent+0x16>
 8011328:	69e3      	ldr	r3, [r4, #28]
 801132a:	4620      	mov	r0, r4
 801132c:	68d9      	ldr	r1, [r3, #12]
 801132e:	f000 ff17 	bl	8012160 <_free_r>
 8011332:	69e3      	ldr	r3, [r4, #28]
 8011334:	6819      	ldr	r1, [r3, #0]
 8011336:	b111      	cbz	r1, 801133e <_reclaim_reent+0x3a>
 8011338:	4620      	mov	r0, r4
 801133a:	f000 ff11 	bl	8012160 <_free_r>
 801133e:	69e3      	ldr	r3, [r4, #28]
 8011340:	689d      	ldr	r5, [r3, #8]
 8011342:	b15d      	cbz	r5, 801135c <_reclaim_reent+0x58>
 8011344:	4629      	mov	r1, r5
 8011346:	4620      	mov	r0, r4
 8011348:	682d      	ldr	r5, [r5, #0]
 801134a:	f000 ff09 	bl	8012160 <_free_r>
 801134e:	e7f8      	b.n	8011342 <_reclaim_reent+0x3e>
 8011350:	680e      	ldr	r6, [r1, #0]
 8011352:	4620      	mov	r0, r4
 8011354:	f000 ff04 	bl	8012160 <_free_r>
 8011358:	4631      	mov	r1, r6
 801135a:	e7e1      	b.n	8011320 <_reclaim_reent+0x1c>
 801135c:	6961      	ldr	r1, [r4, #20]
 801135e:	b111      	cbz	r1, 8011366 <_reclaim_reent+0x62>
 8011360:	4620      	mov	r0, r4
 8011362:	f000 fefd 	bl	8012160 <_free_r>
 8011366:	69e1      	ldr	r1, [r4, #28]
 8011368:	b111      	cbz	r1, 8011370 <_reclaim_reent+0x6c>
 801136a:	4620      	mov	r0, r4
 801136c:	f000 fef8 	bl	8012160 <_free_r>
 8011370:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011372:	b111      	cbz	r1, 801137a <_reclaim_reent+0x76>
 8011374:	4620      	mov	r0, r4
 8011376:	f000 fef3 	bl	8012160 <_free_r>
 801137a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801137c:	b111      	cbz	r1, 8011384 <_reclaim_reent+0x80>
 801137e:	4620      	mov	r0, r4
 8011380:	f000 feee 	bl	8012160 <_free_r>
 8011384:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011386:	b111      	cbz	r1, 801138e <_reclaim_reent+0x8a>
 8011388:	4620      	mov	r0, r4
 801138a:	f000 fee9 	bl	8012160 <_free_r>
 801138e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011390:	b111      	cbz	r1, 8011398 <_reclaim_reent+0x94>
 8011392:	4620      	mov	r0, r4
 8011394:	f000 fee4 	bl	8012160 <_free_r>
 8011398:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801139a:	b111      	cbz	r1, 80113a2 <_reclaim_reent+0x9e>
 801139c:	4620      	mov	r0, r4
 801139e:	f000 fedf 	bl	8012160 <_free_r>
 80113a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80113a4:	b111      	cbz	r1, 80113ac <_reclaim_reent+0xa8>
 80113a6:	4620      	mov	r0, r4
 80113a8:	f000 feda 	bl	8012160 <_free_r>
 80113ac:	6a23      	ldr	r3, [r4, #32]
 80113ae:	b11b      	cbz	r3, 80113b8 <_reclaim_reent+0xb4>
 80113b0:	4620      	mov	r0, r4
 80113b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113b6:	4718      	bx	r3
 80113b8:	bd70      	pop	{r4, r5, r6, pc}
 80113ba:	bf00      	nop
 80113bc:	2000003c 	.word	0x2000003c

080113c0 <_lseek_r>:
 80113c0:	b538      	push	{r3, r4, r5, lr}
 80113c2:	4d07      	ldr	r5, [pc, #28]	@ (80113e0 <_lseek_r+0x20>)
 80113c4:	4604      	mov	r4, r0
 80113c6:	4608      	mov	r0, r1
 80113c8:	4611      	mov	r1, r2
 80113ca:	2200      	movs	r2, #0
 80113cc:	602a      	str	r2, [r5, #0]
 80113ce:	461a      	mov	r2, r3
 80113d0:	f7f1 fa71 	bl	80028b6 <_lseek>
 80113d4:	1c43      	adds	r3, r0, #1
 80113d6:	d102      	bne.n	80113de <_lseek_r+0x1e>
 80113d8:	682b      	ldr	r3, [r5, #0]
 80113da:	b103      	cbz	r3, 80113de <_lseek_r+0x1e>
 80113dc:	6023      	str	r3, [r4, #0]
 80113de:	bd38      	pop	{r3, r4, r5, pc}
 80113e0:	200043d0 	.word	0x200043d0

080113e4 <_read_r>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	4d07      	ldr	r5, [pc, #28]	@ (8011404 <_read_r+0x20>)
 80113e8:	4604      	mov	r4, r0
 80113ea:	4608      	mov	r0, r1
 80113ec:	4611      	mov	r1, r2
 80113ee:	2200      	movs	r2, #0
 80113f0:	602a      	str	r2, [r5, #0]
 80113f2:	461a      	mov	r2, r3
 80113f4:	f7f1 f9ff 	bl	80027f6 <_read>
 80113f8:	1c43      	adds	r3, r0, #1
 80113fa:	d102      	bne.n	8011402 <_read_r+0x1e>
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	b103      	cbz	r3, 8011402 <_read_r+0x1e>
 8011400:	6023      	str	r3, [r4, #0]
 8011402:	bd38      	pop	{r3, r4, r5, pc}
 8011404:	200043d0 	.word	0x200043d0

08011408 <_write_r>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	4d07      	ldr	r5, [pc, #28]	@ (8011428 <_write_r+0x20>)
 801140c:	4604      	mov	r4, r0
 801140e:	4608      	mov	r0, r1
 8011410:	4611      	mov	r1, r2
 8011412:	2200      	movs	r2, #0
 8011414:	602a      	str	r2, [r5, #0]
 8011416:	461a      	mov	r2, r3
 8011418:	f7f1 fa0a 	bl	8002830 <_write>
 801141c:	1c43      	adds	r3, r0, #1
 801141e:	d102      	bne.n	8011426 <_write_r+0x1e>
 8011420:	682b      	ldr	r3, [r5, #0]
 8011422:	b103      	cbz	r3, 8011426 <_write_r+0x1e>
 8011424:	6023      	str	r3, [r4, #0]
 8011426:	bd38      	pop	{r3, r4, r5, pc}
 8011428:	200043d0 	.word	0x200043d0

0801142c <__errno>:
 801142c:	4b01      	ldr	r3, [pc, #4]	@ (8011434 <__errno+0x8>)
 801142e:	6818      	ldr	r0, [r3, #0]
 8011430:	4770      	bx	lr
 8011432:	bf00      	nop
 8011434:	2000003c 	.word	0x2000003c

08011438 <__libc_init_array>:
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	4d0d      	ldr	r5, [pc, #52]	@ (8011470 <__libc_init_array+0x38>)
 801143c:	4c0d      	ldr	r4, [pc, #52]	@ (8011474 <__libc_init_array+0x3c>)
 801143e:	1b64      	subs	r4, r4, r5
 8011440:	10a4      	asrs	r4, r4, #2
 8011442:	2600      	movs	r6, #0
 8011444:	42a6      	cmp	r6, r4
 8011446:	d109      	bne.n	801145c <__libc_init_array+0x24>
 8011448:	4d0b      	ldr	r5, [pc, #44]	@ (8011478 <__libc_init_array+0x40>)
 801144a:	4c0c      	ldr	r4, [pc, #48]	@ (801147c <__libc_init_array+0x44>)
 801144c:	f003 ff3e 	bl	80152cc <_init>
 8011450:	1b64      	subs	r4, r4, r5
 8011452:	10a4      	asrs	r4, r4, #2
 8011454:	2600      	movs	r6, #0
 8011456:	42a6      	cmp	r6, r4
 8011458:	d105      	bne.n	8011466 <__libc_init_array+0x2e>
 801145a:	bd70      	pop	{r4, r5, r6, pc}
 801145c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011460:	4798      	blx	r3
 8011462:	3601      	adds	r6, #1
 8011464:	e7ee      	b.n	8011444 <__libc_init_array+0xc>
 8011466:	f855 3b04 	ldr.w	r3, [r5], #4
 801146a:	4798      	blx	r3
 801146c:	3601      	adds	r6, #1
 801146e:	e7f2      	b.n	8011456 <__libc_init_array+0x1e>
 8011470:	080159cc 	.word	0x080159cc
 8011474:	080159cc 	.word	0x080159cc
 8011478:	080159cc 	.word	0x080159cc
 801147c:	080159d0 	.word	0x080159d0

08011480 <__retarget_lock_init_recursive>:
 8011480:	4770      	bx	lr

08011482 <__retarget_lock_acquire_recursive>:
 8011482:	4770      	bx	lr

08011484 <__retarget_lock_release_recursive>:
 8011484:	4770      	bx	lr

08011486 <memcpy>:
 8011486:	440a      	add	r2, r1
 8011488:	4291      	cmp	r1, r2
 801148a:	f100 33ff 	add.w	r3, r0, #4294967295
 801148e:	d100      	bne.n	8011492 <memcpy+0xc>
 8011490:	4770      	bx	lr
 8011492:	b510      	push	{r4, lr}
 8011494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011498:	f803 4f01 	strb.w	r4, [r3, #1]!
 801149c:	4291      	cmp	r1, r2
 801149e:	d1f9      	bne.n	8011494 <memcpy+0xe>
 80114a0:	bd10      	pop	{r4, pc}
	...

080114a4 <nanf>:
 80114a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80114ac <nanf+0x8>
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	7fc00000 	.word	0x7fc00000

080114b0 <quorem>:
 80114b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b4:	6903      	ldr	r3, [r0, #16]
 80114b6:	690c      	ldr	r4, [r1, #16]
 80114b8:	42a3      	cmp	r3, r4
 80114ba:	4607      	mov	r7, r0
 80114bc:	db7e      	blt.n	80115bc <quorem+0x10c>
 80114be:	3c01      	subs	r4, #1
 80114c0:	f101 0814 	add.w	r8, r1, #20
 80114c4:	00a3      	lsls	r3, r4, #2
 80114c6:	f100 0514 	add.w	r5, r0, #20
 80114ca:	9300      	str	r3, [sp, #0]
 80114cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80114d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114da:	3301      	adds	r3, #1
 80114dc:	429a      	cmp	r2, r3
 80114de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80114e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80114e6:	d32e      	bcc.n	8011546 <quorem+0x96>
 80114e8:	f04f 0a00 	mov.w	sl, #0
 80114ec:	46c4      	mov	ip, r8
 80114ee:	46ae      	mov	lr, r5
 80114f0:	46d3      	mov	fp, sl
 80114f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80114f6:	b298      	uxth	r0, r3
 80114f8:	fb06 a000 	mla	r0, r6, r0, sl
 80114fc:	0c02      	lsrs	r2, r0, #16
 80114fe:	0c1b      	lsrs	r3, r3, #16
 8011500:	fb06 2303 	mla	r3, r6, r3, r2
 8011504:	f8de 2000 	ldr.w	r2, [lr]
 8011508:	b280      	uxth	r0, r0
 801150a:	b292      	uxth	r2, r2
 801150c:	1a12      	subs	r2, r2, r0
 801150e:	445a      	add	r2, fp
 8011510:	f8de 0000 	ldr.w	r0, [lr]
 8011514:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011518:	b29b      	uxth	r3, r3
 801151a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801151e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011522:	b292      	uxth	r2, r2
 8011524:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011528:	45e1      	cmp	r9, ip
 801152a:	f84e 2b04 	str.w	r2, [lr], #4
 801152e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011532:	d2de      	bcs.n	80114f2 <quorem+0x42>
 8011534:	9b00      	ldr	r3, [sp, #0]
 8011536:	58eb      	ldr	r3, [r5, r3]
 8011538:	b92b      	cbnz	r3, 8011546 <quorem+0x96>
 801153a:	9b01      	ldr	r3, [sp, #4]
 801153c:	3b04      	subs	r3, #4
 801153e:	429d      	cmp	r5, r3
 8011540:	461a      	mov	r2, r3
 8011542:	d32f      	bcc.n	80115a4 <quorem+0xf4>
 8011544:	613c      	str	r4, [r7, #16]
 8011546:	4638      	mov	r0, r7
 8011548:	f001 f9c6 	bl	80128d8 <__mcmp>
 801154c:	2800      	cmp	r0, #0
 801154e:	db25      	blt.n	801159c <quorem+0xec>
 8011550:	4629      	mov	r1, r5
 8011552:	2000      	movs	r0, #0
 8011554:	f858 2b04 	ldr.w	r2, [r8], #4
 8011558:	f8d1 c000 	ldr.w	ip, [r1]
 801155c:	fa1f fe82 	uxth.w	lr, r2
 8011560:	fa1f f38c 	uxth.w	r3, ip
 8011564:	eba3 030e 	sub.w	r3, r3, lr
 8011568:	4403      	add	r3, r0
 801156a:	0c12      	lsrs	r2, r2, #16
 801156c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011570:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011574:	b29b      	uxth	r3, r3
 8011576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801157a:	45c1      	cmp	r9, r8
 801157c:	f841 3b04 	str.w	r3, [r1], #4
 8011580:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011584:	d2e6      	bcs.n	8011554 <quorem+0xa4>
 8011586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801158a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801158e:	b922      	cbnz	r2, 801159a <quorem+0xea>
 8011590:	3b04      	subs	r3, #4
 8011592:	429d      	cmp	r5, r3
 8011594:	461a      	mov	r2, r3
 8011596:	d30b      	bcc.n	80115b0 <quorem+0x100>
 8011598:	613c      	str	r4, [r7, #16]
 801159a:	3601      	adds	r6, #1
 801159c:	4630      	mov	r0, r6
 801159e:	b003      	add	sp, #12
 80115a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a4:	6812      	ldr	r2, [r2, #0]
 80115a6:	3b04      	subs	r3, #4
 80115a8:	2a00      	cmp	r2, #0
 80115aa:	d1cb      	bne.n	8011544 <quorem+0x94>
 80115ac:	3c01      	subs	r4, #1
 80115ae:	e7c6      	b.n	801153e <quorem+0x8e>
 80115b0:	6812      	ldr	r2, [r2, #0]
 80115b2:	3b04      	subs	r3, #4
 80115b4:	2a00      	cmp	r2, #0
 80115b6:	d1ef      	bne.n	8011598 <quorem+0xe8>
 80115b8:	3c01      	subs	r4, #1
 80115ba:	e7ea      	b.n	8011592 <quorem+0xe2>
 80115bc:	2000      	movs	r0, #0
 80115be:	e7ee      	b.n	801159e <quorem+0xee>

080115c0 <_dtoa_r>:
 80115c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c4:	69c7      	ldr	r7, [r0, #28]
 80115c6:	b097      	sub	sp, #92	@ 0x5c
 80115c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80115cc:	ec55 4b10 	vmov	r4, r5, d0
 80115d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80115d2:	9107      	str	r1, [sp, #28]
 80115d4:	4681      	mov	r9, r0
 80115d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80115d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80115da:	b97f      	cbnz	r7, 80115fc <_dtoa_r+0x3c>
 80115dc:	2010      	movs	r0, #16
 80115de:	f000 fe09 	bl	80121f4 <malloc>
 80115e2:	4602      	mov	r2, r0
 80115e4:	f8c9 001c 	str.w	r0, [r9, #28]
 80115e8:	b920      	cbnz	r0, 80115f4 <_dtoa_r+0x34>
 80115ea:	4ba9      	ldr	r3, [pc, #676]	@ (8011890 <_dtoa_r+0x2d0>)
 80115ec:	21ef      	movs	r1, #239	@ 0xef
 80115ee:	48a9      	ldr	r0, [pc, #676]	@ (8011894 <_dtoa_r+0x2d4>)
 80115f0:	f002 fc2e 	bl	8013e50 <__assert_func>
 80115f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80115f8:	6007      	str	r7, [r0, #0]
 80115fa:	60c7      	str	r7, [r0, #12]
 80115fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011600:	6819      	ldr	r1, [r3, #0]
 8011602:	b159      	cbz	r1, 801161c <_dtoa_r+0x5c>
 8011604:	685a      	ldr	r2, [r3, #4]
 8011606:	604a      	str	r2, [r1, #4]
 8011608:	2301      	movs	r3, #1
 801160a:	4093      	lsls	r3, r2
 801160c:	608b      	str	r3, [r1, #8]
 801160e:	4648      	mov	r0, r9
 8011610:	f000 fee6 	bl	80123e0 <_Bfree>
 8011614:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011618:	2200      	movs	r2, #0
 801161a:	601a      	str	r2, [r3, #0]
 801161c:	1e2b      	subs	r3, r5, #0
 801161e:	bfb9      	ittee	lt
 8011620:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011624:	9305      	strlt	r3, [sp, #20]
 8011626:	2300      	movge	r3, #0
 8011628:	6033      	strge	r3, [r6, #0]
 801162a:	9f05      	ldr	r7, [sp, #20]
 801162c:	4b9a      	ldr	r3, [pc, #616]	@ (8011898 <_dtoa_r+0x2d8>)
 801162e:	bfbc      	itt	lt
 8011630:	2201      	movlt	r2, #1
 8011632:	6032      	strlt	r2, [r6, #0]
 8011634:	43bb      	bics	r3, r7
 8011636:	d112      	bne.n	801165e <_dtoa_r+0x9e>
 8011638:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801163a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801163e:	6013      	str	r3, [r2, #0]
 8011640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011644:	4323      	orrs	r3, r4
 8011646:	f000 855a 	beq.w	80120fe <_dtoa_r+0xb3e>
 801164a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801164c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80118ac <_dtoa_r+0x2ec>
 8011650:	2b00      	cmp	r3, #0
 8011652:	f000 855c 	beq.w	801210e <_dtoa_r+0xb4e>
 8011656:	f10a 0303 	add.w	r3, sl, #3
 801165a:	f000 bd56 	b.w	801210a <_dtoa_r+0xb4a>
 801165e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011662:	2200      	movs	r2, #0
 8011664:	ec51 0b17 	vmov	r0, r1, d7
 8011668:	2300      	movs	r3, #0
 801166a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801166e:	f7ef fa53 	bl	8000b18 <__aeabi_dcmpeq>
 8011672:	4680      	mov	r8, r0
 8011674:	b158      	cbz	r0, 801168e <_dtoa_r+0xce>
 8011676:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011678:	2301      	movs	r3, #1
 801167a:	6013      	str	r3, [r2, #0]
 801167c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801167e:	b113      	cbz	r3, 8011686 <_dtoa_r+0xc6>
 8011680:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011682:	4b86      	ldr	r3, [pc, #536]	@ (801189c <_dtoa_r+0x2dc>)
 8011684:	6013      	str	r3, [r2, #0]
 8011686:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80118b0 <_dtoa_r+0x2f0>
 801168a:	f000 bd40 	b.w	801210e <_dtoa_r+0xb4e>
 801168e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011692:	aa14      	add	r2, sp, #80	@ 0x50
 8011694:	a915      	add	r1, sp, #84	@ 0x54
 8011696:	4648      	mov	r0, r9
 8011698:	f001 fa3e 	bl	8012b18 <__d2b>
 801169c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80116a0:	9002      	str	r0, [sp, #8]
 80116a2:	2e00      	cmp	r6, #0
 80116a4:	d078      	beq.n	8011798 <_dtoa_r+0x1d8>
 80116a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80116ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80116b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80116b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80116bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80116c0:	4619      	mov	r1, r3
 80116c2:	2200      	movs	r2, #0
 80116c4:	4b76      	ldr	r3, [pc, #472]	@ (80118a0 <_dtoa_r+0x2e0>)
 80116c6:	f7ee fe07 	bl	80002d8 <__aeabi_dsub>
 80116ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8011878 <_dtoa_r+0x2b8>)
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	f7ee ffba 	bl	8000648 <__aeabi_dmul>
 80116d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011880 <_dtoa_r+0x2c0>)
 80116d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116da:	f7ee fdff 	bl	80002dc <__adddf3>
 80116de:	4604      	mov	r4, r0
 80116e0:	4630      	mov	r0, r6
 80116e2:	460d      	mov	r5, r1
 80116e4:	f7ee ff46 	bl	8000574 <__aeabi_i2d>
 80116e8:	a367      	add	r3, pc, #412	@ (adr r3, 8011888 <_dtoa_r+0x2c8>)
 80116ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ee:	f7ee ffab 	bl	8000648 <__aeabi_dmul>
 80116f2:	4602      	mov	r2, r0
 80116f4:	460b      	mov	r3, r1
 80116f6:	4620      	mov	r0, r4
 80116f8:	4629      	mov	r1, r5
 80116fa:	f7ee fdef 	bl	80002dc <__adddf3>
 80116fe:	4604      	mov	r4, r0
 8011700:	460d      	mov	r5, r1
 8011702:	f7ef fa51 	bl	8000ba8 <__aeabi_d2iz>
 8011706:	2200      	movs	r2, #0
 8011708:	4607      	mov	r7, r0
 801170a:	2300      	movs	r3, #0
 801170c:	4620      	mov	r0, r4
 801170e:	4629      	mov	r1, r5
 8011710:	f7ef fa0c 	bl	8000b2c <__aeabi_dcmplt>
 8011714:	b140      	cbz	r0, 8011728 <_dtoa_r+0x168>
 8011716:	4638      	mov	r0, r7
 8011718:	f7ee ff2c 	bl	8000574 <__aeabi_i2d>
 801171c:	4622      	mov	r2, r4
 801171e:	462b      	mov	r3, r5
 8011720:	f7ef f9fa 	bl	8000b18 <__aeabi_dcmpeq>
 8011724:	b900      	cbnz	r0, 8011728 <_dtoa_r+0x168>
 8011726:	3f01      	subs	r7, #1
 8011728:	2f16      	cmp	r7, #22
 801172a:	d852      	bhi.n	80117d2 <_dtoa_r+0x212>
 801172c:	4b5d      	ldr	r3, [pc, #372]	@ (80118a4 <_dtoa_r+0x2e4>)
 801172e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011736:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801173a:	f7ef f9f7 	bl	8000b2c <__aeabi_dcmplt>
 801173e:	2800      	cmp	r0, #0
 8011740:	d049      	beq.n	80117d6 <_dtoa_r+0x216>
 8011742:	3f01      	subs	r7, #1
 8011744:	2300      	movs	r3, #0
 8011746:	9310      	str	r3, [sp, #64]	@ 0x40
 8011748:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801174a:	1b9b      	subs	r3, r3, r6
 801174c:	1e5a      	subs	r2, r3, #1
 801174e:	bf45      	ittet	mi
 8011750:	f1c3 0301 	rsbmi	r3, r3, #1
 8011754:	9300      	strmi	r3, [sp, #0]
 8011756:	2300      	movpl	r3, #0
 8011758:	2300      	movmi	r3, #0
 801175a:	9206      	str	r2, [sp, #24]
 801175c:	bf54      	ite	pl
 801175e:	9300      	strpl	r3, [sp, #0]
 8011760:	9306      	strmi	r3, [sp, #24]
 8011762:	2f00      	cmp	r7, #0
 8011764:	db39      	blt.n	80117da <_dtoa_r+0x21a>
 8011766:	9b06      	ldr	r3, [sp, #24]
 8011768:	970d      	str	r7, [sp, #52]	@ 0x34
 801176a:	443b      	add	r3, r7
 801176c:	9306      	str	r3, [sp, #24]
 801176e:	2300      	movs	r3, #0
 8011770:	9308      	str	r3, [sp, #32]
 8011772:	9b07      	ldr	r3, [sp, #28]
 8011774:	2b09      	cmp	r3, #9
 8011776:	d863      	bhi.n	8011840 <_dtoa_r+0x280>
 8011778:	2b05      	cmp	r3, #5
 801177a:	bfc4      	itt	gt
 801177c:	3b04      	subgt	r3, #4
 801177e:	9307      	strgt	r3, [sp, #28]
 8011780:	9b07      	ldr	r3, [sp, #28]
 8011782:	f1a3 0302 	sub.w	r3, r3, #2
 8011786:	bfcc      	ite	gt
 8011788:	2400      	movgt	r4, #0
 801178a:	2401      	movle	r4, #1
 801178c:	2b03      	cmp	r3, #3
 801178e:	d863      	bhi.n	8011858 <_dtoa_r+0x298>
 8011790:	e8df f003 	tbb	[pc, r3]
 8011794:	2b375452 	.word	0x2b375452
 8011798:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801179c:	441e      	add	r6, r3
 801179e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80117a2:	2b20      	cmp	r3, #32
 80117a4:	bfc1      	itttt	gt
 80117a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80117aa:	409f      	lslgt	r7, r3
 80117ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80117b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80117b4:	bfd6      	itet	le
 80117b6:	f1c3 0320 	rsble	r3, r3, #32
 80117ba:	ea47 0003 	orrgt.w	r0, r7, r3
 80117be:	fa04 f003 	lslle.w	r0, r4, r3
 80117c2:	f7ee fec7 	bl	8000554 <__aeabi_ui2d>
 80117c6:	2201      	movs	r2, #1
 80117c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80117cc:	3e01      	subs	r6, #1
 80117ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80117d0:	e776      	b.n	80116c0 <_dtoa_r+0x100>
 80117d2:	2301      	movs	r3, #1
 80117d4:	e7b7      	b.n	8011746 <_dtoa_r+0x186>
 80117d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80117d8:	e7b6      	b.n	8011748 <_dtoa_r+0x188>
 80117da:	9b00      	ldr	r3, [sp, #0]
 80117dc:	1bdb      	subs	r3, r3, r7
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	427b      	negs	r3, r7
 80117e2:	9308      	str	r3, [sp, #32]
 80117e4:	2300      	movs	r3, #0
 80117e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80117e8:	e7c3      	b.n	8011772 <_dtoa_r+0x1b2>
 80117ea:	2301      	movs	r3, #1
 80117ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80117ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117f0:	eb07 0b03 	add.w	fp, r7, r3
 80117f4:	f10b 0301 	add.w	r3, fp, #1
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	9303      	str	r3, [sp, #12]
 80117fc:	bfb8      	it	lt
 80117fe:	2301      	movlt	r3, #1
 8011800:	e006      	b.n	8011810 <_dtoa_r+0x250>
 8011802:	2301      	movs	r3, #1
 8011804:	9309      	str	r3, [sp, #36]	@ 0x24
 8011806:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011808:	2b00      	cmp	r3, #0
 801180a:	dd28      	ble.n	801185e <_dtoa_r+0x29e>
 801180c:	469b      	mov	fp, r3
 801180e:	9303      	str	r3, [sp, #12]
 8011810:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011814:	2100      	movs	r1, #0
 8011816:	2204      	movs	r2, #4
 8011818:	f102 0514 	add.w	r5, r2, #20
 801181c:	429d      	cmp	r5, r3
 801181e:	d926      	bls.n	801186e <_dtoa_r+0x2ae>
 8011820:	6041      	str	r1, [r0, #4]
 8011822:	4648      	mov	r0, r9
 8011824:	f000 fd9c 	bl	8012360 <_Balloc>
 8011828:	4682      	mov	sl, r0
 801182a:	2800      	cmp	r0, #0
 801182c:	d142      	bne.n	80118b4 <_dtoa_r+0x2f4>
 801182e:	4b1e      	ldr	r3, [pc, #120]	@ (80118a8 <_dtoa_r+0x2e8>)
 8011830:	4602      	mov	r2, r0
 8011832:	f240 11af 	movw	r1, #431	@ 0x1af
 8011836:	e6da      	b.n	80115ee <_dtoa_r+0x2e>
 8011838:	2300      	movs	r3, #0
 801183a:	e7e3      	b.n	8011804 <_dtoa_r+0x244>
 801183c:	2300      	movs	r3, #0
 801183e:	e7d5      	b.n	80117ec <_dtoa_r+0x22c>
 8011840:	2401      	movs	r4, #1
 8011842:	2300      	movs	r3, #0
 8011844:	9307      	str	r3, [sp, #28]
 8011846:	9409      	str	r4, [sp, #36]	@ 0x24
 8011848:	f04f 3bff 	mov.w	fp, #4294967295
 801184c:	2200      	movs	r2, #0
 801184e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011852:	2312      	movs	r3, #18
 8011854:	920c      	str	r2, [sp, #48]	@ 0x30
 8011856:	e7db      	b.n	8011810 <_dtoa_r+0x250>
 8011858:	2301      	movs	r3, #1
 801185a:	9309      	str	r3, [sp, #36]	@ 0x24
 801185c:	e7f4      	b.n	8011848 <_dtoa_r+0x288>
 801185e:	f04f 0b01 	mov.w	fp, #1
 8011862:	f8cd b00c 	str.w	fp, [sp, #12]
 8011866:	465b      	mov	r3, fp
 8011868:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801186c:	e7d0      	b.n	8011810 <_dtoa_r+0x250>
 801186e:	3101      	adds	r1, #1
 8011870:	0052      	lsls	r2, r2, #1
 8011872:	e7d1      	b.n	8011818 <_dtoa_r+0x258>
 8011874:	f3af 8000 	nop.w
 8011878:	636f4361 	.word	0x636f4361
 801187c:	3fd287a7 	.word	0x3fd287a7
 8011880:	8b60c8b3 	.word	0x8b60c8b3
 8011884:	3fc68a28 	.word	0x3fc68a28
 8011888:	509f79fb 	.word	0x509f79fb
 801188c:	3fd34413 	.word	0x3fd34413
 8011890:	080155c6 	.word	0x080155c6
 8011894:	080155dd 	.word	0x080155dd
 8011898:	7ff00000 	.word	0x7ff00000
 801189c:	08015591 	.word	0x08015591
 80118a0:	3ff80000 	.word	0x3ff80000
 80118a4:	08015790 	.word	0x08015790
 80118a8:	08015635 	.word	0x08015635
 80118ac:	080155c2 	.word	0x080155c2
 80118b0:	08015590 	.word	0x08015590
 80118b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80118b8:	6018      	str	r0, [r3, #0]
 80118ba:	9b03      	ldr	r3, [sp, #12]
 80118bc:	2b0e      	cmp	r3, #14
 80118be:	f200 80a1 	bhi.w	8011a04 <_dtoa_r+0x444>
 80118c2:	2c00      	cmp	r4, #0
 80118c4:	f000 809e 	beq.w	8011a04 <_dtoa_r+0x444>
 80118c8:	2f00      	cmp	r7, #0
 80118ca:	dd33      	ble.n	8011934 <_dtoa_r+0x374>
 80118cc:	4b9c      	ldr	r3, [pc, #624]	@ (8011b40 <_dtoa_r+0x580>)
 80118ce:	f007 020f 	and.w	r2, r7, #15
 80118d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118d6:	ed93 7b00 	vldr	d7, [r3]
 80118da:	05f8      	lsls	r0, r7, #23
 80118dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80118e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80118e4:	d516      	bpl.n	8011914 <_dtoa_r+0x354>
 80118e6:	4b97      	ldr	r3, [pc, #604]	@ (8011b44 <_dtoa_r+0x584>)
 80118e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80118ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80118f0:	f7ee ffd4 	bl	800089c <__aeabi_ddiv>
 80118f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118f8:	f004 040f 	and.w	r4, r4, #15
 80118fc:	2603      	movs	r6, #3
 80118fe:	4d91      	ldr	r5, [pc, #580]	@ (8011b44 <_dtoa_r+0x584>)
 8011900:	b954      	cbnz	r4, 8011918 <_dtoa_r+0x358>
 8011902:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801190a:	f7ee ffc7 	bl	800089c <__aeabi_ddiv>
 801190e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011912:	e028      	b.n	8011966 <_dtoa_r+0x3a6>
 8011914:	2602      	movs	r6, #2
 8011916:	e7f2      	b.n	80118fe <_dtoa_r+0x33e>
 8011918:	07e1      	lsls	r1, r4, #31
 801191a:	d508      	bpl.n	801192e <_dtoa_r+0x36e>
 801191c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011920:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011924:	f7ee fe90 	bl	8000648 <__aeabi_dmul>
 8011928:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801192c:	3601      	adds	r6, #1
 801192e:	1064      	asrs	r4, r4, #1
 8011930:	3508      	adds	r5, #8
 8011932:	e7e5      	b.n	8011900 <_dtoa_r+0x340>
 8011934:	f000 80af 	beq.w	8011a96 <_dtoa_r+0x4d6>
 8011938:	427c      	negs	r4, r7
 801193a:	4b81      	ldr	r3, [pc, #516]	@ (8011b40 <_dtoa_r+0x580>)
 801193c:	4d81      	ldr	r5, [pc, #516]	@ (8011b44 <_dtoa_r+0x584>)
 801193e:	f004 020f 	and.w	r2, r4, #15
 8011942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801194e:	f7ee fe7b 	bl	8000648 <__aeabi_dmul>
 8011952:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011956:	1124      	asrs	r4, r4, #4
 8011958:	2300      	movs	r3, #0
 801195a:	2602      	movs	r6, #2
 801195c:	2c00      	cmp	r4, #0
 801195e:	f040 808f 	bne.w	8011a80 <_dtoa_r+0x4c0>
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1d3      	bne.n	801190e <_dtoa_r+0x34e>
 8011966:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011968:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801196c:	2b00      	cmp	r3, #0
 801196e:	f000 8094 	beq.w	8011a9a <_dtoa_r+0x4da>
 8011972:	4b75      	ldr	r3, [pc, #468]	@ (8011b48 <_dtoa_r+0x588>)
 8011974:	2200      	movs	r2, #0
 8011976:	4620      	mov	r0, r4
 8011978:	4629      	mov	r1, r5
 801197a:	f7ef f8d7 	bl	8000b2c <__aeabi_dcmplt>
 801197e:	2800      	cmp	r0, #0
 8011980:	f000 808b 	beq.w	8011a9a <_dtoa_r+0x4da>
 8011984:	9b03      	ldr	r3, [sp, #12]
 8011986:	2b00      	cmp	r3, #0
 8011988:	f000 8087 	beq.w	8011a9a <_dtoa_r+0x4da>
 801198c:	f1bb 0f00 	cmp.w	fp, #0
 8011990:	dd34      	ble.n	80119fc <_dtoa_r+0x43c>
 8011992:	4620      	mov	r0, r4
 8011994:	4b6d      	ldr	r3, [pc, #436]	@ (8011b4c <_dtoa_r+0x58c>)
 8011996:	2200      	movs	r2, #0
 8011998:	4629      	mov	r1, r5
 801199a:	f7ee fe55 	bl	8000648 <__aeabi_dmul>
 801199e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119a2:	f107 38ff 	add.w	r8, r7, #4294967295
 80119a6:	3601      	adds	r6, #1
 80119a8:	465c      	mov	r4, fp
 80119aa:	4630      	mov	r0, r6
 80119ac:	f7ee fde2 	bl	8000574 <__aeabi_i2d>
 80119b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119b4:	f7ee fe48 	bl	8000648 <__aeabi_dmul>
 80119b8:	4b65      	ldr	r3, [pc, #404]	@ (8011b50 <_dtoa_r+0x590>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	f7ee fc8e 	bl	80002dc <__adddf3>
 80119c0:	4605      	mov	r5, r0
 80119c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80119c6:	2c00      	cmp	r4, #0
 80119c8:	d16a      	bne.n	8011aa0 <_dtoa_r+0x4e0>
 80119ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119ce:	4b61      	ldr	r3, [pc, #388]	@ (8011b54 <_dtoa_r+0x594>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	f7ee fc81 	bl	80002d8 <__aeabi_dsub>
 80119d6:	4602      	mov	r2, r0
 80119d8:	460b      	mov	r3, r1
 80119da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80119de:	462a      	mov	r2, r5
 80119e0:	4633      	mov	r3, r6
 80119e2:	f7ef f8c1 	bl	8000b68 <__aeabi_dcmpgt>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	f040 8298 	bne.w	8011f1c <_dtoa_r+0x95c>
 80119ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119f0:	462a      	mov	r2, r5
 80119f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80119f6:	f7ef f899 	bl	8000b2c <__aeabi_dcmplt>
 80119fa:	bb38      	cbnz	r0, 8011a4c <_dtoa_r+0x48c>
 80119fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011a00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011a04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	f2c0 8157 	blt.w	8011cba <_dtoa_r+0x6fa>
 8011a0c:	2f0e      	cmp	r7, #14
 8011a0e:	f300 8154 	bgt.w	8011cba <_dtoa_r+0x6fa>
 8011a12:	4b4b      	ldr	r3, [pc, #300]	@ (8011b40 <_dtoa_r+0x580>)
 8011a14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011a18:	ed93 7b00 	vldr	d7, [r3]
 8011a1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	ed8d 7b00 	vstr	d7, [sp]
 8011a24:	f280 80e5 	bge.w	8011bf2 <_dtoa_r+0x632>
 8011a28:	9b03      	ldr	r3, [sp, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f300 80e1 	bgt.w	8011bf2 <_dtoa_r+0x632>
 8011a30:	d10c      	bne.n	8011a4c <_dtoa_r+0x48c>
 8011a32:	4b48      	ldr	r3, [pc, #288]	@ (8011b54 <_dtoa_r+0x594>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	ec51 0b17 	vmov	r0, r1, d7
 8011a3a:	f7ee fe05 	bl	8000648 <__aeabi_dmul>
 8011a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a42:	f7ef f887 	bl	8000b54 <__aeabi_dcmpge>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	f000 8266 	beq.w	8011f18 <_dtoa_r+0x958>
 8011a4c:	2400      	movs	r4, #0
 8011a4e:	4625      	mov	r5, r4
 8011a50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a52:	4656      	mov	r6, sl
 8011a54:	ea6f 0803 	mvn.w	r8, r3
 8011a58:	2700      	movs	r7, #0
 8011a5a:	4621      	mov	r1, r4
 8011a5c:	4648      	mov	r0, r9
 8011a5e:	f000 fcbf 	bl	80123e0 <_Bfree>
 8011a62:	2d00      	cmp	r5, #0
 8011a64:	f000 80bd 	beq.w	8011be2 <_dtoa_r+0x622>
 8011a68:	b12f      	cbz	r7, 8011a76 <_dtoa_r+0x4b6>
 8011a6a:	42af      	cmp	r7, r5
 8011a6c:	d003      	beq.n	8011a76 <_dtoa_r+0x4b6>
 8011a6e:	4639      	mov	r1, r7
 8011a70:	4648      	mov	r0, r9
 8011a72:	f000 fcb5 	bl	80123e0 <_Bfree>
 8011a76:	4629      	mov	r1, r5
 8011a78:	4648      	mov	r0, r9
 8011a7a:	f000 fcb1 	bl	80123e0 <_Bfree>
 8011a7e:	e0b0      	b.n	8011be2 <_dtoa_r+0x622>
 8011a80:	07e2      	lsls	r2, r4, #31
 8011a82:	d505      	bpl.n	8011a90 <_dtoa_r+0x4d0>
 8011a84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a88:	f7ee fdde 	bl	8000648 <__aeabi_dmul>
 8011a8c:	3601      	adds	r6, #1
 8011a8e:	2301      	movs	r3, #1
 8011a90:	1064      	asrs	r4, r4, #1
 8011a92:	3508      	adds	r5, #8
 8011a94:	e762      	b.n	801195c <_dtoa_r+0x39c>
 8011a96:	2602      	movs	r6, #2
 8011a98:	e765      	b.n	8011966 <_dtoa_r+0x3a6>
 8011a9a:	9c03      	ldr	r4, [sp, #12]
 8011a9c:	46b8      	mov	r8, r7
 8011a9e:	e784      	b.n	80119aa <_dtoa_r+0x3ea>
 8011aa0:	4b27      	ldr	r3, [pc, #156]	@ (8011b40 <_dtoa_r+0x580>)
 8011aa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011aa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011aa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011aac:	4454      	add	r4, sl
 8011aae:	2900      	cmp	r1, #0
 8011ab0:	d054      	beq.n	8011b5c <_dtoa_r+0x59c>
 8011ab2:	4929      	ldr	r1, [pc, #164]	@ (8011b58 <_dtoa_r+0x598>)
 8011ab4:	2000      	movs	r0, #0
 8011ab6:	f7ee fef1 	bl	800089c <__aeabi_ddiv>
 8011aba:	4633      	mov	r3, r6
 8011abc:	462a      	mov	r2, r5
 8011abe:	f7ee fc0b 	bl	80002d8 <__aeabi_dsub>
 8011ac2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011ac6:	4656      	mov	r6, sl
 8011ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011acc:	f7ef f86c 	bl	8000ba8 <__aeabi_d2iz>
 8011ad0:	4605      	mov	r5, r0
 8011ad2:	f7ee fd4f 	bl	8000574 <__aeabi_i2d>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	460b      	mov	r3, r1
 8011ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ade:	f7ee fbfb 	bl	80002d8 <__aeabi_dsub>
 8011ae2:	3530      	adds	r5, #48	@ 0x30
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011aec:	f806 5b01 	strb.w	r5, [r6], #1
 8011af0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011af4:	f7ef f81a 	bl	8000b2c <__aeabi_dcmplt>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d172      	bne.n	8011be2 <_dtoa_r+0x622>
 8011afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b00:	4911      	ldr	r1, [pc, #68]	@ (8011b48 <_dtoa_r+0x588>)
 8011b02:	2000      	movs	r0, #0
 8011b04:	f7ee fbe8 	bl	80002d8 <__aeabi_dsub>
 8011b08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011b0c:	f7ef f80e 	bl	8000b2c <__aeabi_dcmplt>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	f040 80b4 	bne.w	8011c7e <_dtoa_r+0x6be>
 8011b16:	42a6      	cmp	r6, r4
 8011b18:	f43f af70 	beq.w	80119fc <_dtoa_r+0x43c>
 8011b1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011b20:	4b0a      	ldr	r3, [pc, #40]	@ (8011b4c <_dtoa_r+0x58c>)
 8011b22:	2200      	movs	r2, #0
 8011b24:	f7ee fd90 	bl	8000648 <__aeabi_dmul>
 8011b28:	4b08      	ldr	r3, [pc, #32]	@ (8011b4c <_dtoa_r+0x58c>)
 8011b2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011b2e:	2200      	movs	r2, #0
 8011b30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b34:	f7ee fd88 	bl	8000648 <__aeabi_dmul>
 8011b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b3c:	e7c4      	b.n	8011ac8 <_dtoa_r+0x508>
 8011b3e:	bf00      	nop
 8011b40:	08015790 	.word	0x08015790
 8011b44:	08015768 	.word	0x08015768
 8011b48:	3ff00000 	.word	0x3ff00000
 8011b4c:	40240000 	.word	0x40240000
 8011b50:	401c0000 	.word	0x401c0000
 8011b54:	40140000 	.word	0x40140000
 8011b58:	3fe00000 	.word	0x3fe00000
 8011b5c:	4631      	mov	r1, r6
 8011b5e:	4628      	mov	r0, r5
 8011b60:	f7ee fd72 	bl	8000648 <__aeabi_dmul>
 8011b64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011b68:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011b6a:	4656      	mov	r6, sl
 8011b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b70:	f7ef f81a 	bl	8000ba8 <__aeabi_d2iz>
 8011b74:	4605      	mov	r5, r0
 8011b76:	f7ee fcfd 	bl	8000574 <__aeabi_i2d>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b82:	f7ee fba9 	bl	80002d8 <__aeabi_dsub>
 8011b86:	3530      	adds	r5, #48	@ 0x30
 8011b88:	f806 5b01 	strb.w	r5, [r6], #1
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	42a6      	cmp	r6, r4
 8011b92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011b96:	f04f 0200 	mov.w	r2, #0
 8011b9a:	d124      	bne.n	8011be6 <_dtoa_r+0x626>
 8011b9c:	4baf      	ldr	r3, [pc, #700]	@ (8011e5c <_dtoa_r+0x89c>)
 8011b9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011ba2:	f7ee fb9b 	bl	80002dc <__adddf3>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bae:	f7ee ffdb 	bl	8000b68 <__aeabi_dcmpgt>
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	d163      	bne.n	8011c7e <_dtoa_r+0x6be>
 8011bb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011bba:	49a8      	ldr	r1, [pc, #672]	@ (8011e5c <_dtoa_r+0x89c>)
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	f7ee fb8b 	bl	80002d8 <__aeabi_dsub>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bca:	f7ee ffaf 	bl	8000b2c <__aeabi_dcmplt>
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	f43f af14 	beq.w	80119fc <_dtoa_r+0x43c>
 8011bd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011bd6:	1e73      	subs	r3, r6, #1
 8011bd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011bda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011bde:	2b30      	cmp	r3, #48	@ 0x30
 8011be0:	d0f8      	beq.n	8011bd4 <_dtoa_r+0x614>
 8011be2:	4647      	mov	r7, r8
 8011be4:	e03b      	b.n	8011c5e <_dtoa_r+0x69e>
 8011be6:	4b9e      	ldr	r3, [pc, #632]	@ (8011e60 <_dtoa_r+0x8a0>)
 8011be8:	f7ee fd2e 	bl	8000648 <__aeabi_dmul>
 8011bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bf0:	e7bc      	b.n	8011b6c <_dtoa_r+0x5ac>
 8011bf2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011bf6:	4656      	mov	r6, sl
 8011bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	4629      	mov	r1, r5
 8011c00:	f7ee fe4c 	bl	800089c <__aeabi_ddiv>
 8011c04:	f7ee ffd0 	bl	8000ba8 <__aeabi_d2iz>
 8011c08:	4680      	mov	r8, r0
 8011c0a:	f7ee fcb3 	bl	8000574 <__aeabi_i2d>
 8011c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c12:	f7ee fd19 	bl	8000648 <__aeabi_dmul>
 8011c16:	4602      	mov	r2, r0
 8011c18:	460b      	mov	r3, r1
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011c22:	f7ee fb59 	bl	80002d8 <__aeabi_dsub>
 8011c26:	f806 4b01 	strb.w	r4, [r6], #1
 8011c2a:	9d03      	ldr	r5, [sp, #12]
 8011c2c:	eba6 040a 	sub.w	r4, r6, sl
 8011c30:	42a5      	cmp	r5, r4
 8011c32:	4602      	mov	r2, r0
 8011c34:	460b      	mov	r3, r1
 8011c36:	d133      	bne.n	8011ca0 <_dtoa_r+0x6e0>
 8011c38:	f7ee fb50 	bl	80002dc <__adddf3>
 8011c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c40:	4604      	mov	r4, r0
 8011c42:	460d      	mov	r5, r1
 8011c44:	f7ee ff90 	bl	8000b68 <__aeabi_dcmpgt>
 8011c48:	b9c0      	cbnz	r0, 8011c7c <_dtoa_r+0x6bc>
 8011c4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c4e:	4620      	mov	r0, r4
 8011c50:	4629      	mov	r1, r5
 8011c52:	f7ee ff61 	bl	8000b18 <__aeabi_dcmpeq>
 8011c56:	b110      	cbz	r0, 8011c5e <_dtoa_r+0x69e>
 8011c58:	f018 0f01 	tst.w	r8, #1
 8011c5c:	d10e      	bne.n	8011c7c <_dtoa_r+0x6bc>
 8011c5e:	9902      	ldr	r1, [sp, #8]
 8011c60:	4648      	mov	r0, r9
 8011c62:	f000 fbbd 	bl	80123e0 <_Bfree>
 8011c66:	2300      	movs	r3, #0
 8011c68:	7033      	strb	r3, [r6, #0]
 8011c6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011c6c:	3701      	adds	r7, #1
 8011c6e:	601f      	str	r7, [r3, #0]
 8011c70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	f000 824b 	beq.w	801210e <_dtoa_r+0xb4e>
 8011c78:	601e      	str	r6, [r3, #0]
 8011c7a:	e248      	b.n	801210e <_dtoa_r+0xb4e>
 8011c7c:	46b8      	mov	r8, r7
 8011c7e:	4633      	mov	r3, r6
 8011c80:	461e      	mov	r6, r3
 8011c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c86:	2a39      	cmp	r2, #57	@ 0x39
 8011c88:	d106      	bne.n	8011c98 <_dtoa_r+0x6d8>
 8011c8a:	459a      	cmp	sl, r3
 8011c8c:	d1f8      	bne.n	8011c80 <_dtoa_r+0x6c0>
 8011c8e:	2230      	movs	r2, #48	@ 0x30
 8011c90:	f108 0801 	add.w	r8, r8, #1
 8011c94:	f88a 2000 	strb.w	r2, [sl]
 8011c98:	781a      	ldrb	r2, [r3, #0]
 8011c9a:	3201      	adds	r2, #1
 8011c9c:	701a      	strb	r2, [r3, #0]
 8011c9e:	e7a0      	b.n	8011be2 <_dtoa_r+0x622>
 8011ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8011e60 <_dtoa_r+0x8a0>)
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f7ee fcd0 	bl	8000648 <__aeabi_dmul>
 8011ca8:	2200      	movs	r2, #0
 8011caa:	2300      	movs	r3, #0
 8011cac:	4604      	mov	r4, r0
 8011cae:	460d      	mov	r5, r1
 8011cb0:	f7ee ff32 	bl	8000b18 <__aeabi_dcmpeq>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d09f      	beq.n	8011bf8 <_dtoa_r+0x638>
 8011cb8:	e7d1      	b.n	8011c5e <_dtoa_r+0x69e>
 8011cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cbc:	2a00      	cmp	r2, #0
 8011cbe:	f000 80ea 	beq.w	8011e96 <_dtoa_r+0x8d6>
 8011cc2:	9a07      	ldr	r2, [sp, #28]
 8011cc4:	2a01      	cmp	r2, #1
 8011cc6:	f300 80cd 	bgt.w	8011e64 <_dtoa_r+0x8a4>
 8011cca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011ccc:	2a00      	cmp	r2, #0
 8011cce:	f000 80c1 	beq.w	8011e54 <_dtoa_r+0x894>
 8011cd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011cd6:	9c08      	ldr	r4, [sp, #32]
 8011cd8:	9e00      	ldr	r6, [sp, #0]
 8011cda:	9a00      	ldr	r2, [sp, #0]
 8011cdc:	441a      	add	r2, r3
 8011cde:	9200      	str	r2, [sp, #0]
 8011ce0:	9a06      	ldr	r2, [sp, #24]
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	441a      	add	r2, r3
 8011ce6:	4648      	mov	r0, r9
 8011ce8:	9206      	str	r2, [sp, #24]
 8011cea:	f000 fc77 	bl	80125dc <__i2b>
 8011cee:	4605      	mov	r5, r0
 8011cf0:	b166      	cbz	r6, 8011d0c <_dtoa_r+0x74c>
 8011cf2:	9b06      	ldr	r3, [sp, #24]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	dd09      	ble.n	8011d0c <_dtoa_r+0x74c>
 8011cf8:	42b3      	cmp	r3, r6
 8011cfa:	9a00      	ldr	r2, [sp, #0]
 8011cfc:	bfa8      	it	ge
 8011cfe:	4633      	movge	r3, r6
 8011d00:	1ad2      	subs	r2, r2, r3
 8011d02:	9200      	str	r2, [sp, #0]
 8011d04:	9a06      	ldr	r2, [sp, #24]
 8011d06:	1af6      	subs	r6, r6, r3
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	9306      	str	r3, [sp, #24]
 8011d0c:	9b08      	ldr	r3, [sp, #32]
 8011d0e:	b30b      	cbz	r3, 8011d54 <_dtoa_r+0x794>
 8011d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f000 80c6 	beq.w	8011ea4 <_dtoa_r+0x8e4>
 8011d18:	2c00      	cmp	r4, #0
 8011d1a:	f000 80c0 	beq.w	8011e9e <_dtoa_r+0x8de>
 8011d1e:	4629      	mov	r1, r5
 8011d20:	4622      	mov	r2, r4
 8011d22:	4648      	mov	r0, r9
 8011d24:	f000 fd12 	bl	801274c <__pow5mult>
 8011d28:	9a02      	ldr	r2, [sp, #8]
 8011d2a:	4601      	mov	r1, r0
 8011d2c:	4605      	mov	r5, r0
 8011d2e:	4648      	mov	r0, r9
 8011d30:	f000 fc6a 	bl	8012608 <__multiply>
 8011d34:	9902      	ldr	r1, [sp, #8]
 8011d36:	4680      	mov	r8, r0
 8011d38:	4648      	mov	r0, r9
 8011d3a:	f000 fb51 	bl	80123e0 <_Bfree>
 8011d3e:	9b08      	ldr	r3, [sp, #32]
 8011d40:	1b1b      	subs	r3, r3, r4
 8011d42:	9308      	str	r3, [sp, #32]
 8011d44:	f000 80b1 	beq.w	8011eaa <_dtoa_r+0x8ea>
 8011d48:	9a08      	ldr	r2, [sp, #32]
 8011d4a:	4641      	mov	r1, r8
 8011d4c:	4648      	mov	r0, r9
 8011d4e:	f000 fcfd 	bl	801274c <__pow5mult>
 8011d52:	9002      	str	r0, [sp, #8]
 8011d54:	2101      	movs	r1, #1
 8011d56:	4648      	mov	r0, r9
 8011d58:	f000 fc40 	bl	80125dc <__i2b>
 8011d5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d5e:	4604      	mov	r4, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f000 81d8 	beq.w	8012116 <_dtoa_r+0xb56>
 8011d66:	461a      	mov	r2, r3
 8011d68:	4601      	mov	r1, r0
 8011d6a:	4648      	mov	r0, r9
 8011d6c:	f000 fcee 	bl	801274c <__pow5mult>
 8011d70:	9b07      	ldr	r3, [sp, #28]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	4604      	mov	r4, r0
 8011d76:	f300 809f 	bgt.w	8011eb8 <_dtoa_r+0x8f8>
 8011d7a:	9b04      	ldr	r3, [sp, #16]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	f040 8097 	bne.w	8011eb0 <_dtoa_r+0x8f0>
 8011d82:	9b05      	ldr	r3, [sp, #20]
 8011d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	f040 8093 	bne.w	8011eb4 <_dtoa_r+0x8f4>
 8011d8e:	9b05      	ldr	r3, [sp, #20]
 8011d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011d94:	0d1b      	lsrs	r3, r3, #20
 8011d96:	051b      	lsls	r3, r3, #20
 8011d98:	b133      	cbz	r3, 8011da8 <_dtoa_r+0x7e8>
 8011d9a:	9b00      	ldr	r3, [sp, #0]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	9300      	str	r3, [sp, #0]
 8011da0:	9b06      	ldr	r3, [sp, #24]
 8011da2:	3301      	adds	r3, #1
 8011da4:	9306      	str	r3, [sp, #24]
 8011da6:	2301      	movs	r3, #1
 8011da8:	9308      	str	r3, [sp, #32]
 8011daa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	f000 81b8 	beq.w	8012122 <_dtoa_r+0xb62>
 8011db2:	6923      	ldr	r3, [r4, #16]
 8011db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011db8:	6918      	ldr	r0, [r3, #16]
 8011dba:	f000 fbc3 	bl	8012544 <__hi0bits>
 8011dbe:	f1c0 0020 	rsb	r0, r0, #32
 8011dc2:	9b06      	ldr	r3, [sp, #24]
 8011dc4:	4418      	add	r0, r3
 8011dc6:	f010 001f 	ands.w	r0, r0, #31
 8011dca:	f000 8082 	beq.w	8011ed2 <_dtoa_r+0x912>
 8011dce:	f1c0 0320 	rsb	r3, r0, #32
 8011dd2:	2b04      	cmp	r3, #4
 8011dd4:	dd73      	ble.n	8011ebe <_dtoa_r+0x8fe>
 8011dd6:	9b00      	ldr	r3, [sp, #0]
 8011dd8:	f1c0 001c 	rsb	r0, r0, #28
 8011ddc:	4403      	add	r3, r0
 8011dde:	9300      	str	r3, [sp, #0]
 8011de0:	9b06      	ldr	r3, [sp, #24]
 8011de2:	4403      	add	r3, r0
 8011de4:	4406      	add	r6, r0
 8011de6:	9306      	str	r3, [sp, #24]
 8011de8:	9b00      	ldr	r3, [sp, #0]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	dd05      	ble.n	8011dfa <_dtoa_r+0x83a>
 8011dee:	9902      	ldr	r1, [sp, #8]
 8011df0:	461a      	mov	r2, r3
 8011df2:	4648      	mov	r0, r9
 8011df4:	f000 fd04 	bl	8012800 <__lshift>
 8011df8:	9002      	str	r0, [sp, #8]
 8011dfa:	9b06      	ldr	r3, [sp, #24]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	dd05      	ble.n	8011e0c <_dtoa_r+0x84c>
 8011e00:	4621      	mov	r1, r4
 8011e02:	461a      	mov	r2, r3
 8011e04:	4648      	mov	r0, r9
 8011e06:	f000 fcfb 	bl	8012800 <__lshift>
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d061      	beq.n	8011ed6 <_dtoa_r+0x916>
 8011e12:	9802      	ldr	r0, [sp, #8]
 8011e14:	4621      	mov	r1, r4
 8011e16:	f000 fd5f 	bl	80128d8 <__mcmp>
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	da5b      	bge.n	8011ed6 <_dtoa_r+0x916>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	9902      	ldr	r1, [sp, #8]
 8011e22:	220a      	movs	r2, #10
 8011e24:	4648      	mov	r0, r9
 8011e26:	f000 fafd 	bl	8012424 <__multadd>
 8011e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e2c:	9002      	str	r0, [sp, #8]
 8011e2e:	f107 38ff 	add.w	r8, r7, #4294967295
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f000 8177 	beq.w	8012126 <_dtoa_r+0xb66>
 8011e38:	4629      	mov	r1, r5
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	220a      	movs	r2, #10
 8011e3e:	4648      	mov	r0, r9
 8011e40:	f000 faf0 	bl	8012424 <__multadd>
 8011e44:	f1bb 0f00 	cmp.w	fp, #0
 8011e48:	4605      	mov	r5, r0
 8011e4a:	dc6f      	bgt.n	8011f2c <_dtoa_r+0x96c>
 8011e4c:	9b07      	ldr	r3, [sp, #28]
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	dc49      	bgt.n	8011ee6 <_dtoa_r+0x926>
 8011e52:	e06b      	b.n	8011f2c <_dtoa_r+0x96c>
 8011e54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011e56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011e5a:	e73c      	b.n	8011cd6 <_dtoa_r+0x716>
 8011e5c:	3fe00000 	.word	0x3fe00000
 8011e60:	40240000 	.word	0x40240000
 8011e64:	9b03      	ldr	r3, [sp, #12]
 8011e66:	1e5c      	subs	r4, r3, #1
 8011e68:	9b08      	ldr	r3, [sp, #32]
 8011e6a:	42a3      	cmp	r3, r4
 8011e6c:	db09      	blt.n	8011e82 <_dtoa_r+0x8c2>
 8011e6e:	1b1c      	subs	r4, r3, r4
 8011e70:	9b03      	ldr	r3, [sp, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f6bf af30 	bge.w	8011cd8 <_dtoa_r+0x718>
 8011e78:	9b00      	ldr	r3, [sp, #0]
 8011e7a:	9a03      	ldr	r2, [sp, #12]
 8011e7c:	1a9e      	subs	r6, r3, r2
 8011e7e:	2300      	movs	r3, #0
 8011e80:	e72b      	b.n	8011cda <_dtoa_r+0x71a>
 8011e82:	9b08      	ldr	r3, [sp, #32]
 8011e84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011e86:	9408      	str	r4, [sp, #32]
 8011e88:	1ae3      	subs	r3, r4, r3
 8011e8a:	441a      	add	r2, r3
 8011e8c:	9e00      	ldr	r6, [sp, #0]
 8011e8e:	9b03      	ldr	r3, [sp, #12]
 8011e90:	920d      	str	r2, [sp, #52]	@ 0x34
 8011e92:	2400      	movs	r4, #0
 8011e94:	e721      	b.n	8011cda <_dtoa_r+0x71a>
 8011e96:	9c08      	ldr	r4, [sp, #32]
 8011e98:	9e00      	ldr	r6, [sp, #0]
 8011e9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011e9c:	e728      	b.n	8011cf0 <_dtoa_r+0x730>
 8011e9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011ea2:	e751      	b.n	8011d48 <_dtoa_r+0x788>
 8011ea4:	9a08      	ldr	r2, [sp, #32]
 8011ea6:	9902      	ldr	r1, [sp, #8]
 8011ea8:	e750      	b.n	8011d4c <_dtoa_r+0x78c>
 8011eaa:	f8cd 8008 	str.w	r8, [sp, #8]
 8011eae:	e751      	b.n	8011d54 <_dtoa_r+0x794>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	e779      	b.n	8011da8 <_dtoa_r+0x7e8>
 8011eb4:	9b04      	ldr	r3, [sp, #16]
 8011eb6:	e777      	b.n	8011da8 <_dtoa_r+0x7e8>
 8011eb8:	2300      	movs	r3, #0
 8011eba:	9308      	str	r3, [sp, #32]
 8011ebc:	e779      	b.n	8011db2 <_dtoa_r+0x7f2>
 8011ebe:	d093      	beq.n	8011de8 <_dtoa_r+0x828>
 8011ec0:	9a00      	ldr	r2, [sp, #0]
 8011ec2:	331c      	adds	r3, #28
 8011ec4:	441a      	add	r2, r3
 8011ec6:	9200      	str	r2, [sp, #0]
 8011ec8:	9a06      	ldr	r2, [sp, #24]
 8011eca:	441a      	add	r2, r3
 8011ecc:	441e      	add	r6, r3
 8011ece:	9206      	str	r2, [sp, #24]
 8011ed0:	e78a      	b.n	8011de8 <_dtoa_r+0x828>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	e7f4      	b.n	8011ec0 <_dtoa_r+0x900>
 8011ed6:	9b03      	ldr	r3, [sp, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	46b8      	mov	r8, r7
 8011edc:	dc20      	bgt.n	8011f20 <_dtoa_r+0x960>
 8011ede:	469b      	mov	fp, r3
 8011ee0:	9b07      	ldr	r3, [sp, #28]
 8011ee2:	2b02      	cmp	r3, #2
 8011ee4:	dd1e      	ble.n	8011f24 <_dtoa_r+0x964>
 8011ee6:	f1bb 0f00 	cmp.w	fp, #0
 8011eea:	f47f adb1 	bne.w	8011a50 <_dtoa_r+0x490>
 8011eee:	4621      	mov	r1, r4
 8011ef0:	465b      	mov	r3, fp
 8011ef2:	2205      	movs	r2, #5
 8011ef4:	4648      	mov	r0, r9
 8011ef6:	f000 fa95 	bl	8012424 <__multadd>
 8011efa:	4601      	mov	r1, r0
 8011efc:	4604      	mov	r4, r0
 8011efe:	9802      	ldr	r0, [sp, #8]
 8011f00:	f000 fcea 	bl	80128d8 <__mcmp>
 8011f04:	2800      	cmp	r0, #0
 8011f06:	f77f ada3 	ble.w	8011a50 <_dtoa_r+0x490>
 8011f0a:	4656      	mov	r6, sl
 8011f0c:	2331      	movs	r3, #49	@ 0x31
 8011f0e:	f806 3b01 	strb.w	r3, [r6], #1
 8011f12:	f108 0801 	add.w	r8, r8, #1
 8011f16:	e59f      	b.n	8011a58 <_dtoa_r+0x498>
 8011f18:	9c03      	ldr	r4, [sp, #12]
 8011f1a:	46b8      	mov	r8, r7
 8011f1c:	4625      	mov	r5, r4
 8011f1e:	e7f4      	b.n	8011f0a <_dtoa_r+0x94a>
 8011f20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	f000 8101 	beq.w	801212e <_dtoa_r+0xb6e>
 8011f2c:	2e00      	cmp	r6, #0
 8011f2e:	dd05      	ble.n	8011f3c <_dtoa_r+0x97c>
 8011f30:	4629      	mov	r1, r5
 8011f32:	4632      	mov	r2, r6
 8011f34:	4648      	mov	r0, r9
 8011f36:	f000 fc63 	bl	8012800 <__lshift>
 8011f3a:	4605      	mov	r5, r0
 8011f3c:	9b08      	ldr	r3, [sp, #32]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d05c      	beq.n	8011ffc <_dtoa_r+0xa3c>
 8011f42:	6869      	ldr	r1, [r5, #4]
 8011f44:	4648      	mov	r0, r9
 8011f46:	f000 fa0b 	bl	8012360 <_Balloc>
 8011f4a:	4606      	mov	r6, r0
 8011f4c:	b928      	cbnz	r0, 8011f5a <_dtoa_r+0x99a>
 8011f4e:	4b82      	ldr	r3, [pc, #520]	@ (8012158 <_dtoa_r+0xb98>)
 8011f50:	4602      	mov	r2, r0
 8011f52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011f56:	f7ff bb4a 	b.w	80115ee <_dtoa_r+0x2e>
 8011f5a:	692a      	ldr	r2, [r5, #16]
 8011f5c:	3202      	adds	r2, #2
 8011f5e:	0092      	lsls	r2, r2, #2
 8011f60:	f105 010c 	add.w	r1, r5, #12
 8011f64:	300c      	adds	r0, #12
 8011f66:	f7ff fa8e 	bl	8011486 <memcpy>
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	4631      	mov	r1, r6
 8011f6e:	4648      	mov	r0, r9
 8011f70:	f000 fc46 	bl	8012800 <__lshift>
 8011f74:	f10a 0301 	add.w	r3, sl, #1
 8011f78:	9300      	str	r3, [sp, #0]
 8011f7a:	eb0a 030b 	add.w	r3, sl, fp
 8011f7e:	9308      	str	r3, [sp, #32]
 8011f80:	9b04      	ldr	r3, [sp, #16]
 8011f82:	f003 0301 	and.w	r3, r3, #1
 8011f86:	462f      	mov	r7, r5
 8011f88:	9306      	str	r3, [sp, #24]
 8011f8a:	4605      	mov	r5, r0
 8011f8c:	9b00      	ldr	r3, [sp, #0]
 8011f8e:	9802      	ldr	r0, [sp, #8]
 8011f90:	4621      	mov	r1, r4
 8011f92:	f103 3bff 	add.w	fp, r3, #4294967295
 8011f96:	f7ff fa8b 	bl	80114b0 <quorem>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	3330      	adds	r3, #48	@ 0x30
 8011f9e:	9003      	str	r0, [sp, #12]
 8011fa0:	4639      	mov	r1, r7
 8011fa2:	9802      	ldr	r0, [sp, #8]
 8011fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fa6:	f000 fc97 	bl	80128d8 <__mcmp>
 8011faa:	462a      	mov	r2, r5
 8011fac:	9004      	str	r0, [sp, #16]
 8011fae:	4621      	mov	r1, r4
 8011fb0:	4648      	mov	r0, r9
 8011fb2:	f000 fcad 	bl	8012910 <__mdiff>
 8011fb6:	68c2      	ldr	r2, [r0, #12]
 8011fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fba:	4606      	mov	r6, r0
 8011fbc:	bb02      	cbnz	r2, 8012000 <_dtoa_r+0xa40>
 8011fbe:	4601      	mov	r1, r0
 8011fc0:	9802      	ldr	r0, [sp, #8]
 8011fc2:	f000 fc89 	bl	80128d8 <__mcmp>
 8011fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc8:	4602      	mov	r2, r0
 8011fca:	4631      	mov	r1, r6
 8011fcc:	4648      	mov	r0, r9
 8011fce:	920c      	str	r2, [sp, #48]	@ 0x30
 8011fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fd2:	f000 fa05 	bl	80123e0 <_Bfree>
 8011fd6:	9b07      	ldr	r3, [sp, #28]
 8011fd8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011fda:	9e00      	ldr	r6, [sp, #0]
 8011fdc:	ea42 0103 	orr.w	r1, r2, r3
 8011fe0:	9b06      	ldr	r3, [sp, #24]
 8011fe2:	4319      	orrs	r1, r3
 8011fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fe6:	d10d      	bne.n	8012004 <_dtoa_r+0xa44>
 8011fe8:	2b39      	cmp	r3, #57	@ 0x39
 8011fea:	d027      	beq.n	801203c <_dtoa_r+0xa7c>
 8011fec:	9a04      	ldr	r2, [sp, #16]
 8011fee:	2a00      	cmp	r2, #0
 8011ff0:	dd01      	ble.n	8011ff6 <_dtoa_r+0xa36>
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	3331      	adds	r3, #49	@ 0x31
 8011ff6:	f88b 3000 	strb.w	r3, [fp]
 8011ffa:	e52e      	b.n	8011a5a <_dtoa_r+0x49a>
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	e7b9      	b.n	8011f74 <_dtoa_r+0x9b4>
 8012000:	2201      	movs	r2, #1
 8012002:	e7e2      	b.n	8011fca <_dtoa_r+0xa0a>
 8012004:	9904      	ldr	r1, [sp, #16]
 8012006:	2900      	cmp	r1, #0
 8012008:	db04      	blt.n	8012014 <_dtoa_r+0xa54>
 801200a:	9807      	ldr	r0, [sp, #28]
 801200c:	4301      	orrs	r1, r0
 801200e:	9806      	ldr	r0, [sp, #24]
 8012010:	4301      	orrs	r1, r0
 8012012:	d120      	bne.n	8012056 <_dtoa_r+0xa96>
 8012014:	2a00      	cmp	r2, #0
 8012016:	ddee      	ble.n	8011ff6 <_dtoa_r+0xa36>
 8012018:	9902      	ldr	r1, [sp, #8]
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	2201      	movs	r2, #1
 801201e:	4648      	mov	r0, r9
 8012020:	f000 fbee 	bl	8012800 <__lshift>
 8012024:	4621      	mov	r1, r4
 8012026:	9002      	str	r0, [sp, #8]
 8012028:	f000 fc56 	bl	80128d8 <__mcmp>
 801202c:	2800      	cmp	r0, #0
 801202e:	9b00      	ldr	r3, [sp, #0]
 8012030:	dc02      	bgt.n	8012038 <_dtoa_r+0xa78>
 8012032:	d1e0      	bne.n	8011ff6 <_dtoa_r+0xa36>
 8012034:	07da      	lsls	r2, r3, #31
 8012036:	d5de      	bpl.n	8011ff6 <_dtoa_r+0xa36>
 8012038:	2b39      	cmp	r3, #57	@ 0x39
 801203a:	d1da      	bne.n	8011ff2 <_dtoa_r+0xa32>
 801203c:	2339      	movs	r3, #57	@ 0x39
 801203e:	f88b 3000 	strb.w	r3, [fp]
 8012042:	4633      	mov	r3, r6
 8012044:	461e      	mov	r6, r3
 8012046:	3b01      	subs	r3, #1
 8012048:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801204c:	2a39      	cmp	r2, #57	@ 0x39
 801204e:	d04e      	beq.n	80120ee <_dtoa_r+0xb2e>
 8012050:	3201      	adds	r2, #1
 8012052:	701a      	strb	r2, [r3, #0]
 8012054:	e501      	b.n	8011a5a <_dtoa_r+0x49a>
 8012056:	2a00      	cmp	r2, #0
 8012058:	dd03      	ble.n	8012062 <_dtoa_r+0xaa2>
 801205a:	2b39      	cmp	r3, #57	@ 0x39
 801205c:	d0ee      	beq.n	801203c <_dtoa_r+0xa7c>
 801205e:	3301      	adds	r3, #1
 8012060:	e7c9      	b.n	8011ff6 <_dtoa_r+0xa36>
 8012062:	9a00      	ldr	r2, [sp, #0]
 8012064:	9908      	ldr	r1, [sp, #32]
 8012066:	f802 3c01 	strb.w	r3, [r2, #-1]
 801206a:	428a      	cmp	r2, r1
 801206c:	d028      	beq.n	80120c0 <_dtoa_r+0xb00>
 801206e:	9902      	ldr	r1, [sp, #8]
 8012070:	2300      	movs	r3, #0
 8012072:	220a      	movs	r2, #10
 8012074:	4648      	mov	r0, r9
 8012076:	f000 f9d5 	bl	8012424 <__multadd>
 801207a:	42af      	cmp	r7, r5
 801207c:	9002      	str	r0, [sp, #8]
 801207e:	f04f 0300 	mov.w	r3, #0
 8012082:	f04f 020a 	mov.w	r2, #10
 8012086:	4639      	mov	r1, r7
 8012088:	4648      	mov	r0, r9
 801208a:	d107      	bne.n	801209c <_dtoa_r+0xadc>
 801208c:	f000 f9ca 	bl	8012424 <__multadd>
 8012090:	4607      	mov	r7, r0
 8012092:	4605      	mov	r5, r0
 8012094:	9b00      	ldr	r3, [sp, #0]
 8012096:	3301      	adds	r3, #1
 8012098:	9300      	str	r3, [sp, #0]
 801209a:	e777      	b.n	8011f8c <_dtoa_r+0x9cc>
 801209c:	f000 f9c2 	bl	8012424 <__multadd>
 80120a0:	4629      	mov	r1, r5
 80120a2:	4607      	mov	r7, r0
 80120a4:	2300      	movs	r3, #0
 80120a6:	220a      	movs	r2, #10
 80120a8:	4648      	mov	r0, r9
 80120aa:	f000 f9bb 	bl	8012424 <__multadd>
 80120ae:	4605      	mov	r5, r0
 80120b0:	e7f0      	b.n	8012094 <_dtoa_r+0xad4>
 80120b2:	f1bb 0f00 	cmp.w	fp, #0
 80120b6:	bfcc      	ite	gt
 80120b8:	465e      	movgt	r6, fp
 80120ba:	2601      	movle	r6, #1
 80120bc:	4456      	add	r6, sl
 80120be:	2700      	movs	r7, #0
 80120c0:	9902      	ldr	r1, [sp, #8]
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	2201      	movs	r2, #1
 80120c6:	4648      	mov	r0, r9
 80120c8:	f000 fb9a 	bl	8012800 <__lshift>
 80120cc:	4621      	mov	r1, r4
 80120ce:	9002      	str	r0, [sp, #8]
 80120d0:	f000 fc02 	bl	80128d8 <__mcmp>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	dcb4      	bgt.n	8012042 <_dtoa_r+0xa82>
 80120d8:	d102      	bne.n	80120e0 <_dtoa_r+0xb20>
 80120da:	9b00      	ldr	r3, [sp, #0]
 80120dc:	07db      	lsls	r3, r3, #31
 80120de:	d4b0      	bmi.n	8012042 <_dtoa_r+0xa82>
 80120e0:	4633      	mov	r3, r6
 80120e2:	461e      	mov	r6, r3
 80120e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120e8:	2a30      	cmp	r2, #48	@ 0x30
 80120ea:	d0fa      	beq.n	80120e2 <_dtoa_r+0xb22>
 80120ec:	e4b5      	b.n	8011a5a <_dtoa_r+0x49a>
 80120ee:	459a      	cmp	sl, r3
 80120f0:	d1a8      	bne.n	8012044 <_dtoa_r+0xa84>
 80120f2:	2331      	movs	r3, #49	@ 0x31
 80120f4:	f108 0801 	add.w	r8, r8, #1
 80120f8:	f88a 3000 	strb.w	r3, [sl]
 80120fc:	e4ad      	b.n	8011a5a <_dtoa_r+0x49a>
 80120fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012100:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801215c <_dtoa_r+0xb9c>
 8012104:	b11b      	cbz	r3, 801210e <_dtoa_r+0xb4e>
 8012106:	f10a 0308 	add.w	r3, sl, #8
 801210a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801210c:	6013      	str	r3, [r2, #0]
 801210e:	4650      	mov	r0, sl
 8012110:	b017      	add	sp, #92	@ 0x5c
 8012112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012116:	9b07      	ldr	r3, [sp, #28]
 8012118:	2b01      	cmp	r3, #1
 801211a:	f77f ae2e 	ble.w	8011d7a <_dtoa_r+0x7ba>
 801211e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012120:	9308      	str	r3, [sp, #32]
 8012122:	2001      	movs	r0, #1
 8012124:	e64d      	b.n	8011dc2 <_dtoa_r+0x802>
 8012126:	f1bb 0f00 	cmp.w	fp, #0
 801212a:	f77f aed9 	ble.w	8011ee0 <_dtoa_r+0x920>
 801212e:	4656      	mov	r6, sl
 8012130:	9802      	ldr	r0, [sp, #8]
 8012132:	4621      	mov	r1, r4
 8012134:	f7ff f9bc 	bl	80114b0 <quorem>
 8012138:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801213c:	f806 3b01 	strb.w	r3, [r6], #1
 8012140:	eba6 020a 	sub.w	r2, r6, sl
 8012144:	4593      	cmp	fp, r2
 8012146:	ddb4      	ble.n	80120b2 <_dtoa_r+0xaf2>
 8012148:	9902      	ldr	r1, [sp, #8]
 801214a:	2300      	movs	r3, #0
 801214c:	220a      	movs	r2, #10
 801214e:	4648      	mov	r0, r9
 8012150:	f000 f968 	bl	8012424 <__multadd>
 8012154:	9002      	str	r0, [sp, #8]
 8012156:	e7eb      	b.n	8012130 <_dtoa_r+0xb70>
 8012158:	08015635 	.word	0x08015635
 801215c:	080155b9 	.word	0x080155b9

08012160 <_free_r>:
 8012160:	b538      	push	{r3, r4, r5, lr}
 8012162:	4605      	mov	r5, r0
 8012164:	2900      	cmp	r1, #0
 8012166:	d041      	beq.n	80121ec <_free_r+0x8c>
 8012168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801216c:	1f0c      	subs	r4, r1, #4
 801216e:	2b00      	cmp	r3, #0
 8012170:	bfb8      	it	lt
 8012172:	18e4      	addlt	r4, r4, r3
 8012174:	f000 f8e8 	bl	8012348 <__malloc_lock>
 8012178:	4a1d      	ldr	r2, [pc, #116]	@ (80121f0 <_free_r+0x90>)
 801217a:	6813      	ldr	r3, [r2, #0]
 801217c:	b933      	cbnz	r3, 801218c <_free_r+0x2c>
 801217e:	6063      	str	r3, [r4, #4]
 8012180:	6014      	str	r4, [r2, #0]
 8012182:	4628      	mov	r0, r5
 8012184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012188:	f000 b8e4 	b.w	8012354 <__malloc_unlock>
 801218c:	42a3      	cmp	r3, r4
 801218e:	d908      	bls.n	80121a2 <_free_r+0x42>
 8012190:	6820      	ldr	r0, [r4, #0]
 8012192:	1821      	adds	r1, r4, r0
 8012194:	428b      	cmp	r3, r1
 8012196:	bf01      	itttt	eq
 8012198:	6819      	ldreq	r1, [r3, #0]
 801219a:	685b      	ldreq	r3, [r3, #4]
 801219c:	1809      	addeq	r1, r1, r0
 801219e:	6021      	streq	r1, [r4, #0]
 80121a0:	e7ed      	b.n	801217e <_free_r+0x1e>
 80121a2:	461a      	mov	r2, r3
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	b10b      	cbz	r3, 80121ac <_free_r+0x4c>
 80121a8:	42a3      	cmp	r3, r4
 80121aa:	d9fa      	bls.n	80121a2 <_free_r+0x42>
 80121ac:	6811      	ldr	r1, [r2, #0]
 80121ae:	1850      	adds	r0, r2, r1
 80121b0:	42a0      	cmp	r0, r4
 80121b2:	d10b      	bne.n	80121cc <_free_r+0x6c>
 80121b4:	6820      	ldr	r0, [r4, #0]
 80121b6:	4401      	add	r1, r0
 80121b8:	1850      	adds	r0, r2, r1
 80121ba:	4283      	cmp	r3, r0
 80121bc:	6011      	str	r1, [r2, #0]
 80121be:	d1e0      	bne.n	8012182 <_free_r+0x22>
 80121c0:	6818      	ldr	r0, [r3, #0]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	6053      	str	r3, [r2, #4]
 80121c6:	4408      	add	r0, r1
 80121c8:	6010      	str	r0, [r2, #0]
 80121ca:	e7da      	b.n	8012182 <_free_r+0x22>
 80121cc:	d902      	bls.n	80121d4 <_free_r+0x74>
 80121ce:	230c      	movs	r3, #12
 80121d0:	602b      	str	r3, [r5, #0]
 80121d2:	e7d6      	b.n	8012182 <_free_r+0x22>
 80121d4:	6820      	ldr	r0, [r4, #0]
 80121d6:	1821      	adds	r1, r4, r0
 80121d8:	428b      	cmp	r3, r1
 80121da:	bf04      	itt	eq
 80121dc:	6819      	ldreq	r1, [r3, #0]
 80121de:	685b      	ldreq	r3, [r3, #4]
 80121e0:	6063      	str	r3, [r4, #4]
 80121e2:	bf04      	itt	eq
 80121e4:	1809      	addeq	r1, r1, r0
 80121e6:	6021      	streq	r1, [r4, #0]
 80121e8:	6054      	str	r4, [r2, #4]
 80121ea:	e7ca      	b.n	8012182 <_free_r+0x22>
 80121ec:	bd38      	pop	{r3, r4, r5, pc}
 80121ee:	bf00      	nop
 80121f0:	200043dc 	.word	0x200043dc

080121f4 <malloc>:
 80121f4:	4b02      	ldr	r3, [pc, #8]	@ (8012200 <malloc+0xc>)
 80121f6:	4601      	mov	r1, r0
 80121f8:	6818      	ldr	r0, [r3, #0]
 80121fa:	f000 b825 	b.w	8012248 <_malloc_r>
 80121fe:	bf00      	nop
 8012200:	2000003c 	.word	0x2000003c

08012204 <sbrk_aligned>:
 8012204:	b570      	push	{r4, r5, r6, lr}
 8012206:	4e0f      	ldr	r6, [pc, #60]	@ (8012244 <sbrk_aligned+0x40>)
 8012208:	460c      	mov	r4, r1
 801220a:	6831      	ldr	r1, [r6, #0]
 801220c:	4605      	mov	r5, r0
 801220e:	b911      	cbnz	r1, 8012216 <sbrk_aligned+0x12>
 8012210:	f001 fe04 	bl	8013e1c <_sbrk_r>
 8012214:	6030      	str	r0, [r6, #0]
 8012216:	4621      	mov	r1, r4
 8012218:	4628      	mov	r0, r5
 801221a:	f001 fdff 	bl	8013e1c <_sbrk_r>
 801221e:	1c43      	adds	r3, r0, #1
 8012220:	d103      	bne.n	801222a <sbrk_aligned+0x26>
 8012222:	f04f 34ff 	mov.w	r4, #4294967295
 8012226:	4620      	mov	r0, r4
 8012228:	bd70      	pop	{r4, r5, r6, pc}
 801222a:	1cc4      	adds	r4, r0, #3
 801222c:	f024 0403 	bic.w	r4, r4, #3
 8012230:	42a0      	cmp	r0, r4
 8012232:	d0f8      	beq.n	8012226 <sbrk_aligned+0x22>
 8012234:	1a21      	subs	r1, r4, r0
 8012236:	4628      	mov	r0, r5
 8012238:	f001 fdf0 	bl	8013e1c <_sbrk_r>
 801223c:	3001      	adds	r0, #1
 801223e:	d1f2      	bne.n	8012226 <sbrk_aligned+0x22>
 8012240:	e7ef      	b.n	8012222 <sbrk_aligned+0x1e>
 8012242:	bf00      	nop
 8012244:	200043d8 	.word	0x200043d8

08012248 <_malloc_r>:
 8012248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801224c:	1ccd      	adds	r5, r1, #3
 801224e:	f025 0503 	bic.w	r5, r5, #3
 8012252:	3508      	adds	r5, #8
 8012254:	2d0c      	cmp	r5, #12
 8012256:	bf38      	it	cc
 8012258:	250c      	movcc	r5, #12
 801225a:	2d00      	cmp	r5, #0
 801225c:	4606      	mov	r6, r0
 801225e:	db01      	blt.n	8012264 <_malloc_r+0x1c>
 8012260:	42a9      	cmp	r1, r5
 8012262:	d904      	bls.n	801226e <_malloc_r+0x26>
 8012264:	230c      	movs	r3, #12
 8012266:	6033      	str	r3, [r6, #0]
 8012268:	2000      	movs	r0, #0
 801226a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801226e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012344 <_malloc_r+0xfc>
 8012272:	f000 f869 	bl	8012348 <__malloc_lock>
 8012276:	f8d8 3000 	ldr.w	r3, [r8]
 801227a:	461c      	mov	r4, r3
 801227c:	bb44      	cbnz	r4, 80122d0 <_malloc_r+0x88>
 801227e:	4629      	mov	r1, r5
 8012280:	4630      	mov	r0, r6
 8012282:	f7ff ffbf 	bl	8012204 <sbrk_aligned>
 8012286:	1c43      	adds	r3, r0, #1
 8012288:	4604      	mov	r4, r0
 801228a:	d158      	bne.n	801233e <_malloc_r+0xf6>
 801228c:	f8d8 4000 	ldr.w	r4, [r8]
 8012290:	4627      	mov	r7, r4
 8012292:	2f00      	cmp	r7, #0
 8012294:	d143      	bne.n	801231e <_malloc_r+0xd6>
 8012296:	2c00      	cmp	r4, #0
 8012298:	d04b      	beq.n	8012332 <_malloc_r+0xea>
 801229a:	6823      	ldr	r3, [r4, #0]
 801229c:	4639      	mov	r1, r7
 801229e:	4630      	mov	r0, r6
 80122a0:	eb04 0903 	add.w	r9, r4, r3
 80122a4:	f001 fdba 	bl	8013e1c <_sbrk_r>
 80122a8:	4581      	cmp	r9, r0
 80122aa:	d142      	bne.n	8012332 <_malloc_r+0xea>
 80122ac:	6821      	ldr	r1, [r4, #0]
 80122ae:	1a6d      	subs	r5, r5, r1
 80122b0:	4629      	mov	r1, r5
 80122b2:	4630      	mov	r0, r6
 80122b4:	f7ff ffa6 	bl	8012204 <sbrk_aligned>
 80122b8:	3001      	adds	r0, #1
 80122ba:	d03a      	beq.n	8012332 <_malloc_r+0xea>
 80122bc:	6823      	ldr	r3, [r4, #0]
 80122be:	442b      	add	r3, r5
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	f8d8 3000 	ldr.w	r3, [r8]
 80122c6:	685a      	ldr	r2, [r3, #4]
 80122c8:	bb62      	cbnz	r2, 8012324 <_malloc_r+0xdc>
 80122ca:	f8c8 7000 	str.w	r7, [r8]
 80122ce:	e00f      	b.n	80122f0 <_malloc_r+0xa8>
 80122d0:	6822      	ldr	r2, [r4, #0]
 80122d2:	1b52      	subs	r2, r2, r5
 80122d4:	d420      	bmi.n	8012318 <_malloc_r+0xd0>
 80122d6:	2a0b      	cmp	r2, #11
 80122d8:	d917      	bls.n	801230a <_malloc_r+0xc2>
 80122da:	1961      	adds	r1, r4, r5
 80122dc:	42a3      	cmp	r3, r4
 80122de:	6025      	str	r5, [r4, #0]
 80122e0:	bf18      	it	ne
 80122e2:	6059      	strne	r1, [r3, #4]
 80122e4:	6863      	ldr	r3, [r4, #4]
 80122e6:	bf08      	it	eq
 80122e8:	f8c8 1000 	streq.w	r1, [r8]
 80122ec:	5162      	str	r2, [r4, r5]
 80122ee:	604b      	str	r3, [r1, #4]
 80122f0:	4630      	mov	r0, r6
 80122f2:	f000 f82f 	bl	8012354 <__malloc_unlock>
 80122f6:	f104 000b 	add.w	r0, r4, #11
 80122fa:	1d23      	adds	r3, r4, #4
 80122fc:	f020 0007 	bic.w	r0, r0, #7
 8012300:	1ac2      	subs	r2, r0, r3
 8012302:	bf1c      	itt	ne
 8012304:	1a1b      	subne	r3, r3, r0
 8012306:	50a3      	strne	r3, [r4, r2]
 8012308:	e7af      	b.n	801226a <_malloc_r+0x22>
 801230a:	6862      	ldr	r2, [r4, #4]
 801230c:	42a3      	cmp	r3, r4
 801230e:	bf0c      	ite	eq
 8012310:	f8c8 2000 	streq.w	r2, [r8]
 8012314:	605a      	strne	r2, [r3, #4]
 8012316:	e7eb      	b.n	80122f0 <_malloc_r+0xa8>
 8012318:	4623      	mov	r3, r4
 801231a:	6864      	ldr	r4, [r4, #4]
 801231c:	e7ae      	b.n	801227c <_malloc_r+0x34>
 801231e:	463c      	mov	r4, r7
 8012320:	687f      	ldr	r7, [r7, #4]
 8012322:	e7b6      	b.n	8012292 <_malloc_r+0x4a>
 8012324:	461a      	mov	r2, r3
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	42a3      	cmp	r3, r4
 801232a:	d1fb      	bne.n	8012324 <_malloc_r+0xdc>
 801232c:	2300      	movs	r3, #0
 801232e:	6053      	str	r3, [r2, #4]
 8012330:	e7de      	b.n	80122f0 <_malloc_r+0xa8>
 8012332:	230c      	movs	r3, #12
 8012334:	6033      	str	r3, [r6, #0]
 8012336:	4630      	mov	r0, r6
 8012338:	f000 f80c 	bl	8012354 <__malloc_unlock>
 801233c:	e794      	b.n	8012268 <_malloc_r+0x20>
 801233e:	6005      	str	r5, [r0, #0]
 8012340:	e7d6      	b.n	80122f0 <_malloc_r+0xa8>
 8012342:	bf00      	nop
 8012344:	200043dc 	.word	0x200043dc

08012348 <__malloc_lock>:
 8012348:	4801      	ldr	r0, [pc, #4]	@ (8012350 <__malloc_lock+0x8>)
 801234a:	f7ff b89a 	b.w	8011482 <__retarget_lock_acquire_recursive>
 801234e:	bf00      	nop
 8012350:	200043d4 	.word	0x200043d4

08012354 <__malloc_unlock>:
 8012354:	4801      	ldr	r0, [pc, #4]	@ (801235c <__malloc_unlock+0x8>)
 8012356:	f7ff b895 	b.w	8011484 <__retarget_lock_release_recursive>
 801235a:	bf00      	nop
 801235c:	200043d4 	.word	0x200043d4

08012360 <_Balloc>:
 8012360:	b570      	push	{r4, r5, r6, lr}
 8012362:	69c6      	ldr	r6, [r0, #28]
 8012364:	4604      	mov	r4, r0
 8012366:	460d      	mov	r5, r1
 8012368:	b976      	cbnz	r6, 8012388 <_Balloc+0x28>
 801236a:	2010      	movs	r0, #16
 801236c:	f7ff ff42 	bl	80121f4 <malloc>
 8012370:	4602      	mov	r2, r0
 8012372:	61e0      	str	r0, [r4, #28]
 8012374:	b920      	cbnz	r0, 8012380 <_Balloc+0x20>
 8012376:	4b18      	ldr	r3, [pc, #96]	@ (80123d8 <_Balloc+0x78>)
 8012378:	4818      	ldr	r0, [pc, #96]	@ (80123dc <_Balloc+0x7c>)
 801237a:	216b      	movs	r1, #107	@ 0x6b
 801237c:	f001 fd68 	bl	8013e50 <__assert_func>
 8012380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012384:	6006      	str	r6, [r0, #0]
 8012386:	60c6      	str	r6, [r0, #12]
 8012388:	69e6      	ldr	r6, [r4, #28]
 801238a:	68f3      	ldr	r3, [r6, #12]
 801238c:	b183      	cbz	r3, 80123b0 <_Balloc+0x50>
 801238e:	69e3      	ldr	r3, [r4, #28]
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012396:	b9b8      	cbnz	r0, 80123c8 <_Balloc+0x68>
 8012398:	2101      	movs	r1, #1
 801239a:	fa01 f605 	lsl.w	r6, r1, r5
 801239e:	1d72      	adds	r2, r6, #5
 80123a0:	0092      	lsls	r2, r2, #2
 80123a2:	4620      	mov	r0, r4
 80123a4:	f001 fd72 	bl	8013e8c <_calloc_r>
 80123a8:	b160      	cbz	r0, 80123c4 <_Balloc+0x64>
 80123aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80123ae:	e00e      	b.n	80123ce <_Balloc+0x6e>
 80123b0:	2221      	movs	r2, #33	@ 0x21
 80123b2:	2104      	movs	r1, #4
 80123b4:	4620      	mov	r0, r4
 80123b6:	f001 fd69 	bl	8013e8c <_calloc_r>
 80123ba:	69e3      	ldr	r3, [r4, #28]
 80123bc:	60f0      	str	r0, [r6, #12]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d1e4      	bne.n	801238e <_Balloc+0x2e>
 80123c4:	2000      	movs	r0, #0
 80123c6:	bd70      	pop	{r4, r5, r6, pc}
 80123c8:	6802      	ldr	r2, [r0, #0]
 80123ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80123ce:	2300      	movs	r3, #0
 80123d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80123d4:	e7f7      	b.n	80123c6 <_Balloc+0x66>
 80123d6:	bf00      	nop
 80123d8:	080155c6 	.word	0x080155c6
 80123dc:	08015646 	.word	0x08015646

080123e0 <_Bfree>:
 80123e0:	b570      	push	{r4, r5, r6, lr}
 80123e2:	69c6      	ldr	r6, [r0, #28]
 80123e4:	4605      	mov	r5, r0
 80123e6:	460c      	mov	r4, r1
 80123e8:	b976      	cbnz	r6, 8012408 <_Bfree+0x28>
 80123ea:	2010      	movs	r0, #16
 80123ec:	f7ff ff02 	bl	80121f4 <malloc>
 80123f0:	4602      	mov	r2, r0
 80123f2:	61e8      	str	r0, [r5, #28]
 80123f4:	b920      	cbnz	r0, 8012400 <_Bfree+0x20>
 80123f6:	4b09      	ldr	r3, [pc, #36]	@ (801241c <_Bfree+0x3c>)
 80123f8:	4809      	ldr	r0, [pc, #36]	@ (8012420 <_Bfree+0x40>)
 80123fa:	218f      	movs	r1, #143	@ 0x8f
 80123fc:	f001 fd28 	bl	8013e50 <__assert_func>
 8012400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012404:	6006      	str	r6, [r0, #0]
 8012406:	60c6      	str	r6, [r0, #12]
 8012408:	b13c      	cbz	r4, 801241a <_Bfree+0x3a>
 801240a:	69eb      	ldr	r3, [r5, #28]
 801240c:	6862      	ldr	r2, [r4, #4]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012414:	6021      	str	r1, [r4, #0]
 8012416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801241a:	bd70      	pop	{r4, r5, r6, pc}
 801241c:	080155c6 	.word	0x080155c6
 8012420:	08015646 	.word	0x08015646

08012424 <__multadd>:
 8012424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012428:	690d      	ldr	r5, [r1, #16]
 801242a:	4607      	mov	r7, r0
 801242c:	460c      	mov	r4, r1
 801242e:	461e      	mov	r6, r3
 8012430:	f101 0c14 	add.w	ip, r1, #20
 8012434:	2000      	movs	r0, #0
 8012436:	f8dc 3000 	ldr.w	r3, [ip]
 801243a:	b299      	uxth	r1, r3
 801243c:	fb02 6101 	mla	r1, r2, r1, r6
 8012440:	0c1e      	lsrs	r6, r3, #16
 8012442:	0c0b      	lsrs	r3, r1, #16
 8012444:	fb02 3306 	mla	r3, r2, r6, r3
 8012448:	b289      	uxth	r1, r1
 801244a:	3001      	adds	r0, #1
 801244c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012450:	4285      	cmp	r5, r0
 8012452:	f84c 1b04 	str.w	r1, [ip], #4
 8012456:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801245a:	dcec      	bgt.n	8012436 <__multadd+0x12>
 801245c:	b30e      	cbz	r6, 80124a2 <__multadd+0x7e>
 801245e:	68a3      	ldr	r3, [r4, #8]
 8012460:	42ab      	cmp	r3, r5
 8012462:	dc19      	bgt.n	8012498 <__multadd+0x74>
 8012464:	6861      	ldr	r1, [r4, #4]
 8012466:	4638      	mov	r0, r7
 8012468:	3101      	adds	r1, #1
 801246a:	f7ff ff79 	bl	8012360 <_Balloc>
 801246e:	4680      	mov	r8, r0
 8012470:	b928      	cbnz	r0, 801247e <__multadd+0x5a>
 8012472:	4602      	mov	r2, r0
 8012474:	4b0c      	ldr	r3, [pc, #48]	@ (80124a8 <__multadd+0x84>)
 8012476:	480d      	ldr	r0, [pc, #52]	@ (80124ac <__multadd+0x88>)
 8012478:	21ba      	movs	r1, #186	@ 0xba
 801247a:	f001 fce9 	bl	8013e50 <__assert_func>
 801247e:	6922      	ldr	r2, [r4, #16]
 8012480:	3202      	adds	r2, #2
 8012482:	f104 010c 	add.w	r1, r4, #12
 8012486:	0092      	lsls	r2, r2, #2
 8012488:	300c      	adds	r0, #12
 801248a:	f7fe fffc 	bl	8011486 <memcpy>
 801248e:	4621      	mov	r1, r4
 8012490:	4638      	mov	r0, r7
 8012492:	f7ff ffa5 	bl	80123e0 <_Bfree>
 8012496:	4644      	mov	r4, r8
 8012498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801249c:	3501      	adds	r5, #1
 801249e:	615e      	str	r6, [r3, #20]
 80124a0:	6125      	str	r5, [r4, #16]
 80124a2:	4620      	mov	r0, r4
 80124a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124a8:	08015635 	.word	0x08015635
 80124ac:	08015646 	.word	0x08015646

080124b0 <__s2b>:
 80124b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b4:	460c      	mov	r4, r1
 80124b6:	4615      	mov	r5, r2
 80124b8:	461f      	mov	r7, r3
 80124ba:	2209      	movs	r2, #9
 80124bc:	3308      	adds	r3, #8
 80124be:	4606      	mov	r6, r0
 80124c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80124c4:	2100      	movs	r1, #0
 80124c6:	2201      	movs	r2, #1
 80124c8:	429a      	cmp	r2, r3
 80124ca:	db09      	blt.n	80124e0 <__s2b+0x30>
 80124cc:	4630      	mov	r0, r6
 80124ce:	f7ff ff47 	bl	8012360 <_Balloc>
 80124d2:	b940      	cbnz	r0, 80124e6 <__s2b+0x36>
 80124d4:	4602      	mov	r2, r0
 80124d6:	4b19      	ldr	r3, [pc, #100]	@ (801253c <__s2b+0x8c>)
 80124d8:	4819      	ldr	r0, [pc, #100]	@ (8012540 <__s2b+0x90>)
 80124da:	21d3      	movs	r1, #211	@ 0xd3
 80124dc:	f001 fcb8 	bl	8013e50 <__assert_func>
 80124e0:	0052      	lsls	r2, r2, #1
 80124e2:	3101      	adds	r1, #1
 80124e4:	e7f0      	b.n	80124c8 <__s2b+0x18>
 80124e6:	9b08      	ldr	r3, [sp, #32]
 80124e8:	6143      	str	r3, [r0, #20]
 80124ea:	2d09      	cmp	r5, #9
 80124ec:	f04f 0301 	mov.w	r3, #1
 80124f0:	6103      	str	r3, [r0, #16]
 80124f2:	dd16      	ble.n	8012522 <__s2b+0x72>
 80124f4:	f104 0909 	add.w	r9, r4, #9
 80124f8:	46c8      	mov	r8, r9
 80124fa:	442c      	add	r4, r5
 80124fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012500:	4601      	mov	r1, r0
 8012502:	3b30      	subs	r3, #48	@ 0x30
 8012504:	220a      	movs	r2, #10
 8012506:	4630      	mov	r0, r6
 8012508:	f7ff ff8c 	bl	8012424 <__multadd>
 801250c:	45a0      	cmp	r8, r4
 801250e:	d1f5      	bne.n	80124fc <__s2b+0x4c>
 8012510:	f1a5 0408 	sub.w	r4, r5, #8
 8012514:	444c      	add	r4, r9
 8012516:	1b2d      	subs	r5, r5, r4
 8012518:	1963      	adds	r3, r4, r5
 801251a:	42bb      	cmp	r3, r7
 801251c:	db04      	blt.n	8012528 <__s2b+0x78>
 801251e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012522:	340a      	adds	r4, #10
 8012524:	2509      	movs	r5, #9
 8012526:	e7f6      	b.n	8012516 <__s2b+0x66>
 8012528:	f814 3b01 	ldrb.w	r3, [r4], #1
 801252c:	4601      	mov	r1, r0
 801252e:	3b30      	subs	r3, #48	@ 0x30
 8012530:	220a      	movs	r2, #10
 8012532:	4630      	mov	r0, r6
 8012534:	f7ff ff76 	bl	8012424 <__multadd>
 8012538:	e7ee      	b.n	8012518 <__s2b+0x68>
 801253a:	bf00      	nop
 801253c:	08015635 	.word	0x08015635
 8012540:	08015646 	.word	0x08015646

08012544 <__hi0bits>:
 8012544:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012548:	4603      	mov	r3, r0
 801254a:	bf36      	itet	cc
 801254c:	0403      	lslcc	r3, r0, #16
 801254e:	2000      	movcs	r0, #0
 8012550:	2010      	movcc	r0, #16
 8012552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012556:	bf3c      	itt	cc
 8012558:	021b      	lslcc	r3, r3, #8
 801255a:	3008      	addcc	r0, #8
 801255c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012560:	bf3c      	itt	cc
 8012562:	011b      	lslcc	r3, r3, #4
 8012564:	3004      	addcc	r0, #4
 8012566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801256a:	bf3c      	itt	cc
 801256c:	009b      	lslcc	r3, r3, #2
 801256e:	3002      	addcc	r0, #2
 8012570:	2b00      	cmp	r3, #0
 8012572:	db05      	blt.n	8012580 <__hi0bits+0x3c>
 8012574:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012578:	f100 0001 	add.w	r0, r0, #1
 801257c:	bf08      	it	eq
 801257e:	2020      	moveq	r0, #32
 8012580:	4770      	bx	lr

08012582 <__lo0bits>:
 8012582:	6803      	ldr	r3, [r0, #0]
 8012584:	4602      	mov	r2, r0
 8012586:	f013 0007 	ands.w	r0, r3, #7
 801258a:	d00b      	beq.n	80125a4 <__lo0bits+0x22>
 801258c:	07d9      	lsls	r1, r3, #31
 801258e:	d421      	bmi.n	80125d4 <__lo0bits+0x52>
 8012590:	0798      	lsls	r0, r3, #30
 8012592:	bf49      	itett	mi
 8012594:	085b      	lsrmi	r3, r3, #1
 8012596:	089b      	lsrpl	r3, r3, #2
 8012598:	2001      	movmi	r0, #1
 801259a:	6013      	strmi	r3, [r2, #0]
 801259c:	bf5c      	itt	pl
 801259e:	6013      	strpl	r3, [r2, #0]
 80125a0:	2002      	movpl	r0, #2
 80125a2:	4770      	bx	lr
 80125a4:	b299      	uxth	r1, r3
 80125a6:	b909      	cbnz	r1, 80125ac <__lo0bits+0x2a>
 80125a8:	0c1b      	lsrs	r3, r3, #16
 80125aa:	2010      	movs	r0, #16
 80125ac:	b2d9      	uxtb	r1, r3
 80125ae:	b909      	cbnz	r1, 80125b4 <__lo0bits+0x32>
 80125b0:	3008      	adds	r0, #8
 80125b2:	0a1b      	lsrs	r3, r3, #8
 80125b4:	0719      	lsls	r1, r3, #28
 80125b6:	bf04      	itt	eq
 80125b8:	091b      	lsreq	r3, r3, #4
 80125ba:	3004      	addeq	r0, #4
 80125bc:	0799      	lsls	r1, r3, #30
 80125be:	bf04      	itt	eq
 80125c0:	089b      	lsreq	r3, r3, #2
 80125c2:	3002      	addeq	r0, #2
 80125c4:	07d9      	lsls	r1, r3, #31
 80125c6:	d403      	bmi.n	80125d0 <__lo0bits+0x4e>
 80125c8:	085b      	lsrs	r3, r3, #1
 80125ca:	f100 0001 	add.w	r0, r0, #1
 80125ce:	d003      	beq.n	80125d8 <__lo0bits+0x56>
 80125d0:	6013      	str	r3, [r2, #0]
 80125d2:	4770      	bx	lr
 80125d4:	2000      	movs	r0, #0
 80125d6:	4770      	bx	lr
 80125d8:	2020      	movs	r0, #32
 80125da:	4770      	bx	lr

080125dc <__i2b>:
 80125dc:	b510      	push	{r4, lr}
 80125de:	460c      	mov	r4, r1
 80125e0:	2101      	movs	r1, #1
 80125e2:	f7ff febd 	bl	8012360 <_Balloc>
 80125e6:	4602      	mov	r2, r0
 80125e8:	b928      	cbnz	r0, 80125f6 <__i2b+0x1a>
 80125ea:	4b05      	ldr	r3, [pc, #20]	@ (8012600 <__i2b+0x24>)
 80125ec:	4805      	ldr	r0, [pc, #20]	@ (8012604 <__i2b+0x28>)
 80125ee:	f240 1145 	movw	r1, #325	@ 0x145
 80125f2:	f001 fc2d 	bl	8013e50 <__assert_func>
 80125f6:	2301      	movs	r3, #1
 80125f8:	6144      	str	r4, [r0, #20]
 80125fa:	6103      	str	r3, [r0, #16]
 80125fc:	bd10      	pop	{r4, pc}
 80125fe:	bf00      	nop
 8012600:	08015635 	.word	0x08015635
 8012604:	08015646 	.word	0x08015646

08012608 <__multiply>:
 8012608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801260c:	4617      	mov	r7, r2
 801260e:	690a      	ldr	r2, [r1, #16]
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	429a      	cmp	r2, r3
 8012614:	bfa8      	it	ge
 8012616:	463b      	movge	r3, r7
 8012618:	4689      	mov	r9, r1
 801261a:	bfa4      	itt	ge
 801261c:	460f      	movge	r7, r1
 801261e:	4699      	movge	r9, r3
 8012620:	693d      	ldr	r5, [r7, #16]
 8012622:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	6879      	ldr	r1, [r7, #4]
 801262a:	eb05 060a 	add.w	r6, r5, sl
 801262e:	42b3      	cmp	r3, r6
 8012630:	b085      	sub	sp, #20
 8012632:	bfb8      	it	lt
 8012634:	3101      	addlt	r1, #1
 8012636:	f7ff fe93 	bl	8012360 <_Balloc>
 801263a:	b930      	cbnz	r0, 801264a <__multiply+0x42>
 801263c:	4602      	mov	r2, r0
 801263e:	4b41      	ldr	r3, [pc, #260]	@ (8012744 <__multiply+0x13c>)
 8012640:	4841      	ldr	r0, [pc, #260]	@ (8012748 <__multiply+0x140>)
 8012642:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012646:	f001 fc03 	bl	8013e50 <__assert_func>
 801264a:	f100 0414 	add.w	r4, r0, #20
 801264e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012652:	4623      	mov	r3, r4
 8012654:	2200      	movs	r2, #0
 8012656:	4573      	cmp	r3, lr
 8012658:	d320      	bcc.n	801269c <__multiply+0x94>
 801265a:	f107 0814 	add.w	r8, r7, #20
 801265e:	f109 0114 	add.w	r1, r9, #20
 8012662:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012666:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801266a:	9302      	str	r3, [sp, #8]
 801266c:	1beb      	subs	r3, r5, r7
 801266e:	3b15      	subs	r3, #21
 8012670:	f023 0303 	bic.w	r3, r3, #3
 8012674:	3304      	adds	r3, #4
 8012676:	3715      	adds	r7, #21
 8012678:	42bd      	cmp	r5, r7
 801267a:	bf38      	it	cc
 801267c:	2304      	movcc	r3, #4
 801267e:	9301      	str	r3, [sp, #4]
 8012680:	9b02      	ldr	r3, [sp, #8]
 8012682:	9103      	str	r1, [sp, #12]
 8012684:	428b      	cmp	r3, r1
 8012686:	d80c      	bhi.n	80126a2 <__multiply+0x9a>
 8012688:	2e00      	cmp	r6, #0
 801268a:	dd03      	ble.n	8012694 <__multiply+0x8c>
 801268c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012690:	2b00      	cmp	r3, #0
 8012692:	d055      	beq.n	8012740 <__multiply+0x138>
 8012694:	6106      	str	r6, [r0, #16]
 8012696:	b005      	add	sp, #20
 8012698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269c:	f843 2b04 	str.w	r2, [r3], #4
 80126a0:	e7d9      	b.n	8012656 <__multiply+0x4e>
 80126a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80126a6:	f1ba 0f00 	cmp.w	sl, #0
 80126aa:	d01f      	beq.n	80126ec <__multiply+0xe4>
 80126ac:	46c4      	mov	ip, r8
 80126ae:	46a1      	mov	r9, r4
 80126b0:	2700      	movs	r7, #0
 80126b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80126b6:	f8d9 3000 	ldr.w	r3, [r9]
 80126ba:	fa1f fb82 	uxth.w	fp, r2
 80126be:	b29b      	uxth	r3, r3
 80126c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80126c4:	443b      	add	r3, r7
 80126c6:	f8d9 7000 	ldr.w	r7, [r9]
 80126ca:	0c12      	lsrs	r2, r2, #16
 80126cc:	0c3f      	lsrs	r7, r7, #16
 80126ce:	fb0a 7202 	mla	r2, sl, r2, r7
 80126d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126dc:	4565      	cmp	r5, ip
 80126de:	f849 3b04 	str.w	r3, [r9], #4
 80126e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80126e6:	d8e4      	bhi.n	80126b2 <__multiply+0xaa>
 80126e8:	9b01      	ldr	r3, [sp, #4]
 80126ea:	50e7      	str	r7, [r4, r3]
 80126ec:	9b03      	ldr	r3, [sp, #12]
 80126ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80126f2:	3104      	adds	r1, #4
 80126f4:	f1b9 0f00 	cmp.w	r9, #0
 80126f8:	d020      	beq.n	801273c <__multiply+0x134>
 80126fa:	6823      	ldr	r3, [r4, #0]
 80126fc:	4647      	mov	r7, r8
 80126fe:	46a4      	mov	ip, r4
 8012700:	f04f 0a00 	mov.w	sl, #0
 8012704:	f8b7 b000 	ldrh.w	fp, [r7]
 8012708:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801270c:	fb09 220b 	mla	r2, r9, fp, r2
 8012710:	4452      	add	r2, sl
 8012712:	b29b      	uxth	r3, r3
 8012714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012718:	f84c 3b04 	str.w	r3, [ip], #4
 801271c:	f857 3b04 	ldr.w	r3, [r7], #4
 8012720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012724:	f8bc 3000 	ldrh.w	r3, [ip]
 8012728:	fb09 330a 	mla	r3, r9, sl, r3
 801272c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012730:	42bd      	cmp	r5, r7
 8012732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012736:	d8e5      	bhi.n	8012704 <__multiply+0xfc>
 8012738:	9a01      	ldr	r2, [sp, #4]
 801273a:	50a3      	str	r3, [r4, r2]
 801273c:	3404      	adds	r4, #4
 801273e:	e79f      	b.n	8012680 <__multiply+0x78>
 8012740:	3e01      	subs	r6, #1
 8012742:	e7a1      	b.n	8012688 <__multiply+0x80>
 8012744:	08015635 	.word	0x08015635
 8012748:	08015646 	.word	0x08015646

0801274c <__pow5mult>:
 801274c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012750:	4615      	mov	r5, r2
 8012752:	f012 0203 	ands.w	r2, r2, #3
 8012756:	4607      	mov	r7, r0
 8012758:	460e      	mov	r6, r1
 801275a:	d007      	beq.n	801276c <__pow5mult+0x20>
 801275c:	4c25      	ldr	r4, [pc, #148]	@ (80127f4 <__pow5mult+0xa8>)
 801275e:	3a01      	subs	r2, #1
 8012760:	2300      	movs	r3, #0
 8012762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012766:	f7ff fe5d 	bl	8012424 <__multadd>
 801276a:	4606      	mov	r6, r0
 801276c:	10ad      	asrs	r5, r5, #2
 801276e:	d03d      	beq.n	80127ec <__pow5mult+0xa0>
 8012770:	69fc      	ldr	r4, [r7, #28]
 8012772:	b97c      	cbnz	r4, 8012794 <__pow5mult+0x48>
 8012774:	2010      	movs	r0, #16
 8012776:	f7ff fd3d 	bl	80121f4 <malloc>
 801277a:	4602      	mov	r2, r0
 801277c:	61f8      	str	r0, [r7, #28]
 801277e:	b928      	cbnz	r0, 801278c <__pow5mult+0x40>
 8012780:	4b1d      	ldr	r3, [pc, #116]	@ (80127f8 <__pow5mult+0xac>)
 8012782:	481e      	ldr	r0, [pc, #120]	@ (80127fc <__pow5mult+0xb0>)
 8012784:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012788:	f001 fb62 	bl	8013e50 <__assert_func>
 801278c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012790:	6004      	str	r4, [r0, #0]
 8012792:	60c4      	str	r4, [r0, #12]
 8012794:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801279c:	b94c      	cbnz	r4, 80127b2 <__pow5mult+0x66>
 801279e:	f240 2171 	movw	r1, #625	@ 0x271
 80127a2:	4638      	mov	r0, r7
 80127a4:	f7ff ff1a 	bl	80125dc <__i2b>
 80127a8:	2300      	movs	r3, #0
 80127aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80127ae:	4604      	mov	r4, r0
 80127b0:	6003      	str	r3, [r0, #0]
 80127b2:	f04f 0900 	mov.w	r9, #0
 80127b6:	07eb      	lsls	r3, r5, #31
 80127b8:	d50a      	bpl.n	80127d0 <__pow5mult+0x84>
 80127ba:	4631      	mov	r1, r6
 80127bc:	4622      	mov	r2, r4
 80127be:	4638      	mov	r0, r7
 80127c0:	f7ff ff22 	bl	8012608 <__multiply>
 80127c4:	4631      	mov	r1, r6
 80127c6:	4680      	mov	r8, r0
 80127c8:	4638      	mov	r0, r7
 80127ca:	f7ff fe09 	bl	80123e0 <_Bfree>
 80127ce:	4646      	mov	r6, r8
 80127d0:	106d      	asrs	r5, r5, #1
 80127d2:	d00b      	beq.n	80127ec <__pow5mult+0xa0>
 80127d4:	6820      	ldr	r0, [r4, #0]
 80127d6:	b938      	cbnz	r0, 80127e8 <__pow5mult+0x9c>
 80127d8:	4622      	mov	r2, r4
 80127da:	4621      	mov	r1, r4
 80127dc:	4638      	mov	r0, r7
 80127de:	f7ff ff13 	bl	8012608 <__multiply>
 80127e2:	6020      	str	r0, [r4, #0]
 80127e4:	f8c0 9000 	str.w	r9, [r0]
 80127e8:	4604      	mov	r4, r0
 80127ea:	e7e4      	b.n	80127b6 <__pow5mult+0x6a>
 80127ec:	4630      	mov	r0, r6
 80127ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127f2:	bf00      	nop
 80127f4:	08015758 	.word	0x08015758
 80127f8:	080155c6 	.word	0x080155c6
 80127fc:	08015646 	.word	0x08015646

08012800 <__lshift>:
 8012800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012804:	460c      	mov	r4, r1
 8012806:	6849      	ldr	r1, [r1, #4]
 8012808:	6923      	ldr	r3, [r4, #16]
 801280a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801280e:	68a3      	ldr	r3, [r4, #8]
 8012810:	4607      	mov	r7, r0
 8012812:	4691      	mov	r9, r2
 8012814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012818:	f108 0601 	add.w	r6, r8, #1
 801281c:	42b3      	cmp	r3, r6
 801281e:	db0b      	blt.n	8012838 <__lshift+0x38>
 8012820:	4638      	mov	r0, r7
 8012822:	f7ff fd9d 	bl	8012360 <_Balloc>
 8012826:	4605      	mov	r5, r0
 8012828:	b948      	cbnz	r0, 801283e <__lshift+0x3e>
 801282a:	4602      	mov	r2, r0
 801282c:	4b28      	ldr	r3, [pc, #160]	@ (80128d0 <__lshift+0xd0>)
 801282e:	4829      	ldr	r0, [pc, #164]	@ (80128d4 <__lshift+0xd4>)
 8012830:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012834:	f001 fb0c 	bl	8013e50 <__assert_func>
 8012838:	3101      	adds	r1, #1
 801283a:	005b      	lsls	r3, r3, #1
 801283c:	e7ee      	b.n	801281c <__lshift+0x1c>
 801283e:	2300      	movs	r3, #0
 8012840:	f100 0114 	add.w	r1, r0, #20
 8012844:	f100 0210 	add.w	r2, r0, #16
 8012848:	4618      	mov	r0, r3
 801284a:	4553      	cmp	r3, sl
 801284c:	db33      	blt.n	80128b6 <__lshift+0xb6>
 801284e:	6920      	ldr	r0, [r4, #16]
 8012850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012854:	f104 0314 	add.w	r3, r4, #20
 8012858:	f019 091f 	ands.w	r9, r9, #31
 801285c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012864:	d02b      	beq.n	80128be <__lshift+0xbe>
 8012866:	f1c9 0e20 	rsb	lr, r9, #32
 801286a:	468a      	mov	sl, r1
 801286c:	2200      	movs	r2, #0
 801286e:	6818      	ldr	r0, [r3, #0]
 8012870:	fa00 f009 	lsl.w	r0, r0, r9
 8012874:	4310      	orrs	r0, r2
 8012876:	f84a 0b04 	str.w	r0, [sl], #4
 801287a:	f853 2b04 	ldr.w	r2, [r3], #4
 801287e:	459c      	cmp	ip, r3
 8012880:	fa22 f20e 	lsr.w	r2, r2, lr
 8012884:	d8f3      	bhi.n	801286e <__lshift+0x6e>
 8012886:	ebac 0304 	sub.w	r3, ip, r4
 801288a:	3b15      	subs	r3, #21
 801288c:	f023 0303 	bic.w	r3, r3, #3
 8012890:	3304      	adds	r3, #4
 8012892:	f104 0015 	add.w	r0, r4, #21
 8012896:	4560      	cmp	r0, ip
 8012898:	bf88      	it	hi
 801289a:	2304      	movhi	r3, #4
 801289c:	50ca      	str	r2, [r1, r3]
 801289e:	b10a      	cbz	r2, 80128a4 <__lshift+0xa4>
 80128a0:	f108 0602 	add.w	r6, r8, #2
 80128a4:	3e01      	subs	r6, #1
 80128a6:	4638      	mov	r0, r7
 80128a8:	612e      	str	r6, [r5, #16]
 80128aa:	4621      	mov	r1, r4
 80128ac:	f7ff fd98 	bl	80123e0 <_Bfree>
 80128b0:	4628      	mov	r0, r5
 80128b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80128ba:	3301      	adds	r3, #1
 80128bc:	e7c5      	b.n	801284a <__lshift+0x4a>
 80128be:	3904      	subs	r1, #4
 80128c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80128c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80128c8:	459c      	cmp	ip, r3
 80128ca:	d8f9      	bhi.n	80128c0 <__lshift+0xc0>
 80128cc:	e7ea      	b.n	80128a4 <__lshift+0xa4>
 80128ce:	bf00      	nop
 80128d0:	08015635 	.word	0x08015635
 80128d4:	08015646 	.word	0x08015646

080128d8 <__mcmp>:
 80128d8:	690a      	ldr	r2, [r1, #16]
 80128da:	4603      	mov	r3, r0
 80128dc:	6900      	ldr	r0, [r0, #16]
 80128de:	1a80      	subs	r0, r0, r2
 80128e0:	b530      	push	{r4, r5, lr}
 80128e2:	d10e      	bne.n	8012902 <__mcmp+0x2a>
 80128e4:	3314      	adds	r3, #20
 80128e6:	3114      	adds	r1, #20
 80128e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80128ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80128f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80128f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80128f8:	4295      	cmp	r5, r2
 80128fa:	d003      	beq.n	8012904 <__mcmp+0x2c>
 80128fc:	d205      	bcs.n	801290a <__mcmp+0x32>
 80128fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012902:	bd30      	pop	{r4, r5, pc}
 8012904:	42a3      	cmp	r3, r4
 8012906:	d3f3      	bcc.n	80128f0 <__mcmp+0x18>
 8012908:	e7fb      	b.n	8012902 <__mcmp+0x2a>
 801290a:	2001      	movs	r0, #1
 801290c:	e7f9      	b.n	8012902 <__mcmp+0x2a>
	...

08012910 <__mdiff>:
 8012910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012914:	4689      	mov	r9, r1
 8012916:	4606      	mov	r6, r0
 8012918:	4611      	mov	r1, r2
 801291a:	4648      	mov	r0, r9
 801291c:	4614      	mov	r4, r2
 801291e:	f7ff ffdb 	bl	80128d8 <__mcmp>
 8012922:	1e05      	subs	r5, r0, #0
 8012924:	d112      	bne.n	801294c <__mdiff+0x3c>
 8012926:	4629      	mov	r1, r5
 8012928:	4630      	mov	r0, r6
 801292a:	f7ff fd19 	bl	8012360 <_Balloc>
 801292e:	4602      	mov	r2, r0
 8012930:	b928      	cbnz	r0, 801293e <__mdiff+0x2e>
 8012932:	4b3f      	ldr	r3, [pc, #252]	@ (8012a30 <__mdiff+0x120>)
 8012934:	f240 2137 	movw	r1, #567	@ 0x237
 8012938:	483e      	ldr	r0, [pc, #248]	@ (8012a34 <__mdiff+0x124>)
 801293a:	f001 fa89 	bl	8013e50 <__assert_func>
 801293e:	2301      	movs	r3, #1
 8012940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012944:	4610      	mov	r0, r2
 8012946:	b003      	add	sp, #12
 8012948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294c:	bfbc      	itt	lt
 801294e:	464b      	movlt	r3, r9
 8012950:	46a1      	movlt	r9, r4
 8012952:	4630      	mov	r0, r6
 8012954:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012958:	bfba      	itte	lt
 801295a:	461c      	movlt	r4, r3
 801295c:	2501      	movlt	r5, #1
 801295e:	2500      	movge	r5, #0
 8012960:	f7ff fcfe 	bl	8012360 <_Balloc>
 8012964:	4602      	mov	r2, r0
 8012966:	b918      	cbnz	r0, 8012970 <__mdiff+0x60>
 8012968:	4b31      	ldr	r3, [pc, #196]	@ (8012a30 <__mdiff+0x120>)
 801296a:	f240 2145 	movw	r1, #581	@ 0x245
 801296e:	e7e3      	b.n	8012938 <__mdiff+0x28>
 8012970:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012974:	6926      	ldr	r6, [r4, #16]
 8012976:	60c5      	str	r5, [r0, #12]
 8012978:	f109 0310 	add.w	r3, r9, #16
 801297c:	f109 0514 	add.w	r5, r9, #20
 8012980:	f104 0e14 	add.w	lr, r4, #20
 8012984:	f100 0b14 	add.w	fp, r0, #20
 8012988:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801298c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012990:	9301      	str	r3, [sp, #4]
 8012992:	46d9      	mov	r9, fp
 8012994:	f04f 0c00 	mov.w	ip, #0
 8012998:	9b01      	ldr	r3, [sp, #4]
 801299a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801299e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80129a2:	9301      	str	r3, [sp, #4]
 80129a4:	fa1f f38a 	uxth.w	r3, sl
 80129a8:	4619      	mov	r1, r3
 80129aa:	b283      	uxth	r3, r0
 80129ac:	1acb      	subs	r3, r1, r3
 80129ae:	0c00      	lsrs	r0, r0, #16
 80129b0:	4463      	add	r3, ip
 80129b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80129b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80129c0:	4576      	cmp	r6, lr
 80129c2:	f849 3b04 	str.w	r3, [r9], #4
 80129c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80129ca:	d8e5      	bhi.n	8012998 <__mdiff+0x88>
 80129cc:	1b33      	subs	r3, r6, r4
 80129ce:	3b15      	subs	r3, #21
 80129d0:	f023 0303 	bic.w	r3, r3, #3
 80129d4:	3415      	adds	r4, #21
 80129d6:	3304      	adds	r3, #4
 80129d8:	42a6      	cmp	r6, r4
 80129da:	bf38      	it	cc
 80129dc:	2304      	movcc	r3, #4
 80129de:	441d      	add	r5, r3
 80129e0:	445b      	add	r3, fp
 80129e2:	461e      	mov	r6, r3
 80129e4:	462c      	mov	r4, r5
 80129e6:	4544      	cmp	r4, r8
 80129e8:	d30e      	bcc.n	8012a08 <__mdiff+0xf8>
 80129ea:	f108 0103 	add.w	r1, r8, #3
 80129ee:	1b49      	subs	r1, r1, r5
 80129f0:	f021 0103 	bic.w	r1, r1, #3
 80129f4:	3d03      	subs	r5, #3
 80129f6:	45a8      	cmp	r8, r5
 80129f8:	bf38      	it	cc
 80129fa:	2100      	movcc	r1, #0
 80129fc:	440b      	add	r3, r1
 80129fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a02:	b191      	cbz	r1, 8012a2a <__mdiff+0x11a>
 8012a04:	6117      	str	r7, [r2, #16]
 8012a06:	e79d      	b.n	8012944 <__mdiff+0x34>
 8012a08:	f854 1b04 	ldr.w	r1, [r4], #4
 8012a0c:	46e6      	mov	lr, ip
 8012a0e:	0c08      	lsrs	r0, r1, #16
 8012a10:	fa1c fc81 	uxtah	ip, ip, r1
 8012a14:	4471      	add	r1, lr
 8012a16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012a1a:	b289      	uxth	r1, r1
 8012a1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012a20:	f846 1b04 	str.w	r1, [r6], #4
 8012a24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a28:	e7dd      	b.n	80129e6 <__mdiff+0xd6>
 8012a2a:	3f01      	subs	r7, #1
 8012a2c:	e7e7      	b.n	80129fe <__mdiff+0xee>
 8012a2e:	bf00      	nop
 8012a30:	08015635 	.word	0x08015635
 8012a34:	08015646 	.word	0x08015646

08012a38 <__ulp>:
 8012a38:	b082      	sub	sp, #8
 8012a3a:	ed8d 0b00 	vstr	d0, [sp]
 8012a3e:	9a01      	ldr	r2, [sp, #4]
 8012a40:	4b0f      	ldr	r3, [pc, #60]	@ (8012a80 <__ulp+0x48>)
 8012a42:	4013      	ands	r3, r2
 8012a44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	dc08      	bgt.n	8012a5e <__ulp+0x26>
 8012a4c:	425b      	negs	r3, r3
 8012a4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012a52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012a56:	da04      	bge.n	8012a62 <__ulp+0x2a>
 8012a58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012a5c:	4113      	asrs	r3, r2
 8012a5e:	2200      	movs	r2, #0
 8012a60:	e008      	b.n	8012a74 <__ulp+0x3c>
 8012a62:	f1a2 0314 	sub.w	r3, r2, #20
 8012a66:	2b1e      	cmp	r3, #30
 8012a68:	bfda      	itte	le
 8012a6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012a6e:	40da      	lsrle	r2, r3
 8012a70:	2201      	movgt	r2, #1
 8012a72:	2300      	movs	r3, #0
 8012a74:	4619      	mov	r1, r3
 8012a76:	4610      	mov	r0, r2
 8012a78:	ec41 0b10 	vmov	d0, r0, r1
 8012a7c:	b002      	add	sp, #8
 8012a7e:	4770      	bx	lr
 8012a80:	7ff00000 	.word	0x7ff00000

08012a84 <__b2d>:
 8012a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a88:	6906      	ldr	r6, [r0, #16]
 8012a8a:	f100 0814 	add.w	r8, r0, #20
 8012a8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012a92:	1f37      	subs	r7, r6, #4
 8012a94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012a98:	4610      	mov	r0, r2
 8012a9a:	f7ff fd53 	bl	8012544 <__hi0bits>
 8012a9e:	f1c0 0320 	rsb	r3, r0, #32
 8012aa2:	280a      	cmp	r0, #10
 8012aa4:	600b      	str	r3, [r1, #0]
 8012aa6:	491b      	ldr	r1, [pc, #108]	@ (8012b14 <__b2d+0x90>)
 8012aa8:	dc15      	bgt.n	8012ad6 <__b2d+0x52>
 8012aaa:	f1c0 0c0b 	rsb	ip, r0, #11
 8012aae:	fa22 f30c 	lsr.w	r3, r2, ip
 8012ab2:	45b8      	cmp	r8, r7
 8012ab4:	ea43 0501 	orr.w	r5, r3, r1
 8012ab8:	bf34      	ite	cc
 8012aba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012abe:	2300      	movcs	r3, #0
 8012ac0:	3015      	adds	r0, #21
 8012ac2:	fa02 f000 	lsl.w	r0, r2, r0
 8012ac6:	fa23 f30c 	lsr.w	r3, r3, ip
 8012aca:	4303      	orrs	r3, r0
 8012acc:	461c      	mov	r4, r3
 8012ace:	ec45 4b10 	vmov	d0, r4, r5
 8012ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad6:	45b8      	cmp	r8, r7
 8012ad8:	bf3a      	itte	cc
 8012ada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012ade:	f1a6 0708 	subcc.w	r7, r6, #8
 8012ae2:	2300      	movcs	r3, #0
 8012ae4:	380b      	subs	r0, #11
 8012ae6:	d012      	beq.n	8012b0e <__b2d+0x8a>
 8012ae8:	f1c0 0120 	rsb	r1, r0, #32
 8012aec:	fa23 f401 	lsr.w	r4, r3, r1
 8012af0:	4082      	lsls	r2, r0
 8012af2:	4322      	orrs	r2, r4
 8012af4:	4547      	cmp	r7, r8
 8012af6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012afa:	bf8c      	ite	hi
 8012afc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012b00:	2200      	movls	r2, #0
 8012b02:	4083      	lsls	r3, r0
 8012b04:	40ca      	lsrs	r2, r1
 8012b06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	e7de      	b.n	8012acc <__b2d+0x48>
 8012b0e:	ea42 0501 	orr.w	r5, r2, r1
 8012b12:	e7db      	b.n	8012acc <__b2d+0x48>
 8012b14:	3ff00000 	.word	0x3ff00000

08012b18 <__d2b>:
 8012b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b1c:	460f      	mov	r7, r1
 8012b1e:	2101      	movs	r1, #1
 8012b20:	ec59 8b10 	vmov	r8, r9, d0
 8012b24:	4616      	mov	r6, r2
 8012b26:	f7ff fc1b 	bl	8012360 <_Balloc>
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	b930      	cbnz	r0, 8012b3c <__d2b+0x24>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	4b23      	ldr	r3, [pc, #140]	@ (8012bc0 <__d2b+0xa8>)
 8012b32:	4824      	ldr	r0, [pc, #144]	@ (8012bc4 <__d2b+0xac>)
 8012b34:	f240 310f 	movw	r1, #783	@ 0x30f
 8012b38:	f001 f98a 	bl	8013e50 <__assert_func>
 8012b3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012b44:	b10d      	cbz	r5, 8012b4a <__d2b+0x32>
 8012b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012b4a:	9301      	str	r3, [sp, #4]
 8012b4c:	f1b8 0300 	subs.w	r3, r8, #0
 8012b50:	d023      	beq.n	8012b9a <__d2b+0x82>
 8012b52:	4668      	mov	r0, sp
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	f7ff fd14 	bl	8012582 <__lo0bits>
 8012b5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012b5e:	b1d0      	cbz	r0, 8012b96 <__d2b+0x7e>
 8012b60:	f1c0 0320 	rsb	r3, r0, #32
 8012b64:	fa02 f303 	lsl.w	r3, r2, r3
 8012b68:	430b      	orrs	r3, r1
 8012b6a:	40c2      	lsrs	r2, r0
 8012b6c:	6163      	str	r3, [r4, #20]
 8012b6e:	9201      	str	r2, [sp, #4]
 8012b70:	9b01      	ldr	r3, [sp, #4]
 8012b72:	61a3      	str	r3, [r4, #24]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	bf0c      	ite	eq
 8012b78:	2201      	moveq	r2, #1
 8012b7a:	2202      	movne	r2, #2
 8012b7c:	6122      	str	r2, [r4, #16]
 8012b7e:	b1a5      	cbz	r5, 8012baa <__d2b+0x92>
 8012b80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012b84:	4405      	add	r5, r0
 8012b86:	603d      	str	r5, [r7, #0]
 8012b88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012b8c:	6030      	str	r0, [r6, #0]
 8012b8e:	4620      	mov	r0, r4
 8012b90:	b003      	add	sp, #12
 8012b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b96:	6161      	str	r1, [r4, #20]
 8012b98:	e7ea      	b.n	8012b70 <__d2b+0x58>
 8012b9a:	a801      	add	r0, sp, #4
 8012b9c:	f7ff fcf1 	bl	8012582 <__lo0bits>
 8012ba0:	9b01      	ldr	r3, [sp, #4]
 8012ba2:	6163      	str	r3, [r4, #20]
 8012ba4:	3020      	adds	r0, #32
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	e7e8      	b.n	8012b7c <__d2b+0x64>
 8012baa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012bae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012bb2:	6038      	str	r0, [r7, #0]
 8012bb4:	6918      	ldr	r0, [r3, #16]
 8012bb6:	f7ff fcc5 	bl	8012544 <__hi0bits>
 8012bba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012bbe:	e7e5      	b.n	8012b8c <__d2b+0x74>
 8012bc0:	08015635 	.word	0x08015635
 8012bc4:	08015646 	.word	0x08015646

08012bc8 <__ratio>:
 8012bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bcc:	b085      	sub	sp, #20
 8012bce:	e9cd 1000 	strd	r1, r0, [sp]
 8012bd2:	a902      	add	r1, sp, #8
 8012bd4:	f7ff ff56 	bl	8012a84 <__b2d>
 8012bd8:	9800      	ldr	r0, [sp, #0]
 8012bda:	a903      	add	r1, sp, #12
 8012bdc:	ec55 4b10 	vmov	r4, r5, d0
 8012be0:	f7ff ff50 	bl	8012a84 <__b2d>
 8012be4:	9b01      	ldr	r3, [sp, #4]
 8012be6:	6919      	ldr	r1, [r3, #16]
 8012be8:	9b00      	ldr	r3, [sp, #0]
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	1ac9      	subs	r1, r1, r3
 8012bee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012bf2:	1a9b      	subs	r3, r3, r2
 8012bf4:	ec5b ab10 	vmov	sl, fp, d0
 8012bf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	bfce      	itee	gt
 8012c00:	462a      	movgt	r2, r5
 8012c02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012c06:	465a      	movle	r2, fp
 8012c08:	462f      	mov	r7, r5
 8012c0a:	46d9      	mov	r9, fp
 8012c0c:	bfcc      	ite	gt
 8012c0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012c12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012c16:	464b      	mov	r3, r9
 8012c18:	4652      	mov	r2, sl
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	4639      	mov	r1, r7
 8012c1e:	f7ed fe3d 	bl	800089c <__aeabi_ddiv>
 8012c22:	ec41 0b10 	vmov	d0, r0, r1
 8012c26:	b005      	add	sp, #20
 8012c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c2c <__copybits>:
 8012c2c:	3901      	subs	r1, #1
 8012c2e:	b570      	push	{r4, r5, r6, lr}
 8012c30:	1149      	asrs	r1, r1, #5
 8012c32:	6914      	ldr	r4, [r2, #16]
 8012c34:	3101      	adds	r1, #1
 8012c36:	f102 0314 	add.w	r3, r2, #20
 8012c3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012c3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012c42:	1f05      	subs	r5, r0, #4
 8012c44:	42a3      	cmp	r3, r4
 8012c46:	d30c      	bcc.n	8012c62 <__copybits+0x36>
 8012c48:	1aa3      	subs	r3, r4, r2
 8012c4a:	3b11      	subs	r3, #17
 8012c4c:	f023 0303 	bic.w	r3, r3, #3
 8012c50:	3211      	adds	r2, #17
 8012c52:	42a2      	cmp	r2, r4
 8012c54:	bf88      	it	hi
 8012c56:	2300      	movhi	r3, #0
 8012c58:	4418      	add	r0, r3
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	4288      	cmp	r0, r1
 8012c5e:	d305      	bcc.n	8012c6c <__copybits+0x40>
 8012c60:	bd70      	pop	{r4, r5, r6, pc}
 8012c62:	f853 6b04 	ldr.w	r6, [r3], #4
 8012c66:	f845 6f04 	str.w	r6, [r5, #4]!
 8012c6a:	e7eb      	b.n	8012c44 <__copybits+0x18>
 8012c6c:	f840 3b04 	str.w	r3, [r0], #4
 8012c70:	e7f4      	b.n	8012c5c <__copybits+0x30>

08012c72 <__any_on>:
 8012c72:	f100 0214 	add.w	r2, r0, #20
 8012c76:	6900      	ldr	r0, [r0, #16]
 8012c78:	114b      	asrs	r3, r1, #5
 8012c7a:	4298      	cmp	r0, r3
 8012c7c:	b510      	push	{r4, lr}
 8012c7e:	db11      	blt.n	8012ca4 <__any_on+0x32>
 8012c80:	dd0a      	ble.n	8012c98 <__any_on+0x26>
 8012c82:	f011 011f 	ands.w	r1, r1, #31
 8012c86:	d007      	beq.n	8012c98 <__any_on+0x26>
 8012c88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012c8c:	fa24 f001 	lsr.w	r0, r4, r1
 8012c90:	fa00 f101 	lsl.w	r1, r0, r1
 8012c94:	428c      	cmp	r4, r1
 8012c96:	d10b      	bne.n	8012cb0 <__any_on+0x3e>
 8012c98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	d803      	bhi.n	8012ca8 <__any_on+0x36>
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	bd10      	pop	{r4, pc}
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	e7f7      	b.n	8012c98 <__any_on+0x26>
 8012ca8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012cac:	2900      	cmp	r1, #0
 8012cae:	d0f5      	beq.n	8012c9c <__any_on+0x2a>
 8012cb0:	2001      	movs	r0, #1
 8012cb2:	e7f6      	b.n	8012ca2 <__any_on+0x30>

08012cb4 <sulp>:
 8012cb4:	b570      	push	{r4, r5, r6, lr}
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	460d      	mov	r5, r1
 8012cba:	ec45 4b10 	vmov	d0, r4, r5
 8012cbe:	4616      	mov	r6, r2
 8012cc0:	f7ff feba 	bl	8012a38 <__ulp>
 8012cc4:	ec51 0b10 	vmov	r0, r1, d0
 8012cc8:	b17e      	cbz	r6, 8012cea <sulp+0x36>
 8012cca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012cce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dd09      	ble.n	8012cea <sulp+0x36>
 8012cd6:	051b      	lsls	r3, r3, #20
 8012cd8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012cdc:	2400      	movs	r4, #0
 8012cde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	462b      	mov	r3, r5
 8012ce6:	f7ed fcaf 	bl	8000648 <__aeabi_dmul>
 8012cea:	ec41 0b10 	vmov	d0, r0, r1
 8012cee:	bd70      	pop	{r4, r5, r6, pc}

08012cf0 <_strtod_l>:
 8012cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf4:	b09f      	sub	sp, #124	@ 0x7c
 8012cf6:	460c      	mov	r4, r1
 8012cf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8012cfe:	9005      	str	r0, [sp, #20]
 8012d00:	f04f 0a00 	mov.w	sl, #0
 8012d04:	f04f 0b00 	mov.w	fp, #0
 8012d08:	460a      	mov	r2, r1
 8012d0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012d0c:	7811      	ldrb	r1, [r2, #0]
 8012d0e:	292b      	cmp	r1, #43	@ 0x2b
 8012d10:	d04a      	beq.n	8012da8 <_strtod_l+0xb8>
 8012d12:	d838      	bhi.n	8012d86 <_strtod_l+0x96>
 8012d14:	290d      	cmp	r1, #13
 8012d16:	d832      	bhi.n	8012d7e <_strtod_l+0x8e>
 8012d18:	2908      	cmp	r1, #8
 8012d1a:	d832      	bhi.n	8012d82 <_strtod_l+0x92>
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	d03b      	beq.n	8012d98 <_strtod_l+0xa8>
 8012d20:	2200      	movs	r2, #0
 8012d22:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012d26:	782a      	ldrb	r2, [r5, #0]
 8012d28:	2a30      	cmp	r2, #48	@ 0x30
 8012d2a:	f040 80b2 	bne.w	8012e92 <_strtod_l+0x1a2>
 8012d2e:	786a      	ldrb	r2, [r5, #1]
 8012d30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012d34:	2a58      	cmp	r2, #88	@ 0x58
 8012d36:	d16e      	bne.n	8012e16 <_strtod_l+0x126>
 8012d38:	9302      	str	r3, [sp, #8]
 8012d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d3c:	9301      	str	r3, [sp, #4]
 8012d3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8012d40:	9300      	str	r3, [sp, #0]
 8012d42:	4a8f      	ldr	r2, [pc, #572]	@ (8012f80 <_strtod_l+0x290>)
 8012d44:	9805      	ldr	r0, [sp, #20]
 8012d46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012d48:	a919      	add	r1, sp, #100	@ 0x64
 8012d4a:	f001 f91b 	bl	8013f84 <__gethex>
 8012d4e:	f010 060f 	ands.w	r6, r0, #15
 8012d52:	4604      	mov	r4, r0
 8012d54:	d005      	beq.n	8012d62 <_strtod_l+0x72>
 8012d56:	2e06      	cmp	r6, #6
 8012d58:	d128      	bne.n	8012dac <_strtod_l+0xbc>
 8012d5a:	3501      	adds	r5, #1
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8012d60:	930e      	str	r3, [sp, #56]	@ 0x38
 8012d62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f040 858e 	bne.w	8013886 <_strtod_l+0xb96>
 8012d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d6c:	b1cb      	cbz	r3, 8012da2 <_strtod_l+0xb2>
 8012d6e:	4652      	mov	r2, sl
 8012d70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012d74:	ec43 2b10 	vmov	d0, r2, r3
 8012d78:	b01f      	add	sp, #124	@ 0x7c
 8012d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7e:	2920      	cmp	r1, #32
 8012d80:	d1ce      	bne.n	8012d20 <_strtod_l+0x30>
 8012d82:	3201      	adds	r2, #1
 8012d84:	e7c1      	b.n	8012d0a <_strtod_l+0x1a>
 8012d86:	292d      	cmp	r1, #45	@ 0x2d
 8012d88:	d1ca      	bne.n	8012d20 <_strtod_l+0x30>
 8012d8a:	2101      	movs	r1, #1
 8012d8c:	910e      	str	r1, [sp, #56]	@ 0x38
 8012d8e:	1c51      	adds	r1, r2, #1
 8012d90:	9119      	str	r1, [sp, #100]	@ 0x64
 8012d92:	7852      	ldrb	r2, [r2, #1]
 8012d94:	2a00      	cmp	r2, #0
 8012d96:	d1c5      	bne.n	8012d24 <_strtod_l+0x34>
 8012d98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f040 8570 	bne.w	8013882 <_strtod_l+0xb92>
 8012da2:	4652      	mov	r2, sl
 8012da4:	465b      	mov	r3, fp
 8012da6:	e7e5      	b.n	8012d74 <_strtod_l+0x84>
 8012da8:	2100      	movs	r1, #0
 8012daa:	e7ef      	b.n	8012d8c <_strtod_l+0x9c>
 8012dac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012dae:	b13a      	cbz	r2, 8012dc0 <_strtod_l+0xd0>
 8012db0:	2135      	movs	r1, #53	@ 0x35
 8012db2:	a81c      	add	r0, sp, #112	@ 0x70
 8012db4:	f7ff ff3a 	bl	8012c2c <__copybits>
 8012db8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012dba:	9805      	ldr	r0, [sp, #20]
 8012dbc:	f7ff fb10 	bl	80123e0 <_Bfree>
 8012dc0:	3e01      	subs	r6, #1
 8012dc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012dc4:	2e04      	cmp	r6, #4
 8012dc6:	d806      	bhi.n	8012dd6 <_strtod_l+0xe6>
 8012dc8:	e8df f006 	tbb	[pc, r6]
 8012dcc:	201d0314 	.word	0x201d0314
 8012dd0:	14          	.byte	0x14
 8012dd1:	00          	.byte	0x00
 8012dd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8012dd6:	05e1      	lsls	r1, r4, #23
 8012dd8:	bf48      	it	mi
 8012dda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012dde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012de2:	0d1b      	lsrs	r3, r3, #20
 8012de4:	051b      	lsls	r3, r3, #20
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d1bb      	bne.n	8012d62 <_strtod_l+0x72>
 8012dea:	f7fe fb1f 	bl	801142c <__errno>
 8012dee:	2322      	movs	r3, #34	@ 0x22
 8012df0:	6003      	str	r3, [r0, #0]
 8012df2:	e7b6      	b.n	8012d62 <_strtod_l+0x72>
 8012df4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012df8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012dfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012e00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012e04:	e7e7      	b.n	8012dd6 <_strtod_l+0xe6>
 8012e06:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012f88 <_strtod_l+0x298>
 8012e0a:	e7e4      	b.n	8012dd6 <_strtod_l+0xe6>
 8012e0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012e10:	f04f 3aff 	mov.w	sl, #4294967295
 8012e14:	e7df      	b.n	8012dd6 <_strtod_l+0xe6>
 8012e16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012e18:	1c5a      	adds	r2, r3, #1
 8012e1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012e1c:	785b      	ldrb	r3, [r3, #1]
 8012e1e:	2b30      	cmp	r3, #48	@ 0x30
 8012e20:	d0f9      	beq.n	8012e16 <_strtod_l+0x126>
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d09d      	beq.n	8012d62 <_strtod_l+0x72>
 8012e26:	2301      	movs	r3, #1
 8012e28:	2700      	movs	r7, #0
 8012e2a:	9308      	str	r3, [sp, #32]
 8012e2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012e2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012e30:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012e32:	46b9      	mov	r9, r7
 8012e34:	220a      	movs	r2, #10
 8012e36:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012e38:	7805      	ldrb	r5, [r0, #0]
 8012e3a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012e3e:	b2d9      	uxtb	r1, r3
 8012e40:	2909      	cmp	r1, #9
 8012e42:	d928      	bls.n	8012e96 <_strtod_l+0x1a6>
 8012e44:	494f      	ldr	r1, [pc, #316]	@ (8012f84 <_strtod_l+0x294>)
 8012e46:	2201      	movs	r2, #1
 8012e48:	f000 ffd6 	bl	8013df8 <strncmp>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	d032      	beq.n	8012eb6 <_strtod_l+0x1c6>
 8012e50:	2000      	movs	r0, #0
 8012e52:	462a      	mov	r2, r5
 8012e54:	900a      	str	r0, [sp, #40]	@ 0x28
 8012e56:	464d      	mov	r5, r9
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2a65      	cmp	r2, #101	@ 0x65
 8012e5c:	d001      	beq.n	8012e62 <_strtod_l+0x172>
 8012e5e:	2a45      	cmp	r2, #69	@ 0x45
 8012e60:	d114      	bne.n	8012e8c <_strtod_l+0x19c>
 8012e62:	b91d      	cbnz	r5, 8012e6c <_strtod_l+0x17c>
 8012e64:	9a08      	ldr	r2, [sp, #32]
 8012e66:	4302      	orrs	r2, r0
 8012e68:	d096      	beq.n	8012d98 <_strtod_l+0xa8>
 8012e6a:	2500      	movs	r5, #0
 8012e6c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012e6e:	1c62      	adds	r2, r4, #1
 8012e70:	9219      	str	r2, [sp, #100]	@ 0x64
 8012e72:	7862      	ldrb	r2, [r4, #1]
 8012e74:	2a2b      	cmp	r2, #43	@ 0x2b
 8012e76:	d07a      	beq.n	8012f6e <_strtod_l+0x27e>
 8012e78:	2a2d      	cmp	r2, #45	@ 0x2d
 8012e7a:	d07e      	beq.n	8012f7a <_strtod_l+0x28a>
 8012e7c:	f04f 0c00 	mov.w	ip, #0
 8012e80:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012e84:	2909      	cmp	r1, #9
 8012e86:	f240 8085 	bls.w	8012f94 <_strtod_l+0x2a4>
 8012e8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8012e8c:	f04f 0800 	mov.w	r8, #0
 8012e90:	e0a5      	b.n	8012fde <_strtod_l+0x2ee>
 8012e92:	2300      	movs	r3, #0
 8012e94:	e7c8      	b.n	8012e28 <_strtod_l+0x138>
 8012e96:	f1b9 0f08 	cmp.w	r9, #8
 8012e9a:	bfd8      	it	le
 8012e9c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8012e9e:	f100 0001 	add.w	r0, r0, #1
 8012ea2:	bfda      	itte	le
 8012ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8012ea8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8012eaa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8012eae:	f109 0901 	add.w	r9, r9, #1
 8012eb2:	9019      	str	r0, [sp, #100]	@ 0x64
 8012eb4:	e7bf      	b.n	8012e36 <_strtod_l+0x146>
 8012eb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012eb8:	1c5a      	adds	r2, r3, #1
 8012eba:	9219      	str	r2, [sp, #100]	@ 0x64
 8012ebc:	785a      	ldrb	r2, [r3, #1]
 8012ebe:	f1b9 0f00 	cmp.w	r9, #0
 8012ec2:	d03b      	beq.n	8012f3c <_strtod_l+0x24c>
 8012ec4:	900a      	str	r0, [sp, #40]	@ 0x28
 8012ec6:	464d      	mov	r5, r9
 8012ec8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012ecc:	2b09      	cmp	r3, #9
 8012ece:	d912      	bls.n	8012ef6 <_strtod_l+0x206>
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	e7c2      	b.n	8012e5a <_strtod_l+0x16a>
 8012ed4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ed6:	1c5a      	adds	r2, r3, #1
 8012ed8:	9219      	str	r2, [sp, #100]	@ 0x64
 8012eda:	785a      	ldrb	r2, [r3, #1]
 8012edc:	3001      	adds	r0, #1
 8012ede:	2a30      	cmp	r2, #48	@ 0x30
 8012ee0:	d0f8      	beq.n	8012ed4 <_strtod_l+0x1e4>
 8012ee2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012ee6:	2b08      	cmp	r3, #8
 8012ee8:	f200 84d2 	bhi.w	8013890 <_strtod_l+0xba0>
 8012eec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012eee:	900a      	str	r0, [sp, #40]	@ 0x28
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	930c      	str	r3, [sp, #48]	@ 0x30
 8012ef4:	4605      	mov	r5, r0
 8012ef6:	3a30      	subs	r2, #48	@ 0x30
 8012ef8:	f100 0301 	add.w	r3, r0, #1
 8012efc:	d018      	beq.n	8012f30 <_strtod_l+0x240>
 8012efe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012f00:	4419      	add	r1, r3
 8012f02:	910a      	str	r1, [sp, #40]	@ 0x28
 8012f04:	462e      	mov	r6, r5
 8012f06:	f04f 0e0a 	mov.w	lr, #10
 8012f0a:	1c71      	adds	r1, r6, #1
 8012f0c:	eba1 0c05 	sub.w	ip, r1, r5
 8012f10:	4563      	cmp	r3, ip
 8012f12:	dc15      	bgt.n	8012f40 <_strtod_l+0x250>
 8012f14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012f18:	182b      	adds	r3, r5, r0
 8012f1a:	2b08      	cmp	r3, #8
 8012f1c:	f105 0501 	add.w	r5, r5, #1
 8012f20:	4405      	add	r5, r0
 8012f22:	dc1a      	bgt.n	8012f5a <_strtod_l+0x26a>
 8012f24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012f26:	230a      	movs	r3, #10
 8012f28:	fb03 2301 	mla	r3, r3, r1, r2
 8012f2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f2e:	2300      	movs	r3, #0
 8012f30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012f32:	1c51      	adds	r1, r2, #1
 8012f34:	9119      	str	r1, [sp, #100]	@ 0x64
 8012f36:	7852      	ldrb	r2, [r2, #1]
 8012f38:	4618      	mov	r0, r3
 8012f3a:	e7c5      	b.n	8012ec8 <_strtod_l+0x1d8>
 8012f3c:	4648      	mov	r0, r9
 8012f3e:	e7ce      	b.n	8012ede <_strtod_l+0x1ee>
 8012f40:	2e08      	cmp	r6, #8
 8012f42:	dc05      	bgt.n	8012f50 <_strtod_l+0x260>
 8012f44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012f46:	fb0e f606 	mul.w	r6, lr, r6
 8012f4a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8012f4c:	460e      	mov	r6, r1
 8012f4e:	e7dc      	b.n	8012f0a <_strtod_l+0x21a>
 8012f50:	2910      	cmp	r1, #16
 8012f52:	bfd8      	it	le
 8012f54:	fb0e f707 	mulle.w	r7, lr, r7
 8012f58:	e7f8      	b.n	8012f4c <_strtod_l+0x25c>
 8012f5a:	2b0f      	cmp	r3, #15
 8012f5c:	bfdc      	itt	le
 8012f5e:	230a      	movle	r3, #10
 8012f60:	fb03 2707 	mlale	r7, r3, r7, r2
 8012f64:	e7e3      	b.n	8012f2e <_strtod_l+0x23e>
 8012f66:	2300      	movs	r3, #0
 8012f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e77a      	b.n	8012e64 <_strtod_l+0x174>
 8012f6e:	f04f 0c00 	mov.w	ip, #0
 8012f72:	1ca2      	adds	r2, r4, #2
 8012f74:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f76:	78a2      	ldrb	r2, [r4, #2]
 8012f78:	e782      	b.n	8012e80 <_strtod_l+0x190>
 8012f7a:	f04f 0c01 	mov.w	ip, #1
 8012f7e:	e7f8      	b.n	8012f72 <_strtod_l+0x282>
 8012f80:	0801586c 	.word	0x0801586c
 8012f84:	0801569f 	.word	0x0801569f
 8012f88:	7ff00000 	.word	0x7ff00000
 8012f8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012f8e:	1c51      	adds	r1, r2, #1
 8012f90:	9119      	str	r1, [sp, #100]	@ 0x64
 8012f92:	7852      	ldrb	r2, [r2, #1]
 8012f94:	2a30      	cmp	r2, #48	@ 0x30
 8012f96:	d0f9      	beq.n	8012f8c <_strtod_l+0x29c>
 8012f98:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012f9c:	2908      	cmp	r1, #8
 8012f9e:	f63f af75 	bhi.w	8012e8c <_strtod_l+0x19c>
 8012fa2:	3a30      	subs	r2, #48	@ 0x30
 8012fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012fa6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012fa8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012faa:	f04f 080a 	mov.w	r8, #10
 8012fae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012fb0:	1c56      	adds	r6, r2, #1
 8012fb2:	9619      	str	r6, [sp, #100]	@ 0x64
 8012fb4:	7852      	ldrb	r2, [r2, #1]
 8012fb6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012fba:	f1be 0f09 	cmp.w	lr, #9
 8012fbe:	d939      	bls.n	8013034 <_strtod_l+0x344>
 8012fc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012fc2:	1a76      	subs	r6, r6, r1
 8012fc4:	2e08      	cmp	r6, #8
 8012fc6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012fca:	dc03      	bgt.n	8012fd4 <_strtod_l+0x2e4>
 8012fcc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012fce:	4588      	cmp	r8, r1
 8012fd0:	bfa8      	it	ge
 8012fd2:	4688      	movge	r8, r1
 8012fd4:	f1bc 0f00 	cmp.w	ip, #0
 8012fd8:	d001      	beq.n	8012fde <_strtod_l+0x2ee>
 8012fda:	f1c8 0800 	rsb	r8, r8, #0
 8012fde:	2d00      	cmp	r5, #0
 8012fe0:	d14e      	bne.n	8013080 <_strtod_l+0x390>
 8012fe2:	9908      	ldr	r1, [sp, #32]
 8012fe4:	4308      	orrs	r0, r1
 8012fe6:	f47f aebc 	bne.w	8012d62 <_strtod_l+0x72>
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	f47f aed4 	bne.w	8012d98 <_strtod_l+0xa8>
 8012ff0:	2a69      	cmp	r2, #105	@ 0x69
 8012ff2:	d028      	beq.n	8013046 <_strtod_l+0x356>
 8012ff4:	dc25      	bgt.n	8013042 <_strtod_l+0x352>
 8012ff6:	2a49      	cmp	r2, #73	@ 0x49
 8012ff8:	d025      	beq.n	8013046 <_strtod_l+0x356>
 8012ffa:	2a4e      	cmp	r2, #78	@ 0x4e
 8012ffc:	f47f aecc 	bne.w	8012d98 <_strtod_l+0xa8>
 8013000:	499a      	ldr	r1, [pc, #616]	@ (801326c <_strtod_l+0x57c>)
 8013002:	a819      	add	r0, sp, #100	@ 0x64
 8013004:	f001 f9e0 	bl	80143c8 <__match>
 8013008:	2800      	cmp	r0, #0
 801300a:	f43f aec5 	beq.w	8012d98 <_strtod_l+0xa8>
 801300e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	2b28      	cmp	r3, #40	@ 0x28
 8013014:	d12e      	bne.n	8013074 <_strtod_l+0x384>
 8013016:	4996      	ldr	r1, [pc, #600]	@ (8013270 <_strtod_l+0x580>)
 8013018:	aa1c      	add	r2, sp, #112	@ 0x70
 801301a:	a819      	add	r0, sp, #100	@ 0x64
 801301c:	f001 f9e8 	bl	80143f0 <__hexnan>
 8013020:	2805      	cmp	r0, #5
 8013022:	d127      	bne.n	8013074 <_strtod_l+0x384>
 8013024:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013026:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801302a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801302e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013032:	e696      	b.n	8012d62 <_strtod_l+0x72>
 8013034:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013036:	fb08 2101 	mla	r1, r8, r1, r2
 801303a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801303e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013040:	e7b5      	b.n	8012fae <_strtod_l+0x2be>
 8013042:	2a6e      	cmp	r2, #110	@ 0x6e
 8013044:	e7da      	b.n	8012ffc <_strtod_l+0x30c>
 8013046:	498b      	ldr	r1, [pc, #556]	@ (8013274 <_strtod_l+0x584>)
 8013048:	a819      	add	r0, sp, #100	@ 0x64
 801304a:	f001 f9bd 	bl	80143c8 <__match>
 801304e:	2800      	cmp	r0, #0
 8013050:	f43f aea2 	beq.w	8012d98 <_strtod_l+0xa8>
 8013054:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013056:	4988      	ldr	r1, [pc, #544]	@ (8013278 <_strtod_l+0x588>)
 8013058:	3b01      	subs	r3, #1
 801305a:	a819      	add	r0, sp, #100	@ 0x64
 801305c:	9319      	str	r3, [sp, #100]	@ 0x64
 801305e:	f001 f9b3 	bl	80143c8 <__match>
 8013062:	b910      	cbnz	r0, 801306a <_strtod_l+0x37a>
 8013064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013066:	3301      	adds	r3, #1
 8013068:	9319      	str	r3, [sp, #100]	@ 0x64
 801306a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8013288 <_strtod_l+0x598>
 801306e:	f04f 0a00 	mov.w	sl, #0
 8013072:	e676      	b.n	8012d62 <_strtod_l+0x72>
 8013074:	4881      	ldr	r0, [pc, #516]	@ (801327c <_strtod_l+0x58c>)
 8013076:	f000 fee3 	bl	8013e40 <nan>
 801307a:	ec5b ab10 	vmov	sl, fp, d0
 801307e:	e670      	b.n	8012d62 <_strtod_l+0x72>
 8013080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013082:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013084:	eba8 0303 	sub.w	r3, r8, r3
 8013088:	f1b9 0f00 	cmp.w	r9, #0
 801308c:	bf08      	it	eq
 801308e:	46a9      	moveq	r9, r5
 8013090:	2d10      	cmp	r5, #16
 8013092:	9309      	str	r3, [sp, #36]	@ 0x24
 8013094:	462c      	mov	r4, r5
 8013096:	bfa8      	it	ge
 8013098:	2410      	movge	r4, #16
 801309a:	f7ed fa5b 	bl	8000554 <__aeabi_ui2d>
 801309e:	2d09      	cmp	r5, #9
 80130a0:	4682      	mov	sl, r0
 80130a2:	468b      	mov	fp, r1
 80130a4:	dc13      	bgt.n	80130ce <_strtod_l+0x3de>
 80130a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	f43f ae5a 	beq.w	8012d62 <_strtod_l+0x72>
 80130ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130b0:	dd78      	ble.n	80131a4 <_strtod_l+0x4b4>
 80130b2:	2b16      	cmp	r3, #22
 80130b4:	dc5f      	bgt.n	8013176 <_strtod_l+0x486>
 80130b6:	4972      	ldr	r1, [pc, #456]	@ (8013280 <_strtod_l+0x590>)
 80130b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80130bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130c0:	4652      	mov	r2, sl
 80130c2:	465b      	mov	r3, fp
 80130c4:	f7ed fac0 	bl	8000648 <__aeabi_dmul>
 80130c8:	4682      	mov	sl, r0
 80130ca:	468b      	mov	fp, r1
 80130cc:	e649      	b.n	8012d62 <_strtod_l+0x72>
 80130ce:	4b6c      	ldr	r3, [pc, #432]	@ (8013280 <_strtod_l+0x590>)
 80130d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80130d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80130d8:	f7ed fab6 	bl	8000648 <__aeabi_dmul>
 80130dc:	4682      	mov	sl, r0
 80130de:	4638      	mov	r0, r7
 80130e0:	468b      	mov	fp, r1
 80130e2:	f7ed fa37 	bl	8000554 <__aeabi_ui2d>
 80130e6:	4602      	mov	r2, r0
 80130e8:	460b      	mov	r3, r1
 80130ea:	4650      	mov	r0, sl
 80130ec:	4659      	mov	r1, fp
 80130ee:	f7ed f8f5 	bl	80002dc <__adddf3>
 80130f2:	2d0f      	cmp	r5, #15
 80130f4:	4682      	mov	sl, r0
 80130f6:	468b      	mov	fp, r1
 80130f8:	ddd5      	ble.n	80130a6 <_strtod_l+0x3b6>
 80130fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130fc:	1b2c      	subs	r4, r5, r4
 80130fe:	441c      	add	r4, r3
 8013100:	2c00      	cmp	r4, #0
 8013102:	f340 8093 	ble.w	801322c <_strtod_l+0x53c>
 8013106:	f014 030f 	ands.w	r3, r4, #15
 801310a:	d00a      	beq.n	8013122 <_strtod_l+0x432>
 801310c:	495c      	ldr	r1, [pc, #368]	@ (8013280 <_strtod_l+0x590>)
 801310e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013112:	4652      	mov	r2, sl
 8013114:	465b      	mov	r3, fp
 8013116:	e9d1 0100 	ldrd	r0, r1, [r1]
 801311a:	f7ed fa95 	bl	8000648 <__aeabi_dmul>
 801311e:	4682      	mov	sl, r0
 8013120:	468b      	mov	fp, r1
 8013122:	f034 040f 	bics.w	r4, r4, #15
 8013126:	d073      	beq.n	8013210 <_strtod_l+0x520>
 8013128:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801312c:	dd49      	ble.n	80131c2 <_strtod_l+0x4d2>
 801312e:	2400      	movs	r4, #0
 8013130:	46a0      	mov	r8, r4
 8013132:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013134:	46a1      	mov	r9, r4
 8013136:	9a05      	ldr	r2, [sp, #20]
 8013138:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8013288 <_strtod_l+0x598>
 801313c:	2322      	movs	r3, #34	@ 0x22
 801313e:	6013      	str	r3, [r2, #0]
 8013140:	f04f 0a00 	mov.w	sl, #0
 8013144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013146:	2b00      	cmp	r3, #0
 8013148:	f43f ae0b 	beq.w	8012d62 <_strtod_l+0x72>
 801314c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801314e:	9805      	ldr	r0, [sp, #20]
 8013150:	f7ff f946 	bl	80123e0 <_Bfree>
 8013154:	9805      	ldr	r0, [sp, #20]
 8013156:	4649      	mov	r1, r9
 8013158:	f7ff f942 	bl	80123e0 <_Bfree>
 801315c:	9805      	ldr	r0, [sp, #20]
 801315e:	4641      	mov	r1, r8
 8013160:	f7ff f93e 	bl	80123e0 <_Bfree>
 8013164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013166:	9805      	ldr	r0, [sp, #20]
 8013168:	f7ff f93a 	bl	80123e0 <_Bfree>
 801316c:	9805      	ldr	r0, [sp, #20]
 801316e:	4621      	mov	r1, r4
 8013170:	f7ff f936 	bl	80123e0 <_Bfree>
 8013174:	e5f5      	b.n	8012d62 <_strtod_l+0x72>
 8013176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013178:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801317c:	4293      	cmp	r3, r2
 801317e:	dbbc      	blt.n	80130fa <_strtod_l+0x40a>
 8013180:	4c3f      	ldr	r4, [pc, #252]	@ (8013280 <_strtod_l+0x590>)
 8013182:	f1c5 050f 	rsb	r5, r5, #15
 8013186:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801318a:	4652      	mov	r2, sl
 801318c:	465b      	mov	r3, fp
 801318e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013192:	f7ed fa59 	bl	8000648 <__aeabi_dmul>
 8013196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013198:	1b5d      	subs	r5, r3, r5
 801319a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801319e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80131a2:	e78f      	b.n	80130c4 <_strtod_l+0x3d4>
 80131a4:	3316      	adds	r3, #22
 80131a6:	dba8      	blt.n	80130fa <_strtod_l+0x40a>
 80131a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131aa:	eba3 0808 	sub.w	r8, r3, r8
 80131ae:	4b34      	ldr	r3, [pc, #208]	@ (8013280 <_strtod_l+0x590>)
 80131b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80131b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80131b8:	4650      	mov	r0, sl
 80131ba:	4659      	mov	r1, fp
 80131bc:	f7ed fb6e 	bl	800089c <__aeabi_ddiv>
 80131c0:	e782      	b.n	80130c8 <_strtod_l+0x3d8>
 80131c2:	2300      	movs	r3, #0
 80131c4:	4f2f      	ldr	r7, [pc, #188]	@ (8013284 <_strtod_l+0x594>)
 80131c6:	1124      	asrs	r4, r4, #4
 80131c8:	4650      	mov	r0, sl
 80131ca:	4659      	mov	r1, fp
 80131cc:	461e      	mov	r6, r3
 80131ce:	2c01      	cmp	r4, #1
 80131d0:	dc21      	bgt.n	8013216 <_strtod_l+0x526>
 80131d2:	b10b      	cbz	r3, 80131d8 <_strtod_l+0x4e8>
 80131d4:	4682      	mov	sl, r0
 80131d6:	468b      	mov	fp, r1
 80131d8:	492a      	ldr	r1, [pc, #168]	@ (8013284 <_strtod_l+0x594>)
 80131da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80131de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80131e2:	4652      	mov	r2, sl
 80131e4:	465b      	mov	r3, fp
 80131e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131ea:	f7ed fa2d 	bl	8000648 <__aeabi_dmul>
 80131ee:	4b26      	ldr	r3, [pc, #152]	@ (8013288 <_strtod_l+0x598>)
 80131f0:	460a      	mov	r2, r1
 80131f2:	400b      	ands	r3, r1
 80131f4:	4925      	ldr	r1, [pc, #148]	@ (801328c <_strtod_l+0x59c>)
 80131f6:	428b      	cmp	r3, r1
 80131f8:	4682      	mov	sl, r0
 80131fa:	d898      	bhi.n	801312e <_strtod_l+0x43e>
 80131fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013200:	428b      	cmp	r3, r1
 8013202:	bf86      	itte	hi
 8013204:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013290 <_strtod_l+0x5a0>
 8013208:	f04f 3aff 	movhi.w	sl, #4294967295
 801320c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013210:	2300      	movs	r3, #0
 8013212:	9308      	str	r3, [sp, #32]
 8013214:	e076      	b.n	8013304 <_strtod_l+0x614>
 8013216:	07e2      	lsls	r2, r4, #31
 8013218:	d504      	bpl.n	8013224 <_strtod_l+0x534>
 801321a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801321e:	f7ed fa13 	bl	8000648 <__aeabi_dmul>
 8013222:	2301      	movs	r3, #1
 8013224:	3601      	adds	r6, #1
 8013226:	1064      	asrs	r4, r4, #1
 8013228:	3708      	adds	r7, #8
 801322a:	e7d0      	b.n	80131ce <_strtod_l+0x4de>
 801322c:	d0f0      	beq.n	8013210 <_strtod_l+0x520>
 801322e:	4264      	negs	r4, r4
 8013230:	f014 020f 	ands.w	r2, r4, #15
 8013234:	d00a      	beq.n	801324c <_strtod_l+0x55c>
 8013236:	4b12      	ldr	r3, [pc, #72]	@ (8013280 <_strtod_l+0x590>)
 8013238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801323c:	4650      	mov	r0, sl
 801323e:	4659      	mov	r1, fp
 8013240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013244:	f7ed fb2a 	bl	800089c <__aeabi_ddiv>
 8013248:	4682      	mov	sl, r0
 801324a:	468b      	mov	fp, r1
 801324c:	1124      	asrs	r4, r4, #4
 801324e:	d0df      	beq.n	8013210 <_strtod_l+0x520>
 8013250:	2c1f      	cmp	r4, #31
 8013252:	dd1f      	ble.n	8013294 <_strtod_l+0x5a4>
 8013254:	2400      	movs	r4, #0
 8013256:	46a0      	mov	r8, r4
 8013258:	940b      	str	r4, [sp, #44]	@ 0x2c
 801325a:	46a1      	mov	r9, r4
 801325c:	9a05      	ldr	r2, [sp, #20]
 801325e:	2322      	movs	r3, #34	@ 0x22
 8013260:	f04f 0a00 	mov.w	sl, #0
 8013264:	f04f 0b00 	mov.w	fp, #0
 8013268:	6013      	str	r3, [r2, #0]
 801326a:	e76b      	b.n	8013144 <_strtod_l+0x454>
 801326c:	0801558d 	.word	0x0801558d
 8013270:	08015858 	.word	0x08015858
 8013274:	08015585 	.word	0x08015585
 8013278:	080155bc 	.word	0x080155bc
 801327c:	080156f5 	.word	0x080156f5
 8013280:	08015790 	.word	0x08015790
 8013284:	08015768 	.word	0x08015768
 8013288:	7ff00000 	.word	0x7ff00000
 801328c:	7ca00000 	.word	0x7ca00000
 8013290:	7fefffff 	.word	0x7fefffff
 8013294:	f014 0310 	ands.w	r3, r4, #16
 8013298:	bf18      	it	ne
 801329a:	236a      	movne	r3, #106	@ 0x6a
 801329c:	4ea9      	ldr	r6, [pc, #676]	@ (8013544 <_strtod_l+0x854>)
 801329e:	9308      	str	r3, [sp, #32]
 80132a0:	4650      	mov	r0, sl
 80132a2:	4659      	mov	r1, fp
 80132a4:	2300      	movs	r3, #0
 80132a6:	07e7      	lsls	r7, r4, #31
 80132a8:	d504      	bpl.n	80132b4 <_strtod_l+0x5c4>
 80132aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80132ae:	f7ed f9cb 	bl	8000648 <__aeabi_dmul>
 80132b2:	2301      	movs	r3, #1
 80132b4:	1064      	asrs	r4, r4, #1
 80132b6:	f106 0608 	add.w	r6, r6, #8
 80132ba:	d1f4      	bne.n	80132a6 <_strtod_l+0x5b6>
 80132bc:	b10b      	cbz	r3, 80132c2 <_strtod_l+0x5d2>
 80132be:	4682      	mov	sl, r0
 80132c0:	468b      	mov	fp, r1
 80132c2:	9b08      	ldr	r3, [sp, #32]
 80132c4:	b1b3      	cbz	r3, 80132f4 <_strtod_l+0x604>
 80132c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80132ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	4659      	mov	r1, fp
 80132d2:	dd0f      	ble.n	80132f4 <_strtod_l+0x604>
 80132d4:	2b1f      	cmp	r3, #31
 80132d6:	dd56      	ble.n	8013386 <_strtod_l+0x696>
 80132d8:	2b34      	cmp	r3, #52	@ 0x34
 80132da:	bfde      	ittt	le
 80132dc:	f04f 33ff 	movle.w	r3, #4294967295
 80132e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80132e4:	4093      	lslle	r3, r2
 80132e6:	f04f 0a00 	mov.w	sl, #0
 80132ea:	bfcc      	ite	gt
 80132ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80132f0:	ea03 0b01 	andle.w	fp, r3, r1
 80132f4:	2200      	movs	r2, #0
 80132f6:	2300      	movs	r3, #0
 80132f8:	4650      	mov	r0, sl
 80132fa:	4659      	mov	r1, fp
 80132fc:	f7ed fc0c 	bl	8000b18 <__aeabi_dcmpeq>
 8013300:	2800      	cmp	r0, #0
 8013302:	d1a7      	bne.n	8013254 <_strtod_l+0x564>
 8013304:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013306:	9300      	str	r3, [sp, #0]
 8013308:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801330a:	9805      	ldr	r0, [sp, #20]
 801330c:	462b      	mov	r3, r5
 801330e:	464a      	mov	r2, r9
 8013310:	f7ff f8ce 	bl	80124b0 <__s2b>
 8013314:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013316:	2800      	cmp	r0, #0
 8013318:	f43f af09 	beq.w	801312e <_strtod_l+0x43e>
 801331c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801331e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013320:	2a00      	cmp	r2, #0
 8013322:	eba3 0308 	sub.w	r3, r3, r8
 8013326:	bfa8      	it	ge
 8013328:	2300      	movge	r3, #0
 801332a:	9312      	str	r3, [sp, #72]	@ 0x48
 801332c:	2400      	movs	r4, #0
 801332e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013332:	9316      	str	r3, [sp, #88]	@ 0x58
 8013334:	46a0      	mov	r8, r4
 8013336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013338:	9805      	ldr	r0, [sp, #20]
 801333a:	6859      	ldr	r1, [r3, #4]
 801333c:	f7ff f810 	bl	8012360 <_Balloc>
 8013340:	4681      	mov	r9, r0
 8013342:	2800      	cmp	r0, #0
 8013344:	f43f aef7 	beq.w	8013136 <_strtod_l+0x446>
 8013348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801334a:	691a      	ldr	r2, [r3, #16]
 801334c:	3202      	adds	r2, #2
 801334e:	f103 010c 	add.w	r1, r3, #12
 8013352:	0092      	lsls	r2, r2, #2
 8013354:	300c      	adds	r0, #12
 8013356:	f7fe f896 	bl	8011486 <memcpy>
 801335a:	ec4b ab10 	vmov	d0, sl, fp
 801335e:	9805      	ldr	r0, [sp, #20]
 8013360:	aa1c      	add	r2, sp, #112	@ 0x70
 8013362:	a91b      	add	r1, sp, #108	@ 0x6c
 8013364:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013368:	f7ff fbd6 	bl	8012b18 <__d2b>
 801336c:	901a      	str	r0, [sp, #104]	@ 0x68
 801336e:	2800      	cmp	r0, #0
 8013370:	f43f aee1 	beq.w	8013136 <_strtod_l+0x446>
 8013374:	9805      	ldr	r0, [sp, #20]
 8013376:	2101      	movs	r1, #1
 8013378:	f7ff f930 	bl	80125dc <__i2b>
 801337c:	4680      	mov	r8, r0
 801337e:	b948      	cbnz	r0, 8013394 <_strtod_l+0x6a4>
 8013380:	f04f 0800 	mov.w	r8, #0
 8013384:	e6d7      	b.n	8013136 <_strtod_l+0x446>
 8013386:	f04f 32ff 	mov.w	r2, #4294967295
 801338a:	fa02 f303 	lsl.w	r3, r2, r3
 801338e:	ea03 0a0a 	and.w	sl, r3, sl
 8013392:	e7af      	b.n	80132f4 <_strtod_l+0x604>
 8013394:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013396:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013398:	2d00      	cmp	r5, #0
 801339a:	bfab      	itete	ge
 801339c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801339e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80133a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80133a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80133a4:	bfac      	ite	ge
 80133a6:	18ef      	addge	r7, r5, r3
 80133a8:	1b5e      	sublt	r6, r3, r5
 80133aa:	9b08      	ldr	r3, [sp, #32]
 80133ac:	1aed      	subs	r5, r5, r3
 80133ae:	4415      	add	r5, r2
 80133b0:	4b65      	ldr	r3, [pc, #404]	@ (8013548 <_strtod_l+0x858>)
 80133b2:	3d01      	subs	r5, #1
 80133b4:	429d      	cmp	r5, r3
 80133b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80133ba:	da50      	bge.n	801345e <_strtod_l+0x76e>
 80133bc:	1b5b      	subs	r3, r3, r5
 80133be:	2b1f      	cmp	r3, #31
 80133c0:	eba2 0203 	sub.w	r2, r2, r3
 80133c4:	f04f 0101 	mov.w	r1, #1
 80133c8:	dc3d      	bgt.n	8013446 <_strtod_l+0x756>
 80133ca:	fa01 f303 	lsl.w	r3, r1, r3
 80133ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80133d0:	2300      	movs	r3, #0
 80133d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80133d4:	18bd      	adds	r5, r7, r2
 80133d6:	9b08      	ldr	r3, [sp, #32]
 80133d8:	42af      	cmp	r7, r5
 80133da:	4416      	add	r6, r2
 80133dc:	441e      	add	r6, r3
 80133de:	463b      	mov	r3, r7
 80133e0:	bfa8      	it	ge
 80133e2:	462b      	movge	r3, r5
 80133e4:	42b3      	cmp	r3, r6
 80133e6:	bfa8      	it	ge
 80133e8:	4633      	movge	r3, r6
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	bfc2      	ittt	gt
 80133ee:	1aed      	subgt	r5, r5, r3
 80133f0:	1af6      	subgt	r6, r6, r3
 80133f2:	1aff      	subgt	r7, r7, r3
 80133f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	dd16      	ble.n	8013428 <_strtod_l+0x738>
 80133fa:	4641      	mov	r1, r8
 80133fc:	9805      	ldr	r0, [sp, #20]
 80133fe:	461a      	mov	r2, r3
 8013400:	f7ff f9a4 	bl	801274c <__pow5mult>
 8013404:	4680      	mov	r8, r0
 8013406:	2800      	cmp	r0, #0
 8013408:	d0ba      	beq.n	8013380 <_strtod_l+0x690>
 801340a:	4601      	mov	r1, r0
 801340c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801340e:	9805      	ldr	r0, [sp, #20]
 8013410:	f7ff f8fa 	bl	8012608 <__multiply>
 8013414:	900a      	str	r0, [sp, #40]	@ 0x28
 8013416:	2800      	cmp	r0, #0
 8013418:	f43f ae8d 	beq.w	8013136 <_strtod_l+0x446>
 801341c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801341e:	9805      	ldr	r0, [sp, #20]
 8013420:	f7fe ffde 	bl	80123e0 <_Bfree>
 8013424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013426:	931a      	str	r3, [sp, #104]	@ 0x68
 8013428:	2d00      	cmp	r5, #0
 801342a:	dc1d      	bgt.n	8013468 <_strtod_l+0x778>
 801342c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801342e:	2b00      	cmp	r3, #0
 8013430:	dd23      	ble.n	801347a <_strtod_l+0x78a>
 8013432:	4649      	mov	r1, r9
 8013434:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013436:	9805      	ldr	r0, [sp, #20]
 8013438:	f7ff f988 	bl	801274c <__pow5mult>
 801343c:	4681      	mov	r9, r0
 801343e:	b9e0      	cbnz	r0, 801347a <_strtod_l+0x78a>
 8013440:	f04f 0900 	mov.w	r9, #0
 8013444:	e677      	b.n	8013136 <_strtod_l+0x446>
 8013446:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801344a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801344e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013452:	35e2      	adds	r5, #226	@ 0xe2
 8013454:	fa01 f305 	lsl.w	r3, r1, r5
 8013458:	9310      	str	r3, [sp, #64]	@ 0x40
 801345a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801345c:	e7ba      	b.n	80133d4 <_strtod_l+0x6e4>
 801345e:	2300      	movs	r3, #0
 8013460:	9310      	str	r3, [sp, #64]	@ 0x40
 8013462:	2301      	movs	r3, #1
 8013464:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013466:	e7b5      	b.n	80133d4 <_strtod_l+0x6e4>
 8013468:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801346a:	9805      	ldr	r0, [sp, #20]
 801346c:	462a      	mov	r2, r5
 801346e:	f7ff f9c7 	bl	8012800 <__lshift>
 8013472:	901a      	str	r0, [sp, #104]	@ 0x68
 8013474:	2800      	cmp	r0, #0
 8013476:	d1d9      	bne.n	801342c <_strtod_l+0x73c>
 8013478:	e65d      	b.n	8013136 <_strtod_l+0x446>
 801347a:	2e00      	cmp	r6, #0
 801347c:	dd07      	ble.n	801348e <_strtod_l+0x79e>
 801347e:	4649      	mov	r1, r9
 8013480:	9805      	ldr	r0, [sp, #20]
 8013482:	4632      	mov	r2, r6
 8013484:	f7ff f9bc 	bl	8012800 <__lshift>
 8013488:	4681      	mov	r9, r0
 801348a:	2800      	cmp	r0, #0
 801348c:	d0d8      	beq.n	8013440 <_strtod_l+0x750>
 801348e:	2f00      	cmp	r7, #0
 8013490:	dd08      	ble.n	80134a4 <_strtod_l+0x7b4>
 8013492:	4641      	mov	r1, r8
 8013494:	9805      	ldr	r0, [sp, #20]
 8013496:	463a      	mov	r2, r7
 8013498:	f7ff f9b2 	bl	8012800 <__lshift>
 801349c:	4680      	mov	r8, r0
 801349e:	2800      	cmp	r0, #0
 80134a0:	f43f ae49 	beq.w	8013136 <_strtod_l+0x446>
 80134a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80134a6:	9805      	ldr	r0, [sp, #20]
 80134a8:	464a      	mov	r2, r9
 80134aa:	f7ff fa31 	bl	8012910 <__mdiff>
 80134ae:	4604      	mov	r4, r0
 80134b0:	2800      	cmp	r0, #0
 80134b2:	f43f ae40 	beq.w	8013136 <_strtod_l+0x446>
 80134b6:	68c3      	ldr	r3, [r0, #12]
 80134b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80134ba:	2300      	movs	r3, #0
 80134bc:	60c3      	str	r3, [r0, #12]
 80134be:	4641      	mov	r1, r8
 80134c0:	f7ff fa0a 	bl	80128d8 <__mcmp>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	da45      	bge.n	8013554 <_strtod_l+0x864>
 80134c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134ca:	ea53 030a 	orrs.w	r3, r3, sl
 80134ce:	d16b      	bne.n	80135a8 <_strtod_l+0x8b8>
 80134d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d167      	bne.n	80135a8 <_strtod_l+0x8b8>
 80134d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80134dc:	0d1b      	lsrs	r3, r3, #20
 80134de:	051b      	lsls	r3, r3, #20
 80134e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80134e4:	d960      	bls.n	80135a8 <_strtod_l+0x8b8>
 80134e6:	6963      	ldr	r3, [r4, #20]
 80134e8:	b913      	cbnz	r3, 80134f0 <_strtod_l+0x800>
 80134ea:	6923      	ldr	r3, [r4, #16]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	dd5b      	ble.n	80135a8 <_strtod_l+0x8b8>
 80134f0:	4621      	mov	r1, r4
 80134f2:	2201      	movs	r2, #1
 80134f4:	9805      	ldr	r0, [sp, #20]
 80134f6:	f7ff f983 	bl	8012800 <__lshift>
 80134fa:	4641      	mov	r1, r8
 80134fc:	4604      	mov	r4, r0
 80134fe:	f7ff f9eb 	bl	80128d8 <__mcmp>
 8013502:	2800      	cmp	r0, #0
 8013504:	dd50      	ble.n	80135a8 <_strtod_l+0x8b8>
 8013506:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801350a:	9a08      	ldr	r2, [sp, #32]
 801350c:	0d1b      	lsrs	r3, r3, #20
 801350e:	051b      	lsls	r3, r3, #20
 8013510:	2a00      	cmp	r2, #0
 8013512:	d06a      	beq.n	80135ea <_strtod_l+0x8fa>
 8013514:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013518:	d867      	bhi.n	80135ea <_strtod_l+0x8fa>
 801351a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801351e:	f67f ae9d 	bls.w	801325c <_strtod_l+0x56c>
 8013522:	4b0a      	ldr	r3, [pc, #40]	@ (801354c <_strtod_l+0x85c>)
 8013524:	4650      	mov	r0, sl
 8013526:	4659      	mov	r1, fp
 8013528:	2200      	movs	r2, #0
 801352a:	f7ed f88d 	bl	8000648 <__aeabi_dmul>
 801352e:	4b08      	ldr	r3, [pc, #32]	@ (8013550 <_strtod_l+0x860>)
 8013530:	400b      	ands	r3, r1
 8013532:	4682      	mov	sl, r0
 8013534:	468b      	mov	fp, r1
 8013536:	2b00      	cmp	r3, #0
 8013538:	f47f ae08 	bne.w	801314c <_strtod_l+0x45c>
 801353c:	9a05      	ldr	r2, [sp, #20]
 801353e:	2322      	movs	r3, #34	@ 0x22
 8013540:	6013      	str	r3, [r2, #0]
 8013542:	e603      	b.n	801314c <_strtod_l+0x45c>
 8013544:	08015880 	.word	0x08015880
 8013548:	fffffc02 	.word	0xfffffc02
 801354c:	39500000 	.word	0x39500000
 8013550:	7ff00000 	.word	0x7ff00000
 8013554:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013558:	d165      	bne.n	8013626 <_strtod_l+0x936>
 801355a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801355c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013560:	b35a      	cbz	r2, 80135ba <_strtod_l+0x8ca>
 8013562:	4a9f      	ldr	r2, [pc, #636]	@ (80137e0 <_strtod_l+0xaf0>)
 8013564:	4293      	cmp	r3, r2
 8013566:	d12b      	bne.n	80135c0 <_strtod_l+0x8d0>
 8013568:	9b08      	ldr	r3, [sp, #32]
 801356a:	4651      	mov	r1, sl
 801356c:	b303      	cbz	r3, 80135b0 <_strtod_l+0x8c0>
 801356e:	4b9d      	ldr	r3, [pc, #628]	@ (80137e4 <_strtod_l+0xaf4>)
 8013570:	465a      	mov	r2, fp
 8013572:	4013      	ands	r3, r2
 8013574:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013578:	f04f 32ff 	mov.w	r2, #4294967295
 801357c:	d81b      	bhi.n	80135b6 <_strtod_l+0x8c6>
 801357e:	0d1b      	lsrs	r3, r3, #20
 8013580:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013584:	fa02 f303 	lsl.w	r3, r2, r3
 8013588:	4299      	cmp	r1, r3
 801358a:	d119      	bne.n	80135c0 <_strtod_l+0x8d0>
 801358c:	4b96      	ldr	r3, [pc, #600]	@ (80137e8 <_strtod_l+0xaf8>)
 801358e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013590:	429a      	cmp	r2, r3
 8013592:	d102      	bne.n	801359a <_strtod_l+0x8aa>
 8013594:	3101      	adds	r1, #1
 8013596:	f43f adce 	beq.w	8013136 <_strtod_l+0x446>
 801359a:	4b92      	ldr	r3, [pc, #584]	@ (80137e4 <_strtod_l+0xaf4>)
 801359c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801359e:	401a      	ands	r2, r3
 80135a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80135a4:	f04f 0a00 	mov.w	sl, #0
 80135a8:	9b08      	ldr	r3, [sp, #32]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d1b9      	bne.n	8013522 <_strtod_l+0x832>
 80135ae:	e5cd      	b.n	801314c <_strtod_l+0x45c>
 80135b0:	f04f 33ff 	mov.w	r3, #4294967295
 80135b4:	e7e8      	b.n	8013588 <_strtod_l+0x898>
 80135b6:	4613      	mov	r3, r2
 80135b8:	e7e6      	b.n	8013588 <_strtod_l+0x898>
 80135ba:	ea53 030a 	orrs.w	r3, r3, sl
 80135be:	d0a2      	beq.n	8013506 <_strtod_l+0x816>
 80135c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135c2:	b1db      	cbz	r3, 80135fc <_strtod_l+0x90c>
 80135c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80135c6:	4213      	tst	r3, r2
 80135c8:	d0ee      	beq.n	80135a8 <_strtod_l+0x8b8>
 80135ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135cc:	9a08      	ldr	r2, [sp, #32]
 80135ce:	4650      	mov	r0, sl
 80135d0:	4659      	mov	r1, fp
 80135d2:	b1bb      	cbz	r3, 8013604 <_strtod_l+0x914>
 80135d4:	f7ff fb6e 	bl	8012cb4 <sulp>
 80135d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80135dc:	ec53 2b10 	vmov	r2, r3, d0
 80135e0:	f7ec fe7c 	bl	80002dc <__adddf3>
 80135e4:	4682      	mov	sl, r0
 80135e6:	468b      	mov	fp, r1
 80135e8:	e7de      	b.n	80135a8 <_strtod_l+0x8b8>
 80135ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80135ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80135f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80135f6:	f04f 3aff 	mov.w	sl, #4294967295
 80135fa:	e7d5      	b.n	80135a8 <_strtod_l+0x8b8>
 80135fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80135fe:	ea13 0f0a 	tst.w	r3, sl
 8013602:	e7e1      	b.n	80135c8 <_strtod_l+0x8d8>
 8013604:	f7ff fb56 	bl	8012cb4 <sulp>
 8013608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801360c:	ec53 2b10 	vmov	r2, r3, d0
 8013610:	f7ec fe62 	bl	80002d8 <__aeabi_dsub>
 8013614:	2200      	movs	r2, #0
 8013616:	2300      	movs	r3, #0
 8013618:	4682      	mov	sl, r0
 801361a:	468b      	mov	fp, r1
 801361c:	f7ed fa7c 	bl	8000b18 <__aeabi_dcmpeq>
 8013620:	2800      	cmp	r0, #0
 8013622:	d0c1      	beq.n	80135a8 <_strtod_l+0x8b8>
 8013624:	e61a      	b.n	801325c <_strtod_l+0x56c>
 8013626:	4641      	mov	r1, r8
 8013628:	4620      	mov	r0, r4
 801362a:	f7ff facd 	bl	8012bc8 <__ratio>
 801362e:	ec57 6b10 	vmov	r6, r7, d0
 8013632:	2200      	movs	r2, #0
 8013634:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013638:	4630      	mov	r0, r6
 801363a:	4639      	mov	r1, r7
 801363c:	f7ed fa80 	bl	8000b40 <__aeabi_dcmple>
 8013640:	2800      	cmp	r0, #0
 8013642:	d06f      	beq.n	8013724 <_strtod_l+0xa34>
 8013644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013646:	2b00      	cmp	r3, #0
 8013648:	d17a      	bne.n	8013740 <_strtod_l+0xa50>
 801364a:	f1ba 0f00 	cmp.w	sl, #0
 801364e:	d158      	bne.n	8013702 <_strtod_l+0xa12>
 8013650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013656:	2b00      	cmp	r3, #0
 8013658:	d15a      	bne.n	8013710 <_strtod_l+0xa20>
 801365a:	4b64      	ldr	r3, [pc, #400]	@ (80137ec <_strtod_l+0xafc>)
 801365c:	2200      	movs	r2, #0
 801365e:	4630      	mov	r0, r6
 8013660:	4639      	mov	r1, r7
 8013662:	f7ed fa63 	bl	8000b2c <__aeabi_dcmplt>
 8013666:	2800      	cmp	r0, #0
 8013668:	d159      	bne.n	801371e <_strtod_l+0xa2e>
 801366a:	4630      	mov	r0, r6
 801366c:	4639      	mov	r1, r7
 801366e:	4b60      	ldr	r3, [pc, #384]	@ (80137f0 <_strtod_l+0xb00>)
 8013670:	2200      	movs	r2, #0
 8013672:	f7ec ffe9 	bl	8000648 <__aeabi_dmul>
 8013676:	4606      	mov	r6, r0
 8013678:	460f      	mov	r7, r1
 801367a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801367e:	9606      	str	r6, [sp, #24]
 8013680:	9307      	str	r3, [sp, #28]
 8013682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013686:	4d57      	ldr	r5, [pc, #348]	@ (80137e4 <_strtod_l+0xaf4>)
 8013688:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801368c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801368e:	401d      	ands	r5, r3
 8013690:	4b58      	ldr	r3, [pc, #352]	@ (80137f4 <_strtod_l+0xb04>)
 8013692:	429d      	cmp	r5, r3
 8013694:	f040 80b2 	bne.w	80137fc <_strtod_l+0xb0c>
 8013698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801369a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801369e:	ec4b ab10 	vmov	d0, sl, fp
 80136a2:	f7ff f9c9 	bl	8012a38 <__ulp>
 80136a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80136aa:	ec51 0b10 	vmov	r0, r1, d0
 80136ae:	f7ec ffcb 	bl	8000648 <__aeabi_dmul>
 80136b2:	4652      	mov	r2, sl
 80136b4:	465b      	mov	r3, fp
 80136b6:	f7ec fe11 	bl	80002dc <__adddf3>
 80136ba:	460b      	mov	r3, r1
 80136bc:	4949      	ldr	r1, [pc, #292]	@ (80137e4 <_strtod_l+0xaf4>)
 80136be:	4a4e      	ldr	r2, [pc, #312]	@ (80137f8 <_strtod_l+0xb08>)
 80136c0:	4019      	ands	r1, r3
 80136c2:	4291      	cmp	r1, r2
 80136c4:	4682      	mov	sl, r0
 80136c6:	d942      	bls.n	801374e <_strtod_l+0xa5e>
 80136c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80136ca:	4b47      	ldr	r3, [pc, #284]	@ (80137e8 <_strtod_l+0xaf8>)
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d103      	bne.n	80136d8 <_strtod_l+0x9e8>
 80136d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80136d2:	3301      	adds	r3, #1
 80136d4:	f43f ad2f 	beq.w	8013136 <_strtod_l+0x446>
 80136d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80137e8 <_strtod_l+0xaf8>
 80136dc:	f04f 3aff 	mov.w	sl, #4294967295
 80136e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136e2:	9805      	ldr	r0, [sp, #20]
 80136e4:	f7fe fe7c 	bl	80123e0 <_Bfree>
 80136e8:	9805      	ldr	r0, [sp, #20]
 80136ea:	4649      	mov	r1, r9
 80136ec:	f7fe fe78 	bl	80123e0 <_Bfree>
 80136f0:	9805      	ldr	r0, [sp, #20]
 80136f2:	4641      	mov	r1, r8
 80136f4:	f7fe fe74 	bl	80123e0 <_Bfree>
 80136f8:	9805      	ldr	r0, [sp, #20]
 80136fa:	4621      	mov	r1, r4
 80136fc:	f7fe fe70 	bl	80123e0 <_Bfree>
 8013700:	e619      	b.n	8013336 <_strtod_l+0x646>
 8013702:	f1ba 0f01 	cmp.w	sl, #1
 8013706:	d103      	bne.n	8013710 <_strtod_l+0xa20>
 8013708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801370a:	2b00      	cmp	r3, #0
 801370c:	f43f ada6 	beq.w	801325c <_strtod_l+0x56c>
 8013710:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80137c0 <_strtod_l+0xad0>
 8013714:	4f35      	ldr	r7, [pc, #212]	@ (80137ec <_strtod_l+0xafc>)
 8013716:	ed8d 7b06 	vstr	d7, [sp, #24]
 801371a:	2600      	movs	r6, #0
 801371c:	e7b1      	b.n	8013682 <_strtod_l+0x992>
 801371e:	4f34      	ldr	r7, [pc, #208]	@ (80137f0 <_strtod_l+0xb00>)
 8013720:	2600      	movs	r6, #0
 8013722:	e7aa      	b.n	801367a <_strtod_l+0x98a>
 8013724:	4b32      	ldr	r3, [pc, #200]	@ (80137f0 <_strtod_l+0xb00>)
 8013726:	4630      	mov	r0, r6
 8013728:	4639      	mov	r1, r7
 801372a:	2200      	movs	r2, #0
 801372c:	f7ec ff8c 	bl	8000648 <__aeabi_dmul>
 8013730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013732:	4606      	mov	r6, r0
 8013734:	460f      	mov	r7, r1
 8013736:	2b00      	cmp	r3, #0
 8013738:	d09f      	beq.n	801367a <_strtod_l+0x98a>
 801373a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801373e:	e7a0      	b.n	8013682 <_strtod_l+0x992>
 8013740:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80137c8 <_strtod_l+0xad8>
 8013744:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013748:	ec57 6b17 	vmov	r6, r7, d7
 801374c:	e799      	b.n	8013682 <_strtod_l+0x992>
 801374e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013752:	9b08      	ldr	r3, [sp, #32]
 8013754:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013758:	2b00      	cmp	r3, #0
 801375a:	d1c1      	bne.n	80136e0 <_strtod_l+0x9f0>
 801375c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013760:	0d1b      	lsrs	r3, r3, #20
 8013762:	051b      	lsls	r3, r3, #20
 8013764:	429d      	cmp	r5, r3
 8013766:	d1bb      	bne.n	80136e0 <_strtod_l+0x9f0>
 8013768:	4630      	mov	r0, r6
 801376a:	4639      	mov	r1, r7
 801376c:	f7ed facc 	bl	8000d08 <__aeabi_d2lz>
 8013770:	f7ec ff3c 	bl	80005ec <__aeabi_l2d>
 8013774:	4602      	mov	r2, r0
 8013776:	460b      	mov	r3, r1
 8013778:	4630      	mov	r0, r6
 801377a:	4639      	mov	r1, r7
 801377c:	f7ec fdac 	bl	80002d8 <__aeabi_dsub>
 8013780:	460b      	mov	r3, r1
 8013782:	4602      	mov	r2, r0
 8013784:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013788:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801378c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801378e:	ea46 060a 	orr.w	r6, r6, sl
 8013792:	431e      	orrs	r6, r3
 8013794:	d06f      	beq.n	8013876 <_strtod_l+0xb86>
 8013796:	a30e      	add	r3, pc, #56	@ (adr r3, 80137d0 <_strtod_l+0xae0>)
 8013798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379c:	f7ed f9c6 	bl	8000b2c <__aeabi_dcmplt>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	f47f acd3 	bne.w	801314c <_strtod_l+0x45c>
 80137a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80137d8 <_strtod_l+0xae8>)
 80137a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80137b0:	f7ed f9da 	bl	8000b68 <__aeabi_dcmpgt>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	d093      	beq.n	80136e0 <_strtod_l+0x9f0>
 80137b8:	e4c8      	b.n	801314c <_strtod_l+0x45c>
 80137ba:	bf00      	nop
 80137bc:	f3af 8000 	nop.w
 80137c0:	00000000 	.word	0x00000000
 80137c4:	bff00000 	.word	0xbff00000
 80137c8:	00000000 	.word	0x00000000
 80137cc:	3ff00000 	.word	0x3ff00000
 80137d0:	94a03595 	.word	0x94a03595
 80137d4:	3fdfffff 	.word	0x3fdfffff
 80137d8:	35afe535 	.word	0x35afe535
 80137dc:	3fe00000 	.word	0x3fe00000
 80137e0:	000fffff 	.word	0x000fffff
 80137e4:	7ff00000 	.word	0x7ff00000
 80137e8:	7fefffff 	.word	0x7fefffff
 80137ec:	3ff00000 	.word	0x3ff00000
 80137f0:	3fe00000 	.word	0x3fe00000
 80137f4:	7fe00000 	.word	0x7fe00000
 80137f8:	7c9fffff 	.word	0x7c9fffff
 80137fc:	9b08      	ldr	r3, [sp, #32]
 80137fe:	b323      	cbz	r3, 801384a <_strtod_l+0xb5a>
 8013800:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013804:	d821      	bhi.n	801384a <_strtod_l+0xb5a>
 8013806:	a328      	add	r3, pc, #160	@ (adr r3, 80138a8 <_strtod_l+0xbb8>)
 8013808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380c:	4630      	mov	r0, r6
 801380e:	4639      	mov	r1, r7
 8013810:	f7ed f996 	bl	8000b40 <__aeabi_dcmple>
 8013814:	b1a0      	cbz	r0, 8013840 <_strtod_l+0xb50>
 8013816:	4639      	mov	r1, r7
 8013818:	4630      	mov	r0, r6
 801381a:	f7ed f9ed 	bl	8000bf8 <__aeabi_d2uiz>
 801381e:	2801      	cmp	r0, #1
 8013820:	bf38      	it	cc
 8013822:	2001      	movcc	r0, #1
 8013824:	f7ec fe96 	bl	8000554 <__aeabi_ui2d>
 8013828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801382a:	4606      	mov	r6, r0
 801382c:	460f      	mov	r7, r1
 801382e:	b9fb      	cbnz	r3, 8013870 <_strtod_l+0xb80>
 8013830:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013834:	9014      	str	r0, [sp, #80]	@ 0x50
 8013836:	9315      	str	r3, [sp, #84]	@ 0x54
 8013838:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801383c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013840:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013842:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013846:	1b5b      	subs	r3, r3, r5
 8013848:	9311      	str	r3, [sp, #68]	@ 0x44
 801384a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801384e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013852:	f7ff f8f1 	bl	8012a38 <__ulp>
 8013856:	4650      	mov	r0, sl
 8013858:	ec53 2b10 	vmov	r2, r3, d0
 801385c:	4659      	mov	r1, fp
 801385e:	f7ec fef3 	bl	8000648 <__aeabi_dmul>
 8013862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013866:	f7ec fd39 	bl	80002dc <__adddf3>
 801386a:	4682      	mov	sl, r0
 801386c:	468b      	mov	fp, r1
 801386e:	e770      	b.n	8013752 <_strtod_l+0xa62>
 8013870:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013874:	e7e0      	b.n	8013838 <_strtod_l+0xb48>
 8013876:	a30e      	add	r3, pc, #56	@ (adr r3, 80138b0 <_strtod_l+0xbc0>)
 8013878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801387c:	f7ed f956 	bl	8000b2c <__aeabi_dcmplt>
 8013880:	e798      	b.n	80137b4 <_strtod_l+0xac4>
 8013882:	2300      	movs	r3, #0
 8013884:	930e      	str	r3, [sp, #56]	@ 0x38
 8013886:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801388a:	6013      	str	r3, [r2, #0]
 801388c:	f7ff ba6d 	b.w	8012d6a <_strtod_l+0x7a>
 8013890:	2a65      	cmp	r2, #101	@ 0x65
 8013892:	f43f ab68 	beq.w	8012f66 <_strtod_l+0x276>
 8013896:	2a45      	cmp	r2, #69	@ 0x45
 8013898:	f43f ab65 	beq.w	8012f66 <_strtod_l+0x276>
 801389c:	2301      	movs	r3, #1
 801389e:	f7ff bba0 	b.w	8012fe2 <_strtod_l+0x2f2>
 80138a2:	bf00      	nop
 80138a4:	f3af 8000 	nop.w
 80138a8:	ffc00000 	.word	0xffc00000
 80138ac:	41dfffff 	.word	0x41dfffff
 80138b0:	94a03595 	.word	0x94a03595
 80138b4:	3fcfffff 	.word	0x3fcfffff

080138b8 <_strtod_r>:
 80138b8:	4b01      	ldr	r3, [pc, #4]	@ (80138c0 <_strtod_r+0x8>)
 80138ba:	f7ff ba19 	b.w	8012cf0 <_strtod_l>
 80138be:	bf00      	nop
 80138c0:	2000008c 	.word	0x2000008c

080138c4 <_strtol_l.isra.0>:
 80138c4:	2b24      	cmp	r3, #36	@ 0x24
 80138c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138ca:	4686      	mov	lr, r0
 80138cc:	4690      	mov	r8, r2
 80138ce:	d801      	bhi.n	80138d4 <_strtol_l.isra.0+0x10>
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d106      	bne.n	80138e2 <_strtol_l.isra.0+0x1e>
 80138d4:	f7fd fdaa 	bl	801142c <__errno>
 80138d8:	2316      	movs	r3, #22
 80138da:	6003      	str	r3, [r0, #0]
 80138dc:	2000      	movs	r0, #0
 80138de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e2:	4834      	ldr	r0, [pc, #208]	@ (80139b4 <_strtol_l.isra.0+0xf0>)
 80138e4:	460d      	mov	r5, r1
 80138e6:	462a      	mov	r2, r5
 80138e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138ec:	5d06      	ldrb	r6, [r0, r4]
 80138ee:	f016 0608 	ands.w	r6, r6, #8
 80138f2:	d1f8      	bne.n	80138e6 <_strtol_l.isra.0+0x22>
 80138f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80138f6:	d110      	bne.n	801391a <_strtol_l.isra.0+0x56>
 80138f8:	782c      	ldrb	r4, [r5, #0]
 80138fa:	2601      	movs	r6, #1
 80138fc:	1c95      	adds	r5, r2, #2
 80138fe:	f033 0210 	bics.w	r2, r3, #16
 8013902:	d115      	bne.n	8013930 <_strtol_l.isra.0+0x6c>
 8013904:	2c30      	cmp	r4, #48	@ 0x30
 8013906:	d10d      	bne.n	8013924 <_strtol_l.isra.0+0x60>
 8013908:	782a      	ldrb	r2, [r5, #0]
 801390a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801390e:	2a58      	cmp	r2, #88	@ 0x58
 8013910:	d108      	bne.n	8013924 <_strtol_l.isra.0+0x60>
 8013912:	786c      	ldrb	r4, [r5, #1]
 8013914:	3502      	adds	r5, #2
 8013916:	2310      	movs	r3, #16
 8013918:	e00a      	b.n	8013930 <_strtol_l.isra.0+0x6c>
 801391a:	2c2b      	cmp	r4, #43	@ 0x2b
 801391c:	bf04      	itt	eq
 801391e:	782c      	ldrbeq	r4, [r5, #0]
 8013920:	1c95      	addeq	r5, r2, #2
 8013922:	e7ec      	b.n	80138fe <_strtol_l.isra.0+0x3a>
 8013924:	2b00      	cmp	r3, #0
 8013926:	d1f6      	bne.n	8013916 <_strtol_l.isra.0+0x52>
 8013928:	2c30      	cmp	r4, #48	@ 0x30
 801392a:	bf14      	ite	ne
 801392c:	230a      	movne	r3, #10
 801392e:	2308      	moveq	r3, #8
 8013930:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013934:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013938:	2200      	movs	r2, #0
 801393a:	fbbc f9f3 	udiv	r9, ip, r3
 801393e:	4610      	mov	r0, r2
 8013940:	fb03 ca19 	mls	sl, r3, r9, ip
 8013944:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013948:	2f09      	cmp	r7, #9
 801394a:	d80f      	bhi.n	801396c <_strtol_l.isra.0+0xa8>
 801394c:	463c      	mov	r4, r7
 801394e:	42a3      	cmp	r3, r4
 8013950:	dd1b      	ble.n	801398a <_strtol_l.isra.0+0xc6>
 8013952:	1c57      	adds	r7, r2, #1
 8013954:	d007      	beq.n	8013966 <_strtol_l.isra.0+0xa2>
 8013956:	4581      	cmp	r9, r0
 8013958:	d314      	bcc.n	8013984 <_strtol_l.isra.0+0xc0>
 801395a:	d101      	bne.n	8013960 <_strtol_l.isra.0+0x9c>
 801395c:	45a2      	cmp	sl, r4
 801395e:	db11      	blt.n	8013984 <_strtol_l.isra.0+0xc0>
 8013960:	fb00 4003 	mla	r0, r0, r3, r4
 8013964:	2201      	movs	r2, #1
 8013966:	f815 4b01 	ldrb.w	r4, [r5], #1
 801396a:	e7eb      	b.n	8013944 <_strtol_l.isra.0+0x80>
 801396c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013970:	2f19      	cmp	r7, #25
 8013972:	d801      	bhi.n	8013978 <_strtol_l.isra.0+0xb4>
 8013974:	3c37      	subs	r4, #55	@ 0x37
 8013976:	e7ea      	b.n	801394e <_strtol_l.isra.0+0x8a>
 8013978:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801397c:	2f19      	cmp	r7, #25
 801397e:	d804      	bhi.n	801398a <_strtol_l.isra.0+0xc6>
 8013980:	3c57      	subs	r4, #87	@ 0x57
 8013982:	e7e4      	b.n	801394e <_strtol_l.isra.0+0x8a>
 8013984:	f04f 32ff 	mov.w	r2, #4294967295
 8013988:	e7ed      	b.n	8013966 <_strtol_l.isra.0+0xa2>
 801398a:	1c53      	adds	r3, r2, #1
 801398c:	d108      	bne.n	80139a0 <_strtol_l.isra.0+0xdc>
 801398e:	2322      	movs	r3, #34	@ 0x22
 8013990:	f8ce 3000 	str.w	r3, [lr]
 8013994:	4660      	mov	r0, ip
 8013996:	f1b8 0f00 	cmp.w	r8, #0
 801399a:	d0a0      	beq.n	80138de <_strtol_l.isra.0+0x1a>
 801399c:	1e69      	subs	r1, r5, #1
 801399e:	e006      	b.n	80139ae <_strtol_l.isra.0+0xea>
 80139a0:	b106      	cbz	r6, 80139a4 <_strtol_l.isra.0+0xe0>
 80139a2:	4240      	negs	r0, r0
 80139a4:	f1b8 0f00 	cmp.w	r8, #0
 80139a8:	d099      	beq.n	80138de <_strtol_l.isra.0+0x1a>
 80139aa:	2a00      	cmp	r2, #0
 80139ac:	d1f6      	bne.n	801399c <_strtol_l.isra.0+0xd8>
 80139ae:	f8c8 1000 	str.w	r1, [r8]
 80139b2:	e794      	b.n	80138de <_strtol_l.isra.0+0x1a>
 80139b4:	080158a9 	.word	0x080158a9

080139b8 <_strtol_r>:
 80139b8:	f7ff bf84 	b.w	80138c4 <_strtol_l.isra.0>

080139bc <__ssputs_r>:
 80139bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c0:	688e      	ldr	r6, [r1, #8]
 80139c2:	461f      	mov	r7, r3
 80139c4:	42be      	cmp	r6, r7
 80139c6:	680b      	ldr	r3, [r1, #0]
 80139c8:	4682      	mov	sl, r0
 80139ca:	460c      	mov	r4, r1
 80139cc:	4690      	mov	r8, r2
 80139ce:	d82d      	bhi.n	8013a2c <__ssputs_r+0x70>
 80139d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80139d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80139d8:	d026      	beq.n	8013a28 <__ssputs_r+0x6c>
 80139da:	6965      	ldr	r5, [r4, #20]
 80139dc:	6909      	ldr	r1, [r1, #16]
 80139de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139e2:	eba3 0901 	sub.w	r9, r3, r1
 80139e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139ea:	1c7b      	adds	r3, r7, #1
 80139ec:	444b      	add	r3, r9
 80139ee:	106d      	asrs	r5, r5, #1
 80139f0:	429d      	cmp	r5, r3
 80139f2:	bf38      	it	cc
 80139f4:	461d      	movcc	r5, r3
 80139f6:	0553      	lsls	r3, r2, #21
 80139f8:	d527      	bpl.n	8013a4a <__ssputs_r+0x8e>
 80139fa:	4629      	mov	r1, r5
 80139fc:	f7fe fc24 	bl	8012248 <_malloc_r>
 8013a00:	4606      	mov	r6, r0
 8013a02:	b360      	cbz	r0, 8013a5e <__ssputs_r+0xa2>
 8013a04:	6921      	ldr	r1, [r4, #16]
 8013a06:	464a      	mov	r2, r9
 8013a08:	f7fd fd3d 	bl	8011486 <memcpy>
 8013a0c:	89a3      	ldrh	r3, [r4, #12]
 8013a0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a16:	81a3      	strh	r3, [r4, #12]
 8013a18:	6126      	str	r6, [r4, #16]
 8013a1a:	6165      	str	r5, [r4, #20]
 8013a1c:	444e      	add	r6, r9
 8013a1e:	eba5 0509 	sub.w	r5, r5, r9
 8013a22:	6026      	str	r6, [r4, #0]
 8013a24:	60a5      	str	r5, [r4, #8]
 8013a26:	463e      	mov	r6, r7
 8013a28:	42be      	cmp	r6, r7
 8013a2a:	d900      	bls.n	8013a2e <__ssputs_r+0x72>
 8013a2c:	463e      	mov	r6, r7
 8013a2e:	6820      	ldr	r0, [r4, #0]
 8013a30:	4632      	mov	r2, r6
 8013a32:	4641      	mov	r1, r8
 8013a34:	f000 f9c6 	bl	8013dc4 <memmove>
 8013a38:	68a3      	ldr	r3, [r4, #8]
 8013a3a:	1b9b      	subs	r3, r3, r6
 8013a3c:	60a3      	str	r3, [r4, #8]
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	4433      	add	r3, r6
 8013a42:	6023      	str	r3, [r4, #0]
 8013a44:	2000      	movs	r0, #0
 8013a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a4a:	462a      	mov	r2, r5
 8013a4c:	f000 fd7d 	bl	801454a <_realloc_r>
 8013a50:	4606      	mov	r6, r0
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d1e0      	bne.n	8013a18 <__ssputs_r+0x5c>
 8013a56:	6921      	ldr	r1, [r4, #16]
 8013a58:	4650      	mov	r0, sl
 8013a5a:	f7fe fb81 	bl	8012160 <_free_r>
 8013a5e:	230c      	movs	r3, #12
 8013a60:	f8ca 3000 	str.w	r3, [sl]
 8013a64:	89a3      	ldrh	r3, [r4, #12]
 8013a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a6a:	81a3      	strh	r3, [r4, #12]
 8013a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a70:	e7e9      	b.n	8013a46 <__ssputs_r+0x8a>
	...

08013a74 <_svfiprintf_r>:
 8013a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a78:	4698      	mov	r8, r3
 8013a7a:	898b      	ldrh	r3, [r1, #12]
 8013a7c:	061b      	lsls	r3, r3, #24
 8013a7e:	b09d      	sub	sp, #116	@ 0x74
 8013a80:	4607      	mov	r7, r0
 8013a82:	460d      	mov	r5, r1
 8013a84:	4614      	mov	r4, r2
 8013a86:	d510      	bpl.n	8013aaa <_svfiprintf_r+0x36>
 8013a88:	690b      	ldr	r3, [r1, #16]
 8013a8a:	b973      	cbnz	r3, 8013aaa <_svfiprintf_r+0x36>
 8013a8c:	2140      	movs	r1, #64	@ 0x40
 8013a8e:	f7fe fbdb 	bl	8012248 <_malloc_r>
 8013a92:	6028      	str	r0, [r5, #0]
 8013a94:	6128      	str	r0, [r5, #16]
 8013a96:	b930      	cbnz	r0, 8013aa6 <_svfiprintf_r+0x32>
 8013a98:	230c      	movs	r3, #12
 8013a9a:	603b      	str	r3, [r7, #0]
 8013a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa0:	b01d      	add	sp, #116	@ 0x74
 8013aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa6:	2340      	movs	r3, #64	@ 0x40
 8013aa8:	616b      	str	r3, [r5, #20]
 8013aaa:	2300      	movs	r3, #0
 8013aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8013aae:	2320      	movs	r3, #32
 8013ab0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ab8:	2330      	movs	r3, #48	@ 0x30
 8013aba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013c58 <_svfiprintf_r+0x1e4>
 8013abe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013ac2:	f04f 0901 	mov.w	r9, #1
 8013ac6:	4623      	mov	r3, r4
 8013ac8:	469a      	mov	sl, r3
 8013aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ace:	b10a      	cbz	r2, 8013ad4 <_svfiprintf_r+0x60>
 8013ad0:	2a25      	cmp	r2, #37	@ 0x25
 8013ad2:	d1f9      	bne.n	8013ac8 <_svfiprintf_r+0x54>
 8013ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8013ad8:	d00b      	beq.n	8013af2 <_svfiprintf_r+0x7e>
 8013ada:	465b      	mov	r3, fp
 8013adc:	4622      	mov	r2, r4
 8013ade:	4629      	mov	r1, r5
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f7ff ff6b 	bl	80139bc <__ssputs_r>
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	f000 80a7 	beq.w	8013c3a <_svfiprintf_r+0x1c6>
 8013aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013aee:	445a      	add	r2, fp
 8013af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8013af2:	f89a 3000 	ldrb.w	r3, [sl]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	f000 809f 	beq.w	8013c3a <_svfiprintf_r+0x1c6>
 8013afc:	2300      	movs	r3, #0
 8013afe:	f04f 32ff 	mov.w	r2, #4294967295
 8013b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b06:	f10a 0a01 	add.w	sl, sl, #1
 8013b0a:	9304      	str	r3, [sp, #16]
 8013b0c:	9307      	str	r3, [sp, #28]
 8013b0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b12:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b14:	4654      	mov	r4, sl
 8013b16:	2205      	movs	r2, #5
 8013b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b1c:	484e      	ldr	r0, [pc, #312]	@ (8013c58 <_svfiprintf_r+0x1e4>)
 8013b1e:	f7ec fb7f 	bl	8000220 <memchr>
 8013b22:	9a04      	ldr	r2, [sp, #16]
 8013b24:	b9d8      	cbnz	r0, 8013b5e <_svfiprintf_r+0xea>
 8013b26:	06d0      	lsls	r0, r2, #27
 8013b28:	bf44      	itt	mi
 8013b2a:	2320      	movmi	r3, #32
 8013b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b30:	0711      	lsls	r1, r2, #28
 8013b32:	bf44      	itt	mi
 8013b34:	232b      	movmi	r3, #43	@ 0x2b
 8013b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b40:	d015      	beq.n	8013b6e <_svfiprintf_r+0xfa>
 8013b42:	9a07      	ldr	r2, [sp, #28]
 8013b44:	4654      	mov	r4, sl
 8013b46:	2000      	movs	r0, #0
 8013b48:	f04f 0c0a 	mov.w	ip, #10
 8013b4c:	4621      	mov	r1, r4
 8013b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b52:	3b30      	subs	r3, #48	@ 0x30
 8013b54:	2b09      	cmp	r3, #9
 8013b56:	d94b      	bls.n	8013bf0 <_svfiprintf_r+0x17c>
 8013b58:	b1b0      	cbz	r0, 8013b88 <_svfiprintf_r+0x114>
 8013b5a:	9207      	str	r2, [sp, #28]
 8013b5c:	e014      	b.n	8013b88 <_svfiprintf_r+0x114>
 8013b5e:	eba0 0308 	sub.w	r3, r0, r8
 8013b62:	fa09 f303 	lsl.w	r3, r9, r3
 8013b66:	4313      	orrs	r3, r2
 8013b68:	9304      	str	r3, [sp, #16]
 8013b6a:	46a2      	mov	sl, r4
 8013b6c:	e7d2      	b.n	8013b14 <_svfiprintf_r+0xa0>
 8013b6e:	9b03      	ldr	r3, [sp, #12]
 8013b70:	1d19      	adds	r1, r3, #4
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	9103      	str	r1, [sp, #12]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	bfbb      	ittet	lt
 8013b7a:	425b      	neglt	r3, r3
 8013b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8013b80:	9307      	strge	r3, [sp, #28]
 8013b82:	9307      	strlt	r3, [sp, #28]
 8013b84:	bfb8      	it	lt
 8013b86:	9204      	strlt	r2, [sp, #16]
 8013b88:	7823      	ldrb	r3, [r4, #0]
 8013b8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b8c:	d10a      	bne.n	8013ba4 <_svfiprintf_r+0x130>
 8013b8e:	7863      	ldrb	r3, [r4, #1]
 8013b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b92:	d132      	bne.n	8013bfa <_svfiprintf_r+0x186>
 8013b94:	9b03      	ldr	r3, [sp, #12]
 8013b96:	1d1a      	adds	r2, r3, #4
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	9203      	str	r2, [sp, #12]
 8013b9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013ba0:	3402      	adds	r4, #2
 8013ba2:	9305      	str	r3, [sp, #20]
 8013ba4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013c68 <_svfiprintf_r+0x1f4>
 8013ba8:	7821      	ldrb	r1, [r4, #0]
 8013baa:	2203      	movs	r2, #3
 8013bac:	4650      	mov	r0, sl
 8013bae:	f7ec fb37 	bl	8000220 <memchr>
 8013bb2:	b138      	cbz	r0, 8013bc4 <_svfiprintf_r+0x150>
 8013bb4:	9b04      	ldr	r3, [sp, #16]
 8013bb6:	eba0 000a 	sub.w	r0, r0, sl
 8013bba:	2240      	movs	r2, #64	@ 0x40
 8013bbc:	4082      	lsls	r2, r0
 8013bbe:	4313      	orrs	r3, r2
 8013bc0:	3401      	adds	r4, #1
 8013bc2:	9304      	str	r3, [sp, #16]
 8013bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bc8:	4824      	ldr	r0, [pc, #144]	@ (8013c5c <_svfiprintf_r+0x1e8>)
 8013bca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013bce:	2206      	movs	r2, #6
 8013bd0:	f7ec fb26 	bl	8000220 <memchr>
 8013bd4:	2800      	cmp	r0, #0
 8013bd6:	d036      	beq.n	8013c46 <_svfiprintf_r+0x1d2>
 8013bd8:	4b21      	ldr	r3, [pc, #132]	@ (8013c60 <_svfiprintf_r+0x1ec>)
 8013bda:	bb1b      	cbnz	r3, 8013c24 <_svfiprintf_r+0x1b0>
 8013bdc:	9b03      	ldr	r3, [sp, #12]
 8013bde:	3307      	adds	r3, #7
 8013be0:	f023 0307 	bic.w	r3, r3, #7
 8013be4:	3308      	adds	r3, #8
 8013be6:	9303      	str	r3, [sp, #12]
 8013be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bea:	4433      	add	r3, r6
 8013bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bee:	e76a      	b.n	8013ac6 <_svfiprintf_r+0x52>
 8013bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bf4:	460c      	mov	r4, r1
 8013bf6:	2001      	movs	r0, #1
 8013bf8:	e7a8      	b.n	8013b4c <_svfiprintf_r+0xd8>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	3401      	adds	r4, #1
 8013bfe:	9305      	str	r3, [sp, #20]
 8013c00:	4619      	mov	r1, r3
 8013c02:	f04f 0c0a 	mov.w	ip, #10
 8013c06:	4620      	mov	r0, r4
 8013c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c0c:	3a30      	subs	r2, #48	@ 0x30
 8013c0e:	2a09      	cmp	r2, #9
 8013c10:	d903      	bls.n	8013c1a <_svfiprintf_r+0x1a6>
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d0c6      	beq.n	8013ba4 <_svfiprintf_r+0x130>
 8013c16:	9105      	str	r1, [sp, #20]
 8013c18:	e7c4      	b.n	8013ba4 <_svfiprintf_r+0x130>
 8013c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c1e:	4604      	mov	r4, r0
 8013c20:	2301      	movs	r3, #1
 8013c22:	e7f0      	b.n	8013c06 <_svfiprintf_r+0x192>
 8013c24:	ab03      	add	r3, sp, #12
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	462a      	mov	r2, r5
 8013c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8013c64 <_svfiprintf_r+0x1f0>)
 8013c2c:	a904      	add	r1, sp, #16
 8013c2e:	4638      	mov	r0, r7
 8013c30:	f7fc fc2a 	bl	8010488 <_printf_float>
 8013c34:	1c42      	adds	r2, r0, #1
 8013c36:	4606      	mov	r6, r0
 8013c38:	d1d6      	bne.n	8013be8 <_svfiprintf_r+0x174>
 8013c3a:	89ab      	ldrh	r3, [r5, #12]
 8013c3c:	065b      	lsls	r3, r3, #25
 8013c3e:	f53f af2d 	bmi.w	8013a9c <_svfiprintf_r+0x28>
 8013c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c44:	e72c      	b.n	8013aa0 <_svfiprintf_r+0x2c>
 8013c46:	ab03      	add	r3, sp, #12
 8013c48:	9300      	str	r3, [sp, #0]
 8013c4a:	462a      	mov	r2, r5
 8013c4c:	4b05      	ldr	r3, [pc, #20]	@ (8013c64 <_svfiprintf_r+0x1f0>)
 8013c4e:	a904      	add	r1, sp, #16
 8013c50:	4638      	mov	r0, r7
 8013c52:	f7fc feb1 	bl	80109b8 <_printf_i>
 8013c56:	e7ed      	b.n	8013c34 <_svfiprintf_r+0x1c0>
 8013c58:	080156a1 	.word	0x080156a1
 8013c5c:	080156ab 	.word	0x080156ab
 8013c60:	08010489 	.word	0x08010489
 8013c64:	080139bd 	.word	0x080139bd
 8013c68:	080156a7 	.word	0x080156a7

08013c6c <__sflush_r>:
 8013c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c74:	0716      	lsls	r6, r2, #28
 8013c76:	4605      	mov	r5, r0
 8013c78:	460c      	mov	r4, r1
 8013c7a:	d454      	bmi.n	8013d26 <__sflush_r+0xba>
 8013c7c:	684b      	ldr	r3, [r1, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	dc02      	bgt.n	8013c88 <__sflush_r+0x1c>
 8013c82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	dd48      	ble.n	8013d1a <__sflush_r+0xae>
 8013c88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c8a:	2e00      	cmp	r6, #0
 8013c8c:	d045      	beq.n	8013d1a <__sflush_r+0xae>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013c94:	682f      	ldr	r7, [r5, #0]
 8013c96:	6a21      	ldr	r1, [r4, #32]
 8013c98:	602b      	str	r3, [r5, #0]
 8013c9a:	d030      	beq.n	8013cfe <__sflush_r+0x92>
 8013c9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013c9e:	89a3      	ldrh	r3, [r4, #12]
 8013ca0:	0759      	lsls	r1, r3, #29
 8013ca2:	d505      	bpl.n	8013cb0 <__sflush_r+0x44>
 8013ca4:	6863      	ldr	r3, [r4, #4]
 8013ca6:	1ad2      	subs	r2, r2, r3
 8013ca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013caa:	b10b      	cbz	r3, 8013cb0 <__sflush_r+0x44>
 8013cac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013cae:	1ad2      	subs	r2, r2, r3
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cb4:	6a21      	ldr	r1, [r4, #32]
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	47b0      	blx	r6
 8013cba:	1c43      	adds	r3, r0, #1
 8013cbc:	89a3      	ldrh	r3, [r4, #12]
 8013cbe:	d106      	bne.n	8013cce <__sflush_r+0x62>
 8013cc0:	6829      	ldr	r1, [r5, #0]
 8013cc2:	291d      	cmp	r1, #29
 8013cc4:	d82b      	bhi.n	8013d1e <__sflush_r+0xb2>
 8013cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8013d70 <__sflush_r+0x104>)
 8013cc8:	40ca      	lsrs	r2, r1
 8013cca:	07d6      	lsls	r6, r2, #31
 8013ccc:	d527      	bpl.n	8013d1e <__sflush_r+0xb2>
 8013cce:	2200      	movs	r2, #0
 8013cd0:	6062      	str	r2, [r4, #4]
 8013cd2:	04d9      	lsls	r1, r3, #19
 8013cd4:	6922      	ldr	r2, [r4, #16]
 8013cd6:	6022      	str	r2, [r4, #0]
 8013cd8:	d504      	bpl.n	8013ce4 <__sflush_r+0x78>
 8013cda:	1c42      	adds	r2, r0, #1
 8013cdc:	d101      	bne.n	8013ce2 <__sflush_r+0x76>
 8013cde:	682b      	ldr	r3, [r5, #0]
 8013ce0:	b903      	cbnz	r3, 8013ce4 <__sflush_r+0x78>
 8013ce2:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ce6:	602f      	str	r7, [r5, #0]
 8013ce8:	b1b9      	cbz	r1, 8013d1a <__sflush_r+0xae>
 8013cea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013cee:	4299      	cmp	r1, r3
 8013cf0:	d002      	beq.n	8013cf8 <__sflush_r+0x8c>
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f7fe fa34 	bl	8012160 <_free_r>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8013cfc:	e00d      	b.n	8013d1a <__sflush_r+0xae>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	4628      	mov	r0, r5
 8013d02:	47b0      	blx	r6
 8013d04:	4602      	mov	r2, r0
 8013d06:	1c50      	adds	r0, r2, #1
 8013d08:	d1c9      	bne.n	8013c9e <__sflush_r+0x32>
 8013d0a:	682b      	ldr	r3, [r5, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d0c6      	beq.n	8013c9e <__sflush_r+0x32>
 8013d10:	2b1d      	cmp	r3, #29
 8013d12:	d001      	beq.n	8013d18 <__sflush_r+0xac>
 8013d14:	2b16      	cmp	r3, #22
 8013d16:	d11e      	bne.n	8013d56 <__sflush_r+0xea>
 8013d18:	602f      	str	r7, [r5, #0]
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	e022      	b.n	8013d64 <__sflush_r+0xf8>
 8013d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d22:	b21b      	sxth	r3, r3
 8013d24:	e01b      	b.n	8013d5e <__sflush_r+0xf2>
 8013d26:	690f      	ldr	r7, [r1, #16]
 8013d28:	2f00      	cmp	r7, #0
 8013d2a:	d0f6      	beq.n	8013d1a <__sflush_r+0xae>
 8013d2c:	0793      	lsls	r3, r2, #30
 8013d2e:	680e      	ldr	r6, [r1, #0]
 8013d30:	bf08      	it	eq
 8013d32:	694b      	ldreq	r3, [r1, #20]
 8013d34:	600f      	str	r7, [r1, #0]
 8013d36:	bf18      	it	ne
 8013d38:	2300      	movne	r3, #0
 8013d3a:	eba6 0807 	sub.w	r8, r6, r7
 8013d3e:	608b      	str	r3, [r1, #8]
 8013d40:	f1b8 0f00 	cmp.w	r8, #0
 8013d44:	dde9      	ble.n	8013d1a <__sflush_r+0xae>
 8013d46:	6a21      	ldr	r1, [r4, #32]
 8013d48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d4a:	4643      	mov	r3, r8
 8013d4c:	463a      	mov	r2, r7
 8013d4e:	4628      	mov	r0, r5
 8013d50:	47b0      	blx	r6
 8013d52:	2800      	cmp	r0, #0
 8013d54:	dc08      	bgt.n	8013d68 <__sflush_r+0xfc>
 8013d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d5e:	81a3      	strh	r3, [r4, #12]
 8013d60:	f04f 30ff 	mov.w	r0, #4294967295
 8013d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d68:	4407      	add	r7, r0
 8013d6a:	eba8 0800 	sub.w	r8, r8, r0
 8013d6e:	e7e7      	b.n	8013d40 <__sflush_r+0xd4>
 8013d70:	20400001 	.word	0x20400001

08013d74 <_fflush_r>:
 8013d74:	b538      	push	{r3, r4, r5, lr}
 8013d76:	690b      	ldr	r3, [r1, #16]
 8013d78:	4605      	mov	r5, r0
 8013d7a:	460c      	mov	r4, r1
 8013d7c:	b913      	cbnz	r3, 8013d84 <_fflush_r+0x10>
 8013d7e:	2500      	movs	r5, #0
 8013d80:	4628      	mov	r0, r5
 8013d82:	bd38      	pop	{r3, r4, r5, pc}
 8013d84:	b118      	cbz	r0, 8013d8e <_fflush_r+0x1a>
 8013d86:	6a03      	ldr	r3, [r0, #32]
 8013d88:	b90b      	cbnz	r3, 8013d8e <_fflush_r+0x1a>
 8013d8a:	f7fd f9cd 	bl	8011128 <__sinit>
 8013d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d0f3      	beq.n	8013d7e <_fflush_r+0xa>
 8013d96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013d98:	07d0      	lsls	r0, r2, #31
 8013d9a:	d404      	bmi.n	8013da6 <_fflush_r+0x32>
 8013d9c:	0599      	lsls	r1, r3, #22
 8013d9e:	d402      	bmi.n	8013da6 <_fflush_r+0x32>
 8013da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013da2:	f7fd fb6e 	bl	8011482 <__retarget_lock_acquire_recursive>
 8013da6:	4628      	mov	r0, r5
 8013da8:	4621      	mov	r1, r4
 8013daa:	f7ff ff5f 	bl	8013c6c <__sflush_r>
 8013dae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013db0:	07da      	lsls	r2, r3, #31
 8013db2:	4605      	mov	r5, r0
 8013db4:	d4e4      	bmi.n	8013d80 <_fflush_r+0xc>
 8013db6:	89a3      	ldrh	r3, [r4, #12]
 8013db8:	059b      	lsls	r3, r3, #22
 8013dba:	d4e1      	bmi.n	8013d80 <_fflush_r+0xc>
 8013dbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013dbe:	f7fd fb61 	bl	8011484 <__retarget_lock_release_recursive>
 8013dc2:	e7dd      	b.n	8013d80 <_fflush_r+0xc>

08013dc4 <memmove>:
 8013dc4:	4288      	cmp	r0, r1
 8013dc6:	b510      	push	{r4, lr}
 8013dc8:	eb01 0402 	add.w	r4, r1, r2
 8013dcc:	d902      	bls.n	8013dd4 <memmove+0x10>
 8013dce:	4284      	cmp	r4, r0
 8013dd0:	4623      	mov	r3, r4
 8013dd2:	d807      	bhi.n	8013de4 <memmove+0x20>
 8013dd4:	1e43      	subs	r3, r0, #1
 8013dd6:	42a1      	cmp	r1, r4
 8013dd8:	d008      	beq.n	8013dec <memmove+0x28>
 8013dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013de2:	e7f8      	b.n	8013dd6 <memmove+0x12>
 8013de4:	4402      	add	r2, r0
 8013de6:	4601      	mov	r1, r0
 8013de8:	428a      	cmp	r2, r1
 8013dea:	d100      	bne.n	8013dee <memmove+0x2a>
 8013dec:	bd10      	pop	{r4, pc}
 8013dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013df6:	e7f7      	b.n	8013de8 <memmove+0x24>

08013df8 <strncmp>:
 8013df8:	b510      	push	{r4, lr}
 8013dfa:	b16a      	cbz	r2, 8013e18 <strncmp+0x20>
 8013dfc:	3901      	subs	r1, #1
 8013dfe:	1884      	adds	r4, r0, r2
 8013e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d103      	bne.n	8013e14 <strncmp+0x1c>
 8013e0c:	42a0      	cmp	r0, r4
 8013e0e:	d001      	beq.n	8013e14 <strncmp+0x1c>
 8013e10:	2a00      	cmp	r2, #0
 8013e12:	d1f5      	bne.n	8013e00 <strncmp+0x8>
 8013e14:	1ad0      	subs	r0, r2, r3
 8013e16:	bd10      	pop	{r4, pc}
 8013e18:	4610      	mov	r0, r2
 8013e1a:	e7fc      	b.n	8013e16 <strncmp+0x1e>

08013e1c <_sbrk_r>:
 8013e1c:	b538      	push	{r3, r4, r5, lr}
 8013e1e:	4d06      	ldr	r5, [pc, #24]	@ (8013e38 <_sbrk_r+0x1c>)
 8013e20:	2300      	movs	r3, #0
 8013e22:	4604      	mov	r4, r0
 8013e24:	4608      	mov	r0, r1
 8013e26:	602b      	str	r3, [r5, #0]
 8013e28:	f7ee fd52 	bl	80028d0 <_sbrk>
 8013e2c:	1c43      	adds	r3, r0, #1
 8013e2e:	d102      	bne.n	8013e36 <_sbrk_r+0x1a>
 8013e30:	682b      	ldr	r3, [r5, #0]
 8013e32:	b103      	cbz	r3, 8013e36 <_sbrk_r+0x1a>
 8013e34:	6023      	str	r3, [r4, #0]
 8013e36:	bd38      	pop	{r3, r4, r5, pc}
 8013e38:	200043d0 	.word	0x200043d0
 8013e3c:	00000000 	.word	0x00000000

08013e40 <nan>:
 8013e40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013e48 <nan+0x8>
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	00000000 	.word	0x00000000
 8013e4c:	7ff80000 	.word	0x7ff80000

08013e50 <__assert_func>:
 8013e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e52:	4614      	mov	r4, r2
 8013e54:	461a      	mov	r2, r3
 8013e56:	4b09      	ldr	r3, [pc, #36]	@ (8013e7c <__assert_func+0x2c>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4605      	mov	r5, r0
 8013e5c:	68d8      	ldr	r0, [r3, #12]
 8013e5e:	b14c      	cbz	r4, 8013e74 <__assert_func+0x24>
 8013e60:	4b07      	ldr	r3, [pc, #28]	@ (8013e80 <__assert_func+0x30>)
 8013e62:	9100      	str	r1, [sp, #0]
 8013e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e68:	4906      	ldr	r1, [pc, #24]	@ (8013e84 <__assert_func+0x34>)
 8013e6a:	462b      	mov	r3, r5
 8013e6c:	f000 fba8 	bl	80145c0 <fiprintf>
 8013e70:	f000 fbb8 	bl	80145e4 <abort>
 8013e74:	4b04      	ldr	r3, [pc, #16]	@ (8013e88 <__assert_func+0x38>)
 8013e76:	461c      	mov	r4, r3
 8013e78:	e7f3      	b.n	8013e62 <__assert_func+0x12>
 8013e7a:	bf00      	nop
 8013e7c:	2000003c 	.word	0x2000003c
 8013e80:	080156ba 	.word	0x080156ba
 8013e84:	080156c7 	.word	0x080156c7
 8013e88:	080156f5 	.word	0x080156f5

08013e8c <_calloc_r>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	fba1 5402 	umull	r5, r4, r1, r2
 8013e92:	b934      	cbnz	r4, 8013ea2 <_calloc_r+0x16>
 8013e94:	4629      	mov	r1, r5
 8013e96:	f7fe f9d7 	bl	8012248 <_malloc_r>
 8013e9a:	4606      	mov	r6, r0
 8013e9c:	b928      	cbnz	r0, 8013eaa <_calloc_r+0x1e>
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	bd70      	pop	{r4, r5, r6, pc}
 8013ea2:	220c      	movs	r2, #12
 8013ea4:	6002      	str	r2, [r0, #0]
 8013ea6:	2600      	movs	r6, #0
 8013ea8:	e7f9      	b.n	8013e9e <_calloc_r+0x12>
 8013eaa:	462a      	mov	r2, r5
 8013eac:	4621      	mov	r1, r4
 8013eae:	f7fd fa0c 	bl	80112ca <memset>
 8013eb2:	e7f4      	b.n	8013e9e <_calloc_r+0x12>

08013eb4 <rshift>:
 8013eb4:	6903      	ldr	r3, [r0, #16]
 8013eb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ebe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013ec2:	f100 0414 	add.w	r4, r0, #20
 8013ec6:	dd45      	ble.n	8013f54 <rshift+0xa0>
 8013ec8:	f011 011f 	ands.w	r1, r1, #31
 8013ecc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013ed0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013ed4:	d10c      	bne.n	8013ef0 <rshift+0x3c>
 8013ed6:	f100 0710 	add.w	r7, r0, #16
 8013eda:	4629      	mov	r1, r5
 8013edc:	42b1      	cmp	r1, r6
 8013ede:	d334      	bcc.n	8013f4a <rshift+0x96>
 8013ee0:	1a9b      	subs	r3, r3, r2
 8013ee2:	009b      	lsls	r3, r3, #2
 8013ee4:	1eea      	subs	r2, r5, #3
 8013ee6:	4296      	cmp	r6, r2
 8013ee8:	bf38      	it	cc
 8013eea:	2300      	movcc	r3, #0
 8013eec:	4423      	add	r3, r4
 8013eee:	e015      	b.n	8013f1c <rshift+0x68>
 8013ef0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013ef4:	f1c1 0820 	rsb	r8, r1, #32
 8013ef8:	40cf      	lsrs	r7, r1
 8013efa:	f105 0e04 	add.w	lr, r5, #4
 8013efe:	46a1      	mov	r9, r4
 8013f00:	4576      	cmp	r6, lr
 8013f02:	46f4      	mov	ip, lr
 8013f04:	d815      	bhi.n	8013f32 <rshift+0x7e>
 8013f06:	1a9a      	subs	r2, r3, r2
 8013f08:	0092      	lsls	r2, r2, #2
 8013f0a:	3a04      	subs	r2, #4
 8013f0c:	3501      	adds	r5, #1
 8013f0e:	42ae      	cmp	r6, r5
 8013f10:	bf38      	it	cc
 8013f12:	2200      	movcc	r2, #0
 8013f14:	18a3      	adds	r3, r4, r2
 8013f16:	50a7      	str	r7, [r4, r2]
 8013f18:	b107      	cbz	r7, 8013f1c <rshift+0x68>
 8013f1a:	3304      	adds	r3, #4
 8013f1c:	1b1a      	subs	r2, r3, r4
 8013f1e:	42a3      	cmp	r3, r4
 8013f20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013f24:	bf08      	it	eq
 8013f26:	2300      	moveq	r3, #0
 8013f28:	6102      	str	r2, [r0, #16]
 8013f2a:	bf08      	it	eq
 8013f2c:	6143      	streq	r3, [r0, #20]
 8013f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f32:	f8dc c000 	ldr.w	ip, [ip]
 8013f36:	fa0c fc08 	lsl.w	ip, ip, r8
 8013f3a:	ea4c 0707 	orr.w	r7, ip, r7
 8013f3e:	f849 7b04 	str.w	r7, [r9], #4
 8013f42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013f46:	40cf      	lsrs	r7, r1
 8013f48:	e7da      	b.n	8013f00 <rshift+0x4c>
 8013f4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8013f4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013f52:	e7c3      	b.n	8013edc <rshift+0x28>
 8013f54:	4623      	mov	r3, r4
 8013f56:	e7e1      	b.n	8013f1c <rshift+0x68>

08013f58 <__hexdig_fun>:
 8013f58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013f5c:	2b09      	cmp	r3, #9
 8013f5e:	d802      	bhi.n	8013f66 <__hexdig_fun+0xe>
 8013f60:	3820      	subs	r0, #32
 8013f62:	b2c0      	uxtb	r0, r0
 8013f64:	4770      	bx	lr
 8013f66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013f6a:	2b05      	cmp	r3, #5
 8013f6c:	d801      	bhi.n	8013f72 <__hexdig_fun+0x1a>
 8013f6e:	3847      	subs	r0, #71	@ 0x47
 8013f70:	e7f7      	b.n	8013f62 <__hexdig_fun+0xa>
 8013f72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013f76:	2b05      	cmp	r3, #5
 8013f78:	d801      	bhi.n	8013f7e <__hexdig_fun+0x26>
 8013f7a:	3827      	subs	r0, #39	@ 0x27
 8013f7c:	e7f1      	b.n	8013f62 <__hexdig_fun+0xa>
 8013f7e:	2000      	movs	r0, #0
 8013f80:	4770      	bx	lr
	...

08013f84 <__gethex>:
 8013f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f88:	b085      	sub	sp, #20
 8013f8a:	468a      	mov	sl, r1
 8013f8c:	9302      	str	r3, [sp, #8]
 8013f8e:	680b      	ldr	r3, [r1, #0]
 8013f90:	9001      	str	r0, [sp, #4]
 8013f92:	4690      	mov	r8, r2
 8013f94:	1c9c      	adds	r4, r3, #2
 8013f96:	46a1      	mov	r9, r4
 8013f98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013f9c:	2830      	cmp	r0, #48	@ 0x30
 8013f9e:	d0fa      	beq.n	8013f96 <__gethex+0x12>
 8013fa0:	eba9 0303 	sub.w	r3, r9, r3
 8013fa4:	f1a3 0b02 	sub.w	fp, r3, #2
 8013fa8:	f7ff ffd6 	bl	8013f58 <__hexdig_fun>
 8013fac:	4605      	mov	r5, r0
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	d168      	bne.n	8014084 <__gethex+0x100>
 8013fb2:	49a0      	ldr	r1, [pc, #640]	@ (8014234 <__gethex+0x2b0>)
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	4648      	mov	r0, r9
 8013fb8:	f7ff ff1e 	bl	8013df8 <strncmp>
 8013fbc:	4607      	mov	r7, r0
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d167      	bne.n	8014092 <__gethex+0x10e>
 8013fc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013fc6:	4626      	mov	r6, r4
 8013fc8:	f7ff ffc6 	bl	8013f58 <__hexdig_fun>
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	d062      	beq.n	8014096 <__gethex+0x112>
 8013fd0:	4623      	mov	r3, r4
 8013fd2:	7818      	ldrb	r0, [r3, #0]
 8013fd4:	2830      	cmp	r0, #48	@ 0x30
 8013fd6:	4699      	mov	r9, r3
 8013fd8:	f103 0301 	add.w	r3, r3, #1
 8013fdc:	d0f9      	beq.n	8013fd2 <__gethex+0x4e>
 8013fde:	f7ff ffbb 	bl	8013f58 <__hexdig_fun>
 8013fe2:	fab0 f580 	clz	r5, r0
 8013fe6:	096d      	lsrs	r5, r5, #5
 8013fe8:	f04f 0b01 	mov.w	fp, #1
 8013fec:	464a      	mov	r2, r9
 8013fee:	4616      	mov	r6, r2
 8013ff0:	3201      	adds	r2, #1
 8013ff2:	7830      	ldrb	r0, [r6, #0]
 8013ff4:	f7ff ffb0 	bl	8013f58 <__hexdig_fun>
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d1f8      	bne.n	8013fee <__gethex+0x6a>
 8013ffc:	498d      	ldr	r1, [pc, #564]	@ (8014234 <__gethex+0x2b0>)
 8013ffe:	2201      	movs	r2, #1
 8014000:	4630      	mov	r0, r6
 8014002:	f7ff fef9 	bl	8013df8 <strncmp>
 8014006:	2800      	cmp	r0, #0
 8014008:	d13f      	bne.n	801408a <__gethex+0x106>
 801400a:	b944      	cbnz	r4, 801401e <__gethex+0x9a>
 801400c:	1c74      	adds	r4, r6, #1
 801400e:	4622      	mov	r2, r4
 8014010:	4616      	mov	r6, r2
 8014012:	3201      	adds	r2, #1
 8014014:	7830      	ldrb	r0, [r6, #0]
 8014016:	f7ff ff9f 	bl	8013f58 <__hexdig_fun>
 801401a:	2800      	cmp	r0, #0
 801401c:	d1f8      	bne.n	8014010 <__gethex+0x8c>
 801401e:	1ba4      	subs	r4, r4, r6
 8014020:	00a7      	lsls	r7, r4, #2
 8014022:	7833      	ldrb	r3, [r6, #0]
 8014024:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014028:	2b50      	cmp	r3, #80	@ 0x50
 801402a:	d13e      	bne.n	80140aa <__gethex+0x126>
 801402c:	7873      	ldrb	r3, [r6, #1]
 801402e:	2b2b      	cmp	r3, #43	@ 0x2b
 8014030:	d033      	beq.n	801409a <__gethex+0x116>
 8014032:	2b2d      	cmp	r3, #45	@ 0x2d
 8014034:	d034      	beq.n	80140a0 <__gethex+0x11c>
 8014036:	1c71      	adds	r1, r6, #1
 8014038:	2400      	movs	r4, #0
 801403a:	7808      	ldrb	r0, [r1, #0]
 801403c:	f7ff ff8c 	bl	8013f58 <__hexdig_fun>
 8014040:	1e43      	subs	r3, r0, #1
 8014042:	b2db      	uxtb	r3, r3
 8014044:	2b18      	cmp	r3, #24
 8014046:	d830      	bhi.n	80140aa <__gethex+0x126>
 8014048:	f1a0 0210 	sub.w	r2, r0, #16
 801404c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014050:	f7ff ff82 	bl	8013f58 <__hexdig_fun>
 8014054:	f100 3cff 	add.w	ip, r0, #4294967295
 8014058:	fa5f fc8c 	uxtb.w	ip, ip
 801405c:	f1bc 0f18 	cmp.w	ip, #24
 8014060:	f04f 030a 	mov.w	r3, #10
 8014064:	d91e      	bls.n	80140a4 <__gethex+0x120>
 8014066:	b104      	cbz	r4, 801406a <__gethex+0xe6>
 8014068:	4252      	negs	r2, r2
 801406a:	4417      	add	r7, r2
 801406c:	f8ca 1000 	str.w	r1, [sl]
 8014070:	b1ed      	cbz	r5, 80140ae <__gethex+0x12a>
 8014072:	f1bb 0f00 	cmp.w	fp, #0
 8014076:	bf0c      	ite	eq
 8014078:	2506      	moveq	r5, #6
 801407a:	2500      	movne	r5, #0
 801407c:	4628      	mov	r0, r5
 801407e:	b005      	add	sp, #20
 8014080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014084:	2500      	movs	r5, #0
 8014086:	462c      	mov	r4, r5
 8014088:	e7b0      	b.n	8013fec <__gethex+0x68>
 801408a:	2c00      	cmp	r4, #0
 801408c:	d1c7      	bne.n	801401e <__gethex+0x9a>
 801408e:	4627      	mov	r7, r4
 8014090:	e7c7      	b.n	8014022 <__gethex+0x9e>
 8014092:	464e      	mov	r6, r9
 8014094:	462f      	mov	r7, r5
 8014096:	2501      	movs	r5, #1
 8014098:	e7c3      	b.n	8014022 <__gethex+0x9e>
 801409a:	2400      	movs	r4, #0
 801409c:	1cb1      	adds	r1, r6, #2
 801409e:	e7cc      	b.n	801403a <__gethex+0xb6>
 80140a0:	2401      	movs	r4, #1
 80140a2:	e7fb      	b.n	801409c <__gethex+0x118>
 80140a4:	fb03 0002 	mla	r0, r3, r2, r0
 80140a8:	e7ce      	b.n	8014048 <__gethex+0xc4>
 80140aa:	4631      	mov	r1, r6
 80140ac:	e7de      	b.n	801406c <__gethex+0xe8>
 80140ae:	eba6 0309 	sub.w	r3, r6, r9
 80140b2:	3b01      	subs	r3, #1
 80140b4:	4629      	mov	r1, r5
 80140b6:	2b07      	cmp	r3, #7
 80140b8:	dc0a      	bgt.n	80140d0 <__gethex+0x14c>
 80140ba:	9801      	ldr	r0, [sp, #4]
 80140bc:	f7fe f950 	bl	8012360 <_Balloc>
 80140c0:	4604      	mov	r4, r0
 80140c2:	b940      	cbnz	r0, 80140d6 <__gethex+0x152>
 80140c4:	4b5c      	ldr	r3, [pc, #368]	@ (8014238 <__gethex+0x2b4>)
 80140c6:	4602      	mov	r2, r0
 80140c8:	21e4      	movs	r1, #228	@ 0xe4
 80140ca:	485c      	ldr	r0, [pc, #368]	@ (801423c <__gethex+0x2b8>)
 80140cc:	f7ff fec0 	bl	8013e50 <__assert_func>
 80140d0:	3101      	adds	r1, #1
 80140d2:	105b      	asrs	r3, r3, #1
 80140d4:	e7ef      	b.n	80140b6 <__gethex+0x132>
 80140d6:	f100 0a14 	add.w	sl, r0, #20
 80140da:	2300      	movs	r3, #0
 80140dc:	4655      	mov	r5, sl
 80140de:	469b      	mov	fp, r3
 80140e0:	45b1      	cmp	r9, r6
 80140e2:	d337      	bcc.n	8014154 <__gethex+0x1d0>
 80140e4:	f845 bb04 	str.w	fp, [r5], #4
 80140e8:	eba5 050a 	sub.w	r5, r5, sl
 80140ec:	10ad      	asrs	r5, r5, #2
 80140ee:	6125      	str	r5, [r4, #16]
 80140f0:	4658      	mov	r0, fp
 80140f2:	f7fe fa27 	bl	8012544 <__hi0bits>
 80140f6:	016d      	lsls	r5, r5, #5
 80140f8:	f8d8 6000 	ldr.w	r6, [r8]
 80140fc:	1a2d      	subs	r5, r5, r0
 80140fe:	42b5      	cmp	r5, r6
 8014100:	dd54      	ble.n	80141ac <__gethex+0x228>
 8014102:	1bad      	subs	r5, r5, r6
 8014104:	4629      	mov	r1, r5
 8014106:	4620      	mov	r0, r4
 8014108:	f7fe fdb3 	bl	8012c72 <__any_on>
 801410c:	4681      	mov	r9, r0
 801410e:	b178      	cbz	r0, 8014130 <__gethex+0x1ac>
 8014110:	1e6b      	subs	r3, r5, #1
 8014112:	1159      	asrs	r1, r3, #5
 8014114:	f003 021f 	and.w	r2, r3, #31
 8014118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801411c:	f04f 0901 	mov.w	r9, #1
 8014120:	fa09 f202 	lsl.w	r2, r9, r2
 8014124:	420a      	tst	r2, r1
 8014126:	d003      	beq.n	8014130 <__gethex+0x1ac>
 8014128:	454b      	cmp	r3, r9
 801412a:	dc36      	bgt.n	801419a <__gethex+0x216>
 801412c:	f04f 0902 	mov.w	r9, #2
 8014130:	4629      	mov	r1, r5
 8014132:	4620      	mov	r0, r4
 8014134:	f7ff febe 	bl	8013eb4 <rshift>
 8014138:	442f      	add	r7, r5
 801413a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801413e:	42bb      	cmp	r3, r7
 8014140:	da42      	bge.n	80141c8 <__gethex+0x244>
 8014142:	9801      	ldr	r0, [sp, #4]
 8014144:	4621      	mov	r1, r4
 8014146:	f7fe f94b 	bl	80123e0 <_Bfree>
 801414a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801414c:	2300      	movs	r3, #0
 801414e:	6013      	str	r3, [r2, #0]
 8014150:	25a3      	movs	r5, #163	@ 0xa3
 8014152:	e793      	b.n	801407c <__gethex+0xf8>
 8014154:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014158:	2a2e      	cmp	r2, #46	@ 0x2e
 801415a:	d012      	beq.n	8014182 <__gethex+0x1fe>
 801415c:	2b20      	cmp	r3, #32
 801415e:	d104      	bne.n	801416a <__gethex+0x1e6>
 8014160:	f845 bb04 	str.w	fp, [r5], #4
 8014164:	f04f 0b00 	mov.w	fp, #0
 8014168:	465b      	mov	r3, fp
 801416a:	7830      	ldrb	r0, [r6, #0]
 801416c:	9303      	str	r3, [sp, #12]
 801416e:	f7ff fef3 	bl	8013f58 <__hexdig_fun>
 8014172:	9b03      	ldr	r3, [sp, #12]
 8014174:	f000 000f 	and.w	r0, r0, #15
 8014178:	4098      	lsls	r0, r3
 801417a:	ea4b 0b00 	orr.w	fp, fp, r0
 801417e:	3304      	adds	r3, #4
 8014180:	e7ae      	b.n	80140e0 <__gethex+0x15c>
 8014182:	45b1      	cmp	r9, r6
 8014184:	d8ea      	bhi.n	801415c <__gethex+0x1d8>
 8014186:	492b      	ldr	r1, [pc, #172]	@ (8014234 <__gethex+0x2b0>)
 8014188:	9303      	str	r3, [sp, #12]
 801418a:	2201      	movs	r2, #1
 801418c:	4630      	mov	r0, r6
 801418e:	f7ff fe33 	bl	8013df8 <strncmp>
 8014192:	9b03      	ldr	r3, [sp, #12]
 8014194:	2800      	cmp	r0, #0
 8014196:	d1e1      	bne.n	801415c <__gethex+0x1d8>
 8014198:	e7a2      	b.n	80140e0 <__gethex+0x15c>
 801419a:	1ea9      	subs	r1, r5, #2
 801419c:	4620      	mov	r0, r4
 801419e:	f7fe fd68 	bl	8012c72 <__any_on>
 80141a2:	2800      	cmp	r0, #0
 80141a4:	d0c2      	beq.n	801412c <__gethex+0x1a8>
 80141a6:	f04f 0903 	mov.w	r9, #3
 80141aa:	e7c1      	b.n	8014130 <__gethex+0x1ac>
 80141ac:	da09      	bge.n	80141c2 <__gethex+0x23e>
 80141ae:	1b75      	subs	r5, r6, r5
 80141b0:	4621      	mov	r1, r4
 80141b2:	9801      	ldr	r0, [sp, #4]
 80141b4:	462a      	mov	r2, r5
 80141b6:	f7fe fb23 	bl	8012800 <__lshift>
 80141ba:	1b7f      	subs	r7, r7, r5
 80141bc:	4604      	mov	r4, r0
 80141be:	f100 0a14 	add.w	sl, r0, #20
 80141c2:	f04f 0900 	mov.w	r9, #0
 80141c6:	e7b8      	b.n	801413a <__gethex+0x1b6>
 80141c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80141cc:	42bd      	cmp	r5, r7
 80141ce:	dd6f      	ble.n	80142b0 <__gethex+0x32c>
 80141d0:	1bed      	subs	r5, r5, r7
 80141d2:	42ae      	cmp	r6, r5
 80141d4:	dc34      	bgt.n	8014240 <__gethex+0x2bc>
 80141d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80141da:	2b02      	cmp	r3, #2
 80141dc:	d022      	beq.n	8014224 <__gethex+0x2a0>
 80141de:	2b03      	cmp	r3, #3
 80141e0:	d024      	beq.n	801422c <__gethex+0x2a8>
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d115      	bne.n	8014212 <__gethex+0x28e>
 80141e6:	42ae      	cmp	r6, r5
 80141e8:	d113      	bne.n	8014212 <__gethex+0x28e>
 80141ea:	2e01      	cmp	r6, #1
 80141ec:	d10b      	bne.n	8014206 <__gethex+0x282>
 80141ee:	9a02      	ldr	r2, [sp, #8]
 80141f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80141f4:	6013      	str	r3, [r2, #0]
 80141f6:	2301      	movs	r3, #1
 80141f8:	6123      	str	r3, [r4, #16]
 80141fa:	f8ca 3000 	str.w	r3, [sl]
 80141fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014200:	2562      	movs	r5, #98	@ 0x62
 8014202:	601c      	str	r4, [r3, #0]
 8014204:	e73a      	b.n	801407c <__gethex+0xf8>
 8014206:	1e71      	subs	r1, r6, #1
 8014208:	4620      	mov	r0, r4
 801420a:	f7fe fd32 	bl	8012c72 <__any_on>
 801420e:	2800      	cmp	r0, #0
 8014210:	d1ed      	bne.n	80141ee <__gethex+0x26a>
 8014212:	9801      	ldr	r0, [sp, #4]
 8014214:	4621      	mov	r1, r4
 8014216:	f7fe f8e3 	bl	80123e0 <_Bfree>
 801421a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801421c:	2300      	movs	r3, #0
 801421e:	6013      	str	r3, [r2, #0]
 8014220:	2550      	movs	r5, #80	@ 0x50
 8014222:	e72b      	b.n	801407c <__gethex+0xf8>
 8014224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014226:	2b00      	cmp	r3, #0
 8014228:	d1f3      	bne.n	8014212 <__gethex+0x28e>
 801422a:	e7e0      	b.n	80141ee <__gethex+0x26a>
 801422c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801422e:	2b00      	cmp	r3, #0
 8014230:	d1dd      	bne.n	80141ee <__gethex+0x26a>
 8014232:	e7ee      	b.n	8014212 <__gethex+0x28e>
 8014234:	0801569f 	.word	0x0801569f
 8014238:	08015635 	.word	0x08015635
 801423c:	080156f6 	.word	0x080156f6
 8014240:	1e6f      	subs	r7, r5, #1
 8014242:	f1b9 0f00 	cmp.w	r9, #0
 8014246:	d130      	bne.n	80142aa <__gethex+0x326>
 8014248:	b127      	cbz	r7, 8014254 <__gethex+0x2d0>
 801424a:	4639      	mov	r1, r7
 801424c:	4620      	mov	r0, r4
 801424e:	f7fe fd10 	bl	8012c72 <__any_on>
 8014252:	4681      	mov	r9, r0
 8014254:	117a      	asrs	r2, r7, #5
 8014256:	2301      	movs	r3, #1
 8014258:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801425c:	f007 071f 	and.w	r7, r7, #31
 8014260:	40bb      	lsls	r3, r7
 8014262:	4213      	tst	r3, r2
 8014264:	4629      	mov	r1, r5
 8014266:	4620      	mov	r0, r4
 8014268:	bf18      	it	ne
 801426a:	f049 0902 	orrne.w	r9, r9, #2
 801426e:	f7ff fe21 	bl	8013eb4 <rshift>
 8014272:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014276:	1b76      	subs	r6, r6, r5
 8014278:	2502      	movs	r5, #2
 801427a:	f1b9 0f00 	cmp.w	r9, #0
 801427e:	d047      	beq.n	8014310 <__gethex+0x38c>
 8014280:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014284:	2b02      	cmp	r3, #2
 8014286:	d015      	beq.n	80142b4 <__gethex+0x330>
 8014288:	2b03      	cmp	r3, #3
 801428a:	d017      	beq.n	80142bc <__gethex+0x338>
 801428c:	2b01      	cmp	r3, #1
 801428e:	d109      	bne.n	80142a4 <__gethex+0x320>
 8014290:	f019 0f02 	tst.w	r9, #2
 8014294:	d006      	beq.n	80142a4 <__gethex+0x320>
 8014296:	f8da 3000 	ldr.w	r3, [sl]
 801429a:	ea49 0903 	orr.w	r9, r9, r3
 801429e:	f019 0f01 	tst.w	r9, #1
 80142a2:	d10e      	bne.n	80142c2 <__gethex+0x33e>
 80142a4:	f045 0510 	orr.w	r5, r5, #16
 80142a8:	e032      	b.n	8014310 <__gethex+0x38c>
 80142aa:	f04f 0901 	mov.w	r9, #1
 80142ae:	e7d1      	b.n	8014254 <__gethex+0x2d0>
 80142b0:	2501      	movs	r5, #1
 80142b2:	e7e2      	b.n	801427a <__gethex+0x2f6>
 80142b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142b6:	f1c3 0301 	rsb	r3, r3, #1
 80142ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80142bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d0f0      	beq.n	80142a4 <__gethex+0x320>
 80142c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80142c6:	f104 0314 	add.w	r3, r4, #20
 80142ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80142ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80142d2:	f04f 0c00 	mov.w	ip, #0
 80142d6:	4618      	mov	r0, r3
 80142d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80142dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80142e0:	d01b      	beq.n	801431a <__gethex+0x396>
 80142e2:	3201      	adds	r2, #1
 80142e4:	6002      	str	r2, [r0, #0]
 80142e6:	2d02      	cmp	r5, #2
 80142e8:	f104 0314 	add.w	r3, r4, #20
 80142ec:	d13c      	bne.n	8014368 <__gethex+0x3e4>
 80142ee:	f8d8 2000 	ldr.w	r2, [r8]
 80142f2:	3a01      	subs	r2, #1
 80142f4:	42b2      	cmp	r2, r6
 80142f6:	d109      	bne.n	801430c <__gethex+0x388>
 80142f8:	1171      	asrs	r1, r6, #5
 80142fa:	2201      	movs	r2, #1
 80142fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014300:	f006 061f 	and.w	r6, r6, #31
 8014304:	fa02 f606 	lsl.w	r6, r2, r6
 8014308:	421e      	tst	r6, r3
 801430a:	d13a      	bne.n	8014382 <__gethex+0x3fe>
 801430c:	f045 0520 	orr.w	r5, r5, #32
 8014310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014312:	601c      	str	r4, [r3, #0]
 8014314:	9b02      	ldr	r3, [sp, #8]
 8014316:	601f      	str	r7, [r3, #0]
 8014318:	e6b0      	b.n	801407c <__gethex+0xf8>
 801431a:	4299      	cmp	r1, r3
 801431c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014320:	d8d9      	bhi.n	80142d6 <__gethex+0x352>
 8014322:	68a3      	ldr	r3, [r4, #8]
 8014324:	459b      	cmp	fp, r3
 8014326:	db17      	blt.n	8014358 <__gethex+0x3d4>
 8014328:	6861      	ldr	r1, [r4, #4]
 801432a:	9801      	ldr	r0, [sp, #4]
 801432c:	3101      	adds	r1, #1
 801432e:	f7fe f817 	bl	8012360 <_Balloc>
 8014332:	4681      	mov	r9, r0
 8014334:	b918      	cbnz	r0, 801433e <__gethex+0x3ba>
 8014336:	4b1a      	ldr	r3, [pc, #104]	@ (80143a0 <__gethex+0x41c>)
 8014338:	4602      	mov	r2, r0
 801433a:	2184      	movs	r1, #132	@ 0x84
 801433c:	e6c5      	b.n	80140ca <__gethex+0x146>
 801433e:	6922      	ldr	r2, [r4, #16]
 8014340:	3202      	adds	r2, #2
 8014342:	f104 010c 	add.w	r1, r4, #12
 8014346:	0092      	lsls	r2, r2, #2
 8014348:	300c      	adds	r0, #12
 801434a:	f7fd f89c 	bl	8011486 <memcpy>
 801434e:	4621      	mov	r1, r4
 8014350:	9801      	ldr	r0, [sp, #4]
 8014352:	f7fe f845 	bl	80123e0 <_Bfree>
 8014356:	464c      	mov	r4, r9
 8014358:	6923      	ldr	r3, [r4, #16]
 801435a:	1c5a      	adds	r2, r3, #1
 801435c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014360:	6122      	str	r2, [r4, #16]
 8014362:	2201      	movs	r2, #1
 8014364:	615a      	str	r2, [r3, #20]
 8014366:	e7be      	b.n	80142e6 <__gethex+0x362>
 8014368:	6922      	ldr	r2, [r4, #16]
 801436a:	455a      	cmp	r2, fp
 801436c:	dd0b      	ble.n	8014386 <__gethex+0x402>
 801436e:	2101      	movs	r1, #1
 8014370:	4620      	mov	r0, r4
 8014372:	f7ff fd9f 	bl	8013eb4 <rshift>
 8014376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801437a:	3701      	adds	r7, #1
 801437c:	42bb      	cmp	r3, r7
 801437e:	f6ff aee0 	blt.w	8014142 <__gethex+0x1be>
 8014382:	2501      	movs	r5, #1
 8014384:	e7c2      	b.n	801430c <__gethex+0x388>
 8014386:	f016 061f 	ands.w	r6, r6, #31
 801438a:	d0fa      	beq.n	8014382 <__gethex+0x3fe>
 801438c:	4453      	add	r3, sl
 801438e:	f1c6 0620 	rsb	r6, r6, #32
 8014392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014396:	f7fe f8d5 	bl	8012544 <__hi0bits>
 801439a:	42b0      	cmp	r0, r6
 801439c:	dbe7      	blt.n	801436e <__gethex+0x3ea>
 801439e:	e7f0      	b.n	8014382 <__gethex+0x3fe>
 80143a0:	08015635 	.word	0x08015635

080143a4 <L_shift>:
 80143a4:	f1c2 0208 	rsb	r2, r2, #8
 80143a8:	0092      	lsls	r2, r2, #2
 80143aa:	b570      	push	{r4, r5, r6, lr}
 80143ac:	f1c2 0620 	rsb	r6, r2, #32
 80143b0:	6843      	ldr	r3, [r0, #4]
 80143b2:	6804      	ldr	r4, [r0, #0]
 80143b4:	fa03 f506 	lsl.w	r5, r3, r6
 80143b8:	432c      	orrs	r4, r5
 80143ba:	40d3      	lsrs	r3, r2
 80143bc:	6004      	str	r4, [r0, #0]
 80143be:	f840 3f04 	str.w	r3, [r0, #4]!
 80143c2:	4288      	cmp	r0, r1
 80143c4:	d3f4      	bcc.n	80143b0 <L_shift+0xc>
 80143c6:	bd70      	pop	{r4, r5, r6, pc}

080143c8 <__match>:
 80143c8:	b530      	push	{r4, r5, lr}
 80143ca:	6803      	ldr	r3, [r0, #0]
 80143cc:	3301      	adds	r3, #1
 80143ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143d2:	b914      	cbnz	r4, 80143da <__match+0x12>
 80143d4:	6003      	str	r3, [r0, #0]
 80143d6:	2001      	movs	r0, #1
 80143d8:	bd30      	pop	{r4, r5, pc}
 80143da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80143e2:	2d19      	cmp	r5, #25
 80143e4:	bf98      	it	ls
 80143e6:	3220      	addls	r2, #32
 80143e8:	42a2      	cmp	r2, r4
 80143ea:	d0f0      	beq.n	80143ce <__match+0x6>
 80143ec:	2000      	movs	r0, #0
 80143ee:	e7f3      	b.n	80143d8 <__match+0x10>

080143f0 <__hexnan>:
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	680b      	ldr	r3, [r1, #0]
 80143f6:	6801      	ldr	r1, [r0, #0]
 80143f8:	115e      	asrs	r6, r3, #5
 80143fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80143fe:	f013 031f 	ands.w	r3, r3, #31
 8014402:	b087      	sub	sp, #28
 8014404:	bf18      	it	ne
 8014406:	3604      	addne	r6, #4
 8014408:	2500      	movs	r5, #0
 801440a:	1f37      	subs	r7, r6, #4
 801440c:	4682      	mov	sl, r0
 801440e:	4690      	mov	r8, r2
 8014410:	9301      	str	r3, [sp, #4]
 8014412:	f846 5c04 	str.w	r5, [r6, #-4]
 8014416:	46b9      	mov	r9, r7
 8014418:	463c      	mov	r4, r7
 801441a:	9502      	str	r5, [sp, #8]
 801441c:	46ab      	mov	fp, r5
 801441e:	784a      	ldrb	r2, [r1, #1]
 8014420:	1c4b      	adds	r3, r1, #1
 8014422:	9303      	str	r3, [sp, #12]
 8014424:	b342      	cbz	r2, 8014478 <__hexnan+0x88>
 8014426:	4610      	mov	r0, r2
 8014428:	9105      	str	r1, [sp, #20]
 801442a:	9204      	str	r2, [sp, #16]
 801442c:	f7ff fd94 	bl	8013f58 <__hexdig_fun>
 8014430:	2800      	cmp	r0, #0
 8014432:	d151      	bne.n	80144d8 <__hexnan+0xe8>
 8014434:	9a04      	ldr	r2, [sp, #16]
 8014436:	9905      	ldr	r1, [sp, #20]
 8014438:	2a20      	cmp	r2, #32
 801443a:	d818      	bhi.n	801446e <__hexnan+0x7e>
 801443c:	9b02      	ldr	r3, [sp, #8]
 801443e:	459b      	cmp	fp, r3
 8014440:	dd13      	ble.n	801446a <__hexnan+0x7a>
 8014442:	454c      	cmp	r4, r9
 8014444:	d206      	bcs.n	8014454 <__hexnan+0x64>
 8014446:	2d07      	cmp	r5, #7
 8014448:	dc04      	bgt.n	8014454 <__hexnan+0x64>
 801444a:	462a      	mov	r2, r5
 801444c:	4649      	mov	r1, r9
 801444e:	4620      	mov	r0, r4
 8014450:	f7ff ffa8 	bl	80143a4 <L_shift>
 8014454:	4544      	cmp	r4, r8
 8014456:	d952      	bls.n	80144fe <__hexnan+0x10e>
 8014458:	2300      	movs	r3, #0
 801445a:	f1a4 0904 	sub.w	r9, r4, #4
 801445e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014462:	f8cd b008 	str.w	fp, [sp, #8]
 8014466:	464c      	mov	r4, r9
 8014468:	461d      	mov	r5, r3
 801446a:	9903      	ldr	r1, [sp, #12]
 801446c:	e7d7      	b.n	801441e <__hexnan+0x2e>
 801446e:	2a29      	cmp	r2, #41	@ 0x29
 8014470:	d157      	bne.n	8014522 <__hexnan+0x132>
 8014472:	3102      	adds	r1, #2
 8014474:	f8ca 1000 	str.w	r1, [sl]
 8014478:	f1bb 0f00 	cmp.w	fp, #0
 801447c:	d051      	beq.n	8014522 <__hexnan+0x132>
 801447e:	454c      	cmp	r4, r9
 8014480:	d206      	bcs.n	8014490 <__hexnan+0xa0>
 8014482:	2d07      	cmp	r5, #7
 8014484:	dc04      	bgt.n	8014490 <__hexnan+0xa0>
 8014486:	462a      	mov	r2, r5
 8014488:	4649      	mov	r1, r9
 801448a:	4620      	mov	r0, r4
 801448c:	f7ff ff8a 	bl	80143a4 <L_shift>
 8014490:	4544      	cmp	r4, r8
 8014492:	d936      	bls.n	8014502 <__hexnan+0x112>
 8014494:	f1a8 0204 	sub.w	r2, r8, #4
 8014498:	4623      	mov	r3, r4
 801449a:	f853 1b04 	ldr.w	r1, [r3], #4
 801449e:	f842 1f04 	str.w	r1, [r2, #4]!
 80144a2:	429f      	cmp	r7, r3
 80144a4:	d2f9      	bcs.n	801449a <__hexnan+0xaa>
 80144a6:	1b3b      	subs	r3, r7, r4
 80144a8:	f023 0303 	bic.w	r3, r3, #3
 80144ac:	3304      	adds	r3, #4
 80144ae:	3401      	adds	r4, #1
 80144b0:	3e03      	subs	r6, #3
 80144b2:	42b4      	cmp	r4, r6
 80144b4:	bf88      	it	hi
 80144b6:	2304      	movhi	r3, #4
 80144b8:	4443      	add	r3, r8
 80144ba:	2200      	movs	r2, #0
 80144bc:	f843 2b04 	str.w	r2, [r3], #4
 80144c0:	429f      	cmp	r7, r3
 80144c2:	d2fb      	bcs.n	80144bc <__hexnan+0xcc>
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	b91b      	cbnz	r3, 80144d0 <__hexnan+0xe0>
 80144c8:	4547      	cmp	r7, r8
 80144ca:	d128      	bne.n	801451e <__hexnan+0x12e>
 80144cc:	2301      	movs	r3, #1
 80144ce:	603b      	str	r3, [r7, #0]
 80144d0:	2005      	movs	r0, #5
 80144d2:	b007      	add	sp, #28
 80144d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d8:	3501      	adds	r5, #1
 80144da:	2d08      	cmp	r5, #8
 80144dc:	f10b 0b01 	add.w	fp, fp, #1
 80144e0:	dd06      	ble.n	80144f0 <__hexnan+0x100>
 80144e2:	4544      	cmp	r4, r8
 80144e4:	d9c1      	bls.n	801446a <__hexnan+0x7a>
 80144e6:	2300      	movs	r3, #0
 80144e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80144ec:	2501      	movs	r5, #1
 80144ee:	3c04      	subs	r4, #4
 80144f0:	6822      	ldr	r2, [r4, #0]
 80144f2:	f000 000f 	and.w	r0, r0, #15
 80144f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80144fa:	6020      	str	r0, [r4, #0]
 80144fc:	e7b5      	b.n	801446a <__hexnan+0x7a>
 80144fe:	2508      	movs	r5, #8
 8014500:	e7b3      	b.n	801446a <__hexnan+0x7a>
 8014502:	9b01      	ldr	r3, [sp, #4]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d0dd      	beq.n	80144c4 <__hexnan+0xd4>
 8014508:	f1c3 0320 	rsb	r3, r3, #32
 801450c:	f04f 32ff 	mov.w	r2, #4294967295
 8014510:	40da      	lsrs	r2, r3
 8014512:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014516:	4013      	ands	r3, r2
 8014518:	f846 3c04 	str.w	r3, [r6, #-4]
 801451c:	e7d2      	b.n	80144c4 <__hexnan+0xd4>
 801451e:	3f04      	subs	r7, #4
 8014520:	e7d0      	b.n	80144c4 <__hexnan+0xd4>
 8014522:	2004      	movs	r0, #4
 8014524:	e7d5      	b.n	80144d2 <__hexnan+0xe2>

08014526 <__ascii_mbtowc>:
 8014526:	b082      	sub	sp, #8
 8014528:	b901      	cbnz	r1, 801452c <__ascii_mbtowc+0x6>
 801452a:	a901      	add	r1, sp, #4
 801452c:	b142      	cbz	r2, 8014540 <__ascii_mbtowc+0x1a>
 801452e:	b14b      	cbz	r3, 8014544 <__ascii_mbtowc+0x1e>
 8014530:	7813      	ldrb	r3, [r2, #0]
 8014532:	600b      	str	r3, [r1, #0]
 8014534:	7812      	ldrb	r2, [r2, #0]
 8014536:	1e10      	subs	r0, r2, #0
 8014538:	bf18      	it	ne
 801453a:	2001      	movne	r0, #1
 801453c:	b002      	add	sp, #8
 801453e:	4770      	bx	lr
 8014540:	4610      	mov	r0, r2
 8014542:	e7fb      	b.n	801453c <__ascii_mbtowc+0x16>
 8014544:	f06f 0001 	mvn.w	r0, #1
 8014548:	e7f8      	b.n	801453c <__ascii_mbtowc+0x16>

0801454a <_realloc_r>:
 801454a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801454e:	4607      	mov	r7, r0
 8014550:	4614      	mov	r4, r2
 8014552:	460d      	mov	r5, r1
 8014554:	b921      	cbnz	r1, 8014560 <_realloc_r+0x16>
 8014556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801455a:	4611      	mov	r1, r2
 801455c:	f7fd be74 	b.w	8012248 <_malloc_r>
 8014560:	b92a      	cbnz	r2, 801456e <_realloc_r+0x24>
 8014562:	f7fd fdfd 	bl	8012160 <_free_r>
 8014566:	4625      	mov	r5, r4
 8014568:	4628      	mov	r0, r5
 801456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801456e:	f000 f840 	bl	80145f2 <_malloc_usable_size_r>
 8014572:	4284      	cmp	r4, r0
 8014574:	4606      	mov	r6, r0
 8014576:	d802      	bhi.n	801457e <_realloc_r+0x34>
 8014578:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801457c:	d8f4      	bhi.n	8014568 <_realloc_r+0x1e>
 801457e:	4621      	mov	r1, r4
 8014580:	4638      	mov	r0, r7
 8014582:	f7fd fe61 	bl	8012248 <_malloc_r>
 8014586:	4680      	mov	r8, r0
 8014588:	b908      	cbnz	r0, 801458e <_realloc_r+0x44>
 801458a:	4645      	mov	r5, r8
 801458c:	e7ec      	b.n	8014568 <_realloc_r+0x1e>
 801458e:	42b4      	cmp	r4, r6
 8014590:	4622      	mov	r2, r4
 8014592:	4629      	mov	r1, r5
 8014594:	bf28      	it	cs
 8014596:	4632      	movcs	r2, r6
 8014598:	f7fc ff75 	bl	8011486 <memcpy>
 801459c:	4629      	mov	r1, r5
 801459e:	4638      	mov	r0, r7
 80145a0:	f7fd fdde 	bl	8012160 <_free_r>
 80145a4:	e7f1      	b.n	801458a <_realloc_r+0x40>

080145a6 <__ascii_wctomb>:
 80145a6:	4603      	mov	r3, r0
 80145a8:	4608      	mov	r0, r1
 80145aa:	b141      	cbz	r1, 80145be <__ascii_wctomb+0x18>
 80145ac:	2aff      	cmp	r2, #255	@ 0xff
 80145ae:	d904      	bls.n	80145ba <__ascii_wctomb+0x14>
 80145b0:	228a      	movs	r2, #138	@ 0x8a
 80145b2:	601a      	str	r2, [r3, #0]
 80145b4:	f04f 30ff 	mov.w	r0, #4294967295
 80145b8:	4770      	bx	lr
 80145ba:	700a      	strb	r2, [r1, #0]
 80145bc:	2001      	movs	r0, #1
 80145be:	4770      	bx	lr

080145c0 <fiprintf>:
 80145c0:	b40e      	push	{r1, r2, r3}
 80145c2:	b503      	push	{r0, r1, lr}
 80145c4:	4601      	mov	r1, r0
 80145c6:	ab03      	add	r3, sp, #12
 80145c8:	4805      	ldr	r0, [pc, #20]	@ (80145e0 <fiprintf+0x20>)
 80145ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80145ce:	6800      	ldr	r0, [r0, #0]
 80145d0:	9301      	str	r3, [sp, #4]
 80145d2:	f000 f83f 	bl	8014654 <_vfiprintf_r>
 80145d6:	b002      	add	sp, #8
 80145d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80145dc:	b003      	add	sp, #12
 80145de:	4770      	bx	lr
 80145e0:	2000003c 	.word	0x2000003c

080145e4 <abort>:
 80145e4:	b508      	push	{r3, lr}
 80145e6:	2006      	movs	r0, #6
 80145e8:	f000 fa08 	bl	80149fc <raise>
 80145ec:	2001      	movs	r0, #1
 80145ee:	f7ee f8f7 	bl	80027e0 <_exit>

080145f2 <_malloc_usable_size_r>:
 80145f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145f6:	1f18      	subs	r0, r3, #4
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	bfbc      	itt	lt
 80145fc:	580b      	ldrlt	r3, [r1, r0]
 80145fe:	18c0      	addlt	r0, r0, r3
 8014600:	4770      	bx	lr

08014602 <__sfputc_r>:
 8014602:	6893      	ldr	r3, [r2, #8]
 8014604:	3b01      	subs	r3, #1
 8014606:	2b00      	cmp	r3, #0
 8014608:	b410      	push	{r4}
 801460a:	6093      	str	r3, [r2, #8]
 801460c:	da08      	bge.n	8014620 <__sfputc_r+0x1e>
 801460e:	6994      	ldr	r4, [r2, #24]
 8014610:	42a3      	cmp	r3, r4
 8014612:	db01      	blt.n	8014618 <__sfputc_r+0x16>
 8014614:	290a      	cmp	r1, #10
 8014616:	d103      	bne.n	8014620 <__sfputc_r+0x1e>
 8014618:	f85d 4b04 	ldr.w	r4, [sp], #4
 801461c:	f000 b932 	b.w	8014884 <__swbuf_r>
 8014620:	6813      	ldr	r3, [r2, #0]
 8014622:	1c58      	adds	r0, r3, #1
 8014624:	6010      	str	r0, [r2, #0]
 8014626:	7019      	strb	r1, [r3, #0]
 8014628:	4608      	mov	r0, r1
 801462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801462e:	4770      	bx	lr

08014630 <__sfputs_r>:
 8014630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014632:	4606      	mov	r6, r0
 8014634:	460f      	mov	r7, r1
 8014636:	4614      	mov	r4, r2
 8014638:	18d5      	adds	r5, r2, r3
 801463a:	42ac      	cmp	r4, r5
 801463c:	d101      	bne.n	8014642 <__sfputs_r+0x12>
 801463e:	2000      	movs	r0, #0
 8014640:	e007      	b.n	8014652 <__sfputs_r+0x22>
 8014642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014646:	463a      	mov	r2, r7
 8014648:	4630      	mov	r0, r6
 801464a:	f7ff ffda 	bl	8014602 <__sfputc_r>
 801464e:	1c43      	adds	r3, r0, #1
 8014650:	d1f3      	bne.n	801463a <__sfputs_r+0xa>
 8014652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014654 <_vfiprintf_r>:
 8014654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014658:	460d      	mov	r5, r1
 801465a:	b09d      	sub	sp, #116	@ 0x74
 801465c:	4614      	mov	r4, r2
 801465e:	4698      	mov	r8, r3
 8014660:	4606      	mov	r6, r0
 8014662:	b118      	cbz	r0, 801466c <_vfiprintf_r+0x18>
 8014664:	6a03      	ldr	r3, [r0, #32]
 8014666:	b90b      	cbnz	r3, 801466c <_vfiprintf_r+0x18>
 8014668:	f7fc fd5e 	bl	8011128 <__sinit>
 801466c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801466e:	07d9      	lsls	r1, r3, #31
 8014670:	d405      	bmi.n	801467e <_vfiprintf_r+0x2a>
 8014672:	89ab      	ldrh	r3, [r5, #12]
 8014674:	059a      	lsls	r2, r3, #22
 8014676:	d402      	bmi.n	801467e <_vfiprintf_r+0x2a>
 8014678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801467a:	f7fc ff02 	bl	8011482 <__retarget_lock_acquire_recursive>
 801467e:	89ab      	ldrh	r3, [r5, #12]
 8014680:	071b      	lsls	r3, r3, #28
 8014682:	d501      	bpl.n	8014688 <_vfiprintf_r+0x34>
 8014684:	692b      	ldr	r3, [r5, #16]
 8014686:	b99b      	cbnz	r3, 80146b0 <_vfiprintf_r+0x5c>
 8014688:	4629      	mov	r1, r5
 801468a:	4630      	mov	r0, r6
 801468c:	f000 f938 	bl	8014900 <__swsetup_r>
 8014690:	b170      	cbz	r0, 80146b0 <_vfiprintf_r+0x5c>
 8014692:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014694:	07dc      	lsls	r4, r3, #31
 8014696:	d504      	bpl.n	80146a2 <_vfiprintf_r+0x4e>
 8014698:	f04f 30ff 	mov.w	r0, #4294967295
 801469c:	b01d      	add	sp, #116	@ 0x74
 801469e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146a2:	89ab      	ldrh	r3, [r5, #12]
 80146a4:	0598      	lsls	r0, r3, #22
 80146a6:	d4f7      	bmi.n	8014698 <_vfiprintf_r+0x44>
 80146a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146aa:	f7fc feeb 	bl	8011484 <__retarget_lock_release_recursive>
 80146ae:	e7f3      	b.n	8014698 <_vfiprintf_r+0x44>
 80146b0:	2300      	movs	r3, #0
 80146b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80146b4:	2320      	movs	r3, #32
 80146b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80146ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80146be:	2330      	movs	r3, #48	@ 0x30
 80146c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014870 <_vfiprintf_r+0x21c>
 80146c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80146c8:	f04f 0901 	mov.w	r9, #1
 80146cc:	4623      	mov	r3, r4
 80146ce:	469a      	mov	sl, r3
 80146d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146d4:	b10a      	cbz	r2, 80146da <_vfiprintf_r+0x86>
 80146d6:	2a25      	cmp	r2, #37	@ 0x25
 80146d8:	d1f9      	bne.n	80146ce <_vfiprintf_r+0x7a>
 80146da:	ebba 0b04 	subs.w	fp, sl, r4
 80146de:	d00b      	beq.n	80146f8 <_vfiprintf_r+0xa4>
 80146e0:	465b      	mov	r3, fp
 80146e2:	4622      	mov	r2, r4
 80146e4:	4629      	mov	r1, r5
 80146e6:	4630      	mov	r0, r6
 80146e8:	f7ff ffa2 	bl	8014630 <__sfputs_r>
 80146ec:	3001      	adds	r0, #1
 80146ee:	f000 80a7 	beq.w	8014840 <_vfiprintf_r+0x1ec>
 80146f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80146f4:	445a      	add	r2, fp
 80146f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80146f8:	f89a 3000 	ldrb.w	r3, [sl]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f000 809f 	beq.w	8014840 <_vfiprintf_r+0x1ec>
 8014702:	2300      	movs	r3, #0
 8014704:	f04f 32ff 	mov.w	r2, #4294967295
 8014708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801470c:	f10a 0a01 	add.w	sl, sl, #1
 8014710:	9304      	str	r3, [sp, #16]
 8014712:	9307      	str	r3, [sp, #28]
 8014714:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014718:	931a      	str	r3, [sp, #104]	@ 0x68
 801471a:	4654      	mov	r4, sl
 801471c:	2205      	movs	r2, #5
 801471e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014722:	4853      	ldr	r0, [pc, #332]	@ (8014870 <_vfiprintf_r+0x21c>)
 8014724:	f7eb fd7c 	bl	8000220 <memchr>
 8014728:	9a04      	ldr	r2, [sp, #16]
 801472a:	b9d8      	cbnz	r0, 8014764 <_vfiprintf_r+0x110>
 801472c:	06d1      	lsls	r1, r2, #27
 801472e:	bf44      	itt	mi
 8014730:	2320      	movmi	r3, #32
 8014732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014736:	0713      	lsls	r3, r2, #28
 8014738:	bf44      	itt	mi
 801473a:	232b      	movmi	r3, #43	@ 0x2b
 801473c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014740:	f89a 3000 	ldrb.w	r3, [sl]
 8014744:	2b2a      	cmp	r3, #42	@ 0x2a
 8014746:	d015      	beq.n	8014774 <_vfiprintf_r+0x120>
 8014748:	9a07      	ldr	r2, [sp, #28]
 801474a:	4654      	mov	r4, sl
 801474c:	2000      	movs	r0, #0
 801474e:	f04f 0c0a 	mov.w	ip, #10
 8014752:	4621      	mov	r1, r4
 8014754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014758:	3b30      	subs	r3, #48	@ 0x30
 801475a:	2b09      	cmp	r3, #9
 801475c:	d94b      	bls.n	80147f6 <_vfiprintf_r+0x1a2>
 801475e:	b1b0      	cbz	r0, 801478e <_vfiprintf_r+0x13a>
 8014760:	9207      	str	r2, [sp, #28]
 8014762:	e014      	b.n	801478e <_vfiprintf_r+0x13a>
 8014764:	eba0 0308 	sub.w	r3, r0, r8
 8014768:	fa09 f303 	lsl.w	r3, r9, r3
 801476c:	4313      	orrs	r3, r2
 801476e:	9304      	str	r3, [sp, #16]
 8014770:	46a2      	mov	sl, r4
 8014772:	e7d2      	b.n	801471a <_vfiprintf_r+0xc6>
 8014774:	9b03      	ldr	r3, [sp, #12]
 8014776:	1d19      	adds	r1, r3, #4
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	9103      	str	r1, [sp, #12]
 801477c:	2b00      	cmp	r3, #0
 801477e:	bfbb      	ittet	lt
 8014780:	425b      	neglt	r3, r3
 8014782:	f042 0202 	orrlt.w	r2, r2, #2
 8014786:	9307      	strge	r3, [sp, #28]
 8014788:	9307      	strlt	r3, [sp, #28]
 801478a:	bfb8      	it	lt
 801478c:	9204      	strlt	r2, [sp, #16]
 801478e:	7823      	ldrb	r3, [r4, #0]
 8014790:	2b2e      	cmp	r3, #46	@ 0x2e
 8014792:	d10a      	bne.n	80147aa <_vfiprintf_r+0x156>
 8014794:	7863      	ldrb	r3, [r4, #1]
 8014796:	2b2a      	cmp	r3, #42	@ 0x2a
 8014798:	d132      	bne.n	8014800 <_vfiprintf_r+0x1ac>
 801479a:	9b03      	ldr	r3, [sp, #12]
 801479c:	1d1a      	adds	r2, r3, #4
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	9203      	str	r2, [sp, #12]
 80147a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80147a6:	3402      	adds	r4, #2
 80147a8:	9305      	str	r3, [sp, #20]
 80147aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014880 <_vfiprintf_r+0x22c>
 80147ae:	7821      	ldrb	r1, [r4, #0]
 80147b0:	2203      	movs	r2, #3
 80147b2:	4650      	mov	r0, sl
 80147b4:	f7eb fd34 	bl	8000220 <memchr>
 80147b8:	b138      	cbz	r0, 80147ca <_vfiprintf_r+0x176>
 80147ba:	9b04      	ldr	r3, [sp, #16]
 80147bc:	eba0 000a 	sub.w	r0, r0, sl
 80147c0:	2240      	movs	r2, #64	@ 0x40
 80147c2:	4082      	lsls	r2, r0
 80147c4:	4313      	orrs	r3, r2
 80147c6:	3401      	adds	r4, #1
 80147c8:	9304      	str	r3, [sp, #16]
 80147ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147ce:	4829      	ldr	r0, [pc, #164]	@ (8014874 <_vfiprintf_r+0x220>)
 80147d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80147d4:	2206      	movs	r2, #6
 80147d6:	f7eb fd23 	bl	8000220 <memchr>
 80147da:	2800      	cmp	r0, #0
 80147dc:	d03f      	beq.n	801485e <_vfiprintf_r+0x20a>
 80147de:	4b26      	ldr	r3, [pc, #152]	@ (8014878 <_vfiprintf_r+0x224>)
 80147e0:	bb1b      	cbnz	r3, 801482a <_vfiprintf_r+0x1d6>
 80147e2:	9b03      	ldr	r3, [sp, #12]
 80147e4:	3307      	adds	r3, #7
 80147e6:	f023 0307 	bic.w	r3, r3, #7
 80147ea:	3308      	adds	r3, #8
 80147ec:	9303      	str	r3, [sp, #12]
 80147ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147f0:	443b      	add	r3, r7
 80147f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80147f4:	e76a      	b.n	80146cc <_vfiprintf_r+0x78>
 80147f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80147fa:	460c      	mov	r4, r1
 80147fc:	2001      	movs	r0, #1
 80147fe:	e7a8      	b.n	8014752 <_vfiprintf_r+0xfe>
 8014800:	2300      	movs	r3, #0
 8014802:	3401      	adds	r4, #1
 8014804:	9305      	str	r3, [sp, #20]
 8014806:	4619      	mov	r1, r3
 8014808:	f04f 0c0a 	mov.w	ip, #10
 801480c:	4620      	mov	r0, r4
 801480e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014812:	3a30      	subs	r2, #48	@ 0x30
 8014814:	2a09      	cmp	r2, #9
 8014816:	d903      	bls.n	8014820 <_vfiprintf_r+0x1cc>
 8014818:	2b00      	cmp	r3, #0
 801481a:	d0c6      	beq.n	80147aa <_vfiprintf_r+0x156>
 801481c:	9105      	str	r1, [sp, #20]
 801481e:	e7c4      	b.n	80147aa <_vfiprintf_r+0x156>
 8014820:	fb0c 2101 	mla	r1, ip, r1, r2
 8014824:	4604      	mov	r4, r0
 8014826:	2301      	movs	r3, #1
 8014828:	e7f0      	b.n	801480c <_vfiprintf_r+0x1b8>
 801482a:	ab03      	add	r3, sp, #12
 801482c:	9300      	str	r3, [sp, #0]
 801482e:	462a      	mov	r2, r5
 8014830:	4b12      	ldr	r3, [pc, #72]	@ (801487c <_vfiprintf_r+0x228>)
 8014832:	a904      	add	r1, sp, #16
 8014834:	4630      	mov	r0, r6
 8014836:	f7fb fe27 	bl	8010488 <_printf_float>
 801483a:	4607      	mov	r7, r0
 801483c:	1c78      	adds	r0, r7, #1
 801483e:	d1d6      	bne.n	80147ee <_vfiprintf_r+0x19a>
 8014840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014842:	07d9      	lsls	r1, r3, #31
 8014844:	d405      	bmi.n	8014852 <_vfiprintf_r+0x1fe>
 8014846:	89ab      	ldrh	r3, [r5, #12]
 8014848:	059a      	lsls	r2, r3, #22
 801484a:	d402      	bmi.n	8014852 <_vfiprintf_r+0x1fe>
 801484c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801484e:	f7fc fe19 	bl	8011484 <__retarget_lock_release_recursive>
 8014852:	89ab      	ldrh	r3, [r5, #12]
 8014854:	065b      	lsls	r3, r3, #25
 8014856:	f53f af1f 	bmi.w	8014698 <_vfiprintf_r+0x44>
 801485a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801485c:	e71e      	b.n	801469c <_vfiprintf_r+0x48>
 801485e:	ab03      	add	r3, sp, #12
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	462a      	mov	r2, r5
 8014864:	4b05      	ldr	r3, [pc, #20]	@ (801487c <_vfiprintf_r+0x228>)
 8014866:	a904      	add	r1, sp, #16
 8014868:	4630      	mov	r0, r6
 801486a:	f7fc f8a5 	bl	80109b8 <_printf_i>
 801486e:	e7e4      	b.n	801483a <_vfiprintf_r+0x1e6>
 8014870:	080156a1 	.word	0x080156a1
 8014874:	080156ab 	.word	0x080156ab
 8014878:	08010489 	.word	0x08010489
 801487c:	08014631 	.word	0x08014631
 8014880:	080156a7 	.word	0x080156a7

08014884 <__swbuf_r>:
 8014884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014886:	460e      	mov	r6, r1
 8014888:	4614      	mov	r4, r2
 801488a:	4605      	mov	r5, r0
 801488c:	b118      	cbz	r0, 8014896 <__swbuf_r+0x12>
 801488e:	6a03      	ldr	r3, [r0, #32]
 8014890:	b90b      	cbnz	r3, 8014896 <__swbuf_r+0x12>
 8014892:	f7fc fc49 	bl	8011128 <__sinit>
 8014896:	69a3      	ldr	r3, [r4, #24]
 8014898:	60a3      	str	r3, [r4, #8]
 801489a:	89a3      	ldrh	r3, [r4, #12]
 801489c:	071a      	lsls	r2, r3, #28
 801489e:	d501      	bpl.n	80148a4 <__swbuf_r+0x20>
 80148a0:	6923      	ldr	r3, [r4, #16]
 80148a2:	b943      	cbnz	r3, 80148b6 <__swbuf_r+0x32>
 80148a4:	4621      	mov	r1, r4
 80148a6:	4628      	mov	r0, r5
 80148a8:	f000 f82a 	bl	8014900 <__swsetup_r>
 80148ac:	b118      	cbz	r0, 80148b6 <__swbuf_r+0x32>
 80148ae:	f04f 37ff 	mov.w	r7, #4294967295
 80148b2:	4638      	mov	r0, r7
 80148b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148b6:	6823      	ldr	r3, [r4, #0]
 80148b8:	6922      	ldr	r2, [r4, #16]
 80148ba:	1a98      	subs	r0, r3, r2
 80148bc:	6963      	ldr	r3, [r4, #20]
 80148be:	b2f6      	uxtb	r6, r6
 80148c0:	4283      	cmp	r3, r0
 80148c2:	4637      	mov	r7, r6
 80148c4:	dc05      	bgt.n	80148d2 <__swbuf_r+0x4e>
 80148c6:	4621      	mov	r1, r4
 80148c8:	4628      	mov	r0, r5
 80148ca:	f7ff fa53 	bl	8013d74 <_fflush_r>
 80148ce:	2800      	cmp	r0, #0
 80148d0:	d1ed      	bne.n	80148ae <__swbuf_r+0x2a>
 80148d2:	68a3      	ldr	r3, [r4, #8]
 80148d4:	3b01      	subs	r3, #1
 80148d6:	60a3      	str	r3, [r4, #8]
 80148d8:	6823      	ldr	r3, [r4, #0]
 80148da:	1c5a      	adds	r2, r3, #1
 80148dc:	6022      	str	r2, [r4, #0]
 80148de:	701e      	strb	r6, [r3, #0]
 80148e0:	6962      	ldr	r2, [r4, #20]
 80148e2:	1c43      	adds	r3, r0, #1
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d004      	beq.n	80148f2 <__swbuf_r+0x6e>
 80148e8:	89a3      	ldrh	r3, [r4, #12]
 80148ea:	07db      	lsls	r3, r3, #31
 80148ec:	d5e1      	bpl.n	80148b2 <__swbuf_r+0x2e>
 80148ee:	2e0a      	cmp	r6, #10
 80148f0:	d1df      	bne.n	80148b2 <__swbuf_r+0x2e>
 80148f2:	4621      	mov	r1, r4
 80148f4:	4628      	mov	r0, r5
 80148f6:	f7ff fa3d 	bl	8013d74 <_fflush_r>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d0d9      	beq.n	80148b2 <__swbuf_r+0x2e>
 80148fe:	e7d6      	b.n	80148ae <__swbuf_r+0x2a>

08014900 <__swsetup_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4b29      	ldr	r3, [pc, #164]	@ (80149a8 <__swsetup_r+0xa8>)
 8014904:	4605      	mov	r5, r0
 8014906:	6818      	ldr	r0, [r3, #0]
 8014908:	460c      	mov	r4, r1
 801490a:	b118      	cbz	r0, 8014914 <__swsetup_r+0x14>
 801490c:	6a03      	ldr	r3, [r0, #32]
 801490e:	b90b      	cbnz	r3, 8014914 <__swsetup_r+0x14>
 8014910:	f7fc fc0a 	bl	8011128 <__sinit>
 8014914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014918:	0719      	lsls	r1, r3, #28
 801491a:	d422      	bmi.n	8014962 <__swsetup_r+0x62>
 801491c:	06da      	lsls	r2, r3, #27
 801491e:	d407      	bmi.n	8014930 <__swsetup_r+0x30>
 8014920:	2209      	movs	r2, #9
 8014922:	602a      	str	r2, [r5, #0]
 8014924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014928:	81a3      	strh	r3, [r4, #12]
 801492a:	f04f 30ff 	mov.w	r0, #4294967295
 801492e:	e033      	b.n	8014998 <__swsetup_r+0x98>
 8014930:	0758      	lsls	r0, r3, #29
 8014932:	d512      	bpl.n	801495a <__swsetup_r+0x5a>
 8014934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014936:	b141      	cbz	r1, 801494a <__swsetup_r+0x4a>
 8014938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801493c:	4299      	cmp	r1, r3
 801493e:	d002      	beq.n	8014946 <__swsetup_r+0x46>
 8014940:	4628      	mov	r0, r5
 8014942:	f7fd fc0d 	bl	8012160 <_free_r>
 8014946:	2300      	movs	r3, #0
 8014948:	6363      	str	r3, [r4, #52]	@ 0x34
 801494a:	89a3      	ldrh	r3, [r4, #12]
 801494c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014950:	81a3      	strh	r3, [r4, #12]
 8014952:	2300      	movs	r3, #0
 8014954:	6063      	str	r3, [r4, #4]
 8014956:	6923      	ldr	r3, [r4, #16]
 8014958:	6023      	str	r3, [r4, #0]
 801495a:	89a3      	ldrh	r3, [r4, #12]
 801495c:	f043 0308 	orr.w	r3, r3, #8
 8014960:	81a3      	strh	r3, [r4, #12]
 8014962:	6923      	ldr	r3, [r4, #16]
 8014964:	b94b      	cbnz	r3, 801497a <__swsetup_r+0x7a>
 8014966:	89a3      	ldrh	r3, [r4, #12]
 8014968:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801496c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014970:	d003      	beq.n	801497a <__swsetup_r+0x7a>
 8014972:	4621      	mov	r1, r4
 8014974:	4628      	mov	r0, r5
 8014976:	f000 f883 	bl	8014a80 <__smakebuf_r>
 801497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801497e:	f013 0201 	ands.w	r2, r3, #1
 8014982:	d00a      	beq.n	801499a <__swsetup_r+0x9a>
 8014984:	2200      	movs	r2, #0
 8014986:	60a2      	str	r2, [r4, #8]
 8014988:	6962      	ldr	r2, [r4, #20]
 801498a:	4252      	negs	r2, r2
 801498c:	61a2      	str	r2, [r4, #24]
 801498e:	6922      	ldr	r2, [r4, #16]
 8014990:	b942      	cbnz	r2, 80149a4 <__swsetup_r+0xa4>
 8014992:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014996:	d1c5      	bne.n	8014924 <__swsetup_r+0x24>
 8014998:	bd38      	pop	{r3, r4, r5, pc}
 801499a:	0799      	lsls	r1, r3, #30
 801499c:	bf58      	it	pl
 801499e:	6962      	ldrpl	r2, [r4, #20]
 80149a0:	60a2      	str	r2, [r4, #8]
 80149a2:	e7f4      	b.n	801498e <__swsetup_r+0x8e>
 80149a4:	2000      	movs	r0, #0
 80149a6:	e7f7      	b.n	8014998 <__swsetup_r+0x98>
 80149a8:	2000003c 	.word	0x2000003c

080149ac <_raise_r>:
 80149ac:	291f      	cmp	r1, #31
 80149ae:	b538      	push	{r3, r4, r5, lr}
 80149b0:	4605      	mov	r5, r0
 80149b2:	460c      	mov	r4, r1
 80149b4:	d904      	bls.n	80149c0 <_raise_r+0x14>
 80149b6:	2316      	movs	r3, #22
 80149b8:	6003      	str	r3, [r0, #0]
 80149ba:	f04f 30ff 	mov.w	r0, #4294967295
 80149be:	bd38      	pop	{r3, r4, r5, pc}
 80149c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80149c2:	b112      	cbz	r2, 80149ca <_raise_r+0x1e>
 80149c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80149c8:	b94b      	cbnz	r3, 80149de <_raise_r+0x32>
 80149ca:	4628      	mov	r0, r5
 80149cc:	f000 f830 	bl	8014a30 <_getpid_r>
 80149d0:	4622      	mov	r2, r4
 80149d2:	4601      	mov	r1, r0
 80149d4:	4628      	mov	r0, r5
 80149d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149da:	f000 b817 	b.w	8014a0c <_kill_r>
 80149de:	2b01      	cmp	r3, #1
 80149e0:	d00a      	beq.n	80149f8 <_raise_r+0x4c>
 80149e2:	1c59      	adds	r1, r3, #1
 80149e4:	d103      	bne.n	80149ee <_raise_r+0x42>
 80149e6:	2316      	movs	r3, #22
 80149e8:	6003      	str	r3, [r0, #0]
 80149ea:	2001      	movs	r0, #1
 80149ec:	e7e7      	b.n	80149be <_raise_r+0x12>
 80149ee:	2100      	movs	r1, #0
 80149f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80149f4:	4620      	mov	r0, r4
 80149f6:	4798      	blx	r3
 80149f8:	2000      	movs	r0, #0
 80149fa:	e7e0      	b.n	80149be <_raise_r+0x12>

080149fc <raise>:
 80149fc:	4b02      	ldr	r3, [pc, #8]	@ (8014a08 <raise+0xc>)
 80149fe:	4601      	mov	r1, r0
 8014a00:	6818      	ldr	r0, [r3, #0]
 8014a02:	f7ff bfd3 	b.w	80149ac <_raise_r>
 8014a06:	bf00      	nop
 8014a08:	2000003c 	.word	0x2000003c

08014a0c <_kill_r>:
 8014a0c:	b538      	push	{r3, r4, r5, lr}
 8014a0e:	4d07      	ldr	r5, [pc, #28]	@ (8014a2c <_kill_r+0x20>)
 8014a10:	2300      	movs	r3, #0
 8014a12:	4604      	mov	r4, r0
 8014a14:	4608      	mov	r0, r1
 8014a16:	4611      	mov	r1, r2
 8014a18:	602b      	str	r3, [r5, #0]
 8014a1a:	f7ed fed1 	bl	80027c0 <_kill>
 8014a1e:	1c43      	adds	r3, r0, #1
 8014a20:	d102      	bne.n	8014a28 <_kill_r+0x1c>
 8014a22:	682b      	ldr	r3, [r5, #0]
 8014a24:	b103      	cbz	r3, 8014a28 <_kill_r+0x1c>
 8014a26:	6023      	str	r3, [r4, #0]
 8014a28:	bd38      	pop	{r3, r4, r5, pc}
 8014a2a:	bf00      	nop
 8014a2c:	200043d0 	.word	0x200043d0

08014a30 <_getpid_r>:
 8014a30:	f7ed bebe 	b.w	80027b0 <_getpid>

08014a34 <__swhatbuf_r>:
 8014a34:	b570      	push	{r4, r5, r6, lr}
 8014a36:	460c      	mov	r4, r1
 8014a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a3c:	2900      	cmp	r1, #0
 8014a3e:	b096      	sub	sp, #88	@ 0x58
 8014a40:	4615      	mov	r5, r2
 8014a42:	461e      	mov	r6, r3
 8014a44:	da0d      	bge.n	8014a62 <__swhatbuf_r+0x2e>
 8014a46:	89a3      	ldrh	r3, [r4, #12]
 8014a48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014a4c:	f04f 0100 	mov.w	r1, #0
 8014a50:	bf14      	ite	ne
 8014a52:	2340      	movne	r3, #64	@ 0x40
 8014a54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014a58:	2000      	movs	r0, #0
 8014a5a:	6031      	str	r1, [r6, #0]
 8014a5c:	602b      	str	r3, [r5, #0]
 8014a5e:	b016      	add	sp, #88	@ 0x58
 8014a60:	bd70      	pop	{r4, r5, r6, pc}
 8014a62:	466a      	mov	r2, sp
 8014a64:	f000 f848 	bl	8014af8 <_fstat_r>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	dbec      	blt.n	8014a46 <__swhatbuf_r+0x12>
 8014a6c:	9901      	ldr	r1, [sp, #4]
 8014a6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014a72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014a76:	4259      	negs	r1, r3
 8014a78:	4159      	adcs	r1, r3
 8014a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014a7e:	e7eb      	b.n	8014a58 <__swhatbuf_r+0x24>

08014a80 <__smakebuf_r>:
 8014a80:	898b      	ldrh	r3, [r1, #12]
 8014a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a84:	079d      	lsls	r5, r3, #30
 8014a86:	4606      	mov	r6, r0
 8014a88:	460c      	mov	r4, r1
 8014a8a:	d507      	bpl.n	8014a9c <__smakebuf_r+0x1c>
 8014a8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014a90:	6023      	str	r3, [r4, #0]
 8014a92:	6123      	str	r3, [r4, #16]
 8014a94:	2301      	movs	r3, #1
 8014a96:	6163      	str	r3, [r4, #20]
 8014a98:	b003      	add	sp, #12
 8014a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a9c:	ab01      	add	r3, sp, #4
 8014a9e:	466a      	mov	r2, sp
 8014aa0:	f7ff ffc8 	bl	8014a34 <__swhatbuf_r>
 8014aa4:	9f00      	ldr	r7, [sp, #0]
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	4639      	mov	r1, r7
 8014aaa:	4630      	mov	r0, r6
 8014aac:	f7fd fbcc 	bl	8012248 <_malloc_r>
 8014ab0:	b948      	cbnz	r0, 8014ac6 <__smakebuf_r+0x46>
 8014ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ab6:	059a      	lsls	r2, r3, #22
 8014ab8:	d4ee      	bmi.n	8014a98 <__smakebuf_r+0x18>
 8014aba:	f023 0303 	bic.w	r3, r3, #3
 8014abe:	f043 0302 	orr.w	r3, r3, #2
 8014ac2:	81a3      	strh	r3, [r4, #12]
 8014ac4:	e7e2      	b.n	8014a8c <__smakebuf_r+0xc>
 8014ac6:	89a3      	ldrh	r3, [r4, #12]
 8014ac8:	6020      	str	r0, [r4, #0]
 8014aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ace:	81a3      	strh	r3, [r4, #12]
 8014ad0:	9b01      	ldr	r3, [sp, #4]
 8014ad2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014ad6:	b15b      	cbz	r3, 8014af0 <__smakebuf_r+0x70>
 8014ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014adc:	4630      	mov	r0, r6
 8014ade:	f000 f81d 	bl	8014b1c <_isatty_r>
 8014ae2:	b128      	cbz	r0, 8014af0 <__smakebuf_r+0x70>
 8014ae4:	89a3      	ldrh	r3, [r4, #12]
 8014ae6:	f023 0303 	bic.w	r3, r3, #3
 8014aea:	f043 0301 	orr.w	r3, r3, #1
 8014aee:	81a3      	strh	r3, [r4, #12]
 8014af0:	89a3      	ldrh	r3, [r4, #12]
 8014af2:	431d      	orrs	r5, r3
 8014af4:	81a5      	strh	r5, [r4, #12]
 8014af6:	e7cf      	b.n	8014a98 <__smakebuf_r+0x18>

08014af8 <_fstat_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	4d07      	ldr	r5, [pc, #28]	@ (8014b18 <_fstat_r+0x20>)
 8014afc:	2300      	movs	r3, #0
 8014afe:	4604      	mov	r4, r0
 8014b00:	4608      	mov	r0, r1
 8014b02:	4611      	mov	r1, r2
 8014b04:	602b      	str	r3, [r5, #0]
 8014b06:	f7ed febb 	bl	8002880 <_fstat>
 8014b0a:	1c43      	adds	r3, r0, #1
 8014b0c:	d102      	bne.n	8014b14 <_fstat_r+0x1c>
 8014b0e:	682b      	ldr	r3, [r5, #0]
 8014b10:	b103      	cbz	r3, 8014b14 <_fstat_r+0x1c>
 8014b12:	6023      	str	r3, [r4, #0]
 8014b14:	bd38      	pop	{r3, r4, r5, pc}
 8014b16:	bf00      	nop
 8014b18:	200043d0 	.word	0x200043d0

08014b1c <_isatty_r>:
 8014b1c:	b538      	push	{r3, r4, r5, lr}
 8014b1e:	4d06      	ldr	r5, [pc, #24]	@ (8014b38 <_isatty_r+0x1c>)
 8014b20:	2300      	movs	r3, #0
 8014b22:	4604      	mov	r4, r0
 8014b24:	4608      	mov	r0, r1
 8014b26:	602b      	str	r3, [r5, #0]
 8014b28:	f7ed feba 	bl	80028a0 <_isatty>
 8014b2c:	1c43      	adds	r3, r0, #1
 8014b2e:	d102      	bne.n	8014b36 <_isatty_r+0x1a>
 8014b30:	682b      	ldr	r3, [r5, #0]
 8014b32:	b103      	cbz	r3, 8014b36 <_isatty_r+0x1a>
 8014b34:	6023      	str	r3, [r4, #0]
 8014b36:	bd38      	pop	{r3, r4, r5, pc}
 8014b38:	200043d0 	.word	0x200043d0

08014b3c <powf>:
 8014b3c:	b508      	push	{r3, lr}
 8014b3e:	ed2d 8b04 	vpush	{d8-d9}
 8014b42:	eeb0 8a60 	vmov.f32	s16, s1
 8014b46:	eeb0 9a40 	vmov.f32	s18, s0
 8014b4a:	f000 f859 	bl	8014c00 <__ieee754_powf>
 8014b4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b56:	eef0 8a40 	vmov.f32	s17, s0
 8014b5a:	d63e      	bvs.n	8014bda <powf+0x9e>
 8014b5c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b64:	d112      	bne.n	8014b8c <powf+0x50>
 8014b66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b6e:	d039      	beq.n	8014be4 <powf+0xa8>
 8014b70:	eeb0 0a48 	vmov.f32	s0, s16
 8014b74:	f000 f839 	bl	8014bea <finitef>
 8014b78:	b378      	cbz	r0, 8014bda <powf+0x9e>
 8014b7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b82:	d52a      	bpl.n	8014bda <powf+0x9e>
 8014b84:	f7fc fc52 	bl	801142c <__errno>
 8014b88:	2322      	movs	r3, #34	@ 0x22
 8014b8a:	e014      	b.n	8014bb6 <powf+0x7a>
 8014b8c:	f000 f82d 	bl	8014bea <finitef>
 8014b90:	b998      	cbnz	r0, 8014bba <powf+0x7e>
 8014b92:	eeb0 0a49 	vmov.f32	s0, s18
 8014b96:	f000 f828 	bl	8014bea <finitef>
 8014b9a:	b170      	cbz	r0, 8014bba <powf+0x7e>
 8014b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8014ba0:	f000 f823 	bl	8014bea <finitef>
 8014ba4:	b148      	cbz	r0, 8014bba <powf+0x7e>
 8014ba6:	eef4 8a68 	vcmp.f32	s17, s17
 8014baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bae:	d7e9      	bvc.n	8014b84 <powf+0x48>
 8014bb0:	f7fc fc3c 	bl	801142c <__errno>
 8014bb4:	2321      	movs	r3, #33	@ 0x21
 8014bb6:	6003      	str	r3, [r0, #0]
 8014bb8:	e00f      	b.n	8014bda <powf+0x9e>
 8014bba:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc2:	d10a      	bne.n	8014bda <powf+0x9e>
 8014bc4:	eeb0 0a49 	vmov.f32	s0, s18
 8014bc8:	f000 f80f 	bl	8014bea <finitef>
 8014bcc:	b128      	cbz	r0, 8014bda <powf+0x9e>
 8014bce:	eeb0 0a48 	vmov.f32	s0, s16
 8014bd2:	f000 f80a 	bl	8014bea <finitef>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d1d4      	bne.n	8014b84 <powf+0x48>
 8014bda:	eeb0 0a68 	vmov.f32	s0, s17
 8014bde:	ecbd 8b04 	vpop	{d8-d9}
 8014be2:	bd08      	pop	{r3, pc}
 8014be4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8014be8:	e7f7      	b.n	8014bda <powf+0x9e>

08014bea <finitef>:
 8014bea:	ee10 3a10 	vmov	r3, s0
 8014bee:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8014bf2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8014bf6:	bfac      	ite	ge
 8014bf8:	2000      	movge	r0, #0
 8014bfa:	2001      	movlt	r0, #1
 8014bfc:	4770      	bx	lr
	...

08014c00 <__ieee754_powf>:
 8014c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c04:	ee10 4a90 	vmov	r4, s1
 8014c08:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8014c0c:	ed2d 8b02 	vpush	{d8}
 8014c10:	ee10 6a10 	vmov	r6, s0
 8014c14:	eeb0 8a40 	vmov.f32	s16, s0
 8014c18:	eef0 8a60 	vmov.f32	s17, s1
 8014c1c:	d10c      	bne.n	8014c38 <__ieee754_powf+0x38>
 8014c1e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8014c22:	0076      	lsls	r6, r6, #1
 8014c24:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8014c28:	f240 8274 	bls.w	8015114 <__ieee754_powf+0x514>
 8014c2c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014c30:	ecbd 8b02 	vpop	{d8}
 8014c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c38:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8014c3c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8014c40:	d802      	bhi.n	8014c48 <__ieee754_powf+0x48>
 8014c42:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8014c46:	d908      	bls.n	8014c5a <__ieee754_powf+0x5a>
 8014c48:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8014c4c:	d1ee      	bne.n	8014c2c <__ieee754_powf+0x2c>
 8014c4e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8014c52:	0064      	lsls	r4, r4, #1
 8014c54:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8014c58:	e7e6      	b.n	8014c28 <__ieee754_powf+0x28>
 8014c5a:	2e00      	cmp	r6, #0
 8014c5c:	da1f      	bge.n	8014c9e <__ieee754_powf+0x9e>
 8014c5e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8014c62:	f080 8260 	bcs.w	8015126 <__ieee754_powf+0x526>
 8014c66:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8014c6a:	d32f      	bcc.n	8014ccc <__ieee754_powf+0xcc>
 8014c6c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8014c70:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8014c74:	fa49 f503 	asr.w	r5, r9, r3
 8014c78:	fa05 f303 	lsl.w	r3, r5, r3
 8014c7c:	454b      	cmp	r3, r9
 8014c7e:	d123      	bne.n	8014cc8 <__ieee754_powf+0xc8>
 8014c80:	f005 0501 	and.w	r5, r5, #1
 8014c84:	f1c5 0502 	rsb	r5, r5, #2
 8014c88:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8014c8c:	d11f      	bne.n	8014cce <__ieee754_powf+0xce>
 8014c8e:	2c00      	cmp	r4, #0
 8014c90:	f280 8246 	bge.w	8015120 <__ieee754_powf+0x520>
 8014c94:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014c98:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014c9c:	e7c8      	b.n	8014c30 <__ieee754_powf+0x30>
 8014c9e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8014ca2:	d111      	bne.n	8014cc8 <__ieee754_powf+0xc8>
 8014ca4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8014ca8:	f000 8234 	beq.w	8015114 <__ieee754_powf+0x514>
 8014cac:	d906      	bls.n	8014cbc <__ieee754_powf+0xbc>
 8014cae:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8014fc4 <__ieee754_powf+0x3c4>
 8014cb2:	2c00      	cmp	r4, #0
 8014cb4:	bfa8      	it	ge
 8014cb6:	eeb0 0a68 	vmovge.f32	s0, s17
 8014cba:	e7b9      	b.n	8014c30 <__ieee754_powf+0x30>
 8014cbc:	2c00      	cmp	r4, #0
 8014cbe:	f280 822c 	bge.w	801511a <__ieee754_powf+0x51a>
 8014cc2:	eeb1 0a68 	vneg.f32	s0, s17
 8014cc6:	e7b3      	b.n	8014c30 <__ieee754_powf+0x30>
 8014cc8:	2500      	movs	r5, #0
 8014cca:	e7dd      	b.n	8014c88 <__ieee754_powf+0x88>
 8014ccc:	2500      	movs	r5, #0
 8014cce:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014cd2:	d102      	bne.n	8014cda <__ieee754_powf+0xda>
 8014cd4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014cd8:	e7aa      	b.n	8014c30 <__ieee754_powf+0x30>
 8014cda:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8014cde:	f040 8227 	bne.w	8015130 <__ieee754_powf+0x530>
 8014ce2:	2e00      	cmp	r6, #0
 8014ce4:	f2c0 8224 	blt.w	8015130 <__ieee754_powf+0x530>
 8014ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8014cec:	ecbd 8b02 	vpop	{d8}
 8014cf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cf4:	f000 bae6 	b.w	80152c4 <__ieee754_sqrtf>
 8014cf8:	2d01      	cmp	r5, #1
 8014cfa:	d199      	bne.n	8014c30 <__ieee754_powf+0x30>
 8014cfc:	eeb1 0a40 	vneg.f32	s0, s0
 8014d00:	e796      	b.n	8014c30 <__ieee754_powf+0x30>
 8014d02:	0ff0      	lsrs	r0, r6, #31
 8014d04:	3801      	subs	r0, #1
 8014d06:	ea55 0300 	orrs.w	r3, r5, r0
 8014d0a:	d104      	bne.n	8014d16 <__ieee754_powf+0x116>
 8014d0c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014d10:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014d14:	e78c      	b.n	8014c30 <__ieee754_powf+0x30>
 8014d16:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8014d1a:	d96d      	bls.n	8014df8 <__ieee754_powf+0x1f8>
 8014d1c:	4baa      	ldr	r3, [pc, #680]	@ (8014fc8 <__ieee754_powf+0x3c8>)
 8014d1e:	4598      	cmp	r8, r3
 8014d20:	d808      	bhi.n	8014d34 <__ieee754_powf+0x134>
 8014d22:	2c00      	cmp	r4, #0
 8014d24:	da0b      	bge.n	8014d3e <__ieee754_powf+0x13e>
 8014d26:	2000      	movs	r0, #0
 8014d28:	ecbd 8b02 	vpop	{d8}
 8014d2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d30:	f000 bac2 	b.w	80152b8 <__math_oflowf>
 8014d34:	4ba5      	ldr	r3, [pc, #660]	@ (8014fcc <__ieee754_powf+0x3cc>)
 8014d36:	4598      	cmp	r8, r3
 8014d38:	d908      	bls.n	8014d4c <__ieee754_powf+0x14c>
 8014d3a:	2c00      	cmp	r4, #0
 8014d3c:	dcf3      	bgt.n	8014d26 <__ieee754_powf+0x126>
 8014d3e:	2000      	movs	r0, #0
 8014d40:	ecbd 8b02 	vpop	{d8}
 8014d44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d48:	f000 bab0 	b.w	80152ac <__math_uflowf>
 8014d4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014d50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014d54:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8014fd0 <__ieee754_powf+0x3d0>
 8014d58:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8014d5c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8014d60:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014d64:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8014d68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014d6c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8014fd4 <__ieee754_powf+0x3d4>
 8014d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014d74:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8014fd8 <__ieee754_powf+0x3d8>
 8014d78:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8014d7c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8014fdc <__ieee754_powf+0x3dc>
 8014d80:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014d84:	eeb0 7a67 	vmov.f32	s14, s15
 8014d88:	eea0 7a26 	vfma.f32	s14, s0, s13
 8014d8c:	ee17 3a10 	vmov	r3, s14
 8014d90:	f36f 030b 	bfc	r3, #0, #12
 8014d94:	ee07 3a10 	vmov	s14, r3
 8014d98:	eeb0 6a47 	vmov.f32	s12, s14
 8014d9c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8014da0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014da4:	3d01      	subs	r5, #1
 8014da6:	4305      	orrs	r5, r0
 8014da8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014dac:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8014db0:	f36f 040b 	bfc	r4, #0, #12
 8014db4:	bf18      	it	ne
 8014db6:	eeb0 8a66 	vmovne.f32	s16, s13
 8014dba:	ee06 4a90 	vmov	s13, r4
 8014dbe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8014dc2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8014dc6:	ee67 7a26 	vmul.f32	s15, s14, s13
 8014dca:	eee6 0a07 	vfma.f32	s1, s12, s14
 8014dce:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014dd2:	ee17 1a10 	vmov	r1, s14
 8014dd6:	2900      	cmp	r1, #0
 8014dd8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014ddc:	f340 80dd 	ble.w	8014f9a <__ieee754_powf+0x39a>
 8014de0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8014de4:	f240 80ca 	bls.w	8014f7c <__ieee754_powf+0x37c>
 8014de8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df0:	bf4c      	ite	mi
 8014df2:	2001      	movmi	r0, #1
 8014df4:	2000      	movpl	r0, #0
 8014df6:	e797      	b.n	8014d28 <__ieee754_powf+0x128>
 8014df8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8014dfc:	bf01      	itttt	eq
 8014dfe:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8014fe0 <__ieee754_powf+0x3e0>
 8014e02:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014e06:	f06f 0317 	mvneq.w	r3, #23
 8014e0a:	ee17 7a90 	vmoveq	r7, s15
 8014e0e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8014e12:	bf18      	it	ne
 8014e14:	2300      	movne	r3, #0
 8014e16:	3a7f      	subs	r2, #127	@ 0x7f
 8014e18:	441a      	add	r2, r3
 8014e1a:	4b72      	ldr	r3, [pc, #456]	@ (8014fe4 <__ieee754_powf+0x3e4>)
 8014e1c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8014e20:	429f      	cmp	r7, r3
 8014e22:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8014e26:	dd06      	ble.n	8014e36 <__ieee754_powf+0x236>
 8014e28:	4b6f      	ldr	r3, [pc, #444]	@ (8014fe8 <__ieee754_powf+0x3e8>)
 8014e2a:	429f      	cmp	r7, r3
 8014e2c:	f340 80a4 	ble.w	8014f78 <__ieee754_powf+0x378>
 8014e30:	3201      	adds	r2, #1
 8014e32:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8014e36:	2600      	movs	r6, #0
 8014e38:	4b6c      	ldr	r3, [pc, #432]	@ (8014fec <__ieee754_powf+0x3ec>)
 8014e3a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8014e3e:	ee07 1a10 	vmov	s14, r1
 8014e42:	edd3 5a00 	vldr	s11, [r3]
 8014e46:	4b6a      	ldr	r3, [pc, #424]	@ (8014ff0 <__ieee754_powf+0x3f0>)
 8014e48:	ee75 7a87 	vadd.f32	s15, s11, s14
 8014e4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014e50:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8014e54:	1049      	asrs	r1, r1, #1
 8014e56:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8014e5a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8014e5e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8014e62:	ee37 6a65 	vsub.f32	s12, s14, s11
 8014e66:	ee07 1a90 	vmov	s15, r1
 8014e6a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8014e6e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8014e72:	ee15 7a10 	vmov	r7, s10
 8014e76:	401f      	ands	r7, r3
 8014e78:	ee06 7a90 	vmov	s13, r7
 8014e7c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8014e80:	ee37 7a65 	vsub.f32	s14, s14, s11
 8014e84:	ee65 7a05 	vmul.f32	s15, s10, s10
 8014e88:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8014e8c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8014ff4 <__ieee754_powf+0x3f4>
 8014e90:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8014ff8 <__ieee754_powf+0x3f8>
 8014e94:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014e98:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8014ffc <__ieee754_powf+0x3fc>
 8014e9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014ea0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8014fd0 <__ieee754_powf+0x3d0>
 8014ea4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014ea8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8015000 <__ieee754_powf+0x400>
 8014eac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014eb0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8015004 <__ieee754_powf+0x404>
 8014eb4:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014eb8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014ebc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8014ec0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8014ec4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014ec8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8014ecc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8014ed0:	eef0 5a67 	vmov.f32	s11, s15
 8014ed4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8014ed8:	ee75 5a87 	vadd.f32	s11, s11, s14
 8014edc:	ee15 1a90 	vmov	r1, s11
 8014ee0:	4019      	ands	r1, r3
 8014ee2:	ee05 1a90 	vmov	s11, r1
 8014ee6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8014eea:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8014eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ef2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014ef6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014efa:	eeb0 6a67 	vmov.f32	s12, s15
 8014efe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014f02:	ee16 1a10 	vmov	r1, s12
 8014f06:	4019      	ands	r1, r3
 8014f08:	ee06 1a10 	vmov	s12, r1
 8014f0c:	eeb0 7a46 	vmov.f32	s14, s12
 8014f10:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8014f14:	493c      	ldr	r1, [pc, #240]	@ (8015008 <__ieee754_powf+0x408>)
 8014f16:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8014f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801500c <__ieee754_powf+0x40c>
 8014f22:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8015010 <__ieee754_powf+0x410>
 8014f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f2a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8015014 <__ieee754_powf+0x414>
 8014f2e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014f32:	ed91 7a00 	vldr	s14, [r1]
 8014f36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f3a:	ee07 2a10 	vmov	s14, r2
 8014f3e:	4a36      	ldr	r2, [pc, #216]	@ (8015018 <__ieee754_powf+0x418>)
 8014f40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8014f44:	eeb0 7a67 	vmov.f32	s14, s15
 8014f48:	eea6 7a25 	vfma.f32	s14, s12, s11
 8014f4c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8014f50:	ed92 5a00 	vldr	s10, [r2]
 8014f54:	ee37 7a05 	vadd.f32	s14, s14, s10
 8014f58:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014f5c:	ee17 2a10 	vmov	r2, s14
 8014f60:	401a      	ands	r2, r3
 8014f62:	ee07 2a10 	vmov	s14, r2
 8014f66:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014f6a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8014f6e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8014f72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014f76:	e715      	b.n	8014da4 <__ieee754_powf+0x1a4>
 8014f78:	2601      	movs	r6, #1
 8014f7a:	e75d      	b.n	8014e38 <__ieee754_powf+0x238>
 8014f7c:	d152      	bne.n	8015024 <__ieee754_powf+0x424>
 8014f7e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801501c <__ieee754_powf+0x41c>
 8014f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f86:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014f8a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f92:	f73f af29 	bgt.w	8014de8 <__ieee754_powf+0x1e8>
 8014f96:	2386      	movs	r3, #134	@ 0x86
 8014f98:	e048      	b.n	801502c <__ieee754_powf+0x42c>
 8014f9a:	4a21      	ldr	r2, [pc, #132]	@ (8015020 <__ieee754_powf+0x420>)
 8014f9c:	4293      	cmp	r3, r2
 8014f9e:	d907      	bls.n	8014fb0 <__ieee754_powf+0x3b0>
 8014fa0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa8:	bf4c      	ite	mi
 8014faa:	2001      	movmi	r0, #1
 8014fac:	2000      	movpl	r0, #0
 8014fae:	e6c7      	b.n	8014d40 <__ieee754_powf+0x140>
 8014fb0:	d138      	bne.n	8015024 <__ieee754_powf+0x424>
 8014fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014fb6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fbe:	dbea      	blt.n	8014f96 <__ieee754_powf+0x396>
 8014fc0:	e7ee      	b.n	8014fa0 <__ieee754_powf+0x3a0>
 8014fc2:	bf00      	nop
 8014fc4:	00000000 	.word	0x00000000
 8014fc8:	3f7ffff3 	.word	0x3f7ffff3
 8014fcc:	3f800007 	.word	0x3f800007
 8014fd0:	3eaaaaab 	.word	0x3eaaaaab
 8014fd4:	3fb8aa00 	.word	0x3fb8aa00
 8014fd8:	3fb8aa3b 	.word	0x3fb8aa3b
 8014fdc:	36eca570 	.word	0x36eca570
 8014fe0:	4b800000 	.word	0x4b800000
 8014fe4:	001cc471 	.word	0x001cc471
 8014fe8:	005db3d6 	.word	0x005db3d6
 8014fec:	080159bc 	.word	0x080159bc
 8014ff0:	fffff000 	.word	0xfffff000
 8014ff4:	3e6c3255 	.word	0x3e6c3255
 8014ff8:	3e53f142 	.word	0x3e53f142
 8014ffc:	3e8ba305 	.word	0x3e8ba305
 8015000:	3edb6db7 	.word	0x3edb6db7
 8015004:	3f19999a 	.word	0x3f19999a
 8015008:	080159ac 	.word	0x080159ac
 801500c:	3f76384f 	.word	0x3f76384f
 8015010:	3f763800 	.word	0x3f763800
 8015014:	369dc3a0 	.word	0x369dc3a0
 8015018:	080159b4 	.word	0x080159b4
 801501c:	3338aa3c 	.word	0x3338aa3c
 8015020:	43160000 	.word	0x43160000
 8015024:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8015028:	d96f      	bls.n	801510a <__ieee754_powf+0x50a>
 801502a:	15db      	asrs	r3, r3, #23
 801502c:	3b7e      	subs	r3, #126	@ 0x7e
 801502e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8015032:	4118      	asrs	r0, r3
 8015034:	4408      	add	r0, r1
 8015036:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801503a:	4a4e      	ldr	r2, [pc, #312]	@ (8015174 <__ieee754_powf+0x574>)
 801503c:	3b7f      	subs	r3, #127	@ 0x7f
 801503e:	411a      	asrs	r2, r3
 8015040:	4002      	ands	r2, r0
 8015042:	ee07 2a10 	vmov	s14, r2
 8015046:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801504a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801504e:	f1c3 0317 	rsb	r3, r3, #23
 8015052:	4118      	asrs	r0, r3
 8015054:	2900      	cmp	r1, #0
 8015056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801505a:	bfb8      	it	lt
 801505c:	4240      	neglt	r0, r0
 801505e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8015062:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8015178 <__ieee754_powf+0x578>
 8015066:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801517c <__ieee754_powf+0x57c>
 801506a:	ee16 3a90 	vmov	r3, s13
 801506e:	f36f 030b 	bfc	r3, #0, #12
 8015072:	ee06 3a90 	vmov	s13, r3
 8015076:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801507a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801507e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015082:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8015180 <__ieee754_powf+0x580>
 8015086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801508a:	eee0 7a87 	vfma.f32	s15, s1, s14
 801508e:	eeb0 7a67 	vmov.f32	s14, s15
 8015092:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015096:	eef0 5a47 	vmov.f32	s11, s14
 801509a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801509e:	ee67 6a07 	vmul.f32	s13, s14, s14
 80150a2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80150a6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8015184 <__ieee754_powf+0x584>
 80150aa:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8015188 <__ieee754_powf+0x588>
 80150ae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80150b2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801518c <__ieee754_powf+0x58c>
 80150b6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80150ba:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8015190 <__ieee754_powf+0x590>
 80150be:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80150c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015194 <__ieee754_powf+0x594>
 80150c6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80150ca:	eeb0 6a47 	vmov.f32	s12, s14
 80150ce:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80150d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80150d6:	ee67 5a06 	vmul.f32	s11, s14, s12
 80150da:	ee36 6a66 	vsub.f32	s12, s12, s13
 80150de:	eee7 7a27 	vfma.f32	s15, s14, s15
 80150e2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80150e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80150ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80150ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80150f2:	ee10 3a10 	vmov	r3, s0
 80150f6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80150fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80150fe:	da06      	bge.n	801510e <__ieee754_powf+0x50e>
 8015100:	f000 f854 	bl	80151ac <scalbnf>
 8015104:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015108:	e592      	b.n	8014c30 <__ieee754_powf+0x30>
 801510a:	2000      	movs	r0, #0
 801510c:	e7a7      	b.n	801505e <__ieee754_powf+0x45e>
 801510e:	ee00 3a10 	vmov	s0, r3
 8015112:	e7f7      	b.n	8015104 <__ieee754_powf+0x504>
 8015114:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015118:	e58a      	b.n	8014c30 <__ieee754_powf+0x30>
 801511a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8015198 <__ieee754_powf+0x598>
 801511e:	e587      	b.n	8014c30 <__ieee754_powf+0x30>
 8015120:	eeb0 0a48 	vmov.f32	s0, s16
 8015124:	e584      	b.n	8014c30 <__ieee754_powf+0x30>
 8015126:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801512a:	f43f adbb 	beq.w	8014ca4 <__ieee754_powf+0xa4>
 801512e:	2502      	movs	r5, #2
 8015130:	eeb0 0a48 	vmov.f32	s0, s16
 8015134:	f000 f832 	bl	801519c <fabsf>
 8015138:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801513c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8015140:	4647      	mov	r7, r8
 8015142:	d003      	beq.n	801514c <__ieee754_powf+0x54c>
 8015144:	f1b8 0f00 	cmp.w	r8, #0
 8015148:	f47f addb 	bne.w	8014d02 <__ieee754_powf+0x102>
 801514c:	2c00      	cmp	r4, #0
 801514e:	bfbc      	itt	lt
 8015150:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8015154:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015158:	2e00      	cmp	r6, #0
 801515a:	f6bf ad69 	bge.w	8014c30 <__ieee754_powf+0x30>
 801515e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8015162:	ea58 0805 	orrs.w	r8, r8, r5
 8015166:	f47f adc7 	bne.w	8014cf8 <__ieee754_powf+0xf8>
 801516a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801516e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015172:	e55d      	b.n	8014c30 <__ieee754_powf+0x30>
 8015174:	ff800000 	.word	0xff800000
 8015178:	3f317218 	.word	0x3f317218
 801517c:	3f317200 	.word	0x3f317200
 8015180:	35bfbe8c 	.word	0x35bfbe8c
 8015184:	b5ddea0e 	.word	0xb5ddea0e
 8015188:	3331bb4c 	.word	0x3331bb4c
 801518c:	388ab355 	.word	0x388ab355
 8015190:	bb360b61 	.word	0xbb360b61
 8015194:	3e2aaaab 	.word	0x3e2aaaab
 8015198:	00000000 	.word	0x00000000

0801519c <fabsf>:
 801519c:	ee10 3a10 	vmov	r3, s0
 80151a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80151a4:	ee00 3a10 	vmov	s0, r3
 80151a8:	4770      	bx	lr
	...

080151ac <scalbnf>:
 80151ac:	ee10 3a10 	vmov	r3, s0
 80151b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80151b4:	d02b      	beq.n	801520e <scalbnf+0x62>
 80151b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80151ba:	d302      	bcc.n	80151c2 <scalbnf+0x16>
 80151bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80151c0:	4770      	bx	lr
 80151c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80151c6:	d123      	bne.n	8015210 <scalbnf+0x64>
 80151c8:	4b24      	ldr	r3, [pc, #144]	@ (801525c <scalbnf+0xb0>)
 80151ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8015260 <scalbnf+0xb4>
 80151ce:	4298      	cmp	r0, r3
 80151d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80151d4:	db17      	blt.n	8015206 <scalbnf+0x5a>
 80151d6:	ee10 3a10 	vmov	r3, s0
 80151da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80151de:	3a19      	subs	r2, #25
 80151e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80151e4:	4288      	cmp	r0, r1
 80151e6:	dd15      	ble.n	8015214 <scalbnf+0x68>
 80151e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8015264 <scalbnf+0xb8>
 80151ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8015268 <scalbnf+0xbc>
 80151f0:	ee10 3a10 	vmov	r3, s0
 80151f4:	eeb0 7a67 	vmov.f32	s14, s15
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	bfb8      	it	lt
 80151fc:	eef0 7a66 	vmovlt.f32	s15, s13
 8015200:	ee27 0a87 	vmul.f32	s0, s15, s14
 8015204:	4770      	bx	lr
 8015206:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801526c <scalbnf+0xc0>
 801520a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801520e:	4770      	bx	lr
 8015210:	0dd2      	lsrs	r2, r2, #23
 8015212:	e7e5      	b.n	80151e0 <scalbnf+0x34>
 8015214:	4410      	add	r0, r2
 8015216:	28fe      	cmp	r0, #254	@ 0xfe
 8015218:	dce6      	bgt.n	80151e8 <scalbnf+0x3c>
 801521a:	2800      	cmp	r0, #0
 801521c:	dd06      	ble.n	801522c <scalbnf+0x80>
 801521e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015222:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015226:	ee00 3a10 	vmov	s0, r3
 801522a:	4770      	bx	lr
 801522c:	f110 0f16 	cmn.w	r0, #22
 8015230:	da09      	bge.n	8015246 <scalbnf+0x9a>
 8015232:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801526c <scalbnf+0xc0>
 8015236:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8015270 <scalbnf+0xc4>
 801523a:	ee10 3a10 	vmov	r3, s0
 801523e:	eeb0 7a67 	vmov.f32	s14, s15
 8015242:	2b00      	cmp	r3, #0
 8015244:	e7d9      	b.n	80151fa <scalbnf+0x4e>
 8015246:	3019      	adds	r0, #25
 8015248:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801524c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015250:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8015274 <scalbnf+0xc8>
 8015254:	ee07 3a90 	vmov	s15, r3
 8015258:	e7d7      	b.n	801520a <scalbnf+0x5e>
 801525a:	bf00      	nop
 801525c:	ffff3cb0 	.word	0xffff3cb0
 8015260:	4c000000 	.word	0x4c000000
 8015264:	7149f2ca 	.word	0x7149f2ca
 8015268:	f149f2ca 	.word	0xf149f2ca
 801526c:	0da24260 	.word	0x0da24260
 8015270:	8da24260 	.word	0x8da24260
 8015274:	33000000 	.word	0x33000000

08015278 <with_errnof>:
 8015278:	b510      	push	{r4, lr}
 801527a:	ed2d 8b02 	vpush	{d8}
 801527e:	eeb0 8a40 	vmov.f32	s16, s0
 8015282:	4604      	mov	r4, r0
 8015284:	f7fc f8d2 	bl	801142c <__errno>
 8015288:	eeb0 0a48 	vmov.f32	s0, s16
 801528c:	ecbd 8b02 	vpop	{d8}
 8015290:	6004      	str	r4, [r0, #0]
 8015292:	bd10      	pop	{r4, pc}

08015294 <xflowf>:
 8015294:	b130      	cbz	r0, 80152a4 <xflowf+0x10>
 8015296:	eef1 7a40 	vneg.f32	s15, s0
 801529a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801529e:	2022      	movs	r0, #34	@ 0x22
 80152a0:	f7ff bfea 	b.w	8015278 <with_errnof>
 80152a4:	eef0 7a40 	vmov.f32	s15, s0
 80152a8:	e7f7      	b.n	801529a <xflowf+0x6>
	...

080152ac <__math_uflowf>:
 80152ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80152b4 <__math_uflowf+0x8>
 80152b0:	f7ff bff0 	b.w	8015294 <xflowf>
 80152b4:	10000000 	.word	0x10000000

080152b8 <__math_oflowf>:
 80152b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80152c0 <__math_oflowf+0x8>
 80152bc:	f7ff bfea 	b.w	8015294 <xflowf>
 80152c0:	70000000 	.word	0x70000000

080152c4 <__ieee754_sqrtf>:
 80152c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80152c8:	4770      	bx	lr
	...

080152cc <_init>:
 80152cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ce:	bf00      	nop
 80152d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152d2:	bc08      	pop	{r3}
 80152d4:	469e      	mov	lr, r3
 80152d6:	4770      	bx	lr

080152d8 <_fini>:
 80152d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152da:	bf00      	nop
 80152dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152de:	bc08      	pop	{r3}
 80152e0:	469e      	mov	lr, r3
 80152e2:	4770      	bx	lr
